// MIR for `__client_accounts_idl_create_accounts::<impl at programs/switchboard-on-demand/src/lib.rs:12:1: 12:11>::serialize` after PreCodegen

fn __client_accounts_idl_create_accounts::<impl at programs/switchboard-on-demand/src/lib.rs:12:1: 12:11>::serialize(_1: &__client_accounts_idl_create_accounts::IdlCreateAccounts, _2: &mut W) -> Result<(), std::io::Error> {
    debug self => _1;
    debug writer => _2;
    let mut _0: std::result::Result<(), std::io::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _5: std::result::Result<(), std::io::Error>;
    let mut _6: &anchor_lang::prelude::Pubkey;
    let _7: &anchor_lang::prelude::Pubkey;
    let mut _8: &mut W;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _16: std::result::Result<(), std::io::Error>;
    let mut _17: &anchor_lang::prelude::Pubkey;
    let _18: &anchor_lang::prelude::Pubkey;
    let mut _19: &mut W;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _24: ();
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _27: std::result::Result<(), std::io::Error>;
    let mut _28: &anchor_lang::prelude::Pubkey;
    let _29: &anchor_lang::prelude::Pubkey;
    let mut _30: &mut W;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _35: ();
    let _36: ();
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _38: std::result::Result<(), std::io::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut W;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _46: ();
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>>;
    let mut _49: std::result::Result<(), std::io::Error>;
    let mut _50: &anchor_lang::prelude::Pubkey;
    let _51: &anchor_lang::prelude::Pubkey;
    let mut _52: &mut W;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _57: ();
    let mut _58: ();
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    let mut _65: isize;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _32;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _35;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _43;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _46;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _54;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _57;
        scope 20 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _6 = &(*_7);
        StorageLive(_8);
        _8 = &mut (*_2);
        _5 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _6, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <Result<(), std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb28];
    }

    bb2: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_4 as Continue).0: ());
        _3 = _13;
        StorageDead(_13);
        _59 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &((*_1).1: anchor_lang::prelude::Pubkey);
        _17 = &(*_18);
        StorageLive(_19);
        _19 = &mut (*_2);
        _16 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _17, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _77 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb27;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <Result<(), std::io::Error> as Try>::branch(move _16) -> [return: bb8, unwind: bb28];
    }

    bb8: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_15 as Continue).0: ());
        _14 = _24;
        StorageDead(_24);
        _61 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &((*_1).2: anchor_lang::prelude::Pubkey);
        _28 = &(*_29);
        StorageLive(_30);
        _30 = &mut (*_2);
        _27 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _28, move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _23) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _75 = discriminant(_15);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb27;
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <Result<(), std::io::Error> as Try>::branch(move _27) -> [return: bb13, unwind: bb28];
    }

    bb13: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_26 as Continue).0: ());
        _25 = _35;
        StorageDead(_35);
        _63 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &((*_1).3: anchor_lang::prelude::Pubkey);
        _39 = &(*_40);
        StorageLive(_41);
        _41 = &mut (*_2);
        _38 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _39, move _41) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _34) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        _73 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb27;
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <Result<(), std::io::Error> as Try>::branch(move _38) -> [return: bb18, unwind: bb28];
    }

    bb18: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_37 as Continue).0: ());
        _36 = _46;
        StorageDead(_46);
        _65 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &((*_1).4: anchor_lang::prelude::Pubkey);
        _50 = &(*_51);
        StorageLive(_52);
        _52 = &mut (*_2);
        _49 = <anchor_lang::prelude::Pubkey as BorshSerialize>::serialize::<W>(move _50, move _52) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_43);
        _43 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _45) -> [return: bb21, unwind: bb30];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_43);
        _71 = discriminant(_37);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb27;
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_50);
        _48 = <Result<(), std::io::Error> as Try>::branch(move _49) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        StorageDead(_49);
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_57);
        _57 = ((_48 as Continue).0: ());
        _47 = _57;
        StorageDead(_57);
        _67 = discriminant(_48);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_58);
        _58 = ();
        _0 = Result::<(), std::io::Error>::Ok(move _58);
        StorageDead(_58);
        goto -> bb27;
    }

    bb25: {
        StorageLive(_54);
        _54 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_56);
        _56 = move _54;
        _0 = <Result<(), std::io::Error> as FromResidual<Result<Infallible, std::io::Error>>>::from_residual(move _56) -> [return: bb26, unwind: bb29];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_54);
        _69 = discriminant(_48);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb27;
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        resume;
    }

    bb29 (cleanup): {
        _79 = discriminant(_48);
        goto -> bb28;
    }

    bb30 (cleanup): {
        _80 = discriminant(_37);
        goto -> bb28;
    }

    bb31 (cleanup): {
        _81 = discriminant(_26);
        goto -> bb28;
    }

    bb32 (cleanup): {
        _82 = discriminant(_15);
        goto -> bb28;
    }

    bb33 (cleanup): {
        _83 = discriminant(_4);
        goto -> bb28;
    }
}
