digraph Mir_0_31 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PullFeedAccountData::median_result_land_slot(_1: &amp;ReErased PullFeedAccountData) -&gt; u64<br align="left"/>let _2: OracleSubmission;<br align="left"/>let _3: usize;<br align="left"/>let mut _4: u8;<br align="left"/>let mut _5: usize;<br align="left"/>let mut _6: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug submission =&gt; _2;<br align="left"/>>;
    bb0__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = (((*_1).15: CurrentResult).7: u8)<br/>_3 = move _4 as usize (IntToInt)<br/>StorageDead(_4)<br/>_5 = Len(((*_1).0: [OracleSubmission; 32]))<br/>_6 = Lt(_3, _5)<br/></td></tr><tr><td align="left">assert(move _6, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _5, _3)</td></tr></table>>];
    bb1__0_31 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_2 = ((*_1).0: [OracleSubmission; 32])[_3]<br/>StorageDead(_3)<br/>_0 = (_2.2: u64)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_31 -> bb1__0_31 [label="success"];
}
