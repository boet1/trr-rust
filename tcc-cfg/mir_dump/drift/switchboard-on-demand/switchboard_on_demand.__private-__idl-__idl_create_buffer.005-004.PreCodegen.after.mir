// MIR for `__idl_create_buffer` after PreCodegen

fn __idl_create_buffer(_1: &anchor_lang::prelude::Pubkey, _2: &mut __idl::IdlCreateBuffer<'_>) -> Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: &str;
    let _5: &str;
    let mut _6: &mut anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _7: anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _9: &anchor_lang::prelude::Signer<'_>;
    let mut _10: &mut __private::__idl::IdlAccount;
    let mut _11: &mut anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>;
    let mut _12: ();
    let mut _13: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug buffer => _6;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = const "Instruction: IdlCreateBuffer";
        _4 = &(*_5);
        _3 = solana_program::log::sol_log(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_6);
        _6 = &mut ((*_2).0: anchor_lang::prelude::Account<'_, __private::__idl::IdlAccount>);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_2).1: anchor_lang::prelude::Signer<'_>);
        _8 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _13 = deref_copy ((*_8).0: &anchor_lang::prelude::Pubkey);
        _7 = (*_13);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut (*_6);
        _10 = <anchor_lang::prelude::Account<'_, __idl::IdlAccount> as DerefMut>::deref_mut(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        ((*_10).0: anchor_lang::prelude::Pubkey) = move _7;
        StorageDead(_7);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_12);
        _12 = ();
        _0 = Result::<(), anchor_lang::error::Error>::Ok(move _12);
        StorageDead(_12);
        StorageDead(_6);
        return;
    }
}
