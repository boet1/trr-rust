// MIR for `entry` before PreCodegen

fn entry(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> Result<(), anchor_lang::prelude::ProgramError> {
    debug program_id => _1;
    debug accounts => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let mut _6: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _7: &[u8];
    let mut _8: {closure@programs/switchboard-on-demand/src/lib.rs:12:1: 12:11};

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        StorageLive(_6);
        _6 = &(*_2);
        StorageLive(_7);
        _7 = &(*_3);
        _4 = try_entry(move _5, move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_8);
        _8 = {closure@programs/switchboard-on-demand/src/lib.rs:12:1: 12:11};
        _0 = Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::prelude::ProgramError, {closure@programs/switchboard-on-demand/src/lib.rs:12:1: 12:11}>(move _4, move _8) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_4);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
