// MIR for `dispatch` after PreCodegen

fn dispatch(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    debug data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: &[u8];
    let _7: ();
    let mut _8: &mut [u8];
    let mut _9: &mut [u8; 8];
    let mut _10: &[u8];
    let _11: &[u8];
    let _12: &[u8];
    let mut _13: &[u8];
    let mut _14: std::ops::RangeTo<usize>;
    let mut _15: &[u8];
    let _16: &[u8];
    let _17: &[u8];
    let mut _18: &[u8];
    let mut _19: std::ops::RangeFrom<usize>;
    let mut _20: &anchor_lang::prelude::Pubkey;
    let mut _21: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _22: &[u8];
    let _23: &&[u8];
    let mut _24: anchor_lang::error::Error;
    let mut _25: anchor_lang::error::ErrorCode;
    let mut _26: anchor_lang::error::Error;
    let mut _27: anchor_lang::error::ErrorCode;
    let mut _28: &[u8];
    scope 1 {
        debug ix_data => _4;
        let _5: [u8; 8];
        let mut _6: [u8; 8];
        scope 2 {
            debug sighash => _5;
        }
        scope 3 {
            debug sighash => _6;
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = &(*_3);
        StorageLive(_5);
        StorageLive(_6);
        _6 = [const 0_u8; 8];
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &mut _6;
        _8 = move _9 as &mut [u8] (PointerCoercion(Unsize));
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_4);
        StorageLive(_14);
        _14 = RangeTo::<usize> { end: const 8_usize };
        _12 = <[u8] as Index<RangeTo<usize>>>::index(move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        _11 = &(*_12);
        _10 = &(*_11);
        _7 = core::slice::<impl [u8]>::copy_from_slice(move _8, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &(*_4);
        StorageLive(_19);
        _19 = RangeFrom::<usize> { start: const 8_usize };
        _17 = <[u8] as Index<RangeFrom<usize>>>::index(move _18, move _19) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = &(*_17);
        _15 = &(*_16);
        _4 = move _15;
        StorageDead(_15);
        StorageDead(_17);
        StorageDead(_16);
        _5 = _6;
        StorageDead(_6);
        switchInt(_5[0 of 8]) -> [64: bb4, 228: bb12, otherwise: bb11];
    }

    bb4: {
        switchInt(_5[1 of 8]) -> [244: bb5, otherwise: bb11];
    }

    bb5: {
        switchInt(_5[2 of 8]) -> [188: bb6, otherwise: bb11];
    }

    bb6: {
        switchInt(_5[3 of 8]) -> [120: bb7, otherwise: bb11];
    }

    bb7: {
        switchInt(_5[4 of 8]) -> [167: bb8, otherwise: bb11];
    }

    bb8: {
        switchInt(_5[5 of 8]) -> [233: bb9, otherwise: bb11];
    }

    bb9: {
        switchInt(_5[6 of 8]) -> [105: bb10, otherwise: bb11];
    }

    bb10: {
        switchInt(_5[7 of 8]) -> [10: bb19, otherwise: bb11];
    }

    bb11: {
        StorageLive(_26);
        StorageLive(_27);
        _27 = InstructionFallbackNotFound;
        _26 = <ErrorCode as Into<anchor_lang::error::Error>>::into(move _27) -> [return: bb23, unwind continue];
    }

    bb12: {
        switchInt(_5[1 of 8]) -> [69: bb13, otherwise: bb11];
    }

    bb13: {
        switchInt(_5[2 of 8]) -> [165: bb14, otherwise: bb11];
    }

    bb14: {
        switchInt(_5[3 of 8]) -> [46: bb15, otherwise: bb11];
    }

    bb15: {
        switchInt(_5[4 of 8]) -> [81: bb16, otherwise: bb11];
    }

    bb16: {
        switchInt(_5[5 of 8]) -> [203: bb17, otherwise: bb11];
    }

    bb17: {
        switchInt(_5[6 of 8]) -> [154: bb18, otherwise: bb11];
    }

    bb18: {
        switchInt(_5[7 of 8]) -> [29: bb21, otherwise: bb11];
    }

    bb19: {
        StorageLive(_20);
        _20 = &(*_1);
        StorageLive(_21);
        _21 = &(*_2);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &_4;
        _28 = deref_copy (*_23);
        _22 = &(*_28);
        _0 = __idl_dispatch(move _20, move _21, move _22) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_23);
        goto -> bb24;
    }

    bb21: {
        StorageLive(_24);
        StorageLive(_25);
        _25 = EventInstructionStub;
        _24 = <ErrorCode as Into<anchor_lang::error::Error>>::into(move _25) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_25);
        _0 = Result::<(), anchor_lang::error::Error>::Err(move _24);
        StorageDead(_24);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_27);
        _0 = Result::<(), anchor_lang::error::Error>::Err(move _26);
        StorageDead(_26);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
