// MIR for `<impl at programs/switchboard/src/lib.rs:28:10: 28:17>::default` after PreCodegen

fn <impl at programs/switchboard/src/lib.rs:28:10: 28:17>::default() -> AggregatorRound {
    let mut _0: AggregatorRound;
    let mut _1: u32;
    let mut _2: u32;
    let mut _3: bool;
    let mut _4: u64;
    let mut _5: i64;
    let mut _6: SwitchboardDecimal;
    let mut _7: SwitchboardDecimal;
    let mut _8: SwitchboardDecimal;
    let mut _9: SwitchboardDecimal;
    let mut _10: [anchor_lang::prelude::Pubkey; 16];
    let mut _11: [SwitchboardDecimal; 16];
    let mut _12: [i64; 16];
    let mut _13: [bool; 16];
    let mut _14: [bool; 16];

    bb0: {
        StorageLive(_1);
        _1 = <u32 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <u32 as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <bool as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <u64 as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <i64 as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <SwitchboardDecimal as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <SwitchboardDecimal as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <SwitchboardDecimal as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_9);
        _9 = <SwitchboardDecimal as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_10);
        _10 = <[anchor_lang::prelude::Pubkey; 16] as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_11);
        _11 = <[SwitchboardDecimal; 16] as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_12);
        _12 = <[i64; 16] as Default>::default() -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageLive(_13);
        _13 = <[bool; 16] as Default>::default() -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageLive(_14);
        _14 = <[bool; 16] as Default>::default() -> [return: bb14, unwind continue];
    }

    bb14: {
        _0 = AggregatorRound { num_success: move _1, num_error: move _2, is_closed: move _3, round_open_slot: move _4, round_open_timestamp: move _5, result: move _6, std_deviation: move _7, min_response: move _8, max_response: move _9, oracle_pubkeys_data: move _10, medians_data: move _11, current_payout: move _12, medians_fulfilled: move _13, errors_fulfilled: move _14 };
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
