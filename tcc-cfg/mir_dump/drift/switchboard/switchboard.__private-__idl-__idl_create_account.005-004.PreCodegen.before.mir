// MIR for `__idl_create_account` before PreCodegen

fn __idl_create_account(_1: &anchor_lang::prelude::Pubkey, _2: &mut __idl::IdlCreateAccounts<'_>, _3: u64) -> Result<(), anchor_lang::error::Error> {
    debug program_id => _1;
    debug accounts => _2;
    debug data_len => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let _7: ();
    let mut _8: bool;
    let mut _9: &&anchor_lang::prelude::Pubkey;
    let mut _10: &&anchor_lang::prelude::Pubkey;
    let mut _11: !;
    let mut _12: anchor_lang::error::Error;
    let mut _13: anchor_lang::error::ErrorCode;
    let _14: &anchor_lang::prelude::Pubkey;
    let mut _17: (anchor_lang::prelude::Pubkey, u8);
    let mut _18: &[&[u8]];
    let mut _19: &[&[u8]; 0];
    let _20: &[&[u8]; 0];
    let _21: [&[u8]; 0];
    let mut _22: &anchor_lang::prelude::Pubkey;
    let mut _26: std::result::Result<anchor_lang::prelude::Pubkey, anchor_lang::solana_program::pubkey::PubkeyError>;
    let mut _27: &anchor_lang::prelude::Pubkey;
    let _28: &anchor_lang::prelude::Pubkey;
    let mut _29: &str;
    let mut _30: &anchor_lang::prelude::Pubkey;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: (usize, bool);
    let mut _36: (usize, bool);
    let mut _37: usize;
    let mut _38: u64;
    let mut _39: (usize, bool);
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _42: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _49: &anchor_lang::prelude::Rent;
    let mut _50: usize;
    let _52: [&[u8]; 1];
    let mut _53: &[u8];
    let _54: &[u8];
    let mut _55: &[u8; 1];
    let _56: [u8; 1];
    let mut _57: u8;
    let mut _58: std::ops::RangeFull;
    let mut _60: &anchor_lang::prelude::Pubkey;
    let mut _61: &anchor_lang::prelude::Pubkey;
    let _62: &anchor_lang::prelude::Pubkey;
    let mut _63: &anchor_lang::prelude::Pubkey;
    let _64: &anchor_lang::prelude::Pubkey;
    let mut _65: &str;
    let mut _66: u64;
    let mut _67: u64;
    let mut _68: usize;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let _70: ();
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>>;
    let mut _72: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _73: &anchor_lang::solana_program::instruction::Instruction;
    let _74: &anchor_lang::solana_program::instruction::Instruction;
    let mut _75: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _76: &[anchor_lang::prelude::AccountInfo<'_>; 4];
    let _77: &[anchor_lang::prelude::AccountInfo<'_>; 4];
    let _78: [anchor_lang::prelude::AccountInfo<'_>; 4];
    let mut _79: anchor_lang::prelude::AccountInfo<'_>;
    let mut _80: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _81: anchor_lang::prelude::AccountInfo<'_>;
    let mut _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: anchor_lang::prelude::AccountInfo<'_>;
    let mut _84: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _85: anchor_lang::prelude::AccountInfo<'_>;
    let mut _86: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _87: &[&[&[u8]]];
    let mut _88: &[&[&[u8]]; 1];
    let _89: &[&[&[u8]]; 1];
    let _90: [&[&[u8]]; 1];
    let mut _91: &[&[u8]];
    let mut _92: &[&[u8]; 1];
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _101: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _102: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _109: &&mut [u8];
    let mut _110: &std::cell::Ref<'_, &mut [u8]>;
    let _111: &std::cell::Ref<'_, &mut [u8]>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, __private::__idl::IdlAccount>;
    let mut _113: std::result::Result<__private::__idl::IdlAccount, anchor_lang::error::Error>;
    let mut _114: &mut &[u8];
    let mut _115: &mut &[u8];
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _121: anchor_lang::prelude::Pubkey;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::RefMut<'_, &mut [u8]>>;
    let mut _124: std::result::Result<std::cell::RefMut<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _125: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _132: &mut &mut [u8];
    let mut _133: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _134: &mut std::cell::RefMut<'_, &mut [u8]>;
    let mut _136: &mut [u8];
    let _137: ();
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _139: std::result::Result<(), anchor_lang::error::Error>;
    let mut _140: &__private::__idl::IdlAccount;
    let mut _141: &mut std::io::Cursor<&mut [u8]>;
    let mut _142: &mut std::io::Cursor<&mut [u8]>;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _148: ();
    let mut _150: &mut [u8];
    let mut _151: &anchor_lang::prelude::Pubkey;
    let mut _152: &mut [u8];
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    scope 1 {
        debug from => _14;
        let _15: anchor_lang::prelude::Pubkey;
        let _16: u8;
        let mut _149: &[&[u8]; 0];
        scope 2 {
            debug base => _15;
            debug nonce => _16;
            let _23: &str;
            scope 3 {
                debug seed => _23;
                let _24: &anchor_lang::prelude::Pubkey;
                scope 4 {
                    debug owner => _24;
                    let _25: anchor_lang::prelude::Pubkey;
                    scope 5 {
                        debug to => _25;
                        let _31: usize;
                        scope 6 {
                            debug space => _31;
                            let _40: anchor_lang::prelude::Rent;
                            let _44: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _47: anchor_lang::prelude::Rent;
                            scope 7 {
                                debug rent => _40;
                                let _48: u64;
                                scope 12 {
                                    debug lamports => _48;
                                    let _51: &[&[u8]; 1];
                                    scope 13 {
                                        debug seeds => _51;
                                        let _59: anchor_lang::solana_program::instruction::Instruction;
                                        scope 14 {
                                            debug ix => _59;
                                            let _94: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _97: ();
                                            let mut _98: __private::__idl::IdlAccount;
                                            let mut _99: std::cell::Ref<'_, &mut [u8]>;
                                            let _104: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _107: std::cell::Ref<'_, &mut [u8]>;
                                            scope 15 {
                                                debug residual => _94;
                                                scope 16 {
                                                }
                                            }
                                            scope 17 {
                                                debug val => _97;
                                                scope 18 {
                                                }
                                            }
                                            scope 19 {
                                                debug idl_account => _98;
                                                let mut _122: std::cell::RefMut<'_, &mut [u8]>;
                                                let _127: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _130: std::cell::RefMut<'_, &mut [u8]>;
                                                scope 30 {
                                                    debug data => _122;
                                                    let _131: &mut [u8];
                                                    scope 35 {
                                                        debug dst => _131;
                                                        let mut _135: std::io::Cursor<&mut [u8]>;
                                                        scope 36 {
                                                            debug cursor => _135;
                                                            let _144: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _147: ();
                                                            scope 37 {
                                                                debug residual => _144;
                                                                scope 38 {
                                                                }
                                                            }
                                                            scope 39 {
                                                                debug val => _147;
                                                                scope 40 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 31 {
                                                    debug residual => _127;
                                                    scope 32 {
                                                    }
                                                }
                                                scope 33 {
                                                    debug val => _130;
                                                    scope 34 {
                                                    }
                                                }
                                            }
                                            scope 20 {
                                                debug account_data => _99;
                                                let mut _108: &[u8];
                                                scope 25 {
                                                    debug account_data_slice => _108;
                                                    let _117: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _120: __private::__idl::IdlAccount;
                                                    scope 26 {
                                                        debug residual => _117;
                                                        scope 27 {
                                                        }
                                                    }
                                                    scope 28 {
                                                        debug val => _120;
                                                        scope 29 {
                                                        }
                                                    }
                                                }
                                            }
                                            scope 21 {
                                                debug residual => _104;
                                                scope 22 {
                                                }
                                            }
                                            scope 23 {
                                                debug val => _107;
                                                scope 24 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 8 {
                                debug residual => _44;
                                scope 9 {
                                }
                            }
                            scope 10 {
                                debug val => _47;
                                scope 11 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _154 = const false;
        _153 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Instruction: IdlCreateAccount";
        _5 = &(*_6);
        _4 = anchor_lang::solana_program::log::sol_log(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_1;
        StorageLive(_10);
        _10 = &(((*_2).4: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        _8 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _8) -> [0: bb5, otherwise: bb3];
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        _13 = IdlInstructionInvalidProgram;
        _12 = <ErrorCode as Into<anchor_lang::error::Error>>::into(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        _0 = Result::<(), anchor_lang::error::Error>::Err(move _12);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb66;
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_14);
        _14 = (((*_2).0: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _149 = const _;
        _20 = &(*_149);
        _19 = &(*_20);
        _18 = move _19 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        _22 = &(*_1);
        _17 = anchor_lang::prelude::Pubkey::find_program_address(move _18, move _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_22);
        StorageDead(_18);
        StorageLive(_15);
        _15 = (_17.0: anchor_lang::prelude::Pubkey);
        StorageLive(_16);
        _16 = (_17.1: u8);
        StorageDead(_20);
        StorageDead(_17);
        StorageLive(_23);
        _23 = __idl::IdlAccount::seed() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_24);
        _24 = (((*_2).4: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_15;
        _27 = &(*_28);
        StorageLive(_29);
        _29 = &(*_23);
        StorageLive(_30);
        _30 = &(*_24);
        _26 = anchor_lang::prelude::Pubkey::create_with_seed(move _27, move _29, move _30) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        _25 = Result::<anchor_lang::prelude::Pubkey, PubkeyError>::unwrap(move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_28);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _35 = CheckedAdd(const 8_usize, const 32_usize);
        assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", const 8_usize, const 32_usize) -> [success: bb10, unwind continue];
    }

    bb10: {
        _34 = move (_35.0: usize);
        _36 = CheckedAdd(_34, const 4_usize);
        assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", move _34, const 4_usize) -> [success: bb11, unwind continue];
    }

    bb11: {
        _33 = move (_36.0: usize);
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _3;
        _37 = move _38 as usize (IntToInt);
        StorageDead(_38);
        _39 = CheckedAdd(_33, _37);
        assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", move _33, move _37) -> [success: bb12, unwind continue];
    }

    bb12: {
        _32 = move (_39.0: usize);
        StorageDead(_37);
        StorageDead(_33);
        _31 = std::cmp::min::<usize>(move _32, const 10000_usize) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb14, unwind continue];
    }

    bb14: {
        _41 = <Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _42) -> [return: bb15, unwind: bb75];
    }

    bb15: {
        StorageDead(_42);
        _43 = discriminant(_41);
        switchInt(move _43) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_47);
        _47 = ((_41 as Continue).0: anchor_lang::prelude::Rent);
        _40 = _47;
        StorageDead(_47);
        _155 = discriminant(_41);
        StorageDead(_41);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &_40;
        StorageLive(_50);
        _50 = _31;
        _48 = anchor_lang::prelude::Rent::minimum_balance(move _49, move _50) -> [return: bb20, unwind continue];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_44);
        _44 = move ((_41 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <Result<(), anchor_lang::error::Error> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _46) -> [return: bb19, unwind: bb81];
    }

    bb19: {
        StorageDead(_46);
        StorageDead(_44);
        _177 = discriminant(_41);
        StorageDead(_41);
        goto -> bb65;
    }

    bb20: {
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _16;
        _56 = [move _57];
        _55 = &_56;
        StorageDead(_57);
        StorageLive(_58);
        _58 = RangeFull;
        _54 = <[u8; 1] as Index<RangeFull>>::index(move _55, move _58) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_58);
        StorageDead(_55);
        _53 = &(*_54);
        _52 = [move _53];
        StorageDead(_53);
        _51 = &_52;
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_14);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_25;
        _61 = &(*_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_15;
        _63 = &(*_64);
        StorageLive(_65);
        _65 = &(*_23);
        StorageLive(_66);
        _66 = _48;
        StorageLive(_67);
        StorageLive(_68);
        _68 = _31;
        _67 = move _68 as u64 (IntToInt);
        StorageDead(_68);
        StorageLive(_69);
        _69 = &(*_24);
        _59 = anchor_lang::solana_program::system_instruction::create_account_with_seed(move _60, move _61, move _63, move _65, move _66, move _67, move _69) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_64);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &_59;
        _73 = &(*_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &((*_2).0: anchor_lang::prelude::AccountInfo<'_>);
        _79 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _80) -> [return: bb23, unwind: bb74];
    }

    bb23: {
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &((*_2).1: anchor_lang::prelude::AccountInfo<'_>);
        _81 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _82) -> [return: bb24, unwind: bb73];
    }

    bb24: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_2).2: anchor_lang::prelude::AccountInfo<'_>);
        _83 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _84) -> [return: bb25, unwind: bb72];
    }

    bb25: {
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &((*_2).3: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _85 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _86) -> [return: bb26, unwind: bb71];
    }

    bb26: {
        StorageDead(_86);
        _78 = [move _79, move _81, move _83, move _85];
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_51);
        _91 = move _92 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_92);
        _90 = [move _91];
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = move _88 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_88);
        _72 = invoke_signed(move _73, move _75, move _87) -> [return: bb27, unwind: bb70];
    }

    bb27: {
        StorageDead(_87);
        StorageDead(_75);
        StorageDead(_73);
        _71 = <Result<(), anchor_lang::prelude::ProgramError> as Try>::branch(move _72) -> [return: bb28, unwind: bb70];
    }

    bb28: {
        StorageDead(_72);
        _93 = discriminant(_71);
        switchInt(move _93) -> [0: bb29, 1: bb30, otherwise: bb17];
    }

    bb29: {
        StorageLive(_97);
        _97 = ((_71 as Continue).0: ());
        _70 = _97;
        StorageDead(_97);
        _157 = discriminant(_71);
        StorageDead(_90);
        StorageDead(_89);
        drop(_78) -> [return: bb32, unwind: bb74];
    }

    bb30: {
        StorageLive(_94);
        _94 = move ((_71 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_96);
        _96 = move _94;
        _0 = <Result<(), anchor_lang::error::Error> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _96) -> [return: bb31, unwind: bb80];
    }

    bb31: {
        StorageDead(_96);
        StorageDead(_94);
        _175 = discriminant(_71);
        StorageDead(_90);
        StorageDead(_89);
        drop(_78) -> [return: bb62, unwind: bb74];
    }

    bb32: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &((*_2).1: anchor_lang::prelude::AccountInfo<'_>);
        _101 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _102) -> [return: bb33, unwind: bb74];
    }

    bb33: {
        StorageDead(_102);
        _100 = <Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _101) -> [return: bb34, unwind: bb74];
    }

    bb34: {
        StorageDead(_101);
        _103 = discriminant(_100);
        switchInt(move _103) -> [0: bb35, 1: bb36, otherwise: bb17];
    }

    bb35: {
        StorageLive(_107);
        _107 = move ((_100 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _99 = move _107;
        StorageDead(_107);
        _159 = discriminant(_100);
        StorageDead(_100);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_99;
        _110 = &(*_111);
        _109 = <Ref<'_, &mut [u8]> as Deref>::deref(move _110) -> [return: bb38, unwind: bb69];
    }

    bb36: {
        StorageLive(_104);
        _104 = move ((_100 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_106);
        _106 = move _104;
        _0 = <Result<(), anchor_lang::error::Error> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _106) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        StorageDead(_106);
        StorageDead(_104);
        _173 = discriminant(_100);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb61;
    }

    bb38: {
        _150 = deref_copy (*_109);
        _108 = &(*_150);
        StorageDead(_110);
        StorageDead(_111);
        StorageDead(_109);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &mut _108;
        _114 = &mut (*_115);
        _113 = <__idl::IdlAccount as anchor_lang::AccountDeserialize>::try_deserialize_unchecked(move _114) -> [return: bb39, unwind: bb69];
    }

    bb39: {
        StorageDead(_114);
        _112 = <Result<__idl::IdlAccount, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb40, unwind: bb69];
    }

    bb40: {
        _153 = const true;
        _154 = const true;
        StorageDead(_113);
        _116 = discriminant(_112);
        switchInt(move _116) -> [0: bb41, 1: bb42, otherwise: bb17];
    }

    bb41: {
        StorageLive(_120);
        _120 = move ((_112 as Continue).0: __private::__idl::IdlAccount);
        _98 = move _120;
        StorageDead(_120);
        StorageDead(_108);
        drop(_99) -> [return: bb44, unwind: bb78];
    }

    bb42: {
        StorageLive(_117);
        _117 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_119);
        _119 = move _117;
        _0 = <Result<(), anchor_lang::error::Error> as FromResidual<Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _119) -> [return: bb43, unwind: bb68];
    }

    bb43: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_108);
        drop(_99) -> [return: bb60, unwind: bb78];
    }

    bb44: {
        StorageDead(_99);
        _161 = discriminant(_112);
        StorageDead(_115);
        _153 = const false;
        _154 = const false;
        StorageDead(_112);
        StorageLive(_121);
        _151 = deref_copy (((*_2).0: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        _121 = (*_151);
        (_98.0: anchor_lang::prelude::Pubkey) = move _121;
        StorageDead(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &((*_2).1: anchor_lang::prelude::AccountInfo<'_>);
        _124 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_mut_data(move _125) -> [return: bb45, unwind: bb74];
    }

    bb45: {
        StorageDead(_125);
        _123 = <Result<RefMut<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _124) -> [return: bb46, unwind: bb74];
    }

    bb46: {
        StorageDead(_124);
        _126 = discriminant(_123);
        switchInt(move _126) -> [0: bb47, 1: bb48, otherwise: bb17];
    }

    bb47: {
        StorageLive(_130);
        _130 = move ((_123 as Continue).0: std::cell::RefMut<'_, &mut [u8]>);
        _122 = move _130;
        StorageDead(_130);
        _163 = discriminant(_123);
        StorageDead(_123);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &mut _122;
        _133 = &mut (*_134);
        _132 = <RefMut<'_, &mut [u8]> as DerefMut>::deref_mut(move _133) -> [return: bb50, unwind: bb67];
    }

    bb48: {
        StorageLive(_127);
        _127 = move ((_123 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_129);
        _129 = move _127;
        _0 = <Result<(), anchor_lang::error::Error> as FromResidual<Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _129) -> [return: bb49, unwind: bb77];
    }

    bb49: {
        StorageDead(_129);
        StorageDead(_127);
        _169 = discriminant(_123);
        StorageDead(_123);
        goto -> bb59;
    }

    bb50: {
        _152 = deref_copy (*_132);
        _131 = &mut (*_152);
        StorageDead(_133);
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_135);
        StorageLive(_136);
        _136 = move _131;
        _135 = std::io::Cursor::<&mut [u8]>::new(move _136) -> [return: bb51, unwind: bb67];
    }

    bb51: {
        StorageDead(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &_98;
        StorageLive(_141);
        StorageLive(_142);
        _142 = &mut _135;
        _141 = &mut (*_142);
        _139 = <__idl::IdlAccount as anchor_lang::AccountSerialize>::try_serialize::<std::io::Cursor<&mut [u8]>>(move _140, move _141) -> [return: bb52, unwind: bb67];
    }

    bb52: {
        StorageDead(_141);
        StorageDead(_140);
        _138 = <Result<(), anchor_lang::error::Error> as Try>::branch(move _139) -> [return: bb53, unwind: bb67];
    }

    bb53: {
        StorageDead(_139);
        _143 = discriminant(_138);
        switchInt(move _143) -> [0: bb54, 1: bb55, otherwise: bb17];
    }

    bb54: {
        StorageLive(_147);
        _147 = ((_138 as Continue).0: ());
        _137 = _147;
        StorageDead(_147);
        _165 = discriminant(_138);
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_148);
        _148 = ();
        _0 = Result::<(), anchor_lang::error::Error>::Ok(move _148);
        StorageDead(_148);
        StorageDead(_135);
        StorageDead(_131);
        drop(_122) -> [return: bb57, unwind: bb74];
    }

    bb55: {
        StorageLive(_144);
        _144 = move ((_138 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_146);
        _146 = move _144;
        _0 = <Result<(), anchor_lang::error::Error> as FromResidual<Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _146) -> [return: bb56, unwind: bb76];
    }

    bb56: {
        StorageDead(_146);
        StorageDead(_144);
        _167 = discriminant(_138);
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_131);
        drop(_122) -> [return: bb59, unwind: bb74];
    }

    bb57: {
        StorageDead(_122);
        StorageDead(_98);
        drop(_59) -> [return: bb58, unwind: bb75];
    }

    bb58: {
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_40);
        StorageDead(_31);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb66;
    }

    bb59: {
        StorageDead(_122);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_99);
        _171 = discriminant(_112);
        StorageDead(_115);
        _153 = const false;
        _154 = const false;
        StorageDead(_112);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_98);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb63;
    }

    bb63: {
        drop(_59) -> [return: bb64, unwind: bb75];
    }

    bb64: {
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_40);
        StorageDead(_31);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb66;
    }

    bb66: {
        return;
    }

    bb67 (cleanup): {
        drop(_122) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb68 (cleanup): {
        drop(_99) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        drop(_99) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_78) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_83) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_81) -> [return: bb73, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_79) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_59) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        resume;
    }

    bb76 (cleanup): {
        _179 = discriminant(_138);
        goto -> bb67;
    }

    bb77 (cleanup): {
        _180 = discriminant(_123);
        goto -> bb74;
    }

    bb78 (cleanup): {
        _181 = discriminant(_112);
        goto -> bb74;
    }

    bb79 (cleanup): {
        _182 = discriminant(_100);
        goto -> bb74;
    }

    bb80 (cleanup): {
        _183 = discriminant(_71);
        goto -> bb70;
    }

    bb81 (cleanup): {
        _184 = discriminant(_41);
        goto -> bb75;
    }
}
