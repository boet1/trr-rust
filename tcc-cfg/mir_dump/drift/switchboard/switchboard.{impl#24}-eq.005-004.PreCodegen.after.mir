// MIR for `<impl at programs/switchboard/src/lib.rs:28:19: 28:28>::eq` after PreCodegen

fn <impl at programs/switchboard/src/lib.rs:28:19: 28:28>::eq(_1: &AggregatorRound, _2: &AggregatorRound) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u32;
    let mut _5: u32;
    let mut _6: bool;
    let mut _7: u32;
    let mut _8: u32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: bool;
    let mut _16: i64;
    let mut _17: i64;
    let mut _18: bool;
    let mut _19: &SwitchboardDecimal;
    let _20: SwitchboardDecimal;
    let mut _21: &SwitchboardDecimal;
    let _22: SwitchboardDecimal;
    let mut _23: bool;
    let mut _24: &SwitchboardDecimal;
    let _25: SwitchboardDecimal;
    let mut _26: &SwitchboardDecimal;
    let _27: SwitchboardDecimal;
    let mut _28: bool;
    let mut _29: &SwitchboardDecimal;
    let _30: SwitchboardDecimal;
    let mut _31: &SwitchboardDecimal;
    let _32: SwitchboardDecimal;
    let mut _33: bool;
    let mut _34: &SwitchboardDecimal;
    let _35: SwitchboardDecimal;
    let mut _36: &SwitchboardDecimal;
    let _37: SwitchboardDecimal;
    let mut _38: bool;
    let mut _39: &[anchor_lang::prelude::Pubkey; 16];
    let _40: [anchor_lang::prelude::Pubkey; 16];
    let mut _41: &[anchor_lang::prelude::Pubkey; 16];
    let _42: [anchor_lang::prelude::Pubkey; 16];
    let mut _43: bool;
    let mut _44: &[SwitchboardDecimal; 16];
    let _45: [SwitchboardDecimal; 16];
    let mut _46: &[SwitchboardDecimal; 16];
    let _47: [SwitchboardDecimal; 16];
    let mut _48: bool;
    let mut _49: &[i64; 16];
    let _50: [i64; 16];
    let mut _51: &[i64; 16];
    let _52: [i64; 16];
    let mut _53: bool;
    let mut _54: &[bool; 16];
    let _55: [bool; 16];
    let mut _56: &[bool; 16];
    let _57: [bool; 16];
    let mut _58: &[bool; 16];
    let _59: [bool; 16];
    let mut _60: &[bool; 16];
    let _61: [bool; 16];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: u32);
        StorageLive(_5);
        _5 = ((*_2).0: u32);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb34, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u32);
        StorageLive(_8);
        _8 = ((*_2).1: u32);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb33, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).2: bool);
        StorageLive(_11);
        _11 = ((*_2).2: bool);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb32, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).3: u64);
        StorageLive(_14);
        _14 = ((*_2).3: u64);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb31, otherwise: bb4];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).4: i64);
        StorageLive(_17);
        _17 = ((*_2).4: i64);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb30, otherwise: bb5];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_1).5: SwitchboardDecimal);
        _19 = &_20;
        StorageLive(_21);
        StorageLive(_22);
        _22 = ((*_2).5: SwitchboardDecimal);
        _21 = &_22;
        _18 = <SwitchboardDecimal as PartialEq>::eq(move _19, move _21) -> [return: bb6, unwind continue];
    }

    bb6: {
        switchInt(move _18) -> [0: bb29, otherwise: bb7];
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).6: SwitchboardDecimal);
        _24 = &_25;
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_2).6: SwitchboardDecimal);
        _26 = &_27;
        _23 = <SwitchboardDecimal as PartialEq>::eq(move _24, move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _23) -> [0: bb28, otherwise: bb9];
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = ((*_1).7: SwitchboardDecimal);
        _29 = &_30;
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((*_2).7: SwitchboardDecimal);
        _31 = &_32;
        _28 = <SwitchboardDecimal as PartialEq>::eq(move _29, move _31) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _28) -> [0: bb27, otherwise: bb11];
    }

    bb11: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = ((*_1).8: SwitchboardDecimal);
        _34 = &_35;
        StorageLive(_36);
        StorageLive(_37);
        _37 = ((*_2).8: SwitchboardDecimal);
        _36 = &_37;
        _33 = <SwitchboardDecimal as PartialEq>::eq(move _34, move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _33) -> [0: bb26, otherwise: bb13];
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = ((*_1).9: [anchor_lang::prelude::Pubkey; 16]);
        _39 = &_40;
        StorageLive(_41);
        StorageLive(_42);
        _42 = ((*_2).9: [anchor_lang::prelude::Pubkey; 16]);
        _41 = &_42;
        _38 = <[anchor_lang::prelude::Pubkey; 16] as PartialEq>::eq(move _39, move _41) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _38) -> [0: bb25, otherwise: bb15];
    }

    bb15: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = ((*_1).10: [SwitchboardDecimal; 16]);
        _44 = &_45;
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_2).10: [SwitchboardDecimal; 16]);
        _46 = &_47;
        _43 = <[SwitchboardDecimal; 16] as PartialEq>::eq(move _44, move _46) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _43) -> [0: bb24, otherwise: bb17];
    }

    bb17: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_1).11: [i64; 16]);
        _49 = &_50;
        StorageLive(_51);
        StorageLive(_52);
        _52 = ((*_2).11: [i64; 16]);
        _51 = &_52;
        _48 = <[i64; 16] as PartialEq>::eq(move _49, move _51) -> [return: bb18, unwind continue];
    }

    bb18: {
        switchInt(move _48) -> [0: bb23, otherwise: bb19];
    }

    bb19: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = ((*_1).12: [bool; 16]);
        _54 = &_55;
        StorageLive(_56);
        StorageLive(_57);
        _57 = ((*_2).12: [bool; 16]);
        _56 = &_57;
        _53 = <[bool; 16] as PartialEq>::eq(move _54, move _56) -> [return: bb20, unwind continue];
    }

    bb20: {
        switchInt(move _53) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_58);
        StorageLive(_59);
        _59 = ((*_1).13: [bool; 16]);
        _58 = &_59;
        StorageLive(_60);
        StorageLive(_61);
        _61 = ((*_2).13: [bool; 16]);
        _60 = &_61;
        _0 = <[bool; 16] as PartialEq>::eq(move _58, move _60) -> [return: bb36, unwind continue];
    }

    bb22: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb35;
    }

    bb23: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb35;
    }

    bb25: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb35;
    }

    bb26: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb35;
    }

    bb27: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb35;
    }

    bb28: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb35;
    }

    bb29: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb35;
    }

    bb30: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb35;
    }

    bb31: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb35;
    }

    bb32: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb35;
    }

    bb33: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb35;
    }

    bb35: {
        _0 = const false;
        goto -> bb37;
    }

    bb36: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
