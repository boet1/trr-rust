// MIR for `state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::worst_case_liability_value` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::worst_case_liability_value(_1: &PerpPosition, _2: i64, _3: ContractType) -> std::result::Result<(i128, u128), error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    debug contract_type => _3;
    let mut _0: std::result::Result<(i128, u128), error::ErrorCode>;
    let _4: i128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _6: std::result::Result<i128, error::ErrorCode>;
    let mut _7: i64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _9: std::result::Result<i64, error::ErrorCode>;
    let mut _10: i64;
    let mut _11: i64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: i64;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: i128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _24: std::result::Result<i128, error::ErrorCode>;
    let mut _25: i64;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _27: std::result::Result<i64, error::ErrorCode>;
    let mut _28: i64;
    let mut _29: i64;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _42: std::result::Result<u128, error::ErrorCode>;
    let mut _43: i128;
    let mut _44: i64;
    let mut _45: state::perp_market::ContractType;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _53: std::result::Result<u128, error::ErrorCode>;
    let mut _54: i128;
    let mut _55: i64;
    let mut _56: state::perp_market::ContractType;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: bool;
    let mut _63: u128;
    let mut _64: u128;
    let mut _65: (i128, u128);
    let mut _66: i128;
    let mut _67: u128;
    let mut _68: (i128, u128);
    let mut _69: i128;
    let mut _70: u128;
    scope 1 {
        debug base_asset_amount_all_bids_fill => _4;
        let _22: i128;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: i64;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: i128;
        scope 10 {
            debug base_asset_amount_all_asks_fill => _22;
            let _40: u128;
            let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _50: u128;
            scope 19 {
                debug liability_value_all_bids_fill => _40;
                let _51: u128;
                let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _61: u128;
                scope 24 {
                    debug liability_value_all_asks_fill => _51;
                }
                scope 25 {
                    debug residual => _58;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _61;
                    scope 28 {
                    }
                }
            }
            scope 20 {
                debug residual => _47;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _50;
                scope 23 {
                }
            }
        }
        scope 11 {
            debug residual => _31;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _34;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _36;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _39;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).1: i64);
        StorageLive(_11);
        _11 = ((*_1).5: i64);
        _9 = <i64 as SafeMath>::safe_add(move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_8 as Continue).0: i64);
        _7 = _16;
        StorageDead(_16);
        _6 = <i64 as Cast>::cast::<i128>(move _7) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(i128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb38;
    }

    bb7: {
        StorageDead(_7);
        _5 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_6);
        _17 = discriminant(_5);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_5 as Continue).0: i128);
        _4 = _21;
        StorageDead(_21);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = ((*_1).1: i64);
        StorageLive(_29);
        _29 = ((*_1).6: i64);
        _27 = <i64 as SafeMath>::safe_add(move _28, move _29) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(i128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        goto -> bb38;
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        _30 = discriminant(_26);
        switchInt(move _30) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_26 as Continue).0: i64);
        _25 = _34;
        StorageDead(_34);
        _24 = <i64 as Cast>::cast::<i128>(move _25) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(i128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb36;
    }

    bb17: {
        StorageDead(_25);
        _23 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_24);
        _35 = discriminant(_23);
        switchInt(move _35) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_39);
        _39 = ((_23 as Continue).0: i128);
        _22 = _39;
        StorageDead(_39);
        StorageDead(_26);
        StorageDead(_23);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _4;
        StorageLive(_44);
        _44 = _2;
        StorageLive(_45);
        _45 = _3;
        _42 = calculate_perp_liability_value(move _43, move _44, move _45) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_36);
        _36 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(i128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_36);
        goto -> bb36;
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_42);
        _46 = discriminant(_41);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_50);
        _50 = ((_41 as Continue).0: u128);
        _40 = _50;
        StorageDead(_50);
        StorageDead(_41);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _22;
        StorageLive(_55);
        _55 = _2;
        StorageLive(_56);
        _56 = _3;
        _53 = calculate_perp_liability_value(move _54, move _55, move _56) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(i128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_41);
        goto -> bb35;
    }

    bb27: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _53) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_53);
        _57 = discriminant(_52);
        switchInt(move _57) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_61);
        _61 = ((_52 as Continue).0: u128);
        _51 = _61;
        StorageDead(_61);
        StorageDead(_52);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _51;
        StorageLive(_64);
        _64 = _40;
        _62 = Ge(move _63, move _64);
        switchInt(move _62) -> [0: bb33, otherwise: bb32];
    }

    bb30: {
        StorageLive(_58);
        _58 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(i128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb35;
    }

    bb32: {
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _22;
        StorageLive(_67);
        _67 = _51;
        _65 = (move _66, move _67);
        StorageDead(_67);
        StorageDead(_66);
        _0 = std::result::Result::<(i128, u128), error::ErrorCode>::Ok(move _65);
        StorageDead(_65);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _4;
        StorageLive(_70);
        _70 = _40;
        _68 = (move _69, move _70);
        StorageDead(_70);
        StorageDead(_69);
        _0 = std::result::Result::<(i128, u128), error::ErrorCode>::Ok(move _68);
        StorageDead(_68);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_62);
        StorageDead(_51);
        StorageDead(_40);
        StorageDead(_22);
        StorageDead(_4);
        goto -> bb40;
    }

    bb35: {
        StorageDead(_40);
        goto -> bb37;
    }

    bb36: {
        StorageDead(_26);
        StorageDead(_23);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_22);
        goto -> bb39;
    }

    bb38: {
        StorageDead(_8);
        StorageDead(_5);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_4);
        goto -> bb40;
    }

    bb40: {
        return;
    }
}
