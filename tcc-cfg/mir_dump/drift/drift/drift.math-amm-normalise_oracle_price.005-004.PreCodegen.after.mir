// MIR for `normalise_oracle_price` after PreCodegen

fn normalise_oracle_price(_1: &AMM, _2: &OraclePriceData, _3: Option<u64>) -> std::result::Result<i64, error::ErrorCode> {
    debug amm => _1;
    debug oracle_price_data => _2;
    debug precomputed_reserve_price => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _4: i64;
    let mut _6: isize;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _9: std::result::Result<i64, error::ErrorCode>;
    let mut _10: u64;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _17: std::result::Result<i64, error::ErrorCode>;
    let mut _18: u64;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _20: std::result::Result<u64, error::ErrorCode>;
    let mut _21: &state::perp_market::AMM;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _34: std::result::Result<i64, error::ErrorCode>;
    let mut _35: i64;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _43: std::result::Result<i64, error::ErrorCode>;
    let mut _44: u64;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: bool;
    let mut _52: i64;
    let mut _53: i64;
    let mut _54: i64;
    let mut _55: i64;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _57: std::result::Result<i64, error::ErrorCode>;
    let mut _58: i64;
    let mut _59: i64;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: i64;
    let mut _66: i64;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _68: std::result::Result<i64, error::ErrorCode>;
    let mut _69: i64;
    let mut _70: i64;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: i64;
    let mut _77: i64;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _79: std::result::Result<i64, error::ErrorCode>;
    let mut _80: i64;
    let mut _81: i64;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: i64;
    let mut _88: i64;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _90: std::result::Result<i64, error::ErrorCode>;
    let mut _91: i64;
    let mut _92: i64;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: i64;
    scope 1 {
        debug oracle_price => _4;
        let _5: i64;
        let _7: u64;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: u64;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: i64;
        scope 2 {
            debug reserve_price => _5;
            let _32: i64;
            let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _40: i64;
            scope 16 {
                debug reserve_price_2p5_bps => _32;
                let _41: i64;
                let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _49: i64;
                scope 21 {
                    debug conf_int => _41;
                    let _50: i64;
                    let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _64: i64;
                    let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _75: i64;
                    let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _86: i64;
                    let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _97: i64;
                    scope 26 {
                        debug normalised_price => _50;
                    }
                    scope 27 {
                        debug residual => _61;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug val => _64;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug residual => _72;
                        scope 32 {
                        }
                    }
                    scope 33 {
                        debug val => _75;
                        scope 34 {
                        }
                    }
                    scope 35 {
                        debug residual => _83;
                        scope 36 {
                        }
                    }
                    scope 37 {
                        debug val => _86;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug residual => _94;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug val => _97;
                        scope 42 {
                        }
                    }
                }
                scope 22 {
                    debug residual => _46;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _49;
                    scope 25 {
                    }
                }
            }
            scope 17 {
                debug residual => _37;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _40;
                scope 20 {
                }
            }
        }
        scope 3 {
            debug reserve_price => _7;
            let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _15: i64;
            scope 4 {
                debug residual => _12;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _15;
                scope 7 {
                }
            }
        }
        scope 8 {
            debug residual => _23;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _26;
            scope 11 {
            }
        }
        scope 12 {
            debug residual => _28;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _31;
            scope 15 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = ((*_2).0: i64);
        StorageLive(_5);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_1);
        _20 = AMM::reserve_price(move _21) -> [return: bb9, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_7);
        _7 = ((_3 as Some).0: u64);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _7;
        _9 = <u64 as Cast>::cast::<i64>(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        _8 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: i64);
        _5 = _15;
        StorageDead(_15);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb19;
    }

    bb7: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb63;
    }

    bb9: {
        StorageDead(_21);
        _19 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb11, 1: bb12, otherwise: bb2];
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_19 as Continue).0: u64);
        _18 = _26;
        StorageDead(_26);
        _17 = <u64 as Cast>::cast::<i64>(move _18) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_23);
        _23 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb62;
    }

    bb14: {
        StorageDead(_18);
        _16 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _17) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_17);
        _27 = discriminant(_16);
        switchInt(move _27) -> [0: bb16, 1: bb17, otherwise: bb2];
    }

    bb16: {
        StorageLive(_31);
        _31 = ((_16 as Continue).0: i64);
        _5 = _31;
        StorageDead(_31);
        StorageDead(_19);
        StorageDead(_16);
        goto -> bb19;
    }

    bb17: {
        StorageLive(_28);
        _28 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_30);
        StorageDead(_28);
        goto -> bb62;
    }

    bb19: {
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _5;
        _34 = <i64 as SafeMath>::safe_div(move _35, const 4000_i64) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_35);
        _33 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb22, 1: bb23, otherwise: bb2];
    }

    bb22: {
        StorageLive(_40);
        _40 = ((_33 as Continue).0: i64);
        _32 = _40;
        StorageDead(_40);
        StorageDead(_33);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = ((*_2).1: u64);
        _43 = <u64 as Cast>::cast::<i64>(move _44) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_37);
        _37 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_33);
        goto -> bb61;
    }

    bb25: {
        StorageDead(_44);
        _42 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _43) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_43);
        _45 = discriminant(_42);
        switchInt(move _45) -> [0: bb27, 1: bb28, otherwise: bb2];
    }

    bb27: {
        StorageLive(_49);
        _49 = ((_42 as Continue).0: i64);
        _41 = _49;
        StorageDead(_49);
        StorageDead(_42);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _5;
        StorageLive(_53);
        _53 = _4;
        _51 = Gt(move _52, move _53);
        switchInt(move _51) -> [0: bb31, otherwise: bb30];
    }

    bb28: {
        StorageLive(_46);
        _46 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_42);
        goto -> bb60;
    }

    bb30: {
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _5;
        StorageLive(_59);
        _59 = _32;
        _57 = <i64 as SafeMath>::safe_sub(move _58, move _59) -> [return: bb32, unwind continue];
    }

    bb31: {
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = _5;
        StorageLive(_81);
        _81 = _32;
        _79 = <i64 as SafeMath>::safe_add(move _80, move _81) -> [return: bb44, unwind continue];
    }

    bb32: {
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _57) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_57);
        _60 = discriminant(_56);
        switchInt(move _60) -> [0: bb34, 1: bb35, otherwise: bb2];
    }

    bb34: {
        StorageLive(_64);
        _64 = ((_56 as Continue).0: i64);
        _55 = _64;
        StorageDead(_64);
        StorageLive(_65);
        _65 = _4;
        _54 = std::cmp::max::<i64>(move _55, move _65) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_61);
        _61 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb58;
    }

    bb37: {
        StorageDead(_65);
        StorageDead(_55);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _4;
        StorageLive(_70);
        _70 = _41;
        _68 = <i64 as SafeMath>::safe_add(move _69, move _70) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_70);
        StorageDead(_69);
        _67 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _68) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_68);
        _71 = discriminant(_67);
        switchInt(move _71) -> [0: bb40, 1: bb41, otherwise: bb2];
    }

    bb40: {
        StorageLive(_75);
        _75 = ((_67 as Continue).0: i64);
        _66 = _75;
        StorageDead(_75);
        _50 = std::cmp::min::<i64>(move _54, move _66) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_72);
        _72 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_66);
        StorageDead(_54);
        StorageDead(_67);
        goto -> bb58;
    }

    bb43: {
        StorageDead(_66);
        StorageDead(_54);
        StorageDead(_67);
        StorageDead(_56);
        goto -> bb56;
    }

    bb44: {
        StorageDead(_81);
        StorageDead(_80);
        _78 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _79) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_79);
        _82 = discriminant(_78);
        switchInt(move _82) -> [0: bb46, 1: bb47, otherwise: bb2];
    }

    bb46: {
        StorageLive(_86);
        _86 = ((_78 as Continue).0: i64);
        _77 = _86;
        StorageDead(_86);
        StorageLive(_87);
        _87 = _4;
        _76 = std::cmp::min::<i64>(move _77, move _87) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_83);
        _83 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb57;
    }

    bb49: {
        StorageDead(_87);
        StorageDead(_77);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _4;
        StorageLive(_92);
        _92 = _41;
        _90 = <i64 as SafeMath>::safe_sub(move _91, move _92) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_92);
        StorageDead(_91);
        _89 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _90) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_90);
        _93 = discriminant(_89);
        switchInt(move _93) -> [0: bb52, 1: bb53, otherwise: bb2];
    }

    bb52: {
        StorageLive(_97);
        _97 = ((_89 as Continue).0: i64);
        _88 = _97;
        StorageDead(_97);
        _50 = std::cmp::max::<i64>(move _76, move _88) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_94);
        _94 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_88);
        StorageDead(_76);
        StorageDead(_89);
        goto -> bb57;
    }

    bb55: {
        StorageDead(_88);
        StorageDead(_76);
        StorageDead(_89);
        StorageDead(_78);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_51);
        StorageLive(_98);
        _98 = _50;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _98);
        StorageDead(_98);
        StorageDead(_50);
        StorageDead(_41);
        StorageDead(_32);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb64;
    }

    bb57: {
        StorageDead(_78);
        goto -> bb59;
    }

    bb58: {
        StorageDead(_56);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_41);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_32);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_19);
        StorageDead(_16);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb64;
    }

    bb64: {
        return;
    }
}
