// MIR for `fill_mode::<impl at programs/drift/src/state/fill_mode.rs:18:1: 18:14>::get_limit_price` before PreCodegen

fn fill_mode::<impl at programs/drift/src/state/fill_mode.rs:18:1: 18:14>::get_limit_price(_1: &FillMode, _2: &Order, _3: Option<i64>, _4: u64, _5: u64, _6: bool) -> std::result::Result<Option<u64>, error::ErrorCode> {
    debug self => _1;
    debug order => _2;
    debug valid_oracle_price => _3;
    debug slot => _4;
    debug tick_size => _5;
    debug is_prediction_market => _6;
    let mut _0: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _7: isize;
    let mut _8: &state::user::Order;
    let mut _9: std::option::Option<i64>;
    let mut _10: std::option::Option<u64>;
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: bool;
    let mut _14: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let _15: &u8;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _18: std::result::Result<u64, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _21: std::result::Result<u64, error::ErrorCode>;
    let mut _22: u64;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _24: std::result::Result<u64, error::ErrorCode>;
    let mut _25: u64;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _27: std::result::Result<u64, error::ErrorCode>;
    let mut _28: u8;
    let mut _29: isize;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: u64;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _36: std::result::Result<u64, error::ErrorCode>;
    let mut _37: u8;
    let mut _38: &u8;
    let mut _39: &u8;
    let mut _40: &u8;
    let _41: &u8;
    let _42: u8;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: bool;
    let mut _64: &state::user::Order;
    let mut _65: std::result::Result<u64, error::ErrorCode>;
    let mut _66: &state::user::Order;
    let mut _67: u64;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _69: std::result::Result<u64, error::ErrorCode>;
    let mut _70: u64;
    let mut _71: u64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: u64;
    let mut _78: std::option::Option<i64>;
    let mut _79: bool;
    let mut _80: &state::user::Order;
    let mut _81: std::option::Option<i64>;
    let mut _82: std::option::Option<u64>;
    let mut _83: u64;
    let mut _84: u64;
    let mut _85: bool;
    let mut _86: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    scope 1 {
        debug auction_duration_percentage => _15;
        let _16: u64;
        let _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _33: u64;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: u64;
        let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _52: u64;
        let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _57: u64;
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: u64;
        let mut _87: &u8;
        scope 2 {
            debug auction_duration => _16;
            let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _76: u64;
            scope 23 {
                debug residual => _73;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _76;
                scope 26 {
                }
            }
        }
        scope 3 {
            debug residual => _30;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _33;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _44;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _47;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _49;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _52;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _54;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _57;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _59;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _62;
            scope 22 {
            }
        }
    }

    bb0: {
        _7 = discriminant((*_1));
        switchInt(move _7) -> [0: bb3, 1: bb3, 2: bb1, 3: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_15);
        _15 = &(((*_1) as PlaceAndTake).1: u8);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = ((*_2).22: u8);
        _27 = <u8 as Cast>::cast::<u64>(move _28) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_8);
        _8 = &(*_2);
        StorageLive(_9);
        _9 = _3;
        StorageLive(_10);
        _10 = Option::<u64>::None;
        StorageLive(_11);
        _11 = _4;
        StorageLive(_12);
        _12 = _5;
        StorageLive(_13);
        _13 = _6;
        StorageLive(_14);
        _14 = Option::<ProtectedMakerParams>::None;
        _0 = Order::get_limit_price(move _8, move _9, move _10, move _11, move _12, move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb48;
    }

    bb5: {
        StorageDead(_28);
        _26 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _27) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb7, 1: bb8, otherwise: bb2];
    }

    bb7: {
        StorageLive(_33);
        _33 = ((_26 as Continue).0: u64);
        _25 = _33;
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_15);
        StorageLive(_40);
        StorageLive(_41);
        _87 = const _;
        _41 = &(*_87);
        _40 = &(*_41);
        _38 = <&u8 as Ord>::min(move _39, move _40) -> [return: bb10, unwind continue];
    }

    bb8: {
        StorageLive(_30);
        _30 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_32);
        _32 = _30;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _32) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb46;
    }

    bb10: {
        _37 = (*_38);
        StorageDead(_40);
        StorageDead(_39);
        _36 = <u8 as Cast>::cast::<u64>(move _37) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_37);
        _35 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_36);
        _43 = discriminant(_35);
        switchInt(move _43) -> [0: bb13, 1: bb14, otherwise: bb2];
    }

    bb13: {
        StorageLive(_47);
        _47 = ((_35 as Continue).0: u64);
        _34 = _47;
        StorageDead(_47);
        _24 = <u64 as SafeMath>::safe_mul(move _25, move _34) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_44);
        _44 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_34);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb43;
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_25);
        _23 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _24) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_24);
        _48 = discriminant(_23);
        switchInt(move _48) -> [0: bb18, 1: bb19, otherwise: bb2];
    }

    bb18: {
        StorageLive(_52);
        _52 = ((_23 as Continue).0: u64);
        _22 = _52;
        StorageDead(_52);
        _21 = <u64 as SafeMath>::safe_div(move _22, const 100_u64) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_49);
        _49 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_51);
        StorageDead(_49);
        goto -> bb43;
    }

    bb21: {
        StorageDead(_22);
        _20 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _21) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_21);
        _53 = discriminant(_20);
        switchInt(move _53) -> [0: bb23, 1: bb24, otherwise: bb2];
    }

    bb23: {
        StorageLive(_57);
        _57 = ((_20 as Continue).0: u64);
        _19 = _57;
        StorageDead(_57);
        _18 = <u64 as Cast>::cast::<u64>(move _19) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_54);
        _54 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb44;
    }

    bb26: {
        StorageDead(_19);
        _17 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _18) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_18);
        _58 = discriminant(_17);
        switchInt(move _58) -> [0: bb28, 1: bb29, otherwise: bb2];
    }

    bb28: {
        StorageLive(_62);
        _62 = ((_17 as Continue).0: u64);
        _16 = _62;
        StorageDead(_62);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &(*_2);
        _63 = Order::has_auction(move _64) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_59);
        _59 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb45;
    }

    bb31: {
        switchInt(move _63) -> [0: bb40, otherwise: bb32];
    }

    bb32: {
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &(*_2);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = ((*_2).0: u64);
        StorageLive(_71);
        _71 = _16;
        _69 = <u64 as SafeMath>::safe_add(move _70, move _71) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _69) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_69);
        _72 = discriminant(_68);
        switchInt(move _72) -> [0: bb35, 1: bb36, otherwise: bb2];
    }

    bb35: {
        StorageLive(_76);
        _76 = ((_68 as Continue).0: u64);
        _67 = _76;
        StorageDead(_76);
        StorageLive(_77);
        _77 = _5;
        StorageLive(_78);
        _78 = _3;
        StorageLive(_79);
        _79 = _6;
        _65 = calculate_auction_price(move _66, move _67, move _77, move _78, move _79) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_73);
        _73 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<Option<u64>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_68);
        StorageDead(_63);
        goto -> bb47;
    }

    bb38: {
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_67);
        StorageDead(_66);
        _0 = std::result::Result::<u64, error::ErrorCode>::map::<Option<u64>, fn(u64) -> Option<u64> {Option::<u64>::Some}>(move _65, Option::<u64>::Some) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_65);
        StorageDead(_68);
        goto -> bb42;
    }

    bb40: {
        StorageDead(_64);
        StorageLive(_80);
        _80 = &(*_2);
        StorageLive(_81);
        _81 = _3;
        StorageLive(_82);
        _82 = Option::<u64>::None;
        StorageLive(_83);
        _83 = _4;
        StorageLive(_84);
        _84 = _5;
        StorageLive(_85);
        _85 = _6;
        StorageLive(_86);
        _86 = Option::<ProtectedMakerParams>::None;
        _0 = Order::get_limit_price(move _80, move _81, move _82, move _83, move _84, move _85, move _86) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_63);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb48;
    }

    bb43: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb48;
    }

    bb48: {
        return;
    }
}
