// MIR for `on_the_hour_update` after PreCodegen

fn on_the_hour_update(_1: i64, _2: i64, _3: i64) -> std::result::Result<i64, error::ErrorCode> {
    debug now => _1;
    debug last_update_ts => _2;
    debug update_period => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _4: i64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _6: std::result::Result<i64, error::ErrorCode>;
    let mut _7: i64;
    let mut _8: i64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: i64;
    let _15: ();
    let mut _16: bool;
    let mut _17: i64;
    let mut _19: i64;
    let mut _20: i64;
    let mut _21: bool;
    let mut _22: i64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _25: std::result::Result<i64, error::ErrorCode>;
    let mut _26: i64;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _34: std::result::Result<i64, error::ErrorCode>;
    let mut _35: i64;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: ();
    let mut _42: bool;
    let mut _43: i64;
    let mut _44: i64;
    let mut _45: i64;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _47: std::result::Result<i64, error::ErrorCode>;
    let mut _48: i64;
    let mut _49: i64;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: i64;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _57: std::result::Result<i64, error::ErrorCode>;
    let mut _58: i64;
    let mut _59: i64;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: bool;
    let mut _66: i64;
    let mut _67: i64;
    let mut _68: i64;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _70: std::result::Result<i64, error::ErrorCode>;
    let mut _71: i64;
    let mut _72: i64;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: i64;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _81: std::result::Result<i64, error::ErrorCode>;
    let mut _82: i64;
    let mut _83: i64;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: i64;
    scope 1 {
        debug time_since_last_update => _4;
        let mut _14: i64;
        scope 6 {
            debug next_update_wait => _14;
            let _18: i64;
            let _78: i64;
            let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _88: i64;
            scope 7 {
                debug last_update_delay => _18;
                let _23: i64;
                let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _31: i64;
                scope 8 {
                    debug max_delay_for_next_period => _23;
                    let _32: i64;
                    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _40: i64;
                    scope 13 {
                        debug two_funding_periods => _32;
                        let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _54: i64;
                        let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _64: i64;
                        let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _77: i64;
                        scope 18 {
                            debug residual => _51;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _54;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug residual => _61;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _64;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug residual => _74;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _77;
                            scope 29 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _37;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _40;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _28;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _31;
                    scope 12 {
                    }
                }
            }
            scope 30 {
                debug time_remaining_until_update => _78;
            }
            scope 31 {
                debug residual => _85;
                scope 32 {
                }
            }
            scope 33 {
                debug val => _88;
                scope 34 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        StorageLive(_8);
        _8 = _2;
        _6 = <i64 as SafeMath>::safe_sub(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: i64);
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _3;
        _16 = Gt(move _17, const 1_i64);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb55;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        StorageLive(_20);
        _20 = _3;
        _18 = core::num::<impl i64>::rem_euclid(move _19, move _20) -> [return: bb9, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        _15 = const ();
        goto -> bb44;
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _18;
        _21 = Ne(move _22, const 0_i64);
        switchInt(move _21) -> [0: bb42, otherwise: bb10];
    }

    bb10: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _3;
        _25 = <i64 as SafeMath>::safe_div(move _26, const 3_i64) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        _24 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: i64);
        _23 = _31;
        StorageDead(_31);
        StorageDead(_24);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _3;
        _34 = <i64 as SafeMath>::safe_mul(move _35, const 2_i64) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_28);
        _28 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_24);
        goto -> bb53;
    }

    bb16: {
        StorageDead(_35);
        _33 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_40);
        _40 = ((_33 as Continue).0: i64);
        _32 = _40;
        StorageDead(_40);
        StorageDead(_33);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _18;
        StorageLive(_44);
        _44 = _23;
        _42 = Gt(move _43, move _44);
        switchInt(move _42) -> [0: bb22, otherwise: bb21];
    }

    bb19: {
        StorageLive(_37);
        _37 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_33);
        goto -> bb52;
    }

    bb21: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _32;
        StorageLive(_49);
        _49 = _18;
        _47 = <i64 as SafeMath>::safe_sub(move _48, move _49) -> [return: bb23, unwind continue];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _3;
        StorageLive(_59);
        _59 = _18;
        _57 = <i64 as SafeMath>::safe_sub(move _58, move _59) -> [return: bb28, unwind continue];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _47) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_47);
        _50 = discriminant(_46);
        switchInt(move _50) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_54);
        _54 = ((_46 as Continue).0: i64);
        _45 = _54;
        StorageDead(_54);
        _14 = move _45;
        StorageDead(_45);
        StorageDead(_46);
        _41 = const ();
        goto -> bb33;
    }

    bb26: {
        StorageLive(_51);
        _51 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_45);
        StorageDead(_46);
        goto -> bb51;
    }

    bb28: {
        StorageDead(_59);
        StorageDead(_58);
        _56 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _57) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_57);
        _60 = discriminant(_56);
        switchInt(move _60) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_64);
        _64 = ((_56 as Continue).0: i64);
        _55 = _64;
        StorageDead(_64);
        _14 = move _55;
        StorageDead(_55);
        StorageDead(_56);
        _41 = const ();
        goto -> bb33;
    }

    bb31: {
        StorageLive(_61);
        _61 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_55);
        StorageDead(_56);
        goto -> bb51;
    }

    bb33: {
        StorageDead(_42);
        StorageDead(_41);
        StorageLive(_65);
        StorageLive(_66);
        _66 = _14;
        StorageLive(_67);
        _67 = _32;
        _65 = Gt(move _66, move _67);
        switchInt(move _65) -> [0: bb40, otherwise: bb34];
    }

    bb34: {
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _14;
        StorageLive(_72);
        _72 = _3;
        _70 = <i64 as SafeMath>::safe_sub(move _71, move _72) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_72);
        StorageDead(_71);
        _69 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _70) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_70);
        _73 = discriminant(_69);
        switchInt(move _73) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_77);
        _77 = ((_69 as Continue).0: i64);
        _68 = _77;
        StorageDead(_77);
        _14 = move _68;
        StorageDead(_68);
        StorageDead(_69);
        _15 = const ();
        goto -> bb41;
    }

    bb38: {
        StorageLive(_74);
        _74 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_68);
        StorageDead(_69);
        StorageDead(_65);
        goto -> bb52;
    }

    bb40: {
        StorageDead(_67);
        StorageDead(_66);
        _15 = const ();
        goto -> bb41;
    }

    bb41: {
        StorageDead(_65);
        StorageDead(_32);
        StorageDead(_23);
        goto -> bb43;
    }

    bb42: {
        StorageDead(_22);
        _15 = const ();
        goto -> bb43;
    }

    bb43: {
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _14;
        StorageLive(_83);
        _83 = _4;
        _81 = <i64 as SafeMath>::safe_sub(move _82, move _83) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_83);
        StorageDead(_82);
        _80 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _81) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_81);
        _84 = discriminant(_80);
        switchInt(move _84) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_88);
        _88 = ((_80 as Continue).0: i64);
        _79 = _88;
        StorageDead(_88);
        _78 = <i64 as Ord>::max(move _79, const 0_i64) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_85);
        _85 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_79);
        StorageDead(_80);
        StorageDead(_78);
        goto -> bb54;
    }

    bb50: {
        StorageDead(_79);
        StorageDead(_80);
        StorageLive(_89);
        _89 = _78;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _89);
        StorageDead(_89);
        StorageDead(_78);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb56;
    }

    bb51: {
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_32);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_14);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_4);
        goto -> bb56;
    }

    bb56: {
        return;
    }
}
