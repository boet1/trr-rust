// MIR for `view_amm_liquidity` before PreCodegen

fn view_amm_liquidity(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdateAMM<'_>>, _2: Vec<u16>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_indexes => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: &std::vec::Vec<u16>;
    let mut _17: !;
    let _18: ();
    let mut _19: &str;
    let _20: &str;
    let mut _21: anchor_lang::error::Error;
    let mut _22: error::ErrorCode;
    let _23: anchor_lang::prelude::Clock;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _25: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _30: anchor_lang::prelude::Clock;
    let mut _33: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _34: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _35: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _37: state::oracle_map::OracleMap<'_>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle_map::OracleMap<'_>>;
    let mut _39: std::result::Result<state::oracle_map::OracleMap<'_>, error::ErrorCode>;
    let mut _40: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _41: u64;
    let mut _42: std::option::Option<state::state::OracleGuardRails>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: state::perp_market_map::PerpMarketMap<'_>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::perp_market_map::PerpMarketMap<'_>>;
    let mut _51: std::result::Result<state::perp_market_map::PerpMarketMap<'_>, error::ErrorCode>;
    let mut _52: &std::collections::BTreeSet<u16>;
    let _53: &std::collections::BTreeSet<u16>;
    let _54: std::collections::BTreeSet<u16>;
    let mut _55: std::vec::Vec<u16>;
    let mut _56: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _62: bool;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _64: std::result::Result<bool, error::ErrorCode>;
    let mut _65: &mut state::perp_market_map::PerpMarketMap<'_>;
    let mut _66: &mut state::oracle_map::OracleMap<'_>;
    let mut _67: &state::state::State;
    let _68: &state::state::State;
    let mut _69: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _70: &anchor_lang::prelude::Clock;
    let _71: &anchor_lang::prelude::Clock;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _77: ();
    let mut _78: std::collections::btree_map::IterMut<'_, u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _79: std::collections::btree_map::IterMut<'_, u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _80: &mut std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _82: ();
    let _83: ();
    let mut _84: std::option::Option<(&u16, &mut anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>)>;
    let mut _85: &mut std::collections::btree_map::IterMut<'_, u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _86: &mut std::collections::btree_map::IterMut<'_, u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _87: isize;
    let mut _88: !;
    let mut _92: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _94: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _95: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _96: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _97: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _104: &state::oracle::OraclePriceData;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _106: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _107: &mut state::oracle_map::OracleMap<'_>;
    let mut _108: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _109: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _110: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _111: &state::perp_market::PerpMarket;
    let _112: &state::perp_market::PerpMarket;
    let mut _113: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _121: std::result::Result<u64, error::ErrorCode>;
    let mut _122: &state::perp_market::AMM;
    let _123: &state::perp_market::PerpMarket;
    let mut _124: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _132: (u64, u64);
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _134: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _135: &state::perp_market::AMM;
    let _136: &state::perp_market::PerpMarket;
    let mut _137: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _138: u64;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _144: ();
    let _145: ();
    let mut _146: &str;
    let _147: &str;
    let mut _148: &std::string::String;
    let _149: &std::string::String;
    let _150: std::string::String;
    let mut _152: std::fmt::Arguments<'_>;
    let mut _153: &[&str];
    let mut _154: &[&str; 1];
    let _155: &[&str; 1];
    let _156: [&str; 1];
    let mut _157: &[core::fmt::rt::Argument<'_>];
    let mut _158: &[core::fmt::rt::Argument<'_>; 1];
    let _159: &[core::fmt::rt::Argument<'_>; 1];
    let _160: [core::fmt::rt::Argument<'_>; 1];
    let mut _161: core::fmt::rt::Argument<'_>;
    let mut _162: &u64;
    let _163: &u64;
    let _164: ();
    let mut _165: &str;
    let _166: &str;
    let mut _167: &std::string::String;
    let _168: &std::string::String;
    let _169: std::string::String;
    let mut _171: std::fmt::Arguments<'_>;
    let mut _172: &[&str];
    let mut _173: &[&str; 1];
    let _174: &[&str; 1];
    let _175: [&str; 1];
    let mut _176: &[core::fmt::rt::Argument<'_>];
    let mut _177: &[core::fmt::rt::Argument<'_>; 1];
    let _178: &[core::fmt::rt::Argument<'_>; 1];
    let _179: [core::fmt::rt::Argument<'_>; 1];
    let mut _180: core::fmt::rt::Argument<'_>;
    let mut _181: &u64;
    let _182: &u64;
    let _183: ();
    let mut _184: &str;
    let _185: &str;
    let mut _186: &std::string::String;
    let _187: &std::string::String;
    let _188: std::string::String;
    let mut _190: std::fmt::Arguments<'_>;
    let mut _191: &[&str];
    let mut _192: &[&str; 1];
    let _193: &[&str; 1];
    let _194: [&str; 1];
    let mut _195: &[core::fmt::rt::Argument<'_>];
    let mut _196: &[core::fmt::rt::Argument<'_>; 1];
    let _197: &[core::fmt::rt::Argument<'_>; 1];
    let _198: [core::fmt::rt::Argument<'_>; 1];
    let mut _199: core::fmt::rt::Argument<'_>;
    let mut _200: &i64;
    let _201: &i64;
    let mut _202: ();
    let mut _206: &mut instructions::keeper::UpdateAMM<'_>;
    let mut _207: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _208: &mut instructions::keeper::UpdateAMM<'_>;
    let mut _209: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _210: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _211: &state::oracle::OraclePriceData;
    let mut _212: bool;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    let mut _232: isize;
    let mut _233: isize;
    let mut _234: isize;
    let mut _235: isize;
    let mut _236: isize;
    let mut _237: isize;
    let mut _238: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _239: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _23;
        let _31: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _31;
            let _32: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            scope 11 {
                debug remaining_accounts_iter => _32;
                let _36: &mut state::oracle_map::OracleMap<'_>;
                let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _47: state::oracle_map::OracleMap<'_>;
                scope 12 {
                    debug oracle_map => _36;
                    let _48: &mut state::perp_market_map::PerpMarketMap<'_>;
                    let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _61: state::perp_market_map::PerpMarketMap<'_>;
                    scope 17 {
                        debug market_map => _48;
                        let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _76: bool;
                        let mut _81: std::collections::btree_map::IterMut<'_, u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
                        scope 22 {
                            debug residual => _73;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug val => _76;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug iter => _81;
                            let _89: &u16;
                            let _90: &mut anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                            scope 27 {
                                debug _key => _89;
                                debug market_account_loader => _90;
                                let _91: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _102: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                                scope 28 {
                                    debug market => _91;
                                    let _103: &&state::oracle::OraclePriceData;
                                    let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _118: &state::oracle::OraclePriceData;
                                    scope 33 {
                                        debug oracle_price_data => _103;
                                        let _119: u64;
                                        let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _129: u64;
                                        scope 38 {
                                            debug reserve_price => _119;
                                            let _130: u64;
                                            let _131: u64;
                                            let _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _143: (u64, u64);
                                            scope 43 {
                                                debug bid => _130;
                                                debug ask => _131;
                                                let _151: std::string::String;
                                                let _170: std::string::String;
                                                let _189: std::string::String;
                                                let mut _203: &[&str; 1];
                                                let mut _204: &[&str; 1];
                                                let mut _205: &[&str; 1];
                                                scope 48 {
                                                    debug res => _151;
                                                }
                                                scope 49 {
                                                    debug res => _170;
                                                }
                                                scope 50 {
                                                    debug res => _189;
                                                }
                                            }
                                            scope 44 {
                                                debug residual => _140;
                                                scope 45 {
                                                }
                                            }
                                            scope 46 {
                                                debug val => _143;
                                                scope 47 {
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _126;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _129;
                                            scope 42 {
                                            }
                                        }
                                    }
                                    scope 34 {
                                        debug residual => _115;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug val => _118;
                                        scope 37 {
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _99;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _102;
                                    scope 32 {
                                    }
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _58;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _61;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _44;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _47;
                    scope 16 {
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _27;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _30;
        scope 9 {
        }
    }

    bb0: {
        _212 = const false;
        _212 = const true;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _206 = deref_copy (_1.1: &mut instructions::keeper::UpdateAMM<'_>);
        _7 = &((*_206).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _207 = deref_copy (*_7);
        _238 = (((_207.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_238);
        _5 = constraints::exchange_not_paused(move _6) -> [return: bb1, unwind: bb114];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb114];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _213 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_2;
        _15 = Vec::<u16>::len(move _16) -> [return: bb7, unwind: bb114];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb112];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _231 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb107;
    }

    bb7: {
        StorageDead(_16);
        _14 = Gt(move _15, const 5_usize);
        switchInt(move _14) -> [0: bb11, otherwise: bb8];
    }

    bb8: {
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = const "Too many markets passed, max 5";
        _19 = &(*_20);
        _18 = solana_program::log::sol_log(move _19) -> [return: bb9, unwind: bb114];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_20);
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        _22 = error::ErrorCode::DefaultError;
        _21 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _22) -> [return: bb10, unwind: bb114];
    }

    bb10: {
        StorageDead(_22);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _21);
        StorageDead(_21);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb107;
    }

    bb11: {
        StorageDead(_15);
        _13 = const ();
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb12, unwind: bb114];
    }

    bb12: {
        _24 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _25) -> [return: bb13, unwind: bb114];
    }

    bb13: {
        StorageDead(_25);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_30);
        _30 = move ((_24 as Continue).0: anchor_lang::prelude::Clock);
        _23 = move _30;
        StorageDead(_30);
        _215 = discriminant(_24);
        StorageDead(_24);
        StorageLive(_31);
        _208 = deref_copy (_1.1: &mut instructions::keeper::UpdateAMM<'_>);
        _31 = &((*_208).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _209 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _35 = &(*_209);
        _34 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _35) -> [return: bb17, unwind: bb114];
    }

    bb15: {
        StorageLive(_27);
        _27 = move ((_24 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_29);
        _29 = move _27;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _29) -> [return: bb16, unwind: bb111];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        _229 = discriminant(_24);
        StorageDead(_24);
        goto -> bb96;
    }

    bb17: {
        StorageDead(_35);
        _33 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _34) -> [return: bb18, unwind: bb114];
    }

    bb18: {
        StorageDead(_34);
        _32 = &mut _33;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut (*_32);
        StorageLive(_41);
        _41 = (_23.0: u64);
        StorageLive(_42);
        _42 = Option::<state::state::OracleGuardRails>::None;
        _39 = OracleMap::<'_>::load(move _40, move _41, move _42) -> [return: bb19, unwind: bb114];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        _38 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as Try>::branch(move _39) -> [return: bb20, unwind: bb114];
    }

    bb20: {
        StorageDead(_39);
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_47);
        _47 = move ((_38 as Continue).0: state::oracle_map::OracleMap<'_>);
        _37 = move _47;
        StorageDead(_47);
        _36 = &mut _37;
        _219 = discriminant(_38);
        StorageDead(_38);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _212 = const false;
        _55 = move _2;
        _54 = get_market_set_from_list(move _55) -> [return: bb24, unwind: bb104];
    }

    bb22: {
        StorageLive(_44);
        _44 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb23, unwind: bb110];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_44);
        _217 = discriminant(_38);
        StorageDead(_38);
        goto -> bb95;
    }

    bb24: {
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        StorageLive(_56);
        _56 = &mut (*_32);
        _51 = PerpMarketMap::<'_>::load(move _52, move _56) -> [return: bb25, unwind: bb103];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_52);
        _50 = <std::result::Result<PerpMarketMap<'_>, error::ErrorCode> as Try>::branch(move _51) -> [return: bb26, unwind: bb103];
    }

    bb26: {
        StorageDead(_51);
        _57 = discriminant(_50);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_61);
        _61 = move ((_50 as Continue).0: state::perp_market_map::PerpMarketMap<'_>);
        _49 = move _61;
        StorageDead(_61);
        _48 = &mut _49;
        _223 = discriminant(_50);
        drop(_54) -> [return: bb30, unwind: bb102];
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind: bb109];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        _221 = discriminant(_50);
        drop(_54) -> [return: bb93, unwind: bb104];
    }

    bb30: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_50);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &mut (*_48);
        StorageLive(_66);
        _66 = &mut (*_36);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _210 = deref_copy (*_31);
        _239 = (((_210.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _69 = &(*_239);
        _68 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _69) -> [return: bb31, unwind: bb102];
    }

    bb31: {
        _67 = &(*_68);
        StorageDead(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_23;
        _70 = &(*_71);
        _64 = controller::repeg::update_amms(move _65, move _66, move _67, move _70) -> [return: bb32, unwind: bb102];
    }

    bb32: {
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        _63 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _64) -> [return: bb33, unwind: bb102];
    }

    bb33: {
        StorageDead(_64);
        _72 = discriminant(_63);
        switchInt(move _72) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_76);
        _76 = ((_63 as Continue).0: bool);
        _62 = _76;
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &mut ((*_48).0: std::collections::BTreeMap<u16, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>);
        _79 = BTreeMap::<u16, anchor_lang::prelude::AccountLoader<'_, PerpMarket>>::iter_mut(move _80) -> [return: bb37, unwind: bb102];
    }

    bb35: {
        StorageLive(_73);
        _73 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb36, unwind: bb102];
    }

    bb36: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb92;
    }

    bb37: {
        StorageDead(_80);
        _78 = <std::collections::btree_map::IterMut<'_, u16, anchor_lang::prelude::AccountLoader<'_, PerpMarket>> as IntoIterator>::into_iter(move _79) -> [return: bb38, unwind: bb102];
    }

    bb38: {
        StorageDead(_79);
        StorageLive(_81);
        _81 = move _78;
        goto -> bb39;
    }

    bb39: {
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &mut _81;
        _85 = &mut (*_86);
        _84 = <std::collections::btree_map::IterMut<'_, u16, anchor_lang::prelude::AccountLoader<'_, PerpMarket>> as Iterator>::next(move _85) -> [return: bb40, unwind: bb102];
    }

    bb40: {
        StorageDead(_85);
        _87 = discriminant(_84);
        switchInt(move _87) -> [0: bb42, 1: bb41, otherwise: bb4];
    }

    bb41: {
        StorageLive(_89);
        _89 = (((_84 as Some).0: (&u16, &mut anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>)).0: &u16);
        StorageLive(_90);
        _90 = move (((_84 as Some).0: (&u16, &mut anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>)).1: &mut anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_90);
        _95 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _96) -> [return: bb43, unwind: bb102];
    }

    bb42: {
        _77 = const ();
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_202);
        _202 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _202);
        StorageDead(_202);
        drop(_49) -> [return: bb87, unwind: bb104];
    }

    bb43: {
        StorageDead(_96);
        StorageLive(_97);
        _97 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _94 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _95, move _97) -> [return: bb44, unwind: bb102];
    }

    bb44: {
        StorageDead(_97);
        StorageDead(_95);
        _93 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _94) -> [return: bb45, unwind: bb102];
    }

    bb45: {
        StorageDead(_94);
        _98 = discriminant(_93);
        switchInt(move _98) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_102);
        _102 = move ((_93 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _92 = move _102;
        StorageDead(_102);
        _91 = &mut _92;
        _227 = discriminant(_93);
        StorageDead(_93);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &mut (*_36);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &(*_91);
        _112 = <RefMut<'_, PerpMarket> as Deref>::deref(move _113) -> [return: bb49, unwind: bb101];
    }

    bb47: {
        StorageLive(_99);
        _99 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb48, unwind: bb108];
    }

    bb48: {
        StorageDead(_101);
        StorageDead(_99);
        _225 = discriminant(_93);
        StorageDead(_93);
        goto -> bb91;
    }

    bb49: {
        _111 = &(*_112);
        StorageDead(_113);
        _110 = PerpMarket::oracle_id(move _111) -> [return: bb50, unwind: bb101];
    }

    bb50: {
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _106 = OracleMap::<'_>::get_price_data(move _107, move _108) -> [return: bb51, unwind: bb101];
    }

    bb51: {
        StorageDead(_108);
        StorageDead(_107);
        _105 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _106) -> [return: bb52, unwind: bb101];
    }

    bb52: {
        StorageDead(_106);
        _114 = discriminant(_105);
        switchInt(move _114) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_118);
        _118 = ((_105 as Continue).0: &state::oracle::OraclePriceData);
        _104 = _118;
        StorageDead(_118);
        _103 = &_104;
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &(*_91);
        _123 = <RefMut<'_, PerpMarket> as Deref>::deref(move _124) -> [return: bb56, unwind: bb101];
    }

    bb54: {
        StorageLive(_115);
        _115 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb55, unwind: bb101];
    }

    bb55: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        goto -> bb90;
    }

    bb56: {
        StorageDead(_124);
        _122 = &((*_123).1: state::perp_market::AMM);
        _121 = AMM::reserve_price(move _122) -> [return: bb57, unwind: bb101];
    }

    bb57: {
        StorageDead(_122);
        _120 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _121) -> [return: bb58, unwind: bb101];
    }

    bb58: {
        StorageDead(_121);
        _125 = discriminant(_120);
        switchInt(move _125) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_129);
        _129 = ((_120 as Continue).0: u64);
        _119 = _129;
        StorageDead(_129);
        StorageDead(_123);
        StorageDead(_120);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &(*_91);
        _136 = <RefMut<'_, PerpMarket> as Deref>::deref(move _137) -> [return: bb62, unwind: bb101];
    }

    bb60: {
        StorageLive(_126);
        _126 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb61, unwind: bb101];
    }

    bb61: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        goto -> bb89;
    }

    bb62: {
        StorageDead(_137);
        _135 = &((*_136).1: state::perp_market::AMM);
        StorageLive(_138);
        _138 = _119;
        _134 = AMM::bid_ask_price(move _135, move _138) -> [return: bb63, unwind: bb101];
    }

    bb63: {
        StorageDead(_138);
        StorageDead(_135);
        _133 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _134) -> [return: bb64, unwind: bb101];
    }

    bb64: {
        StorageDead(_134);
        _139 = discriminant(_133);
        switchInt(move _139) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_143);
        _143 = ((_133 as Continue).0: (u64, u64));
        _132 = _143;
        StorageDead(_143);
        StorageLive(_130);
        _130 = (_132.0: u64);
        StorageLive(_131);
        _131 = (_132.1: u64);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _205 = const _;
        _155 = &(*_205);
        _154 = &(*_155);
        _153 = move _154 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_154);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &_130;
        _162 = &(*_163);
        _161 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _162) -> [return: bb68, unwind: bb101];
    }

    bb66: {
        StorageLive(_140);
        _140 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_142);
        _142 = _140;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _142) -> [return: bb67, unwind: bb101];
    }

    bb67: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb89;
    }

    bb68: {
        StorageDead(_162);
        _160 = [move _161];
        StorageDead(_161);
        _159 = &_160;
        _158 = &(*_159);
        _157 = move _158 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_158);
        _152 = Arguments::<'_>::new_v1(move _153, move _157) -> [return: bb69, unwind: bb101];
    }

    bb69: {
        StorageDead(_157);
        StorageDead(_153);
        _151 = format(move _152) -> [return: bb70, unwind: bb101];
    }

    bb70: {
        StorageDead(_152);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_155);
        _150 = move _151;
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = <String as Deref>::deref(move _148) -> [return: bb71, unwind: bb100];
    }

    bb71: {
        _146 = &(*_147);
        StorageDead(_148);
        _145 = solana_program::log::sol_log(move _146) -> [return: bb72, unwind: bb100];
    }

    bb72: {
        StorageDead(_146);
        drop(_150) -> [return: bb73, unwind: bb101];
    }

    bb73: {
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _204 = const _;
        _174 = &(*_204);
        _173 = &(*_174);
        _172 = move _173 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_173);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_131;
        _181 = &(*_182);
        _180 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _181) -> [return: bb74, unwind: bb101];
    }

    bb74: {
        StorageDead(_181);
        _179 = [move _180];
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = move _177 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_177);
        _171 = Arguments::<'_>::new_v1(move _172, move _176) -> [return: bb75, unwind: bb101];
    }

    bb75: {
        StorageDead(_176);
        StorageDead(_172);
        _170 = format(move _171) -> [return: bb76, unwind: bb101];
    }

    bb76: {
        StorageDead(_171);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_174);
        _169 = move _170;
        StorageDead(_170);
        _168 = &_169;
        _167 = &(*_168);
        _166 = <String as Deref>::deref(move _167) -> [return: bb77, unwind: bb99];
    }

    bb77: {
        _165 = &(*_166);
        StorageDead(_167);
        _164 = solana_program::log::sol_log(move _165) -> [return: bb78, unwind: bb99];
    }

    bb78: {
        StorageDead(_165);
        drop(_169) -> [return: bb79, unwind: bb101];
    }

    bb79: {
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _203 = const _;
        _193 = &(*_203);
        _192 = &(*_193);
        _191 = move _192 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_192);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _211 = deref_copy (*_103);
        _201 = &((*_211).0: i64);
        _200 = &(*_201);
        _199 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _200) -> [return: bb80, unwind: bb101];
    }

    bb80: {
        StorageDead(_200);
        _198 = [move _199];
        StorageDead(_199);
        _197 = &_198;
        _196 = &(*_197);
        _195 = move _196 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_196);
        _190 = Arguments::<'_>::new_v1(move _191, move _195) -> [return: bb81, unwind: bb101];
    }

    bb81: {
        StorageDead(_195);
        StorageDead(_191);
        _189 = format(move _190) -> [return: bb82, unwind: bb101];
    }

    bb82: {
        StorageDead(_190);
        StorageDead(_201);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_193);
        _188 = move _189;
        StorageDead(_189);
        _187 = &_188;
        _186 = &(*_187);
        _185 = <String as Deref>::deref(move _186) -> [return: bb83, unwind: bb98];
    }

    bb83: {
        _184 = &(*_185);
        StorageDead(_186);
        _183 = solana_program::log::sol_log(move _184) -> [return: bb84, unwind: bb98];
    }

    bb84: {
        StorageDead(_184);
        drop(_188) -> [return: bb85, unwind: bb101];
    }

    bb85: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_183);
        _144 = const ();
        StorageDead(_144);
        _83 = const ();
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_119);
        StorageDead(_104);
        StorageDead(_103);
        drop(_92) -> [return: bb86, unwind: bb102];
    }

    bb86: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        _82 = const ();
        goto -> bb39;
    }

    bb87: {
        StorageDead(_49);
        StorageDead(_48);
        drop(_37) -> [return: bb88, unwind: bb114];
    }

    bb88: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_23);
        goto -> bb97;
    }

    bb89: {
        StorageDead(_119);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_104);
        StorageDead(_103);
        drop(_92) -> [return: bb91, unwind: bb102];
    }

    bb91: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb92;
    }

    bb92: {
        drop(_49) -> [return: bb94, unwind: bb104];
    }

    bb93: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_50);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_49);
        StorageDead(_48);
        drop(_37) -> [return: bb95, unwind: bb114];
    }

    bb95: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_23);
        goto -> bb107;
    }

    bb97: {
        return;
    }

    bb98 (cleanup): {
        drop(_188) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb99 (cleanup): {
        drop(_169) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb100 (cleanup): {
        drop(_150) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb101 (cleanup): {
        drop(_92) -> [return: bb102, unwind terminate(cleanup)];
    }

    bb102 (cleanup): {
        drop(_49) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_54) -> [return: bb104, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_37) -> [return: bb114, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        resume;
    }

    bb106: {
        drop(_2) -> [return: bb97, unwind: bb105];
    }

    bb107: {
        switchInt(_212) -> [0: bb97, otherwise: bb106];
    }

    bb108 (cleanup): {
        _233 = discriminant(_93);
        goto -> bb102;
    }

    bb109 (cleanup): {
        _234 = discriminant(_50);
        goto -> bb103;
    }

    bb110 (cleanup): {
        _235 = discriminant(_38);
        goto -> bb114;
    }

    bb111 (cleanup): {
        _236 = discriminant(_24);
        goto -> bb114;
    }

    bb112 (cleanup): {
        _237 = discriminant(_4);
        goto -> bb114;
    }

    bb113 (cleanup): {
        drop(_2) -> [return: bb105, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        switchInt(_212) -> [0: bb105, otherwise: bb113];
    }
}
