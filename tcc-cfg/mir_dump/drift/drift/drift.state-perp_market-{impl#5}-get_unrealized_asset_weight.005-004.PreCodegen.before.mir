// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_unrealized_asset_weight` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_unrealized_asset_weight(_1: &PerpMarket, _2: i128, _3: math::margin::MarginRequirementType) -> std::result::Result<u32, error::ErrorCode> {
    debug self => _1;
    debug unrealized_pnl => _2;
    debug margin_type => _3;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let mut _4: u32;
    let mut _5: isize;
    let _6: ();
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: bool;
    let mut _12: u64;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _15: std::result::Result<i128, error::ErrorCode>;
    let mut _16: &state::perp_market::AMM;
    let _17: &state::perp_market::AMM;
    let mut _18: i64;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: bool;
    let mut _25: i128;
    let mut _26: i128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _28: std::result::Result<i128, error::ErrorCode>;
    let mut _29: u64;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: u32;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _37: std::result::Result<u32, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _43: std::result::Result<u128, error::ErrorCode>;
    let mut _44: u128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u32;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: u128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _55: std::result::Result<u128, error::ErrorCode>;
    let mut _56: u64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: u128;
    let mut _68: i128;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: bool;
    let mut _81: i128;
    let mut _82: isize;
    let mut _83: bool;
    let mut _84: u32;
    let mut _85: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _86: std::result::Result<u32, error::ErrorCode>;
    let mut _87: u128;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _89: std::result::Result<u128, error::ErrorCode>;
    let mut _90: u128;
    let mut _91: i128;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: u32;
    let mut _98: u32;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: u32;
    scope 1 {
        debug margin_asset_weight => _4;
        let _13: i128;
        let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _23: i128;
        let _79: u32;
        let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _96: u128;
        let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _103: u32;
        scope 2 {
            debug net_unsettled_pnl => _13;
            let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _34: i128;
            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _52: u128;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: u128;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: u128;
            let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _73: u128;
            let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _78: u32;
            scope 7 {
                debug residual => _31;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _34;
                scope 10 {
                }
            }
            scope 11 {
                debug residual => _49;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _52;
                scope 14 {
                }
            }
            scope 15 {
                debug residual => _58;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _61;
                scope 18 {
                }
            }
            scope 19 {
                debug residual => _63;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _66;
                scope 22 {
                }
            }
            scope 23 {
                debug residual => _70;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _73;
                scope 26 {
                }
            }
            scope 27 {
                debug residual => _75;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _78;
                scope 30 {
                }
            }
        }
        scope 3 {
            debug residual => _20;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _23;
            scope 6 {
            }
        }
        scope 31 {
            debug unrealized_asset_weight => _79;
        }
        scope 32 {
            debug residual => _93;
            scope 33 {
            }
        }
        scope 34 {
            debug val => _96;
            scope 35 {
            }
        }
        scope 36 {
            debug residual => _100;
            scope 37 {
            }
        }
        scope 38 {
            debug val => _103;
            scope 39 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb3, 1: bb3, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _4 = ((*_1).18: u32);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = ((*_1).17: u32);
        goto -> bb4;
    }

    bb4: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _4;
        _7 = Gt(move _8, const 0_u32);
        switchInt(move _7) -> [0: bb51, otherwise: bb5];
    }

    bb5: {
        StorageDead(_8);
        StorageLive(_9);
        _10 = discriminant(_3);
        switchInt(move _10) -> [0: bb7, 1: bb7, otherwise: bb6];
    }

    bb6: {
        _9 = const false;
        goto -> bb8;
    }

    bb7: {
        _9 = const true;
        goto -> bb8;
    }

    bb8: {
        switchInt(move _9) -> [0: bb52, otherwise: bb9];
    }

    bb9: {
        StorageLive(_11);
        StorageLive(_12);
        _12 = ((*_1).5: u64);
        _11 = Gt(move _12, const 0_u64);
        switchInt(move _11) -> [0: bb50, otherwise: bb10];
    }

    bb10: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &((*_1).1: state::perp_market::AMM);
        _16 = &(*_17);
        StorageLive(_18);
        _18 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).0: i64);
        _15 = calculate_net_user_pnl(move _16, move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_15);
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb13, 1: bb14, otherwise: bb2];
    }

    bb13: {
        StorageLive(_23);
        _23 = ((_14 as Continue).0: i128);
        _13 = _23;
        StorageDead(_23);
        StorageDead(_17);
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _13;
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).5: u64);
        _28 = <u64 as Cast>::cast::<i128>(move _29) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_20);
        _20 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        goto -> bb79;
    }

    bb16: {
        StorageDead(_29);
        _27 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb18, 1: bb19, otherwise: bb2];
    }

    bb18: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: i128);
        _26 = _34;
        StorageDead(_34);
        _24 = Gt(move _25, move _26);
        switchInt(move _24) -> [0: bb22, otherwise: bb21];
    }

    bb19: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb78;
    }

    bb21: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _4;
        _46 = <u32 as Cast>::cast::<u128>(move _47) -> [return: bb23, unwind continue];
    }

    bb22: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        _6 = const ();
        goto -> bb49;
    }

    bb23: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb25, 1: bb26, otherwise: bb2];
    }

    bb25: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: u128);
        _44 = _52;
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = ((*_1).5: u64);
        _55 = <u64 as Cast>::cast::<u128>(move _56) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb77;
    }

    bb28: {
        StorageDead(_56);
        _54 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb30, 1: bb31, otherwise: bb2];
    }

    bb30: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: u128);
        _53 = _61;
        StorageDead(_61);
        _43 = <u128 as SafeMath>::safe_mul(move _44, move _53) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb74;
    }

    bb33: {
        StorageDead(_53);
        StorageDead(_44);
        _42 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _43) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_43);
        _62 = discriminant(_42);
        switchInt(move _62) -> [0: bb35, 1: bb36, otherwise: bb2];
    }

    bb35: {
        StorageLive(_66);
        _66 = ((_42 as Continue).0: u128);
        _41 = _66;
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _13;
        _67 = core::num::<impl i128>::unsigned_abs(move _68) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_63);
        _63 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb74;
    }

    bb38: {
        StorageDead(_68);
        _40 = <u128 as SafeMath>::safe_div(move _41, move _67) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_67);
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_40);
        _69 = discriminant(_39);
        switchInt(move _69) -> [0: bb41, 1: bb42, otherwise: bb2];
    }

    bb41: {
        StorageLive(_73);
        _73 = ((_39 as Continue).0: u128);
        _38 = _73;
        StorageDead(_73);
        _37 = <u128 as Cast>::cast::<u32>(move _38) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_70);
        _70 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_72);
        StorageDead(_70);
        goto -> bb75;
    }

    bb44: {
        StorageDead(_38);
        _36 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _37) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_37);
        _74 = discriminant(_36);
        switchInt(move _74) -> [0: bb46, 1: bb47, otherwise: bb2];
    }

    bb46: {
        StorageLive(_78);
        _78 = ((_36 as Continue).0: u32);
        _35 = _78;
        StorageDead(_78);
        _4 = move _35;
        StorageDead(_35);
        StorageDead(_54);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        _6 = const ();
        goto -> bb49;
    }

    bb47: {
        StorageLive(_75);
        _75 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_77);
        StorageDead(_75);
        goto -> bb76;
    }

    bb49: {
        StorageDead(_24);
        StorageDead(_13);
        goto -> bb53;
    }

    bb50: {
        StorageDead(_12);
        goto -> bb52;
    }

    bb51: {
        StorageDead(_8);
        goto -> bb52;
    }

    bb52: {
        _6 = const ();
        goto -> bb53;
    }

    bb53: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _2;
        _80 = Gt(move _81, const 0_i128);
        switchInt(move _80) -> [0: bb71, otherwise: bb54];
    }

    bb54: {
        StorageDead(_81);
        _82 = discriminant(_3);
        switchInt(move _82) -> [0: bb56, 1: bb56, 2: bb55, otherwise: bb2];
    }

    bb55: {
        _79 = ((*_1).18: u32);
        goto -> bb72;
    }

    bb56: {
        StorageLive(_83);
        StorageLive(_84);
        _84 = _4;
        _83 = Gt(move _84, const 0_u32);
        switchInt(move _83) -> [0: bb69, otherwise: bb57];
    }

    bb57: {
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _2;
        _90 = core::num::<impl i128>::unsigned_abs(move _91) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_91);
        _89 = <u128 as SafeMath>::safe_mul(move _90, const _) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_90);
        _88 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _89) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_89);
        _92 = discriminant(_88);
        switchInt(move _92) -> [0: bb61, 1: bb62, otherwise: bb2];
    }

    bb61: {
        StorageLive(_96);
        _96 = ((_88 as Continue).0: u128);
        _87 = _96;
        StorageDead(_96);
        StorageLive(_97);
        _97 = ((*_1).12: u32);
        StorageLive(_98);
        _98 = _4;
        _86 = calculate_size_discount_asset_weight(move _87, move _97, move _98) -> [return: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_93);
        _93 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb73;
    }

    bb64: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_87);
        _85 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _86) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_86);
        _99 = discriminant(_85);
        switchInt(move _99) -> [0: bb66, 1: bb67, otherwise: bb2];
    }

    bb66: {
        StorageLive(_103);
        _103 = ((_85 as Continue).0: u32);
        _79 = _103;
        StorageDead(_103);
        StorageDead(_88);
        StorageDead(_85);
        goto -> bb70;
    }

    bb67: {
        StorageLive(_100);
        _100 = ((_85 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb73;
    }

    bb69: {
        StorageDead(_84);
        _79 = const 0_u32;
        goto -> bb70;
    }

    bb70: {
        StorageDead(_83);
        goto -> bb72;
    }

    bb71: {
        StorageDead(_81);
        _79 = const _;
        goto -> bb72;
    }

    bb72: {
        StorageDead(_80);
        StorageLive(_104);
        _104 = _79;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _104);
        StorageDead(_104);
        StorageDead(_79);
        StorageDead(_4);
        goto -> bb81;
    }

    bb73: {
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb80;
    }

    bb74: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_35);
        StorageDead(_54);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_24);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_4);
        goto -> bb81;
    }

    bb81: {
        return;
    }
}
