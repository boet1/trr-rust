digraph Mir_0_4080 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SpotMarket::get_asset_weight(_1: &amp;ReErased state::spot_market::SpotMarket, _2: u128, _3: i64, _4: &amp;ReErased math::margin::MarginRequirementType) -&gt; std::result::Result&lt;u32, error::ErrorCode&gt;<br align="left"/>let _5: u128;<br align="left"/>let mut _6: u32;<br align="left"/>let _7: u128;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: bool;<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: u128;<br align="left"/>let mut _16: u128;<br align="left"/>let mut _17: (u128, bool);<br align="left"/>let mut _18: u128;<br align="left"/>let mut _19: bool;<br align="left"/>let _20: u32;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _23: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _24: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _25: i64;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: u32;<br align="left"/>let mut _31: u32;<br align="left"/>let mut _32: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _33: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _34: u32;<br align="left"/>let mut _35: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _36: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _37: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _38: i64;<br align="left"/>let mut _39: isize;<br align="left"/>let _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _41: !;<br align="left"/>let mut _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _43: u32;<br align="left"/>let mut _44: u32;<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _49: u32;<br align="left"/>let mut _50: bool;<br align="left"/>let _51: u32;<br align="left"/>let mut _52: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _53: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _54: u128;<br align="left"/>let mut _55: u32;<br align="left"/>let mut _56: u32;<br align="left"/>let mut _57: isize;<br align="left"/>let _58: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _59: !;<br align="left"/>let mut _60: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _61: u32;<br align="left"/>let _62: u32;<br align="left"/>let mut _63: u32;<br align="left"/>let mut _64: u32;<br align="left"/>let mut _65: u32;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug size =&gt; _2;<br align="left"/>debug oracle_price =&gt; _3;<br align="left"/>debug margin_requirement_type =&gt; _4;<br align="left"/>debug size_precision =&gt; _5;<br align="left"/>debug size_in_amm_reserve_precision =&gt; _7;<br align="left"/>debug default_asset_weight =&gt; _20;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug residual =&gt; _40;<br align="left"/>debug val =&gt; _43;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>debug size_based_asset_weight =&gt; _51;<br align="left"/>debug residual =&gt; _58;<br align="left"/>debug val =&gt; _61;<br align="left"/>debug asset_weight =&gt; _62;<br align="left"/>>;
    bb0__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = ((*_1).41: u32)<br/></td></tr><tr><td align="left">_5 = core::num::&lt;impl u128&gt;::pow(const 10_u128, move _6)</td></tr></table>>];
    bb1__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _5<br/>_8 = Gt(move _9, const _)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb2__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>_10 = _2<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _5<br/>_13 = Eq(const _, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _13, &quot;attempt to divide `{}` by zero&quot;, _12)</td></tr></table>>];
    bb3__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_11 = Div(move _12, const _)<br/>StorageDead(_12)<br/>_14 = Eq(_11, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _14, &quot;attempt to divide `{}` by zero&quot;, _10)</td></tr></table>>];
    bb4__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_7 = Div(move _10, move _11)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = _2<br/>_17 = CheckedMul(_16, const _)<br/></td></tr><tr><td align="left">assert(!move (_17.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _16, const _)</td></tr></table>>];
    bb6__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_15 = move (_17.0: u128)<br/>StorageDead(_16)<br/>StorageLive(_18)<br/>_18 = _5<br/>_19 = Eq(_18, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _19, &quot;attempt to divide `{}` by zero&quot;, _15)</td></tr></table>>];
    bb7__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_7 = Div(move _15, move _18)<br/>StorageDead(_18)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_20)<br/>_21 = discriminant((*_4))<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb9__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_20 = ((*_1).32: u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;(*_1)<br/>StorageLive(_25)<br/>_25 = _3<br/></td></tr><tr><td align="left">_23 = SpotMarket::get_scaled_initial_asset_weight(move _24, move _25)</td></tr></table>>];
    bb12__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">_22 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _23)</td></tr></table>>];
    bb13__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_26 = discriminant(_22)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb14__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_22 as Continue).0: u32)<br/>_20 = _30<br/>StorageDead(_30)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_22 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb16__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = &amp;(*_1)<br/>StorageLive(_38)<br/>_38 = _3<br/></td></tr><tr><td align="left">_36 = SpotMarket::get_scaled_initial_asset_weight(move _37, move _38)</td></tr></table>>];
    bb18__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">_35 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _36)</td></tr></table>>];
    bb19__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_39 = discriminant(_35)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb20__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_35 as Continue).0: u32)<br/>_34 = _43<br/>StorageDead(_43)<br/>StorageLive(_44)<br/>_44 = ((*_1).32: u32)<br/></td></tr><tr><td align="left">_33 = &lt;u32 as SafeMath&gt;::safe_add(move _34, move _44)</td></tr></table>>];
    bb21__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_35 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_42)<br/>_42 = _40<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _42)</td></tr></table>>];
    bb22__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _33)</td></tr></table>>];
    bb24__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_45 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb25__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_32 as Continue).0: u32)<br/>_31 = _49<br/>StorageDead(_49)<br/>_50 = Eq(const 2_u32, const 0_u32)<br/></td></tr><tr><td align="left">assert(!move _50, &quot;attempt to divide `{}` by zero&quot;, _31)</td></tr></table>>];
    bb26__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_32 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_48)<br/>_48 = _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb27__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_20 = Div(move _31, const 2_u32)<br/>StorageDead(_31)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = _7<br/>StorageLive(_55)<br/>_55 = ((*_1).35: u32)<br/>StorageLive(_56)<br/>_56 = _20<br/></td></tr><tr><td align="left">_53 = calculate_size_discount_asset_weight(move _54, move _55, move _56)</td></tr></table>>];
    bb30__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _53)</td></tr></table>>];
    bb31__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>_57 = discriminant(_52)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb32__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = ((_52 as Continue).0: u32)<br/>_51 = _61<br/>StorageDead(_61)<br/>StorageDead(_52)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = _51<br/>StorageLive(_64)<br/>_64 = _20<br/></td></tr><tr><td align="left">_62 = &lt;u32 as Ord&gt;::min(move _63, move _64)</td></tr></table>>];
    bb33__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = ((_52 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_60)<br/>_60 = _58<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _60)</td></tr></table>>];
    bb34__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_58)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_63)<br/>StorageLive(_65)<br/>_65 = _62<br/>_0 = std::result::Result::&lt;u32, error::ErrorCode&gt;::Ok(move _65)<br/>StorageDead(_65)<br/>StorageDead(_62)<br/>StorageDead(_51)<br/>StorageDead(_20)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_4080 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4080 -> bb1__0_4080 [label="return"];
    bb1__0_4080 -> bb5__0_4080 [label="0"];
    bb1__0_4080 -> bb2__0_4080 [label="otherwise"];
    bb2__0_4080 -> bb3__0_4080 [label="success"];
    bb3__0_4080 -> bb4__0_4080 [label="success"];
    bb4__0_4080 -> bb8__0_4080 [label=""];
    bb5__0_4080 -> bb6__0_4080 [label="success"];
    bb6__0_4080 -> bb7__0_4080 [label="success"];
    bb7__0_4080 -> bb8__0_4080 [label=""];
    bb8__0_4080 -> bb11__0_4080 [label="0"];
    bb8__0_4080 -> bb17__0_4080 [label="1"];
    bb8__0_4080 -> bb9__0_4080 [label="2"];
    bb8__0_4080 -> bb10__0_4080 [label="otherwise"];
    bb9__0_4080 -> bb29__0_4080 [label=""];
    bb11__0_4080 -> bb12__0_4080 [label="return"];
    bb12__0_4080 -> bb13__0_4080 [label="return"];
    bb13__0_4080 -> bb14__0_4080 [label="0"];
    bb13__0_4080 -> bb15__0_4080 [label="1"];
    bb13__0_4080 -> bb10__0_4080 [label="otherwise"];
    bb14__0_4080 -> bb29__0_4080 [label=""];
    bb15__0_4080 -> bb16__0_4080 [label="return"];
    bb16__0_4080 -> bb37__0_4080 [label=""];
    bb17__0_4080 -> bb18__0_4080 [label="return"];
    bb18__0_4080 -> bb19__0_4080 [label="return"];
    bb19__0_4080 -> bb20__0_4080 [label="0"];
    bb19__0_4080 -> bb21__0_4080 [label="1"];
    bb19__0_4080 -> bb10__0_4080 [label="otherwise"];
    bb20__0_4080 -> bb23__0_4080 [label="return"];
    bb21__0_4080 -> bb22__0_4080 [label="return"];
    bb22__0_4080 -> bb36__0_4080 [label=""];
    bb23__0_4080 -> bb24__0_4080 [label="return"];
    bb24__0_4080 -> bb25__0_4080 [label="0"];
    bb24__0_4080 -> bb26__0_4080 [label="1"];
    bb24__0_4080 -> bb10__0_4080 [label="otherwise"];
    bb25__0_4080 -> bb28__0_4080 [label="success"];
    bb26__0_4080 -> bb27__0_4080 [label="return"];
    bb27__0_4080 -> bb36__0_4080 [label=""];
    bb28__0_4080 -> bb29__0_4080 [label=""];
    bb29__0_4080 -> bb30__0_4080 [label="return"];
    bb30__0_4080 -> bb31__0_4080 [label="return"];
    bb31__0_4080 -> bb32__0_4080 [label="0"];
    bb31__0_4080 -> bb33__0_4080 [label="1"];
    bb31__0_4080 -> bb10__0_4080 [label="otherwise"];
    bb32__0_4080 -> bb35__0_4080 [label="return"];
    bb33__0_4080 -> bb34__0_4080 [label="return"];
    bb34__0_4080 -> bb37__0_4080 [label=""];
    bb35__0_4080 -> bb38__0_4080 [label=""];
    bb36__0_4080 -> bb37__0_4080 [label=""];
    bb37__0_4080 -> bb38__0_4080 [label=""];
}
