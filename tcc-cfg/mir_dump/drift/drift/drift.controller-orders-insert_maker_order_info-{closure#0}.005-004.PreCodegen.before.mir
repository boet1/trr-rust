// MIR for `insert_maker_order_info::{closure#0}` before PreCodegen

fn insert_maker_order_info::{closure#0}(_1: &mut {closure@programs/drift/src/controller/orders.rs:1668:58: 1668:64}, _2: &(anchor_lang::prelude::Pubkey, usize, u64)) -> std::cmp::Ordering {
    debug item => _2;
    debug direction => (*((*_1).0: &controller::position::PositionDirection));
    debug price => (*((*_1).1: &u64));
    let mut _0: std::cmp::Ordering;
    let mut _3: isize;
    let mut _4: &u64;
    let mut _5: &u64;
    let _6: &u64;
    let mut _7: &u64;
    let mut _8: &u64;
    let _9: &u64;
    let mut _10: &controller::position::PositionDirection;
    let mut _11: &controller::position::PositionDirection;
    let mut _12: &u64;
    let mut _13: &u64;

    bb0: {
        _10 = deref_copy ((*_1).0: &controller::position::PositionDirection);
        _11 = deref_copy ((*_1).0: &controller::position::PositionDirection);
        _3 = discriminant((*_11));
        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_7);
        _12 = deref_copy ((*_1).1: &u64);
        _7 = &(*_12);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_2).2: u64);
        _8 = &(*_9);
        _0 = <u64 as Ord>::cmp(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_4);
        _4 = &((*_2).2: u64);
        StorageLive(_5);
        StorageLive(_6);
        _13 = deref_copy ((*_1).1: &u64);
        _6 = &(*_13);
        _5 = &(*_6);
        _0 = <u64 as Ord>::cmp(move _4, move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb6;
    }

    bb5: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}
