// MIR for `admin::handle_delete_initialized_spot_market` before PreCodegen

fn admin::handle_delete_initialized_spot_market(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::DeleteInitializedSpotMarket<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _5: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 1];
    let _22: &[&str; 1];
    let _23: [&str; 1];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &u16;
    let _30: &u16;
    let _31: &state::spot_market::SpotMarket;
    let mut _32: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _34: ();
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _36: std::result::Result<(), error::ErrorCode>;
    let mut _37: bool;
    let mut _38: u16;
    let mut _39: u16;
    let mut _40: &state::state::State;
    let mut _41: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _42: (u16, bool);
    let mut _43: u16;
    let mut _44: ();
    let _46: ();
    let mut _47: &str;
    let _48: &str;
    let mut _49: &std::string::String;
    let _50: &std::string::String;
    let _51: std::string::String;
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[&str; 2];
    let _56: &[&str; 2];
    let _57: [&str; 2];
    let mut _58: &[core::fmt::rt::Argument<'_>];
    let mut _59: &[core::fmt::rt::Argument<'_>; 1];
    let _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: [core::fmt::rt::Argument<'_>; 1];
    let mut _62: core::fmt::rt::Argument<'_>;
    let mut _63: &error::ErrorCode;
    let _64: &error::ErrorCode;
    let _65: ();
    let mut _66: &str;
    let _67: &str;
    let mut _68: &std::string::String;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[&str; 2];
    let _75: &[&str; 2];
    let _76: [&str; 2];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let mut _78: &[core::fmt::rt::Argument<'_>; 2];
    let _79: &[core::fmt::rt::Argument<'_>; 2];
    let _80: [core::fmt::rt::Argument<'_>; 2];
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &u16;
    let _83: &u16;
    let _84: &state::state::State;
    let mut _85: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _86: core::fmt::rt::Argument<'_>;
    let mut _87: &u16;
    let _88: &u16;
    let mut _89: error::ErrorCode;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _95: ();
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _97: std::result::Result<(), error::ErrorCode>;
    let mut _98: bool;
    let mut _99: &state::perp_market::MarketStatus;
    let _100: &state::spot_market::SpotMarket;
    let mut _101: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _102: &state::perp_market::MarketStatus;
    let _103: state::perp_market::MarketStatus;
    let mut _104: ();
    let _106: ();
    let mut _107: &str;
    let _108: &str;
    let mut _109: &std::string::String;
    let _110: &std::string::String;
    let _111: std::string::String;
    let mut _113: std::fmt::Arguments<'_>;
    let mut _114: &[&str];
    let mut _115: &[&str; 2];
    let _116: &[&str; 2];
    let _117: [&str; 2];
    let mut _118: &[core::fmt::rt::Argument<'_>];
    let mut _119: &[core::fmt::rt::Argument<'_>; 1];
    let _120: &[core::fmt::rt::Argument<'_>; 1];
    let _121: [core::fmt::rt::Argument<'_>; 1];
    let mut _122: core::fmt::rt::Argument<'_>;
    let mut _123: &error::ErrorCode;
    let _124: &error::ErrorCode;
    let _125: ();
    let mut _126: &str;
    let _127: &str;
    let mut _128: &std::string::String;
    let _129: &std::string::String;
    let _130: std::string::String;
    let mut _132: std::fmt::Arguments<'_>;
    let mut _133: &[&str];
    let mut _134: &[&str; 1];
    let _135: &[&str; 1];
    let _136: [&str; 1];
    let mut _137: error::ErrorCode;
    let mut _138: isize;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _143: ();
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _145: std::result::Result<(), error::ErrorCode>;
    let mut _146: bool;
    let mut _147: u128;
    let mut _148: &state::spot_market::SpotMarket;
    let mut _149: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _150: ();
    let _152: ();
    let mut _153: &str;
    let _154: &str;
    let mut _155: &std::string::String;
    let _156: &std::string::String;
    let _157: std::string::String;
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let mut _161: &[&str; 2];
    let _162: &[&str; 2];
    let _163: [&str; 2];
    let mut _164: &[core::fmt::rt::Argument<'_>];
    let mut _165: &[core::fmt::rt::Argument<'_>; 1];
    let _166: &[core::fmt::rt::Argument<'_>; 1];
    let _167: [core::fmt::rt::Argument<'_>; 1];
    let mut _168: core::fmt::rt::Argument<'_>;
    let mut _169: &error::ErrorCode;
    let _170: &error::ErrorCode;
    let _171: ();
    let mut _172: &str;
    let _173: &str;
    let mut _174: &std::string::String;
    let _175: &std::string::String;
    let _176: std::string::String;
    let mut _178: std::fmt::Arguments<'_>;
    let mut _179: &[&str];
    let mut _180: &[&str; 2];
    let _181: &[&str; 2];
    let _182: [&str; 2];
    let mut _183: &[core::fmt::rt::Argument<'_>];
    let mut _184: &[core::fmt::rt::Argument<'_>; 1];
    let _185: &[core::fmt::rt::Argument<'_>; 1];
    let _186: [core::fmt::rt::Argument<'_>; 1];
    let mut _187: core::fmt::rt::Argument<'_>;
    let mut _188: &u128;
    let _189: &u128;
    let _190: &state::spot_market::SpotMarket;
    let mut _191: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _192: error::ErrorCode;
    let mut _193: isize;
    let mut _195: !;
    let mut _196: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _198: ();
    let mut _199: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _200: std::result::Result<(), error::ErrorCode>;
    let mut _201: bool;
    let mut _202: u128;
    let mut _203: &state::spot_market::SpotMarket;
    let mut _204: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _205: ();
    let _207: ();
    let mut _208: &str;
    let _209: &str;
    let mut _210: &std::string::String;
    let _211: &std::string::String;
    let _212: std::string::String;
    let mut _214: std::fmt::Arguments<'_>;
    let mut _215: &[&str];
    let mut _216: &[&str; 2];
    let _217: &[&str; 2];
    let _218: [&str; 2];
    let mut _219: &[core::fmt::rt::Argument<'_>];
    let mut _220: &[core::fmt::rt::Argument<'_>; 1];
    let _221: &[core::fmt::rt::Argument<'_>; 1];
    let _222: [core::fmt::rt::Argument<'_>; 1];
    let mut _223: core::fmt::rt::Argument<'_>;
    let mut _224: &error::ErrorCode;
    let _225: &error::ErrorCode;
    let _226: ();
    let mut _227: &str;
    let _228: &str;
    let mut _229: &std::string::String;
    let _230: &std::string::String;
    let _231: std::string::String;
    let mut _233: std::fmt::Arguments<'_>;
    let mut _234: &[&str];
    let mut _235: &[&str; 2];
    let _236: &[&str; 2];
    let _237: [&str; 2];
    let mut _238: &[core::fmt::rt::Argument<'_>];
    let mut _239: &[core::fmt::rt::Argument<'_>; 1];
    let _240: &[core::fmt::rt::Argument<'_>; 1];
    let _241: [core::fmt::rt::Argument<'_>; 1];
    let mut _242: core::fmt::rt::Argument<'_>;
    let mut _243: &u128;
    let _244: &u128;
    let _245: &state::spot_market::SpotMarket;
    let mut _246: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _247: error::ErrorCode;
    let mut _248: isize;
    let mut _250: !;
    let mut _251: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _253: ();
    let mut _254: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _255: std::result::Result<(), error::ErrorCode>;
    let mut _256: bool;
    let mut _257: u16;
    let mut _258: &state::spot_market::SpotMarket;
    let mut _259: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _260: u16;
    let mut _261: ();
    let _263: ();
    let mut _264: &str;
    let _265: &str;
    let mut _266: &std::string::String;
    let _267: &std::string::String;
    let _268: std::string::String;
    let mut _270: std::fmt::Arguments<'_>;
    let mut _271: &[&str];
    let mut _272: &[&str; 2];
    let _273: &[&str; 2];
    let _274: [&str; 2];
    let mut _275: &[core::fmt::rt::Argument<'_>];
    let mut _276: &[core::fmt::rt::Argument<'_>; 1];
    let _277: &[core::fmt::rt::Argument<'_>; 1];
    let _278: [core::fmt::rt::Argument<'_>; 1];
    let mut _279: core::fmt::rt::Argument<'_>;
    let mut _280: &error::ErrorCode;
    let _281: &error::ErrorCode;
    let _282: ();
    let mut _283: &str;
    let _284: &str;
    let mut _285: &std::string::String;
    let _286: &std::string::String;
    let _287: std::string::String;
    let mut _289: std::fmt::Arguments<'_>;
    let mut _290: &[&str];
    let mut _291: &[&str; 2];
    let _292: &[&str; 2];
    let _293: [&str; 2];
    let mut _294: &[core::fmt::rt::Argument<'_>];
    let mut _295: &[core::fmt::rt::Argument<'_>; 2];
    let _296: &[core::fmt::rt::Argument<'_>; 2];
    let _297: [core::fmt::rt::Argument<'_>; 2];
    let mut _298: core::fmt::rt::Argument<'_>;
    let mut _299: &u16;
    let _300: &u16;
    let mut _301: core::fmt::rt::Argument<'_>;
    let mut _302: &u16;
    let _303: &u16;
    let _304: &state::spot_market::SpotMarket;
    let mut _305: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _306: error::ErrorCode;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _312: ();
    let mut _313: u16;
    let mut _314: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _315: std::result::Result<u16, error::ErrorCode>;
    let mut _316: std::option::Option<u16>;
    let mut _317: u16;
    let mut _318: &state::state::State;
    let mut _319: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _320: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _321: isize;
    let mut _323: !;
    let mut _324: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _326: &mut state::state::State;
    let mut _327: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let _328: ();
    let mut _329: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _330: ();
    let mut _331: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _332: std::result::Result<(), error::ErrorCode>;
    let mut _333: bool;
    let mut _334: u64;
    let mut _335: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _336: &anchor_spl::token_interface::TokenAccount;
    let _337: &anchor_spl::token_interface::TokenAccount;
    let mut _338: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _339: ();
    let _341: ();
    let mut _342: &str;
    let _343: &str;
    let mut _344: &std::string::String;
    let _345: &std::string::String;
    let _346: std::string::String;
    let mut _348: std::fmt::Arguments<'_>;
    let mut _349: &[&str];
    let mut _350: &[&str; 2];
    let _351: &[&str; 2];
    let _352: [&str; 2];
    let mut _353: &[core::fmt::rt::Argument<'_>];
    let mut _354: &[core::fmt::rt::Argument<'_>; 1];
    let _355: &[core::fmt::rt::Argument<'_>; 1];
    let _356: [core::fmt::rt::Argument<'_>; 1];
    let mut _357: core::fmt::rt::Argument<'_>;
    let mut _358: &error::ErrorCode;
    let _359: &error::ErrorCode;
    let _360: ();
    let mut _361: &str;
    let _362: &str;
    let mut _363: &std::string::String;
    let _364: &std::string::String;
    let _365: std::string::String;
    let mut _367: std::fmt::Arguments<'_>;
    let mut _368: &[&str];
    let mut _369: &[&str; 1];
    let _370: &[&str; 1];
    let _371: [&str; 1];
    let mut _372: &[core::fmt::rt::Argument<'_>];
    let mut _373: &[core::fmt::rt::Argument<'_>; 1];
    let _374: &[core::fmt::rt::Argument<'_>; 1];
    let _375: [core::fmt::rt::Argument<'_>; 1];
    let mut _376: core::fmt::rt::Argument<'_>;
    let mut _377: &u64;
    let _378: &u64;
    let _379: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _380: &anchor_spl::token_interface::TokenAccount;
    let _381: &anchor_spl::token_interface::TokenAccount;
    let mut _382: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _383: error::ErrorCode;
    let mut _384: isize;
    let mut _386: !;
    let mut _387: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _389: ();
    let mut _390: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _391: std::result::Result<(), anchor_lang::error::Error>;
    let mut _392: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _393: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _394: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _395: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _396: &anchor_lang::prelude::AccountInfo<'_>;
    let _397: &anchor_lang::prelude::AccountInfo<'_>;
    let _398: anchor_lang::prelude::AccountInfo<'_>;
    let mut _399: &anchor_lang::prelude::Signer<'_>;
    let mut _400: &anchor_lang::prelude::AccountInfo<'_>;
    let _401: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _402: u8;
    let mut _403: &state::state::State;
    let mut _404: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _405: isize;
    let mut _407: !;
    let mut _408: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _410: ();
    let mut _411: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _412: std::result::Result<(), error::ErrorCode>;
    let mut _413: bool;
    let mut _414: u64;
    let mut _415: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _416: &anchor_spl::token_interface::TokenAccount;
    let _417: &anchor_spl::token_interface::TokenAccount;
    let mut _418: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _419: ();
    let _421: ();
    let mut _422: &str;
    let _423: &str;
    let mut _424: &std::string::String;
    let _425: &std::string::String;
    let _426: std::string::String;
    let mut _428: std::fmt::Arguments<'_>;
    let mut _429: &[&str];
    let mut _430: &[&str; 2];
    let _431: &[&str; 2];
    let _432: [&str; 2];
    let mut _433: &[core::fmt::rt::Argument<'_>];
    let mut _434: &[core::fmt::rt::Argument<'_>; 1];
    let _435: &[core::fmt::rt::Argument<'_>; 1];
    let _436: [core::fmt::rt::Argument<'_>; 1];
    let mut _437: core::fmt::rt::Argument<'_>;
    let mut _438: &error::ErrorCode;
    let _439: &error::ErrorCode;
    let _440: ();
    let mut _441: &str;
    let _442: &str;
    let mut _443: &std::string::String;
    let _444: &std::string::String;
    let _445: std::string::String;
    let mut _447: std::fmt::Arguments<'_>;
    let mut _448: &[&str];
    let mut _449: &[&str; 1];
    let _450: &[&str; 1];
    let _451: [&str; 1];
    let mut _452: &[core::fmt::rt::Argument<'_>];
    let mut _453: &[core::fmt::rt::Argument<'_>; 1];
    let _454: &[core::fmt::rt::Argument<'_>; 1];
    let _455: [core::fmt::rt::Argument<'_>; 1];
    let mut _456: core::fmt::rt::Argument<'_>;
    let mut _457: &u64;
    let _458: &u64;
    let _459: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _460: &anchor_spl::token_interface::TokenAccount;
    let _461: &anchor_spl::token_interface::TokenAccount;
    let mut _462: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _463: error::ErrorCode;
    let mut _464: isize;
    let mut _466: !;
    let mut _467: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _469: ();
    let mut _470: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _471: std::result::Result<(), anchor_lang::error::Error>;
    let mut _472: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _473: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _474: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _475: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _476: &anchor_lang::prelude::AccountInfo<'_>;
    let _477: &anchor_lang::prelude::AccountInfo<'_>;
    let _478: anchor_lang::prelude::AccountInfo<'_>;
    let mut _479: &anchor_lang::prelude::Signer<'_>;
    let mut _480: &anchor_lang::prelude::AccountInfo<'_>;
    let _481: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _482: u8;
    let mut _483: &state::state::State;
    let mut _484: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _485: isize;
    let mut _487: !;
    let mut _488: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _490: ();
    let mut _507: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _508: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _509: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _510: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _511: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _512: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _513: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _514: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _515: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _516: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _517: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _518: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _519: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _520: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _521: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _522: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _523: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _524: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _525: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _526: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _527: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _528: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _529: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _530: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _531: &mut instructions::admin::DeleteInitializedSpotMarket<'_>;
    let mut _532: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _533: bool;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _550: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _551: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _552: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _553: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _554: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _555: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _556: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _557: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _558: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _559: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _560: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug spot_market => _3;
        let _18: std::string::String;
        let _33: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        let mut _506: &[&str; 1];
        scope 6 {
            debug res => _18;
        }
        scope 7 {
            debug state => _33;
            let _45: error::ErrorCode;
            let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _94: ();
            let _105: error::ErrorCode;
            let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _142: ();
            let _151: error::ErrorCode;
            let _194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _197: ();
            let _206: error::ErrorCode;
            let _249: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _252: ();
            let _262: error::ErrorCode;
            let _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _311: ();
            let _322: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _325: u16;
            let _340: error::ErrorCode;
            let _385: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _388: ();
            let _406: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _409: ();
            let _420: error::ErrorCode;
            let _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _468: ();
            let _486: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _489: ();
            let mut _503: &state::perp_market::MarketStatus;
            scope 8 {
                debug error_code => _45;
                let _52: std::string::String;
                let _71: std::string::String;
                let mut _504: &[&str; 2];
                let mut _505: &[&str; 2];
                scope 9 {
                    debug res => _52;
                }
                scope 10 {
                    debug res => _71;
                }
            }
            scope 11 {
                debug residual => _91;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _94;
                scope 14 {
                }
            }
            scope 15 {
                debug error_code => _105;
                let _112: std::string::String;
                let _131: std::string::String;
                let mut _501: &[&str; 1];
                let mut _502: &[&str; 2];
                scope 16 {
                    debug res => _112;
                }
                scope 17 {
                    debug res => _131;
                }
            }
            scope 18 {
                debug residual => _139;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _142;
                scope 21 {
                }
            }
            scope 22 {
                debug error_code => _151;
                let _158: std::string::String;
                let _177: std::string::String;
                let mut _499: &[&str; 2];
                let mut _500: &[&str; 2];
                scope 23 {
                    debug res => _158;
                }
                scope 24 {
                    debug res => _177;
                }
            }
            scope 25 {
                debug residual => _194;
                scope 26 {
                }
            }
            scope 27 {
                debug val => _197;
                scope 28 {
                }
            }
            scope 29 {
                debug error_code => _206;
                let _213: std::string::String;
                let _232: std::string::String;
                let mut _497: &[&str; 2];
                let mut _498: &[&str; 2];
                scope 30 {
                    debug res => _213;
                }
                scope 31 {
                    debug res => _232;
                }
            }
            scope 32 {
                debug residual => _249;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _252;
                scope 35 {
                }
            }
            scope 36 {
                debug error_code => _262;
                let _269: std::string::String;
                let _288: std::string::String;
                let mut _495: &[&str; 2];
                let mut _496: &[&str; 2];
                scope 37 {
                    debug res => _269;
                }
                scope 38 {
                    debug res => _288;
                }
            }
            scope 39 {
                debug residual => _308;
                scope 40 {
                }
            }
            scope 41 {
                debug val => _311;
                scope 42 {
                }
            }
            scope 43 {
                debug residual => _322;
                scope 44 {
                }
            }
            scope 45 {
                debug val => _325;
                scope 46 {
                }
            }
            scope 47 {
                debug error_code => _340;
                let _347: std::string::String;
                let _366: std::string::String;
                let mut _493: &[&str; 1];
                let mut _494: &[&str; 2];
                scope 48 {
                    debug res => _347;
                }
                scope 49 {
                    debug res => _366;
                }
            }
            scope 50 {
                debug residual => _385;
                scope 51 {
                }
            }
            scope 52 {
                debug val => _388;
                scope 53 {
                }
            }
            scope 54 {
                debug residual => _406;
                scope 55 {
                }
            }
            scope 56 {
                debug val => _409;
                scope 57 {
                }
            }
            scope 58 {
                debug error_code => _420;
                let _427: std::string::String;
                let _446: std::string::String;
                let mut _491: &[&str; 1];
                let mut _492: &[&str; 2];
                scope 59 {
                    debug res => _427;
                }
                scope 60 {
                    debug res => _446;
                }
            }
            scope 61 {
                debug residual => _465;
                scope 62 {
                }
            }
            scope 63 {
                debug val => _468;
                scope 64 {
                }
            }
            scope 65 {
                debug residual => _486;
                scope 66 {
                }
            }
            scope 67 {
                debug val => _489;
                scope 68 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        _533 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _507 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _6 = &((*_507).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<Ref<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb214];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _533 = const true;
        _3 = move _11;
        StorageDead(_11);
        _534 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _506 = const _;
        _22 = &(*_506);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_3;
        _31 = <Ref<'_, SpotMarket> as Deref>::deref(move _32) -> [return: bb7, unwind: bb219];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb220];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _544 = discriminant(_4);
        StorageDead(_4);
        goto -> bb195;
    }

    bb7: {
        StorageDead(_32);
        _30 = &((*_31).42: u16);
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _29) -> [return: bb8, unwind: bb219];
    }

    bb8: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb9, unwind: bb219];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb10, unwind: bb219];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb11, unwind: bb213];
    }

    bb11: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb12, unwind: bb213];
    }

    bb12: {
        StorageDead(_13);
        drop(_17) -> [return: bb13, unwind: bb219];
    }

    bb13: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_33);
        _508 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _33 = &mut ((*_508).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _509 = deref_copy (*_33);
        _549 = (((_509.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _41 = &(*_549);
        _40 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _41) -> [return: bb14, unwind: bb219];
    }

    bb14: {
        StorageDead(_41);
        _39 = ((*_40).14: u16);
        _42 = CheckedSub(_39, const 1_u16);
        assert(!move (_42.1: bool), "attempt to compute `{} - {}`, which would overflow", move _39, const 1_u16) -> [success: bb15, unwind: bb219];
    }

    bb15: {
        _38 = move (_42.0: u16);
        StorageDead(_39);
        StorageLive(_43);
        _43 = _2;
        _37 = Eq(move _38, move _43);
        switchInt(move _37) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_44);
        _44 = ();
        _36 = std::result::Result::<(), error::ErrorCode>::Ok(move _44);
        StorageDead(_44);
        goto -> bb32;
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_45);
        _45 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _505 = const _;
        _56 = &(*_505);
        _55 = &(*_56);
        _54 = move _55 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_55);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_45;
        _63 = &(*_64);
        _62 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _63) -> [return: bb18, unwind: bb219];
    }

    bb18: {
        StorageDead(_63);
        _61 = [move _62];
        StorageDead(_62);
        _60 = &_61;
        _59 = &(*_60);
        _58 = move _59 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_59);
        _53 = Arguments::<'_>::new_v1(move _54, move _58) -> [return: bb19, unwind: bb219];
    }

    bb19: {
        StorageDead(_58);
        StorageDead(_54);
        _52 = format(move _53) -> [return: bb20, unwind: bb219];
    }

    bb20: {
        StorageDead(_53);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_56);
        _51 = move _52;
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = <String as Deref>::deref(move _49) -> [return: bb21, unwind: bb212];
    }

    bb21: {
        _47 = &(*_48);
        StorageDead(_49);
        _46 = solana_program::log::sol_log(move _47) -> [return: bb22, unwind: bb212];
    }

    bb22: {
        StorageDead(_47);
        drop(_51) -> [return: bb23, unwind: bb219];
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_46);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _504 = const _;
        _75 = &(*_504);
        _74 = &(*_75);
        _73 = move _74 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _510 = deref_copy (*_33);
        _550 = (((_510.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _85 = &(*_550);
        _84 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _85) -> [return: bb24, unwind: bb219];
    }

    bb24: {
        StorageDead(_85);
        _83 = &((*_84).13: u16);
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _82) -> [return: bb25, unwind: bb219];
    }

    bb25: {
        StorageDead(_82);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_2;
        _87 = &(*_88);
        _86 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _87) -> [return: bb26, unwind: bb219];
    }

    bb26: {
        StorageDead(_87);
        _80 = [move _81, move _86];
        StorageDead(_86);
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = move _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_78);
        _72 = Arguments::<'_>::new_v1(move _73, move _77) -> [return: bb27, unwind: bb219];
    }

    bb27: {
        StorageDead(_77);
        StorageDead(_73);
        _71 = format(move _72) -> [return: bb28, unwind: bb219];
    }

    bb28: {
        StorageDead(_72);
        StorageDead(_88);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_75);
        _70 = move _71;
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = <String as Deref>::deref(move _68) -> [return: bb29, unwind: bb211];
    }

    bb29: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = solana_program::log::sol_log(move _66) -> [return: bb30, unwind: bb211];
    }

    bb30: {
        StorageDead(_66);
        drop(_70) -> [return: bb31, unwind: bb219];
    }

    bb31: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_89);
        _89 = _45;
        _36 = std::result::Result::<(), error::ErrorCode>::Err(move _89);
        StorageDead(_89);
        StorageDead(_45);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_37);
        _35 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _36) -> [return: bb33, unwind: bb219];
    }

    bb33: {
        StorageDead(_36);
        _90 = discriminant(_35);
        switchInt(move _90) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_94);
        _94 = ((_35 as Continue).0: ());
        _34 = _94;
        StorageDead(_94);
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_3;
        _100 = <Ref<'_, SpotMarket> as Deref>::deref(move _101) -> [return: bb37, unwind: bb219];
    }

    bb35: {
        StorageLive(_91);
        _91 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb36, unwind: bb219];
    }

    bb36: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb194;
    }

    bb37: {
        StorageDead(_101);
        _99 = &((*_100).45: state::perp_market::MarketStatus);
        StorageLive(_102);
        _503 = const _;
        _102 = &(*_503);
        _98 = <state::perp_market::MarketStatus as PartialEq>::eq(move _99, move _102) -> [return: bb38, unwind: bb219];
    }

    bb38: {
        switchInt(move _98) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = ();
        _97 = std::result::Result::<(), error::ErrorCode>::Ok(move _104);
        StorageDead(_104);
        goto -> bb52;
    }

    bb40: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_105);
        _105 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _502 = const _;
        _116 = &(*_502);
        _115 = &(*_116);
        _114 = move _115 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_115);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_105;
        _123 = &(*_124);
        _122 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _123) -> [return: bb41, unwind: bb219];
    }

    bb41: {
        StorageDead(_123);
        _121 = [move _122];
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = move _119 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_119);
        _113 = Arguments::<'_>::new_v1(move _114, move _118) -> [return: bb42, unwind: bb219];
    }

    bb42: {
        StorageDead(_118);
        StorageDead(_114);
        _112 = format(move _113) -> [return: bb43, unwind: bb219];
    }

    bb43: {
        StorageDead(_113);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_116);
        _111 = move _112;
        StorageDead(_112);
        _110 = &_111;
        _109 = &(*_110);
        _108 = <String as Deref>::deref(move _109) -> [return: bb44, unwind: bb210];
    }

    bb44: {
        _107 = &(*_108);
        StorageDead(_109);
        _106 = solana_program::log::sol_log(move _107) -> [return: bb45, unwind: bb210];
    }

    bb45: {
        StorageDead(_107);
        drop(_111) -> [return: bb46, unwind: bb219];
    }

    bb46: {
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_106);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _501 = const _;
        _135 = &(*_501);
        _134 = &(*_135);
        _133 = move _134 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_134);
        _132 = Arguments::<'_>::new_const(move _133) -> [return: bb47, unwind: bb219];
    }

    bb47: {
        StorageDead(_133);
        _131 = format(move _132) -> [return: bb48, unwind: bb219];
    }

    bb48: {
        StorageDead(_132);
        StorageDead(_135);
        _130 = move _131;
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = <String as Deref>::deref(move _128) -> [return: bb49, unwind: bb209];
    }

    bb49: {
        _126 = &(*_127);
        StorageDead(_128);
        _125 = solana_program::log::sol_log(move _126) -> [return: bb50, unwind: bb209];
    }

    bb50: {
        StorageDead(_126);
        drop(_130) -> [return: bb51, unwind: bb219];
    }

    bb51: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageLive(_137);
        _137 = _105;
        _97 = std::result::Result::<(), error::ErrorCode>::Err(move _137);
        StorageDead(_137);
        StorageDead(_105);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_98);
        _96 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _97) -> [return: bb53, unwind: bb219];
    }

    bb53: {
        StorageDead(_97);
        _138 = discriminant(_96);
        switchInt(move _138) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_142);
        _142 = ((_96 as Continue).0: ());
        _95 = _142;
        StorageDead(_142);
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_3;
        _148 = <Ref<'_, SpotMarket> as Deref>::deref(move _149) -> [return: bb57, unwind: bb219];
    }

    bb55: {
        StorageLive(_139);
        _139 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb56, unwind: bb219];
    }

    bb56: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb194;
    }

    bb57: {
        StorageDead(_149);
        _147 = ((*_148).11: u128);
        _146 = Eq(move _147, const 0_u128);
        switchInt(move _146) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_150);
        _150 = ();
        _145 = std::result::Result::<(), error::ErrorCode>::Ok(move _150);
        StorageDead(_150);
        goto -> bb73;
    }

    bb59: {
        StorageDead(_148);
        StorageDead(_147);
        StorageLive(_151);
        _151 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _500 = const _;
        _162 = &(*_500);
        _161 = &(*_162);
        _160 = move _161 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_161);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &_151;
        _169 = &(*_170);
        _168 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _169) -> [return: bb60, unwind: bb219];
    }

    bb60: {
        StorageDead(_169);
        _167 = [move _168];
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = move _165 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_165);
        _159 = Arguments::<'_>::new_v1(move _160, move _164) -> [return: bb61, unwind: bb219];
    }

    bb61: {
        StorageDead(_164);
        StorageDead(_160);
        _158 = format(move _159) -> [return: bb62, unwind: bb219];
    }

    bb62: {
        StorageDead(_159);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_162);
        _157 = move _158;
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = <String as Deref>::deref(move _155) -> [return: bb63, unwind: bb208];
    }

    bb63: {
        _153 = &(*_154);
        StorageDead(_155);
        _152 = solana_program::log::sol_log(move _153) -> [return: bb64, unwind: bb208];
    }

    bb64: {
        StorageDead(_153);
        drop(_157) -> [return: bb65, unwind: bb219];
    }

    bb65: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_152);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _499 = const _;
        _181 = &(*_499);
        _180 = &(*_181);
        _179 = move _180 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_180);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_3;
        _190 = <Ref<'_, SpotMarket> as Deref>::deref(move _191) -> [return: bb66, unwind: bb219];
    }

    bb66: {
        StorageDead(_191);
        _189 = &((*_190).11: u128);
        _188 = &(*_189);
        _187 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _188) -> [return: bb67, unwind: bb219];
    }

    bb67: {
        StorageDead(_188);
        _186 = [move _187];
        StorageDead(_187);
        _185 = &_186;
        _184 = &(*_185);
        _183 = move _184 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_184);
        _178 = Arguments::<'_>::new_v1(move _179, move _183) -> [return: bb68, unwind: bb219];
    }

    bb68: {
        StorageDead(_183);
        StorageDead(_179);
        _177 = format(move _178) -> [return: bb69, unwind: bb219];
    }

    bb69: {
        StorageDead(_178);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_181);
        _176 = move _177;
        StorageDead(_177);
        _175 = &_176;
        _174 = &(*_175);
        _173 = <String as Deref>::deref(move _174) -> [return: bb70, unwind: bb207];
    }

    bb70: {
        _172 = &(*_173);
        StorageDead(_174);
        _171 = solana_program::log::sol_log(move _172) -> [return: bb71, unwind: bb207];
    }

    bb71: {
        StorageDead(_172);
        drop(_176) -> [return: bb72, unwind: bb219];
    }

    bb72: {
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_171);
        StorageLive(_192);
        _192 = _151;
        _145 = std::result::Result::<(), error::ErrorCode>::Err(move _192);
        StorageDead(_192);
        StorageDead(_151);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_146);
        _144 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _145) -> [return: bb74, unwind: bb219];
    }

    bb74: {
        StorageDead(_145);
        _193 = discriminant(_144);
        switchInt(move _193) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_197);
        _197 = ((_144 as Continue).0: ());
        _143 = _197;
        StorageDead(_197);
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &_3;
        _203 = <Ref<'_, SpotMarket> as Deref>::deref(move _204) -> [return: bb78, unwind: bb219];
    }

    bb76: {
        StorageLive(_194);
        _194 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_196);
        _196 = _194;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _196) -> [return: bb77, unwind: bb219];
    }

    bb77: {
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb194;
    }

    bb78: {
        StorageDead(_204);
        _202 = ((*_203).12: u128);
        _201 = Eq(move _202, const 0_u128);
        switchInt(move _201) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        StorageDead(_203);
        StorageDead(_202);
        StorageLive(_205);
        _205 = ();
        _200 = std::result::Result::<(), error::ErrorCode>::Ok(move _205);
        StorageDead(_205);
        goto -> bb94;
    }

    bb80: {
        StorageDead(_203);
        StorageDead(_202);
        StorageLive(_206);
        _206 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _498 = const _;
        _217 = &(*_498);
        _216 = &(*_217);
        _215 = move _216 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_216);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = &_206;
        _224 = &(*_225);
        _223 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _224) -> [return: bb81, unwind: bb219];
    }

    bb81: {
        StorageDead(_224);
        _222 = [move _223];
        StorageDead(_223);
        _221 = &_222;
        _220 = &(*_221);
        _219 = move _220 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_220);
        _214 = Arguments::<'_>::new_v1(move _215, move _219) -> [return: bb82, unwind: bb219];
    }

    bb82: {
        StorageDead(_219);
        StorageDead(_215);
        _213 = format(move _214) -> [return: bb83, unwind: bb219];
    }

    bb83: {
        StorageDead(_214);
        StorageDead(_225);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_217);
        _212 = move _213;
        StorageDead(_213);
        _211 = &_212;
        _210 = &(*_211);
        _209 = <String as Deref>::deref(move _210) -> [return: bb84, unwind: bb206];
    }

    bb84: {
        _208 = &(*_209);
        StorageDead(_210);
        _207 = solana_program::log::sol_log(move _208) -> [return: bb85, unwind: bb206];
    }

    bb85: {
        StorageDead(_208);
        drop(_212) -> [return: bb86, unwind: bb219];
    }

    bb86: {
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_207);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _497 = const _;
        _236 = &(*_497);
        _235 = &(*_236);
        _234 = move _235 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_235);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_3;
        _245 = <Ref<'_, SpotMarket> as Deref>::deref(move _246) -> [return: bb87, unwind: bb219];
    }

    bb87: {
        StorageDead(_246);
        _244 = &((*_245).12: u128);
        _243 = &(*_244);
        _242 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _243) -> [return: bb88, unwind: bb219];
    }

    bb88: {
        StorageDead(_243);
        _241 = [move _242];
        StorageDead(_242);
        _240 = &_241;
        _239 = &(*_240);
        _238 = move _239 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_239);
        _233 = Arguments::<'_>::new_v1(move _234, move _238) -> [return: bb89, unwind: bb219];
    }

    bb89: {
        StorageDead(_238);
        StorageDead(_234);
        _232 = format(move _233) -> [return: bb90, unwind: bb219];
    }

    bb90: {
        StorageDead(_233);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_236);
        _231 = move _232;
        StorageDead(_232);
        _230 = &_231;
        _229 = &(*_230);
        _228 = <String as Deref>::deref(move _229) -> [return: bb91, unwind: bb205];
    }

    bb91: {
        _227 = &(*_228);
        StorageDead(_229);
        _226 = solana_program::log::sol_log(move _227) -> [return: bb92, unwind: bb205];
    }

    bb92: {
        StorageDead(_227);
        drop(_231) -> [return: bb93, unwind: bb219];
    }

    bb93: {
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_226);
        StorageLive(_247);
        _247 = _206;
        _200 = std::result::Result::<(), error::ErrorCode>::Err(move _247);
        StorageDead(_247);
        StorageDead(_206);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_201);
        _199 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _200) -> [return: bb95, unwind: bb219];
    }

    bb95: {
        StorageDead(_200);
        _248 = discriminant(_199);
        switchInt(move _248) -> [0: bb96, 1: bb97, otherwise: bb4];
    }

    bb96: {
        StorageLive(_252);
        _252 = ((_199 as Continue).0: ());
        _198 = _252;
        StorageDead(_252);
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &_3;
        _258 = <Ref<'_, SpotMarket> as Deref>::deref(move _259) -> [return: bb99, unwind: bb219];
    }

    bb97: {
        StorageLive(_249);
        _249 = ((_199 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_251);
        _251 = _249;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _251) -> [return: bb98, unwind: bb219];
    }

    bb98: {
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb194;
    }

    bb99: {
        StorageDead(_259);
        _257 = ((*_258).42: u16);
        StorageLive(_260);
        _260 = _2;
        _256 = Eq(move _257, move _260);
        switchInt(move _256) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_261);
        _261 = ();
        _255 = std::result::Result::<(), error::ErrorCode>::Ok(move _261);
        StorageDead(_261);
        goto -> bb116;
    }

    bb101: {
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_262);
        _262 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _496 = const _;
        _273 = &(*_496);
        _272 = &(*_273);
        _271 = move _272 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_272);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &_262;
        _280 = &(*_281);
        _279 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _280) -> [return: bb102, unwind: bb219];
    }

    bb102: {
        StorageDead(_280);
        _278 = [move _279];
        StorageDead(_279);
        _277 = &_278;
        _276 = &(*_277);
        _275 = move _276 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_276);
        _270 = Arguments::<'_>::new_v1(move _271, move _275) -> [return: bb103, unwind: bb219];
    }

    bb103: {
        StorageDead(_275);
        StorageDead(_271);
        _269 = format(move _270) -> [return: bb104, unwind: bb219];
    }

    bb104: {
        StorageDead(_270);
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_273);
        _268 = move _269;
        StorageDead(_269);
        _267 = &_268;
        _266 = &(*_267);
        _265 = <String as Deref>::deref(move _266) -> [return: bb105, unwind: bb204];
    }

    bb105: {
        _264 = &(*_265);
        StorageDead(_266);
        _263 = solana_program::log::sol_log(move _264) -> [return: bb106, unwind: bb204];
    }

    bb106: {
        StorageDead(_264);
        drop(_268) -> [return: bb107, unwind: bb219];
    }

    bb107: {
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_263);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _495 = const _;
        _292 = &(*_495);
        _291 = &(*_292);
        _290 = move _291 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_291);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = &_2;
        _299 = &(*_300);
        _298 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _299) -> [return: bb108, unwind: bb219];
    }

    bb108: {
        StorageDead(_299);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &_3;
        _304 = <Ref<'_, SpotMarket> as Deref>::deref(move _305) -> [return: bb109, unwind: bb219];
    }

    bb109: {
        StorageDead(_305);
        _303 = &((*_304).42: u16);
        _302 = &(*_303);
        _301 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _302) -> [return: bb110, unwind: bb219];
    }

    bb110: {
        StorageDead(_302);
        _297 = [move _298, move _301];
        StorageDead(_301);
        StorageDead(_298);
        _296 = &_297;
        _295 = &(*_296);
        _294 = move _295 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_295);
        _289 = Arguments::<'_>::new_v1(move _290, move _294) -> [return: bb111, unwind: bb219];
    }

    bb111: {
        StorageDead(_294);
        StorageDead(_290);
        _288 = format(move _289) -> [return: bb112, unwind: bb219];
    }

    bb112: {
        StorageDead(_289);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_300);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_292);
        _287 = move _288;
        StorageDead(_288);
        _286 = &_287;
        _285 = &(*_286);
        _284 = <String as Deref>::deref(move _285) -> [return: bb113, unwind: bb203];
    }

    bb113: {
        _283 = &(*_284);
        StorageDead(_285);
        _282 = solana_program::log::sol_log(move _283) -> [return: bb114, unwind: bb203];
    }

    bb114: {
        StorageDead(_283);
        drop(_287) -> [return: bb115, unwind: bb219];
    }

    bb115: {
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_282);
        StorageLive(_306);
        _306 = _262;
        _255 = std::result::Result::<(), error::ErrorCode>::Err(move _306);
        StorageDead(_306);
        StorageDead(_262);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_256);
        _254 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _255) -> [return: bb117, unwind: bb219];
    }

    bb117: {
        StorageDead(_255);
        _307 = discriminant(_254);
        switchInt(move _307) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        StorageLive(_311);
        _311 = ((_254 as Continue).0: ());
        _253 = _311;
        StorageDead(_311);
        StorageDead(_254);
        StorageDead(_253);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _511 = deref_copy (*_33);
        _551 = (((_511.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _319 = &(*_551);
        _318 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _319) -> [return: bb121, unwind: bb219];
    }

    bb119: {
        StorageLive(_308);
        _308 = ((_254 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_310);
        _310 = _308;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _310) -> [return: bb120, unwind: bb219];
    }

    bb120: {
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb194;
    }

    bb121: {
        StorageDead(_319);
        _317 = ((*_318).14: u16);
        _316 = core::num::<impl u16>::checked_sub(move _317, const 1_u16) -> [return: bb122, unwind: bb219];
    }

    bb122: {
        StorageDead(_317);
        StorageLive(_320);
        _320 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _315 = Option::<u16>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _316, move _320) -> [return: bb123, unwind: bb219];
    }

    bb123: {
        StorageDead(_320);
        StorageDead(_316);
        _314 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _315) -> [return: bb124, unwind: bb219];
    }

    bb124: {
        StorageDead(_315);
        _321 = discriminant(_314);
        switchInt(move _321) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        StorageLive(_325);
        _325 = ((_314 as Continue).0: u16);
        _313 = _325;
        StorageDead(_325);
        StorageLive(_326);
        StorageLive(_327);
        _512 = deref_copy (*_33);
        _552 = (((_512.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _327 = &mut (*_552);
        _326 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _327) -> [return: bb128, unwind: bb219];
    }

    bb126: {
        StorageLive(_322);
        _322 = ((_314 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_324);
        _324 = _322;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _324) -> [return: bb127, unwind: bb219];
    }

    bb127: {
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_313);
        StorageDead(_318);
        StorageDead(_314);
        StorageDead(_312);
        goto -> bb194;
    }

    bb128: {
        StorageDead(_327);
        ((*_326).14: u16) = move _313;
        _312 = const ();
        StorageDead(_313);
        StorageDead(_326);
        StorageDead(_318);
        StorageDead(_314);
        StorageDead(_312);
        StorageLive(_328);
        StorageLive(_329);
        _533 = const false;
        _329 = move _3;
        _328 = std::mem::drop::<Ref<'_, SpotMarket>>(move _329) -> [return: bb129, unwind: bb219];
    }

    bb129: {
        StorageDead(_329);
        StorageDead(_328);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _513 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _514 = deref_copy ((*_513).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _553 = (((_514.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _338 = &(*_553);
        _337 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _338) -> [return: bb130, unwind: bb219];
    }

    bb130: {
        _336 = &(*_337);
        _335 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _336) -> [return: bb131, unwind: bb219];
    }

    bb131: {
        StorageDead(_338);
        StorageDead(_336);
        _334 = ((*_335).2: u64);
        _333 = Eq(move _334, const 0_u64);
        switchInt(move _333) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageLive(_339);
        _339 = ();
        _332 = std::result::Result::<(), error::ErrorCode>::Ok(move _339);
        StorageDead(_339);
        goto -> bb148;
    }

    bb133: {
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageLive(_340);
        _340 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _494 = const _;
        _351 = &(*_494);
        _350 = &(*_351);
        _349 = move _350 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_350);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &_340;
        _358 = &(*_359);
        _357 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _358) -> [return: bb134, unwind: bb219];
    }

    bb134: {
        StorageDead(_358);
        _356 = [move _357];
        StorageDead(_357);
        _355 = &_356;
        _354 = &(*_355);
        _353 = move _354 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_354);
        _348 = Arguments::<'_>::new_v1(move _349, move _353) -> [return: bb135, unwind: bb219];
    }

    bb135: {
        StorageDead(_353);
        StorageDead(_349);
        _347 = format(move _348) -> [return: bb136, unwind: bb219];
    }

    bb136: {
        StorageDead(_348);
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_351);
        _346 = move _347;
        StorageDead(_347);
        _345 = &_346;
        _344 = &(*_345);
        _343 = <String as Deref>::deref(move _344) -> [return: bb137, unwind: bb202];
    }

    bb137: {
        _342 = &(*_343);
        StorageDead(_344);
        _341 = solana_program::log::sol_log(move _342) -> [return: bb138, unwind: bb202];
    }

    bb138: {
        StorageDead(_342);
        drop(_346) -> [return: bb139, unwind: bb219];
    }

    bb139: {
        StorageDead(_346);
        StorageDead(_345);
        StorageDead(_343);
        StorageDead(_341);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _493 = const _;
        _370 = &(*_493);
        _369 = &(*_370);
        _368 = move _369 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_369);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _515 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _516 = deref_copy ((*_515).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _554 = (((_516.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _382 = &(*_554);
        _381 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _382) -> [return: bb140, unwind: bb219];
    }

    bb140: {
        _380 = &(*_381);
        _379 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _380) -> [return: bb141, unwind: bb219];
    }

    bb141: {
        StorageDead(_382);
        StorageDead(_380);
        _378 = &((*_379).2: u64);
        _377 = &(*_378);
        _376 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _377) -> [return: bb142, unwind: bb219];
    }

    bb142: {
        StorageDead(_377);
        _375 = [move _376];
        StorageDead(_376);
        _374 = &_375;
        _373 = &(*_374);
        _372 = move _373 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_373);
        _367 = Arguments::<'_>::new_v1(move _368, move _372) -> [return: bb143, unwind: bb219];
    }

    bb143: {
        StorageDead(_372);
        StorageDead(_368);
        _366 = format(move _367) -> [return: bb144, unwind: bb219];
    }

    bb144: {
        StorageDead(_367);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_374);
        StorageDead(_370);
        _365 = move _366;
        StorageDead(_366);
        _364 = &_365;
        _363 = &(*_364);
        _362 = <String as Deref>::deref(move _363) -> [return: bb145, unwind: bb201];
    }

    bb145: {
        _361 = &(*_362);
        StorageDead(_363);
        _360 = solana_program::log::sol_log(move _361) -> [return: bb146, unwind: bb201];
    }

    bb146: {
        StorageDead(_361);
        drop(_365) -> [return: bb147, unwind: bb219];
    }

    bb147: {
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_360);
        StorageLive(_383);
        _383 = _340;
        _332 = std::result::Result::<(), error::ErrorCode>::Err(move _383);
        StorageDead(_383);
        StorageDead(_340);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_333);
        _331 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _332) -> [return: bb149, unwind: bb219];
    }

    bb149: {
        StorageDead(_332);
        _384 = discriminant(_331);
        switchInt(move _384) -> [0: bb150, 1: bb151, otherwise: bb4];
    }

    bb150: {
        StorageLive(_388);
        _388 = ((_331 as Continue).0: ());
        _330 = _388;
        StorageDead(_388);
        StorageDead(_331);
        StorageDead(_330);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _517 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _393 = &((*_517).6: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _392 = &(*_393);
        StorageLive(_394);
        StorageLive(_395);
        _518 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _395 = &((*_518).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _519 = deref_copy (*_395);
        _555 = (((_519.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _394 = &(*_555);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _520 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _399 = &((*_520).0: anchor_lang::prelude::Signer<'_>);
        _398 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _399) -> [return: bb153, unwind: bb219];
    }

    bb151: {
        StorageLive(_385);
        _385 = ((_331 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_387);
        _387 = _385;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _387) -> [return: bb152, unwind: bb219];
    }

    bb152: {
        StorageDead(_387);
        StorageDead(_385);
        StorageDead(_331);
        StorageDead(_330);
        goto -> bb194;
    }

    bb153: {
        StorageDead(_399);
        _397 = &_398;
        _396 = &(*_397);
        StorageLive(_400);
        StorageLive(_401);
        _521 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _401 = &((*_521).5: anchor_lang::prelude::AccountInfo<'_>);
        _400 = &(*_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _522 = deref_copy (*_33);
        _556 = (((_522.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _404 = &(*_556);
        _403 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _404) -> [return: bb154, unwind: bb200];
    }

    bb154: {
        StorageDead(_404);
        _402 = ((*_403).15: u8);
        _391 = close_vault(move _392, move _394, move _396, move _400, move _402) -> [return: bb155, unwind: bb200];
    }

    bb155: {
        StorageDead(_402);
        StorageDead(_400);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_392);
        _390 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _391) -> [return: bb156, unwind: bb200];
    }

    bb156: {
        StorageDead(_391);
        _405 = discriminant(_390);
        switchInt(move _405) -> [0: bb157, 1: bb158, otherwise: bb4];
    }

    bb157: {
        StorageLive(_409);
        _409 = ((_390 as Continue).0: ());
        _389 = _409;
        StorageDead(_409);
        _536 = discriminant(_390);
        StorageDead(_403);
        StorageDead(_401);
        drop(_398) -> [return: bb160, unwind: bb219];
    }

    bb158: {
        StorageLive(_406);
        _406 = move ((_390 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_408);
        _408 = move _406;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _408) -> [return: bb159, unwind: bb217];
    }

    bb159: {
        StorageDead(_408);
        StorageDead(_406);
        _542 = discriminant(_390);
        StorageDead(_403);
        StorageDead(_401);
        drop(_398) -> [return: bb193, unwind: bb219];
    }

    bb160: {
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_389);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _523 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _524 = deref_copy ((*_523).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _557 = (((_524.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _418 = &(*_557);
        _417 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _418) -> [return: bb161, unwind: bb219];
    }

    bb161: {
        _416 = &(*_417);
        _415 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _416) -> [return: bb162, unwind: bb219];
    }

    bb162: {
        StorageDead(_418);
        StorageDead(_416);
        _414 = ((*_415).2: u64);
        _413 = Eq(move _414, const 0_u64);
        switchInt(move _413) -> [0: bb164, otherwise: bb163];
    }

    bb163: {
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_414);
        StorageLive(_419);
        _419 = ();
        _412 = std::result::Result::<(), error::ErrorCode>::Ok(move _419);
        StorageDead(_419);
        goto -> bb179;
    }

    bb164: {
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_414);
        StorageLive(_420);
        _420 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _492 = const _;
        _431 = &(*_492);
        _430 = &(*_431);
        _429 = move _430 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_430);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        _439 = &_420;
        _438 = &(*_439);
        _437 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _438) -> [return: bb165, unwind: bb219];
    }

    bb165: {
        StorageDead(_438);
        _436 = [move _437];
        StorageDead(_437);
        _435 = &_436;
        _434 = &(*_435);
        _433 = move _434 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_434);
        _428 = Arguments::<'_>::new_v1(move _429, move _433) -> [return: bb166, unwind: bb219];
    }

    bb166: {
        StorageDead(_433);
        StorageDead(_429);
        _427 = format(move _428) -> [return: bb167, unwind: bb219];
    }

    bb167: {
        StorageDead(_428);
        StorageDead(_439);
        StorageDead(_436);
        StorageDead(_435);
        StorageDead(_431);
        _426 = move _427;
        StorageDead(_427);
        _425 = &_426;
        _424 = &(*_425);
        _423 = <String as Deref>::deref(move _424) -> [return: bb168, unwind: bb199];
    }

    bb168: {
        _422 = &(*_423);
        StorageDead(_424);
        _421 = solana_program::log::sol_log(move _422) -> [return: bb169, unwind: bb199];
    }

    bb169: {
        StorageDead(_422);
        drop(_426) -> [return: bb170, unwind: bb219];
    }

    bb170: {
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_421);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _491 = const _;
        _450 = &(*_491);
        _449 = &(*_450);
        _448 = move _449 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_449);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _525 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _526 = deref_copy ((*_525).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _558 = (((_526.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _462 = &(*_558);
        _461 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _462) -> [return: bb171, unwind: bb219];
    }

    bb171: {
        _460 = &(*_461);
        _459 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _460) -> [return: bb172, unwind: bb219];
    }

    bb172: {
        StorageDead(_462);
        StorageDead(_460);
        _458 = &((*_459).2: u64);
        _457 = &(*_458);
        _456 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _457) -> [return: bb173, unwind: bb219];
    }

    bb173: {
        StorageDead(_457);
        _455 = [move _456];
        StorageDead(_456);
        _454 = &_455;
        _453 = &(*_454);
        _452 = move _453 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_453);
        _447 = Arguments::<'_>::new_v1(move _448, move _452) -> [return: bb174, unwind: bb219];
    }

    bb174: {
        StorageDead(_452);
        StorageDead(_448);
        _446 = format(move _447) -> [return: bb175, unwind: bb219];
    }

    bb175: {
        StorageDead(_447);
        StorageDead(_461);
        StorageDead(_459);
        StorageDead(_458);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_450);
        _445 = move _446;
        StorageDead(_446);
        _444 = &_445;
        _443 = &(*_444);
        _442 = <String as Deref>::deref(move _443) -> [return: bb176, unwind: bb198];
    }

    bb176: {
        _441 = &(*_442);
        StorageDead(_443);
        _440 = solana_program::log::sol_log(move _441) -> [return: bb177, unwind: bb198];
    }

    bb177: {
        StorageDead(_441);
        drop(_445) -> [return: bb178, unwind: bb219];
    }

    bb178: {
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_440);
        StorageLive(_463);
        _463 = _420;
        _412 = std::result::Result::<(), error::ErrorCode>::Err(move _463);
        StorageDead(_463);
        StorageDead(_420);
        goto -> bb179;
    }

    bb179: {
        StorageDead(_413);
        _411 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _412) -> [return: bb180, unwind: bb219];
    }

    bb180: {
        StorageDead(_412);
        _464 = discriminant(_411);
        switchInt(move _464) -> [0: bb181, 1: bb182, otherwise: bb4];
    }

    bb181: {
        StorageLive(_468);
        _468 = ((_411 as Continue).0: ());
        _410 = _468;
        StorageDead(_468);
        StorageDead(_411);
        StorageDead(_410);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _527 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _473 = &((*_527).6: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _472 = &(*_473);
        StorageLive(_474);
        StorageLive(_475);
        _528 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _475 = &((*_528).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _529 = deref_copy (*_475);
        _559 = (((_529.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _474 = &(*_559);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _530 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _479 = &((*_530).0: anchor_lang::prelude::Signer<'_>);
        _478 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _479) -> [return: bb184, unwind: bb219];
    }

    bb182: {
        StorageLive(_465);
        _465 = ((_411 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_467);
        _467 = _465;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _467) -> [return: bb183, unwind: bb219];
    }

    bb183: {
        StorageDead(_467);
        StorageDead(_465);
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb194;
    }

    bb184: {
        StorageDead(_479);
        _477 = &_478;
        _476 = &(*_477);
        StorageLive(_480);
        StorageLive(_481);
        _531 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedSpotMarket<'_>);
        _481 = &((*_531).5: anchor_lang::prelude::AccountInfo<'_>);
        _480 = &(*_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _532 = deref_copy (*_33);
        _560 = (((_532.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _484 = &(*_560);
        _483 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _484) -> [return: bb185, unwind: bb197];
    }

    bb185: {
        StorageDead(_484);
        _482 = ((*_483).15: u8);
        _471 = close_vault(move _472, move _474, move _476, move _480, move _482) -> [return: bb186, unwind: bb197];
    }

    bb186: {
        StorageDead(_482);
        StorageDead(_480);
        StorageDead(_476);
        StorageDead(_474);
        StorageDead(_472);
        _470 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _471) -> [return: bb187, unwind: bb197];
    }

    bb187: {
        StorageDead(_471);
        _485 = discriminant(_470);
        switchInt(move _485) -> [0: bb188, 1: bb189, otherwise: bb4];
    }

    bb188: {
        StorageLive(_489);
        _489 = ((_470 as Continue).0: ());
        _469 = _489;
        StorageDead(_489);
        _538 = discriminant(_470);
        StorageDead(_483);
        StorageDead(_481);
        drop(_478) -> [return: bb191, unwind: bb219];
    }

    bb189: {
        StorageLive(_486);
        _486 = move ((_470 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_488);
        _488 = move _486;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _488) -> [return: bb190, unwind: bb216];
    }

    bb190: {
        StorageDead(_488);
        StorageDead(_486);
        _540 = discriminant(_470);
        StorageDead(_483);
        StorageDead(_481);
        drop(_478) -> [return: bb192, unwind: bb219];
    }

    bb191: {
        StorageDead(_478);
        StorageDead(_477);
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_470);
        StorageDead(_469);
        StorageLive(_490);
        _490 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _490);
        StorageDead(_490);
        StorageDead(_33);
        _533 = const false;
        StorageDead(_3);
        goto -> bb196;
    }

    bb192: {
        StorageDead(_478);
        StorageDead(_477);
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_470);
        StorageDead(_469);
        goto -> bb194;
    }

    bb193: {
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_389);
        goto -> bb194;
    }

    bb194: {
        StorageDead(_33);
        switchInt(_533) -> [0: bb195, otherwise: bb215];
    }

    bb195: {
        _533 = const false;
        StorageDead(_3);
        goto -> bb196;
    }

    bb196: {
        return;
    }

    bb197 (cleanup): {
        drop(_478) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb198 (cleanup): {
        drop(_445) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb199 (cleanup): {
        drop(_426) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb200 (cleanup): {
        drop(_398) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb201 (cleanup): {
        drop(_365) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb202 (cleanup): {
        drop(_346) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb203 (cleanup): {
        drop(_287) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        drop(_268) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        drop(_231) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        drop(_212) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        drop(_176) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        drop(_157) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb209 (cleanup): {
        drop(_130) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        drop(_111) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        drop(_70) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_51) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        drop(_17) -> [return: bb219, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        resume;
    }

    bb215: {
        drop(_3) -> [return: bb195, unwind: bb214];
    }

    bb216 (cleanup): {
        _546 = discriminant(_470);
        goto -> bb197;
    }

    bb217 (cleanup): {
        _547 = discriminant(_390);
        goto -> bb200;
    }

    bb218 (cleanup): {
        drop(_3) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        switchInt(_533) -> [0: bb214, otherwise: bb218];
    }

    bb220 (cleanup): {
        _548 = discriminant(_4);
        goto -> bb214;
    }
}
