// MIR for `pyth_pull_oracle::handle_post_multi_pyth_pull_oracle_updates_atomic` after PreCodegen

fn pyth_pull_oracle::handle_post_multi_pyth_pull_oracle_updates_atomic(_1: anchor_lang::context::Context<'_, '_, '_, '_, pyth_pull_oracle::PostPythPullMultiOracleUpdatesAtomic<'_>>, _2: Vec<u8>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &[anchor_lang::prelude::AccountInfo<'_>];
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: bool;
    let mut _8: usize;
    let mut _9: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _10: ();
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 2];
    let _22: &[&str; 2];
    let _23: [&str; 2];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &error::ErrorCode;
    let _30: &error::ErrorCode;
    let mut _31: error::ErrorCode;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: std::result::Result<pyth_solana_receiver_sdk::PostMultiUpdatesAtomicParams, std::io::Error>;
    let mut _39: &mut &[u8];
    let mut _40: &mut &[u8];
    let mut _41: &[u8];
    let _42: &[u8];
    let mut _43: &std::vec::Vec<u8>;
    let mut _44: std::ops::RangeFull;
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _49: std::result::Result<(), error::ErrorCode>;
    let mut _50: bool;
    let mut _51: usize;
    let mut _52: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _53: usize;
    let mut _54: &std::vec::Vec<pythnet_sdk::wire::v1::MerklePriceUpdate>;
    let mut _55: ();
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: &std::string::String;
    let _61: &std::string::String;
    let _62: std::string::String;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[&str; 2];
    let _67: &[&str; 2];
    let _68: [&str; 2];
    let mut _69: &[core::fmt::rt::Argument<'_>];
    let mut _70: &[core::fmt::rt::Argument<'_>; 1];
    let _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: [core::fmt::rt::Argument<'_>; 1];
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: &error::ErrorCode;
    let _75: &error::ErrorCode;
    let mut _76: error::ErrorCode;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _82: ();
    let mut _83: std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pythnet_sdk::wire::v1::MerklePriceUpdate>>;
    let mut _84: std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pythnet_sdk::wire::v1::MerklePriceUpdate>>;
    let mut _85: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _86: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: std::slice::Iter<'_, pythnet_sdk::wire::v1::MerklePriceUpdate>;
    let mut _88: &[pythnet_sdk::wire::v1::MerklePriceUpdate];
    let _89: &[pythnet_sdk::wire::v1::MerklePriceUpdate];
    let mut _90: &std::vec::Vec<pythnet_sdk::wire::v1::MerklePriceUpdate>;
    let mut _92: ();
    let _93: ();
    let mut _94: std::option::Option<(&anchor_lang::prelude::AccountInfo<'_>, &pythnet_sdk::wire::v1::MerklePriceUpdate)>;
    let mut _95: &mut std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pythnet_sdk::wire::v1::MerklePriceUpdate>>;
    let mut _96: &mut std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pythnet_sdk::wire::v1::MerklePriceUpdate>>;
    let mut _97: isize;
    let mut _98: !;
    let mut _102: &anchor_lang::prelude::Program<'_, pyth_solana_receiver_sdk::program::PythSolanaReceiver>;
    let mut _104: anchor_lang::prelude::AccountInfo<'_>;
    let mut _105: &anchor_lang::prelude::Signer<'_>;
    let mut _106: anchor_lang::prelude::AccountInfo<'_>;
    let mut _107: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _108: anchor_lang::prelude::AccountInfo<'_>;
    let mut _109: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _110: anchor_lang::prelude::AccountInfo<'_>;
    let mut _111: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _114: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _115: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, pyth_solana_receiver_sdk::price_update::PriceUpdateV2>;
    let mut _123: std::result::Result<pyth_solana_receiver_sdk::price_update::PriceUpdateV2, anchor_lang::error::Error>;
    let mut _124: &mut &[u8];
    let mut _125: &mut &[u8];
    let mut _126: &[u8];
    let _127: &[u8];
    let mut _128: &[u8];
    let _129: &&mut [u8];
    let mut _130: &std::cell::Ref<'_, &mut [u8]>;
    let mut _131: std::ops::RangeFull;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _140: (anchor_lang::prelude::Pubkey, u8);
    let mut _141: &[&[u8]];
    let mut _142: &[&[u8]; 2];
    let _143: &[&[u8]; 2];
    let _144: [&[u8]; 2];
    let mut _145: &[u8];
    let _146: &[u8];
    let mut _147: &[u8];
    let _148: &[u8];
    let mut _149: &[u8; 32];
    let mut _150: &anchor_lang::prelude::Pubkey;
    let _151: &anchor_lang::prelude::Pubkey;
    let _152: &anchor_lang::prelude::Pubkey;
    let _153: ();
    let mut _154: bool;
    let mut _155: &anchor_lang::prelude::Pubkey;
    let mut _156: &anchor_lang::prelude::Pubkey;
    let mut _157: !;
    let mut _158: anchor_lang::error::Error;
    let mut _159: anchor_lang::error::Error;
    let mut _160: anchor_lang::error::AnchorError;
    let mut _161: std::string::String;
    let mut _162: &error::ErrorCode;
    let _163: error::ErrorCode;
    let mut _164: u32;
    let mut _165: error::ErrorCode;
    let mut _166: std::string::String;
    let mut _167: &error::ErrorCode;
    let _168: error::ErrorCode;
    let mut _169: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _170: anchor_lang::error::ErrorOrigin;
    let mut _171: anchor_lang::error::Source;
    let mut _172: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _173: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _174: anchor_lang::prelude::Pubkey;
    let mut _175: anchor_lang::prelude::Pubkey;
    let _177: [&[u8]; 3];
    let mut _178: &[u8];
    let _179: &[u8];
    let mut _180: &[u8; 32];
    let mut _181: &[u8];
    let mut _182: &[u8; 1];
    let _183: &[u8; 1];
    let _184: [u8; 1];
    let mut _185: u8;
    let _187: [&[&[u8]]; 1];
    let mut _188: &[&[u8]];
    let _189: &[&[u8]];
    let mut _190: &[&[u8]; 3];
    let mut _191: std::ops::RangeFull;
    let mut _193: anchor_lang::prelude::AccountInfo<'_>;
    let mut _194: pyth_solana_receiver_sdk::cpi::accounts::PostUpdateAtomic<'_>;
    let mut _195: &[&[&[u8]]];
    let mut _196: &[&[&[u8]]; 1];
    let mut _198: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, i64>;
    let mut _199: std::result::Result<i64, anchor_lang::error::Error>;
    let mut _200: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _207: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, i64>;
    let mut _208: std::result::Result<i64, anchor_lang::error::Error>;
    let mut _209: &pythnet_sdk::wire::PrefixedVec<u16, u8>;
    let _210: &pythnet_sdk::wire::PrefixedVec<u16, u8>;
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _216: ();
    let mut _217: std::cell::Ref<'_, &mut [u8]>;
    let mut _218: bool;
    let mut _219: i64;
    let mut _220: i64;
    let _221: ();
    let mut _222: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _223: std::result::Result<(), anchor_lang::error::Error>;
    let mut _224: anchor_lang::context::CpiContext<'_, '_, '_, '_, pyth_solana_receiver_sdk::cpi::accounts::PostUpdateAtomic<'_>>;
    let mut _225: pyth_solana_receiver_sdk::PostUpdateAtomicParams;
    let mut _226: pythnet_sdk::wire::v1::MerklePriceUpdate;
    let mut _227: &pythnet_sdk::wire::v1::MerklePriceUpdate;
    let mut _228: std::vec::Vec<u8>;
    let mut _229: &std::vec::Vec<u8>;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _235: ();
    let mut _236: &str;
    let _237: &str;
    let mut _238: &std::string::String;
    let _239: &std::string::String;
    let _240: std::string::String;
    let mut _242: std::fmt::Arguments<'_>;
    let mut _243: &[&str];
    let mut _244: &[&str; 2];
    let _245: &[&str; 2];
    let _246: [&str; 2];
    let mut _247: &[core::fmt::rt::Argument<'_>];
    let mut _248: &[core::fmt::rt::Argument<'_>; 2];
    let _249: &[core::fmt::rt::Argument<'_>; 2];
    let _250: [core::fmt::rt::Argument<'_>; 2];
    let mut _251: core::fmt::rt::Argument<'_>;
    let mut _252: &i64;
    let _253: &i64;
    let mut _254: core::fmt::rt::Argument<'_>;
    let mut _255: &i64;
    let _256: &i64;
    let _257: ();
    let mut _258: &str;
    let _259: &str;
    let mut _260: &std::string::String;
    let _261: &std::string::String;
    let _262: std::string::String;
    let mut _264: std::fmt::Arguments<'_>;
    let mut _265: &[&str];
    let mut _266: &[&str; 2];
    let _267: &[&str; 2];
    let _268: [&str; 2];
    let mut _269: &[core::fmt::rt::Argument<'_>];
    let mut _270: &[core::fmt::rt::Argument<'_>; 2];
    let _271: &[core::fmt::rt::Argument<'_>; 2];
    let _272: [core::fmt::rt::Argument<'_>; 2];
    let mut _273: core::fmt::rt::Argument<'_>;
    let mut _274: &i64;
    let _275: &i64;
    let mut _276: core::fmt::rt::Argument<'_>;
    let mut _277: &i64;
    let _278: &i64;
    let mut _279: ();
    let mut _286: &mut instructions::pyth_pull_oracle::PostPythPullMultiOracleUpdatesAtomic<'_>;
    let mut _287: &mut instructions::pyth_pull_oracle::PostPythPullMultiOracleUpdatesAtomic<'_>;
    let mut _288: &mut instructions::pyth_pull_oracle::PostPythPullMultiOracleUpdatesAtomic<'_>;
    let mut _289: &mut [u8];
    let mut _290: &anchor_lang::prelude::Pubkey;
    let mut _291: &anchor_lang::prelude::Pubkey;
    let mut _292: bool;
    let mut _293: bool;
    let mut _294: bool;
    let mut _295: bool;
    let mut _296: bool;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    scope 1 {
        debug remaining_accounts => _3;
        let _11: error::ErrorCode;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: ();
        let _37: pyth_solana_receiver_sdk::PostMultiUpdatesAtomicParams;
        scope 2 {
            debug error_code => _11;
            let _18: std::string::String;
            let mut _285: &[&str; 2];
            scope 3 {
                debug res => _18;
            }
        }
        scope 4 {
            debug residual => _33;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _36;
            scope 7 {
            }
        }
        scope 8 {
            debug update_param => _37;
            let _45: std::vec::Vec<u8>;
            scope 9 {
                debug vaa => _45;
                let _46: std::vec::Vec<pythnet_sdk::wire::v1::MerklePriceUpdate>;
                scope 10 {
                    debug merkle_price_updates => _46;
                    let _56: error::ErrorCode;
                    let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _81: ();
                    let mut _91: std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pythnet_sdk::wire::v1::MerklePriceUpdate>>;
                    scope 11 {
                        debug error_code => _56;
                        let _63: std::string::String;
                        let mut _284: &[&str; 2];
                        scope 12 {
                            debug res => _63;
                        }
                    }
                    scope 13 {
                        debug residual => _78;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _81;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug iter => _91;
                        let _99: &anchor_lang::prelude::AccountInfo<'_>;
                        let _100: &pythnet_sdk::wire::v1::MerklePriceUpdate;
                        scope 18 {
                            debug account => _99;
                            debug merkle_price_update => _100;
                            let _101: anchor_lang::prelude::AccountInfo<'_>;
                            scope 19 {
                                debug cpi_program => _101;
                                let _103: pyth_solana_receiver_sdk::cpi::accounts::PostUpdateAtomic<'_>;
                                scope 20 {
                                    debug cpi_accounts => _103;
                                    let _112: std::cell::Ref<'_, &mut [u8]>;
                                    let _117: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                    let _120: std::cell::Ref<'_, &mut [u8]>;
                                    scope 21 {
                                        debug price_feed_account_data => _112;
                                        let _121: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
                                        let _133: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _136: pyth_solana_receiver_sdk::price_update::PriceUpdateV2;
                                        scope 26 {
                                            debug price_feed_account => _121;
                                            let _137: [u8; 32];
                                            scope 31 {
                                                debug feed_id => _137;
                                                let _138: anchor_lang::prelude::Pubkey;
                                                let _139: u8;
                                                scope 32 {
                                                    debug pda => _138;
                                                    debug bump => _139;
                                                    let _176: &[&[u8]; 3];
                                                    let mut _280: &error::ErrorCode;
                                                    let mut _281: &error::ErrorCode;
                                                    scope 33 {
                                                        debug seeds => _176;
                                                        let _186: &[&[&[u8]]; 1];
                                                        scope 34 {
                                                            debug signer_seeds => _186;
                                                            let _192: anchor_lang::context::CpiContext<'_, '_, '_, '_, pyth_solana_receiver_sdk::cpi::accounts::PostUpdateAtomic<'_>>;
                                                            scope 35 {
                                                                debug cpi_context => _192;
                                                                let _197: i64;
                                                                let _202: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _205: i64;
                                                                scope 36 {
                                                                    debug current_timestamp => _197;
                                                                    let _206: i64;
                                                                    let _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _215: i64;
                                                                    scope 41 {
                                                                        debug next_timestamp => _206;
                                                                        let _231: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _234: ();
                                                                        let _241: std::string::String;
                                                                        let _263: std::string::String;
                                                                        let mut _282: &[&str; 2];
                                                                        let mut _283: &[&str; 2];
                                                                        scope 46 {
                                                                            debug residual => _231;
                                                                            scope 47 {
                                                                            }
                                                                        }
                                                                        scope 48 {
                                                                            debug val => _234;
                                                                            scope 49 {
                                                                            }
                                                                        }
                                                                        scope 50 {
                                                                            debug res => _241;
                                                                        }
                                                                        scope 51 {
                                                                            debug res => _263;
                                                                        }
                                                                    }
                                                                    scope 42 {
                                                                        debug residual => _212;
                                                                        scope 43 {
                                                                        }
                                                                    }
                                                                    scope 44 {
                                                                        debug val => _215;
                                                                        scope 45 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 37 {
                                                                    debug residual => _202;
                                                                    scope 38 {
                                                                    }
                                                                }
                                                                scope 39 {
                                                                    debug val => _205;
                                                                    scope 40 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 27 {
                                            debug residual => _133;
                                            scope 28 {
                                            }
                                        }
                                        scope 29 {
                                            debug val => _136;
                                            scope 30 {
                                            }
                                        }
                                    }
                                    scope 22 {
                                        debug residual => _117;
                                        scope 23 {
                                        }
                                    }
                                    scope 24 {
                                        debug val => _120;
                                        scope 25 {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _295 = const false;
        _294 = const false;
        _293 = const false;
        _292 = const false;
        _296 = const false;
        StorageLive(_3);
        _3 = (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_3);
        _8 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::len(move _9) -> [return: bb1, unwind: bb135];
    }

    bb1: {
        StorageDead(_9);
        _7 = Le(move _8, const 2_usize);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_10);
        _10 = ();
        _6 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        goto -> bb10;
    }

    bb3: {
        StorageDead(_8);
        StorageLive(_11);
        _11 = error::ErrorCode::OracleTooManyPriceAccountUpdates;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _285 = const _;
        _22 = &(*_285);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_11;
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _29) -> [return: bb4, unwind: bb135];
    }

    bb4: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb5, unwind: bb135];
    }

    bb5: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb6, unwind: bb135];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb7, unwind: bb134];
    }

    bb7: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb8, unwind: bb134];
    }

    bb8: {
        StorageDead(_13);
        drop(_17) -> [return: bb9, unwind: bb135];
    }

    bb9: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_31);
        _31 = _11;
        _6 = std::result::Result::<(), error::ErrorCode>::Err(move _31);
        StorageDead(_31);
        StorageDead(_11);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb11, unwind: bb135];
    }

    bb11: {
        StorageDead(_6);
        _32 = discriminant(_5);
        switchInt(move _32) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_36);
        _36 = ((_5 as Continue).0: ());
        _4 = _36;
        StorageDead(_36);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_2;
        StorageLive(_44);
        _44 = RangeFull;
        _42 = <Vec<u8> as Index<RangeFull>>::index(move _43, move _44) -> [return: bb16, unwind: bb135];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_33);
        _33 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb15, unwind: bb135];
    }

    bb15: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb122;
    }

    bb16: {
        StorageDead(_44);
        StorageDead(_43);
        _41 = &(*_42);
        _40 = &mut _41;
        _39 = &mut (*_40);
        _38 = <PostMultiUpdatesAtomicParams as BorshDeserialize>::deserialize(move _39) -> [return: bb17, unwind: bb135];
    }

    bb17: {
        StorageDead(_39);
        _37 = std::result::Result::<PostMultiUpdatesAtomicParams, std::io::Error>::unwrap(move _38) -> [return: bb18, unwind: bb135];
    }

    bb18: {
        StorageDead(_38);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = move (_37.0: std::vec::Vec<u8>);
        StorageLive(_46);
        _46 = move (_37.1: std::vec::Vec<pythnet_sdk::wire::v1::MerklePriceUpdate>);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = &(*_3);
        _51 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::len(move _52) -> [return: bb19, unwind: bb132];
    }

    bb19: {
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_46;
        _53 = Vec::<MerklePriceUpdate>::len(move _54) -> [return: bb20, unwind: bb132];
    }

    bb20: {
        StorageDead(_54);
        _50 = Eq(move _51, move _53);
        switchInt(move _50) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_55);
        _55 = ();
        _49 = std::result::Result::<(), error::ErrorCode>::Ok(move _55);
        StorageDead(_55);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_56);
        _56 = error::ErrorCode::OracleMismatchedVaaAndPriceUpdates;
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _284 = const _;
        _67 = &(*_284);
        _66 = &(*_67);
        _65 = move _66 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_56;
        _74 = &(*_75);
        _73 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _74) -> [return: bb23, unwind: bb132];
    }

    bb23: {
        StorageDead(_74);
        _72 = [move _73];
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = move _70 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_70);
        _64 = Arguments::<'_>::new_v1(move _65, move _69) -> [return: bb24, unwind: bb132];
    }

    bb24: {
        StorageDead(_69);
        StorageDead(_65);
        _63 = format(move _64) -> [return: bb25, unwind: bb132];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        _62 = move _63;
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = <String as Deref>::deref(move _60) -> [return: bb26, unwind: bb131];
    }

    bb26: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb27, unwind: bb131];
    }

    bb27: {
        StorageDead(_58);
        drop(_62) -> [return: bb28, unwind: bb132];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_76);
        _76 = _56;
        _49 = std::result::Result::<(), error::ErrorCode>::Err(move _76);
        StorageDead(_76);
        StorageDead(_56);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_50);
        _48 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _49) -> [return: bb30, unwind: bb132];
    }

    bb30: {
        StorageDead(_49);
        _77 = discriminant(_48);
        switchInt(move _77) -> [0: bb31, 1: bb32, otherwise: bb13];
    }

    bb31: {
        StorageLive(_81);
        _81 = ((_48 as Continue).0: ());
        _47 = _81;
        StorageDead(_81);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_3);
        _85 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _86) -> [return: bb34, unwind: bb132];
    }

    bb32: {
        StorageLive(_78);
        _78 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb33, unwind: bb132];
    }

    bb33: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb119;
    }

    bb34: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_46;
        _89 = <Vec<MerklePriceUpdate> as Deref>::deref(move _90) -> [return: bb35, unwind: bb132];
    }

    bb35: {
        _88 = &(*_89);
        StorageDead(_90);
        _87 = core::slice::<impl [MerklePriceUpdate]>::iter(move _88) -> [return: bb36, unwind: bb132];
    }

    bb36: {
        StorageDead(_88);
        _84 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::zip::<std::slice::Iter<'_, MerklePriceUpdate>>(move _85, move _87) -> [return: bb37, unwind: bb132];
    }

    bb37: {
        StorageDead(_87);
        StorageDead(_85);
        _83 = <Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, MerklePriceUpdate>> as IntoIterator>::into_iter(move _84) -> [return: bb38, unwind: bb132];
    }

    bb38: {
        StorageDead(_84);
        StorageLive(_91);
        _91 = move _83;
        goto -> bb39;
    }

    bb39: {
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &mut _91;
        _95 = &mut (*_96);
        _94 = <Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, MerklePriceUpdate>> as Iterator>::next(move _95) -> [return: bb40, unwind: bb132];
    }

    bb40: {
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb42, 1: bb41, otherwise: bb13];
    }

    bb41: {
        StorageLive(_99);
        _99 = (((_94 as Some).0: (&anchor_lang::prelude::AccountInfo<'_>, &pythnet_sdk::wire::v1::MerklePriceUpdate)).0: &anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_100);
        _100 = (((_94 as Some).0: (&anchor_lang::prelude::AccountInfo<'_>, &pythnet_sdk::wire::v1::MerklePriceUpdate)).1: &pythnet_sdk::wire::v1::MerklePriceUpdate);
        StorageLive(_101);
        StorageLive(_102);
        _286 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullMultiOracleUpdatesAtomic<'_>);
        _102 = &((*_286).1: anchor_lang::prelude::Program<'_, pyth_solana_receiver_sdk::program::PythSolanaReceiver>);
        _101 = <anchor_lang::prelude::Program<'_, PythSolanaReceiver> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _102) -> [return: bb43, unwind: bb132];
    }

    bb42: {
        _82 = const ();
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_279);
        _279 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _279);
        StorageDead(_279);
        drop(_46) -> [return: bb109, unwind: bb133];
    }

    bb43: {
        _295 = const true;
        StorageDead(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _287 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullMultiOracleUpdatesAtomic<'_>);
        _105 = &((*_287).0: anchor_lang::prelude::Signer<'_>);
        _104 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _105) -> [return: bb44, unwind: bb156];
    }

    bb44: {
        StorageDead(_105);
        StorageLive(_106);
        StorageLive(_107);
        _288 = deref_copy (_1.1: &mut instructions::pyth_pull_oracle::PostPythPullMultiOracleUpdatesAtomic<'_>);
        _107 = &((*_288).2: anchor_lang::prelude::AccountInfo<'_>);
        _106 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _107) -> [return: bb45, unwind: bb130];
    }

    bb45: {
        StorageDead(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_99);
        _108 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _109) -> [return: bb46, unwind: bb129];
    }

    bb46: {
        StorageDead(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &(*_99);
        _110 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _111) -> [return: bb47, unwind: bb128];
    }

    bb47: {
        StorageDead(_111);
        _294 = const true;
        _103 = PostUpdateAtomic::<'_> { payer: move _104, guardian_set: move _106, price_update_account: move _108, write_authority: move _110 };
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_104);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_99);
        _114 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _115) -> [return: bb48, unwind: bb154];
    }

    bb48: {
        StorageDead(_115);
        _113 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _114) -> [return: bb49, unwind: bb154];
    }

    bb49: {
        StorageDead(_114);
        _116 = discriminant(_113);
        switchInt(move _116) -> [0: bb50, 1: bb51, otherwise: bb13];
    }

    bb50: {
        StorageLive(_120);
        _120 = move ((_113 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _293 = const true;
        _112 = move _120;
        StorageDead(_120);
        _297 = discriminant(_113);
        StorageDead(_113);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_112;
        _129 = <Ref<'_, &mut [u8]> as Deref>::deref(move _130) -> [return: bb53, unwind: bb151];
    }

    bb51: {
        StorageLive(_117);
        _117 = move ((_113 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_119);
        _119 = move _117;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _119) -> [return: bb52, unwind: bb152];
    }

    bb52: {
        StorageDead(_119);
        StorageDead(_117);
        _315 = discriminant(_113);
        StorageDead(_113);
        goto -> bb116;
    }

    bb53: {
        _289 = deref_copy (*_129);
        _128 = &(*_289);
        StorageDead(_130);
        StorageLive(_131);
        _131 = RangeFull;
        _127 = <[u8] as Index<RangeFull>>::index(move _128, move _131) -> [return: bb54, unwind: bb151];
    }

    bb54: {
        StorageDead(_131);
        StorageDead(_128);
        _126 = &(*_127);
        _125 = &mut _126;
        _124 = &mut (*_125);
        _123 = <PriceUpdateV2 as anchor_lang::AccountDeserialize>::try_deserialize(move _124) -> [return: bb55, unwind: bb151];
    }

    bb55: {
        StorageDead(_124);
        _122 = <std::result::Result<PriceUpdateV2, anchor_lang::error::Error> as Try>::branch(move _123) -> [return: bb56, unwind: bb151];
    }

    bb56: {
        StorageDead(_123);
        _132 = discriminant(_122);
        switchInt(move _132) -> [0: bb57, 1: bb58, otherwise: bb13];
    }

    bb57: {
        StorageLive(_136);
        _136 = move ((_122 as Continue).0: pyth_solana_receiver_sdk::price_update::PriceUpdateV2);
        _121 = move _136;
        StorageDead(_136);
        _299 = discriminant(_122);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_122);
        StorageLive(_137);
        _137 = ((_121.2: pyth_solana_receiver_sdk::price_update::PriceFeedMessage).0: [u8; 32]);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = const _;
        _145 = &(*_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_137;
        _148 = <[u8; 32] as AsRef<[u8]>>::as_ref(move _149) -> [return: bb60, unwind: bb151];
    }

    bb58: {
        StorageLive(_133);
        _133 = move ((_122 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_135);
        _135 = move _133;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _135) -> [return: bb59, unwind: bb149];
    }

    bb59: {
        StorageDead(_135);
        StorageDead(_133);
        _313 = discriminant(_122);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_122);
        goto -> bb115;
    }

    bb60: {
        _147 = &(*_148);
        StorageDead(_149);
        _144 = [move _145, move _147];
        StorageDead(_147);
        StorageDead(_145);
        _143 = &_144;
        _142 = &(*_143);
        _141 = move _142 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_142);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = const {alloc266: &anchor_lang::prelude::Pubkey};
        _151 = &(*_152);
        _150 = &(*_151);
        _140 = anchor_lang::prelude::Pubkey::find_program_address(move _141, move _150) -> [return: bb61, unwind: bb151];
    }

    bb61: {
        StorageDead(_150);
        StorageDead(_141);
        StorageLive(_138);
        _138 = (_140.0: anchor_lang::prelude::Pubkey);
        StorageLive(_139);
        _139 = (_140.1: u8);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_140);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _290 = deref_copy ((*_99).0: &anchor_lang::prelude::Pubkey);
        _155 = &(*_290);
        StorageLive(_156);
        _156 = &_138;
        _154 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _155, move _156) -> [return: bb62, unwind: bb151];
    }

    bb62: {
        switchInt(move _154) -> [0: bb69, otherwise: bb63];
    }

    bb63: {
        StorageDead(_156);
        StorageDead(_155);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _281 = const _;
        _162 = &(*_281);
        _161 = error::ErrorCode::name(move _162) -> [return: bb64, unwind: bb151];
    }

    bb64: {
        StorageDead(_162);
        StorageLive(_164);
        StorageLive(_165);
        _165 = error::ErrorCode::OracleBadRemainingAccountPublicKey;
        _164 = <error::ErrorCode as Into<u32>>::into(move _165) -> [return: bb65, unwind: bb127];
    }

    bb65: {
        StorageDead(_165);
        StorageLive(_166);
        StorageLive(_167);
        _280 = const _;
        _167 = &(*_280);
        _166 = <error::ErrorCode as ToString>::to_string(move _167) -> [return: bb66, unwind: bb127];
    }

    bb66: {
        StorageDead(_167);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/pyth_pull_oracle.rs", line: const 159_u32 };
        _170 = anchor_lang::error::ErrorOrigin::Source(move _171);
        StorageDead(_171);
        _169 = Option::<ErrorOrigin>::Some(move _170);
        StorageDead(_170);
        StorageLive(_172);
        _172 = Option::<ComparedValues>::None;
        _160 = anchor_lang::error::AnchorError { error_name: move _161, error_code_number: move _164, error_msg: move _166, error_origin: move _169, compared_values: move _172 };
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_161);
        _159 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _160) -> [return: bb67, unwind: bb151];
    }

    bb67: {
        StorageDead(_160);
        StorageLive(_173);
        StorageLive(_174);
        _291 = deref_copy ((*_99).0: &anchor_lang::prelude::Pubkey);
        _174 = (*_291);
        StorageLive(_175);
        _175 = _138;
        _173 = (move _174, move _175);
        StorageDead(_175);
        StorageDead(_174);
        _158 = anchor_lang::error::Error::with_pubkeys(move _159, move _173) -> [return: bb68, unwind: bb151];
    }

    bb68: {
        StorageDead(_173);
        StorageDead(_159);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _158);
        StorageDead(_158);
        StorageDead(_154);
        StorageDead(_153);
        goto -> bb114;
    }

    bb69: {
        StorageDead(_156);
        StorageDead(_155);
        _153 = const ();
        StorageDead(_154);
        StorageDead(_153);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_137;
        _179 = <[u8; 32] as AsRef<[u8]>>::as_ref(move _180) -> [return: bb70, unwind: bb151];
    }

    bb70: {
        _178 = &(*_179);
        StorageDead(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = _139;
        _184 = [move _185];
        StorageDead(_185);
        _183 = &_184;
        _182 = &(*_183);
        _181 = move _182 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_182);
        _177 = [const _, move _178, move _181];
        StorageDead(_181);
        StorageDead(_178);
        _176 = &_177;
        StorageDead(_183);
        StorageDead(_179);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_176);
        StorageLive(_191);
        _191 = RangeFull;
        _189 = <[&[u8]; 3] as Index<RangeFull>>::index(move _190, move _191) -> [return: bb71, unwind: bb151];
    }

    bb71: {
        StorageDead(_191);
        StorageDead(_190);
        _188 = &(*_189);
        _187 = [move _188];
        StorageDead(_188);
        _186 = &_187;
        StorageLive(_192);
        StorageLive(_193);
        _295 = const false;
        _193 = move _101;
        StorageLive(_194);
        _294 = const false;
        _194 = move _103;
        StorageLive(_195);
        StorageLive(_196);
        _196 = &(*_186);
        _195 = move _196 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_196);
        _192 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, PostUpdateAtomic<'_>>::new_with_signer(move _193, move _194, move _195) -> [return: bb72, unwind: bb151];
    }

    bb72: {
        _292 = const true;
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_193);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &(*_99);
        _199 = get_timestamp_from_price_feed_account(move _200) -> [return: bb73, unwind: bb148];
    }

    bb73: {
        StorageDead(_200);
        _198 = <std::result::Result<i64, anchor_lang::error::Error> as Try>::branch(move _199) -> [return: bb74, unwind: bb148];
    }

    bb74: {
        StorageDead(_199);
        _201 = discriminant(_198);
        switchInt(move _201) -> [0: bb75, 1: bb76, otherwise: bb13];
    }

    bb75: {
        StorageLive(_205);
        _205 = ((_198 as Continue).0: i64);
        _197 = _205;
        StorageDead(_205);
        _301 = discriminant(_198);
        StorageDead(_198);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &((*_100).0: pythnet_sdk::wire::PrefixedVec<u16, u8>);
        _209 = &(*_210);
        _208 = get_timestamp_from_price_update_message(move _209) -> [return: bb78, unwind: bb148];
    }

    bb76: {
        StorageLive(_202);
        _202 = move ((_198 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_204);
        _204 = move _202;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _204) -> [return: bb77, unwind: bb146];
    }

    bb77: {
        StorageDead(_204);
        StorageDead(_202);
        _311 = discriminant(_198);
        StorageDead(_198);
        goto -> bb112;
    }

    bb78: {
        StorageDead(_209);
        _207 = <std::result::Result<i64, anchor_lang::error::Error> as Try>::branch(move _208) -> [return: bb79, unwind: bb148];
    }

    bb79: {
        StorageDead(_208);
        _211 = discriminant(_207);
        switchInt(move _211) -> [0: bb80, 1: bb81, otherwise: bb13];
    }

    bb80: {
        StorageLive(_215);
        _215 = ((_207 as Continue).0: i64);
        _206 = _215;
        StorageDead(_215);
        _303 = discriminant(_207);
        StorageDead(_210);
        StorageDead(_207);
        StorageLive(_216);
        StorageLive(_217);
        _293 = const false;
        _217 = move _112;
        _216 = std::mem::drop::<Ref<'_, &mut [u8]>>(move _217) -> [return: bb83, unwind: bb148];
    }

    bb81: {
        StorageLive(_212);
        _212 = move ((_207 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _214) -> [return: bb82, unwind: bb145];
    }

    bb82: {
        StorageDead(_214);
        StorageDead(_212);
        _309 = discriminant(_207);
        StorageDead(_210);
        StorageDead(_207);
        goto -> bb111;
    }

    bb83: {
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_218);
        StorageLive(_219);
        _219 = _206;
        StorageLive(_220);
        _220 = _197;
        _218 = Gt(move _219, move _220);
        switchInt(move _218) -> [0: bb99, otherwise: bb84];
    }

    bb84: {
        StorageDead(_220);
        StorageDead(_219);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _292 = const false;
        _296 = const true;
        _224 = move _192;
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &(*_100);
        _226 = <MerklePriceUpdate as Clone>::clone(move _227) -> [return: bb85, unwind: bb144];
    }

    bb85: {
        StorageDead(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_45;
        _228 = <Vec<u8> as Clone>::clone(move _229) -> [return: bb86, unwind: bb126];
    }

    bb86: {
        StorageDead(_229);
        _225 = PostUpdateAtomicParams { vaa: move _228, merkle_price_update: move _226 };
        StorageDead(_228);
        StorageDead(_226);
        _296 = const false;
        _223 = post_update_atomic(move _224, move _225) -> [return: bb87, unwind: bb144];
    }

    bb87: {
        StorageDead(_225);
        _296 = const false;
        StorageDead(_224);
        _222 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _223) -> [return: bb88, unwind: bb148];
    }

    bb88: {
        StorageDead(_223);
        _230 = discriminant(_222);
        switchInt(move _230) -> [0: bb89, 1: bb90, otherwise: bb13];
    }

    bb89: {
        StorageLive(_234);
        _234 = ((_222 as Continue).0: ());
        _221 = _234;
        StorageDead(_234);
        _305 = discriminant(_222);
        StorageDead(_222);
        StorageDead(_221);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _282 = const _;
        _245 = &(*_282);
        _244 = &(*_245);
        _243 = move _244 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_244);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &_197;
        _252 = &(*_253);
        _251 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _252) -> [return: bb92, unwind: bb148];
    }

    bb90: {
        StorageLive(_231);
        _231 = move ((_222 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_233);
        _233 = move _231;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _233) -> [return: bb91, unwind: bb142];
    }

    bb91: {
        StorageDead(_233);
        StorageDead(_231);
        _307 = discriminant(_222);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_218);
        goto -> bb111;
    }

    bb92: {
        StorageDead(_252);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &_206;
        _255 = &(*_256);
        _254 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _255) -> [return: bb93, unwind: bb148];
    }

    bb93: {
        StorageDead(_255);
        _250 = [move _251, move _254];
        StorageDead(_254);
        StorageDead(_251);
        _249 = &_250;
        _248 = &(*_249);
        _247 = move _248 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_248);
        _242 = Arguments::<'_>::new_v1(move _243, move _247) -> [return: bb94, unwind: bb148];
    }

    bb94: {
        StorageDead(_247);
        StorageDead(_243);
        _241 = format(move _242) -> [return: bb95, unwind: bb148];
    }

    bb95: {
        StorageDead(_242);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_245);
        _240 = move _241;
        StorageDead(_241);
        _239 = &_240;
        _238 = &(*_239);
        _237 = <String as Deref>::deref(move _238) -> [return: bb96, unwind: bb125];
    }

    bb96: {
        _236 = &(*_237);
        StorageDead(_238);
        _235 = solana_program::log::sol_log(move _236) -> [return: bb97, unwind: bb125];
    }

    bb97: {
        StorageDead(_236);
        drop(_240) -> [return: bb98, unwind: bb148];
    }

    bb98: {
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_235);
        _93 = const ();
        goto -> bb107;
    }

    bb99: {
        StorageDead(_220);
        StorageDead(_219);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _283 = const _;
        _267 = &(*_283);
        _266 = &(*_267);
        _265 = move _266 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_266);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_197;
        _274 = &(*_275);
        _273 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _274) -> [return: bb100, unwind: bb148];
    }

    bb100: {
        StorageDead(_274);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &_206;
        _277 = &(*_278);
        _276 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _277) -> [return: bb101, unwind: bb148];
    }

    bb101: {
        StorageDead(_277);
        _272 = [move _273, move _276];
        StorageDead(_276);
        StorageDead(_273);
        _271 = &_272;
        _270 = &(*_271);
        _269 = move _270 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_270);
        _264 = Arguments::<'_>::new_v1(move _265, move _269) -> [return: bb102, unwind: bb148];
    }

    bb102: {
        StorageDead(_269);
        StorageDead(_265);
        _263 = format(move _264) -> [return: bb103, unwind: bb148];
    }

    bb103: {
        StorageDead(_264);
        StorageDead(_278);
        StorageDead(_275);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_267);
        _262 = move _263;
        StorageDead(_263);
        _261 = &_262;
        _260 = &(*_261);
        _259 = <String as Deref>::deref(move _260) -> [return: bb104, unwind: bb124];
    }

    bb104: {
        _258 = &(*_259);
        StorageDead(_260);
        _257 = solana_program::log::sol_log(move _258) -> [return: bb105, unwind: bb124];
    }

    bb105: {
        StorageDead(_258);
        drop(_262) -> [return: bb106, unwind: bb148];
    }

    bb106: {
        StorageDead(_262);
        StorageDead(_261);
        StorageDead(_259);
        StorageDead(_257);
        _93 = const ();
        goto -> bb107;
    }

    bb107: {
        StorageDead(_218);
        StorageDead(_206);
        StorageDead(_197);
        switchInt(_292) -> [0: bb108, otherwise: bb137];
    }

    bb108: {
        _292 = const false;
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_121);
        _293 = const false;
        StorageDead(_112);
        _294 = const false;
        StorageDead(_103);
        _295 = const false;
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        _92 = const ();
        goto -> bb39;
    }

    bb109: {
        StorageDead(_46);
        drop(_45) -> [return: bb110, unwind: bb135];
    }

    bb110: {
        StorageDead(_45);
        StorageDead(_37);
        StorageDead(_3);
        drop(_2) -> [return: bb123, unwind: bb136];
    }

    bb111: {
        StorageDead(_206);
        goto -> bb112;
    }

    bb112: {
        StorageDead(_197);
        switchInt(_292) -> [0: bb113, otherwise: bb138];
    }

    bb113: {
        _292 = const false;
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_177);
        StorageDead(_176);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb115;
    }

    bb115: {
        StorageDead(_121);
        switchInt(_293) -> [0: bb116, otherwise: bb139];
    }

    bb116: {
        _293 = const false;
        StorageDead(_112);
        switchInt(_294) -> [0: bb117, otherwise: bb140];
    }

    bb117: {
        _294 = const false;
        StorageDead(_103);
        switchInt(_295) -> [0: bb118, otherwise: bb141];
    }

    bb118: {
        _295 = const false;
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb119;
    }

    bb119: {
        drop(_46) -> [return: bb120, unwind: bb133];
    }

    bb120: {
        StorageDead(_46);
        drop(_45) -> [return: bb121, unwind: bb135];
    }

    bb121: {
        StorageDead(_45);
        StorageDead(_37);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_3);
        drop(_2) -> [return: bb123, unwind: bb136];
    }

    bb123: {
        return;
    }

    bb124 (cleanup): {
        drop(_262) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_240) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_226) -> [return: bb144, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_161) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        drop(_108) -> [return: bb129, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_106) -> [return: bb130, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_104) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_62) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        drop(_46) -> [return: bb133, unwind terminate(cleanup)];
    }

    bb133 (cleanup): {
        drop(_45) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb134 (cleanup): {
        drop(_17) -> [return: bb135, unwind terminate(cleanup)];
    }

    bb135 (cleanup): {
        drop(_2) -> [return: bb136, unwind terminate(cleanup)];
    }

    bb136 (cleanup): {
        resume;
    }

    bb137: {
        drop(_192) -> [return: bb108, unwind: bb151];
    }

    bb138: {
        drop(_192) -> [return: bb113, unwind: bb151];
    }

    bb139: {
        drop(_112) -> [return: bb116, unwind: bb154];
    }

    bb140: {
        drop(_103) -> [return: bb117, unwind: bb156];
    }

    bb141: {
        drop(_101) -> [return: bb118, unwind: bb132];
    }

    bb142 (cleanup): {
        _317 = discriminant(_222);
        goto -> bb148;
    }

    bb143 (cleanup): {
        drop(_224) -> [return: bb148, unwind terminate(cleanup)];
    }

    bb144 (cleanup): {
        switchInt(_296) -> [0: bb148, otherwise: bb143];
    }

    bb145 (cleanup): {
        _318 = discriminant(_207);
        goto -> bb148;
    }

    bb146 (cleanup): {
        _319 = discriminant(_198);
        goto -> bb148;
    }

    bb147 (cleanup): {
        drop(_192) -> [return: bb151, unwind terminate(cleanup)];
    }

    bb148 (cleanup): {
        switchInt(_292) -> [0: bb151, otherwise: bb147];
    }

    bb149 (cleanup): {
        _320 = discriminant(_122);
        goto -> bb151;
    }

    bb150 (cleanup): {
        drop(_112) -> [return: bb154, unwind terminate(cleanup)];
    }

    bb151 (cleanup): {
        switchInt(_293) -> [0: bb154, otherwise: bb150];
    }

    bb152 (cleanup): {
        _321 = discriminant(_113);
        goto -> bb154;
    }

    bb153 (cleanup): {
        drop(_103) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        switchInt(_294) -> [0: bb156, otherwise: bb153];
    }

    bb155 (cleanup): {
        drop(_101) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        switchInt(_295) -> [0: bb132, otherwise: bb155];
    }
}

alloc266 (static: ID, size: 32, align: 1) {
    0x00 │ 09 54 db be 9e c9 60 c9 8a 7a 29 3f e2 13 36 96 │ .T....`..z)?..6.
    0x10 │ 6f e1 80 d1 51 ae 4b 81 79 56 1f 89 85 4a 53 f6 │ o...Q.K.yV...JS.
}
