// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::load_serum_market` before PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::load_serum_market(_1: &SerumContext<'_, '_>) -> std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode>;
    let mut _2: std::result::Result<serum_dex::state::Market<'_>, serum_dex::error::DexError>;
    let mut _3: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: {closure@programs/drift/src/state/fulfillment_params/serum.rs:69:80: 69:83};
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: &anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _6 = deref_copy ((*_1).1: &anchor_lang::prelude::AccountInfo<'_>);
        _3 = &(*_6);
        StorageLive(_4);
        _7 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _8 = deref_copy ((*_7).0: &anchor_lang::prelude::Pubkey);
        _4 = &(*_8);
        _2 = serum_dex::state::Market::<'_>::load(move _3, move _4, const false) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_5);
        _5 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:69:80: 69:83};
        _0 = std::result::Result::<serum_dex::state::Market<'_>, DexError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:69:80: 69:83}>(move _2, move _5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_2);
        return;
    }

    bb3 (cleanup): {
        resume;
    }
}
