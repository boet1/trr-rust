// MIR for `admin::handle_repeg_amm_curve` after PreCodegen

fn admin::handle_repeg_amm_curve(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::RepegCurve<'_>>, _2: u128) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug new_peg_candidate => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _15: std::result::Result<(), anchor_lang::error::Error>;
    let mut _16: &anchor_lang::prelude::AccountInfo<'_>;
    let _17: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _19: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _24: ();
    let _25: anchor_lang::prelude::Clock;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _27: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _32: anchor_lang::prelude::Clock;
    let mut _36: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _39: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _41: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 1];
    let _57: &[&str; 1];
    let _58: [&str; 1];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let mut _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: &[core::fmt::rt::Argument<'_>; 1];
    let _62: [core::fmt::rt::Argument<'_>; 1];
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &u16;
    let _65: &u16;
    let _66: &state::perp_market::PerpMarket;
    let mut _67: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _70: state::oracle::OraclePriceData;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _72: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _73: &state::oracle::OracleSource;
    let _74: &state::oracle::OracleSource;
    let _75: &state::perp_market::PerpMarket;
    let mut _76: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _77: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _78: u64;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _85: &state::perp_market::PerpMarket;
    let mut _86: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _88: &state::perp_market::PerpMarket;
    let mut _89: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _91: &state::perp_market::PerpMarket;
    let mut _92: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _94: &state::perp_market::PerpMarket;
    let mut _95: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _97: &state::state::State;
    let mut _98: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _101: std::result::Result<i128, error::ErrorCode>;
    let mut _102: &mut state::perp_market::PerpMarket;
    let mut _103: &mut state::perp_market::PerpMarket;
    let mut _104: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _105: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _106: u128;
    let mut _107: u64;
    let mut _108: &state::state::OracleGuardRails;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: &state::perp_market::PerpMarket;
    let mut _116: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _118: &state::perp_market::PerpMarket;
    let mut _119: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _121: &state::perp_market::PerpMarket;
    let mut _122: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _124: &state::perp_market::PerpMarket;
    let mut _125: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _126: ();
    let mut _127: &str;
    let _128: &str;
    let mut _129: &std::string::String;
    let _130: &std::string::String;
    let _131: std::string::String;
    let mut _133: std::fmt::Arguments<'_>;
    let mut _134: &[&str];
    let mut _135: &[&str; 2];
    let _136: &[&str; 2];
    let _137: [&str; 2];
    let mut _138: &[core::fmt::rt::Argument<'_>];
    let mut _139: &[core::fmt::rt::Argument<'_>; 2];
    let _140: &[core::fmt::rt::Argument<'_>; 2];
    let _141: [core::fmt::rt::Argument<'_>; 2];
    let mut _142: core::fmt::rt::Argument<'_>;
    let mut _143: &u128;
    let _144: &u128;
    let mut _145: core::fmt::rt::Argument<'_>;
    let mut _146: &u128;
    let _147: &u128;
    let _148: ();
    let mut _149: &str;
    let _150: &str;
    let mut _151: &std::string::String;
    let _152: &std::string::String;
    let _153: std::string::String;
    let mut _155: std::fmt::Arguments<'_>;
    let mut _156: &[&str];
    let mut _157: &[&str; 2];
    let _158: &[&str; 2];
    let _159: [&str; 2];
    let mut _160: &[core::fmt::rt::Argument<'_>];
    let mut _161: &[core::fmt::rt::Argument<'_>; 2];
    let _162: &[core::fmt::rt::Argument<'_>; 2];
    let _163: [core::fmt::rt::Argument<'_>; 2];
    let mut _164: core::fmt::rt::Argument<'_>;
    let mut _165: &u128;
    let _166: &u128;
    let mut _167: core::fmt::rt::Argument<'_>;
    let mut _168: &u128;
    let _169: &u128;
    let _170: ();
    let mut _171: &str;
    let _172: &str;
    let mut _173: &std::string::String;
    let _174: &std::string::String;
    let _175: std::string::String;
    let mut _177: std::fmt::Arguments<'_>;
    let mut _178: &[&str];
    let mut _179: &[&str; 2];
    let _180: &[&str; 2];
    let _181: [&str; 2];
    let mut _182: &[core::fmt::rt::Argument<'_>];
    let mut _183: &[core::fmt::rt::Argument<'_>; 2];
    let _184: &[core::fmt::rt::Argument<'_>; 2];
    let _185: [core::fmt::rt::Argument<'_>; 2];
    let mut _186: core::fmt::rt::Argument<'_>;
    let mut _187: &u128;
    let _188: &u128;
    let mut _189: core::fmt::rt::Argument<'_>;
    let mut _190: &u128;
    let _191: &u128;
    let _192: ();
    let mut _193: &str;
    let _194: &str;
    let mut _195: &std::string::String;
    let _196: &std::string::String;
    let _197: std::string::String;
    let mut _199: std::fmt::Arguments<'_>;
    let mut _200: &[&str];
    let mut _201: &[&str; 2];
    let _202: &[&str; 2];
    let _203: [&str; 2];
    let mut _204: &[core::fmt::rt::Argument<'_>];
    let mut _205: &[core::fmt::rt::Argument<'_>; 2];
    let _206: &[core::fmt::rt::Argument<'_>; 2];
    let _207: [core::fmt::rt::Argument<'_>; 2];
    let mut _208: core::fmt::rt::Argument<'_>;
    let mut _209: &u128;
    let _210: &u128;
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &u128;
    let _213: &u128;
    let _214: ();
    let _215: ();
    let mut _216: &[&[u8]];
    let mut _217: &[&[u8]; 1];
    let _218: &[&[u8]; 1];
    let _219: [&[u8]; 1];
    let mut _220: &[u8];
    let _221: &[u8];
    let mut _222: &std::vec::Vec<u8>;
    let _223: &std::vec::Vec<u8>;
    let _224: std::vec::Vec<u8>;
    let mut _225: &state::events::CurveRecord;
    let _226: &state::events::CurveRecord;
    let _227: state::events::CurveRecord;
    let mut _228: i64;
    let mut _229: u64;
    let mut _231: &state::perp_market::PerpMarket;
    let mut _232: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _233: u64;
    let mut _234: std::option::Option<u64>;
    let mut _235: std::option::Option<u64>;
    let mut _236: u64;
    let mut _237: std::option::Option<u64>;
    let mut _238: &mut state::perp_market::PerpMarket;
    let mut _239: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _240: u16;
    let mut _241: &state::perp_market::PerpMarket;
    let mut _242: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _243: u128;
    let mut _244: u128;
    let mut _245: u128;
    let mut _246: u128;
    let mut _247: u128;
    let mut _248: u128;
    let mut _249: u128;
    let mut _250: u128;
    let mut _251: u128;
    let mut _252: i128;
    let mut _253: &state::perp_market::PerpMarket;
    let mut _254: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _255: u128;
    let mut _256: i128;
    let mut _257: &state::perp_market::PerpMarket;
    let mut _258: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _259: i128;
    let mut _260: &state::perp_market::PerpMarket;
    let mut _261: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _262: u32;
    let mut _263: &state::perp_market::PerpMarket;
    let mut _264: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _265: i128;
    let mut _266: &state::perp_market::PerpMarket;
    let mut _267: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _268: i128;
    let mut _269: &state::perp_market::PerpMarket;
    let mut _270: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _271: i128;
    let mut _272: i64;
    let mut _273: ();
    let mut _279: &mut instructions::admin::RepegCurve<'_>;
    let mut _280: &mut instructions::admin::RepegCurve<'_>;
    let mut _281: &mut instructions::admin::RepegCurve<'_>;
    let mut _282: &mut instructions::admin::RepegCurve<'_>;
    let mut _283: &mut instructions::admin::RepegCurve<'_>;
    let mut _284: &mut instructions::admin::RepegCurve<'_>;
    let mut _285: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug clock => _25;
        let _33: i64;
        scope 14 {
            debug now => _33;
            let _34: u64;
            scope 15 {
                debug clock_slot => _34;
                let _35: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _46: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
                scope 16 {
                    debug perp_market => _35;
                    let _53: std::string::String;
                    let _68: &anchor_lang::prelude::AccountInfo<'_>;
                    let mut _278: &[&str; 1];
                    scope 21 {
                        debug res => _53;
                    }
                    scope 22 {
                        debug price_oracle => _68;
                        let _69: i64;
                        let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _83: state::oracle::OraclePriceData;
                        scope 23 {
                            debug oracle_price => _69;
                            let _84: u128;
                            scope 28 {
                                debug peg_multiplier_before => _84;
                                let _87: u128;
                                scope 29 {
                                    debug base_asset_reserve_before => _87;
                                    let _90: u128;
                                    scope 30 {
                                        debug quote_asset_reserve_before => _90;
                                        let _93: u128;
                                        scope 31 {
                                            debug sqrt_k_before => _93;
                                            let _96: &state::state::OracleGuardRails;
                                            scope 32 {
                                                debug oracle_validity_rails => _96;
                                                let _99: i128;
                                                let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _113: i128;
                                                scope 33 {
                                                    debug adjustment_cost => _99;
                                                    let _114: u128;
                                                    scope 38 {
                                                        debug peg_multiplier_after => _114;
                                                        let _117: u128;
                                                        scope 39 {
                                                            debug base_asset_reserve_after => _117;
                                                            let _120: u128;
                                                            scope 40 {
                                                                debug quote_asset_reserve_after => _120;
                                                                let _123: u128;
                                                                scope 41 {
                                                                    debug sqrt_k_after => _123;
                                                                    let _132: std::string::String;
                                                                    let _154: std::string::String;
                                                                    let _176: std::string::String;
                                                                    let _198: std::string::String;
                                                                    let _230: u64;
                                                                    let mut _274: &[&str; 2];
                                                                    let mut _275: &[&str; 2];
                                                                    let mut _276: &[&str; 2];
                                                                    let mut _277: &[&str; 2];
                                                                    scope 42 {
                                                                        debug res => _132;
                                                                    }
                                                                    scope 43 {
                                                                        debug res => _154;
                                                                    }
                                                                    scope 44 {
                                                                        debug res => _176;
                                                                    }
                                                                    scope 45 {
                                                                        debug res => _198;
                                                                    }
                                                                    scope 46 {
                                                                        debug current_id => _230;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 34 {
                                                    debug residual => _110;
                                                    scope 35 {
                                                    }
                                                }
                                                scope 36 {
                                                    debug val => _113;
                                                    scope 37 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 24 {
                            debug residual => _80;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug val => _83;
                            scope 27 {
                            }
                        }
                    }
                }
                scope 17 {
                    debug residual => _43;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _46;
                    scope 20 {
                    }
                }
            }
        }
    }
    scope 10 {
        debug residual => _29;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _32;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _279 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _7 = &((*_279).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = &(*_7);
        _5 = constraints::perp_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb109];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _286 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _280 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _17 = &((*_280).2: anchor_lang::prelude::AccountInfo<'_>);
        _16 = &(*_17);
        StorageLive(_18);
        StorageLive(_19);
        _281 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _19 = &((*_281).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _18 = &(*_19);
        _15 = constraints::valid_oracle_for_perp_market(move _16, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb113];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _300 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb101;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _15) -> [return: bb8, unwind: bb109];
    }

    bb8: {
        StorageDead(_15);
        _20 = discriminant(_14);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_14 as Continue).0: ());
        _13 = _24;
        StorageDead(_24);
        _288 = discriminant(_14);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = move ((_14 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_23);
        _23 = move _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _23) -> [return: bb11, unwind: bb112];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        _298 = discriminant(_14);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb101;
    }

    bb12: {
        _26 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _27) -> [return: bb13, unwind: bb109];
    }

    bb13: {
        StorageDead(_27);
        _28 = discriminant(_26);
        switchInt(move _28) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_32);
        _32 = move ((_26 as Continue).0: anchor_lang::prelude::Clock);
        _25 = move _32;
        StorageDead(_32);
        _290 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_33);
        _33 = (_25.4: i64);
        StorageLive(_34);
        _34 = (_25.0: u64);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _282 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _40 = &((*_282).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _39 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _40) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_29);
        _29 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_31);
        _31 = move _29;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _31) -> [return: bb16, unwind: bb111];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_29);
        _296 = discriminant(_26);
        StorageDead(_26);
        goto -> bb100;
    }

    bb17: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _38 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _39, move _41) -> [return: bb18, unwind: bb109];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _38) -> [return: bb19, unwind: bb109];
    }

    bb19: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_46);
        _46 = move ((_37 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _36 = move _46;
        StorageDead(_46);
        _35 = &mut _36;
        _294 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _278 = const _;
        _57 = &(*_278);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &(*_35);
        _66 = <RefMut<'_, PerpMarket> as Deref>::deref(move _67) -> [return: bb23, unwind: bb108];
    }

    bb21: {
        StorageLive(_43);
        _43 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb22, unwind: bb110];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_43);
        _292 = discriminant(_37);
        StorageDead(_37);
        goto -> bb99;
    }

    bb23: {
        StorageDead(_67);
        _65 = &((*_66).21: u16);
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _64) -> [return: bb24, unwind: bb108];
    }

    bb24: {
        StorageDead(_64);
        _62 = [move _63];
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = move _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_60);
        _54 = Arguments::<'_>::new_v1(move _55, move _59) -> [return: bb25, unwind: bb108];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb26, unwind: bb108];
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb27, unwind: bb107];
    }

    bb27: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb28, unwind: bb107];
    }

    bb28: {
        StorageDead(_48);
        drop(_52) -> [return: bb29, unwind: bb108];
    }

    bb29: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_68);
        _283 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _68 = &((*_283).2: anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_35);
        _75 = <RefMut<'_, PerpMarket> as Deref>::deref(move _76) -> [return: bb30, unwind: bb108];
    }

    bb30: {
        StorageDead(_76);
        _74 = &(((*_75).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _73 = &(*_74);
        StorageLive(_77);
        _77 = &(*_68);
        StorageLive(_78);
        _78 = (_25.0: u64);
        _72 = get_oracle_price(move _73, move _77, move _78) -> [return: bb31, unwind: bb108];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _71 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _72) -> [return: bb32, unwind: bb108];
    }

    bb32: {
        StorageDead(_72);
        _79 = discriminant(_71);
        switchInt(move _79) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_83);
        _83 = ((_71 as Continue).0: state::oracle::OraclePriceData);
        _70 = _83;
        StorageDead(_83);
        StorageLive(_69);
        _69 = (_70.0: i64);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_35);
        _85 = <RefMut<'_, PerpMarket> as Deref>::deref(move _86) -> [return: bb36, unwind: bb108];
    }

    bb34: {
        StorageLive(_80);
        _80 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb35, unwind: bb108];
    }

    bb35: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb98;
    }

    bb36: {
        StorageDead(_86);
        _84 = (((*_85).1: state::perp_market::AMM).11: u128);
        StorageDead(_85);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_35);
        _88 = <RefMut<'_, PerpMarket> as Deref>::deref(move _89) -> [return: bb37, unwind: bb108];
    }

    bb37: {
        StorageDead(_89);
        _87 = (((*_88).1: state::perp_market::AMM).5: u128);
        StorageDead(_88);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_35);
        _91 = <RefMut<'_, PerpMarket> as Deref>::deref(move _92) -> [return: bb38, unwind: bb108];
    }

    bb38: {
        StorageDead(_92);
        _90 = (((*_91).1: state::perp_market::AMM).6: u128);
        StorageDead(_91);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &(*_35);
        _94 = <RefMut<'_, PerpMarket> as Deref>::deref(move _95) -> [return: bb39, unwind: bb108];
    }

    bb39: {
        StorageDead(_95);
        _93 = (((*_94).1: state::perp_market::AMM).10: u128);
        StorageDead(_94);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _284 = deref_copy (_1.1: &mut instructions::admin::RepegCurve<'_>);
        _285 = deref_copy ((*_284).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _306 = (((_285.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _98 = &(*_306);
        _97 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _98) -> [return: bb40, unwind: bb108];
    }

    bb40: {
        StorageDead(_98);
        _96 = &((*_97).7: state::state::OracleGuardRails);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &mut (*_35);
        _103 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _104) -> [return: bb41, unwind: bb108];
    }

    bb41: {
        _102 = &mut (*_103);
        StorageDead(_104);
        StorageLive(_105);
        _105 = &(*_68);
        StorageLive(_106);
        _106 = _2;
        StorageLive(_107);
        _107 = _34;
        StorageLive(_108);
        _108 = &(*_96);
        _101 = repeg(move _102, move _105, move _106, move _107, move _108) -> [return: bb42, unwind: bb108];
    }

    bb42: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_102);
        _100 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _101) -> [return: bb43, unwind: bb108];
    }

    bb43: {
        StorageDead(_101);
        _109 = discriminant(_100);
        switchInt(move _109) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_113);
        _113 = ((_100 as Continue).0: i128);
        _99 = _113;
        StorageDead(_113);
        StorageDead(_103);
        StorageDead(_100);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &(*_35);
        _115 = <RefMut<'_, PerpMarket> as Deref>::deref(move _116) -> [return: bb47, unwind: bb108];
    }

    bb45: {
        StorageLive(_110);
        _110 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb46, unwind: bb108];
    }

    bb46: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_103);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_69);
        goto -> bb98;
    }

    bb47: {
        StorageDead(_116);
        _114 = (((*_115).1: state::perp_market::AMM).11: u128);
        StorageDead(_115);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_35);
        _118 = <RefMut<'_, PerpMarket> as Deref>::deref(move _119) -> [return: bb48, unwind: bb108];
    }

    bb48: {
        StorageDead(_119);
        _117 = (((*_118).1: state::perp_market::AMM).5: u128);
        StorageDead(_118);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &(*_35);
        _121 = <RefMut<'_, PerpMarket> as Deref>::deref(move _122) -> [return: bb49, unwind: bb108];
    }

    bb49: {
        StorageDead(_122);
        _120 = (((*_121).1: state::perp_market::AMM).6: u128);
        StorageDead(_121);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &(*_35);
        _124 = <RefMut<'_, PerpMarket> as Deref>::deref(move _125) -> [return: bb50, unwind: bb108];
    }

    bb50: {
        StorageDead(_125);
        _123 = (((*_124).1: state::perp_market::AMM).10: u128);
        StorageDead(_124);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _277 = const _;
        _136 = &(*_277);
        _135 = &(*_136);
        _134 = move _135 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_135);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &_84;
        _143 = &(*_144);
        _142 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _143) -> [return: bb51, unwind: bb108];
    }

    bb51: {
        StorageDead(_143);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_114;
        _146 = &(*_147);
        _145 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _146) -> [return: bb52, unwind: bb108];
    }

    bb52: {
        StorageDead(_146);
        _141 = [move _142, move _145];
        StorageDead(_145);
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _138 = move _139 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_139);
        _133 = Arguments::<'_>::new_v1(move _134, move _138) -> [return: bb53, unwind: bb108];
    }

    bb53: {
        StorageDead(_138);
        StorageDead(_134);
        _132 = format(move _133) -> [return: bb54, unwind: bb108];
    }

    bb54: {
        StorageDead(_133);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        _131 = move _132;
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = <String as Deref>::deref(move _129) -> [return: bb55, unwind: bb106];
    }

    bb55: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = solana_program::log::sol_log(move _127) -> [return: bb56, unwind: bb106];
    }

    bb56: {
        StorageDead(_127);
        drop(_131) -> [return: bb57, unwind: bb108];
    }

    bb57: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _276 = const _;
        _158 = &(*_276);
        _157 = &(*_158);
        _156 = move _157 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_157);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &_87;
        _165 = &(*_166);
        _164 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _165) -> [return: bb58, unwind: bb108];
    }

    bb58: {
        StorageDead(_165);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &_117;
        _168 = &(*_169);
        _167 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _168) -> [return: bb59, unwind: bb108];
    }

    bb59: {
        StorageDead(_168);
        _163 = [move _164, move _167];
        StorageDead(_167);
        StorageDead(_164);
        _162 = &_163;
        _161 = &(*_162);
        _160 = move _161 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_161);
        _155 = Arguments::<'_>::new_v1(move _156, move _160) -> [return: bb60, unwind: bb108];
    }

    bb60: {
        StorageDead(_160);
        StorageDead(_156);
        _154 = format(move _155) -> [return: bb61, unwind: bb108];
    }

    bb61: {
        StorageDead(_155);
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_158);
        _153 = move _154;
        StorageDead(_154);
        _152 = &_153;
        _151 = &(*_152);
        _150 = <String as Deref>::deref(move _151) -> [return: bb62, unwind: bb105];
    }

    bb62: {
        _149 = &(*_150);
        StorageDead(_151);
        _148 = solana_program::log::sol_log(move _149) -> [return: bb63, unwind: bb105];
    }

    bb63: {
        StorageDead(_149);
        drop(_153) -> [return: bb64, unwind: bb108];
    }

    bb64: {
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_150);
        StorageDead(_148);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _275 = const _;
        _180 = &(*_275);
        _179 = &(*_180);
        _178 = move _179 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_179);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_90;
        _187 = &(*_188);
        _186 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _187) -> [return: bb65, unwind: bb108];
    }

    bb65: {
        StorageDead(_187);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_120;
        _190 = &(*_191);
        _189 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _190) -> [return: bb66, unwind: bb108];
    }

    bb66: {
        StorageDead(_190);
        _185 = [move _186, move _189];
        StorageDead(_189);
        StorageDead(_186);
        _184 = &_185;
        _183 = &(*_184);
        _182 = move _183 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_183);
        _177 = Arguments::<'_>::new_v1(move _178, move _182) -> [return: bb67, unwind: bb108];
    }

    bb67: {
        StorageDead(_182);
        StorageDead(_178);
        _176 = format(move _177) -> [return: bb68, unwind: bb108];
    }

    bb68: {
        StorageDead(_177);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_180);
        _175 = move _176;
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = <String as Deref>::deref(move _173) -> [return: bb69, unwind: bb104];
    }

    bb69: {
        _171 = &(*_172);
        StorageDead(_173);
        _170 = solana_program::log::sol_log(move _171) -> [return: bb70, unwind: bb104];
    }

    bb70: {
        StorageDead(_171);
        drop(_175) -> [return: bb71, unwind: bb108];
    }

    bb71: {
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_170);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _274 = const _;
        _202 = &(*_274);
        _201 = &(*_202);
        _200 = move _201 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_201);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_93;
        _209 = &(*_210);
        _208 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _209) -> [return: bb72, unwind: bb108];
    }

    bb72: {
        StorageDead(_209);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_123;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _212) -> [return: bb73, unwind: bb108];
    }

    bb73: {
        StorageDead(_212);
        _207 = [move _208, move _211];
        StorageDead(_211);
        StorageDead(_208);
        _206 = &_207;
        _205 = &(*_206);
        _204 = move _205 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_205);
        _199 = Arguments::<'_>::new_v1(move _200, move _204) -> [return: bb74, unwind: bb108];
    }

    bb74: {
        StorageDead(_204);
        StorageDead(_200);
        _198 = format(move _199) -> [return: bb75, unwind: bb108];
    }

    bb75: {
        StorageDead(_199);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_202);
        _197 = move _198;
        StorageDead(_198);
        _196 = &_197;
        _195 = &(*_196);
        _194 = <String as Deref>::deref(move _195) -> [return: bb76, unwind: bb103];
    }

    bb76: {
        _193 = &(*_194);
        StorageDead(_195);
        _192 = solana_program::log::sol_log(move _193) -> [return: bb77, unwind: bb103];
    }

    bb77: {
        StorageDead(_193);
        drop(_197) -> [return: bb78, unwind: bb108];
    }

    bb78: {
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = _33;
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &(*_35);
        _231 = <RefMut<'_, PerpMarket> as Deref>::deref(move _232) -> [return: bb79, unwind: bb108];
    }

    bb79: {
        StorageDead(_232);
        _230 = ((*_231).10: u64);
        StorageDead(_231);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = _230;
        _235 = core::num::<impl u64>::checked_add(move _236, const 1_u64) -> [return: bb80, unwind: bb108];
    }

    bb80: {
        StorageDead(_236);
        StorageLive(_237);
        _237 = Option::<u64>::Some(const 1_u64);
        _234 = Option::<u64>::or(move _235, move _237) -> [return: bb81, unwind: bb108];
    }

    bb81: {
        StorageDead(_237);
        StorageDead(_235);
        _233 = Option::<u64>::unwrap(move _234) -> [return: bb82, unwind: bb108];
    }

    bb82: {
        StorageDead(_234);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &mut (*_35);
        _238 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _239) -> [return: bb83, unwind: bb108];
    }

    bb83: {
        StorageDead(_239);
        ((*_238).10: u64) = move _233;
        StorageDead(_233);
        StorageDead(_238);
        _229 = _230;
        StorageDead(_230);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &(*_35);
        _241 = <RefMut<'_, PerpMarket> as Deref>::deref(move _242) -> [return: bb84, unwind: bb108];
    }

    bb84: {
        StorageDead(_242);
        _240 = ((*_241).21: u16);
        StorageLive(_243);
        _243 = _84;
        StorageLive(_244);
        _244 = _87;
        StorageLive(_245);
        _245 = _90;
        StorageLive(_246);
        _246 = _93;
        StorageLive(_247);
        _247 = _114;
        StorageLive(_248);
        _248 = _117;
        StorageLive(_249);
        _249 = _120;
        StorageLive(_250);
        _250 = _123;
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = &(*_35);
        _253 = <RefMut<'_, PerpMarket> as Deref>::deref(move _254) -> [return: bb85, unwind: bb108];
    }

    bb85: {
        StorageDead(_254);
        _252 = (((*_253).1: state::perp_market::AMM).13: i128);
        _251 = core::num::<impl i128>::unsigned_abs(move _252) -> [return: bb86, unwind: bb108];
    }

    bb86: {
        StorageDead(_252);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &(*_35);
        _257 = <RefMut<'_, PerpMarket> as Deref>::deref(move _258) -> [return: bb87, unwind: bb108];
    }

    bb87: {
        StorageDead(_258);
        _256 = (((*_257).1: state::perp_market::AMM).14: i128);
        _255 = core::num::<impl i128>::unsigned_abs(move _256) -> [return: bb88, unwind: bb108];
    }

    bb88: {
        StorageDead(_256);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &(*_35);
        _260 = <RefMut<'_, PerpMarket> as Deref>::deref(move _261) -> [return: bb89, unwind: bb108];
    }

    bb89: {
        StorageDead(_261);
        _259 = (((*_260).1: state::perp_market::AMM).15: i128);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = &(*_35);
        _263 = <RefMut<'_, PerpMarket> as Deref>::deref(move _264) -> [return: bb90, unwind: bb108];
    }

    bb90: {
        StorageDead(_264);
        _262 = ((*_263).20: u32);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &(*_35);
        _266 = <RefMut<'_, PerpMarket> as Deref>::deref(move _267) -> [return: bb91, unwind: bb108];
    }

    bb91: {
        StorageDead(_267);
        _265 = (((*_266).1: state::perp_market::AMM).28: i128);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = &(*_35);
        _269 = <RefMut<'_, PerpMarket> as Deref>::deref(move _270) -> [return: bb92, unwind: bb108];
    }

    bb92: {
        StorageDead(_270);
        _268 = (((*_269).1: state::perp_market::AMM).31: i128);
        StorageLive(_271);
        _271 = _99;
        StorageLive(_272);
        _272 = _69;
        _227 = CurveRecord { ts: move _228, record_id: move _229, peg_multiplier_before: move _243, base_asset_reserve_before: move _244, quote_asset_reserve_before: move _245, sqrt_k_before: move _246, peg_multiplier_after: move _247, base_asset_reserve_after: move _248, quote_asset_reserve_after: move _249, sqrt_k_after: move _250, base_asset_amount_long: move _251, base_asset_amount_short: move _255, base_asset_amount_with_amm: move _259, total_fee: move _265, total_fee_minus_distributions: move _268, adjustment_cost: move _271, oracle_price: move _272, fill_record: const 0_u128, number_of_users: move _262, market_index: move _240 };
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_255);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_248);
        StorageDead(_247);
        StorageDead(_246);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_229);
        StorageDead(_228);
        _226 = &_227;
        _225 = &(*_226);
        _224 = <CurveRecord as anchor_lang::Event>::data(move _225) -> [return: bb93, unwind: bb108];
    }

    bb93: {
        StorageDead(_225);
        _223 = &_224;
        _222 = &(*_223);
        _221 = <Vec<u8> as Deref>::deref(move _222) -> [return: bb94, unwind: bb102];
    }

    bb94: {
        _220 = &(*_221);
        StorageDead(_222);
        _219 = [move _220];
        StorageDead(_220);
        _218 = &_219;
        _217 = &(*_218);
        _216 = move _217 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_217);
        _215 = solana_program::log::sol_log_data(move _216) -> [return: bb95, unwind: bb102];
    }

    bb95: {
        StorageDead(_216);
        drop(_224) -> [return: bb96, unwind: bb108];
    }

    bb96: {
        StorageDead(_269);
        StorageDead(_266);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_253);
        StorageDead(_241);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_215);
        _214 = const ();
        StorageDead(_214);
        StorageLive(_273);
        _273 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _273);
        StorageDead(_273);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_84);
        StorageDead(_69);
        StorageDead(_68);
        drop(_36) -> [return: bb97, unwind: bb109];
    }

    bb97: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_25);
        goto -> bb101;
    }

    bb98: {
        StorageDead(_68);
        drop(_36) -> [return: bb99, unwind: bb109];
    }

    bb99: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_25);
        goto -> bb101;
    }

    bb101: {
        return;
    }

    bb102 (cleanup): {
        drop(_224) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        drop(_197) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb104 (cleanup): {
        drop(_175) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb105 (cleanup): {
        drop(_153) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb106 (cleanup): {
        drop(_131) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_52) -> [return: bb108, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_36) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        resume;
    }

    bb110 (cleanup): {
        _302 = discriminant(_37);
        goto -> bb109;
    }

    bb111 (cleanup): {
        _303 = discriminant(_26);
        goto -> bb109;
    }

    bb112 (cleanup): {
        _304 = discriminant(_14);
        goto -> bb109;
    }

    bb113 (cleanup): {
        _305 = discriminant(_4);
        goto -> bb109;
    }
}
