// MIR for `admin::handle_update_serum_vault` after PreCodegen

fn admin::handle_update_serum_vault(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::UpdateSerumVault<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _9: &anchor_spl::token_interface::TokenAccount;
    let _10: &anchor_spl::token_interface::TokenAccount;
    let mut _11: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _12: &anchor_lang::prelude::Pubkey;
    let _13: anchor_lang::prelude::Pubkey;
    let mut _14: bool;
    let mut _15: &anchor_lang::prelude::Pubkey;
    let _16: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _17: &anchor_spl::token_interface::TokenAccount;
    let _18: &anchor_spl::token_interface::TokenAccount;
    let mut _19: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _20: &anchor_lang::prelude::Pubkey;
    let _21: anchor_lang::prelude::Pubkey;
    let mut _22: ();
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[&str; 2];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let mut _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: &error::ErrorCode;
    let _42: &error::ErrorCode;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: error::ErrorCode;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: ();
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _54: std::result::Result<(), error::ErrorCode>;
    let mut _55: bool;
    let mut _56: &anchor_lang::prelude::Pubkey;
    let _57: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _58: &anchor_spl::token_interface::TokenAccount;
    let _59: &anchor_spl::token_interface::TokenAccount;
    let mut _60: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _61: &anchor_lang::prelude::Pubkey;
    let _62: &state::state::State;
    let mut _63: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _64: ();
    let _66: ();
    let mut _67: &str;
    let _68: &str;
    let mut _69: &std::string::String;
    let _70: &std::string::String;
    let _71: std::string::String;
    let mut _73: std::fmt::Arguments<'_>;
    let mut _74: &[&str];
    let mut _75: &[&str; 2];
    let _76: &[&str; 2];
    let _77: [&str; 2];
    let mut _78: &[core::fmt::rt::Argument<'_>];
    let mut _79: &[core::fmt::rt::Argument<'_>; 1];
    let _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: [core::fmt::rt::Argument<'_>; 1];
    let mut _82: core::fmt::rt::Argument<'_>;
    let mut _83: &error::ErrorCode;
    let _84: &error::ErrorCode;
    let _85: ();
    let mut _86: &str;
    let _87: &str;
    let mut _88: error::ErrorCode;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: &std::string::String;
    let _99: &std::string::String;
    let _100: std::string::String;
    let mut _102: std::fmt::Arguments<'_>;
    let mut _103: &[&str];
    let mut _104: &[&str; 2];
    let _105: &[&str; 2];
    let _106: [&str; 2];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let mut _108: &[core::fmt::rt::Argument<'_>; 2];
    let _109: &[core::fmt::rt::Argument<'_>; 2];
    let _110: [core::fmt::rt::Argument<'_>; 2];
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &anchor_lang::prelude::Pubkey;
    let _113: &anchor_lang::prelude::Pubkey;
    let _114: &state::state::State;
    let mut _115: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _116: core::fmt::rt::Argument<'_>;
    let mut _117: &anchor_lang::prelude::Pubkey;
    let _118: &anchor_lang::prelude::Pubkey;
    let _119: anchor_lang::prelude::Pubkey;
    let mut _120: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _121: anchor_lang::prelude::Pubkey;
    let mut _122: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _123: &mut state::state::State;
    let mut _124: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _125: ();
    let mut _129: &mut instructions::admin::UpdateSerumVault<'_>;
    let mut _130: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _131: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _132: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _133: &mut instructions::admin::UpdateSerumVault<'_>;
    let mut _134: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _135: &mut instructions::admin::UpdateSerumVault<'_>;
    let mut _136: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _137: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _138: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _139: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _140: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _141: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _142: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _143: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _144: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _145: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _146: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _147: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug vault => _2;
        let _23: error::ErrorCode;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: ();
        let _65: error::ErrorCode;
        let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _93: ();
        let _94: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 2 {
            debug error_code => _23;
            let _30: std::string::String;
            let mut _128: &[&str; 2];
            scope 3 {
                debug res => _30;
            }
        }
        scope 4 {
            debug residual => _48;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _51;
            scope 7 {
            }
        }
        scope 8 {
            debug error_code => _65;
            let _72: std::string::String;
            let mut _127: &[&str; 2];
            scope 9 {
                debug res => _72;
            }
        }
        scope 10 {
            debug residual => _90;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _93;
            scope 13 {
            }
        }
        scope 14 {
            debug state => _94;
            let _101: std::string::String;
            let mut _126: &[&str; 2];
            scope 15 {
                debug res => _101;
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _129 = deref_copy (_1.1: &mut instructions::admin::UpdateSerumVault<'_>);
        _2 = &((*_129).2: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _130 = deref_copy (*_2);
        _140 = (((_130.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _11 = &(*_140);
        _10 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &(*_10);
        _8 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_9);
        _7 = &((*_8).0: anchor_lang::prelude::Pubkey);
        StorageLive(_12);
        StorageLive(_13);
        _13 = srm_mint::id() -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = &_13;
        _6 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _7, move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb11;
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _131 = deref_copy (*_2);
        _141 = (((_131.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _19 = &(*_141);
        _18 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _17 = &(*_18);
        _16 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = &((*_16).0: anchor_lang::prelude::Pubkey);
        StorageLive(_20);
        StorageLive(_21);
        _21 = msrm_mint::id() -> [return: bb9, unwind continue];
    }

    bb9: {
        _20 = &_21;
        _14 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _15, move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _14) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_22);
        _22 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        goto -> bb20;
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_23);
        _23 = error::ErrorCode::InvalidSrmVault;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _128 = const _;
        _34 = &(*_128);
        _33 = &(*_34);
        _32 = move _33 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_23;
        _41 = &(*_42);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _41) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_41);
        _39 = [move _40];
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_37);
        _31 = Arguments::<'_>::new_v1(move _32, move _36) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = format(move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        _29 = move _30;
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = <String as Deref>::deref(move _27) -> [return: bb16, unwind: bb59];
    }

    bb16: {
        _25 = &(*_26);
        StorageDead(_27);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb17, unwind: bb59];
    }

    bb17: {
        StorageDead(_25);
        drop(_29) -> [return: bb18, unwind: bb60];
    }

    bb18: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = const "vault did not hav srm or msrm mint";
        _44 = &(*_45);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_44);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_46);
        _46 = _23;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _46);
        StorageDead(_46);
        StorageDead(_23);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_14);
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_5);
        _47 = discriminant(_4);
        switchInt(move _47) -> [0: bb22, 1: bb24, otherwise: bb23];
    }

    bb22: {
        StorageLive(_51);
        _51 = ((_4 as Continue).0: ());
        _3 = _51;
        StorageDead(_51);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _132 = deref_copy (*_2);
        _142 = (((_132.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _60 = &(*_142);
        _59 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _60) -> [return: bb26, unwind continue];
    }

    bb23: {
        unreachable;
    }

    bb24: {
        StorageLive(_48);
        _48 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb55;
    }

    bb26: {
        _58 = &(*_59);
        _57 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _58) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_60);
        StorageDead(_58);
        _56 = &((*_57).1: anchor_lang::prelude::Pubkey);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _133 = deref_copy (_1.1: &mut instructions::admin::UpdateSerumVault<'_>);
        _134 = deref_copy ((*_133).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _143 = (((_134.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _63 = &(*_143);
        _62 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _63) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_63);
        _61 = &((*_62).3: anchor_lang::prelude::Pubkey);
        _55 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _56, move _61) -> [return: bb29, unwind continue];
    }

    bb29: {
        switchInt(move _55) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_64);
        _64 = ();
        _54 = std::result::Result::<(), error::ErrorCode>::Ok(move _64);
        StorageDead(_64);
        goto -> bb39;
    }

    bb31: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_65);
        _65 = error::ErrorCode::InvalidVaultOwner;
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _127 = const _;
        _76 = &(*_127);
        _75 = &(*_76);
        _74 = move _75 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_65;
        _83 = &(*_84);
        _82 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _83) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_83);
        _81 = [move _82];
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = move _79 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_79);
        _73 = Arguments::<'_>::new_v1(move _74, move _78) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_78);
        StorageDead(_74);
        _72 = format(move _73) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_73);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_76);
        _71 = move _72;
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = <String as Deref>::deref(move _69) -> [return: bb35, unwind: bb58];
    }

    bb35: {
        _67 = &(*_68);
        StorageDead(_69);
        _66 = solana_program::log::sol_log(move _67) -> [return: bb36, unwind: bb58];
    }

    bb36: {
        StorageDead(_67);
        drop(_71) -> [return: bb37, unwind: bb60];
    }

    bb37: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = const "vault owner was not program signer";
        _86 = &(*_87);
        _85 = solana_program::log::sol_log(move _86) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_86);
        StorageDead(_87);
        StorageDead(_85);
        StorageLive(_88);
        _88 = _65;
        _54 = std::result::Result::<(), error::ErrorCode>::Err(move _88);
        StorageDead(_88);
        StorageDead(_65);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_55);
        _53 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _54) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_54);
        _89 = discriminant(_53);
        switchInt(move _89) -> [0: bb41, 1: bb42, otherwise: bb23];
    }

    bb41: {
        StorageLive(_93);
        _93 = ((_53 as Continue).0: ());
        _52 = _93;
        StorageDead(_93);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_94);
        _135 = deref_copy (_1.1: &mut instructions::admin::UpdateSerumVault<'_>);
        _94 = &mut ((*_135).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _126 = const _;
        _105 = &(*_126);
        _104 = &(*_105);
        _103 = move _104 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_104);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _136 = deref_copy (*_94);
        _144 = (((_136.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _115 = &(*_144);
        _114 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _115) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_90);
        _90 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb55;
    }

    bb44: {
        StorageDead(_115);
        _113 = &((*_114).4: anchor_lang::prelude::Pubkey);
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _112) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_112);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _137 = deref_copy (*_2);
        _145 = (((_137.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _120 = &(*_145);
        _119 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _120) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_120);
        _118 = &_119;
        _117 = &(*_118);
        _116 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _117) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_117);
        _110 = [move _111, move _116];
        StorageDead(_116);
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_108);
        _102 = Arguments::<'_>::new_v1(move _103, move _107) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_107);
        StorageDead(_103);
        _101 = format(move _102) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_102);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        _100 = move _101;
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = <String as Deref>::deref(move _98) -> [return: bb50, unwind: bb57];
    }

    bb50: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb51, unwind: bb57];
    }

    bb51: {
        StorageDead(_96);
        drop(_100) -> [return: bb52, unwind: bb60];
    }

    bb52: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_121);
        StorageLive(_122);
        _138 = deref_copy (*_2);
        _146 = (((_138.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _122 = &(*_146);
        _121 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _122) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_122);
        StorageLive(_123);
        StorageLive(_124);
        _139 = deref_copy (*_94);
        _147 = (((_139.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _124 = &mut (*_147);
        _123 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _124) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_124);
        ((*_123).4: anchor_lang::prelude::Pubkey) = move _121;
        StorageDead(_121);
        StorageDead(_123);
        StorageLive(_125);
        _125 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _125);
        StorageDead(_125);
        StorageDead(_94);
        StorageDead(_2);
        goto -> bb56;
    }

    bb55: {
        StorageDead(_2);
        goto -> bb56;
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_100) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        drop(_71) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb59 (cleanup): {
        drop(_29) -> [return: bb60, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        resume;
    }
}
