digraph Mir_0_4427 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn UserStats::update_fuel_overflow_status(_1: &amp;ReErased mut state::user::UserStats, _2: bool) -&gt; ()<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: u8;<br align="left"/>let mut _5: u8;<br align="left"/>let mut _6: (u8, bool);<br align="left"/>let mut _7: u8;<br align="left"/>let mut _8: u8;<br align="left"/>let mut _9: u8;<br align="left"/>let mut _10: (u8, bool);<br align="left"/>debug self =&gt; _1;<br align="left"/>debug has_overflow =&gt; _2;<br align="left"/>>;
    bb0__0_4427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = _2<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_4427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_6 = CheckedAdd(const _, const 0_u8)<br/></td></tr><tr><td align="left">assert(!move (_6.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const _, const 0_u8)</td></tr></table>>];
    bb2__0_4427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = move (_6.0: u8)<br/>_4 = move _5 as u8 (IntToInt)<br/>StorageDead(_5)<br/>((*_1).16: u8) = BitOr(((*_1).16: u8), move _4)<br/>StorageDead(_4)<br/>_0 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_4427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_10 = CheckedAdd(const _, const 0_u8)<br/></td></tr><tr><td align="left">assert(!move (_10.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const _, const 0_u8)</td></tr></table>>];
    bb4__0_4427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_9 = move (_10.0: u8)<br/>_8 = move _9 as u8 (IntToInt)<br/>StorageDead(_9)<br/>_7 = Not(move _8)<br/>StorageDead(_8)<br/>((*_1).16: u8) = BitAnd(((*_1).16: u8), move _7)<br/>StorageDead(_7)<br/>_0 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_4427 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4427 -> bb3__0_4427 [label="0"];
    bb0__0_4427 -> bb1__0_4427 [label="otherwise"];
    bb1__0_4427 -> bb2__0_4427 [label="success"];
    bb2__0_4427 -> bb5__0_4427 [label=""];
    bb3__0_4427 -> bb4__0_4427 [label="success"];
    bb4__0_4427 -> bb5__0_4427 [label=""];
}
