// MIR for `sig_verification::<impl at programs/drift/src/validation/sig_verification.rs:276:1: 276:14>::from` before PreCodegen

fn sig_verification::<impl at programs/drift/src/validation/sig_verification.rs:276:1: 276:14>::from(_1: SignatureVerificationError) -> anchor_lang::error::Error {
    debug error_code => _1;
    let mut _0: anchor_lang::error::Error;
    let mut _2: anchor_lang::error::AnchorError;
    let mut _3: std::string::String;
    let mut _4: &validation::sig_verification::SignatureVerificationError;
    let mut _5: u32;
    let mut _6: validation::sig_verification::SignatureVerificationError;
    let mut _7: std::string::String;
    let mut _8: &validation::sig_verification::SignatureVerificationError;
    let mut _9: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _10: std::option::Option<anchor_lang::error::ComparedValues>;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = SignatureVerificationError::name(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = <SignatureVerificationError as Into<u32>>::into(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_1;
        _7 = <SignatureVerificationError as ToString>::to_string(move _8) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = Option::<ErrorOrigin>::None;
        StorageLive(_10);
        _10 = Option::<ComparedValues>::None;
        _2 = anchor_lang::error::AnchorError { error_name: move _3, error_code_number: move _5, error_msg: move _7, error_origin: move _9, compared_values: move _10 };
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        _0 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _2) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        StorageDead(_2);
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate(cleanup)];
    }

    bb6 (cleanup): {
        resume;
    }
}
