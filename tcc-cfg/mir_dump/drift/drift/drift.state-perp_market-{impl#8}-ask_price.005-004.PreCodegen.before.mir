// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::ask_price` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::ask_price(_1: &AMM, _2: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug reserve_price => _2;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _3: i32;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _5: std::result::Result<i32, error::ErrorCode>;
    let mut _6: i32;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _8: std::result::Result<i32, error::ErrorCode>;
    let mut _9: u32;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i32;
    let mut _15: i32;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: i32;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: i32;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _43: std::result::Result<u128, error::ErrorCode>;
    let mut _44: u128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: u128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _55: std::result::Result<u128, error::ErrorCode>;
    let mut _56: i128;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug adjusted_spread => _3;
        let _21: i128;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: i128;
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: i128;
        scope 10 {
            debug multiplier => _21;
            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _52: u128;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: u128;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: u128;
            let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _71: u128;
            scope 19 {
                debug residual => _49;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _52;
                scope 22 {
                }
            }
            scope 23 {
                debug residual => _58;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _61;
                scope 26 {
                }
            }
            scope 27 {
                debug residual => _63;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _66;
                scope 30 {
                }
            }
            scope 31 {
                debug residual => _68;
                scope 32 {
                }
            }
            scope 33 {
                debug val => _71;
                scope 34 {
                }
            }
        }
        scope 11 {
            debug residual => _29;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _32;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _34;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _37;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _17;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _20;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).65: u32);
        _8 = <u32 as Cast>::cast::<i32>(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: i32);
        _6 = _14;
        StorageDead(_14);
        StorageLive(_15);
        _15 = ((*_1).82: i32);
        _5 = <i32 as SafeMath>::safe_add(move _6, move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb47;
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_6);
        _4 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _5) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_5);
        _16 = discriminant(_4);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_4 as Continue).0: i32);
        _3 = _20;
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _3;
        _26 = <i32 as Cast>::cast::<i128>(move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_17);
        _17 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb47;
    }

    bb12: {
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: i128);
        _24 = _32;
        StorageDead(_32);
        _23 = <i128 as SafeMath>::safe_add(const _, move _24) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb46;
    }

    bb17: {
        StorageDead(_24);
        _22 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_23);
        _33 = discriminant(_22);
        switchInt(move _33) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_37);
        _37 = ((_22 as Continue).0: i128);
        _21 = _37;
        StorageDead(_37);
        StorageDead(_25);
        StorageDead(_22);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _2;
        _46 = <u64 as Cast>::cast::<u128>(move _47) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_34);
        _34 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_36);
        StorageDead(_34);
        goto -> bb46;
    }

    bb22: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: u128);
        _44 = _52;
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _21;
        _55 = <i128 as Cast>::cast::<u128>(move _56) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_21);
        StorageDead(_3);
        goto -> bb45;
    }

    bb27: {
        StorageDead(_56);
        _54 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: u128);
        _53 = _61;
        StorageDead(_61);
        _43 = <u128 as SafeMath>::safe_mul(move _44, move _53) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb43;
    }

    bb32: {
        StorageDead(_53);
        StorageDead(_44);
        _42 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _43) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_43);
        _62 = discriminant(_42);
        switchInt(move _62) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_66);
        _66 = ((_42 as Continue).0: u128);
        _41 = _66;
        StorageDead(_66);
        _40 = <u128 as SafeMath>::safe_div(move _41, const _) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_63);
        _63 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb43;
    }

    bb37: {
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_40);
        _67 = discriminant(_39);
        switchInt(move _67) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_71);
        _71 = ((_39 as Continue).0: u128);
        _38 = _71;
        StorageDead(_71);
        _0 = <u128 as Cast>::cast::<u64>(move _38) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_68);
        _68 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb44;
    }

    bb42: {
        StorageDead(_38);
        StorageDead(_21);
        StorageDead(_3);
        StorageDead(_54);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        goto -> bb49;
    }

    bb43: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_38);
        StorageDead(_21);
        StorageDead(_3);
        StorageDead(_54);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_39);
        goto -> bb49;
    }

    bb46: {
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_3);
        goto -> bb49;
    }

    bb49: {
        return;
    }
}
