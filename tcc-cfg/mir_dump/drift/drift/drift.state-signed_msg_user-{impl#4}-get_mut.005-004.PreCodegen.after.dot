digraph Mir_0_3968 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SignedMsgUserOrdersZeroCopyMut::&lt;'a&gt;::get_mut(_1: &amp;ReErased mut state::signed_msg_user::SignedMsgUserOrdersZeroCopyMut&lt;ReErased&gt;, _2: u32) -&gt; &amp;ReErased mut state::signed_msg_user::SignedMsgOrderId<br align="left"/>let mut _3: &amp;ReErased mut state::signed_msg_user::SignedMsgOrderId;<br align="left"/>let _4: usize;<br align="left"/>let _5: usize;<br align="left"/>let mut _6: usize;<br align="left"/>let mut _7: u32;<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: (usize, bool);<br align="left"/>let mut _10: &amp;ReErased mut state::signed_msg_user::SignedMsgOrderId;<br align="left"/>let mut _11: &amp;ReErased mut [u8];<br align="left"/>let mut _12: &amp;ReErased mut [u8];<br align="left"/>let mut _13: &amp;ReErased mut [u8];<br align="left"/>let mut _14: &amp;ReErased mut [u8];<br align="left"/>let mut _15: &amp;ReErased mut [u8];<br align="left"/>let mut _16: &amp;ReErased mut std::cell::RefMut&lt;ReErased, [u8]&gt;;<br align="left"/>let mut _17: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: usize;<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: (usize, bool);<br align="left"/>debug self =&gt; _1;<br align="left"/>debug index =&gt; _2;<br align="left"/>debug size =&gt; _4;<br align="left"/>debug start =&gt; _5;<br align="left"/>>;
    bb0__0_3968 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/></td></tr><tr><td align="left">_4 = std::mem::size_of::&lt;SignedMsgOrderId&gt;()</td></tr></table>>];
    bb1__0_3968 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _2<br/>_6 = move _7 as usize (IntToInt)<br/>StorageDead(_7)<br/>StorageLive(_8)<br/>_8 = _4<br/>_9 = CheckedMul(_6, _8)<br/></td></tr><tr><td align="left">assert(!move (_9.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _6, move _8)</td></tr></table>>];
    bb2__0_3968 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_5 = move (_9.0: usize)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;mut ((*_1).1: std::cell::RefMut&lt;'_, [u8]&gt;)<br/></td></tr><tr><td align="left">_15 = &lt;RefMut&lt;'_, [u8]&gt; as DerefMut&gt;::deref_mut(move _16)</td></tr></table>>];
    bb3__0_3968 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_14 = &amp;mut (*_15)<br/>StorageDead(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _5<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _5<br/>StorageLive(_21)<br/>_21 = _4<br/>_22 = CheckedAdd(_20, _21)<br/></td></tr><tr><td align="left">assert(!move (_22.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _20, move _21)</td></tr></table>>];
    bb4__0_3968 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_19 = move (_22.0: usize)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>_17 = std::ops::Range::&lt;usize&gt; { start: move _18, end: move _19 }<br/>StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_13 = &lt;[u8] as IndexMut&lt;std::ops::Range&lt;usize&gt;&gt;&gt;::index_mut(move _14, move _17)</td></tr></table>>];
    bb5__0_3968 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_14)<br/>_12 = &amp;mut (*_13)<br/>_11 = &amp;mut (*_12)<br/></td></tr><tr><td align="left">_10 = bytemuck::from_bytes_mut::&lt;SignedMsgOrderId&gt;(move _11)</td></tr></table>>];
    bb6__0_3968 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_3 = &amp;mut (*_10)<br/>StorageDead(_11)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>_0 = &amp;mut (*_3)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3968 -> bb1__0_3968 [label="return"];
    bb1__0_3968 -> bb2__0_3968 [label="success"];
    bb2__0_3968 -> bb3__0_3968 [label="return"];
    bb3__0_3968 -> bb4__0_3968 [label="success"];
    bb4__0_3968 -> bb5__0_3968 [label="return"];
    bb5__0_3968 -> bb6__0_3968 [label="return"];
}
