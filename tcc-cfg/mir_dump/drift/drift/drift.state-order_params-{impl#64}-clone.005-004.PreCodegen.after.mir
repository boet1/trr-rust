// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:913:46: 913:51>::clone` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:913:46: 913:51>::clone(_1: &order_params::ModifyOrderParams) -> order_params::ModifyOrderParams {
    debug self => _1;
    let mut _0: state::order_params::ModifyOrderParams;
    let mut _2: std::option::Option<controller::position::PositionDirection>;
    let mut _3: &std::option::Option<controller::position::PositionDirection>;
    let _4: &std::option::Option<controller::position::PositionDirection>;
    let mut _5: std::option::Option<u64>;
    let mut _6: &std::option::Option<u64>;
    let _7: &std::option::Option<u64>;
    let mut _8: std::option::Option<u64>;
    let mut _9: &std::option::Option<u64>;
    let _10: &std::option::Option<u64>;
    let mut _11: std::option::Option<bool>;
    let mut _12: &std::option::Option<bool>;
    let _13: &std::option::Option<bool>;
    let mut _14: std::option::Option<state::order_params::PostOnlyParam>;
    let mut _15: &std::option::Option<state::order_params::PostOnlyParam>;
    let _16: &std::option::Option<state::order_params::PostOnlyParam>;
    let mut _17: std::option::Option<u8>;
    let mut _18: &std::option::Option<u8>;
    let _19: &std::option::Option<u8>;
    let mut _20: std::option::Option<i64>;
    let mut _21: &std::option::Option<i64>;
    let _22: &std::option::Option<i64>;
    let mut _23: std::option::Option<u64>;
    let mut _24: &std::option::Option<u64>;
    let _25: &std::option::Option<u64>;
    let mut _26: std::option::Option<state::user::OrderTriggerCondition>;
    let mut _27: &std::option::Option<state::user::OrderTriggerCondition>;
    let _28: &std::option::Option<state::user::OrderTriggerCondition>;
    let mut _29: std::option::Option<i32>;
    let mut _30: &std::option::Option<i32>;
    let _31: &std::option::Option<i32>;
    let mut _32: std::option::Option<u8>;
    let mut _33: &std::option::Option<u8>;
    let _34: &std::option::Option<u8>;
    let mut _35: std::option::Option<i64>;
    let mut _36: &std::option::Option<i64>;
    let _37: &std::option::Option<i64>;
    let mut _38: std::option::Option<i64>;
    let mut _39: &std::option::Option<i64>;
    let _40: &std::option::Option<i64>;
    let mut _41: std::option::Option<u8>;
    let mut _42: &std::option::Option<u8>;
    let _43: &std::option::Option<u8>;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: std::option::Option<controller::position::PositionDirection>);
        _3 = &(*_4);
        _2 = <Option<controller::position::PositionDirection> as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: std::option::Option<u64>);
        _6 = &(*_7);
        _5 = <Option<u64> as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: std::option::Option<u64>);
        _9 = &(*_10);
        _8 = <Option<u64> as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: std::option::Option<bool>);
        _12 = &(*_13);
        _11 = <Option<bool> as Clone>::clone(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: std::option::Option<state::order_params::PostOnlyParam>);
        _15 = &(*_16);
        _14 = <Option<PostOnlyParam> as Clone>::clone(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: std::option::Option<u8>);
        _18 = &(*_19);
        _17 = <Option<u8> as Clone>::clone(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_1).6: std::option::Option<i64>);
        _21 = &(*_22);
        _20 = <Option<i64> as Clone>::clone(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &((*_1).7: std::option::Option<u64>);
        _24 = &(*_25);
        _23 = <Option<u64> as Clone>::clone(move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &((*_1).8: std::option::Option<state::user::OrderTriggerCondition>);
        _27 = &(*_28);
        _26 = <Option<OrderTriggerCondition> as Clone>::clone(move _27) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &((*_1).9: std::option::Option<i32>);
        _30 = &(*_31);
        _29 = <Option<i32> as Clone>::clone(move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_30);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_1).10: std::option::Option<u8>);
        _33 = &(*_34);
        _32 = <Option<u8> as Clone>::clone(move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_33);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &((*_1).11: std::option::Option<i64>);
        _36 = &(*_37);
        _35 = <Option<i64> as Clone>::clone(move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &((*_1).12: std::option::Option<i64>);
        _39 = &(*_40);
        _38 = <Option<i64> as Clone>::clone(move _39) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_39);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &((*_1).13: std::option::Option<u8>);
        _42 = &(*_43);
        _41 = <Option<u8> as Clone>::clone(move _42) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_42);
        _0 = order_params::ModifyOrderParams { direction: move _2, base_asset_amount: move _5, price: move _8, reduce_only: move _11, post_only: move _14, bit_flags: move _17, max_ts: move _20, trigger_price: move _23, trigger_condition: move _26, oracle_price_offset: move _29, auction_duration: move _32, auction_start_price: move _35, auction_end_price: move _38, policy: move _41 };
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
