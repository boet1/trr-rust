digraph Mir_0_1908 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn can_fill_with_amm(_1: state::perp_market::AMMAvailability, _2: std::option::Option&lt;i64&gt;, _3: &amp;ReErased state::user::Order, _4: u8, _5: u64, _6: state::fill_mode::FillMode) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: &amp;ReErased state::perp_market::AMMAvailability;<br align="left"/>let mut _10: &amp;ReErased state::perp_market::AMMAvailability;<br align="left"/>let _11: state::perp_market::AMMAvailability;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: &amp;ReErased std::option::Option&lt;i64&gt;;<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: &amp;ReErased state::perp_market::AMMAvailability;<br align="left"/>let mut _16: &amp;ReErased state::perp_market::AMMAvailability;<br align="left"/>let _17: state::perp_market::AMMAvailability;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _19: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _20: &amp;ReErased state::user::Order;<br align="left"/>let mut _21: u8;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: state::fill_mode::FillMode;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _28: bool;<br align="left"/>let mut _29: &amp;ReErased state::perp_market::AMMAvailability;<br align="left"/>let mut _30: &amp;ReErased state::perp_market::AMMAvailability;<br align="left"/>debug amm_availability =&gt; _1;<br align="left"/>debug valid_oracle_price =&gt; _2;<br align="left"/>debug order =&gt; _3;<br align="left"/>debug min_auction_duration =&gt; _4;<br align="left"/>debug slot =&gt; _5;<br align="left"/>debug fill_mode =&gt; _6;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>>;
    bb0__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;_1<br/>StorageLive(_10)<br/>_30 = const _<br/>_10 = &amp;(*_30)<br/></td></tr><tr><td align="left">_8 = &lt;AMMAvailability as PartialEq&gt;::ne(move _9, move _10)</td></tr></table>>];
    bb1__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb2__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;_2<br/></td></tr><tr><td align="left">_12 = Option::&lt;i64&gt;::is_some(move _13)</td></tr></table>>];
    bb3__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;_1<br/>StorageLive(_16)<br/>_29 = const _<br/>_16 = &amp;(*_29)<br/></td></tr><tr><td align="left">_14 = &lt;AMMAvailability as PartialEq&gt;::eq(move _15, move _16)</td></tr></table>>];
    bb5__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_7 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb9__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>_7 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;(*_3)<br/>StorageLive(_21)<br/>_21 = _4<br/>StorageLive(_22)<br/>_22 = _5<br/>StorageLive(_23)<br/>_23 = _6<br/></td></tr><tr><td align="left">_19 = is_amm_available_liquidity_source(move _20, move _21, move _22, move _23)</td></tr></table>>];
    bb11__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb12__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_24 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb13__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_18 as Continue).0: bool)<br/>_7 = _28<br/>StorageDead(_28)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb15__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_27)<br/>_27 = _25<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb16__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>StorageDead(_18)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_8)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(move _7)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_1908 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1908 -> bb1__0_1908 [label="return"];
    bb1__0_1908 -> bb6__0_1908 [label="0"];
    bb1__0_1908 -> bb2__0_1908 [label="otherwise"];
    bb2__0_1908 -> bb3__0_1908 [label="return"];
    bb3__0_1908 -> bb5__0_1908 [label="0"];
    bb3__0_1908 -> bb4__0_1908 [label="otherwise"];
    bb4__0_1908 -> bb8__0_1908 [label="return"];
    bb5__0_1908 -> bb7__0_1908 [label=""];
    bb6__0_1908 -> bb7__0_1908 [label=""];
    bb7__0_1908 -> bb18__0_1908 [label=""];
    bb8__0_1908 -> bb10__0_1908 [label="0"];
    bb8__0_1908 -> bb9__0_1908 [label="otherwise"];
    bb9__0_1908 -> bb17__0_1908 [label=""];
    bb10__0_1908 -> bb11__0_1908 [label="return"];
    bb11__0_1908 -> bb12__0_1908 [label="return"];
    bb12__0_1908 -> bb13__0_1908 [label="0"];
    bb12__0_1908 -> bb15__0_1908 [label="1"];
    bb12__0_1908 -> bb14__0_1908 [label="otherwise"];
    bb13__0_1908 -> bb17__0_1908 [label=""];
    bb15__0_1908 -> bb16__0_1908 [label="return"];
    bb16__0_1908 -> bb19__0_1908 [label=""];
    bb17__0_1908 -> bb18__0_1908 [label=""];
    bb18__0_1908 -> bb19__0_1908 [label=""];
}
