// MIR for `validate_margin` after PreCodegen

fn validate_margin(_1: u32, _2: u32, _3: u32, _4: u32, _5: u32, _6: u32) -> std::result::Result<(), error::ErrorCode> {
    debug margin_ratio_initial => _1;
    debug margin_ratio_maintenance => _2;
    debug high_leverage_margin_ratio_initial => _3;
    debug high_leverage_margin_ratio_maintenance => _4;
    debug liquidation_fee => _5;
    debug max_spread => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: ();
    let mut _8: bool;
    let mut _9: &std::ops::RangeInclusive<u32>;
    let _10: std::ops::RangeInclusive<u32>;
    let mut _11: &u32;
    let _12: &u32;
    let mut _13: !;
    let mut _14: error::ErrorCode;
    let _15: ();
    let mut _16: bool;
    let mut _17: &std::ops::RangeInclusive<u32>;
    let _18: std::ops::RangeInclusive<u32>;
    let mut _19: &u32;
    let _20: &u32;
    let mut _21: !;
    let mut _22: error::ErrorCode;
    let _23: ();
    let mut _24: bool;
    let mut _25: u32;
    let mut _26: bool;
    let mut _27: u32;
    let _28: ();
    let mut _29: bool;
    let mut _30: u32;
    let mut _31: u32;
    let mut _32: !;
    let mut _33: error::ErrorCode;
    let _34: ();
    let mut _35: bool;
    let mut _36: u32;
    let mut _37: u32;
    let mut _38: !;
    let mut _39: error::ErrorCode;
    let _40: ();
    let mut _41: bool;
    let mut _42: u32;
    let mut _43: u32;
    let mut _44: !;
    let mut _45: error::ErrorCode;
    let _46: ();
    let mut _47: bool;
    let mut _48: &std::ops::RangeInclusive<u32>;
    let _49: std::ops::RangeInclusive<u32>;
    let mut _50: &u32;
    let _51: &u32;
    let mut _52: !;
    let mut _53: error::ErrorCode;
    let mut _54: bool;
    let mut _55: &std::ops::RangeInclusive<u32>;
    let _56: std::ops::RangeInclusive<u32>;
    let mut _57: &u32;
    let _58: &u32;
    let mut _59: !;
    let mut _60: error::ErrorCode;
    let mut _61: bool;
    let mut _62: u32;
    let mut _63: bool;
    let mut _64: u32;
    let mut _65: !;
    let mut _66: error::ErrorCode;
    let _67: ();
    let mut _68: bool;
    let mut _69: u32;
    let mut _70: u32;
    let mut _71: !;
    let mut _72: error::ErrorCode;
    let _73: ();
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _75: std::result::Result<(), error::ErrorCode>;
    let mut _76: bool;
    let mut _77: u32;
    let mut _78: u32;
    let mut _79: (u32, bool);
    let mut _80: u32;
    let mut _81: ();
    let _82: error::ErrorCode;
    let _83: ();
    let mut _84: &str;
    let _85: &str;
    let mut _86: &std::string::String;
    let _87: &std::string::String;
    let _88: std::string::String;
    let mut _90: std::fmt::Arguments<'_>;
    let mut _91: &[&str];
    let mut _92: &[&str; 2];
    let _93: &[&str; 2];
    let _94: [&str; 2];
    let mut _95: &[core::fmt::rt::Argument<'_>];
    let mut _96: &[core::fmt::rt::Argument<'_>; 1];
    let _97: &[core::fmt::rt::Argument<'_>; 1];
    let _98: [core::fmt::rt::Argument<'_>; 1];
    let mut _99: core::fmt::rt::Argument<'_>;
    let mut _100: &error::ErrorCode;
    let _101: &error::ErrorCode;
    let _102: ();
    let mut _103: &str;
    let _104: &str;
    let mut _105: error::ErrorCode;
    let mut _106: isize;
    let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _110: ();
    let _111: ();
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _113: std::result::Result<(), error::ErrorCode>;
    let mut _114: bool;
    let mut _115: u32;
    let mut _116: u32;
    let mut _117: (u32, bool);
    let mut _118: u32;
    let mut _119: ();
    let _120: error::ErrorCode;
    let _121: ();
    let mut _122: &str;
    let _123: &str;
    let mut _124: &std::string::String;
    let _125: &std::string::String;
    let _126: std::string::String;
    let mut _128: std::fmt::Arguments<'_>;
    let mut _129: &[&str];
    let mut _130: &[&str; 2];
    let _131: &[&str; 2];
    let _132: [&str; 2];
    let mut _133: &[core::fmt::rt::Argument<'_>];
    let mut _134: &[core::fmt::rt::Argument<'_>; 1];
    let _135: &[core::fmt::rt::Argument<'_>; 1];
    let _136: [core::fmt::rt::Argument<'_>; 1];
    let mut _137: core::fmt::rt::Argument<'_>;
    let mut _138: &error::ErrorCode;
    let _139: &error::ErrorCode;
    let _140: ();
    let mut _141: &str;
    let _142: &str;
    let mut _143: &std::string::String;
    let _144: &std::string::String;
    let _145: std::string::String;
    let mut _147: std::fmt::Arguments<'_>;
    let mut _148: &[&str];
    let mut _149: &[&str; 3];
    let _150: &[&str; 3];
    let _151: [&str; 3];
    let mut _152: &[core::fmt::rt::Argument<'_>];
    let mut _153: &[core::fmt::rt::Argument<'_>; 2];
    let _154: &[core::fmt::rt::Argument<'_>; 2];
    let _155: [core::fmt::rt::Argument<'_>; 2];
    let mut _156: core::fmt::rt::Argument<'_>;
    let mut _157: &u32;
    let _158: &u32;
    let _159: u32;
    let mut _160: u32;
    let mut _161: (u32, bool);
    let mut _162: core::fmt::rt::Argument<'_>;
    let mut _163: &u32;
    let _164: &u32;
    let mut _165: error::ErrorCode;
    let mut _166: isize;
    let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _170: ();
    let mut _171: ();
    let mut _175: &std::ops::RangeInclusive<u32>;
    let mut _176: &std::ops::RangeInclusive<u32>;
    let mut _177: &std::ops::RangeInclusive<u32>;
    let mut _178: &std::ops::RangeInclusive<u32>;
    scope 1 {
        debug error_code => _82;
        let _89: std::string::String;
        let mut _174: &[&str; 2];
        scope 2 {
            debug res => _89;
        }
    }
    scope 3 {
        debug residual => _107;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _110;
        scope 6 {
        }
    }
    scope 7 {
        debug error_code => _120;
        let _127: std::string::String;
        let _146: std::string::String;
        let mut _172: &[&str; 3];
        let mut _173: &[&str; 2];
        scope 8 {
            debug res => _127;
        }
        scope 9 {
            debug res => _146;
        }
    }
    scope 10 {
        debug residual => _167;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _170;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _178 = const _;
        _9 = &(*_178);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_1;
        _11 = &(*_12);
        _8 = RangeInclusive::<u32>::contains::<u32>(move _9, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_12);
        _7 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _177 = const _;
        _17 = &(*_177);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_2;
        _19 = &(*_20);
        _16 = RangeInclusive::<u32>::contains::<u32>(move _17, move _19) -> [return: bb4, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_12);
        StorageLive(_14);
        _14 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _14);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb70;
    }

    bb4: {
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_20);
        _15 = const ();
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _3;
        _24 = Ne(move _25, const 0_u32);
        switchInt(move _24) -> [0: bb8, otherwise: bb7];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_20);
        StorageLive(_22);
        _22 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _22);
        StorageDead(_22);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb70;
    }

    bb7: {
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _4;
        _26 = Ne(move _27, const 0_u32);
        switchInt(move _26) -> [0: bb22, otherwise: bb9];
    }

    bb8: {
        StorageDead(_25);
        goto -> bb23;
    }

    bb9: {
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _1;
        StorageLive(_31);
        _31 = _3;
        _29 = Le(move _30, move _31);
        switchInt(move _29) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_33);
        _33 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _33);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb69;
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_30);
        _28 = const ();
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _2;
        StorageLive(_37);
        _37 = _4;
        _35 = Le(move _36, move _37);
        switchInt(move _35) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_39);
        _39 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _39);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb69;
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = const ();
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _3;
        StorageLive(_43);
        _43 = _4;
        _41 = Le(move _42, move _43);
        switchInt(move _41) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_45);
        _45 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _45);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb69;
    }

    bb15: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = const ();
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _176 = const _;
        _48 = &(*_176);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_3;
        _50 = &(*_51);
        _47 = RangeInclusive::<u32>::contains::<u32>(move _48, move _50) -> [return: bb16, unwind continue];
    }

    bb16: {
        switchInt(move _47) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_51);
        _46 = const ();
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_54);
        StorageLive(_55);
        _175 = const _;
        _55 = &(*_175);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_4;
        _57 = &(*_58);
        _54 = RangeInclusive::<u32>::contains::<u32>(move _55, move _57) -> [return: bb19, unwind continue];
    }

    bb18: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_51);
        StorageLive(_53);
        _53 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _53);
        StorageDead(_53);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb69;
    }

    bb19: {
        switchInt(move _54) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_58);
        _23 = const ();
        StorageDead(_54);
        goto -> bb28;
    }

    bb21: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_58);
        StorageLive(_60);
        _60 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _60);
        StorageDead(_60);
        StorageDead(_54);
        goto -> bb69;
    }

    bb22: {
        StorageDead(_27);
        goto -> bb23;
    }

    bb23: {
        StorageLive(_61);
        StorageLive(_62);
        _62 = _3;
        _61 = Ne(move _62, const 0_u32);
        switchInt(move _61) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        StorageDead(_62);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _4;
        _63 = Ne(move _64, const 0_u32);
        switchInt(move _63) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_64);
        StorageLive(_66);
        _66 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _66);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb69;
    }

    bb27: {
        StorageDead(_64);
        _23 = const ();
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _1;
        StorageLive(_70);
        _70 = _2;
        _68 = Le(move _69, move _70);
        switchInt(move _68) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_72);
        _72 = error::ErrorCode::InvalidMarginRatio;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _72);
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb70;
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_69);
        _67 = const ();
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _2;
        _79 = CheckedMul(_78, const _);
        assert(!move (_79.1: bool), "attempt to compute `{} * {}`, which would overflow", move _78, const _) -> [success: bb31, unwind continue];
    }

    bb31: {
        _77 = move (_79.0: u32);
        StorageDead(_78);
        StorageLive(_80);
        _80 = _5;
        _76 = Gt(move _77, move _80);
        switchInt(move _76) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        StorageDead(_80);
        StorageDead(_77);
        StorageLive(_81);
        _81 = ();
        _75 = std::result::Result::<(), error::ErrorCode>::Ok(move _81);
        StorageDead(_81);
        goto -> bb41;
    }

    bb33: {
        StorageDead(_80);
        StorageDead(_77);
        StorageLive(_82);
        _82 = error::ErrorCode::InvalidMarginRatio;
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _174 = const _;
        _93 = &(*_174);
        _92 = &(*_93);
        _91 = move _92 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_92);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = &_82;
        _100 = &(*_101);
        _99 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _100) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_100);
        _98 = [move _99];
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = move _96 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_96);
        _90 = Arguments::<'_>::new_v1(move _91, move _95) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_95);
        StorageDead(_91);
        _89 = format(move _90) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_90);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_93);
        _88 = move _89;
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = <String as Deref>::deref(move _86) -> [return: bb37, unwind: bb73];
    }

    bb37: {
        _84 = &(*_85);
        StorageDead(_86);
        _83 = solana_program::log::sol_log(move _84) -> [return: bb38, unwind: bb73];
    }

    bb38: {
        StorageDead(_84);
        drop(_88) -> [return: bb39, unwind: bb74];
    }

    bb39: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = const "margin_ratio_maintenance must be greater than liquidation fee";
        _103 = &(*_104);
        _102 = solana_program::log::sol_log(move _103) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_103);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_105);
        _105 = _82;
        _75 = std::result::Result::<(), error::ErrorCode>::Err(move _105);
        StorageDead(_105);
        StorageDead(_82);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_76);
        _74 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _75) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_75);
        _106 = discriminant(_74);
        switchInt(move _106) -> [0: bb43, 1: bb45, otherwise: bb44];
    }

    bb43: {
        StorageLive(_110);
        _110 = ((_74 as Continue).0: ());
        _73 = _110;
        StorageDead(_110);
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = _1;
        _117 = CheckedMul(_116, const 100_u32);
        assert(!move (_117.1: bool), "attempt to compute `{} * {}`, which would overflow", move _116, const 100_u32) -> [success: bb47, unwind continue];
    }

    bb44: {
        unreachable;
    }

    bb45: {
        StorageLive(_107);
        _107 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb70;
    }

    bb47: {
        _115 = move (_117.0: u32);
        StorageDead(_116);
        StorageLive(_118);
        _118 = _6;
        _114 = Gt(move _115, move _118);
        switchInt(move _114) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        StorageDead(_118);
        StorageDead(_115);
        StorageLive(_119);
        _119 = ();
        _113 = std::result::Result::<(), error::ErrorCode>::Ok(move _119);
        StorageDead(_119);
        goto -> bb64;
    }

    bb49: {
        StorageDead(_118);
        StorageDead(_115);
        StorageLive(_120);
        _120 = error::ErrorCode::InvalidMarginRatio;
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _173 = const _;
        _131 = &(*_173);
        _130 = &(*_131);
        _129 = move _130 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_130);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_120;
        _138 = &(*_139);
        _137 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _138) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_138);
        _136 = [move _137];
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = move _134 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_134);
        _128 = Arguments::<'_>::new_v1(move _129, move _133) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_133);
        StorageDead(_129);
        _127 = format(move _128) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_128);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_131);
        _126 = move _127;
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = <String as Deref>::deref(move _124) -> [return: bb53, unwind: bb72];
    }

    bb53: {
        _122 = &(*_123);
        StorageDead(_124);
        _121 = solana_program::log::sol_log(move _122) -> [return: bb54, unwind: bb72];
    }

    bb54: {
        StorageDead(_122);
        drop(_126) -> [return: bb55, unwind: bb74];
    }

    bb55: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _172 = const _;
        _150 = &(*_172);
        _149 = &(*_150);
        _148 = move _149 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_149);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = _1;
        _161 = CheckedMul(_160, const 100_u32);
        assert(!move (_161.1: bool), "attempt to compute `{} * {}`, which would overflow", move _160, const 100_u32) -> [success: bb56, unwind continue];
    }

    bb56: {
        _159 = move (_161.0: u32);
        StorageDead(_160);
        _158 = &_159;
        _157 = &(*_158);
        _156 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _157) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_157);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &_6;
        _163 = &(*_164);
        _162 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _163) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_163);
        _155 = [move _156, move _162];
        StorageDead(_162);
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = move _153 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_153);
        _147 = Arguments::<'_>::new_v1(move _148, move _152) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_152);
        StorageDead(_148);
        _146 = format(move _147) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_147);
        StorageDead(_164);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_150);
        _145 = move _146;
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = <String as Deref>::deref(move _143) -> [return: bb61, unwind: bb71];
    }

    bb61: {
        _141 = &(*_142);
        StorageDead(_143);
        _140 = solana_program::log::sol_log(move _141) -> [return: bb62, unwind: bb71];
    }

    bb62: {
        StorageDead(_141);
        drop(_145) -> [return: bb63, unwind: bb74];
    }

    bb63: {
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageLive(_165);
        _165 = _120;
        _113 = std::result::Result::<(), error::ErrorCode>::Err(move _165);
        StorageDead(_165);
        StorageDead(_120);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_114);
        _112 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _113) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_113);
        _166 = discriminant(_112);
        switchInt(move _166) -> [0: bb66, 1: bb67, otherwise: bb44];
    }

    bb66: {
        StorageLive(_170);
        _170 = ((_112 as Continue).0: ());
        _111 = _170;
        StorageDead(_170);
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_171);
        _171 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _171);
        StorageDead(_171);
        goto -> bb70;
    }

    bb67: {
        StorageLive(_167);
        _167 = ((_112 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_112);
        StorageDead(_111);
        goto -> bb70;
    }

    bb69: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb70;
    }

    bb70: {
        return;
    }

    bb71 (cleanup): {
        drop(_145) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_126) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_88) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        resume;
    }
}
