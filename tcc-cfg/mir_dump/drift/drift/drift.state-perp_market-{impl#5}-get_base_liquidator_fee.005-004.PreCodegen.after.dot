digraph Mir_0_3800 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarket::get_base_liquidator_fee(_1: &amp;ReErased state::perp_market::PerpMarket, _2: bool) -&gt; u32<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _6: u32;<br align="left"/>let mut _7: u32;<br align="left"/>let mut _8: u16;<br align="left"/>let mut _9: u32;<br align="left"/>let mut _10: u32;<br align="left"/>let mut _11: u32;<br align="left"/>let mut _12: u32;<br align="left"/>let mut _13: u32;<br align="left"/>let mut _14: bool;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug user_high_leverage_mode =&gt; _2;<br align="left"/>debug margin_ratio =&gt; _6;<br align="left"/>>;
    bb0__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_3 = _2<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = &amp;(*_1)<br/></td></tr><tr><td align="left">_4 = PerpMarket::is_high_leverage_mode_enabled(move _5)</td></tr></table>>];
    bb2__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb3__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = ((*_1).33: u16)<br/>_7 = move _8 as u32 (IntToInt)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = core::num::&lt;impl u32&gt;::saturating_mul(move _7, const _)</td></tr></table>>];
    bb4__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageLive(_9)<br/>_9 = ((*_1).13: u32)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _6<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _6<br/>_14 = Eq(const 5_u32, const 0_u32)<br/></td></tr><tr><td align="left">assert(!move _14, &quot;attempt to divide `{}` by zero&quot;, _13)</td></tr></table>>];
    bb5__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_12 = Div(move _13, const 5_u32)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">_10 = core::num::&lt;impl u32&gt;::saturating_sub(move _11, move _12)</td></tr></table>>];
    bb6__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_0 = &lt;u32 as Ord&gt;::min(move _9, move _10)</td></tr></table>>];
    bb7__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_0 = ((*_1).13: u32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_3800 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3800 -> bb9__0_3800 [label="0"];
    bb0__0_3800 -> bb1__0_3800 [label="otherwise"];
    bb1__0_3800 -> bb2__0_3800 [label="return"];
    bb2__0_3800 -> bb8__0_3800 [label="0"];
    bb2__0_3800 -> bb3__0_3800 [label="otherwise"];
    bb3__0_3800 -> bb4__0_3800 [label="return"];
    bb4__0_3800 -> bb5__0_3800 [label="success"];
    bb5__0_3800 -> bb6__0_3800 [label="return"];
    bb6__0_3800 -> bb7__0_3800 [label="return"];
    bb7__0_3800 -> bb10__0_3800 [label=""];
    bb8__0_3800 -> bb9__0_3800 [label=""];
    bb9__0_3800 -> bb10__0_3800 [label=""];
}
