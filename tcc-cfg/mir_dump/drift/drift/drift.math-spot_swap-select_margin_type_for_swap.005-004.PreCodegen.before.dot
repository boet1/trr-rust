digraph Mir_0_2820 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn select_margin_type_for_swap(_1: &amp;ReErased state::spot_market::SpotMarket, _2: &amp;ReErased state::spot_market::SpotMarket, _3: &amp;ReErased state::oracle::StrictOraclePrice, _4: &amp;ReErased state::oracle::StrictOraclePrice, _5: i128, _6: i128, _7: i128, _8: i128, _9: math::margin::MarginRequirementType) -&gt; std::result::Result&lt;(math::margin::MarginRequirementType, bool), error::ErrorCode&gt;<br align="left"/>let _10: Closure(DefId(0:2821 ~ drift[d311]::math::spot_swap::select_margin_type_for_swap::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::spot_market::SpotMarket, &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon }) state::oracle::StrictOraclePrice, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, [Region(BrAnon), Region(BrAnon)]), ()]);<br align="left"/>let _11: i128;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _13: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _14: &amp;ReErased Closure(DefId(0:2821 ~ drift[d311]::math::spot_swap::select_margin_type_for_swap::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::spot_market::SpotMarket, &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon }) state::oracle::StrictOraclePrice, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, [Region(BrAnon), Region(BrAnon)]), ()]);<br align="left"/>let mut _15: (&amp;ReErased state::spot_market::SpotMarket, &amp;ReErased state::oracle::StrictOraclePrice, i128);<br align="left"/>let mut _16: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _17: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _18: i128;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _23: i128;<br align="left"/>let _24: i128;<br align="left"/>let mut _25: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _26: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _27: &amp;ReErased Closure(DefId(0:2821 ~ drift[d311]::math::spot_swap::select_margin_type_for_swap::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::spot_market::SpotMarket, &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon }) state::oracle::StrictOraclePrice, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, [Region(BrAnon), Region(BrAnon)]), ()]);<br align="left"/>let mut _28: (&amp;ReErased state::spot_market::SpotMarket, &amp;ReErased state::oracle::StrictOraclePrice, i128);<br align="left"/>let mut _29: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _30: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _31: i128;<br align="left"/>let mut _32: isize;<br align="left"/>let _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _34: !;<br align="left"/>let mut _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _36: i128;<br align="left"/>let _37: i128;<br align="left"/>let mut _38: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _39: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _40: i128;<br align="left"/>let mut _41: i128;<br align="left"/>let mut _42: isize;<br align="left"/>let _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _44: !;<br align="left"/>let mut _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _46: i128;<br align="left"/>let _47: i128;<br align="left"/>let mut _48: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _49: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _50: &amp;ReErased Closure(DefId(0:2821 ~ drift[d311]::math::spot_swap::select_margin_type_for_swap::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::spot_market::SpotMarket, &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon }) state::oracle::StrictOraclePrice, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, [Region(BrAnon), Region(BrAnon)]), ()]);<br align="left"/>let mut _51: (&amp;ReErased state::spot_market::SpotMarket, &amp;ReErased state::oracle::StrictOraclePrice, i128);<br align="left"/>let mut _52: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _53: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _54: i128;<br align="left"/>let mut _55: isize;<br align="left"/>let _56: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _57: !;<br align="left"/>let mut _58: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _59: i128;<br align="left"/>let _60: i128;<br align="left"/>let mut _61: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _62: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _63: &amp;ReErased Closure(DefId(0:2821 ~ drift[d311]::math::spot_swap::select_margin_type_for_swap::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::spot_market::SpotMarket, &amp;ReBound(DebruijnIndex(0), BoundRegion { var: 1, kind: BrAnon }) state::oracle::StrictOraclePrice, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, [Region(BrAnon), Region(BrAnon)]), ()]);<br align="left"/>let mut _64: (&amp;ReErased state::spot_market::SpotMarket, &amp;ReErased state::oracle::StrictOraclePrice, i128);<br align="left"/>let mut _65: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _66: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _67: i128;<br align="left"/>let mut _68: isize;<br align="left"/>let _69: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _70: !;<br align="left"/>let mut _71: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _72: i128;<br align="left"/>let _73: i128;<br align="left"/>let mut _74: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _75: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _76: i128;<br align="left"/>let mut _77: i128;<br align="left"/>let mut _78: isize;<br align="left"/>let _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _80: !;<br align="left"/>let mut _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _82: i128;<br align="left"/>let _83: (math::margin::MarginRequirementType, bool);<br align="left"/>let mut _84: bool;<br align="left"/>let mut _85: i128;<br align="left"/>let mut _86: i128;<br align="left"/>let mut _87: math::margin::MarginRequirementType;<br align="left"/>let mut _88: math::margin::MarginRequirementType;<br align="left"/>let mut _89: (math::margin::MarginRequirementType, bool);<br align="left"/>debug in_market =&gt; _1;<br align="left"/>debug out_market =&gt; _2;<br align="left"/>debug in_strict_price =&gt; _3;<br align="left"/>debug out_strict_price =&gt; _4;<br align="left"/>debug in_token_amount_before =&gt; _5;<br align="left"/>debug out_token_amount_before =&gt; _6;<br align="left"/>debug in_token_amount_after =&gt; _7;<br align="left"/>debug out_token_amount_after =&gt; _8;<br align="left"/>debug strict_margin_type =&gt; _9;<br align="left"/>debug calculate_free_collateral_contribution =&gt; _10;<br align="left"/>debug in_free_collateral_contribution_before =&gt; _11;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>debug out_free_collateral_contribution_before =&gt; _24;<br align="left"/>debug residual =&gt; _33;<br align="left"/>debug val =&gt; _36;<br align="left"/>debug free_collateral_contribution_before =&gt; _37;<br align="left"/>debug residual =&gt; _43;<br align="left"/>debug val =&gt; _46;<br align="left"/>debug in_free_collateral_contribution_after =&gt; _47;<br align="left"/>debug residual =&gt; _56;<br align="left"/>debug val =&gt; _59;<br align="left"/>debug out_free_collateral_contribution_after =&gt; _60;<br align="left"/>debug residual =&gt; _69;<br align="left"/>debug val =&gt; _72;<br align="left"/>debug free_collateral_contribution_after =&gt; _73;<br align="left"/>debug residual =&gt; _79;<br align="left"/>debug val =&gt; _82;<br align="left"/>debug margin_type =&gt; _83;<br align="left"/>>;
    bb0__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = {closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91}<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;_10<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;(*_1)<br/>StorageLive(_17)<br/>_17 = &amp;(*_3)<br/>StorageLive(_18)<br/>_18 = _5<br/>_15 = (move _16, move _17, move _18)<br/></td></tr><tr><td align="left">_13 = &lt;{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91} as Fn&lt;(&amp;SpotMarket, &amp;StrictOraclePrice, i128)&gt;&gt;::call(move _14, move _15)</td></tr></table>>];
    bb1__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb2__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_19 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb3__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_12 as Continue).0: i128)<br/>_11 = _23<br/>StorageDead(_23)<br/>StorageDead(_12)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = &amp;_10<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = &amp;(*_2)<br/>StorageLive(_30)<br/>_30 = &amp;(*_4)<br/>StorageLive(_31)<br/>_31 = _6<br/>_28 = (move _29, move _30, move _31)<br/></td></tr><tr><td align="left">_26 = &lt;{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91} as Fn&lt;(&amp;SpotMarket, &amp;StrictOraclePrice, i128)&gt;&gt;::call(move _27, move _28)</td></tr></table>>];
    bb4__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_22)<br/>_22 = _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(math::margin::MarginRequirementType, bool), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb6__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">_25 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _26)</td></tr></table>>];
    bb8__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_32 = discriminant(_25)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb9__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_25 as Continue).0: i128)<br/>_24 = _36<br/>StorageDead(_36)<br/>StorageDead(_25)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = _11<br/>StorageLive(_41)<br/>_41 = _24<br/></td></tr><tr><td align="left">_39 = &lt;i128 as SafeMath&gt;::safe_add(move _40, move _41)</td></tr></table>>];
    bb10__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = ((_25 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_35)<br/>_35 = _33<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(math::margin::MarginRequirementType, bool), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _35)</td></tr></table>>];
    bb11__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_33)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">_38 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _39)</td></tr></table>>];
    bb13__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_42 = discriminant(_38)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb14__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_38 as Continue).0: i128)<br/>_37 = _46<br/>StorageDead(_46)<br/>StorageDead(_38)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = &amp;_10<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_52 = &amp;(*_1)<br/>StorageLive(_53)<br/>_53 = &amp;(*_3)<br/>StorageLive(_54)<br/>_54 = _7<br/>_51 = (move _52, move _53, move _54)<br/></td></tr><tr><td align="left">_49 = &lt;{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91} as Fn&lt;(&amp;SpotMarket, &amp;StrictOraclePrice, i128)&gt;&gt;::call(move _50, move _51)</td></tr></table>>];
    bb15__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_38 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_45)<br/>_45 = _43<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(math::margin::MarginRequirementType, bool), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _45)</td></tr></table>>];
    bb16__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_43)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_53)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">_48 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _49)</td></tr></table>>];
    bb18__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>_55 = discriminant(_48)<br/></td></tr><tr><td align="left">switchInt(move _55)</td></tr></table>>];
    bb19__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = ((_48 as Continue).0: i128)<br/>_47 = _59<br/>StorageDead(_59)<br/>StorageDead(_48)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = &amp;_10<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>_65 = &amp;(*_2)<br/>StorageLive(_66)<br/>_66 = &amp;(*_4)<br/>StorageLive(_67)<br/>_67 = _8<br/>_64 = (move _65, move _66, move _67)<br/></td></tr><tr><td align="left">_62 = &lt;{closure@programs/drift/src/math/spot_swap.rs:39:9: 39:91} as Fn&lt;(&amp;SpotMarket, &amp;StrictOraclePrice, i128)&gt;&gt;::call(move _63, move _64)</td></tr></table>>];
    bb20__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_48 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_58)<br/>_58 = _56<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(math::margin::MarginRequirementType, bool), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _58)</td></tr></table>>];
    bb21__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_56)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>StorageDead(_64)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">_61 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _62)</td></tr></table>>];
    bb23__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>_68 = discriminant(_61)<br/></td></tr><tr><td align="left">switchInt(move _68)</td></tr></table>>];
    bb24__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_72)<br/>_72 = ((_61 as Continue).0: i128)<br/>_60 = _72<br/>StorageDead(_72)<br/>StorageDead(_61)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>_76 = _47<br/>StorageLive(_77)<br/>_77 = _60<br/></td></tr><tr><td align="left">_75 = &lt;i128 as SafeMath&gt;::safe_add(move _76, move _77)</td></tr></table>>];
    bb25__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_69)<br/>_69 = ((_61 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_71)<br/>_71 = _69<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(math::margin::MarginRequirementType, bool), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _71)</td></tr></table>>];
    bb26__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageDead(_69)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">_74 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _75)</td></tr></table>>];
    bb28__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>_78 = discriminant(_74)<br/></td></tr><tr><td align="left">switchInt(move _78)</td></tr></table>>];
    bb29__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = ((_74 as Continue).0: i128)<br/>_73 = _82<br/>StorageDead(_82)<br/>StorageDead(_74)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>_85 = _73<br/>StorageLive(_86)<br/>_86 = _37<br/>_84 = Gt(move _85, move _86)<br/></td></tr><tr><td align="left">switchInt(move _84)</td></tr></table>>];
    bb30__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_74 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_81)<br/>_81 = _79<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(math::margin::MarginRequirementType, bool), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _81)</td></tr></table>>];
    bb31__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_79)<br/>StorageDead(_74)<br/>StorageDead(_73)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_85)<br/>StorageLive(_87)<br/>_87 = math::margin::MarginRequirementType::Maintenance<br/>_83 = (move _87, const false)<br/>StorageDead(_87)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_85)<br/>StorageLive(_88)<br/>_88 = _9<br/>_83 = (move _88, const true)<br/>StorageDead(_88)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageLive(_89)<br/>_89 = _83<br/>_0 = std::result::Result::&lt;(math::margin::MarginRequirementType, bool), error::ErrorCode&gt;::Ok(move _89)<br/>StorageDead(_89)<br/>StorageDead(_83)<br/>StorageDead(_73)<br/>StorageDead(_60)<br/>StorageDead(_47)<br/>StorageDead(_37)<br/>StorageDead(_24)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_2820 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2820 -> bb1__0_2820 [label="return"];
    bb1__0_2820 -> bb2__0_2820 [label="return"];
    bb2__0_2820 -> bb3__0_2820 [label="0"];
    bb2__0_2820 -> bb5__0_2820 [label="1"];
    bb2__0_2820 -> bb4__0_2820 [label="otherwise"];
    bb3__0_2820 -> bb7__0_2820 [label="return"];
    bb5__0_2820 -> bb6__0_2820 [label="return"];
    bb6__0_2820 -> bb39__0_2820 [label=""];
    bb7__0_2820 -> bb8__0_2820 [label="return"];
    bb8__0_2820 -> bb9__0_2820 [label="0"];
    bb8__0_2820 -> bb10__0_2820 [label="1"];
    bb8__0_2820 -> bb4__0_2820 [label="otherwise"];
    bb9__0_2820 -> bb12__0_2820 [label="return"];
    bb10__0_2820 -> bb11__0_2820 [label="return"];
    bb11__0_2820 -> bb38__0_2820 [label=""];
    bb12__0_2820 -> bb13__0_2820 [label="return"];
    bb13__0_2820 -> bb14__0_2820 [label="0"];
    bb13__0_2820 -> bb15__0_2820 [label="1"];
    bb13__0_2820 -> bb4__0_2820 [label="otherwise"];
    bb14__0_2820 -> bb17__0_2820 [label="return"];
    bb15__0_2820 -> bb16__0_2820 [label="return"];
    bb16__0_2820 -> bb37__0_2820 [label=""];
    bb17__0_2820 -> bb18__0_2820 [label="return"];
    bb18__0_2820 -> bb19__0_2820 [label="0"];
    bb18__0_2820 -> bb20__0_2820 [label="1"];
    bb18__0_2820 -> bb4__0_2820 [label="otherwise"];
    bb19__0_2820 -> bb22__0_2820 [label="return"];
    bb20__0_2820 -> bb21__0_2820 [label="return"];
    bb21__0_2820 -> bb36__0_2820 [label=""];
    bb22__0_2820 -> bb23__0_2820 [label="return"];
    bb23__0_2820 -> bb24__0_2820 [label="0"];
    bb23__0_2820 -> bb25__0_2820 [label="1"];
    bb23__0_2820 -> bb4__0_2820 [label="otherwise"];
    bb24__0_2820 -> bb27__0_2820 [label="return"];
    bb25__0_2820 -> bb26__0_2820 [label="return"];
    bb26__0_2820 -> bb35__0_2820 [label=""];
    bb27__0_2820 -> bb28__0_2820 [label="return"];
    bb28__0_2820 -> bb29__0_2820 [label="0"];
    bb28__0_2820 -> bb30__0_2820 [label="1"];
    bb28__0_2820 -> bb4__0_2820 [label="otherwise"];
    bb29__0_2820 -> bb33__0_2820 [label="0"];
    bb29__0_2820 -> bb32__0_2820 [label="otherwise"];
    bb30__0_2820 -> bb31__0_2820 [label="return"];
    bb31__0_2820 -> bb35__0_2820 [label=""];
    bb32__0_2820 -> bb34__0_2820 [label=""];
    bb33__0_2820 -> bb34__0_2820 [label=""];
    bb34__0_2820 -> bb40__0_2820 [label=""];
    bb35__0_2820 -> bb36__0_2820 [label=""];
    bb36__0_2820 -> bb37__0_2820 [label=""];
    bb37__0_2820 -> bb38__0_2820 [label=""];
    bb38__0_2820 -> bb39__0_2820 [label=""];
    bb39__0_2820 -> bb40__0_2820 [label=""];
}
