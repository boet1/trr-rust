// MIR for `state::events::<impl at programs/drift/src/state/events.rs:462:46: 462:51>::clone` before PreCodegen

fn state::events::<impl at programs/drift/src/state/events.rs:462:46: 462:51>::clone(_1: &LiquidateSpotRecord) -> LiquidateSpotRecord {
    debug self => _1;
    let mut _0: state::events::LiquidateSpotRecord;
    let mut _2: u16;
    let mut _3: &u16;
    let _4: &u16;
    let mut _5: i64;
    let mut _6: &i64;
    let _7: &i64;
    let mut _8: u128;
    let mut _9: &u128;
    let _10: &u128;
    let mut _11: u16;
    let mut _12: &u16;
    let _13: &u16;
    let mut _14: i64;
    let mut _15: &i64;
    let _16: &i64;
    let mut _17: u128;
    let mut _18: &u128;
    let _19: &u128;
    let mut _20: u64;
    let mut _21: &u64;
    let _22: &u64;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: u16);
        _3 = &(*_4);
        _2 = <u16 as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: i64);
        _6 = &(*_7);
        _5 = <i64 as Clone>::clone(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).2: u128);
        _9 = &(*_10);
        _8 = <u128 as Clone>::clone(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &((*_1).3: u16);
        _12 = &(*_13);
        _11 = <u16 as Clone>::clone(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).4: i64);
        _15 = &(*_16);
        _14 = <i64 as Clone>::clone(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).5: u128);
        _18 = &(*_19);
        _17 = <u128 as Clone>::clone(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &((*_1).6: u64);
        _21 = &(*_22);
        _20 = <u64 as Clone>::clone(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        _0 = LiquidateSpotRecord { asset_market_index: move _2, asset_price: move _5, asset_transfer: move _8, liability_market_index: move _11, liability_price: move _14, liability_transfer: move _17, if_fee: move _20 };
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_2);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        return;
    }
}
