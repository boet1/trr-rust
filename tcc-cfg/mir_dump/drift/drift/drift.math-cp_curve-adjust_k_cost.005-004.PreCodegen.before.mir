// MIR for `adjust_k_cost` before PreCodegen

fn adjust_k_cost(_1: &mut PerpMarket, _2: &UpdateKResult) -> std::result::Result<i128, error::ErrorCode> {
    debug market => _1;
    debug update_k_result => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let mut _3: state::perp_market::PerpMarket;
    let mut _5: (u128, i128);
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _7: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _8: i128;
    let mut _9: &state::perp_market::AMM;
    let _10: &state::perp_market::AMM;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &mut state::perp_market::PerpMarket;
    let mut _20: &mut state::perp_market::PerpMarket;
    let mut _21: &math::cp_curve::UpdateKResult;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: (u128, i128);
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _31: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _32: i128;
    let mut _33: u128;
    let mut _34: &state::perp_market::AMM;
    let _35: &state::perp_market::AMM;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: i128;
    scope 1 {
        debug market_clone => _3;
        let _4: u128;
        let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _15: (u128, i128);
        scope 2 {
            debug current_net_market_value => _4;
            let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _26: ();
            let _27: u128;
            let _28: i128;
            let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _40: (u128, i128);
            scope 7 {
                debug residual => _23;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _26;
                scope 10 {
                }
            }
            scope 11 {
                debug _new_net_market_value => _27;
                debug cost => _28;
            }
            scope 12 {
                debug residual => _37;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _40;
                scope 15 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = (*_1);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((_3.1: state::perp_market::AMM).15: i128);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(_3.1: state::perp_market::AMM);
        _9 = &(*_10);
        _7 = calculate_base_asset_value_and_pnl(move _8, const 0_u128, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: (u128, i128));
        _5 = _15;
        StorageDead(_15);
        StorageLive(_4);
        _4 = (_5.0: u128);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &mut _3;
        _19 = &mut (*_20);
        StorageLive(_21);
        _21 = &(*_2);
        _18 = cp_curve::update_k(move _19, move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb18;
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_17 as Continue).0: ());
        _16 = _26;
        StorageDead(_26);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = ((_3.1: state::perp_market::AMM).15: i128);
        StorageLive(_33);
        _33 = _4;
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(_3.1: state::perp_market::AMM);
        _34 = &(*_35);
        _31 = calculate_base_asset_value_and_pnl(move _32, move _33, move _34) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb17;
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _31) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_31);
        _36 = discriminant(_30);
        switchInt(move _36) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_40);
        _40 = ((_30 as Continue).0: (u128, i128));
        _29 = _40;
        StorageDead(_40);
        StorageLive(_27);
        _27 = (_29.0: u128);
        StorageLive(_28);
        _28 = (_29.1: i128);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_41);
        _41 = _28;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _41);
        StorageDead(_41);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb19;
    }

    bb15: {
        StorageLive(_37);
        _37 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_4);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_3);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}
