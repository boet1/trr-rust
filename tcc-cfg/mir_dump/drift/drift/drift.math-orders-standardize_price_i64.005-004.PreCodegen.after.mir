// MIR for `math::orders::standardize_price_i64` after PreCodegen

fn math::orders::standardize_price_i64(_1: i64, _2: i64, _3: controller::position::PositionDirection) -> std::result::Result<i64, error::ErrorCode> {
    debug price => _1;
    debug tick_size => _2;
    debug direction => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i64;
    let mut _7: !;
    let _8: i64;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _10: std::result::Result<i64, error::ErrorCode>;
    let mut _11: std::option::Option<i64>;
    let mut _12: i64;
    let mut _13: i64;
    let mut _14: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: i64;
    let _20: ();
    let mut _21: bool;
    let mut _22: i64;
    let mut _23: !;
    let mut _24: i64;
    let mut _25: isize;
    let mut _26: i64;
    let mut _27: i64;
    let mut _28: i64;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _30: std::result::Result<i64, error::ErrorCode>;
    let mut _31: i64;
    let mut _32: i64;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: i64;
    scope 1 {
        debug remainder => _8;
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: i64;
        scope 6 {
            debug residual => _34;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _37;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = Eq(move _6, const 0_i64);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(const 0_i64);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb23;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _1;
        StorageLive(_13);
        _13 = _2;
        _11 = core::num::<impl i64>::checked_rem_euclid(move _12, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _10 = Option::<i64>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _11, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_19);
        _19 = ((_9 as Continue).0: i64);
        _8 = _19;
        StorageDead(_19);
        StorageDead(_9);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _8;
        _21 = Eq(move _22, const 0_i64);
        switchInt(move _21) -> [0: bb11, otherwise: bb10];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_9);
        goto -> bb22;
    }

    bb10: {
        StorageDead(_22);
        StorageLive(_24);
        _24 = _1;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _24);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb22;
    }

    bb11: {
        StorageDead(_22);
        _20 = const ();
        StorageDead(_21);
        StorageDead(_20);
        _25 = discriminant(_3);
        switchInt(move _25) -> [0: bb13, 1: bb12, otherwise: bb7];
    }

    bb12: {
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _1;
        StorageLive(_32);
        _32 = _2;
        _30 = <i64 as SafeMath>::safe_add(move _31, move _32) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_26);
        _26 = _1;
        StorageLive(_27);
        _27 = _8;
        _0 = <i64 as SafeMath>::safe_sub(move _26, move _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb21;
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _30) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_30);
        _33 = discriminant(_29);
        switchInt(move _33) -> [0: bb17, 1: bb18, otherwise: bb7];
    }

    bb17: {
        StorageLive(_37);
        _37 = ((_29 as Continue).0: i64);
        _28 = _37;
        StorageDead(_37);
        StorageLive(_38);
        _38 = _8;
        _0 = <i64 as SafeMath>::safe_sub(move _28, move _38) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_34);
        _34 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb22;
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_8);
        goto -> bb23;
    }

    bb22: {
        StorageDead(_8);
        goto -> bb23;
    }

    bb23: {
        return;
    }
}
