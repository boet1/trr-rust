digraph Mir_0_3643 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn order_params::OrderParams::get_perp_baseline_start_price_offset(_1: &amp;ReErased state::perp_market::PerpMarket, _2: controller::position::PositionDirection) -&gt; std::result::Result&lt;i64, error::ErrorCode&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: i64;<br align="left"/>let mut _6: i64;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _8: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _9: i64;<br align="left"/>let mut _10: i64;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: i64;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: !;<br align="left"/>let _19: i64;<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let mut _22: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let _23: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>let _24: state::perp_market::ContractTier;<br align="left"/>let mut _25: i64;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: i64;<br align="left"/>let mut _28: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _29: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _30: u64;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: i64;<br align="left"/>let mut _36: i64;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: bool;<br align="left"/>let mut _39: bool;<br align="left"/>let mut _40: bool;<br align="left"/>let mut _41: i64;<br align="left"/>let mut _42: i64;<br align="left"/>let mut _43: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _44: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _45: u64;<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _50: i64;<br align="left"/>let mut _51: i64;<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: bool;<br align="left"/>let mut _56: bool;<br align="left"/>let _57: i64;<br align="left"/>let mut _58: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _59: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _60: u64;<br align="left"/>let mut _61: isize;<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _66: i64;<br align="left"/>let _67: i64;<br align="left"/>let mut _68: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _69: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _70: i64;<br align="left"/>let mut _71: i64;<br align="left"/>let mut _72: isize;<br align="left"/>let _73: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _74: !;<br align="left"/>let mut _75: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _76: i64;<br align="left"/>let _77: i64;<br align="left"/>let mut _78: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _79: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _80: i64;<br align="left"/>let mut _81: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _82: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _83: u64;<br align="left"/>let mut _84: isize;<br align="left"/>let _85: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _86: !;<br align="left"/>let mut _87: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _88: i64;<br align="left"/>let mut _89: i64;<br align="left"/>let mut _90: isize;<br align="left"/>let _91: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _92: !;<br align="left"/>let mut _93: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _94: i64;<br align="left"/>let _95: i64;<br align="left"/>let mut _96: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _97: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _98: i64;<br align="left"/>let mut _99: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _100: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _101: i64;<br align="left"/>let mut _102: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _103: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _104: u32;<br align="left"/>let mut _105: isize;<br align="left"/>let _106: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _107: !;<br align="left"/>let mut _108: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _109: i64;<br align="left"/>let mut _110: i64;<br align="left"/>let mut _111: isize;<br align="left"/>let _112: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _113: !;<br align="left"/>let mut _114: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _115: i64;<br align="left"/>let mut _116: i64;<br align="left"/>let mut _117: (i64, bool);<br align="left"/>let mut _118: isize;<br align="left"/>let _119: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _120: !;<br align="left"/>let mut _121: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _122: i64;<br align="left"/>let _123: i64;<br align="left"/>let mut _124: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _125: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _126: i64;<br align="left"/>let mut _127: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _128: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _129: i64;<br align="left"/>let mut _130: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _131: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _132: u32;<br align="left"/>let mut _133: isize;<br align="left"/>let _134: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _135: !;<br align="left"/>let mut _136: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _137: i64;<br align="left"/>let mut _138: i64;<br align="left"/>let mut _139: isize;<br align="left"/>let _140: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _141: !;<br align="left"/>let mut _142: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _143: i64;<br align="left"/>let mut _144: i64;<br align="left"/>let mut _145: (i64, bool);<br align="left"/>let mut _146: isize;<br align="left"/>let _147: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _148: !;<br align="left"/>let mut _149: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _150: i64;<br align="left"/>let _151: i64;<br align="left"/>let mut _152: isize;<br align="left"/>let mut _153: i64;<br align="left"/>let mut _154: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _155: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _156: i64;<br align="left"/>let mut _157: i64;<br align="left"/>let mut _158: isize;<br align="left"/>let _159: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _160: !;<br align="left"/>let mut _161: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _162: i64;<br align="left"/>let mut _163: i64;<br align="left"/>let mut _164: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _165: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _166: i64;<br align="left"/>let mut _167: i64;<br align="left"/>let mut _168: isize;<br align="left"/>let _169: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _170: !;<br align="left"/>let mut _171: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _172: i64;<br align="left"/>let mut _173: i64;<br align="left"/>let mut _174: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _175: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _176: i64;<br align="left"/>let mut _177: i64;<br align="left"/>let mut _178: isize;<br align="left"/>let _179: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _180: !;<br align="left"/>let mut _181: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _182: i64;<br align="left"/>let mut _183: i64;<br align="left"/>let mut _184: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _185: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _186: i64;<br align="left"/>let mut _187: i64;<br align="left"/>let mut _188: isize;<br align="left"/>let _189: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _190: !;<br align="left"/>let mut _191: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _192: i64;<br align="left"/>let mut _193: i64;<br align="left"/>let mut _194: &amp;ReErased state::perp_market::ContractTier;<br align="left"/>debug perp_market =&gt; _1;<br align="left"/>debug direction =&gt; _2;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug price_divisor =&gt; _19;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>debug mark_twap_slow =&gt; _57;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug baseline_start_price_offset_slow =&gt; _67;<br align="left"/>debug residual =&gt; _73;<br align="left"/>debug val =&gt; _76;<br align="left"/>debug baseline_start_price_offset_fast =&gt; _77;<br align="left"/>debug residual =&gt; _85;<br align="left"/>debug val =&gt; _88;<br align="left"/>debug residual =&gt; _91;<br align="left"/>debug val =&gt; _94;<br align="left"/>debug frac_of_long_spread_in_price =&gt; _95;<br align="left"/>debug residual =&gt; _106;<br align="left"/>debug val =&gt; _109;<br align="left"/>debug residual =&gt; _112;<br align="left"/>debug val =&gt; _115;<br align="left"/>debug residual =&gt; _119;<br align="left"/>debug val =&gt; _122;<br align="left"/>debug frac_of_short_spread_in_price =&gt; _123;<br align="left"/>debug residual =&gt; _134;<br align="left"/>debug val =&gt; _137;<br align="left"/>debug residual =&gt; _140;<br align="left"/>debug val =&gt; _143;<br align="left"/>debug residual =&gt; _147;<br align="left"/>debug val =&gt; _150;<br align="left"/>debug baseline_start_price_offset =&gt; _151;<br align="left"/>debug residual =&gt; _159;<br align="left"/>debug val =&gt; _162;<br align="left"/>debug residual =&gt; _169;<br align="left"/>debug val =&gt; _172;<br align="left"/>debug residual =&gt; _179;<br align="left"/>debug val =&gt; _182;<br align="left"/>debug residual =&gt; _189;<br align="left"/>debug val =&gt; _192;<br align="left"/>>;
    bb0__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).5: i64)<br/>StorageLive(_10)<br/>_10 = (((*_1).1: state::perp_market::AMM).62: i64)<br/></td></tr><tr><td align="left">_8 = &lt;i64 as SafeMath&gt;::safe_sub(move _9, move _10)</td></tr></table>>];
    bb1__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb2__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_11 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_7 as Continue).0: i64)<br/>_6 = _15<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_5 = core::num::&lt;impl i64&gt;::abs(move _6)</td></tr></table>>];
    bb4__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_6)<br/>StorageDead(_7)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = Ge(move _5, const 60_i64)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb8__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_5)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = (((*_1).1: state::perp_market::AMM).56: u64)<br/>_16 = Le(move _17, const _)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb10__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;((*_1).24: state::perp_market::ContractTier)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_194 = const _<br/>_23 = &amp;(*_194)<br/>_22 = &amp;(*_23)<br/></td></tr><tr><td align="left">_20 = state::perp_market::ContractTier::is_as_safe_as_contract(move _21, move _22)</td></tr></table>>];
    bb11__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb12__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>_19 = const 500_i64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>_19 = const 100_i64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_25)<br/>_26 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb15__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = (((*_1).1: state::perp_market::AMM).44: u64)<br/></td></tr><tr><td align="left">_44 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _45)</td></tr></table>>];
    bb16__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = (((*_1).1: state::perp_market::AMM).43: u64)<br/></td></tr><tr><td align="left">_29 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _30)</td></tr></table>>];
    bb17__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/></td></tr><tr><td align="left">_28 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _29)</td></tr></table>>];
    bb18__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>_31 = discriminant(_28)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb19__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_28 as Continue).0: i64)<br/>_27 = _35<br/>StorageDead(_35)<br/>StorageLive(_36)<br/>_36 = _19<br/>_37 = Eq(_36, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _37, &quot;attempt to divide `{}` by zero&quot;, _27)</td></tr></table>>];
    bb20__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_28 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb21__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_27)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_38 = Eq(_36, const -1_i64)<br/>_39 = Eq(_27, const i64::MIN)<br/>_40 = BitAnd(move _38, move _39)<br/></td></tr><tr><td align="left">assert(!move _40, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _27, _36)</td></tr></table>>];
    bb23__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_25 = Div(move _27, move _36)<br/>StorageDead(_36)<br/>StorageDead(_27)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/></td></tr><tr><td align="left">_43 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _44)</td></tr></table>>];
    bb25__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_46 = discriminant(_43)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb26__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_43 as Continue).0: i64)<br/>_42 = _50<br/>StorageDead(_50)<br/>StorageLive(_51)<br/>_51 = _19<br/>_52 = Eq(_51, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _52, &quot;attempt to divide `{}` by zero&quot;, _42)</td></tr></table>>];
    bb27__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_43 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_49)<br/>_49 = _47<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb28__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_53 = Eq(_51, const -1_i64)<br/>_54 = Eq(_42, const i64::MIN)<br/>_55 = BitAnd(move _53, move _54)<br/></td></tr><tr><td align="left">assert(!move _55, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _42, _51)</td></tr></table>>];
    bb30__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_41 = Div(move _42, move _51)<br/>StorageDead(_51)<br/>StorageDead(_42)<br/>_56 = Eq(_41, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _56, &quot;attempt to negate `{}`, which would overflow&quot;, _41)</td></tr></table>>];
    bb31__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_25 = Neg(move _41)<br/>StorageDead(_41)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_0 = std::result::Result::&lt;i64, error::ErrorCode&gt;::Ok(move _25)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_3 = const ()<br/>StorageDead(_16)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_61 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _61)</td></tr></table>>];
    bb34__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_60 = (((*_1).1: state::perp_market::AMM).44: u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_60 = (((*_1).1: state::perp_market::AMM).43: u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left">_59 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _60)</td></tr></table>>];
    bb37__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/></td></tr><tr><td align="left">_58 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _59)</td></tr></table>>];
    bb38__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>_62 = discriminant(_58)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb39__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_58 as Continue).0: i64)<br/>_57 = _66<br/>StorageDead(_66)<br/>StorageDead(_58)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_70 = _57<br/>StorageLive(_71)<br/>_71 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/></td></tr><tr><td align="left">_69 = &lt;i64 as SafeMath&gt;::safe_sub(move _70, move _71)</td></tr></table>>];
    bb40__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_58 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_65)<br/>_65 = _63<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb41__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">_68 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _69)</td></tr></table>>];
    bb43__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_72 = discriminant(_68)<br/></td></tr><tr><td align="left">switchInt(move _72)</td></tr></table>>];
    bb44__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_76)<br/>_76 = ((_68 as Continue).0: i64)<br/>_67 = _76<br/>StorageDead(_76)<br/>StorageDead(_68)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = (((*_1).1: state::perp_market::AMM).46: u64)<br/></td></tr><tr><td align="left">_82 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _83)</td></tr></table>>];
    bb45__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_73)<br/>_73 = ((_68 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_75)<br/>_75 = _73<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _75)</td></tr></table>>];
    bb46__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_73)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/></td></tr><tr><td align="left">_81 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _82)</td></tr></table>>];
    bb48__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>_84 = discriminant(_81)<br/></td></tr><tr><td align="left">switchInt(move _84)</td></tr></table>>];
    bb49__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_88)<br/>_88 = ((_81 as Continue).0: i64)<br/>_80 = _88<br/>StorageDead(_88)<br/>StorageLive(_89)<br/>_89 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/></td></tr><tr><td align="left">_79 = &lt;i64 as SafeMath&gt;::safe_sub(move _80, move _89)</td></tr></table>>];
    bb50__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_85)<br/>_85 = ((_81 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_87)<br/>_87 = _85<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _87)</td></tr></table>>];
    bb51__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>StorageDead(_85)<br/>StorageDead(_80)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_80)<br/></td></tr><tr><td align="left">_78 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _79)</td></tr></table>>];
    bb53__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>_90 = discriminant(_78)<br/></td></tr><tr><td align="left">switchInt(move _90)</td></tr></table>>];
    bb54__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_94)<br/>_94 = ((_78 as Continue).0: i64)<br/>_77 = _94<br/>StorageDead(_94)<br/>StorageDead(_81)<br/>StorageDead(_78)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>_104 = (((*_1).1: state::perp_market::AMM).65: u32)<br/></td></tr><tr><td align="left">_103 = &lt;u32 as Cast&gt;::cast::&lt;i64&gt;(move _104)</td></tr></table>>];
    bb55__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_91)<br/>_91 = ((_78 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_93)<br/>_93 = _91<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _93)</td></tr></table>>];
    bb56__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/></td></tr><tr><td align="left">_102 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _103)</td></tr></table>>];
    bb58__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>_105 = discriminant(_102)<br/></td></tr><tr><td align="left">switchInt(move _105)</td></tr></table>>];
    bb59__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageLive(_109)<br/>_109 = ((_102 as Continue).0: i64)<br/>_101 = _109<br/>StorageDead(_109)<br/>StorageLive(_110)<br/>_110 = _57<br/></td></tr><tr><td align="left">_100 = &lt;i64 as SafeMath&gt;::safe_mul(move _101, move _110)</td></tr></table>>];
    bb60__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageLive(_106)<br/>_106 = ((_102 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_108)<br/>_108 = _106<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _108)</td></tr></table>>];
    bb61__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_106)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_101)<br/></td></tr><tr><td align="left">_99 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _100)</td></tr></table>>];
    bb63__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>_111 = discriminant(_99)<br/></td></tr><tr><td align="left">switchInt(move _111)</td></tr></table>>];
    bb64__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageLive(_115)<br/>_115 = ((_99 as Continue).0: i64)<br/>_98 = _115<br/>StorageDead(_115)<br/>StorageLive(_116)<br/>_117 = CheckedMul(const _, const 10_i64)<br/></td></tr><tr><td align="left">assert(!move (_117.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const _, const 10_i64)</td></tr></table>>];
    bb65__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageLive(_112)<br/>_112 = ((_99 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_114)<br/>_114 = _112<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _114)</td></tr></table>>];
    bb66__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_114)<br/>StorageDead(_112)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">_116 = move (_117.0: i64)<br/></td></tr><tr><td align="left">_97 = &lt;i64 as SafeMath&gt;::safe_div(move _98, move _116)</td></tr></table>>];
    bb68__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_116)<br/>StorageDead(_98)<br/></td></tr><tr><td align="left">_96 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _97)</td></tr></table>>];
    bb69__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>_118 = discriminant(_96)<br/></td></tr><tr><td align="left">switchInt(move _118)</td></tr></table>>];
    bb70__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageLive(_122)<br/>_122 = ((_96 as Continue).0: i64)<br/>_95 = _122<br/>StorageDead(_122)<br/>StorageDead(_102)<br/>StorageDead(_99)<br/>StorageDead(_96)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>_132 = (((*_1).1: state::perp_market::AMM).66: u32)<br/></td></tr><tr><td align="left">_131 = &lt;u32 as Cast&gt;::cast::&lt;i64&gt;(move _132)</td></tr></table>>];
    bb71__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageLive(_119)<br/>_119 = ((_96 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_121)<br/>_121 = _119<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _121)</td></tr></table>>];
    bb72__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb73__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_132)<br/></td></tr><tr><td align="left">_130 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _131)</td></tr></table>>];
    bb74__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_131)<br/>_133 = discriminant(_130)<br/></td></tr><tr><td align="left">switchInt(move _133)</td></tr></table>>];
    bb75__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageLive(_137)<br/>_137 = ((_130 as Continue).0: i64)<br/>_129 = _137<br/>StorageDead(_137)<br/>StorageLive(_138)<br/>_138 = _57<br/></td></tr><tr><td align="left">_128 = &lt;i64 as SafeMath&gt;::safe_mul(move _129, move _138)</td></tr></table>>];
    bb76__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageLive(_134)<br/>_134 = ((_130 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_136)<br/>_136 = _134<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _136)</td></tr></table>>];
    bb77__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_134)<br/>StorageDead(_129)<br/>StorageDead(_128)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb78__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_129)<br/></td></tr><tr><td align="left">_127 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _128)</td></tr></table>>];
    bb79__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>_139 = discriminant(_127)<br/></td></tr><tr><td align="left">switchInt(move _139)</td></tr></table>>];
    bb80__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_143)<br/>_143 = ((_127 as Continue).0: i64)<br/>_126 = _143<br/>StorageDead(_143)<br/>StorageLive(_144)<br/>_145 = CheckedMul(const _, const 10_i64)<br/></td></tr><tr><td align="left">assert(!move (_145.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const _, const 10_i64)</td></tr></table>>];
    bb81__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_140)<br/>_140 = ((_127 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_142)<br/>_142 = _140<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _142)</td></tr></table>>];
    bb82__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_142)<br/>StorageDead(_140)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">_144 = move (_145.0: i64)<br/></td></tr><tr><td align="left">_125 = &lt;i64 as SafeMath&gt;::safe_div(move _126, move _144)</td></tr></table>>];
    bb84__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/>StorageDead(_126)<br/></td></tr><tr><td align="left">_124 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _125)</td></tr></table>>];
    bb85__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>_146 = discriminant(_124)<br/></td></tr><tr><td align="left">switchInt(move _146)</td></tr></table>>];
    bb86__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageLive(_150)<br/>_150 = ((_124 as Continue).0: i64)<br/>_123 = _150<br/>StorageDead(_150)<br/>StorageDead(_130)<br/>StorageDead(_127)<br/>StorageDead(_124)<br/>StorageLive(_151)<br/>_152 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _152)</td></tr></table>>];
    bb87__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageLive(_147)<br/>_147 = ((_124 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_149)<br/>_149 = _147<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _149)</td></tr></table>>];
    bb88__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_147)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb89__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageLive(_173)<br/>StorageLive(_174)<br/>StorageLive(_175)<br/>StorageLive(_176)<br/>_176 = _67<br/>StorageLive(_177)<br/>_177 = _123<br/></td></tr><tr><td align="left">_175 = &lt;i64 as SafeMath&gt;::safe_sub(move _176, move _177)</td></tr></table>>];
    bb90__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageLive(_153)<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>StorageLive(_156)<br/>_156 = _67<br/>StorageLive(_157)<br/>_157 = _95<br/></td></tr><tr><td align="left">_155 = &lt;i64 as SafeMath&gt;::safe_add(move _156, move _157)</td></tr></table>>];
    bb91__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_157)<br/>StorageDead(_156)<br/></td></tr><tr><td align="left">_154 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _155)</td></tr></table>>];
    bb92__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_155)<br/>_158 = discriminant(_154)<br/></td></tr><tr><td align="left">switchInt(move _158)</td></tr></table>>];
    bb93__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageLive(_162)<br/>_162 = ((_154 as Continue).0: i64)<br/>_153 = _162<br/>StorageDead(_162)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>StorageLive(_166)<br/>_166 = _77<br/>StorageLive(_167)<br/>_167 = _123<br/></td></tr><tr><td align="left">_165 = &lt;i64 as SafeMath&gt;::safe_sub(move _166, move _167)</td></tr></table>>];
    bb94__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageLive(_159)<br/>_159 = ((_154 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_161)<br/>_161 = _159<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _161)</td></tr></table>>];
    bb95__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_161)<br/>StorageDead(_159)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb96__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_167)<br/>StorageDead(_166)<br/></td></tr><tr><td align="left">_164 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _165)</td></tr></table>>];
    bb97__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_165)<br/>_168 = discriminant(_164)<br/></td></tr><tr><td align="left">switchInt(move _168)</td></tr></table>>];
    bb98__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageLive(_172)<br/>_172 = ((_164 as Continue).0: i64)<br/>_163 = _172<br/>StorageDead(_172)<br/></td></tr><tr><td align="left">_151 = &lt;i64 as Ord&gt;::min(move _153, move _163)</td></tr></table>>];
    bb99__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageLive(_169)<br/>_169 = ((_164 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_171)<br/>_171 = _169<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _171)</td></tr></table>>];
    bb100__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_171)<br/>StorageDead(_169)<br/>StorageDead(_164)<br/>StorageDead(_163)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb101__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_164)<br/>StorageDead(_163)<br/>StorageDead(_154)<br/>StorageDead(_153)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb102__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_177)<br/>StorageDead(_176)<br/></td></tr><tr><td align="left">_174 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _175)</td></tr></table>>];
    bb103__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_175)<br/>_178 = discriminant(_174)<br/></td></tr><tr><td align="left">switchInt(move _178)</td></tr></table>>];
    bb104__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageLive(_182)<br/>_182 = ((_174 as Continue).0: i64)<br/>_173 = _182<br/>StorageDead(_182)<br/>StorageLive(_183)<br/>StorageLive(_184)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>_186 = _77<br/>StorageLive(_187)<br/>_187 = _95<br/></td></tr><tr><td align="left">_185 = &lt;i64 as SafeMath&gt;::safe_add(move _186, move _187)</td></tr></table>>];
    bb105__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageLive(_179)<br/>_179 = ((_174 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_181)<br/>_181 = _179<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _181)</td></tr></table>>];
    bb106__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_181)<br/>StorageDead(_179)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb107__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/>StorageDead(_186)<br/></td></tr><tr><td align="left">_184 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _185)</td></tr></table>>];
    bb108__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_185)<br/>_188 = discriminant(_184)<br/></td></tr><tr><td align="left">switchInt(move _188)</td></tr></table>>];
    bb109__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageLive(_192)<br/>_192 = ((_184 as Continue).0: i64)<br/>_183 = _192<br/>StorageDead(_192)<br/></td></tr><tr><td align="left">_151 = &lt;i64 as Ord&gt;::max(move _173, move _183)</td></tr></table>>];
    bb110__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageLive(_189)<br/>_189 = ((_184 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_191)<br/>_191 = _189<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _191)</td></tr></table>>];
    bb111__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_191)<br/>StorageDead(_189)<br/>StorageDead(_184)<br/>StorageDead(_183)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb112__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_184)<br/>StorageDead(_183)<br/>StorageDead(_174)<br/>StorageDead(_173)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb113__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageLive(_193)<br/>_193 = _151<br/>_0 = std::result::Result::&lt;i64, error::ErrorCode&gt;::Ok(move _193)<br/>StorageDead(_193)<br/>StorageDead(_151)<br/>StorageDead(_123)<br/>StorageDead(_95)<br/>StorageDead(_77)<br/>StorageDead(_67)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb114__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_174)<br/>StorageDead(_173)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb115__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_154)<br/>StorageDead(_153)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb116__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_151)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb117__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_126)<br/>StorageDead(_125)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb118__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_130)<br/>StorageDead(_127)<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb119__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb120__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_97)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb121__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_99)<br/>StorageDead(_96)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb122__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb123__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_78)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb124__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb125__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb126__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb127__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb128__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb129__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb130__0_3643 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3643 -> bb1__0_3643 [label="return"];
    bb1__0_3643 -> bb2__0_3643 [label="return"];
    bb2__0_3643 -> bb3__0_3643 [label="0"];
    bb2__0_3643 -> bb5__0_3643 [label="1"];
    bb2__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb3__0_3643 -> bb7__0_3643 [label="return"];
    bb5__0_3643 -> bb6__0_3643 [label="return"];
    bb6__0_3643 -> bb129__0_3643 [label=""];
    bb7__0_3643 -> bb9__0_3643 [label="0"];
    bb7__0_3643 -> bb8__0_3643 [label="otherwise"];
    bb8__0_3643 -> bb10__0_3643 [label=""];
    bb9__0_3643 -> bb33__0_3643 [label="0"];
    bb9__0_3643 -> bb10__0_3643 [label="otherwise"];
    bb10__0_3643 -> bb11__0_3643 [label="return"];
    bb11__0_3643 -> bb13__0_3643 [label="0"];
    bb11__0_3643 -> bb12__0_3643 [label="otherwise"];
    bb12__0_3643 -> bb14__0_3643 [label=""];
    bb13__0_3643 -> bb14__0_3643 [label=""];
    bb14__0_3643 -> bb16__0_3643 [label="0"];
    bb14__0_3643 -> bb15__0_3643 [label="1"];
    bb14__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb15__0_3643 -> bb24__0_3643 [label="return"];
    bb16__0_3643 -> bb17__0_3643 [label="return"];
    bb17__0_3643 -> bb18__0_3643 [label="return"];
    bb18__0_3643 -> bb19__0_3643 [label="0"];
    bb18__0_3643 -> bb20__0_3643 [label="1"];
    bb18__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb19__0_3643 -> bb22__0_3643 [label="success"];
    bb20__0_3643 -> bb21__0_3643 [label="return"];
    bb21__0_3643 -> bb127__0_3643 [label=""];
    bb22__0_3643 -> bb23__0_3643 [label="success"];
    bb23__0_3643 -> bb32__0_3643 [label=""];
    bb24__0_3643 -> bb25__0_3643 [label="return"];
    bb25__0_3643 -> bb26__0_3643 [label="0"];
    bb25__0_3643 -> bb27__0_3643 [label="1"];
    bb25__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb26__0_3643 -> bb29__0_3643 [label="success"];
    bb27__0_3643 -> bb28__0_3643 [label="return"];
    bb28__0_3643 -> bb127__0_3643 [label=""];
    bb29__0_3643 -> bb30__0_3643 [label="success"];
    bb30__0_3643 -> bb31__0_3643 [label="success"];
    bb31__0_3643 -> bb32__0_3643 [label=""];
    bb32__0_3643 -> bb128__0_3643 [label=""];
    bb33__0_3643 -> bb35__0_3643 [label="0"];
    bb33__0_3643 -> bb34__0_3643 [label="1"];
    bb33__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb34__0_3643 -> bb36__0_3643 [label=""];
    bb35__0_3643 -> bb36__0_3643 [label=""];
    bb36__0_3643 -> bb37__0_3643 [label="return"];
    bb37__0_3643 -> bb38__0_3643 [label="return"];
    bb38__0_3643 -> bb39__0_3643 [label="0"];
    bb38__0_3643 -> bb40__0_3643 [label="1"];
    bb38__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb39__0_3643 -> bb42__0_3643 [label="return"];
    bb40__0_3643 -> bb41__0_3643 [label="return"];
    bb41__0_3643 -> bb126__0_3643 [label=""];
    bb42__0_3643 -> bb43__0_3643 [label="return"];
    bb43__0_3643 -> bb44__0_3643 [label="0"];
    bb43__0_3643 -> bb45__0_3643 [label="1"];
    bb43__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb44__0_3643 -> bb47__0_3643 [label="return"];
    bb45__0_3643 -> bb46__0_3643 [label="return"];
    bb46__0_3643 -> bb125__0_3643 [label=""];
    bb47__0_3643 -> bb48__0_3643 [label="return"];
    bb48__0_3643 -> bb49__0_3643 [label="0"];
    bb48__0_3643 -> bb50__0_3643 [label="1"];
    bb48__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb49__0_3643 -> bb52__0_3643 [label="return"];
    bb50__0_3643 -> bb51__0_3643 [label="return"];
    bb51__0_3643 -> bb123__0_3643 [label=""];
    bb52__0_3643 -> bb53__0_3643 [label="return"];
    bb53__0_3643 -> bb54__0_3643 [label="0"];
    bb53__0_3643 -> bb55__0_3643 [label="1"];
    bb53__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb54__0_3643 -> bb57__0_3643 [label="return"];
    bb55__0_3643 -> bb56__0_3643 [label="return"];
    bb56__0_3643 -> bb123__0_3643 [label=""];
    bb57__0_3643 -> bb58__0_3643 [label="return"];
    bb58__0_3643 -> bb59__0_3643 [label="0"];
    bb58__0_3643 -> bb60__0_3643 [label="1"];
    bb58__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb59__0_3643 -> bb62__0_3643 [label="return"];
    bb60__0_3643 -> bb61__0_3643 [label="return"];
    bb61__0_3643 -> bb120__0_3643 [label=""];
    bb62__0_3643 -> bb63__0_3643 [label="return"];
    bb63__0_3643 -> bb64__0_3643 [label="0"];
    bb63__0_3643 -> bb65__0_3643 [label="1"];
    bb63__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb64__0_3643 -> bb67__0_3643 [label="success"];
    bb65__0_3643 -> bb66__0_3643 [label="return"];
    bb66__0_3643 -> bb120__0_3643 [label=""];
    bb67__0_3643 -> bb68__0_3643 [label="return"];
    bb68__0_3643 -> bb69__0_3643 [label="return"];
    bb69__0_3643 -> bb70__0_3643 [label="0"];
    bb69__0_3643 -> bb71__0_3643 [label="1"];
    bb69__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb70__0_3643 -> bb73__0_3643 [label="return"];
    bb71__0_3643 -> bb72__0_3643 [label="return"];
    bb72__0_3643 -> bb121__0_3643 [label=""];
    bb73__0_3643 -> bb74__0_3643 [label="return"];
    bb74__0_3643 -> bb75__0_3643 [label="0"];
    bb74__0_3643 -> bb76__0_3643 [label="1"];
    bb74__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb75__0_3643 -> bb78__0_3643 [label="return"];
    bb76__0_3643 -> bb77__0_3643 [label="return"];
    bb77__0_3643 -> bb117__0_3643 [label=""];
    bb78__0_3643 -> bb79__0_3643 [label="return"];
    bb79__0_3643 -> bb80__0_3643 [label="0"];
    bb79__0_3643 -> bb81__0_3643 [label="1"];
    bb79__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb80__0_3643 -> bb83__0_3643 [label="success"];
    bb81__0_3643 -> bb82__0_3643 [label="return"];
    bb82__0_3643 -> bb117__0_3643 [label=""];
    bb83__0_3643 -> bb84__0_3643 [label="return"];
    bb84__0_3643 -> bb85__0_3643 [label="return"];
    bb85__0_3643 -> bb86__0_3643 [label="0"];
    bb85__0_3643 -> bb87__0_3643 [label="1"];
    bb85__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb86__0_3643 -> bb90__0_3643 [label="0"];
    bb86__0_3643 -> bb89__0_3643 [label="1"];
    bb86__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb87__0_3643 -> bb88__0_3643 [label="return"];
    bb88__0_3643 -> bb118__0_3643 [label=""];
    bb89__0_3643 -> bb102__0_3643 [label="return"];
    bb90__0_3643 -> bb91__0_3643 [label="return"];
    bb91__0_3643 -> bb92__0_3643 [label="return"];
    bb92__0_3643 -> bb93__0_3643 [label="0"];
    bb92__0_3643 -> bb94__0_3643 [label="1"];
    bb92__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb93__0_3643 -> bb96__0_3643 [label="return"];
    bb94__0_3643 -> bb95__0_3643 [label="return"];
    bb95__0_3643 -> bb115__0_3643 [label=""];
    bb96__0_3643 -> bb97__0_3643 [label="return"];
    bb97__0_3643 -> bb98__0_3643 [label="0"];
    bb97__0_3643 -> bb99__0_3643 [label="1"];
    bb97__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb98__0_3643 -> bb101__0_3643 [label="return"];
    bb99__0_3643 -> bb100__0_3643 [label="return"];
    bb100__0_3643 -> bb115__0_3643 [label=""];
    bb101__0_3643 -> bb113__0_3643 [label=""];
    bb102__0_3643 -> bb103__0_3643 [label="return"];
    bb103__0_3643 -> bb104__0_3643 [label="0"];
    bb103__0_3643 -> bb105__0_3643 [label="1"];
    bb103__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb104__0_3643 -> bb107__0_3643 [label="return"];
    bb105__0_3643 -> bb106__0_3643 [label="return"];
    bb106__0_3643 -> bb114__0_3643 [label=""];
    bb107__0_3643 -> bb108__0_3643 [label="return"];
    bb108__0_3643 -> bb109__0_3643 [label="0"];
    bb108__0_3643 -> bb110__0_3643 [label="1"];
    bb108__0_3643 -> bb4__0_3643 [label="otherwise"];
    bb109__0_3643 -> bb112__0_3643 [label="return"];
    bb110__0_3643 -> bb111__0_3643 [label="return"];
    bb111__0_3643 -> bb114__0_3643 [label=""];
    bb112__0_3643 -> bb113__0_3643 [label=""];
    bb113__0_3643 -> bb130__0_3643 [label=""];
    bb114__0_3643 -> bb116__0_3643 [label=""];
    bb115__0_3643 -> bb116__0_3643 [label=""];
    bb116__0_3643 -> bb119__0_3643 [label=""];
    bb117__0_3643 -> bb118__0_3643 [label=""];
    bb118__0_3643 -> bb119__0_3643 [label=""];
    bb119__0_3643 -> bb122__0_3643 [label=""];
    bb120__0_3643 -> bb121__0_3643 [label=""];
    bb121__0_3643 -> bb122__0_3643 [label=""];
    bb122__0_3643 -> bb124__0_3643 [label=""];
    bb123__0_3643 -> bb124__0_3643 [label=""];
    bb124__0_3643 -> bb125__0_3643 [label=""];
    bb125__0_3643 -> bb126__0_3643 [label=""];
    bb126__0_3643 -> bb130__0_3643 [label=""];
    bb127__0_3643 -> bb128__0_3643 [label=""];
    bb128__0_3643 -> bb129__0_3643 [label=""];
    bb129__0_3643 -> bb130__0_3643 [label=""];
}
