// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4075:10: 4075:18>::try_accounts` before PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4075:10: 4075:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut SweepFuelBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::SweepFuel<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::SweepFuel<'_>, anchor_lang::error::Error>;
    let _6: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>>;
    let mut _8: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::user::SweepFuelBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::user::SweepFuelBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::user::SweepFuelBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::user::SweepFuelBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _66: ();
    let mut _67: bool;
    let mut _68: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _69: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let _70: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _71: !;
    let mut _72: anchor_lang::error::Error;
    let mut _73: anchor_lang::error::Error;
    let mut _74: anchor_lang::error::ErrorCode;
    let _75: ();
    let mut _77: &state::user::FuelOverflow;
    let mut _78: &std::cell::Ref<'_, state::user::FuelOverflow>;
    let _79: std::cell::Ref<'_, state::user::FuelOverflow>;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::FuelOverflow>>;
    let mut _81: std::result::Result<std::cell::Ref<'_, state::user::FuelOverflow>, anchor_lang::error::Error>;
    let mut _82: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _89: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _90: bool;
    let mut _91: &anchor_lang::prelude::Pubkey;
    let mut _92: &anchor_lang::prelude::Pubkey;
    let mut _93: !;
    let mut _94: anchor_lang::error::Error;
    let mut _95: anchor_lang::error::Error;
    let mut _96: anchor_lang::error::Error;
    let mut _97: anchor_lang::error::ErrorCode;
    let mut _98: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _99: anchor_lang::prelude::Pubkey;
    let mut _100: anchor_lang::prelude::Pubkey;
    let _101: ();
    let mut _102: bool;
    let mut _103: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _104: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _105: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _106: !;
    let mut _107: anchor_lang::error::Error;
    let mut _108: anchor_lang::error::Error;
    let mut _109: anchor_lang::error::ErrorCode;
    let _110: ();
    let mut _112: &state::user::UserStats;
    let mut _113: &std::cell::Ref<'_, state::user::UserStats>;
    let _114: std::cell::Ref<'_, state::user::UserStats>;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _116: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _117: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _124: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _125: bool;
    let mut _126: &anchor_lang::prelude::Pubkey;
    let mut _127: &anchor_lang::prelude::Pubkey;
    let mut _128: !;
    let mut _129: anchor_lang::error::Error;
    let mut _130: anchor_lang::error::Error;
    let mut _131: anchor_lang::error::Error;
    let mut _132: anchor_lang::error::ErrorCode;
    let mut _133: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _134: anchor_lang::prelude::Pubkey;
    let mut _135: anchor_lang::prelude::Pubkey;
    let mut _136: instructions::user::SweepFuel<'_>;
    let mut _137: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _138: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _139: anchor_lang::prelude::AccountInfo<'_>;
    let mut _140: anchor_lang::prelude::Signer<'_>;
    let mut _141: bool;
    let mut _142: bool;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: isize;
    let mut _146: isize;
    let mut _147: isize;
    let mut _148: isize;
    let mut _149: isize;
    let mut _150: isize;
    let mut _151: isize;
    let mut _152: isize;
    let mut _153: isize;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    scope 1 {
        debug fuel_overflow => _6;
        let _21: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
        scope 6 {
            debug user_stats => _21;
            let _36: anchor_lang::prelude::AccountInfo<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountInfo<'_>;
            scope 11 {
                debug authority => _36;
                let _51: anchor_lang::prelude::Signer<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::Signer<'_>;
                scope 16 {
                    debug signer => _51;
                    let _76: anchor_lang::prelude::Pubkey;
                    let _84: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _87: std::cell::Ref<'_, state::user::FuelOverflow>;
                    let _111: anchor_lang::prelude::Pubkey;
                    let _119: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _122: std::cell::Ref<'_, state::user::UserStats>;
                    scope 21 {
                        debug my_key => _76;
                        let _88: anchor_lang::prelude::Pubkey;
                        scope 26 {
                            debug target_key => _88;
                        }
                    }
                    scope 22 {
                        debug residual => _84;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _87;
                        scope 25 {
                        }
                    }
                    scope 27 {
                        debug my_key => _111;
                        let _123: anchor_lang::prelude::Pubkey;
                        scope 32 {
                            debug target_key => _123;
                        }
                    }
                    scope 28 {
                        debug residual => _119;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug val => _122;
                        scope 31 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _144 = const false;
        _143 = const false;
        _142 = const false;
        _141 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <anchor_lang::prelude::AccountLoader<'_, FuelOverflow> as anchor_lang::Accounts<'_, SweepFuelBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18};
        _8 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, FuelOverflow>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18}>(move _9, move _15) -> [return: bb2, unwind: bb72];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, FuelOverflow>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb72];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>);
        _6 = move _20;
        StorageDead(_20);
        _145 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, SweepFuelBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<instructions::user::SweepFuel<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb80];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _167 = discriminant(_7);
        StorageDead(_7);
        goto -> bb67;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18};
        _23 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18}>(move _24, move _30) -> [return: bb9, unwind: bb72];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb72];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _21 = move _35;
        StorageDead(_35);
        _147 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, SweepFuelBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<instructions::user::SweepFuel<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb79];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _165 = discriminant(_22);
        StorageDead(_22);
        goto -> bb66;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18}>(move _39, move _45) -> [return: bb15, unwind: bb72];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb72];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _36 = move _50;
        StorageDead(_50);
        _149 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, SweepFuelBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb71];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<instructions::user::SweepFuel<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb78];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _163 = discriminant(_37);
        StorageDead(_37);
        goto -> bb65;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18};
        _53 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4075:10: 4075:18}>(move _54, move _60) -> [return: bb21, unwind: bb71];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb71];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _51 = move _65;
        StorageDead(_65);
        _151 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_6;
        _69 = &(*_70);
        _68 = <anchor_lang::prelude::AccountLoader<'_, FuelOverflow> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _69) -> [return: bb26, unwind: bb71];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<instructions::user::SweepFuel<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb77];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _161 = discriminant(_52);
        StorageDead(_52);
        goto -> bb64;
    }

    bb26: {
        StorageDead(_69);
        _67 = ((*_68).6: bool);
        switchInt(move _67) -> [0: bb27, otherwise: bb30];
    }

    bb27: {
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = ConstraintMut;
        _73 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _74) -> [return: bb28, unwind: bb71];
    }

    bb28: {
        StorageDead(_74);
        _72 = anchor_lang::error::Error::with_account_name::<&str>(move _73, const "fuel_overflow") -> [return: bb29, unwind: bb71];
    }

    bb29: {
        StorageDead(_73);
        _0 = std::result::Result::<instructions::user::SweepFuel<'_>, anchor_lang::error::Error>::Err(move _72);
        StorageDead(_72);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb64;
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_68);
        _66 = const ();
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_6;
        _81 = anchor_lang::prelude::AccountLoader::<'_, FuelOverflow>::load(move _82) -> [return: bb31, unwind: bb71];
    }

    bb31: {
        StorageDead(_82);
        _80 = <std::result::Result<Ref<'_, FuelOverflow>, anchor_lang::error::Error> as Try>::branch(move _81) -> [return: bb32, unwind: bb71];
    }

    bb32: {
        _143 = const true;
        _144 = const true;
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb33, 1: bb34, otherwise: bb5];
    }

    bb33: {
        StorageLive(_87);
        _87 = move ((_80 as Continue).0: std::cell::Ref<'_, state::user::FuelOverflow>);
        _79 = move _87;
        StorageDead(_87);
        _78 = &_79;
        _77 = <Ref<'_, FuelOverflow> as Deref>::deref(move _78) -> [return: bb36, unwind: bb70];
    }

    bb34: {
        StorageLive(_84);
        _84 = move ((_80 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <std::result::Result<instructions::user::SweepFuel<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _86) -> [return: bb35, unwind: bb76];
    }

    bb35: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_78);
        _159 = discriminant(_80);
        _143 = const false;
        _144 = const false;
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        goto -> bb63;
    }

    bb36: {
        StorageDead(_78);
        _76 = ((*_77).0: anchor_lang::prelude::Pubkey);
        drop(_79) -> [return: bb73, unwind: bb76];
    }

    bb37: {
        StorageDead(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &_76;
        StorageLive(_92);
        _92 = &_88;
        _90 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _91, move _92) -> [return: bb38, unwind: bb71];
    }

    bb38: {
        switchInt(move _90) -> [0: bb43, otherwise: bb39];
    }

    bb39: {
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = ConstraintHasOne;
        _96 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _97) -> [return: bb40, unwind: bb71];
    }

    bb40: {
        StorageDead(_97);
        _95 = anchor_lang::error::Error::with_account_name::<&str>(move _96, const "fuel_overflow") -> [return: bb41, unwind: bb71];
    }

    bb41: {
        StorageDead(_96);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _76;
        StorageLive(_100);
        _100 = _88;
        _98 = (move _99, move _100);
        StorageDead(_100);
        StorageDead(_99);
        _94 = anchor_lang::error::Error::with_pubkeys(move _95, move _98) -> [return: bb42, unwind: bb71];
    }

    bb42: {
        StorageDead(_98);
        StorageDead(_95);
        _0 = std::result::Result::<instructions::user::SweepFuel<'_>, anchor_lang::error::Error>::Err(move _94);
        StorageDead(_94);
        StorageDead(_90);
        StorageDead(_88);
        goto -> bb63;
    }

    bb43: {
        StorageDead(_92);
        StorageDead(_91);
        _75 = const ();
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &_21;
        _104 = &(*_105);
        _103 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _104) -> [return: bb44, unwind: bb71];
    }

    bb44: {
        StorageDead(_104);
        _102 = ((*_103).6: bool);
        switchInt(move _102) -> [0: bb45, otherwise: bb48];
    }

    bb45: {
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = ConstraintMut;
        _108 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _109) -> [return: bb46, unwind: bb71];
    }

    bb46: {
        StorageDead(_109);
        _107 = anchor_lang::error::Error::with_account_name::<&str>(move _108, const "user_stats") -> [return: bb47, unwind: bb71];
    }

    bb47: {
        StorageDead(_108);
        _0 = std::result::Result::<instructions::user::SweepFuel<'_>, anchor_lang::error::Error>::Err(move _107);
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb64;
    }

    bb48: {
        StorageDead(_105);
        StorageDead(_103);
        _101 = const ();
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_21;
        _116 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _117) -> [return: bb49, unwind: bb71];
    }

    bb49: {
        StorageDead(_117);
        _115 = <std::result::Result<Ref<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _116) -> [return: bb50, unwind: bb71];
    }

    bb50: {
        _141 = const true;
        _142 = const true;
        StorageDead(_116);
        _118 = discriminant(_115);
        switchInt(move _118) -> [0: bb51, 1: bb52, otherwise: bb5];
    }

    bb51: {
        StorageLive(_122);
        _122 = move ((_115 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _114 = move _122;
        StorageDead(_122);
        _113 = &_114;
        _112 = <Ref<'_, UserStats> as Deref>::deref(move _113) -> [return: bb54, unwind: bb69];
    }

    bb52: {
        StorageLive(_119);
        _119 = move ((_115 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_121);
        _121 = move _119;
        _0 = <std::result::Result<instructions::user::SweepFuel<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _121) -> [return: bb53, unwind: bb75];
    }

    bb53: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_113);
        _157 = discriminant(_115);
        _141 = const false;
        _142 = const false;
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_112);
        goto -> bb62;
    }

    bb54: {
        StorageDead(_113);
        _111 = ((*_112).0: anchor_lang::prelude::Pubkey);
        drop(_114) -> [return: bb74, unwind: bb75];
    }

    bb55: {
        StorageDead(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_111;
        StorageLive(_127);
        _127 = &_123;
        _125 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _126, move _127) -> [return: bb56, unwind: bb71];
    }

    bb56: {
        switchInt(move _125) -> [0: bb61, otherwise: bb57];
    }

    bb57: {
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = ConstraintHasOne;
        _131 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _132) -> [return: bb58, unwind: bb71];
    }

    bb58: {
        StorageDead(_132);
        _130 = anchor_lang::error::Error::with_account_name::<&str>(move _131, const "user_stats") -> [return: bb59, unwind: bb71];
    }

    bb59: {
        StorageDead(_131);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _111;
        StorageLive(_135);
        _135 = _123;
        _133 = (move _134, move _135);
        StorageDead(_135);
        StorageDead(_134);
        _129 = anchor_lang::error::Error::with_pubkeys(move _130, move _133) -> [return: bb60, unwind: bb71];
    }

    bb60: {
        StorageDead(_133);
        StorageDead(_130);
        _0 = std::result::Result::<instructions::user::SweepFuel<'_>, anchor_lang::error::Error>::Err(move _129);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_123);
        goto -> bb62;
    }

    bb61: {
        StorageDead(_127);
        StorageDead(_126);
        _110 = const ();
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_136);
        StorageLive(_137);
        _137 = move _6;
        StorageLive(_138);
        _138 = move _21;
        StorageLive(_139);
        _139 = move _36;
        StorageLive(_140);
        _140 = move _51;
        _136 = instructions::user::SweepFuel::<'_> { fuel_overflow: move _137, user_stats: move _138, authority: move _139, signer: move _140 };
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        _0 = std::result::Result::<instructions::user::SweepFuel<'_>, anchor_lang::error::Error>::Ok(move _136);
        StorageDead(_136);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb68;
    }

    bb62: {
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb64;
    }

    bb63: {
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_51);
        drop(_36) -> [return: bb65, unwind: bb72];
    }

    bb65: {
        StorageDead(_36);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_21);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_6);
        goto -> bb68;
    }

    bb68: {
        return;
    }

    bb69 (cleanup): {
        drop(_114) -> [return: bb75, unwind terminate(cleanup)];
    }

    bb70 (cleanup): {
        drop(_79) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_36) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        resume;
    }

    bb73: {
        _153 = discriminant(_80);
        _143 = const false;
        _144 = const false;
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_36;
        _88 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _89) -> [return: bb37, unwind: bb71];
    }

    bb74: {
        _155 = discriminant(_115);
        _141 = const false;
        _142 = const false;
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_36;
        _123 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _124) -> [return: bb55, unwind: bb71];
    }

    bb75 (cleanup): {
        _169 = discriminant(_115);
        goto -> bb71;
    }

    bb76 (cleanup): {
        _170 = discriminant(_80);
        goto -> bb71;
    }

    bb77 (cleanup): {
        _171 = discriminant(_52);
        goto -> bb71;
    }

    bb78 (cleanup): {
        _172 = discriminant(_37);
        goto -> bb72;
    }

    bb79 (cleanup): {
        _173 = discriminant(_22);
        goto -> bb72;
    }

    bb80 (cleanup): {
        _174 = discriminant(_7);
        goto -> bb72;
    }
}
