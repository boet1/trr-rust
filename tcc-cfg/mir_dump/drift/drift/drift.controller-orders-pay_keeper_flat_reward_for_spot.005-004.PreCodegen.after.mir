// MIR for `pay_keeper_flat_reward_for_spot` after PreCodegen

fn pay_keeper_flat_reward_for_spot(_1: &mut User, _2: Option<&mut User>, _3: &mut SpotMarket, _4: u64, _5: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug user => _1;
    debug filler => _2;
    debug quote_market => _3;
    debug filler_reward => _4;
    debug slot => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: u64;
    let mut _7: isize;
    let _9: ();
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _11: std::result::Result<(), error::ErrorCode>;
    let mut _12: u128;
    let mut _13: u64;
    let mut _14: &state::spot_market::SpotBalanceType;
    let _15: &state::spot_market::SpotBalanceType;
    let _16: state::spot_market::SpotBalanceType;
    let mut _17: &mut state::spot_market::SpotMarket;
    let mut _18: &mut dyn state::spot_market::SpotBalance;
    let mut _19: &mut state::user::SpotPosition;
    let mut _20: &mut state::user::SpotPosition;
    let mut _21: &mut state::user::User;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: ();
    let mut _28: &mut state::user::User;
    let mut _29: u64;
    let _30: ();
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _32: std::result::Result<(), error::ErrorCode>;
    let mut _33: &mut state::user::User;
    let mut _34: i64;
    let mut _35: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _36: std::result::Result<i64, error::ErrorCode>;
    let mut _37: u64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: ();
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _50: std::result::Result<(), error::ErrorCode>;
    let mut _51: u128;
    let mut _52: u64;
    let mut _53: &state::spot_market::SpotBalanceType;
    let _54: &state::spot_market::SpotBalanceType;
    let _55: state::spot_market::SpotBalanceType;
    let mut _56: &mut state::spot_market::SpotMarket;
    let mut _57: &mut dyn state::spot_market::SpotBalance;
    let mut _58: &mut state::user::SpotPosition;
    let mut _59: &mut state::user::SpotPosition;
    let mut _60: &mut state::user::User;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _66: ();
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _68: std::result::Result<(), error::ErrorCode>;
    let mut _69: &mut state::user::User;
    let mut _70: i64;
    let mut _71: i64;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _73: std::result::Result<i64, error::ErrorCode>;
    let mut _74: u64;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: bool;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: u64;
    scope 1 {
        debug filler_reward => _6;
    }
    scope 2 {
        debug filler => _8;
        let _8: &mut state::user::User;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: ();
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: i64;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: ();
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: ();
        let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _79: i64;
        let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _85: ();
        let mut _87: &state::spot_market::SpotBalanceType;
        let mut _88: &state::spot_market::SpotBalanceType;
        scope 3 {
            debug residual => _23;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _26;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _39;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _42;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _44;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _47;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _62;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _65;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _76;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _79;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _82;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _85;
            scope 26 {
            }
        }
    }

    bb0: {
        StorageLive(_6);
        _7 = discriminant(_2);
        switchInt(move _7) -> [1: bb1, otherwise: bb37];
    }

    bb1: {
        StorageLive(_8);
        _8 = move ((_2 as Some).0: &mut state::user::User);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _4;
        _12 = move _13 as u128 (IntToInt);
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _88 = const _;
        _15 = &(*_88);
        _14 = &(*_15);
        StorageLive(_17);
        _17 = &mut (*_3);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut (*_8);
        _20 = User::get_quote_spot_position_mut(move _21) -> [return: bb2, unwind continue];
    }

    bb2: {
        _19 = &mut (*_20);
        _18 = move _19 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageDead(_19);
        _11 = update_spot_balances(move _12, move _14, move _17, move _18, const false) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        _10 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _22 = discriminant(_10);
        switchInt(move _22) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_26);
        _26 = ((_10 as Continue).0: ());
        _9 = _26;
        StorageDead(_26);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut (*_8);
        StorageLive(_29);
        _29 = _5;
        _27 = User::update_last_active_slot(move _28, move _29) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_23);
        _23 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb41;
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_8);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _4;
        _36 = <u64 as Cast>::cast::<i64>(move _37) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_37);
        _35 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _36) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_36);
        _38 = discriminant(_35);
        switchInt(move _38) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_42);
        _42 = ((_35 as Continue).0: i64);
        _34 = _42;
        StorageDead(_42);
        _32 = User::update_cumulative_spot_fees(move _33, move _34) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_39);
        _39 = ((_35 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb40;
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _32) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_32);
        _43 = discriminant(_31);
        switchInt(move _43) -> [0: bb17, 1: bb18, otherwise: bb6];
    }

    bb17: {
        StorageLive(_47);
        _47 = ((_31 as Continue).0: ());
        _30 = _47;
        StorageDead(_47);
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _4;
        _51 = move _52 as u128 (IntToInt);
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        _87 = const _;
        _54 = &(*_87);
        _53 = &(*_54);
        StorageLive(_56);
        _56 = &mut (*_3);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut (*_1);
        _59 = User::get_quote_spot_position_mut(move _60) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_44);
        _44 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb40;
    }

    bb20: {
        _58 = &mut (*_59);
        _57 = move _58 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_60);
        StorageDead(_58);
        _50 = update_spot_balances(move _51, move _53, move _56, move _57, const false) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_51);
        _49 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _50) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_50);
        _61 = discriminant(_49);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb6];
    }

    bb23: {
        StorageLive(_65);
        _65 = ((_49 as Continue).0: ());
        _48 = _65;
        StorageDead(_65);
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_1);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = _4;
        _73 = <u64 as Cast>::cast::<i64>(move _74) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_62);
        _62 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb41;
    }

    bb26: {
        StorageDead(_74);
        _72 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _73) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_73);
        _75 = discriminant(_72);
        switchInt(move _75) -> [0: bb28, 1: bb29, otherwise: bb6];
    }

    bb28: {
        StorageLive(_79);
        _79 = ((_72 as Continue).0: i64);
        _71 = _79;
        StorageDead(_79);
        _80 = Eq(_71, const i64::MIN);
        assert(!move _80, "attempt to negate `{}`, which would overflow", _71) -> [success: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_76);
        _76 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb39;
    }

    bb31: {
        _70 = Neg(move _71);
        StorageDead(_71);
        _68 = User::update_cumulative_spot_fees(move _69, move _70) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_70);
        StorageDead(_69);
        _67 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _68) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_68);
        _81 = discriminant(_67);
        switchInt(move _81) -> [0: bb34, 1: bb35, otherwise: bb6];
    }

    bb34: {
        StorageLive(_85);
        _85 = ((_67 as Continue).0: ());
        _66 = _85;
        StorageDead(_85);
        StorageDead(_72);
        StorageDead(_67);
        StorageDead(_66);
        _6 = _4;
        StorageDead(_8);
        goto -> bb38;
    }

    bb35: {
        StorageLive(_82);
        _82 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_84);
        StorageDead(_82);
        goto -> bb39;
    }

    bb37: {
        _6 = const 0_u64;
        goto -> bb38;
    }

    bb38: {
        StorageLive(_86);
        _86 = _6;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _86);
        StorageDead(_86);
        StorageDead(_6);
        goto -> bb42;
    }

    bb39: {
        StorageDead(_72);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb41;
    }

    bb40: {
        StorageDead(_35);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_8);
        StorageDead(_6);
        goto -> bb42;
    }

    bb42: {
        return;
    }
}
