// MIR for `validate_whitelist_token` after PreCodegen

fn validate_whitelist_token(_1: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, _2: &anchor_lang::prelude::Pubkey, _3: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), error::ErrorCode> {
    debug whitelist_token => _1;
    debug whitelist_mint => _2;
    debug authority => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: bool;
    let mut _8: &&anchor_lang::prelude::Pubkey;
    let _9: &anchor_lang::prelude::Pubkey;
    let _10: &anchor_spl::token::spl_token::state::Account;
    let mut _11: &anchor_spl::token::TokenAccount;
    let _12: &anchor_spl::token::TokenAccount;
    let mut _13: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _14: &&anchor_lang::prelude::Pubkey;
    let mut _15: ();
    let _16: error::ErrorCode;
    let _17: ();
    let mut _18: &str;
    let _19: &str;
    let mut _20: &std::string::String;
    let _21: &std::string::String;
    let _22: std::string::String;
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[&str; 2];
    let _27: &[&str; 2];
    let _28: [&str; 2];
    let mut _29: &[core::fmt::rt::Argument<'_>];
    let mut _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let mut _34: &error::ErrorCode;
    let _35: &error::ErrorCode;
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: &std::string::String;
    let _40: &std::string::String;
    let _41: std::string::String;
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[&str; 3];
    let _46: &[&str; 3];
    let _47: [&str; 3];
    let mut _48: &[core::fmt::rt::Argument<'_>];
    let mut _49: &[core::fmt::rt::Argument<'_>; 2];
    let _50: &[core::fmt::rt::Argument<'_>; 2];
    let _51: [core::fmt::rt::Argument<'_>; 2];
    let mut _52: core::fmt::rt::Argument<'_>;
    let mut _53: &anchor_lang::prelude::Pubkey;
    let _54: &anchor_lang::prelude::Pubkey;
    let _55: &anchor_spl::token::spl_token::state::Account;
    let mut _56: &anchor_spl::token::TokenAccount;
    let _57: &anchor_spl::token::TokenAccount;
    let mut _58: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _59: core::fmt::rt::Argument<'_>;
    let mut _60: &&anchor_lang::prelude::Pubkey;
    let _61: &&anchor_lang::prelude::Pubkey;
    let mut _62: error::ErrorCode;
    let mut _63: isize;
    let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _67: ();
    let _68: ();
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _70: std::result::Result<(), error::ErrorCode>;
    let mut _71: bool;
    let mut _72: &&anchor_lang::prelude::Pubkey;
    let _73: &anchor_lang::prelude::Pubkey;
    let _74: &anchor_spl::token::spl_token::state::Account;
    let mut _75: &anchor_spl::token::TokenAccount;
    let _76: &anchor_spl::token::TokenAccount;
    let mut _77: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _78: &&anchor_lang::prelude::Pubkey;
    let mut _79: ();
    let _80: error::ErrorCode;
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let _86: std::string::String;
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let mut _90: &[&str; 2];
    let _91: &[&str; 2];
    let _92: [&str; 2];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let mut _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &error::ErrorCode;
    let _99: &error::ErrorCode;
    let _100: ();
    let mut _101: &str;
    let _102: &str;
    let mut _103: &std::string::String;
    let _104: &std::string::String;
    let _105: std::string::String;
    let mut _107: std::fmt::Arguments<'_>;
    let mut _108: &[&str];
    let mut _109: &[&str; 3];
    let _110: &[&str; 3];
    let _111: [&str; 3];
    let mut _112: &[core::fmt::rt::Argument<'_>];
    let mut _113: &[core::fmt::rt::Argument<'_>; 2];
    let _114: &[core::fmt::rt::Argument<'_>; 2];
    let _115: [core::fmt::rt::Argument<'_>; 2];
    let mut _116: core::fmt::rt::Argument<'_>;
    let mut _117: &anchor_lang::prelude::Pubkey;
    let _118: &anchor_lang::prelude::Pubkey;
    let _119: &anchor_spl::token::spl_token::state::Account;
    let mut _120: &anchor_spl::token::TokenAccount;
    let _121: &anchor_spl::token::TokenAccount;
    let mut _122: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &&anchor_lang::prelude::Pubkey;
    let _125: &&anchor_lang::prelude::Pubkey;
    let mut _126: error::ErrorCode;
    let mut _127: isize;
    let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _131: ();
    let _132: ();
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _134: std::result::Result<(), error::ErrorCode>;
    let mut _135: bool;
    let mut _136: u64;
    let mut _137: &anchor_spl::token::spl_token::state::Account;
    let mut _138: &anchor_spl::token::TokenAccount;
    let _139: &anchor_spl::token::TokenAccount;
    let mut _140: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _141: ();
    let _142: error::ErrorCode;
    let _143: ();
    let mut _144: &str;
    let _145: &str;
    let mut _146: &std::string::String;
    let _147: &std::string::String;
    let _148: std::string::String;
    let mut _150: std::fmt::Arguments<'_>;
    let mut _151: &[&str];
    let mut _152: &[&str; 2];
    let _153: &[&str; 2];
    let _154: [&str; 2];
    let mut _155: &[core::fmt::rt::Argument<'_>];
    let mut _156: &[core::fmt::rt::Argument<'_>; 1];
    let _157: &[core::fmt::rt::Argument<'_>; 1];
    let _158: [core::fmt::rt::Argument<'_>; 1];
    let mut _159: core::fmt::rt::Argument<'_>;
    let mut _160: &error::ErrorCode;
    let _161: &error::ErrorCode;
    let _162: ();
    let mut _163: &str;
    let _164: &str;
    let mut _165: &std::string::String;
    let _166: &std::string::String;
    let _167: std::string::String;
    let mut _169: std::fmt::Arguments<'_>;
    let mut _170: &[&str];
    let mut _171: &[&str; 1];
    let _172: &[&str; 1];
    let _173: [&str; 1];
    let mut _174: error::ErrorCode;
    let mut _175: isize;
    let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _179: ();
    let mut _180: ();
    scope 1 {
        debug error_code => _16;
        let _23: std::string::String;
        let _42: std::string::String;
        let mut _185: &[&str; 3];
        let mut _186: &[&str; 2];
        scope 2 {
            debug res => _23;
        }
        scope 3 {
            debug res => _42;
        }
    }
    scope 4 {
        debug residual => _64;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _67;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _80;
        let _87: std::string::String;
        let _106: std::string::String;
        let mut _183: &[&str; 3];
        let mut _184: &[&str; 2];
        scope 9 {
            debug res => _87;
        }
        scope 10 {
            debug res => _106;
        }
    }
    scope 11 {
        debug residual => _128;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _131;
        scope 14 {
        }
    }
    scope 15 {
        debug error_code => _142;
        let _149: std::string::String;
        let _168: std::string::String;
        let mut _181: &[&str; 1];
        let mut _182: &[&str; 2];
        scope 16 {
            debug res => _149;
        }
        scope 17 {
            debug res => _168;
        }
    }
    scope 18 {
        debug residual => _176;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _179;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_1;
        _12 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = &(*_12);
        _10 = <anchor_spl::token::TokenAccount as Deref>::deref(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_11);
        _9 = &((*_10).1: anchor_lang::prelude::Pubkey);
        _8 = &_9;
        StorageLive(_14);
        _14 = &_3;
        _7 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _8, move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_15);
        _15 = ();
        _6 = std::result::Result::<(), error::ErrorCode>::Ok(move _15);
        StorageDead(_15);
        goto -> bb21;
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_16);
        _16 = error::ErrorCode::InvalidWhitelistToken;
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _186 = const _;
        _27 = &(*_186);
        _26 = &(*_27);
        _25 = move _26 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &_16;
        _34 = &(*_35);
        _33 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _34) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_34);
        _32 = [move _33];
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = move _30 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_30);
        _24 = Arguments::<'_>::new_v1(move _25, move _29) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_29);
        StorageDead(_25);
        _23 = format(move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        _22 = move _23;
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _19 = <String as Deref>::deref(move _20) -> [return: bb9, unwind: bb78];
    }

    bb9: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = solana_program::log::sol_log(move _18) -> [return: bb10, unwind: bb78];
    }

    bb10: {
        StorageDead(_18);
        drop(_22) -> [return: bb11, unwind: bb79];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_17);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _185 = const _;
        _46 = &(*_185);
        _45 = &(*_46);
        _44 = move _45 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_45);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_1;
        _57 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _58) -> [return: bb12, unwind continue];
    }

    bb12: {
        _56 = &(*_57);
        _55 = <anchor_spl::token::TokenAccount as Deref>::deref(move _56) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_58);
        StorageDead(_56);
        _54 = &((*_55).1: anchor_lang::prelude::Pubkey);
        _53 = &(*_54);
        _52 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _53) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_53);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_3;
        _60 = &(*_61);
        _59 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_lang::prelude::Pubkey>(move _60) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_60);
        _51 = [move _52, move _59];
        StorageDead(_59);
        StorageDead(_52);
        _50 = &_51;
        _49 = &(*_50);
        _48 = move _49 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_49);
        _43 = Arguments::<'_>::new_v1(move _44, move _48) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_48);
        StorageDead(_44);
        _42 = format(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_61);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        _41 = move _42;
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = <String as Deref>::deref(move _39) -> [return: bb18, unwind: bb77];
    }

    bb18: {
        _37 = &(*_38);
        StorageDead(_39);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb19, unwind: bb77];
    }

    bb19: {
        StorageDead(_37);
        drop(_41) -> [return: bb20, unwind: bb79];
    }

    bb20: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_62);
        _62 = _16;
        _6 = std::result::Result::<(), error::ErrorCode>::Err(move _62);
        StorageDead(_62);
        StorageDead(_16);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_6);
        _63 = discriminant(_5);
        switchInt(move _63) -> [0: bb23, 1: bb25, otherwise: bb24];
    }

    bb23: {
        StorageLive(_67);
        _67 = ((_5 as Continue).0: ());
        _4 = _67;
        StorageDead(_67);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_1;
        _76 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _77) -> [return: bb27, unwind continue];
    }

    bb24: {
        unreachable;
    }

    bb25: {
        StorageLive(_64);
        _64 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb72;
    }

    bb27: {
        _75 = &(*_76);
        _74 = <anchor_spl::token::TokenAccount as Deref>::deref(move _75) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_77);
        StorageDead(_75);
        _73 = &((*_74).0: anchor_lang::prelude::Pubkey);
        _72 = &_73;
        StorageLive(_78);
        _78 = &_2;
        _71 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _72, move _78) -> [return: bb29, unwind continue];
    }

    bb29: {
        switchInt(move _71) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_79);
        _79 = ();
        _70 = std::result::Result::<(), error::ErrorCode>::Ok(move _79);
        StorageDead(_79);
        goto -> bb47;
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageLive(_80);
        _80 = error::ErrorCode::InvalidWhitelistToken;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _184 = const _;
        _91 = &(*_184);
        _90 = &(*_91);
        _89 = move _90 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_80;
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _98) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_98);
        _96 = [move _97];
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_94);
        _88 = Arguments::<'_>::new_v1(move _89, move _93) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_93);
        StorageDead(_89);
        _87 = format(move _88) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_88);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        _86 = move _87;
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <String as Deref>::deref(move _84) -> [return: bb35, unwind: bb76];
    }

    bb35: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb36, unwind: bb76];
    }

    bb36: {
        StorageDead(_82);
        drop(_86) -> [return: bb37, unwind: bb79];
    }

    bb37: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _183 = const _;
        _110 = &(*_183);
        _109 = &(*_110);
        _108 = move _109 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_109);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_1;
        _121 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _122) -> [return: bb38, unwind continue];
    }

    bb38: {
        _120 = &(*_121);
        _119 = <anchor_spl::token::TokenAccount as Deref>::deref(move _120) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_122);
        StorageDead(_120);
        _118 = &((*_119).0: anchor_lang::prelude::Pubkey);
        _117 = &(*_118);
        _116 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _117) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_117);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_2;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_lang::prelude::Pubkey>(move _124) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_124);
        _115 = [move _116, move _123];
        StorageDead(_123);
        StorageDead(_116);
        _114 = &_115;
        _113 = &(*_114);
        _112 = move _113 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_113);
        _107 = Arguments::<'_>::new_v1(move _108, move _112) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_112);
        StorageDead(_108);
        _106 = format(move _107) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_107);
        StorageDead(_125);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_110);
        _105 = move _106;
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = <String as Deref>::deref(move _103) -> [return: bb44, unwind: bb75];
    }

    bb44: {
        _101 = &(*_102);
        StorageDead(_103);
        _100 = solana_program::log::sol_log(move _101) -> [return: bb45, unwind: bb75];
    }

    bb45: {
        StorageDead(_101);
        drop(_105) -> [return: bb46, unwind: bb79];
    }

    bb46: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_126);
        _126 = _80;
        _70 = std::result::Result::<(), error::ErrorCode>::Err(move _126);
        StorageDead(_126);
        StorageDead(_80);
        goto -> bb47;
    }

    bb47: {
        StorageDead(_71);
        _69 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _70) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_70);
        _127 = discriminant(_69);
        switchInt(move _127) -> [0: bb49, 1: bb50, otherwise: bb24];
    }

    bb49: {
        StorageLive(_131);
        _131 = ((_69 as Continue).0: ());
        _68 = _131;
        StorageDead(_131);
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &_1;
        _139 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _140) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_128);
        _128 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb72;
    }

    bb52: {
        _138 = &(*_139);
        _137 = <anchor_spl::token::TokenAccount as Deref>::deref(move _138) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_140);
        StorageDead(_138);
        _136 = ((*_137).2: u64);
        _135 = Gt(move _136, const 0_u64);
        switchInt(move _135) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_141);
        _141 = ();
        _134 = std::result::Result::<(), error::ErrorCode>::Ok(move _141);
        StorageDead(_141);
        goto -> bb67;
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_136);
        StorageLive(_142);
        _142 = error::ErrorCode::InvalidWhitelistToken;
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _182 = const _;
        _153 = &(*_182);
        _152 = &(*_153);
        _151 = move _152 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_152);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_142;
        _160 = &(*_161);
        _159 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _160) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_160);
        _158 = [move _159];
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = move _156 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_156);
        _150 = Arguments::<'_>::new_v1(move _151, move _155) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_155);
        StorageDead(_151);
        _149 = format(move _150) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_150);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_153);
        _148 = move _149;
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = <String as Deref>::deref(move _146) -> [return: bb59, unwind: bb74];
    }

    bb59: {
        _144 = &(*_145);
        StorageDead(_146);
        _143 = solana_program::log::sol_log(move _144) -> [return: bb60, unwind: bb74];
    }

    bb60: {
        StorageDead(_144);
        drop(_148) -> [return: bb61, unwind: bb79];
    }

    bb61: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_143);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _181 = const _;
        _172 = &(*_181);
        _171 = &(*_172);
        _170 = move _171 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_171);
        _169 = Arguments::<'_>::new_const(move _170) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_170);
        _168 = format(move _169) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_169);
        StorageDead(_172);
        _167 = move _168;
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = <String as Deref>::deref(move _165) -> [return: bb64, unwind: bb73];
    }

    bb64: {
        _163 = &(*_164);
        StorageDead(_165);
        _162 = solana_program::log::sol_log(move _163) -> [return: bb65, unwind: bb73];
    }

    bb65: {
        StorageDead(_163);
        drop(_167) -> [return: bb66, unwind: bb79];
    }

    bb66: {
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageLive(_174);
        _174 = _142;
        _134 = std::result::Result::<(), error::ErrorCode>::Err(move _174);
        StorageDead(_174);
        StorageDead(_142);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_135);
        _133 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _134) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_134);
        _175 = discriminant(_133);
        switchInt(move _175) -> [0: bb69, 1: bb70, otherwise: bb24];
    }

    bb69: {
        StorageLive(_179);
        _179 = ((_133 as Continue).0: ());
        _132 = _179;
        StorageDead(_179);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_180);
        _180 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _180);
        StorageDead(_180);
        goto -> bb72;
    }

    bb70: {
        StorageLive(_176);
        _176 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb72;
    }

    bb72: {
        return;
    }

    bb73 (cleanup): {
        drop(_167) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        drop(_148) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_105) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_86) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_41) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_22) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        resume;
    }
}
