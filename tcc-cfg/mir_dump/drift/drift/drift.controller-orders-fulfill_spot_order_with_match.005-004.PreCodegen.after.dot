digraph Mir_0_563 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn fulfill_spot_order_with_match(_1: &amp;ReErased mut state::spot_market::SpotMarket, _2: &amp;ReErased mut state::spot_market::SpotMarket, _3: &amp;ReErased mut state::user::User, _4: &amp;ReErased mut state::user::UserStats, _5: usize, _6: &amp;ReErased anchor_lang::prelude::Pubkey, _7: &amp;ReErased mut state::user::User, _8: &amp;ReErased mut std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _9: usize, _10: &amp;ReErased anchor_lang::prelude::Pubkey, _11: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, _12: std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _13: &amp;ReErased anchor_lang::prelude::Pubkey, _14: i64, _15: u64, _16: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _17: &amp;ReErased state::state::FeeStructure) -&gt; std::result::Result&lt;(u64, u64), error::ErrorCode&gt;<br align="left"/>let _18: ();<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: &amp;ReErased state::user::Order;<br align="left"/>let _21: &amp;ReErased state::user::Order;<br align="left"/>let _22: usize;<br align="left"/>let mut _23: usize;<br align="left"/>let mut _24: bool;<br align="left"/>let mut _25: &amp;ReErased state::user::Order;<br align="left"/>let _26: &amp;ReErased state::user::Order;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: usize;<br align="left"/>let mut _29: bool;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: (u64, u64);<br align="left"/>let _32: u16;<br align="left"/>let _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: bool;<br align="left"/>let _36: i64;<br align="left"/>let mut _37: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _38: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _39: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _40: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _41: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _42: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _43: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _44: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _49: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _50: u64;<br align="left"/>let mut _51: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _52: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::option::Option&lt;u64&gt;&gt;;<br align="left"/>let mut _53: std::result::Result&lt;std::option::Option&lt;u64&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _54: &amp;ReErased state::user::Order;<br align="left"/>let _55: usize;<br align="left"/>let mut _56: usize;<br align="left"/>let mut _57: bool;<br align="left"/>let mut _58: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _59: i64;<br align="left"/>let mut _60: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _61: u64;<br align="left"/>let mut _62: u64;<br align="left"/>let mut _63: std::option::Option&lt;state::protected_maker_mode_config::ProtectedMakerParams&gt;;<br align="left"/>let mut _64: isize;<br align="left"/>let _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _66: !;<br align="left"/>let mut _67: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _68: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _69: isize;<br align="left"/>let _70: u64;<br align="left"/>let mut _71: !;<br align="left"/>let mut _72: (u64, u64);<br align="left"/>let _73: usize;<br align="left"/>let mut _74: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _75: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _76: &amp;ReErased state::user::User;<br align="left"/>let mut _77: u16;<br align="left"/>let mut _78: isize;<br align="left"/>let _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _80: !;<br align="left"/>let mut _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _82: usize;<br align="left"/>let _83: i128;<br align="left"/>let mut _84: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _85: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _86: &amp;ReErased state::user::SpotPosition;<br align="left"/>let _87: usize;<br align="left"/>let mut _88: usize;<br align="left"/>let mut _89: bool;<br align="left"/>let mut _90: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _91: isize;<br align="left"/>let _92: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _93: !;<br align="left"/>let mut _94: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _95: i128;<br align="left"/>let _96: u64;<br align="left"/>let mut _97: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _98: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _99: &amp;ReErased state::user::Order;<br align="left"/>let _100: usize;<br align="left"/>let mut _101: usize;<br align="left"/>let mut _102: bool;<br align="left"/>let mut _103: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _104: i64;<br align="left"/>let mut _105: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _106: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _107: i128;<br align="left"/>let mut _108: isize;<br align="left"/>let _109: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _110: !;<br align="left"/>let mut _111: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _112: i64;<br align="left"/>let mut _113: u64;<br align="left"/>let mut _114: isize;<br align="left"/>let _115: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _116: !;<br align="left"/>let mut _117: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _118: u64;<br align="left"/>let _119: u64;<br align="left"/>let _120: usize;<br align="left"/>let mut _121: usize;<br align="left"/>let mut _122: bool;<br align="left"/>let _123: controller::position::PositionDirection;<br align="left"/>let _124: usize;<br align="left"/>let mut _125: usize;<br align="left"/>let mut _126: bool;<br align="left"/>let _127: u64;<br align="left"/>let mut _128: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _129: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _130: &amp;ReErased state::user::Order;<br align="left"/>let _131: usize;<br align="left"/>let mut _132: usize;<br align="left"/>let mut _133: bool;<br align="left"/>let mut _134: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _135: i64;<br align="left"/>let mut _136: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _137: u64;<br align="left"/>let mut _138: u64;<br align="left"/>let mut _139: std::option::Option&lt;state::protected_maker_mode_config::ProtectedMakerParams&gt;;<br align="left"/>let mut _140: isize;<br align="left"/>let _141: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _142: !;<br align="left"/>let mut _143: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _144: u64;<br align="left"/>let _145: controller::position::PositionDirection;<br align="left"/>let _146: usize;<br align="left"/>let mut _147: usize;<br align="left"/>let mut _148: bool;<br align="left"/>let _149: usize;<br align="left"/>let mut _150: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _151: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _152: &amp;ReErased state::user::User;<br align="left"/>let mut _153: u16;<br align="left"/>let mut _154: isize;<br align="left"/>let _155: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _156: !;<br align="left"/>let mut _157: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _158: usize;<br align="left"/>let _159: i128;<br align="left"/>let mut _160: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _161: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _162: &amp;ReErased state::user::SpotPosition;<br align="left"/>let _163: usize;<br align="left"/>let mut _164: usize;<br align="left"/>let mut _165: bool;<br align="left"/>let mut _166: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _167: isize;<br align="left"/>let _168: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _169: !;<br align="left"/>let mut _170: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _171: i128;<br align="left"/>let _172: u64;<br align="left"/>let mut _173: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _174: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _175: &amp;ReErased state::user::Order;<br align="left"/>let _176: usize;<br align="left"/>let mut _177: usize;<br align="left"/>let mut _178: bool;<br align="left"/>let mut _179: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _180: i64;<br align="left"/>let mut _181: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _182: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _183: i128;<br align="left"/>let mut _184: isize;<br align="left"/>let _185: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _186: !;<br align="left"/>let mut _187: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _188: i64;<br align="left"/>let mut _189: u64;<br align="left"/>let mut _190: isize;<br align="left"/>let _191: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _192: !;<br align="left"/>let mut _193: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _194: u64;<br align="left"/>let _195: bool;<br align="left"/>let mut _196: controller::position::PositionDirection;<br align="left"/>let mut _197: u64;<br align="left"/>let mut _198: u64;<br align="left"/>let _199: ();<br align="left"/>let mut _200: bool;<br align="left"/>let mut _201: !;<br align="left"/>let _202: ();<br align="left"/>let mut _203: &amp;ReErased str;<br align="left"/>let _204: &amp;ReErased str;<br align="left"/>let mut _205: &amp;ReErased std::string::String;<br align="left"/>let _206: &amp;ReErased std::string::String;<br align="left"/>let _207: std::string::String;<br align="left"/>let _208: std::string::String;<br align="left"/>let mut _209: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _210: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _211: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _212: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _213: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _214: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _215: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _216: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _217: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _218: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _219: &amp;ReErased u64;<br align="left"/>let _220: &amp;ReErased u64;<br align="left"/>let mut _221: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _222: &amp;ReErased u64;<br align="left"/>let _223: &amp;ReErased u64;<br align="left"/>let mut _224: (u64, u64);<br align="left"/>let _225: std::option::Option&lt;u64&gt;;<br align="left"/>let _226: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _227: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _228: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;)&gt;;<br align="left"/>let mut _229: std::result::Result&lt;(std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;;<br align="left"/>let mut _230: &amp;ReErased state::user::User;<br align="left"/>let mut _231: usize;<br align="left"/>let mut _232: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _233: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _234: isize;<br align="left"/>let _235: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _236: !;<br align="left"/>let mut _237: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _238: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let _239: u64;<br align="left"/>let mut _240: isize;<br align="left"/>let _241: u64;<br align="left"/>let _242: u64;<br align="left"/>let mut _243: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _244: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _245: u64;<br align="left"/>let mut _246: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _247: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _248: u128;<br align="left"/>let mut _249: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _250: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _251: u128;<br align="left"/>let mut _252: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _253: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _254: u128;<br align="left"/>let mut _255: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _256: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _257: u64;<br align="left"/>let mut _258: isize;<br align="left"/>let _259: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _260: !;<br align="left"/>let mut _261: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _262: u128;<br align="left"/>let mut _263: u128;<br align="left"/>let mut _264: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _265: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _266: u64;<br align="left"/>let mut _267: state::spot_market::SpotMarket;<br align="left"/>let mut _268: isize;<br align="left"/>let _269: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _270: !;<br align="left"/>let mut _271: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _272: u128;<br align="left"/>let mut _273: isize;<br align="left"/>let _274: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _275: !;<br align="left"/>let mut _276: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _277: u128;<br align="left"/>let mut _278: u128;<br align="left"/>let mut _279: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _280: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _281: u64;<br align="left"/>let mut _282: isize;<br align="left"/>let _283: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _284: !;<br align="left"/>let mut _285: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _286: u128;<br align="left"/>let mut _287: isize;<br align="left"/>let _288: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _289: !;<br align="left"/>let mut _290: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _291: u128;<br align="left"/>let mut _292: isize;<br align="left"/>let _293: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _294: !;<br align="left"/>let mut _295: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _296: u64;<br align="left"/>let mut _297: u64;<br align="left"/>let mut _298: isize;<br align="left"/>let _299: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _300: !;<br align="left"/>let mut _301: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _302: u64;<br align="left"/>let mut _303: u64;<br align="left"/>let mut _304: u64;<br align="left"/>let mut _305: isize;<br align="left"/>let _306: u64;<br align="left"/>let mut _307: u64;<br align="left"/>let mut _308: u64;<br align="left"/>let _309: std::option::Option&lt;u64&gt;;<br align="left"/>let _310: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _311: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _312: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;)&gt;;<br align="left"/>let mut _313: std::result::Result&lt;(std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;;<br align="left"/>let mut _314: &amp;ReErased state::user::User;<br align="left"/>let mut _315: usize;<br align="left"/>let mut _316: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _317: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _318: isize;<br align="left"/>let _319: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _320: !;<br align="left"/>let mut _321: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _322: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let _323: u64;<br align="left"/>let mut _324: isize;<br align="left"/>let _325: u64;<br align="left"/>let _326: u64;<br align="left"/>let mut _327: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _328: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _329: u64;<br align="left"/>let mut _330: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _331: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _332: u128;<br align="left"/>let mut _333: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _334: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _335: u128;<br align="left"/>let mut _336: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _337: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _338: u128;<br align="left"/>let mut _339: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _340: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _341: u64;<br align="left"/>let mut _342: isize;<br align="left"/>let _343: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _344: !;<br align="left"/>let mut _345: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _346: u128;<br align="left"/>let mut _347: u128;<br align="left"/>let mut _348: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _349: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _350: u64;<br align="left"/>let mut _351: state::spot_market::SpotMarket;<br align="left"/>let mut _352: isize;<br align="left"/>let _353: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _354: !;<br align="left"/>let mut _355: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _356: u128;<br align="left"/>let mut _357: isize;<br align="left"/>let _358: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _359: !;<br align="left"/>let mut _360: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _361: u128;<br align="left"/>let mut _362: u128;<br align="left"/>let mut _363: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _364: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _365: u64;<br align="left"/>let mut _366: isize;<br align="left"/>let _367: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _368: !;<br align="left"/>let mut _369: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _370: u128;<br align="left"/>let mut _371: isize;<br align="left"/>let _372: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _373: !;<br align="left"/>let mut _374: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _375: u128;<br align="left"/>let mut _376: isize;<br align="left"/>let _377: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _378: !;<br align="left"/>let mut _379: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _380: u64;<br align="left"/>let mut _381: u64;<br align="left"/>let mut _382: isize;<br align="left"/>let _383: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _384: !;<br align="left"/>let mut _385: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _386: u64;<br align="left"/>let mut _387: u64;<br align="left"/>let mut _388: u64;<br align="left"/>let mut _389: isize;<br align="left"/>let _390: u64;<br align="left"/>let mut _391: u64;<br align="left"/>let mut _392: u64;<br align="left"/>let _393: u64;<br align="left"/>let _394: u64;<br align="left"/>let mut _395: (u64, u64);<br align="left"/>let mut _396: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _397: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _398: u64;<br align="left"/>let mut _399: u64;<br align="left"/>let mut _400: u64;<br align="left"/>let mut _401: u32;<br align="left"/>let mut _402: controller::position::PositionDirection;<br align="left"/>let mut _403: isize;<br align="left"/>let _404: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _405: !;<br align="left"/>let mut _406: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _407: (u64, u64);<br align="left"/>let _408: ();<br align="left"/>let mut _409: bool;<br align="left"/>let mut _410: u64;<br align="left"/>let mut _411: !;<br align="left"/>let mut _412: (u64, u64);<br align="left"/>let _413: u64;<br align="left"/>let mut _414: state::spot_market::SpotMarket;<br align="left"/>let _415: ();<br align="left"/>let mut _416: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _417: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _418: u64;<br align="left"/>let mut _419: u64;<br align="left"/>let mut _420: u64;<br align="left"/>let mut _421: controller::position::PositionDirection;<br align="left"/>let mut _422: u64;<br align="left"/>let mut _423: isize;<br align="left"/>let _424: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _425: !;<br align="left"/>let mut _426: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _427: ();<br align="left"/>let _428: ();<br align="left"/>let mut _429: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _430: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _431: u64;<br align="left"/>let mut _432: u64;<br align="left"/>let mut _433: u64;<br align="left"/>let mut _434: controller::position::PositionDirection;<br align="left"/>let mut _435: u64;<br align="left"/>let mut _436: isize;<br align="left"/>let _437: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _438: !;<br align="left"/>let mut _439: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _440: ();<br align="left"/>let _441: u64;<br align="left"/>let mut _442: bool;<br align="left"/>let mut _443: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _444: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _445: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _446: u64;<br align="left"/>let mut _447: controller::position::PositionDirection;<br align="left"/>let mut _448: i64;<br align="left"/>let mut _449: isize;<br align="left"/>let _450: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _451: !;<br align="left"/>let mut _452: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _453: u64;<br align="left"/>let _454: u64;<br align="left"/>let _455: u64;<br align="left"/>let _456: u64;<br align="left"/>let _457: i64;<br align="left"/>let mut _458: math::fees::FillFees;<br align="left"/>let mut _459: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::fees::FillFees&gt;;<br align="left"/>let mut _460: std::result::Result&lt;math::fees::FillFees, error::ErrorCode&gt;;<br align="left"/>let mut _461: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _462: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _463: u64;<br align="left"/>let mut _464: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _465: u64;<br align="left"/>let mut _466: u64;<br align="left"/>let mut _467: u64;<br align="left"/>let mut _468: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let _469: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let _470: std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _471: &amp;ReErased state::user::MarketType;<br align="left"/>let _472: &amp;ReErased state::user::MarketType;<br align="left"/>let _473: state::user::MarketType;<br align="left"/>let mut _474: i16;<br align="left"/>let mut _475: isize;<br align="left"/>let _476: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _477: !;<br align="left"/>let mut _478: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _479: math::fees::FillFees;<br align="left"/>let _480: ();<br align="left"/>let mut _481: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _482: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _483: u128;<br align="left"/>let mut _484: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _485: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _486: u64;<br align="left"/>let mut _487: isize;<br align="left"/>let _488: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _489: !;<br align="left"/>let mut _490: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _491: u128;<br align="left"/>let mut _492: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _493: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _494: state::spot_market::SpotBalanceType;<br align="left"/>let mut _495: &amp;ReErased state::user::Order;<br align="left"/>let _496: usize;<br align="left"/>let mut _497: usize;<br align="left"/>let mut _498: bool;<br align="left"/>let mut _499: state::user::AssetType;<br align="left"/>let mut _500: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _501: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _502: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let _503: usize;<br align="left"/>let mut _504: usize;<br align="left"/>let mut _505: bool;<br align="left"/>let mut _506: std::option::Option&lt;u128&gt;;<br align="left"/>let mut _507: isize;<br align="left"/>let _508: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _509: !;<br align="left"/>let mut _510: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _511: ();<br align="left"/>let _512: u64;<br align="left"/>let mut _513: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _514: usize;<br align="left"/>let mut _515: usize;<br align="left"/>let mut _516: bool;<br align="left"/>let mut _517: isize;<br align="left"/>let mut _518: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _519: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _520: u64;<br align="left"/>let mut _521: u64;<br align="left"/>let mut _522: isize;<br align="left"/>let _523: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _524: !;<br align="left"/>let mut _525: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _526: u64;<br align="left"/>let mut _527: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _528: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _529: u64;<br align="left"/>let mut _530: u64;<br align="left"/>let mut _531: isize;<br align="left"/>let _532: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _533: !;<br align="left"/>let mut _534: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _535: u64;<br align="left"/>let _536: ();<br align="left"/>let mut _537: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _538: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _539: u128;<br align="left"/>let mut _540: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _541: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _542: u64;<br align="left"/>let mut _543: isize;<br align="left"/>let _544: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _545: !;<br align="left"/>let mut _546: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _547: u128;<br align="left"/>let mut _548: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _549: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _550: state::spot_market::SpotBalanceType;<br align="left"/>let mut _551: &amp;ReErased state::user::Order;<br align="left"/>let _552: usize;<br align="left"/>let mut _553: usize;<br align="left"/>let mut _554: bool;<br align="left"/>let mut _555: state::user::AssetType;<br align="left"/>let mut _556: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _557: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _558: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _559: &amp;ReErased mut state::user::User;<br align="left"/>let mut _560: std::option::Option&lt;u128&gt;;<br align="left"/>let mut _561: u128;<br align="left"/>let mut _562: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _563: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _564: u64;<br align="left"/>let mut _565: isize;<br align="left"/>let _566: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _567: !;<br align="left"/>let mut _568: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _569: u128;<br align="left"/>let mut _570: isize;<br align="left"/>let _571: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _572: !;<br align="left"/>let mut _573: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _574: ();<br align="left"/>let _575: ();<br align="left"/>let mut _576: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _577: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _578: &amp;ReErased mut state::user::User;<br align="left"/>let mut _579: i64;<br align="left"/>let mut _580: i64;<br align="left"/>let mut _581: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _582: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _583: u64;<br align="left"/>let mut _584: isize;<br align="left"/>let _585: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _586: !;<br align="left"/>let mut _587: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _588: i64;<br align="left"/>let mut _589: bool;<br align="left"/>let mut _590: isize;<br align="left"/>let _591: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _592: !;<br align="left"/>let mut _593: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _594: ();<br align="left"/>let _595: ();<br align="left"/>let mut _596: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _597: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _598: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _599: &amp;ReErased mut state::user::Order;<br align="left"/>let _600: usize;<br align="left"/>let mut _601: usize;<br align="left"/>let mut _602: bool;<br align="left"/>let mut _603: u64;<br align="left"/>let mut _604: u64;<br align="left"/>let mut _605: isize;<br align="left"/>let _606: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _607: !;<br align="left"/>let mut _608: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _609: ();<br align="left"/>let _610: controller::position::PositionDirection;<br align="left"/>let _611: usize;<br align="left"/>let mut _612: usize;<br align="left"/>let mut _613: bool;<br align="left"/>let _614: bool;<br align="left"/>let mut _615: &amp;ReErased state::user::Order;<br align="left"/>let _616: usize;<br align="left"/>let mut _617: usize;<br align="left"/>let mut _618: bool;<br align="left"/>let _619: ();<br align="left"/>let mut _620: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _621: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _622: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _623: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let _624: usize;<br align="left"/>let mut _625: usize;<br align="left"/>let mut _626: bool;<br align="left"/>let mut _627: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _628: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _629: u64;<br align="left"/>let mut _630: bool;<br align="left"/>let mut _631: isize;<br align="left"/>let _632: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _633: !;<br align="left"/>let mut _634: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _635: ();<br align="left"/>let _636: ();<br align="left"/>let mut _637: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _638: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _639: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _640: u8;<br align="left"/>let mut _641: u64;<br align="left"/>let mut _642: i64;<br align="left"/>let mut _643: isize;<br align="left"/>let _644: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _645: !;<br align="left"/>let mut _646: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _647: ();<br align="left"/>let _648: ();<br align="left"/>let mut _649: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _650: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _651: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _652: u64;<br align="left"/>let mut _653: isize;<br align="left"/>let _654: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _655: !;<br align="left"/>let mut _656: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _657: ();<br align="left"/>let _658: ();<br align="left"/>let mut _659: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _660: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _661: u128;<br align="left"/>let mut _662: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _663: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _664: u64;<br align="left"/>let mut _665: isize;<br align="left"/>let _666: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _667: !;<br align="left"/>let mut _668: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _669: u128;<br align="left"/>let mut _670: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _671: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _672: state::spot_market::SpotBalanceType;<br align="left"/>let mut _673: &amp;ReErased state::user::Order;<br align="left"/>let _674: usize;<br align="left"/>let mut _675: usize;<br align="left"/>let mut _676: bool;<br align="left"/>let mut _677: state::user::AssetType;<br align="left"/>let mut _678: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _679: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _680: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let _681: usize;<br align="left"/>let mut _682: usize;<br align="left"/>let mut _683: bool;<br align="left"/>let mut _684: std::option::Option&lt;u128&gt;;<br align="left"/>let mut _685: isize;<br align="left"/>let _686: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _687: !;<br align="left"/>let mut _688: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _689: ();<br align="left"/>let _690: u64;<br align="left"/>let mut _691: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _692: usize;<br align="left"/>let mut _693: usize;<br align="left"/>let mut _694: bool;<br align="left"/>let mut _695: isize;<br align="left"/>let mut _696: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _697: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _698: u64;<br align="left"/>let mut _699: u64;<br align="left"/>let mut _700: isize;<br align="left"/>let _701: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _702: !;<br align="left"/>let mut _703: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _704: u64;<br align="left"/>let mut _705: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _706: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _707: u64;<br align="left"/>let mut _708: u64;<br align="left"/>let mut _709: isize;<br align="left"/>let _710: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _711: !;<br align="left"/>let mut _712: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _713: u64;<br align="left"/>let _714: ();<br align="left"/>let mut _715: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _716: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _717: u128;<br align="left"/>let mut _718: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _719: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _720: u64;<br align="left"/>let mut _721: isize;<br align="left"/>let _722: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _723: !;<br align="left"/>let mut _724: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _725: u128;<br align="left"/>let mut _726: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _727: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _728: state::spot_market::SpotBalanceType;<br align="left"/>let mut _729: &amp;ReErased state::user::Order;<br align="left"/>let _730: usize;<br align="left"/>let mut _731: usize;<br align="left"/>let mut _732: bool;<br align="left"/>let mut _733: state::user::AssetType;<br align="left"/>let mut _734: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _735: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _736: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _737: &amp;ReErased mut state::user::User;<br align="left"/>let mut _738: std::option::Option&lt;u128&gt;;<br align="left"/>let mut _739: u128;<br align="left"/>let mut _740: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _741: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _742: u64;<br align="left"/>let mut _743: isize;<br align="left"/>let _744: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _745: !;<br align="left"/>let mut _746: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _747: u128;<br align="left"/>let mut _748: isize;<br align="left"/>let _749: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _750: !;<br align="left"/>let mut _751: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _752: ();<br align="left"/>let _753: ();<br align="left"/>let mut _754: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _755: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _756: &amp;ReErased mut state::user::User;<br align="left"/>let mut _757: i64;<br align="left"/>let mut _758: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _759: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _760: u64;<br align="left"/>let mut _761: isize;<br align="left"/>let _762: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _763: !;<br align="left"/>let mut _764: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _765: i64;<br align="left"/>let mut _766: isize;<br align="left"/>let _767: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _768: !;<br align="left"/>let mut _769: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _770: ();<br align="left"/>let _771: ();<br align="left"/>let mut _772: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _773: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _774: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _775: &amp;ReErased mut state::user::Order;<br align="left"/>let _776: usize;<br align="left"/>let mut _777: usize;<br align="left"/>let mut _778: bool;<br align="left"/>let mut _779: u64;<br align="left"/>let mut _780: u64;<br align="left"/>let mut _781: isize;<br align="left"/>let _782: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _783: !;<br align="left"/>let mut _784: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _785: ();<br align="left"/>let _786: controller::position::PositionDirection;<br align="left"/>let _787: usize;<br align="left"/>let mut _788: usize;<br align="left"/>let mut _789: bool;<br align="left"/>let _790: bool;<br align="left"/>let mut _791: &amp;ReErased state::user::Order;<br align="left"/>let _792: usize;<br align="left"/>let mut _793: usize;<br align="left"/>let mut _794: bool;<br align="left"/>let _795: ();<br align="left"/>let mut _796: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _797: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _798: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _799: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let _800: usize;<br align="left"/>let mut _801: usize;<br align="left"/>let mut _802: bool;<br align="left"/>let mut _803: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _804: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _805: u64;<br align="left"/>let mut _806: bool;<br align="left"/>let mut _807: isize;<br align="left"/>let _808: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _809: !;<br align="left"/>let mut _810: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _811: ();<br align="left"/>let _812: ();<br align="left"/>let mut _813: isize;<br align="left"/>let _814: &amp;ReErased mut &amp;ReErased mut state::user::UserStats;<br align="left"/>let _815: ();<br align="left"/>let mut _816: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _817: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _818: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _819: u8;<br align="left"/>let mut _820: u64;<br align="left"/>let mut _821: i64;<br align="left"/>let mut _822: isize;<br align="left"/>let _823: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _824: !;<br align="left"/>let mut _825: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _826: ();<br align="left"/>let _827: ();<br align="left"/>let mut _828: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _829: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _830: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _831: u64;<br align="left"/>let mut _832: isize;<br align="left"/>let _833: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _834: !;<br align="left"/>let mut _835: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _836: ();<br align="left"/>let _837: ();<br align="left"/>let mut _838: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _839: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _840: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _841: u8;<br align="left"/>let mut _842: u64;<br align="left"/>let mut _843: i64;<br align="left"/>let mut _844: isize;<br align="left"/>let _845: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _846: !;<br align="left"/>let mut _847: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _848: ();<br align="left"/>let _849: ();<br align="left"/>let mut _850: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _851: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _852: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _853: u64;<br align="left"/>let mut _854: isize;<br align="left"/>let _855: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _856: !;<br align="left"/>let mut _857: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _858: ();<br align="left"/>let _859: ();<br align="left"/>let mut _860: (std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;);<br align="left"/>let mut _861: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _862: std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _863: isize;<br align="left"/>let mut _864: isize;<br align="left"/>let _865: &amp;ReErased mut state::user::User;<br align="left"/>let _866: &amp;ReErased mut state::user::UserStats;<br align="left"/>let _867: ();<br align="left"/>let mut _868: bool;<br align="left"/>let mut _869: u64;<br align="left"/>let _870: ();<br align="left"/>let mut _871: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _872: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _873: u128;<br align="left"/>let mut _874: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _875: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _876: u64;<br align="left"/>let mut _877: isize;<br align="left"/>let _878: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _879: !;<br align="left"/>let mut _880: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _881: u128;<br align="left"/>let mut _882: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _883: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _884: state::spot_market::SpotBalanceType;<br align="left"/>let mut _885: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _886: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _887: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _888: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _889: &amp;ReErased mut state::user::User;<br align="left"/>let mut _890: isize;<br align="left"/>let _891: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _892: !;<br align="left"/>let mut _893: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _894: ();<br align="left"/>let _895: ();<br align="left"/>let mut _896: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _897: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _898: &amp;ReErased mut state::user::User;<br align="left"/>let mut _899: i64;<br align="left"/>let mut _900: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _901: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _902: u64;<br align="left"/>let mut _903: isize;<br align="left"/>let _904: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _905: !;<br align="left"/>let mut _906: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _907: i64;<br align="left"/>let mut _908: isize;<br align="left"/>let _909: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _910: !;<br align="left"/>let mut _911: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _912: ();<br align="left"/>let _913: ();<br align="left"/>let mut _914: &amp;ReErased mut state::user::User;<br align="left"/>let mut _915: u64;<br align="left"/>let _916: ();<br align="left"/>let mut _917: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _918: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _919: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _920: u64;<br align="left"/>let mut _921: i64;<br align="left"/>let mut _922: isize;<br align="left"/>let _923: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _924: !;<br align="left"/>let mut _925: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _926: ();<br align="left"/>let mut _927: u128;<br align="left"/>let mut _928: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _929: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _930: u128;<br align="left"/>let mut _931: u128;<br align="left"/>let mut _932: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _933: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _934: i64;<br align="left"/>let mut _935: isize;<br align="left"/>let _936: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _937: !;<br align="left"/>let mut _938: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _939: u128;<br align="left"/>let mut _940: isize;<br align="left"/>let _941: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _942: !;<br align="left"/>let mut _943: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _944: u128;<br align="left"/>let _945: ();<br align="left"/>let mut _946: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _947: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _948: u128;<br align="left"/>let mut _949: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _950: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _951: i64;<br align="left"/>let mut _952: isize;<br align="left"/>let _953: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _954: !;<br align="left"/>let mut _955: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _956: u128;<br align="left"/>let mut _957: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _958: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _959: state::spot_market::SpotBalanceType;<br align="left"/>let mut _960: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _961: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _962: &amp;ReErased mut state::perp_market::PoolBalance;<br align="left"/>let mut _963: &amp;ReErased mut state::perp_market::PoolBalance;<br align="left"/>let mut _964: isize;<br align="left"/>let _965: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _966: !;<br align="left"/>let mut _967: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _968: ();<br align="left"/>let _969: u64;<br align="left"/>let _970: u64;<br align="left"/>let mut _971: u64;<br align="left"/>let mut _972: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _973: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _974: u64;<br align="left"/>let mut _975: std::option::Option&lt;u64&gt;;<br align="left"/>let _976: state::events::OrderActionExplanation;<br align="left"/>let mut _977: bool;<br align="left"/>let mut _978: &amp;ReErased state::user::Order;<br align="left"/>let _979: usize;<br align="left"/>let mut _980: usize;<br align="left"/>let mut _981: bool;<br align="left"/>let _982: state::events::OrderActionRecord;<br align="left"/>let mut _983: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::events::OrderActionRecord&gt;;<br align="left"/>let mut _984: std::result::Result&lt;state::events::OrderActionRecord, error::ErrorCode&gt;;<br align="left"/>let mut _985: i64;<br align="left"/>let mut _986: state::events::OrderAction;<br align="left"/>let mut _987: state::events::OrderActionExplanation;<br align="left"/>let mut _988: u16;<br align="left"/>let _989: usize;<br align="left"/>let mut _990: usize;<br align="left"/>let mut _991: bool;<br align="left"/>let mut _992: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _993: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _994: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _995: u64;<br align="left"/>let mut _996: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _997: u64;<br align="left"/>let mut _998: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _999: u64;<br align="left"/>let mut _1000: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1001: u64;<br align="left"/>let mut _1002: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1003: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1004: u64;<br align="left"/>let mut _1005: isize;<br align="left"/>let _1006: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1007: !;<br align="left"/>let mut _1008: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1009: u64;<br align="left"/>let mut _1010: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1011: u64;<br align="left"/>let mut _1012: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1013: u64;<br align="left"/>let mut _1014: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1015: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _1016: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1017: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _1018: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1019: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _1020: state::user::Order;<br align="left"/>let _1021: usize;<br align="left"/>let mut _1022: usize;<br align="left"/>let mut _1023: bool;<br align="left"/>let mut _1024: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _1025: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _1026: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _1027: state::user::Order;<br align="left"/>let _1028: usize;<br align="left"/>let mut _1029: usize;<br align="left"/>let mut _1030: bool;<br align="left"/>let mut _1031: i64;<br align="left"/>let mut _1032: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _1033: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _1034: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _1035: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _1036: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _1037: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _1038: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _1039: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _1040: isize;<br align="left"/>let _1041: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1042: !;<br align="left"/>let mut _1043: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1044: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _1045: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1046: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1047: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1048: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1049: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _1050: isize;<br align="left"/>let _1051: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1052: !;<br align="left"/>let mut _1053: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1054: state::events::OrderActionRecord;<br align="left"/>let _1055: ();<br align="left"/>let mut _1056: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _1057: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _1058: state::events::OrderActionRecord;<br align="left"/>let mut _1059: isize;<br align="left"/>let _1060: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1061: !;<br align="left"/>let mut _1062: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1063: ();<br align="left"/>let _1064: ();<br align="left"/>let mut _1065: bool;<br align="left"/>let mut _1066: u64;<br align="left"/>let mut _1067: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1068: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1069: &amp;ReErased state::user::Order;<br align="left"/>let _1070: usize;<br align="left"/>let mut _1071: usize;<br align="left"/>let mut _1072: bool;<br align="left"/>let mut _1073: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _1074: isize;<br align="left"/>let _1075: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1076: !;<br align="left"/>let mut _1077: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1078: u64;<br align="left"/>let _1079: ();<br align="left"/>let mut _1080: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1081: bool;<br align="left"/>let mut _1082: &amp;ReErased state::user::Order;<br align="left"/>let _1083: usize;<br align="left"/>let mut _1084: usize;<br align="left"/>let mut _1085: bool;<br align="left"/>let mut _1086: state::user::OrderStatus;<br align="left"/>let _1087: usize;<br align="left"/>let mut _1088: usize;<br align="left"/>let mut _1089: bool;<br align="left"/>let _1090: usize;<br align="left"/>let mut _1091: usize;<br align="left"/>let mut _1092: bool;<br align="left"/>let mut _1093: (u8, bool);<br align="left"/>let _1094: ();<br align="left"/>let mut _1095: bool;<br align="left"/>let mut _1096: u64;<br align="left"/>let mut _1097: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _1098: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _1099: &amp;ReErased state::user::Order;<br align="left"/>let _1100: usize;<br align="left"/>let mut _1101: usize;<br align="left"/>let mut _1102: bool;<br align="left"/>let mut _1103: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _1104: isize;<br align="left"/>let _1105: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _1106: !;<br align="left"/>let mut _1107: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _1108: u64;<br align="left"/>let _1109: ();<br align="left"/>let mut _1110: &amp;ReErased mut state::user::User;<br align="left"/>let mut _1111: bool;<br align="left"/>let mut _1112: &amp;ReErased state::user::Order;<br align="left"/>let _1113: usize;<br align="left"/>let mut _1114: usize;<br align="left"/>let mut _1115: bool;<br align="left"/>let mut _1116: state::user::OrderStatus;<br align="left"/>let _1117: usize;<br align="left"/>let mut _1118: usize;<br align="left"/>let mut _1119: bool;<br align="left"/>let _1120: usize;<br align="left"/>let mut _1121: usize;<br align="left"/>let mut _1122: bool;<br align="left"/>let mut _1123: (u8, bool);<br align="left"/>let mut _1124: (u64, u64);<br align="left"/>let mut _1125: u64;<br align="left"/>let mut _1126: u64;<br align="left"/>let mut _1127: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _1128: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _1129: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _1130: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _1131: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _1132: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _1133: &amp;ReErased mut state::user::UserStats;<br align="left"/>debug base_market =&gt; _1;<br align="left"/>debug quote_market =&gt; _2;<br align="left"/>debug taker =&gt; _3;<br align="left"/>debug taker_stats =&gt; _4;<br align="left"/>debug taker_order_index =&gt; _5;<br align="left"/>debug taker_key =&gt; _6;<br align="left"/>debug maker =&gt; _7;<br align="left"/>debug maker_stats =&gt; _8;<br align="left"/>debug maker_order_index =&gt; _9;<br align="left"/>debug maker_key =&gt; _10;<br align="left"/>debug filler =&gt; _11;<br align="left"/>debug filler_stats =&gt; _12;<br align="left"/>debug filler_key =&gt; _13;<br align="left"/>debug now =&gt; _14;<br align="left"/>debug slot =&gt; _15;<br align="left"/>debug oracle_map =&gt; _16;<br align="left"/>debug fee_structure =&gt; _17;<br align="left"/>debug market_index =&gt; _32;<br align="left"/>debug oracle_price =&gt; _36;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>debug taker_price =&gt; _50;<br align="left"/>debug residual =&gt; _65;<br align="left"/>debug val =&gt; _68;<br align="left"/>debug price =&gt; _70;<br align="left"/>debug taker_spot_position_index =&gt; _73;<br align="left"/>debug residual =&gt; _79;<br align="left"/>debug val =&gt; _82;<br align="left"/>debug taker_token_amount =&gt; _83;<br align="left"/>debug residual =&gt; _92;<br align="left"/>debug val =&gt; _95;<br align="left"/>debug taker_base_asset_amount =&gt; _96;<br align="left"/>debug residual =&gt; _109;<br align="left"/>debug val =&gt; _112;<br align="left"/>debug residual =&gt; _115;<br align="left"/>debug val =&gt; _118;<br align="left"/>debug taker_order_slot =&gt; _119;<br align="left"/>debug taker_direction =&gt; _123;<br align="left"/>debug maker_price =&gt; _127;<br align="left"/>debug residual =&gt; _141;<br align="left"/>debug val =&gt; _144;<br align="left"/>debug maker_direction =&gt; _145;<br align="left"/>debug maker_spot_position_index =&gt; _149;<br align="left"/>debug residual =&gt; _155;<br align="left"/>debug val =&gt; _158;<br align="left"/>debug maker_token_amount =&gt; _159;<br align="left"/>debug residual =&gt; _168;<br align="left"/>debug val =&gt; _171;<br align="left"/>debug maker_base_asset_amount =&gt; _172;<br align="left"/>debug residual =&gt; _185;<br align="left"/>debug val =&gt; _188;<br align="left"/>debug residual =&gt; _191;<br align="left"/>debug val =&gt; _194;<br align="left"/>debug orders_cross =&gt; _195;<br align="left"/>debug res =&gt; _208;<br align="left"/>debug taker_max_base_asset_amount =&gt; _225;<br align="left"/>debug taker_max_quote_asset_amount =&gt; _226;<br align="left"/>debug residual =&gt; _235;<br align="left"/>debug val =&gt; _238;<br align="left"/>debug taker_base_asset_amount =&gt; _239;<br align="left"/>debug taker_max_quote_asset_amount =&gt; _241;<br align="left"/>debug taker_implied_max_base_asset_amount =&gt; _242;<br align="left"/>debug residual =&gt; _259;<br align="left"/>debug val =&gt; _262;<br align="left"/>debug residual =&gt; _269;<br align="left"/>debug val =&gt; _272;<br align="left"/>debug residual =&gt; _274;<br align="left"/>debug val =&gt; _277;<br align="left"/>debug residual =&gt; _283;<br align="left"/>debug val =&gt; _286;<br align="left"/>debug residual =&gt; _288;<br align="left"/>debug val =&gt; _291;<br align="left"/>debug residual =&gt; _293;<br align="left"/>debug val =&gt; _296;<br align="left"/>debug residual =&gt; _299;<br align="left"/>debug val =&gt; _302;<br align="left"/>debug taker_max_base_asset_amount =&gt; _306;<br align="left"/>debug maker_max_base_asset_amount =&gt; _309;<br align="left"/>debug maker_max_quote_asset_amount =&gt; _310;<br align="left"/>debug residual =&gt; _319;<br align="left"/>debug val =&gt; _322;<br align="left"/>debug maker_base_asset_amount =&gt; _323;<br align="left"/>debug maker_max_quote_asset_amount =&gt; _325;<br align="left"/>debug maker_implied_max_base_asset_amount =&gt; _326;<br align="left"/>debug residual =&gt; _343;<br align="left"/>debug val =&gt; _346;<br align="left"/>debug residual =&gt; _353;<br align="left"/>debug val =&gt; _356;<br align="left"/>debug residual =&gt; _358;<br align="left"/>debug val =&gt; _361;<br align="left"/>debug residual =&gt; _367;<br align="left"/>debug val =&gt; _370;<br align="left"/>debug residual =&gt; _372;<br align="left"/>debug val =&gt; _375;<br align="left"/>debug residual =&gt; _377;<br align="left"/>debug val =&gt; _380;<br align="left"/>debug residual =&gt; _383;<br align="left"/>debug val =&gt; _386;<br align="left"/>debug maker_max_base_asset_amount =&gt; _390;<br align="left"/>debug base_asset_amount =&gt; _393;<br align="left"/>debug quote_asset_amount =&gt; _394;<br align="left"/>debug residual =&gt; _404;<br align="left"/>debug val =&gt; _407;<br align="left"/>debug base_precision =&gt; _413;<br align="left"/>debug residual =&gt; _424;<br align="left"/>debug val =&gt; _427;<br align="left"/>debug residual =&gt; _437;<br align="left"/>debug val =&gt; _440;<br align="left"/>debug filler_multiplier =&gt; _441;<br align="left"/>debug residual =&gt; _450;<br align="left"/>debug val =&gt; _453;<br align="left"/>debug taker_fee =&gt; _454;<br align="left"/>debug maker_rebate =&gt; _455;<br align="left"/>debug filler_reward =&gt; _456;<br align="left"/>debug fee_to_market =&gt; _457;<br align="left"/>debug residual =&gt; _476;<br align="left"/>debug val =&gt; _479;<br align="left"/>debug residual =&gt; _488;<br align="left"/>debug val =&gt; _491;<br align="left"/>debug residual =&gt; _508;<br align="left"/>debug val =&gt; _511;<br align="left"/>debug taker_quote_asset_amount_delta =&gt; _512;<br align="left"/>debug residual =&gt; _523;<br align="left"/>debug val =&gt; _526;<br align="left"/>debug residual =&gt; _532;<br align="left"/>debug val =&gt; _535;<br align="left"/>debug residual =&gt; _544;<br align="left"/>debug val =&gt; _547;<br align="left"/>debug residual =&gt; _566;<br align="left"/>debug val =&gt; _569;<br align="left"/>debug residual =&gt; _571;<br align="left"/>debug val =&gt; _574;<br align="left"/>debug residual =&gt; _585;<br align="left"/>debug val =&gt; _588;<br align="left"/>debug residual =&gt; _591;<br align="left"/>debug val =&gt; _594;<br align="left"/>debug residual =&gt; _606;<br align="left"/>debug val =&gt; _609;<br align="left"/>debug taker_order_direction =&gt; _610;<br align="left"/>debug taker_update_open_bids_and_asks =&gt; _614;<br align="left"/>debug residual =&gt; _632;<br align="left"/>debug val =&gt; _635;<br align="left"/>debug residual =&gt; _644;<br align="left"/>debug val =&gt; _647;<br align="left"/>debug residual =&gt; _654;<br align="left"/>debug val =&gt; _657;<br align="left"/>debug residual =&gt; _666;<br align="left"/>debug val =&gt; _669;<br align="left"/>debug residual =&gt; _686;<br align="left"/>debug val =&gt; _689;<br align="left"/>debug maker_quote_asset_amount_delta =&gt; _690;<br align="left"/>debug residual =&gt; _701;<br align="left"/>debug val =&gt; _704;<br align="left"/>debug residual =&gt; _710;<br align="left"/>debug val =&gt; _713;<br align="left"/>debug residual =&gt; _722;<br align="left"/>debug val =&gt; _725;<br align="left"/>debug residual =&gt; _744;<br align="left"/>debug val =&gt; _747;<br align="left"/>debug residual =&gt; _749;<br align="left"/>debug val =&gt; _752;<br align="left"/>debug residual =&gt; _762;<br align="left"/>debug val =&gt; _765;<br align="left"/>debug residual =&gt; _767;<br align="left"/>debug val =&gt; _770;<br align="left"/>debug residual =&gt; _782;<br align="left"/>debug val =&gt; _785;<br align="left"/>debug maker_order_direction =&gt; _786;<br align="left"/>debug maker_update_open_bids_and_asks =&gt; _790;<br align="left"/>debug residual =&gt; _808;<br align="left"/>debug val =&gt; _811;<br align="left"/>debug maker_stats =&gt; _814;<br align="left"/>debug residual =&gt; _823;<br align="left"/>debug val =&gt; _826;<br align="left"/>debug residual =&gt; _833;<br align="left"/>debug val =&gt; _836;<br align="left"/>debug residual =&gt; _845;<br align="left"/>debug val =&gt; _848;<br align="left"/>debug residual =&gt; _855;<br align="left"/>debug val =&gt; _858;<br align="left"/>debug filler =&gt; _865;<br align="left"/>debug filler_stats =&gt; _866;<br align="left"/>debug residual =&gt; _878;<br align="left"/>debug val =&gt; _881;<br align="left"/>debug residual =&gt; _891;<br align="left"/>debug val =&gt; _894;<br align="left"/>debug residual =&gt; _904;<br align="left"/>debug val =&gt; _907;<br align="left"/>debug residual =&gt; _909;<br align="left"/>debug val =&gt; _912;<br align="left"/>debug residual =&gt; _923;<br align="left"/>debug val =&gt; _926;<br align="left"/>debug residual =&gt; _936;<br align="left"/>debug val =&gt; _939;<br align="left"/>debug residual =&gt; _941;<br align="left"/>debug val =&gt; _944;<br align="left"/>debug residual =&gt; _953;<br align="left"/>debug val =&gt; _956;<br align="left"/>debug residual =&gt; _965;<br align="left"/>debug val =&gt; _968;<br align="left"/>debug fill_record_id =&gt; _969;<br align="left"/>debug current_id =&gt; _970;<br align="left"/>debug order_action_explanation =&gt; _976;<br align="left"/>debug order_action_record =&gt; _982;<br align="left"/>debug residual =&gt; _1006;<br align="left"/>debug val =&gt; _1009;<br align="left"/>debug residual =&gt; _1041;<br align="left"/>debug val =&gt; _1044;<br align="left"/>debug residual =&gt; _1051;<br align="left"/>debug val =&gt; _1054;<br align="left"/>debug residual =&gt; _1060;<br align="left"/>debug val =&gt; _1063;<br align="left"/>debug residual =&gt; _1075;<br align="left"/>debug val =&gt; _1078;<br align="left"/>debug residual =&gt; _1105;<br align="left"/>debug val =&gt; _1108;<br align="left"/>>;
    bb0__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _9<br/>_23 = Len(((*_7).5: [state::user::Order; 32]))<br/>_24 = Lt(_22, _23)<br/></td></tr><tr><td align="left">assert(move _24, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _23, _22)</td></tr></table>>];
    bb1__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_21 = &amp;((*_7).5: [state::user::Order; 32])[_22]<br/>_20 = &amp;(*_21)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _5<br/>_28 = Len(((*_3).5: [state::user::Order; 32]))<br/>_29 = Lt(_27, _28)<br/></td></tr><tr><td align="left">assert(move _29, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _28, _27)</td></tr></table>>];
    bb2__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_26 = &amp;((*_3).5: [state::user::Order; 32])[_27]<br/>_25 = &amp;(*_26)<br/></td></tr><tr><td align="left">_19 = are_orders_same_market_but_different_sides(move _20, move _25)</td></tr></table>>];
    bb3__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb4__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_20)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>_18 = const ()<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _5<br/>_34 = Len(((*_3).5: [state::user::Order; 32]))<br/>_35 = Lt(_33, _34)<br/></td></tr><tr><td align="left">assert(move _35, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _34, _33)</td></tr></table>>];
    bb5__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_20)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageLive(_31)<br/>_31 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _31)<br/>StorageDead(_31)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_32 = (((*_3).5: [state::user::Order; 32])[_33].11: u16)<br/>StorageDead(_33)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = &amp;mut (*_16)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = &amp;(*_1)<br/></td></tr><tr><td align="left">_43 = SpotMarket::oracle_id(move _44)</td></tr></table>>];
    bb7__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_42 = &amp;_43<br/>_41 = &amp;(*_42)<br/></td></tr><tr><td align="left">_39 = OracleMap::&lt;'_&gt;::get_price_data(move _40, move _41)</td></tr></table>>];
    bb8__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">_38 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _39)</td></tr></table>>];
    bb9__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>_45 = discriminant(_38)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb10__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_38 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_37 = _49<br/>StorageDead(_49)<br/>_36 = ((*_37).0: i64)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>_55 = _5<br/>_56 = Len(((*_3).5: [state::user::Order; 32]))<br/>_57 = Lt(_55, _56)<br/></td></tr><tr><td align="left">assert(move _57, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _56, _55)</td></tr></table>>];
    bb11__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb12__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_38 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_48)<br/>_48 = _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb13__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_54 = &amp;((*_3).5: [state::user::Order; 32])[_55]<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_59 = _36<br/>_58 = Option::&lt;i64&gt;::Some(move _59)<br/>StorageDead(_59)<br/>StorageLive(_60)<br/>_60 = Option::&lt;u64&gt;::None<br/>StorageLive(_61)<br/>_61 = _15<br/>StorageLive(_62)<br/>_62 = ((*_1).26: u64)<br/>StorageLive(_63)<br/>_63 = Option::&lt;ProtectedMakerParams&gt;::None<br/></td></tr><tr><td align="left">_53 = Order::get_limit_price(move _54, move _58, move _60, move _61, move _62, const false, move _63)</td></tr></table>>];
    bb15__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_62)<br/>StorageDead(_61)<br/>StorageDead(_60)<br/>StorageDead(_58)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;std::result::Result&lt;Option&lt;u64&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _53)</td></tr></table>>];
    bb16__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>_64 = discriminant(_52)<br/></td></tr><tr><td align="left">switchInt(move _64)</td></tr></table>>];
    bb17__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_68)<br/>_68 = ((_52 as Continue).0: std::option::Option&lt;u64&gt;)<br/>_51 = _68<br/>StorageDead(_68)<br/>_69 = discriminant(_51)<br/></td></tr><tr><td align="left">switchInt(move _69)</td></tr></table>>];
    bb18__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = ((_52 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_67)<br/>_67 = _65<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _67)</td></tr></table>>];
    bb19__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_72)<br/>_72 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _72)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_70)<br/>_70 = ((_51 as Some).0: u64)<br/>_50 = _70<br/>StorageDead(_70)<br/>StorageDead(_55)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>_76 = &amp;(*_3)<br/>StorageLive(_77)<br/>_77 = _32<br/></td></tr><tr><td align="left">_75 = User::get_spot_position_index(move _76, move _77)</td></tr></table>>];
    bb22__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">_74 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _75)</td></tr></table>>];
    bb23__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>_78 = discriminant(_74)<br/></td></tr><tr><td align="left">switchInt(move _78)</td></tr></table>>];
    bb24__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = ((_74 as Continue).0: usize)<br/>_73 = _82<br/>StorageDead(_82)<br/>StorageDead(_74)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>_87 = _73<br/>_88 = Len(((*_3).3: [state::user::SpotPosition; 8]))<br/>_89 = Lt(_87, _88)<br/></td></tr><tr><td align="left">assert(move _89, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _88, _87)</td></tr></table>>];
    bb25__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_74 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_81)<br/>_81 = _79<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _81)</td></tr></table>>];
    bb26__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_79)<br/>StorageDead(_74)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_86 = &amp;((*_3).3: [state::user::SpotPosition; 8])[_87]<br/>StorageLive(_90)<br/>_90 = &amp;(*_1)<br/></td></tr><tr><td align="left">_85 = SpotPosition::get_signed_token_amount(move _86, move _90)</td></tr></table>>];
    bb28__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">_84 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _85)</td></tr></table>>];
    bb29__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>_91 = discriminant(_84)<br/></td></tr><tr><td align="left">switchInt(move _91)</td></tr></table>>];
    bb30__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_95)<br/>_95 = ((_84 as Continue).0: i128)<br/>_83 = _95<br/>StorageDead(_95)<br/>StorageDead(_87)<br/>StorageDead(_84)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>_100 = _5<br/>_101 = Len(((*_3).5: [state::user::Order; 32]))<br/>_102 = Lt(_100, _101)<br/></td></tr><tr><td align="left">assert(move _102, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _101, _100)</td></tr></table>>];
    bb31__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_92)<br/>_92 = ((_84 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_94)<br/>_94 = _92<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _94)</td></tr></table>>];
    bb32__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/>StorageDead(_92)<br/>StorageDead(_87)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_99 = &amp;((*_3).5: [state::user::Order; 32])[_100]<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>_107 = _83<br/></td></tr><tr><td align="left">_106 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _107)</td></tr></table>>];
    bb34__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/></td></tr><tr><td align="left">_105 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _106)</td></tr></table>>];
    bb35__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>_108 = discriminant(_105)<br/></td></tr><tr><td align="left">switchInt(move _108)</td></tr></table>>];
    bb36__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_112)<br/>_112 = ((_105 as Continue).0: i64)<br/>_104 = _112<br/>StorageDead(_112)<br/>_103 = Option::&lt;i64&gt;::Some(move _104)<br/>StorageDead(_104)<br/>StorageLive(_113)<br/>_113 = ((*_1).25: u64)<br/></td></tr><tr><td align="left">_98 = Order::get_standardized_base_asset_amount_unfilled(move _99, move _103, move _113)</td></tr></table>>];
    bb37__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_109)<br/>_109 = ((_105 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_111)<br/>_111 = _109<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _111)</td></tr></table>>];
    bb38__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_109)<br/>StorageDead(_104)<br/>StorageDead(_103)<br/>StorageDead(_99)<br/>StorageDead(_98)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_113)<br/>StorageDead(_103)<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">_97 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _98)</td></tr></table>>];
    bb40__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>_114 = discriminant(_97)<br/></td></tr><tr><td align="left">switchInt(move _114)</td></tr></table>>];
    bb41__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageLive(_118)<br/>_118 = ((_97 as Continue).0: u64)<br/>_96 = _118<br/>StorageDead(_118)<br/>StorageDead(_105)<br/>StorageDead(_100)<br/>StorageDead(_97)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>_120 = _5<br/>_121 = Len(((*_3).5: [state::user::Order; 32]))<br/>_122 = Lt(_120, _121)<br/></td></tr><tr><td align="left">assert(move _122, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _121, _120)</td></tr></table>>];
    bb42__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_115)<br/>_115 = ((_97 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_117)<br/>_117 = _115<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _117)</td></tr></table>>];
    bb43__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/>StorageDead(_115)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">_119 = (((*_3).5: [state::user::Order; 32])[_120].0: u64)<br/>StorageDead(_120)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>_124 = _5<br/>_125 = Len(((*_3).5: [state::user::Order; 32]))<br/>_126 = Lt(_124, _125)<br/></td></tr><tr><td align="left">assert(move _126, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _125, _124)</td></tr></table>>];
    bb45__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">_123 = (((*_3).5: [state::user::Order; 32])[_124].17: controller::position::PositionDirection)<br/>StorageDead(_124)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>_131 = _9<br/>_132 = Len(((*_7).5: [state::user::Order; 32]))<br/>_133 = Lt(_131, _132)<br/></td></tr><tr><td align="left">assert(move _133, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _132, _131)</td></tr></table>>];
    bb46__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">_130 = &amp;((*_7).5: [state::user::Order; 32])[_131]<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>_135 = _36<br/>_134 = Option::&lt;i64&gt;::Some(move _135)<br/>StorageDead(_135)<br/>StorageLive(_136)<br/>_136 = Option::&lt;u64&gt;::None<br/>StorageLive(_137)<br/>_137 = _15<br/>StorageLive(_138)<br/>_138 = ((*_1).26: u64)<br/>StorageLive(_139)<br/>_139 = Option::&lt;ProtectedMakerParams&gt;::None<br/></td></tr><tr><td align="left">_129 = Order::force_get_limit_price(move _130, move _134, move _136, move _137, move _138, const false, move _139)</td></tr></table>>];
    bb47__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_139)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/>StorageDead(_136)<br/>StorageDead(_134)<br/>StorageDead(_130)<br/></td></tr><tr><td align="left">_128 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _129)</td></tr></table>>];
    bb48__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>_140 = discriminant(_128)<br/></td></tr><tr><td align="left">switchInt(move _140)</td></tr></table>>];
    bb49__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_144)<br/>_144 = ((_128 as Continue).0: u64)<br/>_127 = _144<br/>StorageDead(_144)<br/>StorageDead(_131)<br/>StorageDead(_128)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>_146 = _9<br/>_147 = Len(((*_7).5: [state::user::Order; 32]))<br/>_148 = Lt(_146, _147)<br/></td></tr><tr><td align="left">assert(move _148, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _147, _146)</td></tr></table>>];
    bb50__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageLive(_141)<br/>_141 = ((_128 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_143)<br/>_143 = _141<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _143)</td></tr></table>>];
    bb51__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_143)<br/>StorageDead(_141)<br/>StorageDead(_131)<br/>StorageDead(_128)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">_145 = (((*_7).5: [state::user::Order; 32])[_146].17: controller::position::PositionDirection)<br/>StorageDead(_146)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>_152 = &amp;(*_7)<br/>StorageLive(_153)<br/>_153 = _32<br/></td></tr><tr><td align="left">_151 = User::get_spot_position_index(move _152, move _153)</td></tr></table>>];
    bb53__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_153)<br/>StorageDead(_152)<br/></td></tr><tr><td align="left">_150 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _151)</td></tr></table>>];
    bb54__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_151)<br/>_154 = discriminant(_150)<br/></td></tr><tr><td align="left">switchInt(move _154)</td></tr></table>>];
    bb55__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_158)<br/>_158 = ((_150 as Continue).0: usize)<br/>_149 = _158<br/>StorageDead(_158)<br/>StorageDead(_150)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>_163 = _149<br/>_164 = Len(((*_7).3: [state::user::SpotPosition; 8]))<br/>_165 = Lt(_163, _164)<br/></td></tr><tr><td align="left">assert(move _165, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _164, _163)</td></tr></table>>];
    bb56__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageLive(_155)<br/>_155 = ((_150 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_157)<br/>_157 = _155<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _157)</td></tr></table>>];
    bb57__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_157)<br/>StorageDead(_155)<br/>StorageDead(_150)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">_162 = &amp;((*_7).3: [state::user::SpotPosition; 8])[_163]<br/>StorageLive(_166)<br/>_166 = &amp;(*_1)<br/></td></tr><tr><td align="left">_161 = SpotPosition::get_signed_token_amount(move _162, move _166)</td></tr></table>>];
    bb59__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_166)<br/>StorageDead(_162)<br/></td></tr><tr><td align="left">_160 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _161)</td></tr></table>>];
    bb60__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_161)<br/>_167 = discriminant(_160)<br/></td></tr><tr><td align="left">switchInt(move _167)</td></tr></table>>];
    bb61__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageLive(_171)<br/>_171 = ((_160 as Continue).0: i128)<br/>_159 = _171<br/>StorageDead(_171)<br/>StorageDead(_163)<br/>StorageDead(_160)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>StorageLive(_174)<br/>StorageLive(_175)<br/>StorageLive(_176)<br/>_176 = _9<br/>_177 = Len(((*_7).5: [state::user::Order; 32]))<br/>_178 = Lt(_176, _177)<br/></td></tr><tr><td align="left">assert(move _178, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _177, _176)</td></tr></table>>];
    bb62__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_168)<br/>_168 = ((_160 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_170)<br/>_170 = _168<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _170)</td></tr></table>>];
    bb63__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_170)<br/>StorageDead(_168)<br/>StorageDead(_163)<br/>StorageDead(_160)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">_175 = &amp;((*_7).5: [state::user::Order; 32])[_176]<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>StorageLive(_181)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>_183 = _159<br/></td></tr><tr><td align="left">_182 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _183)</td></tr></table>>];
    bb65__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_183)<br/></td></tr><tr><td align="left">_181 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _182)</td></tr></table>>];
    bb66__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_182)<br/>_184 = discriminant(_181)<br/></td></tr><tr><td align="left">switchInt(move _184)</td></tr></table>>];
    bb67__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageLive(_188)<br/>_188 = ((_181 as Continue).0: i64)<br/>_180 = _188<br/>StorageDead(_188)<br/>_179 = Option::&lt;i64&gt;::Some(move _180)<br/>StorageDead(_180)<br/>StorageLive(_189)<br/>_189 = ((*_1).25: u64)<br/></td></tr><tr><td align="left">_174 = Order::get_standardized_base_asset_amount_unfilled(move _175, move _179, move _189)</td></tr></table>>];
    bb68__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageLive(_185)<br/>_185 = ((_181 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_187)<br/>_187 = _185<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _187)</td></tr></table>>];
    bb69__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/>StorageDead(_185)<br/>StorageDead(_180)<br/>StorageDead(_179)<br/>StorageDead(_175)<br/>StorageDead(_174)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_189)<br/>StorageDead(_179)<br/>StorageDead(_175)<br/></td></tr><tr><td align="left">_173 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _174)</td></tr></table>>];
    bb71__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_174)<br/>_190 = discriminant(_173)<br/></td></tr><tr><td align="left">switchInt(move _190)</td></tr></table>>];
    bb72__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_194)<br/>_194 = ((_173 as Continue).0: u64)<br/>_172 = _194<br/>StorageDead(_194)<br/>StorageDead(_181)<br/>StorageDead(_176)<br/>StorageDead(_173)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>_196 = _145<br/>StorageLive(_197)<br/>_197 = _127<br/>StorageLive(_198)<br/>_198 = _50<br/></td></tr><tr><td align="left">_195 = do_orders_cross(move _196, move _197, move _198)</td></tr></table>>];
    bb73__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_191)<br/>_191 = ((_173 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_193)<br/>_193 = _191<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _193)</td></tr></table>>];
    bb74__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_193)<br/>StorageDead(_191)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>StorageDead(_197)<br/>StorageDead(_196)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>_200 = _195<br/></td></tr><tr><td align="left">switchInt(move _200)</td></tr></table>>];
    bb76__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageLive(_202)<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>_1131 = const _<br/>_212 = &amp;(*_1131)<br/>_211 = &amp;(*_212)<br/>_210 = move _211 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_211)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>StorageLive(_217)<br/>StorageLive(_218)<br/>StorageLive(_219)<br/>StorageLive(_220)<br/>_220 = &amp;_127<br/>_219 = &amp;(*_220)<br/></td></tr><tr><td align="left">_218 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _219)</td></tr></table>>];
    bb77__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_219)<br/>StorageLive(_221)<br/>StorageLive(_222)<br/>StorageLive(_223)<br/>_223 = &amp;_50<br/>_222 = &amp;(*_223)<br/></td></tr><tr><td align="left">_221 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _222)</td></tr></table>>];
    bb78__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_222)<br/>_217 = [move _218, move _221]<br/>StorageDead(_221)<br/>StorageDead(_218)<br/>_216 = &amp;_217<br/>_215 = &amp;(*_216)<br/>_214 = move _215 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_215)<br/></td></tr><tr><td align="left">_209 = Arguments::&lt;'_&gt;::new_v1(move _210, move _214)</td></tr></table>>];
    bb79__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_214)<br/>StorageDead(_210)<br/></td></tr><tr><td align="left">_208 = format(move _209)</td></tr></table>>];
    bb80__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_209)<br/>StorageDead(_223)<br/>StorageDead(_220)<br/>StorageDead(_217)<br/>StorageDead(_216)<br/>StorageDead(_212)<br/>_207 = move _208<br/>StorageDead(_208)<br/>_206 = &amp;_207<br/>_205 = &amp;(*_206)<br/></td></tr><tr><td align="left">_204 = &lt;String as Deref&gt;::deref(move _205)</td></tr></table>>];
    bb81__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">_203 = &amp;(*_204)<br/>StorageDead(_205)<br/></td></tr><tr><td align="left">_202 = solana_program::log::sol_log(move _203)</td></tr></table>>];
    bb82__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_203)<br/></td></tr><tr><td align="left">drop(_207)</td></tr></table>>];
    bb83__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_207)<br/>StorageDead(_206)<br/>StorageDead(_204)<br/>StorageDead(_202)<br/>StorageLive(_224)<br/>_224 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _224)<br/>StorageDead(_224)<br/>StorageDead(_200)<br/>StorageDead(_199)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb84__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">_199 = const ()<br/>StorageDead(_200)<br/>StorageDead(_199)<br/>StorageLive(_227)<br/>StorageLive(_228)<br/>StorageLive(_229)<br/>StorageLive(_230)<br/>_230 = &amp;(*_3)<br/>StorageLive(_231)<br/>_231 = _5<br/>StorageLive(_232)<br/>_232 = &amp;(*_1)<br/>StorageLive(_233)<br/>_233 = &amp;(*_2)<br/></td></tr><tr><td align="left">_229 = math::orders::get_max_fill_amounts(move _230, move _231, move _232, move _233, const false)</td></tr></table>>];
    bb85__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_233)<br/>StorageDead(_232)<br/>StorageDead(_231)<br/>StorageDead(_230)<br/></td></tr><tr><td align="left">_228 = &lt;std::result::Result&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt; as Try&gt;::branch(move _229)</td></tr></table>>];
    bb86__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_229)<br/>_234 = discriminant(_228)<br/></td></tr><tr><td align="left">switchInt(move _234)</td></tr></table>>];
    bb87__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageLive(_238)<br/>_238 = ((_228 as Continue).0: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;))<br/>_227 = _238<br/>StorageDead(_238)<br/>StorageLive(_225)<br/>_225 = (_227.0: std::option::Option&lt;u64&gt;)<br/>StorageLive(_226)<br/>_226 = (_227.1: std::option::Option&lt;u64&gt;)<br/>StorageDead(_228)<br/>StorageDead(_227)<br/>StorageLive(_239)<br/>_240 = discriminant(_226)<br/></td></tr><tr><td align="left">switchInt(move _240)</td></tr></table>>];
    bb88__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageLive(_235)<br/>_235 = ((_228 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_237)<br/>_237 = _235<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _237)</td></tr></table>>];
    bb89__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_237)<br/>StorageDead(_235)<br/>StorageDead(_228)<br/>StorageDead(_227)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb90__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">_305 = discriminant(_225)<br/></td></tr><tr><td align="left">switchInt(move _305)</td></tr></table>>];
    bb91__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageLive(_241)<br/>_241 = ((_226 as Some).0: u64)<br/>StorageLive(_242)<br/>StorageLive(_243)<br/>StorageLive(_244)<br/>StorageLive(_245)<br/>StorageLive(_246)<br/>StorageLive(_247)<br/>StorageLive(_248)<br/>StorageLive(_249)<br/>StorageLive(_250)<br/>StorageLive(_251)<br/>StorageLive(_252)<br/>StorageLive(_253)<br/>StorageLive(_254)<br/>StorageLive(_255)<br/>StorageLive(_256)<br/>StorageLive(_257)<br/>_257 = _241<br/></td></tr><tr><td align="left">_256 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _257)</td></tr></table>>];
    bb92__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_257)<br/></td></tr><tr><td align="left">_255 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _256)</td></tr></table>>];
    bb93__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_256)<br/>_258 = discriminant(_255)<br/></td></tr><tr><td align="left">switchInt(move _258)</td></tr></table>>];
    bb94__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageLive(_262)<br/>_262 = ((_255 as Continue).0: u128)<br/>_254 = _262<br/>StorageDead(_262)<br/>StorageLive(_263)<br/>StorageLive(_264)<br/>StorageLive(_265)<br/>StorageLive(_266)<br/>StorageLive(_267)<br/>_267 = (*_1)<br/></td></tr><tr><td align="left">_266 = SpotMarket::get_precision(move _267)</td></tr></table>>];
    bb95__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageLive(_259)<br/>_259 = ((_255 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_261)<br/>_261 = _259<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _261)</td></tr></table>>];
    bb96__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_261)<br/>StorageDead(_259)<br/>StorageDead(_254)<br/>StorageDead(_253)<br/>StorageDead(_251)<br/>StorageDead(_250)<br/>StorageDead(_248)<br/>StorageDead(_247)<br/>StorageDead(_245)<br/>StorageDead(_244)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb97__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_267)<br/></td></tr><tr><td align="left">_265 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _266)</td></tr></table>>];
    bb98__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_266)<br/></td></tr><tr><td align="left">_264 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _265)</td></tr></table>>];
    bb99__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_265)<br/>_268 = discriminant(_264)<br/></td></tr><tr><td align="left">switchInt(move _268)</td></tr></table>>];
    bb100__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageLive(_272)<br/>_272 = ((_264 as Continue).0: u128)<br/>_263 = _272<br/>StorageDead(_272)<br/></td></tr><tr><td align="left">_253 = &lt;u128 as SafeMath&gt;::safe_mul(move _254, move _263)</td></tr></table>>];
    bb101__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageLive(_269)<br/>_269 = ((_264 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_271)<br/>_271 = _269<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _271)</td></tr></table>>];
    bb102__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_271)<br/>StorageDead(_269)<br/>StorageDead(_263)<br/>StorageDead(_254)<br/>StorageDead(_253)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb103__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_263)<br/>StorageDead(_254)<br/></td></tr><tr><td align="left">_252 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _253)</td></tr></table>>];
    bb104__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_253)<br/>_273 = discriminant(_252)<br/></td></tr><tr><td align="left">switchInt(move _273)</td></tr></table>>];
    bb105__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageLive(_277)<br/>_277 = ((_252 as Continue).0: u128)<br/>_251 = _277<br/>StorageDead(_277)<br/>StorageLive(_278)<br/>StorageLive(_279)<br/>StorageLive(_280)<br/>StorageLive(_281)<br/>_281 = _127<br/></td></tr><tr><td align="left">_280 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _281)</td></tr></table>>];
    bb106__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageLive(_274)<br/>_274 = ((_252 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_276)<br/>_276 = _274<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _276)</td></tr></table>>];
    bb107__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_276)<br/>StorageDead(_274)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb108__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_281)<br/></td></tr><tr><td align="left">_279 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _280)</td></tr></table>>];
    bb109__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_280)<br/>_282 = discriminant(_279)<br/></td></tr><tr><td align="left">switchInt(move _282)</td></tr></table>>];
    bb110__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageLive(_286)<br/>_286 = ((_279 as Continue).0: u128)<br/>_278 = _286<br/>StorageDead(_286)<br/></td></tr><tr><td align="left">_250 = &lt;u128 as SafeMath&gt;::safe_div(move _251, move _278)</td></tr></table>>];
    bb111__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageLive(_283)<br/>_283 = ((_279 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_285)<br/>_285 = _283<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _285)</td></tr></table>>];
    bb112__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_285)<br/>StorageDead(_283)<br/>StorageDead(_278)<br/>StorageDead(_251)<br/>StorageDead(_250)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb113__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_278)<br/>StorageDead(_251)<br/></td></tr><tr><td align="left">_249 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _250)</td></tr></table>>];
    bb114__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_250)<br/>_287 = discriminant(_249)<br/></td></tr><tr><td align="left">switchInt(move _287)</td></tr></table>>];
    bb115__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageLive(_291)<br/>_291 = ((_249 as Continue).0: u128)<br/>_248 = _291<br/>StorageDead(_291)<br/></td></tr><tr><td align="left">_247 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _248)</td></tr></table>>];
    bb116__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageLive(_288)<br/>_288 = ((_249 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_290)<br/>_290 = _288<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _290)</td></tr></table>>];
    bb117__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_290)<br/>StorageDead(_288)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb118__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_248)<br/></td></tr><tr><td align="left">_246 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _247)</td></tr></table>>];
    bb119__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_247)<br/>_292 = discriminant(_246)<br/></td></tr><tr><td align="left">switchInt(move _292)</td></tr></table>>];
    bb120__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageLive(_296)<br/>_296 = ((_246 as Continue).0: u64)<br/>_245 = _296<br/>StorageDead(_296)<br/>StorageLive(_297)<br/>_297 = ((*_1).25: u64)<br/></td></tr><tr><td align="left">_244 = math::orders::standardize_base_asset_amount(move _245, move _297)</td></tr></table>>];
    bb121__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageLive(_293)<br/>_293 = ((_246 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_295)<br/>_295 = _293<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _295)</td></tr></table>>];
    bb122__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_295)<br/>StorageDead(_293)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb123__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_297)<br/>StorageDead(_245)<br/></td></tr><tr><td align="left">_243 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _244)</td></tr></table>>];
    bb124__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageDead(_244)<br/>_298 = discriminant(_243)<br/></td></tr><tr><td align="left">switchInt(move _298)</td></tr></table>>];
    bb125__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageLive(_302)<br/>_302 = ((_243 as Continue).0: u64)<br/>_242 = _302<br/>StorageDead(_302)<br/>StorageDead(_279)<br/>StorageDead(_264)<br/>StorageDead(_255)<br/>StorageDead(_252)<br/>StorageDead(_249)<br/>StorageDead(_246)<br/>StorageDead(_243)<br/>StorageLive(_303)<br/>_303 = _96<br/>StorageLive(_304)<br/>_304 = _242<br/></td></tr><tr><td align="left">_239 = &lt;u64 as Ord&gt;::min(move _303, move _304)</td></tr></table>>];
    bb126__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageLive(_299)<br/>_299 = ((_243 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_301)<br/>_301 = _299<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _301)</td></tr></table>>];
    bb127__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_301)<br/>StorageDead(_299)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb128__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_304)<br/>StorageDead(_303)<br/>StorageDead(_242)<br/>StorageDead(_241)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb129__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">_239 = _96<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb130__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageLive(_306)<br/>_306 = ((_225 as Some).0: u64)<br/>StorageLive(_307)<br/>_307 = _96<br/>StorageLive(_308)<br/>_308 = _306<br/></td></tr><tr><td align="left">_239 = &lt;u64 as Ord&gt;::min(move _307, move _308)</td></tr></table>>];
    bb131__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_308)<br/>StorageDead(_307)<br/>StorageDead(_306)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb132__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageLive(_311)<br/>StorageLive(_312)<br/>StorageLive(_313)<br/>StorageLive(_314)<br/>_314 = &amp;(*_7)<br/>StorageLive(_315)<br/>_315 = _9<br/>StorageLive(_316)<br/>_316 = &amp;(*_1)<br/>StorageLive(_317)<br/>_317 = &amp;(*_2)<br/></td></tr><tr><td align="left">_313 = math::orders::get_max_fill_amounts(move _314, move _315, move _316, move _317, const false)</td></tr></table>>];
    bb133__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageDead(_317)<br/>StorageDead(_316)<br/>StorageDead(_315)<br/>StorageDead(_314)<br/></td></tr><tr><td align="left">_312 = &lt;std::result::Result&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt; as Try&gt;::branch(move _313)</td></tr></table>>];
    bb134__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageDead(_313)<br/>_318 = discriminant(_312)<br/></td></tr><tr><td align="left">switchInt(move _318)</td></tr></table>>];
    bb135__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageLive(_322)<br/>_322 = ((_312 as Continue).0: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;))<br/>_311 = _322<br/>StorageDead(_322)<br/>StorageLive(_309)<br/>_309 = (_311.0: std::option::Option&lt;u64&gt;)<br/>StorageLive(_310)<br/>_310 = (_311.1: std::option::Option&lt;u64&gt;)<br/>StorageDead(_312)<br/>StorageDead(_311)<br/>StorageLive(_323)<br/>_324 = discriminant(_310)<br/></td></tr><tr><td align="left">switchInt(move _324)</td></tr></table>>];
    bb136__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageLive(_319)<br/>_319 = ((_312 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_321)<br/>_321 = _319<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _321)</td></tr></table>>];
    bb137__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_321)<br/>StorageDead(_319)<br/>StorageDead(_312)<br/>StorageDead(_311)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb138__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">_389 = discriminant(_309)<br/></td></tr><tr><td align="left">switchInt(move _389)</td></tr></table>>];
    bb139__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageLive(_325)<br/>_325 = ((_310 as Some).0: u64)<br/>StorageLive(_326)<br/>StorageLive(_327)<br/>StorageLive(_328)<br/>StorageLive(_329)<br/>StorageLive(_330)<br/>StorageLive(_331)<br/>StorageLive(_332)<br/>StorageLive(_333)<br/>StorageLive(_334)<br/>StorageLive(_335)<br/>StorageLive(_336)<br/>StorageLive(_337)<br/>StorageLive(_338)<br/>StorageLive(_339)<br/>StorageLive(_340)<br/>StorageLive(_341)<br/>_341 = _325<br/></td></tr><tr><td align="left">_340 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _341)</td></tr></table>>];
    bb140__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageDead(_341)<br/></td></tr><tr><td align="left">_339 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _340)</td></tr></table>>];
    bb141__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_340)<br/>_342 = discriminant(_339)<br/></td></tr><tr><td align="left">switchInt(move _342)</td></tr></table>>];
    bb142__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageLive(_346)<br/>_346 = ((_339 as Continue).0: u128)<br/>_338 = _346<br/>StorageDead(_346)<br/>StorageLive(_347)<br/>StorageLive(_348)<br/>StorageLive(_349)<br/>StorageLive(_350)<br/>StorageLive(_351)<br/>_351 = (*_1)<br/></td></tr><tr><td align="left">_350 = SpotMarket::get_precision(move _351)</td></tr></table>>];
    bb143__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageLive(_343)<br/>_343 = ((_339 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_345)<br/>_345 = _343<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _345)</td></tr></table>>];
    bb144__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_345)<br/>StorageDead(_343)<br/>StorageDead(_338)<br/>StorageDead(_337)<br/>StorageDead(_335)<br/>StorageDead(_334)<br/>StorageDead(_332)<br/>StorageDead(_331)<br/>StorageDead(_329)<br/>StorageDead(_328)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb145__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageDead(_351)<br/></td></tr><tr><td align="left">_349 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _350)</td></tr></table>>];
    bb146__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageDead(_350)<br/></td></tr><tr><td align="left">_348 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _349)</td></tr></table>>];
    bb147__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_349)<br/>_352 = discriminant(_348)<br/></td></tr><tr><td align="left">switchInt(move _352)</td></tr></table>>];
    bb148__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageLive(_356)<br/>_356 = ((_348 as Continue).0: u128)<br/>_347 = _356<br/>StorageDead(_356)<br/></td></tr><tr><td align="left">_337 = &lt;u128 as SafeMath&gt;::safe_mul(move _338, move _347)</td></tr></table>>];
    bb149__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageLive(_353)<br/>_353 = ((_348 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_355)<br/>_355 = _353<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _355)</td></tr></table>>];
    bb150__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_355)<br/>StorageDead(_353)<br/>StorageDead(_347)<br/>StorageDead(_338)<br/>StorageDead(_337)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb151__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_347)<br/>StorageDead(_338)<br/></td></tr><tr><td align="left">_336 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _337)</td></tr></table>>];
    bb152__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageDead(_337)<br/>_357 = discriminant(_336)<br/></td></tr><tr><td align="left">switchInt(move _357)</td></tr></table>>];
    bb153__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageLive(_361)<br/>_361 = ((_336 as Continue).0: u128)<br/>_335 = _361<br/>StorageDead(_361)<br/>StorageLive(_362)<br/>StorageLive(_363)<br/>StorageLive(_364)<br/>StorageLive(_365)<br/>_365 = _127<br/></td></tr><tr><td align="left">_364 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _365)</td></tr></table>>];
    bb154__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageLive(_358)<br/>_358 = ((_336 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_360)<br/>_360 = _358<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _360)</td></tr></table>>];
    bb155__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageDead(_360)<br/>StorageDead(_358)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb156__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_365)<br/></td></tr><tr><td align="left">_363 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _364)</td></tr></table>>];
    bb157__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_364)<br/>_366 = discriminant(_363)<br/></td></tr><tr><td align="left">switchInt(move _366)</td></tr></table>>];
    bb158__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageLive(_370)<br/>_370 = ((_363 as Continue).0: u128)<br/>_362 = _370<br/>StorageDead(_370)<br/></td></tr><tr><td align="left">_334 = &lt;u128 as SafeMath&gt;::safe_div(move _335, move _362)</td></tr></table>>];
    bb159__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageLive(_367)<br/>_367 = ((_363 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_369)<br/>_369 = _367<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _369)</td></tr></table>>];
    bb160__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageDead(_369)<br/>StorageDead(_367)<br/>StorageDead(_362)<br/>StorageDead(_335)<br/>StorageDead(_334)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb161__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_362)<br/>StorageDead(_335)<br/></td></tr><tr><td align="left">_333 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _334)</td></tr></table>>];
    bb162__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageDead(_334)<br/>_371 = discriminant(_333)<br/></td></tr><tr><td align="left">switchInt(move _371)</td></tr></table>>];
    bb163__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageLive(_375)<br/>_375 = ((_333 as Continue).0: u128)<br/>_332 = _375<br/>StorageDead(_375)<br/></td></tr><tr><td align="left">_331 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _332)</td></tr></table>>];
    bb164__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageLive(_372)<br/>_372 = ((_333 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_374)<br/>_374 = _372<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _374)</td></tr></table>>];
    bb165__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_374)<br/>StorageDead(_372)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb166__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageDead(_332)<br/></td></tr><tr><td align="left">_330 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _331)</td></tr></table>>];
    bb167__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageDead(_331)<br/>_376 = discriminant(_330)<br/></td></tr><tr><td align="left">switchInt(move _376)</td></tr></table>>];
    bb168__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageLive(_380)<br/>_380 = ((_330 as Continue).0: u64)<br/>_329 = _380<br/>StorageDead(_380)<br/>StorageLive(_381)<br/>_381 = ((*_1).25: u64)<br/></td></tr><tr><td align="left">_328 = math::orders::standardize_base_asset_amount(move _329, move _381)</td></tr></table>>];
    bb169__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageLive(_377)<br/>_377 = ((_330 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_379)<br/>_379 = _377<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _379)</td></tr></table>>];
    bb170__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageDead(_379)<br/>StorageDead(_377)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb171__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageDead(_381)<br/>StorageDead(_329)<br/></td></tr><tr><td align="left">_327 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _328)</td></tr></table>>];
    bb172__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageDead(_328)<br/>_382 = discriminant(_327)<br/></td></tr><tr><td align="left">switchInt(move _382)</td></tr></table>>];
    bb173__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageLive(_386)<br/>_386 = ((_327 as Continue).0: u64)<br/>_326 = _386<br/>StorageDead(_386)<br/>StorageDead(_363)<br/>StorageDead(_348)<br/>StorageDead(_339)<br/>StorageDead(_336)<br/>StorageDead(_333)<br/>StorageDead(_330)<br/>StorageDead(_327)<br/>StorageLive(_387)<br/>_387 = _172<br/>StorageLive(_388)<br/>_388 = _326<br/></td></tr><tr><td align="left">_323 = &lt;u64 as Ord&gt;::min(move _387, move _388)</td></tr></table>>];
    bb174__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageLive(_383)<br/>_383 = ((_327 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_385)<br/>_385 = _383<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _385)</td></tr></table>>];
    bb175__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageDead(_385)<br/>StorageDead(_383)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb176__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageDead(_388)<br/>StorageDead(_387)<br/>StorageDead(_326)<br/>StorageDead(_325)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb177__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">_323 = _172<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb178__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageLive(_390)<br/>_390 = ((_309 as Some).0: u64)<br/>StorageLive(_391)<br/>_391 = _172<br/>StorageLive(_392)<br/>_392 = _390<br/></td></tr><tr><td align="left">_323 = &lt;u64 as Ord&gt;::min(move _391, move _392)</td></tr></table>>];
    bb179__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageDead(_392)<br/>StorageDead(_391)<br/>StorageDead(_390)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb180__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageLive(_395)<br/>StorageLive(_396)<br/>StorageLive(_397)<br/>StorageLive(_398)<br/>_398 = _323<br/>StorageLive(_399)<br/>_399 = _127<br/>StorageLive(_400)<br/>_400 = _239<br/>StorageLive(_401)<br/>_401 = ((*_1).41: u32)<br/>StorageLive(_402)<br/>_402 = _145<br/></td></tr><tr><td align="left">_397 = calculate_fill_for_matched_orders(move _398, move _399, move _400, move _401, move _402)</td></tr></table>>];
    bb181__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageDead(_402)<br/>StorageDead(_401)<br/>StorageDead(_400)<br/>StorageDead(_399)<br/>StorageDead(_398)<br/></td></tr><tr><td align="left">_396 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _397)</td></tr></table>>];
    bb182__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageDead(_397)<br/>_403 = discriminant(_396)<br/></td></tr><tr><td align="left">switchInt(move _403)</td></tr></table>>];
    bb183__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageLive(_407)<br/>_407 = ((_396 as Continue).0: (u64, u64))<br/>_395 = _407<br/>StorageDead(_407)<br/>StorageLive(_393)<br/>_393 = (_395.0: u64)<br/>StorageLive(_394)<br/>_394 = (_395.1: u64)<br/>StorageDead(_396)<br/>StorageDead(_395)<br/>StorageLive(_408)<br/>StorageLive(_409)<br/>StorageLive(_410)<br/>_410 = _393<br/>_409 = Eq(move _410, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _409)</td></tr></table>>];
    bb184__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageLive(_404)<br/>_404 = ((_396 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_406)<br/>_406 = _404<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _406)</td></tr></table>>];
    bb185__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_406)<br/>StorageDead(_404)<br/>StorageDead(_396)<br/>StorageDead(_395)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb186__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageDead(_410)<br/>StorageLive(_412)<br/>_412 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _412)<br/>StorageDead(_412)<br/>StorageDead(_409)<br/>StorageDead(_408)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb187__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageDead(_410)<br/>_408 = const ()<br/>StorageDead(_409)<br/>StorageDead(_408)<br/>StorageLive(_413)<br/>StorageLive(_414)<br/>_414 = (*_1)<br/></td></tr><tr><td align="left">_413 = SpotMarket::get_precision(move _414)</td></tr></table>>];
    bb188__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageDead(_414)<br/>StorageLive(_415)<br/>StorageLive(_416)<br/>StorageLive(_417)<br/>StorageLive(_418)<br/>_418 = _394<br/>StorageLive(_419)<br/>_419 = _393<br/>StorageLive(_420)<br/>_420 = _413<br/>StorageLive(_421)<br/>_421 = _123<br/>StorageLive(_422)<br/>_422 = _50<br/></td></tr><tr><td align="left">_417 = math::orders::validate_fill_price(move _418, move _419, move _420, move _421, move _422, const true)</td></tr></table>>];
    bb189__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageDead(_422)<br/>StorageDead(_421)<br/>StorageDead(_420)<br/>StorageDead(_419)<br/>StorageDead(_418)<br/></td></tr><tr><td align="left">_416 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _417)</td></tr></table>>];
    bb190__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_417)<br/>_423 = discriminant(_416)<br/></td></tr><tr><td align="left">switchInt(move _423)</td></tr></table>>];
    bb191__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageLive(_427)<br/>_427 = ((_416 as Continue).0: ())<br/>_415 = _427<br/>StorageDead(_427)<br/>StorageDead(_416)<br/>StorageDead(_415)<br/>StorageLive(_428)<br/>StorageLive(_429)<br/>StorageLive(_430)<br/>StorageLive(_431)<br/>_431 = _394<br/>StorageLive(_432)<br/>_432 = _393<br/>StorageLive(_433)<br/>_433 = _413<br/>StorageLive(_434)<br/>_434 = _145<br/>StorageLive(_435)<br/>_435 = _127<br/></td></tr><tr><td align="left">_430 = math::orders::validate_fill_price(move _431, move _432, move _433, move _434, move _435, const false)</td></tr></table>>];
    bb192__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageLive(_424)<br/>_424 = ((_416 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_426)<br/>_426 = _424<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _426)</td></tr></table>>];
    bb193__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageDead(_426)<br/>StorageDead(_424)<br/>StorageDead(_416)<br/>StorageDead(_415)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb194__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageDead(_435)<br/>StorageDead(_434)<br/>StorageDead(_433)<br/>StorageDead(_432)<br/>StorageDead(_431)<br/></td></tr><tr><td align="left">_429 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _430)</td></tr></table>>];
    bb195__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageDead(_430)<br/>_436 = discriminant(_429)<br/></td></tr><tr><td align="left">switchInt(move _436)</td></tr></table>>];
    bb196__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageLive(_440)<br/>_440 = ((_429 as Continue).0: ())<br/>_428 = _440<br/>StorageDead(_440)<br/>StorageDead(_429)<br/>StorageDead(_428)<br/>StorageLive(_441)<br/>StorageLive(_442)<br/>StorageLive(_443)<br/>_443 = &amp;_11<br/></td></tr><tr><td align="left">_442 = Option::&lt;&amp;mut User&gt;::is_some(move _443)</td></tr></table>>];
    bb197__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageLive(_437)<br/>_437 = ((_429 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_439)<br/>_439 = _437<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _439)</td></tr></table>>];
    bb198__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageDead(_439)<br/>StorageDead(_437)<br/>StorageDead(_429)<br/>StorageDead(_428)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb199__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left">switchInt(move _442)</td></tr></table>>];
    bb200__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageDead(_443)<br/>StorageLive(_444)<br/>StorageLive(_445)<br/>StorageLive(_446)<br/>_446 = _127<br/>StorageLive(_447)<br/>_447 = _145<br/>StorageLive(_448)<br/>_448 = _36<br/></td></tr><tr><td align="left">_445 = calculate_filler_multiplier_for_matched_orders(move _446, move _447, move _448)</td></tr></table>>];
    bb201__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageDead(_448)<br/>StorageDead(_447)<br/>StorageDead(_446)<br/></td></tr><tr><td align="left">_444 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _445)</td></tr></table>>];
    bb202__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_445)<br/>_449 = discriminant(_444)<br/></td></tr><tr><td align="left">switchInt(move _449)</td></tr></table>>];
    bb203__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageLive(_453)<br/>_453 = ((_444 as Continue).0: u64)<br/>_441 = _453<br/>StorageDead(_453)<br/>StorageDead(_444)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb204__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageLive(_450)<br/>_450 = ((_444 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_452)<br/>_452 = _450<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _452)</td></tr></table>>];
    bb205__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageDead(_452)<br/>StorageDead(_450)<br/>StorageDead(_444)<br/>StorageDead(_442)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb206__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageDead(_443)<br/>_441 = const 0_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb207__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">StorageDead(_442)<br/>StorageLive(_458)<br/>StorageLive(_459)<br/>StorageLive(_460)<br/>StorageLive(_461)<br/>_461 = &amp;(*_4)<br/>StorageLive(_462)<br/>_462 = &amp;(*_8)<br/>StorageLive(_463)<br/>_463 = _394<br/>StorageLive(_464)<br/>_464 = &amp;(*_17)<br/>StorageLive(_465)<br/>_465 = _119<br/>StorageLive(_466)<br/>_466 = _15<br/>StorageLive(_467)<br/>_467 = _441<br/>StorageLive(_468)<br/>StorageLive(_469)<br/>_1130 = const _<br/>_469 = &amp;(*_1130)<br/>_468 = &amp;(*_469)<br/>StorageLive(_471)<br/>StorageLive(_472)<br/>_1129 = const _<br/>_472 = &amp;(*_1129)<br/>_471 = &amp;(*_472)<br/>StorageLive(_474)<br/>_474 = ((*_1).49: i16)<br/></td></tr><tr><td align="left">_460 = calculate_fee_for_fulfillment_with_match(move _461, move _462, move _463, move _464, move _465, move _466, move _467, const false, move _468, move _471, move _474, const false)</td></tr></table>>];
    bb208__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_474)<br/>StorageDead(_471)<br/>StorageDead(_468)<br/>StorageDead(_467)<br/>StorageDead(_466)<br/>StorageDead(_465)<br/>StorageDead(_464)<br/>StorageDead(_463)<br/>StorageDead(_462)<br/>StorageDead(_461)<br/></td></tr><tr><td align="left">_459 = &lt;std::result::Result&lt;FillFees, error::ErrorCode&gt; as Try&gt;::branch(move _460)</td></tr></table>>];
    bb209__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_460)<br/>_475 = discriminant(_459)<br/></td></tr><tr><td align="left">switchInt(move _475)</td></tr></table>>];
    bb210__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageLive(_479)<br/>_479 = move ((_459 as Continue).0: math::fees::FillFees)<br/>_458 = move _479<br/>StorageDead(_479)<br/>StorageLive(_454)<br/>_454 = (_458.0: u64)<br/>StorageLive(_455)<br/>_455 = (_458.1: u64)<br/>StorageLive(_456)<br/>_456 = (_458.4: u64)<br/>StorageLive(_457)<br/>_457 = (_458.2: i64)<br/>StorageDead(_472)<br/>StorageDead(_469)<br/>StorageDead(_459)<br/>StorageDead(_458)<br/>StorageLive(_480)<br/>StorageLive(_481)<br/>StorageLive(_482)<br/>StorageLive(_483)<br/>StorageLive(_484)<br/>StorageLive(_485)<br/>StorageLive(_486)<br/>_486 = _393<br/></td></tr><tr><td align="left">_485 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _486)</td></tr></table>>];
    bb211__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageLive(_476)<br/>_476 = ((_459 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_478)<br/>_478 = _476<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _478)</td></tr></table>>];
    bb212__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_478)<br/>StorageDead(_476)<br/>StorageDead(_472)<br/>StorageDead(_469)<br/>StorageDead(_459)<br/>StorageDead(_458)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb213__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_486)<br/></td></tr><tr><td align="left">_484 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _485)</td></tr></table>>];
    bb214__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageDead(_485)<br/>_487 = discriminant(_484)<br/></td></tr><tr><td align="left">switchInt(move _487)</td></tr></table>>];
    bb215__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageLive(_491)<br/>_491 = ((_484 as Continue).0: u128)<br/>_483 = _491<br/>StorageDead(_491)<br/>StorageLive(_492)<br/>StorageLive(_493)<br/>StorageLive(_494)<br/>StorageLive(_495)<br/>StorageLive(_496)<br/>_496 = _5<br/>_497 = Len(((*_3).5: [state::user::Order; 32]))<br/>_498 = Lt(_496, _497)<br/></td></tr><tr><td align="left">assert(move _498, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _497, _496)</td></tr></table>>];
    bb216__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageLive(_488)<br/>_488 = ((_484 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_490)<br/>_490 = _488<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _490)</td></tr></table>>];
    bb217__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageDead(_490)<br/>StorageDead(_488)<br/>StorageDead(_483)<br/>StorageDead(_482)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb218__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">_495 = &amp;((*_3).5: [state::user::Order; 32])[_496]<br/>StorageLive(_499)<br/>_499 = AssetType::Base<br/></td></tr><tr><td align="left">_494 = Order::get_spot_position_update_direction(move _495, move _499)</td></tr></table>>];
    bb219__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageDead(_499)<br/>StorageDead(_495)<br/>_493 = &amp;_494<br/>_492 = &amp;(*_493)<br/>StorageLive(_500)<br/>_500 = &amp;mut (*_1)<br/>StorageLive(_501)<br/>StorageLive(_502)<br/>StorageLive(_503)<br/>_503 = _73<br/>_504 = Len(((*_3).3: [state::user::SpotPosition; 8]))<br/>_505 = Lt(_503, _504)<br/></td></tr><tr><td align="left">assert(move _505, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _504, _503)</td></tr></table>>];
    bb220__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">_502 = &amp;mut ((*_3).3: [state::user::SpotPosition; 8])[_503]<br/>_501 = &amp;mut (*_502)<br/>StorageLive(_506)<br/>_506 = Option::&lt;u128&gt;::None<br/></td></tr><tr><td align="left">_482 = update_spot_balances_and_cumulative_deposits(move _483, move _492, move _500, move _501, const false, move _506)</td></tr></table>>];
    bb221__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageDead(_506)<br/>StorageDead(_501)<br/>StorageDead(_500)<br/>StorageDead(_492)<br/>StorageDead(_483)<br/></td></tr><tr><td align="left">_481 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _482)</td></tr></table>>];
    bb222__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageDead(_482)<br/>_507 = discriminant(_481)<br/></td></tr><tr><td align="left">switchInt(move _507)</td></tr></table>>];
    bb223__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageLive(_511)<br/>_511 = ((_481 as Continue).0: ())<br/>_480 = _511<br/>StorageDead(_511)<br/>StorageDead(_503)<br/>StorageDead(_502)<br/>StorageDead(_496)<br/>StorageDead(_494)<br/>StorageDead(_493)<br/>StorageDead(_484)<br/>StorageDead(_481)<br/>StorageDead(_480)<br/>StorageLive(_512)<br/>StorageLive(_513)<br/>StorageLive(_514)<br/>_514 = _5<br/>_515 = Len(((*_3).5: [state::user::Order; 32]))<br/>_516 = Lt(_514, _515)<br/></td></tr><tr><td align="left">assert(move _516, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _515, _514)</td></tr></table>>];
    bb224__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageLive(_508)<br/>_508 = ((_481 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_510)<br/>_510 = _508<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _510)</td></tr></table>>];
    bb225__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">StorageDead(_510)<br/>StorageDead(_508)<br/>StorageDead(_503)<br/>StorageDead(_502)<br/>StorageDead(_496)<br/>StorageDead(_494)<br/>StorageDead(_493)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb226__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">_513 = &amp;(((*_3).5: [state::user::Order; 32])[_514].17: controller::position::PositionDirection)<br/>_517 = discriminant((*_513))<br/></td></tr><tr><td align="left">switchInt(move _517)</td></tr></table>>];
    bb227__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageLive(_527)<br/>StorageLive(_528)<br/>StorageLive(_529)<br/>_529 = _394<br/>StorageLive(_530)<br/>_530 = _454<br/></td></tr><tr><td align="left">_528 = &lt;u64 as SafeMath&gt;::safe_sub(move _529, move _530)</td></tr></table>>];
    bb228__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageLive(_518)<br/>StorageLive(_519)<br/>StorageLive(_520)<br/>_520 = _394<br/>StorageLive(_521)<br/>_521 = _454<br/></td></tr><tr><td align="left">_519 = &lt;u64 as SafeMath&gt;::safe_add(move _520, move _521)</td></tr></table>>];
    bb229__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageDead(_521)<br/>StorageDead(_520)<br/></td></tr><tr><td align="left">_518 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _519)</td></tr></table>>];
    bb230__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">StorageDead(_519)<br/>_522 = discriminant(_518)<br/></td></tr><tr><td align="left">switchInt(move _522)</td></tr></table>>];
    bb231__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageLive(_526)<br/>_526 = ((_518 as Continue).0: u64)<br/>_512 = _526<br/>StorageDead(_526)<br/>StorageDead(_518)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb232__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">StorageLive(_523)<br/>_523 = ((_518 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_525)<br/>_525 = _523<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _525)</td></tr></table>>];
    bb233__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageDead(_525)<br/>StorageDead(_523)<br/>StorageDead(_518)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb234__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageDead(_530)<br/>StorageDead(_529)<br/></td></tr><tr><td align="left">_527 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _528)</td></tr></table>>];
    bb235__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageDead(_528)<br/>_531 = discriminant(_527)<br/></td></tr><tr><td align="left">switchInt(move _531)</td></tr></table>>];
    bb236__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageLive(_535)<br/>_535 = ((_527 as Continue).0: u64)<br/>_512 = _535<br/>StorageDead(_535)<br/>StorageDead(_527)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb237__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageLive(_532)<br/>_532 = ((_527 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_534)<br/>_534 = _532<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _534)</td></tr></table>>];
    bb238__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left" balign="left">StorageDead(_534)<br/>StorageDead(_532)<br/>StorageDead(_527)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb239__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageDead(_514)<br/>StorageDead(_513)<br/>StorageLive(_536)<br/>StorageLive(_537)<br/>StorageLive(_538)<br/>StorageLive(_539)<br/>StorageLive(_540)<br/>StorageLive(_541)<br/>StorageLive(_542)<br/>_542 = _512<br/></td></tr><tr><td align="left">_541 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _542)</td></tr></table>>];
    bb240__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">StorageDead(_542)<br/></td></tr><tr><td align="left">_540 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _541)</td></tr></table>>];
    bb241__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_541)<br/>_543 = discriminant(_540)<br/></td></tr><tr><td align="left">switchInt(move _543)</td></tr></table>>];
    bb242__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageLive(_547)<br/>_547 = ((_540 as Continue).0: u128)<br/>_539 = _547<br/>StorageDead(_547)<br/>StorageLive(_548)<br/>StorageLive(_549)<br/>StorageLive(_550)<br/>StorageLive(_551)<br/>StorageLive(_552)<br/>_552 = _5<br/>_553 = Len(((*_3).5: [state::user::Order; 32]))<br/>_554 = Lt(_552, _553)<br/></td></tr><tr><td align="left">assert(move _554, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _553, _552)</td></tr></table>>];
    bb243__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageLive(_544)<br/>_544 = ((_540 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_546)<br/>_546 = _544<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _546)</td></tr></table>>];
    bb244__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageDead(_546)<br/>StorageDead(_544)<br/>StorageDead(_539)<br/>StorageDead(_538)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb245__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">_551 = &amp;((*_3).5: [state::user::Order; 32])[_552]<br/>StorageLive(_555)<br/>_555 = AssetType::Quote<br/></td></tr><tr><td align="left">_550 = Order::get_spot_position_update_direction(move _551, move _555)</td></tr></table>>];
    bb246__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageDead(_555)<br/>StorageDead(_551)<br/>_549 = &amp;_550<br/>_548 = &amp;(*_549)<br/>StorageLive(_556)<br/>_556 = &amp;mut (*_2)<br/>StorageLive(_557)<br/>StorageLive(_558)<br/>StorageLive(_559)<br/>_559 = &amp;mut (*_3)<br/></td></tr><tr><td align="left">_558 = User::get_quote_spot_position_mut(move _559)</td></tr></table>>];
    bb247__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">_557 = &amp;mut (*_558)<br/>StorageDead(_559)<br/>StorageLive(_560)<br/>StorageLive(_561)<br/>StorageLive(_562)<br/>StorageLive(_563)<br/>StorageLive(_564)<br/>_564 = _394<br/></td></tr><tr><td align="left">_563 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _564)</td></tr></table>>];
    bb248__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageDead(_564)<br/></td></tr><tr><td align="left">_562 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _563)</td></tr></table>>];
    bb249__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">StorageDead(_563)<br/>_565 = discriminant(_562)<br/></td></tr><tr><td align="left">switchInt(move _565)</td></tr></table>>];
    bb250__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageLive(_569)<br/>_569 = ((_562 as Continue).0: u128)<br/>_561 = _569<br/>StorageDead(_569)<br/>_560 = Option::&lt;u128&gt;::Some(move _561)<br/>StorageDead(_561)<br/></td></tr><tr><td align="left">_538 = update_spot_balances_and_cumulative_deposits(move _539, move _548, move _556, move _557, const false, move _560)</td></tr></table>>];
    bb251__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageLive(_566)<br/>_566 = ((_562 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_568)<br/>_568 = _566<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _568)</td></tr></table>>];
    bb252__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageDead(_568)<br/>StorageDead(_566)<br/>StorageDead(_561)<br/>StorageDead(_560)<br/>StorageDead(_557)<br/>StorageDead(_556)<br/>StorageDead(_548)<br/>StorageDead(_539)<br/>StorageDead(_538)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb253__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageDead(_560)<br/>StorageDead(_557)<br/>StorageDead(_556)<br/>StorageDead(_548)<br/>StorageDead(_539)<br/></td></tr><tr><td align="left">_537 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _538)</td></tr></table>>];
    bb254__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageDead(_538)<br/>_570 = discriminant(_537)<br/></td></tr><tr><td align="left">switchInt(move _570)</td></tr></table>>];
    bb255__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">StorageLive(_574)<br/>_574 = ((_537 as Continue).0: ())<br/>_536 = _574<br/>StorageDead(_574)<br/>StorageDead(_562)<br/>StorageDead(_558)<br/>StorageDead(_552)<br/>StorageDead(_550)<br/>StorageDead(_549)<br/>StorageDead(_540)<br/>StorageDead(_537)<br/>StorageDead(_536)<br/>StorageLive(_575)<br/>StorageLive(_576)<br/>StorageLive(_577)<br/>StorageLive(_578)<br/>_578 = &amp;mut (*_3)<br/>StorageLive(_579)<br/>StorageLive(_580)<br/>StorageLive(_581)<br/>StorageLive(_582)<br/>StorageLive(_583)<br/>_583 = _454<br/></td></tr><tr><td align="left">_582 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _583)</td></tr></table>>];
    bb256__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageLive(_571)<br/>_571 = ((_537 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_573)<br/>_573 = _571<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _573)</td></tr></table>>];
    bb257__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">StorageDead(_573)<br/>StorageDead(_571)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb258__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_583)<br/></td></tr><tr><td align="left">_581 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _582)</td></tr></table>>];
    bb259__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">StorageDead(_582)<br/>_584 = discriminant(_581)<br/></td></tr><tr><td align="left">switchInt(move _584)</td></tr></table>>];
    bb260__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageLive(_588)<br/>_588 = ((_581 as Continue).0: i64)<br/>_580 = _588<br/>StorageDead(_588)<br/>_589 = Eq(_580, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _589, &quot;attempt to negate `{}`, which would overflow&quot;, _580)</td></tr></table>>];
    bb261__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageLive(_585)<br/>_585 = ((_581 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_587)<br/>_587 = _585<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _587)</td></tr></table>>];
    bb262__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageDead(_587)<br/>StorageDead(_585)<br/>StorageDead(_580)<br/>StorageDead(_579)<br/>StorageDead(_578)<br/>StorageDead(_577)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb263__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">_579 = Neg(move _580)<br/>StorageDead(_580)<br/></td></tr><tr><td align="left">_577 = User::update_cumulative_spot_fees(move _578, move _579)</td></tr></table>>];
    bb264__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageDead(_579)<br/>StorageDead(_578)<br/></td></tr><tr><td align="left">_576 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _577)</td></tr></table>>];
    bb265__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">StorageDead(_577)<br/>_590 = discriminant(_576)<br/></td></tr><tr><td align="left">switchInt(move _590)</td></tr></table>>];
    bb266__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">StorageLive(_594)<br/>_594 = ((_576 as Continue).0: ())<br/>_575 = _594<br/>StorageDead(_594)<br/>StorageDead(_581)<br/>StorageDead(_576)<br/>StorageDead(_575)<br/>StorageLive(_595)<br/>StorageLive(_596)<br/>StorageLive(_597)<br/>StorageLive(_598)<br/>StorageLive(_599)<br/>StorageLive(_600)<br/>_600 = _5<br/>_601 = Len(((*_3).5: [state::user::Order; 32]))<br/>_602 = Lt(_600, _601)<br/></td></tr><tr><td align="left">assert(move _602, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _601, _600)</td></tr></table>>];
    bb267__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">StorageLive(_591)<br/>_591 = ((_576 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_593)<br/>_593 = _591<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _593)</td></tr></table>>];
    bb268__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageDead(_593)<br/>StorageDead(_591)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb269__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left" balign="left">_599 = &amp;mut ((*_3).5: [state::user::Order; 32])[_600]<br/>_598 = &amp;mut (*_599)<br/>StorageLive(_603)<br/>_603 = _393<br/>StorageLive(_604)<br/>_604 = _394<br/></td></tr><tr><td align="left">_597 = update_order_after_fill(move _598, move _603, move _604)</td></tr></table>>];
    bb270__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageDead(_604)<br/>StorageDead(_603)<br/>StorageDead(_598)<br/></td></tr><tr><td align="left">_596 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _597)</td></tr></table>>];
    bb271__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">StorageDead(_597)<br/>_605 = discriminant(_596)<br/></td></tr><tr><td align="left">switchInt(move _605)</td></tr></table>>];
    bb272__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">StorageLive(_609)<br/>_609 = ((_596 as Continue).0: ())<br/>_595 = _609<br/>StorageDead(_609)<br/>StorageDead(_600)<br/>StorageDead(_599)<br/>StorageDead(_596)<br/>StorageDead(_595)<br/>StorageLive(_610)<br/>StorageLive(_611)<br/>_611 = _5<br/>_612 = Len(((*_3).5: [state::user::Order; 32]))<br/>_613 = Lt(_611, _612)<br/></td></tr><tr><td align="left">assert(move _613, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _612, _611)</td></tr></table>>];
    bb273__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">StorageLive(_606)<br/>_606 = ((_596 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_608)<br/>_608 = _606<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _608)</td></tr></table>>];
    bb274__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_608)<br/>StorageDead(_606)<br/>StorageDead(_600)<br/>StorageDead(_599)<br/>StorageDead(_596)<br/>StorageDead(_595)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb275__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">_610 = (((*_3).5: [state::user::Order; 32])[_611].17: controller::position::PositionDirection)<br/>StorageDead(_611)<br/>StorageLive(_614)<br/>StorageLive(_615)<br/>StorageLive(_616)<br/>_616 = _5<br/>_617 = Len(((*_3).5: [state::user::Order; 32]))<br/>_618 = Lt(_616, _617)<br/></td></tr><tr><td align="left">assert(move _618, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _617, _616)</td></tr></table>>];
    bb276__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">_615 = &amp;((*_3).5: [state::user::Order; 32])[_616]<br/></td></tr><tr><td align="left">_614 = Order::update_open_bids_and_asks(move _615)</td></tr></table>>];
    bb277__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageDead(_615)<br/>StorageDead(_616)<br/>StorageLive(_619)<br/>StorageLive(_620)<br/>StorageLive(_621)<br/>StorageLive(_622)<br/>StorageLive(_623)<br/>StorageLive(_624)<br/>_624 = _73<br/>_625 = Len(((*_3).3: [state::user::SpotPosition; 8]))<br/>_626 = Lt(_624, _625)<br/></td></tr><tr><td align="left">assert(move _626, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _625, _624)</td></tr></table>>];
    bb278__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">_623 = &amp;mut ((*_3).3: [state::user::SpotPosition; 8])[_624]<br/>_622 = &amp;mut (*_623)<br/>StorageLive(_627)<br/>StorageLive(_628)<br/>_628 = &amp;_610<br/>_627 = &amp;(*_628)<br/>StorageLive(_629)<br/>_629 = _393<br/>StorageLive(_630)<br/>_630 = _614<br/></td></tr><tr><td align="left">_621 = decrease_spot_open_bids_and_asks(move _622, move _627, move _629, move _630)</td></tr></table>>];
    bb279__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">StorageDead(_630)<br/>StorageDead(_629)<br/>StorageDead(_627)<br/>StorageDead(_622)<br/></td></tr><tr><td align="left">_620 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _621)</td></tr></table>>];
    bb280__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageDead(_621)<br/>_631 = discriminant(_620)<br/></td></tr><tr><td align="left">switchInt(move _631)</td></tr></table>>];
    bb281__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">StorageLive(_635)<br/>_635 = ((_620 as Continue).0: ())<br/>_619 = _635<br/>StorageDead(_635)<br/>StorageDead(_628)<br/>StorageDead(_624)<br/>StorageDead(_623)<br/>StorageDead(_620)<br/>StorageDead(_619)<br/>StorageLive(_636)<br/>StorageLive(_637)<br/>StorageLive(_638)<br/>StorageLive(_639)<br/>_639 = &amp;mut (*_4)<br/>StorageLive(_640)<br/>_640 = ((*_1).58: u8)<br/>StorageLive(_641)<br/>_641 = _394<br/>StorageLive(_642)<br/>_642 = _14<br/></td></tr><tr><td align="left">_638 = UserStats::update_taker_volume_30d(move _639, move _640, move _641, move _642)</td></tr></table>>];
    bb282__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">StorageLive(_632)<br/>_632 = ((_620 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_634)<br/>_634 = _632<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _634)</td></tr></table>>];
    bb283__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_634)<br/>StorageDead(_632)<br/>StorageDead(_628)<br/>StorageDead(_624)<br/>StorageDead(_623)<br/>StorageDead(_620)<br/>StorageDead(_619)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb284__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">StorageDead(_642)<br/>StorageDead(_641)<br/>StorageDead(_640)<br/>StorageDead(_639)<br/></td></tr><tr><td align="left">_637 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _638)</td></tr></table>>];
    bb285__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">StorageDead(_638)<br/>_643 = discriminant(_637)<br/></td></tr><tr><td align="left">switchInt(move _643)</td></tr></table>>];
    bb286__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">StorageLive(_647)<br/>_647 = ((_637 as Continue).0: ())<br/>_636 = _647<br/>StorageDead(_647)<br/>StorageDead(_637)<br/>StorageDead(_636)<br/>StorageLive(_648)<br/>StorageLive(_649)<br/>StorageLive(_650)<br/>StorageLive(_651)<br/>_651 = &amp;mut (*_4)<br/>StorageLive(_652)<br/>_652 = _454<br/></td></tr><tr><td align="left">_650 = UserStats::increment_total_fees(move _651, move _652)</td></tr></table>>];
    bb287__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageLive(_644)<br/>_644 = ((_637 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_646)<br/>_646 = _644<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _646)</td></tr></table>>];
    bb288__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">StorageDead(_646)<br/>StorageDead(_644)<br/>StorageDead(_637)<br/>StorageDead(_636)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb289__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">StorageDead(_652)<br/>StorageDead(_651)<br/></td></tr><tr><td align="left">_649 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _650)</td></tr></table>>];
    bb290__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left" balign="left">StorageDead(_650)<br/>_653 = discriminant(_649)<br/></td></tr><tr><td align="left">switchInt(move _653)</td></tr></table>>];
    bb291__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">StorageLive(_657)<br/>_657 = ((_649 as Continue).0: ())<br/>_648 = _657<br/>StorageDead(_657)<br/>StorageDead(_649)<br/>StorageDead(_648)<br/>StorageLive(_658)<br/>StorageLive(_659)<br/>StorageLive(_660)<br/>StorageLive(_661)<br/>StorageLive(_662)<br/>StorageLive(_663)<br/>StorageLive(_664)<br/>_664 = _393<br/></td></tr><tr><td align="left">_663 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _664)</td></tr></table>>];
    bb292__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageLive(_654)<br/>_654 = ((_649 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_656)<br/>_656 = _654<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _656)</td></tr></table>>];
    bb293__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">StorageDead(_656)<br/>StorageDead(_654)<br/>StorageDead(_649)<br/>StorageDead(_648)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb294__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">StorageDead(_664)<br/></td></tr><tr><td align="left">_662 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _663)</td></tr></table>>];
    bb295__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">StorageDead(_663)<br/>_665 = discriminant(_662)<br/></td></tr><tr><td align="left">switchInt(move _665)</td></tr></table>>];
    bb296__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">StorageLive(_669)<br/>_669 = ((_662 as Continue).0: u128)<br/>_661 = _669<br/>StorageDead(_669)<br/>StorageLive(_670)<br/>StorageLive(_671)<br/>StorageLive(_672)<br/>StorageLive(_673)<br/>StorageLive(_674)<br/>_674 = _9<br/>_675 = Len(((*_7).5: [state::user::Order; 32]))<br/>_676 = Lt(_674, _675)<br/></td></tr><tr><td align="left">assert(move _676, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _675, _674)</td></tr></table>>];
    bb297__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageLive(_666)<br/>_666 = ((_662 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_668)<br/>_668 = _666<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _668)</td></tr></table>>];
    bb298__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left" balign="left">StorageDead(_668)<br/>StorageDead(_666)<br/>StorageDead(_661)<br/>StorageDead(_660)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb299__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left" balign="left">_673 = &amp;((*_7).5: [state::user::Order; 32])[_674]<br/>StorageLive(_677)<br/>_677 = AssetType::Base<br/></td></tr><tr><td align="left">_672 = Order::get_spot_position_update_direction(move _673, move _677)</td></tr></table>>];
    bb300__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageDead(_677)<br/>StorageDead(_673)<br/>_671 = &amp;_672<br/>_670 = &amp;(*_671)<br/>StorageLive(_678)<br/>_678 = &amp;mut (*_1)<br/>StorageLive(_679)<br/>StorageLive(_680)<br/>StorageLive(_681)<br/>_681 = _149<br/>_682 = Len(((*_7).3: [state::user::SpotPosition; 8]))<br/>_683 = Lt(_681, _682)<br/></td></tr><tr><td align="left">assert(move _683, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _682, _681)</td></tr></table>>];
    bb301__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">_680 = &amp;mut ((*_7).3: [state::user::SpotPosition; 8])[_681]<br/>_679 = &amp;mut (*_680)<br/>StorageLive(_684)<br/>_684 = Option::&lt;u128&gt;::None<br/></td></tr><tr><td align="left">_660 = update_spot_balances_and_cumulative_deposits(move _661, move _670, move _678, move _679, const false, move _684)</td></tr></table>>];
    bb302__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">StorageDead(_684)<br/>StorageDead(_679)<br/>StorageDead(_678)<br/>StorageDead(_670)<br/>StorageDead(_661)<br/></td></tr><tr><td align="left">_659 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _660)</td></tr></table>>];
    bb303__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageDead(_660)<br/>_685 = discriminant(_659)<br/></td></tr><tr><td align="left">switchInt(move _685)</td></tr></table>>];
    bb304__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageLive(_689)<br/>_689 = ((_659 as Continue).0: ())<br/>_658 = _689<br/>StorageDead(_689)<br/>StorageDead(_681)<br/>StorageDead(_680)<br/>StorageDead(_674)<br/>StorageDead(_672)<br/>StorageDead(_671)<br/>StorageDead(_662)<br/>StorageDead(_659)<br/>StorageDead(_658)<br/>StorageLive(_690)<br/>StorageLive(_691)<br/>StorageLive(_692)<br/>_692 = _9<br/>_693 = Len(((*_7).5: [state::user::Order; 32]))<br/>_694 = Lt(_692, _693)<br/></td></tr><tr><td align="left">assert(move _694, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _693, _692)</td></tr></table>>];
    bb305__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">StorageLive(_686)<br/>_686 = ((_659 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_688)<br/>_688 = _686<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _688)</td></tr></table>>];
    bb306__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">StorageDead(_688)<br/>StorageDead(_686)<br/>StorageDead(_681)<br/>StorageDead(_680)<br/>StorageDead(_674)<br/>StorageDead(_672)<br/>StorageDead(_671)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb307__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">_691 = &amp;(((*_7).5: [state::user::Order; 32])[_692].17: controller::position::PositionDirection)<br/>_695 = discriminant((*_691))<br/></td></tr><tr><td align="left">switchInt(move _695)</td></tr></table>>];
    bb308__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">StorageLive(_705)<br/>StorageLive(_706)<br/>StorageLive(_707)<br/>_707 = _394<br/>StorageLive(_708)<br/>_708 = _455<br/></td></tr><tr><td align="left">_706 = &lt;u64 as SafeMath&gt;::safe_add(move _707, move _708)</td></tr></table>>];
    bb309__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">StorageLive(_696)<br/>StorageLive(_697)<br/>StorageLive(_698)<br/>_698 = _394<br/>StorageLive(_699)<br/>_699 = _455<br/></td></tr><tr><td align="left">_697 = &lt;u64 as SafeMath&gt;::safe_sub(move _698, move _699)</td></tr></table>>];
    bb310__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">StorageDead(_699)<br/>StorageDead(_698)<br/></td></tr><tr><td align="left">_696 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _697)</td></tr></table>>];
    bb311__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">StorageDead(_697)<br/>_700 = discriminant(_696)<br/></td></tr><tr><td align="left">switchInt(move _700)</td></tr></table>>];
    bb312__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageLive(_704)<br/>_704 = ((_696 as Continue).0: u64)<br/>_690 = _704<br/>StorageDead(_704)<br/>StorageDead(_696)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb313__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageLive(_701)<br/>_701 = ((_696 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_703)<br/>_703 = _701<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _703)</td></tr></table>>];
    bb314__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">StorageDead(_703)<br/>StorageDead(_701)<br/>StorageDead(_696)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb315__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">StorageDead(_708)<br/>StorageDead(_707)<br/></td></tr><tr><td align="left">_705 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _706)</td></tr></table>>];
    bb316__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageDead(_706)<br/>_709 = discriminant(_705)<br/></td></tr><tr><td align="left">switchInt(move _709)</td></tr></table>>];
    bb317__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageLive(_713)<br/>_713 = ((_705 as Continue).0: u64)<br/>_690 = _713<br/>StorageDead(_713)<br/>StorageDead(_705)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb318__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageLive(_710)<br/>_710 = ((_705 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_712)<br/>_712 = _710<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _712)</td></tr></table>>];
    bb319__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">StorageDead(_712)<br/>StorageDead(_710)<br/>StorageDead(_705)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb320__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">StorageDead(_692)<br/>StorageDead(_691)<br/>StorageLive(_714)<br/>StorageLive(_715)<br/>StorageLive(_716)<br/>StorageLive(_717)<br/>StorageLive(_718)<br/>StorageLive(_719)<br/>StorageLive(_720)<br/>_720 = _690<br/></td></tr><tr><td align="left">_719 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _720)</td></tr></table>>];
    bb321__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">StorageDead(_720)<br/></td></tr><tr><td align="left">_718 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _719)</td></tr></table>>];
    bb322__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageDead(_719)<br/>_721 = discriminant(_718)<br/></td></tr><tr><td align="left">switchInt(move _721)</td></tr></table>>];
    bb323__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageLive(_725)<br/>_725 = ((_718 as Continue).0: u128)<br/>_717 = _725<br/>StorageDead(_725)<br/>StorageLive(_726)<br/>StorageLive(_727)<br/>StorageLive(_728)<br/>StorageLive(_729)<br/>StorageLive(_730)<br/>_730 = _9<br/>_731 = Len(((*_7).5: [state::user::Order; 32]))<br/>_732 = Lt(_730, _731)<br/></td></tr><tr><td align="left">assert(move _732, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _731, _730)</td></tr></table>>];
    bb324__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageLive(_722)<br/>_722 = ((_718 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_724)<br/>_724 = _722<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _724)</td></tr></table>>];
    bb325__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">StorageDead(_724)<br/>StorageDead(_722)<br/>StorageDead(_717)<br/>StorageDead(_716)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb326__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">_729 = &amp;((*_7).5: [state::user::Order; 32])[_730]<br/>StorageLive(_733)<br/>_733 = AssetType::Quote<br/></td></tr><tr><td align="left">_728 = Order::get_spot_position_update_direction(move _729, move _733)</td></tr></table>>];
    bb327__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">StorageDead(_733)<br/>StorageDead(_729)<br/>_727 = &amp;_728<br/>_726 = &amp;(*_727)<br/>StorageLive(_734)<br/>_734 = &amp;mut (*_2)<br/>StorageLive(_735)<br/>StorageLive(_736)<br/>StorageLive(_737)<br/>_737 = &amp;mut (*_7)<br/></td></tr><tr><td align="left">_736 = User::get_quote_spot_position_mut(move _737)</td></tr></table>>];
    bb328__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">_735 = &amp;mut (*_736)<br/>StorageDead(_737)<br/>StorageLive(_738)<br/>StorageLive(_739)<br/>StorageLive(_740)<br/>StorageLive(_741)<br/>StorageLive(_742)<br/>_742 = _394<br/></td></tr><tr><td align="left">_741 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _742)</td></tr></table>>];
    bb329__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">StorageDead(_742)<br/></td></tr><tr><td align="left">_740 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _741)</td></tr></table>>];
    bb330__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">StorageDead(_741)<br/>_743 = discriminant(_740)<br/></td></tr><tr><td align="left">switchInt(move _743)</td></tr></table>>];
    bb331__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left" balign="left">StorageLive(_747)<br/>_747 = ((_740 as Continue).0: u128)<br/>_739 = _747<br/>StorageDead(_747)<br/>_738 = Option::&lt;u128&gt;::Some(move _739)<br/>StorageDead(_739)<br/></td></tr><tr><td align="left">_716 = update_spot_balances_and_cumulative_deposits(move _717, move _726, move _734, move _735, const false, move _738)</td></tr></table>>];
    bb332__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">StorageLive(_744)<br/>_744 = ((_740 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_746)<br/>_746 = _744<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _746)</td></tr></table>>];
    bb333__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">StorageDead(_746)<br/>StorageDead(_744)<br/>StorageDead(_739)<br/>StorageDead(_738)<br/>StorageDead(_735)<br/>StorageDead(_734)<br/>StorageDead(_726)<br/>StorageDead(_717)<br/>StorageDead(_716)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb334__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left" balign="left">StorageDead(_738)<br/>StorageDead(_735)<br/>StorageDead(_734)<br/>StorageDead(_726)<br/>StorageDead(_717)<br/></td></tr><tr><td align="left">_715 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _716)</td></tr></table>>];
    bb335__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">335</td></tr><tr><td align="left" balign="left">StorageDead(_716)<br/>_748 = discriminant(_715)<br/></td></tr><tr><td align="left">switchInt(move _748)</td></tr></table>>];
    bb336__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">336</td></tr><tr><td align="left" balign="left">StorageLive(_752)<br/>_752 = ((_715 as Continue).0: ())<br/>_714 = _752<br/>StorageDead(_752)<br/>StorageDead(_740)<br/>StorageDead(_736)<br/>StorageDead(_730)<br/>StorageDead(_728)<br/>StorageDead(_727)<br/>StorageDead(_718)<br/>StorageDead(_715)<br/>StorageDead(_714)<br/>StorageLive(_753)<br/>StorageLive(_754)<br/>StorageLive(_755)<br/>StorageLive(_756)<br/>_756 = &amp;mut (*_7)<br/>StorageLive(_757)<br/>StorageLive(_758)<br/>StorageLive(_759)<br/>StorageLive(_760)<br/>_760 = _455<br/></td></tr><tr><td align="left">_759 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _760)</td></tr></table>>];
    bb337__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">337</td></tr><tr><td align="left" balign="left">StorageLive(_749)<br/>_749 = ((_715 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_751)<br/>_751 = _749<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _751)</td></tr></table>>];
    bb338__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">338</td></tr><tr><td align="left" balign="left">StorageDead(_751)<br/>StorageDead(_749)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb339__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">339</td></tr><tr><td align="left" balign="left">StorageDead(_760)<br/></td></tr><tr><td align="left">_758 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _759)</td></tr></table>>];
    bb340__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">340</td></tr><tr><td align="left" balign="left">StorageDead(_759)<br/>_761 = discriminant(_758)<br/></td></tr><tr><td align="left">switchInt(move _761)</td></tr></table>>];
    bb341__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">341</td></tr><tr><td align="left" balign="left">StorageLive(_765)<br/>_765 = ((_758 as Continue).0: i64)<br/>_757 = _765<br/>StorageDead(_765)<br/></td></tr><tr><td align="left">_755 = User::update_cumulative_spot_fees(move _756, move _757)</td></tr></table>>];
    bb342__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">342</td></tr><tr><td align="left" balign="left">StorageLive(_762)<br/>_762 = ((_758 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_764)<br/>_764 = _762<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _764)</td></tr></table>>];
    bb343__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">343</td></tr><tr><td align="left" balign="left">StorageDead(_764)<br/>StorageDead(_762)<br/>StorageDead(_757)<br/>StorageDead(_756)<br/>StorageDead(_755)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb344__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">344</td></tr><tr><td align="left" balign="left">StorageDead(_757)<br/>StorageDead(_756)<br/></td></tr><tr><td align="left">_754 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _755)</td></tr></table>>];
    bb345__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">345</td></tr><tr><td align="left" balign="left">StorageDead(_755)<br/>_766 = discriminant(_754)<br/></td></tr><tr><td align="left">switchInt(move _766)</td></tr></table>>];
    bb346__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">346</td></tr><tr><td align="left" balign="left">StorageLive(_770)<br/>_770 = ((_754 as Continue).0: ())<br/>_753 = _770<br/>StorageDead(_770)<br/>StorageDead(_758)<br/>StorageDead(_754)<br/>StorageDead(_753)<br/>StorageLive(_771)<br/>StorageLive(_772)<br/>StorageLive(_773)<br/>StorageLive(_774)<br/>StorageLive(_775)<br/>StorageLive(_776)<br/>_776 = _9<br/>_777 = Len(((*_7).5: [state::user::Order; 32]))<br/>_778 = Lt(_776, _777)<br/></td></tr><tr><td align="left">assert(move _778, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _777, _776)</td></tr></table>>];
    bb347__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left" balign="left">StorageLive(_767)<br/>_767 = ((_754 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_769)<br/>_769 = _767<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _769)</td></tr></table>>];
    bb348__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left" balign="left">StorageDead(_769)<br/>StorageDead(_767)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb349__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">349</td></tr><tr><td align="left" balign="left">_775 = &amp;mut ((*_7).5: [state::user::Order; 32])[_776]<br/>_774 = &amp;mut (*_775)<br/>StorageLive(_779)<br/>_779 = _393<br/>StorageLive(_780)<br/>_780 = _394<br/></td></tr><tr><td align="left">_773 = update_order_after_fill(move _774, move _779, move _780)</td></tr></table>>];
    bb350__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">350</td></tr><tr><td align="left" balign="left">StorageDead(_780)<br/>StorageDead(_779)<br/>StorageDead(_774)<br/></td></tr><tr><td align="left">_772 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _773)</td></tr></table>>];
    bb351__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">351</td></tr><tr><td align="left" balign="left">StorageDead(_773)<br/>_781 = discriminant(_772)<br/></td></tr><tr><td align="left">switchInt(move _781)</td></tr></table>>];
    bb352__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">352</td></tr><tr><td align="left" balign="left">StorageLive(_785)<br/>_785 = ((_772 as Continue).0: ())<br/>_771 = _785<br/>StorageDead(_785)<br/>StorageDead(_776)<br/>StorageDead(_775)<br/>StorageDead(_772)<br/>StorageDead(_771)<br/>StorageLive(_786)<br/>StorageLive(_787)<br/>_787 = _9<br/>_788 = Len(((*_7).5: [state::user::Order; 32]))<br/>_789 = Lt(_787, _788)<br/></td></tr><tr><td align="left">assert(move _789, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _788, _787)</td></tr></table>>];
    bb353__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">353</td></tr><tr><td align="left" balign="left">StorageLive(_782)<br/>_782 = ((_772 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_784)<br/>_784 = _782<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _784)</td></tr></table>>];
    bb354__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">354</td></tr><tr><td align="left" balign="left">StorageDead(_784)<br/>StorageDead(_782)<br/>StorageDead(_776)<br/>StorageDead(_775)<br/>StorageDead(_772)<br/>StorageDead(_771)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb355__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">355</td></tr><tr><td align="left" balign="left">_786 = (((*_7).5: [state::user::Order; 32])[_787].17: controller::position::PositionDirection)<br/>StorageDead(_787)<br/>StorageLive(_790)<br/>StorageLive(_791)<br/>StorageLive(_792)<br/>_792 = _9<br/>_793 = Len(((*_7).5: [state::user::Order; 32]))<br/>_794 = Lt(_792, _793)<br/></td></tr><tr><td align="left">assert(move _794, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _793, _792)</td></tr></table>>];
    bb356__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">356</td></tr><tr><td align="left" balign="left">_791 = &amp;((*_7).5: [state::user::Order; 32])[_792]<br/></td></tr><tr><td align="left">_790 = Order::update_open_bids_and_asks(move _791)</td></tr></table>>];
    bb357__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">357</td></tr><tr><td align="left" balign="left">StorageDead(_791)<br/>StorageDead(_792)<br/>StorageLive(_795)<br/>StorageLive(_796)<br/>StorageLive(_797)<br/>StorageLive(_798)<br/>StorageLive(_799)<br/>StorageLive(_800)<br/>_800 = _149<br/>_801 = Len(((*_7).3: [state::user::SpotPosition; 8]))<br/>_802 = Lt(_800, _801)<br/></td></tr><tr><td align="left">assert(move _802, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _801, _800)</td></tr></table>>];
    bb358__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">358</td></tr><tr><td align="left" balign="left">_799 = &amp;mut ((*_7).3: [state::user::SpotPosition; 8])[_800]<br/>_798 = &amp;mut (*_799)<br/>StorageLive(_803)<br/>StorageLive(_804)<br/>_804 = &amp;_786<br/>_803 = &amp;(*_804)<br/>StorageLive(_805)<br/>_805 = _393<br/>StorageLive(_806)<br/>_806 = _790<br/></td></tr><tr><td align="left">_797 = decrease_spot_open_bids_and_asks(move _798, move _803, move _805, move _806)</td></tr></table>>];
    bb359__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">359</td></tr><tr><td align="left" balign="left">StorageDead(_806)<br/>StorageDead(_805)<br/>StorageDead(_803)<br/>StorageDead(_798)<br/></td></tr><tr><td align="left">_796 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _797)</td></tr></table>>];
    bb360__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">360</td></tr><tr><td align="left" balign="left">StorageDead(_797)<br/>_807 = discriminant(_796)<br/></td></tr><tr><td align="left">switchInt(move _807)</td></tr></table>>];
    bb361__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">361</td></tr><tr><td align="left" balign="left">StorageLive(_811)<br/>_811 = ((_796 as Continue).0: ())<br/>_795 = _811<br/>StorageDead(_811)<br/>StorageDead(_804)<br/>StorageDead(_800)<br/>StorageDead(_799)<br/>StorageDead(_796)<br/>StorageDead(_795)<br/>StorageLive(_812)<br/>_813 = discriminant((*_8))<br/></td></tr><tr><td align="left">switchInt(move _813)</td></tr></table>>];
    bb362__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">362</td></tr><tr><td align="left" balign="left">StorageLive(_808)<br/>_808 = ((_796 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_810)<br/>_810 = _808<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _810)</td></tr></table>>];
    bb363__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">363</td></tr><tr><td align="left" balign="left">StorageDead(_810)<br/>StorageDead(_808)<br/>StorageDead(_804)<br/>StorageDead(_800)<br/>StorageDead(_799)<br/>StorageDead(_796)<br/>StorageDead(_795)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb364__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">364</td></tr><tr><td align="left" balign="left">StorageLive(_837)<br/>StorageLive(_838)<br/>StorageLive(_839)<br/>StorageLive(_840)<br/>_840 = &amp;mut (*_4)<br/>StorageLive(_841)<br/>_841 = ((*_1).59: u8)<br/>StorageLive(_842)<br/>_842 = _394<br/>StorageLive(_843)<br/>_843 = _14<br/></td></tr><tr><td align="left">_839 = UserStats::update_maker_volume_30d(move _840, move _841, move _842, move _843)</td></tr></table>>];
    bb365__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">365</td></tr><tr><td align="left" balign="left">StorageLive(_814)<br/>_814 = &amp;mut (((*_8) as Some).0: &amp;mut state::user::UserStats)<br/>StorageLive(_815)<br/>StorageLive(_816)<br/>StorageLive(_817)<br/>StorageLive(_818)<br/>_1132 = deref_copy (*_814)<br/>_818 = &amp;mut (*_1132)<br/>StorageLive(_819)<br/>_819 = ((*_1).59: u8)<br/>StorageLive(_820)<br/>_820 = _394<br/>StorageLive(_821)<br/>_821 = _14<br/></td></tr><tr><td align="left">_817 = UserStats::update_maker_volume_30d(move _818, move _819, move _820, move _821)</td></tr></table>>];
    bb366__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">366</td></tr><tr><td align="left" balign="left">StorageDead(_821)<br/>StorageDead(_820)<br/>StorageDead(_819)<br/>StorageDead(_818)<br/></td></tr><tr><td align="left">_816 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _817)</td></tr></table>>];
    bb367__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">367</td></tr><tr><td align="left" balign="left">StorageDead(_817)<br/>_822 = discriminant(_816)<br/></td></tr><tr><td align="left">switchInt(move _822)</td></tr></table>>];
    bb368__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">368</td></tr><tr><td align="left" balign="left">StorageLive(_826)<br/>_826 = ((_816 as Continue).0: ())<br/>_815 = _826<br/>StorageDead(_826)<br/>StorageDead(_816)<br/>StorageDead(_815)<br/>StorageLive(_827)<br/>StorageLive(_828)<br/>StorageLive(_829)<br/>StorageLive(_830)<br/>_1133 = deref_copy (*_814)<br/>_830 = &amp;mut (*_1133)<br/>StorageLive(_831)<br/>_831 = _455<br/></td></tr><tr><td align="left">_829 = UserStats::increment_total_rebate(move _830, move _831)</td></tr></table>>];
    bb369__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">369</td></tr><tr><td align="left" balign="left">StorageLive(_823)<br/>_823 = ((_816 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_825)<br/>_825 = _823<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _825)</td></tr></table>>];
    bb370__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">370</td></tr><tr><td align="left" balign="left">StorageDead(_825)<br/>StorageDead(_823)<br/>StorageDead(_816)<br/>StorageDead(_815)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb371__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">371</td></tr><tr><td align="left" balign="left">StorageDead(_831)<br/>StorageDead(_830)<br/></td></tr><tr><td align="left">_828 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _829)</td></tr></table>>];
    bb372__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">372</td></tr><tr><td align="left" balign="left">StorageDead(_829)<br/>_832 = discriminant(_828)<br/></td></tr><tr><td align="left">switchInt(move _832)</td></tr></table>>];
    bb373__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">373</td></tr><tr><td align="left" balign="left">StorageLive(_836)<br/>_836 = ((_828 as Continue).0: ())<br/>_827 = _836<br/>StorageDead(_836)<br/>StorageDead(_828)<br/>StorageDead(_827)<br/>_812 = const ()<br/>StorageDead(_814)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb374__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">374</td></tr><tr><td align="left" balign="left">StorageLive(_833)<br/>_833 = ((_828 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_835)<br/>_835 = _833<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _835)</td></tr></table>>];
    bb375__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">375</td></tr><tr><td align="left" balign="left">StorageDead(_835)<br/>StorageDead(_833)<br/>StorageDead(_828)<br/>StorageDead(_827)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb376__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">376</td></tr><tr><td align="left" balign="left">StorageDead(_843)<br/>StorageDead(_842)<br/>StorageDead(_841)<br/>StorageDead(_840)<br/></td></tr><tr><td align="left">_838 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _839)</td></tr></table>>];
    bb377__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">377</td></tr><tr><td align="left" balign="left">StorageDead(_839)<br/>_844 = discriminant(_838)<br/></td></tr><tr><td align="left">switchInt(move _844)</td></tr></table>>];
    bb378__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">378</td></tr><tr><td align="left" balign="left">StorageLive(_848)<br/>_848 = ((_838 as Continue).0: ())<br/>_837 = _848<br/>StorageDead(_848)<br/>StorageDead(_838)<br/>StorageDead(_837)<br/>StorageLive(_849)<br/>StorageLive(_850)<br/>StorageLive(_851)<br/>StorageLive(_852)<br/>_852 = &amp;mut (*_4)<br/>StorageLive(_853)<br/>_853 = _455<br/></td></tr><tr><td align="left">_851 = UserStats::increment_total_rebate(move _852, move _853)</td></tr></table>>];
    bb379__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">379</td></tr><tr><td align="left" balign="left">StorageLive(_845)<br/>_845 = ((_838 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_847)<br/>_847 = _845<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _847)</td></tr></table>>];
    bb380__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">380</td></tr><tr><td align="left" balign="left">StorageDead(_847)<br/>StorageDead(_845)<br/>StorageDead(_838)<br/>StorageDead(_837)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb381__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">381</td></tr><tr><td align="left" balign="left">StorageDead(_853)<br/>StorageDead(_852)<br/></td></tr><tr><td align="left">_850 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _851)</td></tr></table>>];
    bb382__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">382</td></tr><tr><td align="left" balign="left">StorageDead(_851)<br/>_854 = discriminant(_850)<br/></td></tr><tr><td align="left">switchInt(move _854)</td></tr></table>>];
    bb383__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">383</td></tr><tr><td align="left" balign="left">StorageLive(_858)<br/>_858 = ((_850 as Continue).0: ())<br/>_849 = _858<br/>StorageDead(_858)<br/>StorageDead(_850)<br/>StorageDead(_849)<br/>_812 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb384__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">384</td></tr><tr><td align="left" balign="left">StorageLive(_855)<br/>_855 = ((_850 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_857)<br/>_857 = _855<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _857)</td></tr></table>>];
    bb385__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">385</td></tr><tr><td align="left" balign="left">StorageDead(_857)<br/>StorageDead(_855)<br/>StorageDead(_850)<br/>StorageDead(_849)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb386__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">386</td></tr><tr><td align="left" balign="left">StorageDead(_812)<br/>StorageLive(_859)<br/>StorageLive(_860)<br/>StorageLive(_861)<br/>_861 = move _11<br/>StorageLive(_862)<br/>_862 = move _12<br/>_860 = (move _861, move _862)<br/>StorageDead(_862)<br/>StorageDead(_861)<br/>_864 = discriminant((_860.0: std::option::Option&lt;&amp;mut state::user::User&gt;))<br/></td></tr><tr><td align="left">switchInt(move _864)</td></tr></table>>];
    bb387__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">387</td></tr><tr><td align="left" balign="left">_863 = discriminant((_860.1: std::option::Option&lt;&amp;mut state::user::UserStats&gt;))<br/></td></tr><tr><td align="left">switchInt(move _863)</td></tr></table>>];
    bb388__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">388</td></tr><tr><td align="left" balign="left">StorageLive(_865)<br/>_865 = move (((_860.0: std::option::Option&lt;&amp;mut state::user::User&gt;) as Some).0: &amp;mut state::user::User)<br/>StorageLive(_866)<br/>_866 = move (((_860.1: std::option::Option&lt;&amp;mut state::user::UserStats&gt;) as Some).0: &amp;mut state::user::UserStats)<br/>StorageLive(_867)<br/>StorageLive(_868)<br/>StorageLive(_869)<br/>_869 = _456<br/>_868 = Gt(move _869, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _868)</td></tr></table>>];
    bb389__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">389</td></tr><tr><td align="left" balign="left">StorageDead(_869)<br/>StorageLive(_870)<br/>StorageLive(_871)<br/>StorageLive(_872)<br/>StorageLive(_873)<br/>StorageLive(_874)<br/>StorageLive(_875)<br/>StorageLive(_876)<br/>_876 = _456<br/></td></tr><tr><td align="left">_875 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _876)</td></tr></table>>];
    bb390__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">390</td></tr><tr><td align="left" balign="left">StorageDead(_876)<br/></td></tr><tr><td align="left">_874 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _875)</td></tr></table>>];
    bb391__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">391</td></tr><tr><td align="left" balign="left">StorageDead(_875)<br/>_877 = discriminant(_874)<br/></td></tr><tr><td align="left">switchInt(move _877)</td></tr></table>>];
    bb392__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">392</td></tr><tr><td align="left" balign="left">StorageLive(_881)<br/>_881 = ((_874 as Continue).0: u128)<br/>_873 = _881<br/>StorageDead(_881)<br/>StorageLive(_882)<br/>StorageLive(_883)<br/>_1128 = const _<br/>_883 = &amp;(*_1128)<br/>_882 = &amp;(*_883)<br/>StorageLive(_885)<br/>_885 = &amp;mut (*_2)<br/>StorageLive(_886)<br/>StorageLive(_887)<br/>StorageLive(_888)<br/>StorageLive(_889)<br/>_889 = &amp;mut (*_865)<br/></td></tr><tr><td align="left">_888 = User::get_quote_spot_position_mut(move _889)</td></tr></table>>];
    bb393__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">393</td></tr><tr><td align="left" balign="left">StorageLive(_878)<br/>_878 = ((_874 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_880)<br/>_880 = _878<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _880)</td></tr></table>>];
    bb394__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">394</td></tr><tr><td align="left" balign="left">StorageDead(_880)<br/>StorageDead(_878)<br/>StorageDead(_873)<br/>StorageDead(_872)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb395__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">395</td></tr><tr><td align="left" balign="left">_887 = &amp;mut (*_888)<br/>_886 = move _887 as &amp;mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize))<br/>StorageDead(_889)<br/>StorageDead(_887)<br/></td></tr><tr><td align="left">_872 = update_spot_balances(move _873, move _882, move _885, move _886, const false)</td></tr></table>>];
    bb396__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">396</td></tr><tr><td align="left" balign="left">StorageDead(_886)<br/>StorageDead(_885)<br/>StorageDead(_882)<br/>StorageDead(_873)<br/></td></tr><tr><td align="left">_871 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _872)</td></tr></table>>];
    bb397__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">397</td></tr><tr><td align="left" balign="left">StorageDead(_872)<br/>_890 = discriminant(_871)<br/></td></tr><tr><td align="left">switchInt(move _890)</td></tr></table>>];
    bb398__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">398</td></tr><tr><td align="left" balign="left">StorageLive(_894)<br/>_894 = ((_871 as Continue).0: ())<br/>_870 = _894<br/>StorageDead(_894)<br/>StorageDead(_888)<br/>StorageDead(_883)<br/>StorageDead(_874)<br/>StorageDead(_871)<br/>StorageDead(_870)<br/>StorageLive(_895)<br/>StorageLive(_896)<br/>StorageLive(_897)<br/>StorageLive(_898)<br/>_898 = &amp;mut (*_865)<br/>StorageLive(_899)<br/>StorageLive(_900)<br/>StorageLive(_901)<br/>StorageLive(_902)<br/>_902 = _456<br/></td></tr><tr><td align="left">_901 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _902)</td></tr></table>>];
    bb399__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">399</td></tr><tr><td align="left" balign="left">StorageLive(_891)<br/>_891 = ((_871 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_893)<br/>_893 = _891<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _893)</td></tr></table>>];
    bb400__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">400</td></tr><tr><td align="left" balign="left">StorageDead(_893)<br/>StorageDead(_891)<br/>StorageDead(_888)<br/>StorageDead(_883)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb401__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">401</td></tr><tr><td align="left" balign="left">StorageDead(_902)<br/></td></tr><tr><td align="left">_900 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _901)</td></tr></table>>];
    bb402__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">402</td></tr><tr><td align="left" balign="left">StorageDead(_901)<br/>_903 = discriminant(_900)<br/></td></tr><tr><td align="left">switchInt(move _903)</td></tr></table>>];
    bb403__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">403</td></tr><tr><td align="left" balign="left">StorageLive(_907)<br/>_907 = ((_900 as Continue).0: i64)<br/>_899 = _907<br/>StorageDead(_907)<br/></td></tr><tr><td align="left">_897 = User::update_cumulative_spot_fees(move _898, move _899)</td></tr></table>>];
    bb404__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">404</td></tr><tr><td align="left" balign="left">StorageLive(_904)<br/>_904 = ((_900 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_906)<br/>_906 = _904<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _906)</td></tr></table>>];
    bb405__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">405</td></tr><tr><td align="left" balign="left">StorageDead(_906)<br/>StorageDead(_904)<br/>StorageDead(_899)<br/>StorageDead(_898)<br/>StorageDead(_897)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb406__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">406</td></tr><tr><td align="left" balign="left">StorageDead(_899)<br/>StorageDead(_898)<br/></td></tr><tr><td align="left">_896 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _897)</td></tr></table>>];
    bb407__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">407</td></tr><tr><td align="left" balign="left">StorageDead(_897)<br/>_908 = discriminant(_896)<br/></td></tr><tr><td align="left">switchInt(move _908)</td></tr></table>>];
    bb408__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">408</td></tr><tr><td align="left" balign="left">StorageLive(_912)<br/>_912 = ((_896 as Continue).0: ())<br/>_895 = _912<br/>StorageDead(_912)<br/>StorageDead(_900)<br/>StorageDead(_896)<br/>StorageDead(_895)<br/>_867 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb409__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">409</td></tr><tr><td align="left" balign="left">StorageLive(_909)<br/>_909 = ((_896 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_911)<br/>_911 = _909<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _911)</td></tr></table>>];
    bb410__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">410</td></tr><tr><td align="left" balign="left">StorageDead(_911)<br/>StorageDead(_909)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb411__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">411</td></tr><tr><td align="left" balign="left">StorageDead(_869)<br/>_867 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb412__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">412</td></tr><tr><td align="left" balign="left">StorageDead(_868)<br/>StorageDead(_867)<br/>StorageLive(_913)<br/>StorageLive(_914)<br/>_914 = &amp;mut (*_865)<br/>StorageLive(_915)<br/>_915 = _15<br/></td></tr><tr><td align="left">_913 = User::update_last_active_slot(move _914, move _915)</td></tr></table>>];
    bb413__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">413</td></tr><tr><td align="left" balign="left">StorageDead(_915)<br/>StorageDead(_914)<br/>StorageDead(_913)<br/>StorageLive(_916)<br/>StorageLive(_917)<br/>StorageLive(_918)<br/>StorageLive(_919)<br/>_919 = &amp;mut (*_866)<br/>StorageLive(_920)<br/>_920 = _394<br/>StorageLive(_921)<br/>_921 = _14<br/></td></tr><tr><td align="left">_918 = UserStats::update_filler_volume(move _919, move _920, move _921)</td></tr></table>>];
    bb414__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">414</td></tr><tr><td align="left" balign="left">StorageDead(_921)<br/>StorageDead(_920)<br/>StorageDead(_919)<br/></td></tr><tr><td align="left">_917 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _918)</td></tr></table>>];
    bb415__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">415</td></tr><tr><td align="left" balign="left">StorageDead(_918)<br/>_922 = discriminant(_917)<br/></td></tr><tr><td align="left">switchInt(move _922)</td></tr></table>>];
    bb416__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">416</td></tr><tr><td align="left" balign="left">StorageLive(_926)<br/>_926 = ((_917 as Continue).0: ())<br/>_916 = _926<br/>StorageDead(_926)<br/>StorageDead(_917)<br/>StorageDead(_916)<br/>_859 = const ()<br/>StorageDead(_866)<br/>StorageDead(_865)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb417__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">417</td></tr><tr><td align="left" balign="left">StorageLive(_923)<br/>_923 = ((_917 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_925)<br/>_925 = _923<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _925)</td></tr></table>>];
    bb418__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">418</td></tr><tr><td align="left" balign="left">StorageDead(_925)<br/>StorageDead(_923)<br/>StorageDead(_917)<br/>StorageDead(_916)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb419__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">419</td></tr><tr><td align="left" balign="left">_859 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb420__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">420</td></tr><tr><td align="left" balign="left">StorageDead(_860)<br/>StorageDead(_859)<br/>StorageLive(_927)<br/>StorageLive(_928)<br/>StorageLive(_929)<br/>StorageLive(_930)<br/>_930 = ((*_1).10: u128)<br/>StorageLive(_931)<br/>StorageLive(_932)<br/>StorageLive(_933)<br/>StorageLive(_934)<br/>_934 = _457<br/></td></tr><tr><td align="left">_933 = &lt;i64 as Cast&gt;::cast::&lt;u128&gt;(move _934)</td></tr></table>>];
    bb421__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">421</td></tr><tr><td align="left" balign="left">StorageDead(_934)<br/></td></tr><tr><td align="left">_932 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _933)</td></tr></table>>];
    bb422__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">422</td></tr><tr><td align="left" balign="left">StorageDead(_933)<br/>_935 = discriminant(_932)<br/></td></tr><tr><td align="left">switchInt(move _935)</td></tr></table>>];
    bb423__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">423</td></tr><tr><td align="left" balign="left">StorageLive(_939)<br/>_939 = ((_932 as Continue).0: u128)<br/>_931 = _939<br/>StorageDead(_939)<br/></td></tr><tr><td align="left">_929 = &lt;u128 as SafeMath&gt;::safe_add(move _930, move _931)</td></tr></table>>];
    bb424__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">424</td></tr><tr><td align="left" balign="left">StorageLive(_936)<br/>_936 = ((_932 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_938)<br/>_938 = _936<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _938)</td></tr></table>>];
    bb425__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">425</td></tr><tr><td align="left" balign="left">StorageDead(_938)<br/>StorageDead(_936)<br/>StorageDead(_931)<br/>StorageDead(_930)<br/>StorageDead(_929)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb426__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">426</td></tr><tr><td align="left" balign="left">StorageDead(_931)<br/>StorageDead(_930)<br/></td></tr><tr><td align="left">_928 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _929)</td></tr></table>>];
    bb427__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">427</td></tr><tr><td align="left" balign="left">StorageDead(_929)<br/>_940 = discriminant(_928)<br/></td></tr><tr><td align="left">switchInt(move _940)</td></tr></table>>];
    bb428__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">428</td></tr><tr><td align="left" balign="left">StorageLive(_944)<br/>_944 = ((_928 as Continue).0: u128)<br/>_927 = _944<br/>StorageDead(_944)<br/>((*_1).10: u128) = move _927<br/>StorageDead(_927)<br/>StorageDead(_932)<br/>StorageDead(_928)<br/>StorageLive(_945)<br/>StorageLive(_946)<br/>StorageLive(_947)<br/>StorageLive(_948)<br/>StorageLive(_949)<br/>StorageLive(_950)<br/>StorageLive(_951)<br/>_951 = _457<br/></td></tr><tr><td align="left">_950 = &lt;i64 as Cast&gt;::cast::&lt;u128&gt;(move _951)</td></tr></table>>];
    bb429__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">429</td></tr><tr><td align="left" balign="left">StorageLive(_941)<br/>_941 = ((_928 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_943)<br/>_943 = _941<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _943)</td></tr></table>>];
    bb430__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">430</td></tr><tr><td align="left" balign="left">StorageDead(_943)<br/>StorageDead(_941)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb431__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">431</td></tr><tr><td align="left" balign="left">StorageDead(_951)<br/></td></tr><tr><td align="left">_949 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _950)</td></tr></table>>];
    bb432__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">432</td></tr><tr><td align="left" balign="left">StorageDead(_950)<br/>_952 = discriminant(_949)<br/></td></tr><tr><td align="left">switchInt(move _952)</td></tr></table>>];
    bb433__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">433</td></tr><tr><td align="left" balign="left">StorageLive(_956)<br/>_956 = ((_949 as Continue).0: u128)<br/>_948 = _956<br/>StorageDead(_956)<br/>StorageLive(_957)<br/>StorageLive(_958)<br/>_1127 = const _<br/>_958 = &amp;(*_1127)<br/>_957 = &amp;(*_958)<br/>StorageLive(_960)<br/>_960 = &amp;mut (*_2)<br/>StorageLive(_961)<br/>StorageLive(_962)<br/>StorageLive(_963)<br/>_963 = &amp;mut ((*_1).8: state::perp_market::PoolBalance)<br/>_962 = &amp;mut (*_963)<br/>_961 = move _962 as &amp;mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize))<br/>StorageDead(_962)<br/></td></tr><tr><td align="left">_947 = update_spot_balances(move _948, move _957, move _960, move _961, const false)</td></tr></table>>];
    bb434__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">434</td></tr><tr><td align="left" balign="left">StorageLive(_953)<br/>_953 = ((_949 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_955)<br/>_955 = _953<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _955)</td></tr></table>>];
    bb435__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">435</td></tr><tr><td align="left" balign="left">StorageDead(_955)<br/>StorageDead(_953)<br/>StorageDead(_948)<br/>StorageDead(_947)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb436__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">436</td></tr><tr><td align="left" balign="left">StorageDead(_961)<br/>StorageDead(_960)<br/>StorageDead(_957)<br/>StorageDead(_948)<br/></td></tr><tr><td align="left">_946 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _947)</td></tr></table>>];
    bb437__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">437</td></tr><tr><td align="left" balign="left">StorageDead(_947)<br/>_964 = discriminant(_946)<br/></td></tr><tr><td align="left">switchInt(move _964)</td></tr></table>>];
    bb438__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">438</td></tr><tr><td align="left" balign="left">StorageLive(_968)<br/>_968 = ((_946 as Continue).0: ())<br/>_945 = _968<br/>StorageDead(_968)<br/>StorageDead(_963)<br/>StorageDead(_958)<br/>StorageDead(_949)<br/>StorageDead(_946)<br/>StorageDead(_945)<br/>StorageLive(_969)<br/>StorageLive(_970)<br/>_970 = ((*_1).29: u64)<br/>StorageLive(_971)<br/>StorageLive(_972)<br/>StorageLive(_973)<br/>StorageLive(_974)<br/>_974 = _970<br/></td></tr><tr><td align="left">_973 = core::num::&lt;impl u64&gt;::checked_add(move _974, const 1_u64)</td></tr></table>>];
    bb439__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">439</td></tr><tr><td align="left" balign="left">StorageLive(_965)<br/>_965 = ((_946 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_967)<br/>_967 = _965<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _967)</td></tr></table>>];
    bb440__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">440</td></tr><tr><td align="left" balign="left">StorageDead(_967)<br/>StorageDead(_965)<br/>StorageDead(_963)<br/>StorageDead(_958)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb441__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">441</td></tr><tr><td align="left" balign="left">StorageDead(_974)<br/>StorageLive(_975)<br/>_975 = Option::&lt;u64&gt;::Some(const 1_u64)<br/></td></tr><tr><td align="left">_972 = Option::&lt;u64&gt;::or(move _973, move _975)</td></tr></table>>];
    bb442__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">442</td></tr><tr><td align="left" balign="left">StorageDead(_975)<br/>StorageDead(_973)<br/></td></tr><tr><td align="left">_971 = Option::&lt;u64&gt;::unwrap(move _972)</td></tr></table>>];
    bb443__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">443</td></tr><tr><td align="left" balign="left">StorageDead(_972)<br/>((*_1).29: u64) = move _971<br/>StorageDead(_971)<br/>_969 = _970<br/>StorageDead(_970)<br/>StorageLive(_976)<br/>StorageLive(_977)<br/>StorageLive(_978)<br/>StorageLive(_979)<br/>_979 = _9<br/>_980 = Len(((*_7).5: [state::user::Order; 32]))<br/>_981 = Lt(_979, _980)<br/></td></tr><tr><td align="left">assert(move _981, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _980, _979)</td></tr></table>>];
    bb444__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">444</td></tr><tr><td align="left" balign="left">_978 = &amp;((*_7).5: [state::user::Order; 32])[_979]<br/></td></tr><tr><td align="left">_977 = Order::is_jit_maker(move _978)</td></tr></table>>];
    bb445__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">445</td></tr><tr><td align="left">switchInt(move _977)</td></tr></table>>];
    bb446__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">446</td></tr><tr><td align="left" balign="left">StorageDead(_979)<br/>StorageDead(_978)<br/>_976 = OrderActionExplanation::OrderFilledWithMatchJit<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb447__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">447</td></tr><tr><td align="left" balign="left">StorageDead(_979)<br/>StorageDead(_978)<br/>_976 = OrderActionExplanation::OrderFilledWithMatch<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb448__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">448</td></tr><tr><td align="left" balign="left">StorageDead(_977)<br/>StorageLive(_982)<br/>StorageLive(_983)<br/>StorageLive(_984)<br/>StorageLive(_985)<br/>_985 = _14<br/>StorageLive(_986)<br/>_986 = OrderAction::Fill<br/>StorageLive(_987)<br/>_987 = _976<br/>StorageLive(_988)<br/>StorageLive(_989)<br/>_989 = _9<br/>_990 = Len(((*_7).5: [state::user::Order; 32]))<br/>_991 = Lt(_989, _990)<br/></td></tr><tr><td align="left">assert(move _991, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _990, _989)</td></tr></table>>];
    bb449__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">449</td></tr><tr><td align="left" balign="left">_988 = (((*_7).5: [state::user::Order; 32])[_989].11: u16)<br/>StorageLive(_992)<br/>StorageLive(_993)<br/>_993 = (*_13)<br/>_992 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _993)<br/>StorageDead(_993)<br/>StorageLive(_994)<br/>StorageLive(_995)<br/>_995 = _969<br/>_994 = Option::&lt;u64&gt;::Some(move _995)<br/>StorageDead(_995)<br/>StorageLive(_996)<br/>StorageLive(_997)<br/>_997 = _456<br/>_996 = Option::&lt;u64&gt;::Some(move _997)<br/>StorageDead(_997)<br/>StorageLive(_998)<br/>StorageLive(_999)<br/>_999 = _393<br/>_998 = Option::&lt;u64&gt;::Some(move _999)<br/>StorageDead(_999)<br/>StorageLive(_1000)<br/>StorageLive(_1001)<br/>StorageLive(_1002)<br/>StorageLive(_1003)<br/>StorageLive(_1004)<br/>_1004 = _394<br/></td></tr><tr><td align="left">_1003 = &lt;u64 as Cast&gt;::cast::&lt;u64&gt;(move _1004)</td></tr></table>>];
    bb450__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">450</td></tr><tr><td align="left" balign="left">StorageDead(_1004)<br/></td></tr><tr><td align="left">_1002 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1003)</td></tr></table>>];
    bb451__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">451</td></tr><tr><td align="left" balign="left">StorageDead(_1003)<br/>_1005 = discriminant(_1002)<br/></td></tr><tr><td align="left">switchInt(move _1005)</td></tr></table>>];
    bb452__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">452</td></tr><tr><td align="left" balign="left">StorageLive(_1009)<br/>_1009 = ((_1002 as Continue).0: u64)<br/>_1001 = _1009<br/>StorageDead(_1009)<br/>_1000 = Option::&lt;u64&gt;::Some(move _1001)<br/>StorageDead(_1001)<br/>StorageLive(_1010)<br/>StorageLive(_1011)<br/>_1011 = _454<br/>_1010 = Option::&lt;u64&gt;::Some(move _1011)<br/>StorageDead(_1011)<br/>StorageLive(_1012)<br/>StorageLive(_1013)<br/>_1013 = _455<br/>_1012 = Option::&lt;u64&gt;::Some(move _1013)<br/>StorageDead(_1013)<br/>StorageLive(_1014)<br/>_1014 = Option::&lt;u64&gt;::None<br/>StorageLive(_1015)<br/>_1015 = Option::&lt;i64&gt;::Some(const 0_i64)<br/>StorageLive(_1016)<br/>_1016 = Option::&lt;u64&gt;::Some(const 0_u64)<br/>StorageLive(_1017)<br/>StorageLive(_1018)<br/>_1018 = (*_6)<br/>_1017 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _1018)<br/>StorageDead(_1018)<br/>StorageLive(_1019)<br/>StorageLive(_1020)<br/>StorageLive(_1021)<br/>_1021 = _5<br/>_1022 = Len(((*_3).5: [state::user::Order; 32]))<br/>_1023 = Lt(_1021, _1022)<br/></td></tr><tr><td align="left">assert(move _1023, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1022, _1021)</td></tr></table>>];
    bb453__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">453</td></tr><tr><td align="left" balign="left">StorageLive(_1006)<br/>_1006 = ((_1002 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1008)<br/>_1008 = _1006<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1008)</td></tr></table>>];
    bb454__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">454</td></tr><tr><td align="left" balign="left">StorageDead(_1008)<br/>StorageDead(_1006)<br/>StorageDead(_1001)<br/>StorageDead(_1000)<br/>StorageDead(_998)<br/>StorageDead(_996)<br/>StorageDead(_994)<br/>StorageDead(_992)<br/>StorageDead(_988)<br/>StorageDead(_987)<br/>StorageDead(_986)<br/>StorageDead(_985)<br/>StorageDead(_984)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb455__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">455</td></tr><tr><td align="left" balign="left">_1020 = ((*_3).5: [state::user::Order; 32])[_1021]<br/>_1019 = Option::&lt;Order&gt;::Some(move _1020)<br/>StorageDead(_1020)<br/>StorageLive(_1024)<br/>StorageLive(_1025)<br/>_1025 = (*_10)<br/>_1024 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _1025)<br/>StorageDead(_1025)<br/>StorageLive(_1026)<br/>StorageLive(_1027)<br/>StorageLive(_1028)<br/>_1028 = _9<br/>_1029 = Len(((*_7).5: [state::user::Order; 32]))<br/>_1030 = Lt(_1028, _1029)<br/></td></tr><tr><td align="left">assert(move _1030, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1029, _1028)</td></tr></table>>];
    bb456__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">456</td></tr><tr><td align="left" balign="left">_1027 = ((*_7).5: [state::user::Order; 32])[_1028]<br/>_1026 = Option::&lt;Order&gt;::Some(move _1027)<br/>StorageDead(_1027)<br/>StorageLive(_1031)<br/>StorageLive(_1032)<br/>StorageLive(_1033)<br/>StorageLive(_1034)<br/>StorageLive(_1035)<br/>_1035 = &amp;mut (*_16)<br/>StorageLive(_1036)<br/>StorageLive(_1037)<br/>StorageLive(_1038)<br/>StorageLive(_1039)<br/>_1039 = &amp;(*_1)<br/></td></tr><tr><td align="left">_1038 = SpotMarket::oracle_id(move _1039)</td></tr></table>>];
    bb457__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">457</td></tr><tr><td align="left" balign="left">StorageDead(_1039)<br/>_1037 = &amp;_1038<br/>_1036 = &amp;(*_1037)<br/></td></tr><tr><td align="left">_1034 = OracleMap::&lt;'_&gt;::get_price_data(move _1035, move _1036)</td></tr></table>>];
    bb458__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">458</td></tr><tr><td align="left" balign="left">StorageDead(_1036)<br/>StorageDead(_1035)<br/></td></tr><tr><td align="left">_1033 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _1034)</td></tr></table>>];
    bb459__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">459</td></tr><tr><td align="left" balign="left">StorageDead(_1034)<br/>_1040 = discriminant(_1033)<br/></td></tr><tr><td align="left">switchInt(move _1040)</td></tr></table>>];
    bb460__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">460</td></tr><tr><td align="left" balign="left">StorageLive(_1044)<br/>_1044 = ((_1033 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_1032 = _1044<br/>StorageDead(_1044)<br/>_1031 = ((*_1032).0: i64)<br/>StorageLive(_1045)<br/>_1045 = Option::&lt;u64&gt;::None<br/>StorageLive(_1046)<br/>_1046 = Option::&lt;u64&gt;::None<br/>StorageLive(_1047)<br/>_1047 = Option::&lt;u64&gt;::None<br/>StorageLive(_1048)<br/>_1048 = Option::&lt;u64&gt;::None<br/>StorageLive(_1049)<br/>_1049 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">_984 = get_order_action_record(move _985, move _986, move _987, move _988, move _992, move _994, move _996, move _998, move _1000, move _1010, move _1012, move _1014, move _1015, move _1016, move _1017, move _1019, move _1024, move _1026, move _1031, const 0_u8, move _1045, move _1046, move _1047, move _1048, move _1049)</td></tr></table>>];
    bb461__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">461</td></tr><tr><td align="left" balign="left">StorageLive(_1041)<br/>_1041 = ((_1033 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1043)<br/>_1043 = _1041<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1043)</td></tr></table>>];
    bb462__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">462</td></tr><tr><td align="left" balign="left">StorageDead(_1043)<br/>StorageDead(_1041)<br/>StorageDead(_1031)<br/>StorageDead(_1026)<br/>StorageDead(_1024)<br/>StorageDead(_1019)<br/>StorageDead(_1017)<br/>StorageDead(_1016)<br/>StorageDead(_1015)<br/>StorageDead(_1014)<br/>StorageDead(_1012)<br/>StorageDead(_1010)<br/>StorageDead(_1000)<br/>StorageDead(_998)<br/>StorageDead(_996)<br/>StorageDead(_994)<br/>StorageDead(_992)<br/>StorageDead(_988)<br/>StorageDead(_987)<br/>StorageDead(_986)<br/>StorageDead(_985)<br/>StorageDead(_984)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb463__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">463</td></tr><tr><td align="left" balign="left">StorageDead(_1049)<br/>StorageDead(_1048)<br/>StorageDead(_1047)<br/>StorageDead(_1046)<br/>StorageDead(_1045)<br/>StorageDead(_1031)<br/>StorageDead(_1026)<br/>StorageDead(_1024)<br/>StorageDead(_1019)<br/>StorageDead(_1017)<br/>StorageDead(_1016)<br/>StorageDead(_1015)<br/>StorageDead(_1014)<br/>StorageDead(_1012)<br/>StorageDead(_1010)<br/>StorageDead(_1000)<br/>StorageDead(_998)<br/>StorageDead(_996)<br/>StorageDead(_994)<br/>StorageDead(_992)<br/>StorageDead(_988)<br/>StorageDead(_987)<br/>StorageDead(_986)<br/>StorageDead(_985)<br/></td></tr><tr><td align="left">_983 = &lt;std::result::Result&lt;OrderActionRecord, error::ErrorCode&gt; as Try&gt;::branch(move _984)</td></tr></table>>];
    bb464__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">464</td></tr><tr><td align="left" balign="left">StorageDead(_984)<br/>_1050 = discriminant(_983)<br/></td></tr><tr><td align="left">switchInt(move _1050)</td></tr></table>>];
    bb465__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">465</td></tr><tr><td align="left" balign="left">StorageLive(_1054)<br/>_1054 = move ((_983 as Continue).0: state::events::OrderActionRecord)<br/>_982 = move _1054<br/>StorageDead(_1054)<br/>StorageDead(_1038)<br/>StorageDead(_1037)<br/>StorageDead(_1033)<br/>StorageDead(_1032)<br/>StorageDead(_1028)<br/>StorageDead(_1021)<br/>StorageDead(_1002)<br/>StorageDead(_989)<br/>StorageDead(_983)<br/>StorageLive(_1055)<br/>StorageLive(_1056)<br/>StorageLive(_1057)<br/>StorageLive(_1058)<br/>_1058 = move _982<br/></td></tr><tr><td align="left">_1057 = emit_stack::&lt;OrderActionRecord, 464&gt;(move _1058)</td></tr></table>>];
    bb466__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">466</td></tr><tr><td align="left" balign="left">StorageLive(_1051)<br/>_1051 = ((_983 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1053)<br/>_1053 = _1051<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1053)</td></tr></table>>];
    bb467__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">467</td></tr><tr><td align="left" balign="left">StorageDead(_1053)<br/>StorageDead(_1051)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb468__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">468</td></tr><tr><td align="left" balign="left">StorageDead(_1058)<br/></td></tr><tr><td align="left">_1056 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _1057)</td></tr></table>>];
    bb469__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">469</td></tr><tr><td align="left" balign="left">StorageDead(_1057)<br/>_1059 = discriminant(_1056)<br/></td></tr><tr><td align="left">switchInt(move _1059)</td></tr></table>>];
    bb470__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">470</td></tr><tr><td align="left" balign="left">StorageLive(_1063)<br/>_1063 = ((_1056 as Continue).0: ())<br/>_1055 = _1063<br/>StorageDead(_1063)<br/>StorageDead(_1056)<br/>StorageDead(_1055)<br/>StorageLive(_1064)<br/>StorageLive(_1065)<br/>StorageLive(_1066)<br/>StorageLive(_1067)<br/>StorageLive(_1068)<br/>StorageLive(_1069)<br/>StorageLive(_1070)<br/>_1070 = _5<br/>_1071 = Len(((*_3).5: [state::user::Order; 32]))<br/>_1072 = Lt(_1070, _1071)<br/></td></tr><tr><td align="left">assert(move _1072, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1071, _1070)</td></tr></table>>];
    bb471__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">471</td></tr><tr><td align="left" balign="left">StorageLive(_1060)<br/>_1060 = ((_1056 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1062)<br/>_1062 = _1060<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1062)</td></tr></table>>];
    bb472__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">472</td></tr><tr><td align="left" balign="left">StorageDead(_1062)<br/>StorageDead(_1060)<br/>StorageDead(_1056)<br/>StorageDead(_1055)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb473__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">473</td></tr><tr><td align="left" balign="left">_1069 = &amp;((*_3).5: [state::user::Order; 32])[_1070]<br/>StorageLive(_1073)<br/>_1073 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">_1068 = Order::get_base_asset_amount_unfilled(move _1069, move _1073)</td></tr></table>>];
    bb474__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">474</td></tr><tr><td align="left" balign="left">StorageDead(_1073)<br/>StorageDead(_1069)<br/></td></tr><tr><td align="left">_1067 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1068)</td></tr></table>>];
    bb475__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">475</td></tr><tr><td align="left" balign="left">StorageDead(_1068)<br/>_1074 = discriminant(_1067)<br/></td></tr><tr><td align="left">switchInt(move _1074)</td></tr></table>>];
    bb476__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">476</td></tr><tr><td align="left" balign="left">StorageLive(_1078)<br/>_1078 = ((_1067 as Continue).0: u64)<br/>_1066 = _1078<br/>StorageDead(_1078)<br/>_1065 = Eq(move _1066, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _1065)</td></tr></table>>];
    bb477__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">477</td></tr><tr><td align="left" balign="left">StorageLive(_1075)<br/>_1075 = ((_1067 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1077)<br/>_1077 = _1075<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1077)</td></tr></table>>];
    bb478__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">478</td></tr><tr><td align="left" balign="left">StorageDead(_1077)<br/>StorageDead(_1075)<br/>StorageDead(_1070)<br/>StorageDead(_1067)<br/>StorageDead(_1066)<br/>StorageDead(_1065)<br/>StorageDead(_1064)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb479__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">479</td></tr><tr><td align="left" balign="left">StorageDead(_1070)<br/>StorageDead(_1067)<br/>StorageDead(_1066)<br/>StorageLive(_1079)<br/>StorageLive(_1080)<br/>_1080 = &amp;mut (*_3)<br/>StorageLive(_1081)<br/>StorageLive(_1082)<br/>StorageLive(_1083)<br/>_1083 = _5<br/>_1084 = Len(((*_3).5: [state::user::Order; 32]))<br/>_1085 = Lt(_1083, _1084)<br/></td></tr><tr><td align="left">assert(move _1085, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1084, _1083)</td></tr></table>>];
    bb480__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">480</td></tr><tr><td align="left" balign="left">StorageDead(_1070)<br/>StorageDead(_1067)<br/>StorageDead(_1066)<br/>_1064 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb481__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">481</td></tr><tr><td align="left" balign="left">_1082 = &amp;((*_3).5: [state::user::Order; 32])[_1083]<br/></td></tr><tr><td align="left">_1081 = Order::has_auction(move _1082)</td></tr></table>>];
    bb482__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">482</td></tr><tr><td align="left" balign="left">StorageDead(_1082)<br/></td></tr><tr><td align="left">_1079 = User::decrement_open_orders(move _1080, move _1081)</td></tr></table>>];
    bb483__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">483</td></tr><tr><td align="left" balign="left">StorageDead(_1081)<br/>StorageDead(_1080)<br/>StorageDead(_1083)<br/>StorageDead(_1079)<br/>StorageLive(_1086)<br/>_1086 = OrderStatus::Filled<br/>StorageLive(_1087)<br/>_1087 = _5<br/>_1088 = Len(((*_3).5: [state::user::Order; 32]))<br/>_1089 = Lt(_1087, _1088)<br/></td></tr><tr><td align="left">assert(move _1089, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1088, _1087)</td></tr></table>>];
    bb484__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">484</td></tr><tr><td align="left" balign="left">(((*_3).5: [state::user::Order; 32])[_1087].12: state::user::OrderStatus) = move _1086<br/>StorageDead(_1086)<br/>StorageDead(_1087)<br/>StorageLive(_1090)<br/>_1090 = _73<br/>_1091 = Len(((*_3).3: [state::user::SpotPosition; 8]))<br/>_1092 = Lt(_1090, _1091)<br/></td></tr><tr><td align="left">assert(move _1092, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1091, _1090)</td></tr></table>>];
    bb485__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">485</td></tr><tr><td align="left" balign="left">_1093 = CheckedSub((((*_3).3: [state::user::SpotPosition; 8])[_1090].6: u8), const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_1093.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, (((*_3).3: [state::user::SpotPosition; 8])[_1090].6: u8), const 1_u8)</td></tr></table>>];
    bb486__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">486</td></tr><tr><td align="left" balign="left">(((*_3).3: [state::user::SpotPosition; 8])[_1090].6: u8) = move (_1093.0: u8)<br/>StorageDead(_1090)<br/>_1064 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb487__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">487</td></tr><tr><td align="left" balign="left">StorageDead(_1065)<br/>StorageDead(_1064)<br/>StorageLive(_1094)<br/>StorageLive(_1095)<br/>StorageLive(_1096)<br/>StorageLive(_1097)<br/>StorageLive(_1098)<br/>StorageLive(_1099)<br/>StorageLive(_1100)<br/>_1100 = _9<br/>_1101 = Len(((*_7).5: [state::user::Order; 32]))<br/>_1102 = Lt(_1100, _1101)<br/></td></tr><tr><td align="left">assert(move _1102, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1101, _1100)</td></tr></table>>];
    bb488__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">488</td></tr><tr><td align="left" balign="left">_1099 = &amp;((*_7).5: [state::user::Order; 32])[_1100]<br/>StorageLive(_1103)<br/>_1103 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">_1098 = Order::get_base_asset_amount_unfilled(move _1099, move _1103)</td></tr></table>>];
    bb489__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">489</td></tr><tr><td align="left" balign="left">StorageDead(_1103)<br/>StorageDead(_1099)<br/></td></tr><tr><td align="left">_1097 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _1098)</td></tr></table>>];
    bb490__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">490</td></tr><tr><td align="left" balign="left">StorageDead(_1098)<br/>_1104 = discriminant(_1097)<br/></td></tr><tr><td align="left">switchInt(move _1104)</td></tr></table>>];
    bb491__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">491</td></tr><tr><td align="left" balign="left">StorageLive(_1108)<br/>_1108 = ((_1097 as Continue).0: u64)<br/>_1096 = _1108<br/>StorageDead(_1108)<br/>_1095 = Eq(move _1096, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _1095)</td></tr></table>>];
    bb492__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">492</td></tr><tr><td align="left" balign="left">StorageLive(_1105)<br/>_1105 = ((_1097 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_1107)<br/>_1107 = _1105<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _1107)</td></tr></table>>];
    bb493__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">493</td></tr><tr><td align="left" balign="left">StorageDead(_1107)<br/>StorageDead(_1105)<br/>StorageDead(_1100)<br/>StorageDead(_1097)<br/>StorageDead(_1096)<br/>StorageDead(_1095)<br/>StorageDead(_1094)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb494__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">494</td></tr><tr><td align="left" balign="left">StorageDead(_1100)<br/>StorageDead(_1097)<br/>StorageDead(_1096)<br/>StorageLive(_1109)<br/>StorageLive(_1110)<br/>_1110 = &amp;mut (*_7)<br/>StorageLive(_1111)<br/>StorageLive(_1112)<br/>StorageLive(_1113)<br/>_1113 = _9<br/>_1114 = Len(((*_7).5: [state::user::Order; 32]))<br/>_1115 = Lt(_1113, _1114)<br/></td></tr><tr><td align="left">assert(move _1115, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1114, _1113)</td></tr></table>>];
    bb495__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">495</td></tr><tr><td align="left" balign="left">StorageDead(_1100)<br/>StorageDead(_1097)<br/>StorageDead(_1096)<br/>_1094 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb496__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">496</td></tr><tr><td align="left" balign="left">_1112 = &amp;((*_7).5: [state::user::Order; 32])[_1113]<br/></td></tr><tr><td align="left">_1111 = Order::has_auction(move _1112)</td></tr></table>>];
    bb497__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">497</td></tr><tr><td align="left" balign="left">StorageDead(_1112)<br/></td></tr><tr><td align="left">_1109 = User::decrement_open_orders(move _1110, move _1111)</td></tr></table>>];
    bb498__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">498</td></tr><tr><td align="left" balign="left">StorageDead(_1111)<br/>StorageDead(_1110)<br/>StorageDead(_1113)<br/>StorageDead(_1109)<br/>StorageLive(_1116)<br/>_1116 = OrderStatus::Filled<br/>StorageLive(_1117)<br/>_1117 = _9<br/>_1118 = Len(((*_7).5: [state::user::Order; 32]))<br/>_1119 = Lt(_1117, _1118)<br/></td></tr><tr><td align="left">assert(move _1119, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1118, _1117)</td></tr></table>>];
    bb499__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">499</td></tr><tr><td align="left" balign="left">(((*_7).5: [state::user::Order; 32])[_1117].12: state::user::OrderStatus) = move _1116<br/>StorageDead(_1116)<br/>StorageDead(_1117)<br/>StorageLive(_1120)<br/>_1120 = _149<br/>_1121 = Len(((*_7).3: [state::user::SpotPosition; 8]))<br/>_1122 = Lt(_1120, _1121)<br/></td></tr><tr><td align="left">assert(move _1122, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _1121, _1120)</td></tr></table>>];
    bb500__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">500</td></tr><tr><td align="left" balign="left">_1123 = CheckedSub((((*_7).3: [state::user::SpotPosition; 8])[_1120].6: u8), const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_1123.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, (((*_7).3: [state::user::SpotPosition; 8])[_1120].6: u8), const 1_u8)</td></tr></table>>];
    bb501__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">501</td></tr><tr><td align="left" balign="left">(((*_7).3: [state::user::SpotPosition; 8])[_1120].6: u8) = move (_1123.0: u8)<br/>StorageDead(_1120)<br/>_1094 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb502__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">502</td></tr><tr><td align="left" balign="left">StorageDead(_1095)<br/>StorageDead(_1094)<br/>StorageLive(_1124)<br/>StorageLive(_1125)<br/>_1125 = _393<br/>StorageLive(_1126)<br/>_1126 = _394<br/>_1124 = (move _1125, move _1126)<br/>StorageDead(_1126)<br/>StorageDead(_1125)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _1124)<br/>StorageDead(_1124)<br/>StorageDead(_982)<br/>StorageDead(_976)<br/>StorageDead(_969)<br/>StorageDead(_790)<br/>StorageDead(_786)<br/>StorageDead(_690)<br/>StorageDead(_614)<br/>StorageDead(_610)<br/>StorageDead(_512)<br/>StorageDead(_457)<br/>StorageDead(_456)<br/>StorageDead(_455)<br/>StorageDead(_454)<br/>StorageDead(_441)<br/>StorageDead(_413)<br/>StorageDead(_394)<br/>StorageDead(_393)<br/>StorageDead(_323)<br/>StorageDead(_310)<br/>StorageDead(_309)<br/>StorageDead(_239)<br/>StorageDead(_226)<br/>StorageDead(_225)<br/>StorageDead(_195)<br/>StorageDead(_172)<br/>StorageDead(_159)<br/>StorageDead(_149)<br/>StorageDead(_145)<br/>StorageDead(_127)<br/>StorageDead(_123)<br/>StorageDead(_119)<br/>StorageDead(_96)<br/>StorageDead(_83)<br/>StorageDead(_73)<br/>StorageDead(_50)<br/>StorageDead(_36)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb503__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">503</td></tr><tr><td align="left" balign="left">StorageDead(_1038)<br/>StorageDead(_1037)<br/>StorageDead(_1033)<br/>StorageDead(_1032)<br/>StorageDead(_1028)<br/>StorageDead(_1021)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb504__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">504</td></tr><tr><td align="left" balign="left">StorageDead(_1002)<br/>StorageDead(_989)<br/>StorageDead(_983)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb505__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">505</td></tr><tr><td align="left" balign="left">StorageDead(_982)<br/>StorageDead(_976)<br/>StorageDead(_969)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb506__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">506</td></tr><tr><td align="left" balign="left">StorageDead(_949)<br/>StorageDead(_946)<br/>StorageDead(_945)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb507__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">507</td></tr><tr><td align="left" balign="left">StorageDead(_927)<br/>StorageDead(_932)<br/>StorageDead(_928)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb508__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">508</td></tr><tr><td align="left" balign="left">StorageDead(_900)<br/>StorageDead(_896)<br/>StorageDead(_895)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb509__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">509</td></tr><tr><td align="left" balign="left">StorageDead(_874)<br/>StorageDead(_871)<br/>StorageDead(_870)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb510__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">510</td></tr><tr><td align="left" balign="left">StorageDead(_868)<br/>StorageDead(_867)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb511__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">511</td></tr><tr><td align="left" balign="left">StorageDead(_866)<br/>StorageDead(_865)<br/>StorageDead(_860)<br/>StorageDead(_859)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb512__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">512</td></tr><tr><td align="left" balign="left">StorageDead(_814)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb513__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">513</td></tr><tr><td align="left" balign="left">StorageDead(_812)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb514__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">514</td></tr><tr><td align="left" balign="left">StorageDead(_790)<br/>StorageDead(_786)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb515__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">515</td></tr><tr><td align="left" balign="left">StorageDead(_758)<br/>StorageDead(_754)<br/>StorageDead(_753)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb516__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">516</td></tr><tr><td align="left" balign="left">StorageDead(_740)<br/>StorageDead(_736)<br/>StorageDead(_730)<br/>StorageDead(_728)<br/>StorageDead(_727)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb517__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">517</td></tr><tr><td align="left" balign="left">StorageDead(_718)<br/>StorageDead(_715)<br/>StorageDead(_714)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb518__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">518</td></tr><tr><td align="left" balign="left">StorageDead(_692)<br/>StorageDead(_691)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb519__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">519</td></tr><tr><td align="left" balign="left">StorageDead(_690)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb520__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">520</td></tr><tr><td align="left" balign="left">StorageDead(_662)<br/>StorageDead(_659)<br/>StorageDead(_658)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb521__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">521</td></tr><tr><td align="left" balign="left">StorageDead(_614)<br/>StorageDead(_610)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb522__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">522</td></tr><tr><td align="left" balign="left">StorageDead(_581)<br/>StorageDead(_576)<br/>StorageDead(_575)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb523__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">523</td></tr><tr><td align="left" balign="left">StorageDead(_562)<br/>StorageDead(_558)<br/>StorageDead(_552)<br/>StorageDead(_550)<br/>StorageDead(_549)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb524__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">524</td></tr><tr><td align="left" balign="left">StorageDead(_540)<br/>StorageDead(_537)<br/>StorageDead(_536)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb525__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">525</td></tr><tr><td align="left" balign="left">StorageDead(_514)<br/>StorageDead(_513)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb526__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">526</td></tr><tr><td align="left" balign="left">StorageDead(_512)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb527__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">527</td></tr><tr><td align="left" balign="left">StorageDead(_484)<br/>StorageDead(_481)<br/>StorageDead(_480)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb528__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">528</td></tr><tr><td align="left" balign="left">StorageDead(_457)<br/>StorageDead(_456)<br/>StorageDead(_455)<br/>StorageDead(_454)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb529__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">529</td></tr><tr><td align="left" balign="left">StorageDead(_441)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb530__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">530</td></tr><tr><td align="left" balign="left">StorageDead(_413)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb531__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">531</td></tr><tr><td align="left" balign="left">StorageDead(_394)<br/>StorageDead(_393)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb532__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">532</td></tr><tr><td align="left" balign="left">StorageDead(_332)<br/>StorageDead(_331)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb533__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">533</td></tr><tr><td align="left" balign="left">StorageDead(_329)<br/>StorageDead(_328)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb534__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">534</td></tr><tr><td align="left" balign="left">StorageDead(_363)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb535__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">535</td></tr><tr><td align="left" balign="left">StorageDead(_335)<br/>StorageDead(_334)<br/>StorageDead(_332)<br/>StorageDead(_331)<br/>StorageDead(_329)<br/>StorageDead(_328)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb536__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">536</td></tr><tr><td align="left" balign="left">StorageDead(_348)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb537__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">537</td></tr><tr><td align="left" balign="left">StorageDead(_339)<br/>StorageDead(_336)<br/>StorageDead(_333)<br/>StorageDead(_330)<br/>StorageDead(_327)<br/>StorageDead(_326)<br/>StorageDead(_325)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb538__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">538</td></tr><tr><td align="left" balign="left">StorageDead(_323)<br/>StorageDead(_310)<br/>StorageDead(_309)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb539__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">539</td></tr><tr><td align="left" balign="left">StorageDead(_248)<br/>StorageDead(_247)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb540__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">540</td></tr><tr><td align="left" balign="left">StorageDead(_245)<br/>StorageDead(_244)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb541__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">541</td></tr><tr><td align="left" balign="left">StorageDead(_279)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb542__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">542</td></tr><tr><td align="left" balign="left">StorageDead(_251)<br/>StorageDead(_250)<br/>StorageDead(_248)<br/>StorageDead(_247)<br/>StorageDead(_245)<br/>StorageDead(_244)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb543__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">543</td></tr><tr><td align="left" balign="left">StorageDead(_264)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb544__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">544</td></tr><tr><td align="left" balign="left">StorageDead(_255)<br/>StorageDead(_252)<br/>StorageDead(_249)<br/>StorageDead(_246)<br/>StorageDead(_243)<br/>StorageDead(_242)<br/>StorageDead(_241)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb545__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">545</td></tr><tr><td align="left" balign="left">StorageDead(_239)<br/>StorageDead(_226)<br/>StorageDead(_225)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb546__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">546</td></tr><tr><td align="left" balign="left">StorageDead(_195)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb547__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">547</td></tr><tr><td align="left" balign="left">StorageDead(_181)<br/>StorageDead(_176)<br/>StorageDead(_173)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb548__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">548</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb549__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">549</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb550__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">550</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>StorageDead(_145)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb551__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">551</td></tr><tr><td align="left" balign="left">StorageDead(_127)<br/>StorageDead(_123)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb552__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">552</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/>StorageDead(_100)<br/>StorageDead(_97)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb553__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">553</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb554__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">554</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb555__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">555</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb556__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">556</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb557__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">557</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb558__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">558</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb559__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">559</td></tr><tr><td align="left">return</td></tr></table>>];
    bb560__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">560 (cleanup)</td></tr><tr><td align="left">drop(_207)</td></tr></table>>];
    bb561__0_563 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">561 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_563 -> bb1__0_563 [label="success"];
    bb1__0_563 -> bb2__0_563 [label="success"];
    bb2__0_563 -> bb3__0_563 [label="return"];
    bb3__0_563 -> bb5__0_563 [label="0"];
    bb3__0_563 -> bb4__0_563 [label="otherwise"];
    bb4__0_563 -> bb6__0_563 [label="success"];
    bb5__0_563 -> bb559__0_563 [label=""];
    bb6__0_563 -> bb7__0_563 [label="return"];
    bb7__0_563 -> bb8__0_563 [label="return"];
    bb8__0_563 -> bb9__0_563 [label="return"];
    bb9__0_563 -> bb10__0_563 [label="0"];
    bb9__0_563 -> bb12__0_563 [label="1"];
    bb9__0_563 -> bb11__0_563 [label="otherwise"];
    bb10__0_563 -> bb14__0_563 [label="success"];
    bb12__0_563 -> bb13__0_563 [label="return"];
    bb13__0_563 -> bb558__0_563 [label=""];
    bb14__0_563 -> bb15__0_563 [label="return"];
    bb15__0_563 -> bb16__0_563 [label="return"];
    bb16__0_563 -> bb17__0_563 [label="0"];
    bb16__0_563 -> bb18__0_563 [label="1"];
    bb16__0_563 -> bb11__0_563 [label="otherwise"];
    bb17__0_563 -> bb20__0_563 [label="0"];
    bb17__0_563 -> bb21__0_563 [label="1"];
    bb17__0_563 -> bb11__0_563 [label="otherwise"];
    bb18__0_563 -> bb19__0_563 [label="return"];
    bb19__0_563 -> bb556__0_563 [label=""];
    bb20__0_563 -> bb556__0_563 [label=""];
    bb21__0_563 -> bb22__0_563 [label="return"];
    bb22__0_563 -> bb23__0_563 [label="return"];
    bb23__0_563 -> bb24__0_563 [label="0"];
    bb23__0_563 -> bb25__0_563 [label="1"];
    bb23__0_563 -> bb11__0_563 [label="otherwise"];
    bb24__0_563 -> bb27__0_563 [label="success"];
    bb25__0_563 -> bb26__0_563 [label="return"];
    bb26__0_563 -> bb555__0_563 [label=""];
    bb27__0_563 -> bb28__0_563 [label="return"];
    bb28__0_563 -> bb29__0_563 [label="return"];
    bb29__0_563 -> bb30__0_563 [label="0"];
    bb29__0_563 -> bb31__0_563 [label="1"];
    bb29__0_563 -> bb11__0_563 [label="otherwise"];
    bb30__0_563 -> bb33__0_563 [label="success"];
    bb31__0_563 -> bb32__0_563 [label="return"];
    bb32__0_563 -> bb554__0_563 [label=""];
    bb33__0_563 -> bb34__0_563 [label="return"];
    bb34__0_563 -> bb35__0_563 [label="return"];
    bb35__0_563 -> bb36__0_563 [label="0"];
    bb35__0_563 -> bb37__0_563 [label="1"];
    bb35__0_563 -> bb11__0_563 [label="otherwise"];
    bb36__0_563 -> bb39__0_563 [label="return"];
    bb37__0_563 -> bb38__0_563 [label="return"];
    bb38__0_563 -> bb552__0_563 [label=""];
    bb39__0_563 -> bb40__0_563 [label="return"];
    bb40__0_563 -> bb41__0_563 [label="0"];
    bb40__0_563 -> bb42__0_563 [label="1"];
    bb40__0_563 -> bb11__0_563 [label="otherwise"];
    bb41__0_563 -> bb44__0_563 [label="success"];
    bb42__0_563 -> bb43__0_563 [label="return"];
    bb43__0_563 -> bb552__0_563 [label=""];
    bb44__0_563 -> bb45__0_563 [label="success"];
    bb45__0_563 -> bb46__0_563 [label="success"];
    bb46__0_563 -> bb47__0_563 [label="return"];
    bb47__0_563 -> bb48__0_563 [label="return"];
    bb48__0_563 -> bb49__0_563 [label="0"];
    bb48__0_563 -> bb50__0_563 [label="1"];
    bb48__0_563 -> bb11__0_563 [label="otherwise"];
    bb49__0_563 -> bb52__0_563 [label="success"];
    bb50__0_563 -> bb51__0_563 [label="return"];
    bb51__0_563 -> bb551__0_563 [label=""];
    bb52__0_563 -> bb53__0_563 [label="return"];
    bb53__0_563 -> bb54__0_563 [label="return"];
    bb54__0_563 -> bb55__0_563 [label="0"];
    bb54__0_563 -> bb56__0_563 [label="1"];
    bb54__0_563 -> bb11__0_563 [label="otherwise"];
    bb55__0_563 -> bb58__0_563 [label="success"];
    bb56__0_563 -> bb57__0_563 [label="return"];
    bb57__0_563 -> bb550__0_563 [label=""];
    bb58__0_563 -> bb59__0_563 [label="return"];
    bb59__0_563 -> bb60__0_563 [label="return"];
    bb60__0_563 -> bb61__0_563 [label="0"];
    bb60__0_563 -> bb62__0_563 [label="1"];
    bb60__0_563 -> bb11__0_563 [label="otherwise"];
    bb61__0_563 -> bb64__0_563 [label="success"];
    bb62__0_563 -> bb63__0_563 [label="return"];
    bb63__0_563 -> bb549__0_563 [label=""];
    bb64__0_563 -> bb65__0_563 [label="return"];
    bb65__0_563 -> bb66__0_563 [label="return"];
    bb66__0_563 -> bb67__0_563 [label="0"];
    bb66__0_563 -> bb68__0_563 [label="1"];
    bb66__0_563 -> bb11__0_563 [label="otherwise"];
    bb67__0_563 -> bb70__0_563 [label="return"];
    bb68__0_563 -> bb69__0_563 [label="return"];
    bb69__0_563 -> bb547__0_563 [label=""];
    bb70__0_563 -> bb71__0_563 [label="return"];
    bb71__0_563 -> bb72__0_563 [label="0"];
    bb71__0_563 -> bb73__0_563 [label="1"];
    bb71__0_563 -> bb11__0_563 [label="otherwise"];
    bb72__0_563 -> bb75__0_563 [label="return"];
    bb73__0_563 -> bb74__0_563 [label="return"];
    bb74__0_563 -> bb547__0_563 [label=""];
    bb75__0_563 -> bb76__0_563 [label="0"];
    bb75__0_563 -> bb84__0_563 [label="otherwise"];
    bb76__0_563 -> bb77__0_563 [label="return"];
    bb77__0_563 -> bb78__0_563 [label="return"];
    bb78__0_563 -> bb79__0_563 [label="return"];
    bb79__0_563 -> bb80__0_563 [label="return"];
    bb80__0_563 -> bb81__0_563 [label="return"];
    bb80__0_563 -> bb560__0_563 [label="unwind"];
    bb81__0_563 -> bb82__0_563 [label="return"];
    bb81__0_563 -> bb560__0_563 [label="unwind"];
    bb82__0_563 -> bb83__0_563 [label="return"];
    bb82__0_563 -> bb561__0_563 [label="unwind"];
    bb83__0_563 -> bb546__0_563 [label=""];
    bb84__0_563 -> bb85__0_563 [label="return"];
    bb85__0_563 -> bb86__0_563 [label="return"];
    bb86__0_563 -> bb87__0_563 [label="0"];
    bb86__0_563 -> bb88__0_563 [label="1"];
    bb86__0_563 -> bb11__0_563 [label="otherwise"];
    bb87__0_563 -> bb91__0_563 [label="1"];
    bb87__0_563 -> bb90__0_563 [label="otherwise"];
    bb88__0_563 -> bb89__0_563 [label="return"];
    bb89__0_563 -> bb546__0_563 [label=""];
    bb90__0_563 -> bb130__0_563 [label="1"];
    bb90__0_563 -> bb129__0_563 [label="otherwise"];
    bb91__0_563 -> bb92__0_563 [label="return"];
    bb92__0_563 -> bb93__0_563 [label="return"];
    bb93__0_563 -> bb94__0_563 [label="0"];
    bb93__0_563 -> bb95__0_563 [label="1"];
    bb93__0_563 -> bb11__0_563 [label="otherwise"];
    bb94__0_563 -> bb97__0_563 [label="return"];
    bb95__0_563 -> bb96__0_563 [label="return"];
    bb96__0_563 -> bb544__0_563 [label=""];
    bb97__0_563 -> bb98__0_563 [label="return"];
    bb98__0_563 -> bb99__0_563 [label="return"];
    bb99__0_563 -> bb100__0_563 [label="0"];
    bb99__0_563 -> bb101__0_563 [label="1"];
    bb99__0_563 -> bb11__0_563 [label="otherwise"];
    bb100__0_563 -> bb103__0_563 [label="return"];
    bb101__0_563 -> bb102__0_563 [label="return"];
    bb102__0_563 -> bb542__0_563 [label=""];
    bb103__0_563 -> bb104__0_563 [label="return"];
    bb104__0_563 -> bb105__0_563 [label="0"];
    bb104__0_563 -> bb106__0_563 [label="1"];
    bb104__0_563 -> bb11__0_563 [label="otherwise"];
    bb105__0_563 -> bb108__0_563 [label="return"];
    bb106__0_563 -> bb107__0_563 [label="return"];
    bb107__0_563 -> bb542__0_563 [label=""];
    bb108__0_563 -> bb109__0_563 [label="return"];
    bb109__0_563 -> bb110__0_563 [label="0"];
    bb109__0_563 -> bb111__0_563 [label="1"];
    bb109__0_563 -> bb11__0_563 [label="otherwise"];
    bb110__0_563 -> bb113__0_563 [label="return"];
    bb111__0_563 -> bb112__0_563 [label="return"];
    bb112__0_563 -> bb539__0_563 [label=""];
    bb113__0_563 -> bb114__0_563 [label="return"];
    bb114__0_563 -> bb115__0_563 [label="0"];
    bb114__0_563 -> bb116__0_563 [label="1"];
    bb114__0_563 -> bb11__0_563 [label="otherwise"];
    bb115__0_563 -> bb118__0_563 [label="return"];
    bb116__0_563 -> bb117__0_563 [label="return"];
    bb117__0_563 -> bb539__0_563 [label=""];
    bb118__0_563 -> bb119__0_563 [label="return"];
    bb119__0_563 -> bb120__0_563 [label="0"];
    bb119__0_563 -> bb121__0_563 [label="1"];
    bb119__0_563 -> bb11__0_563 [label="otherwise"];
    bb120__0_563 -> bb123__0_563 [label="return"];
    bb121__0_563 -> bb122__0_563 [label="return"];
    bb122__0_563 -> bb540__0_563 [label=""];
    bb123__0_563 -> bb124__0_563 [label="return"];
    bb124__0_563 -> bb125__0_563 [label="0"];
    bb124__0_563 -> bb126__0_563 [label="1"];
    bb124__0_563 -> bb11__0_563 [label="otherwise"];
    bb125__0_563 -> bb128__0_563 [label="return"];
    bb126__0_563 -> bb127__0_563 [label="return"];
    bb127__0_563 -> bb541__0_563 [label=""];
    bb128__0_563 -> bb132__0_563 [label=""];
    bb129__0_563 -> bb132__0_563 [label=""];
    bb130__0_563 -> bb131__0_563 [label="return"];
    bb131__0_563 -> bb132__0_563 [label=""];
    bb132__0_563 -> bb133__0_563 [label="return"];
    bb133__0_563 -> bb134__0_563 [label="return"];
    bb134__0_563 -> bb135__0_563 [label="0"];
    bb134__0_563 -> bb136__0_563 [label="1"];
    bb134__0_563 -> bb11__0_563 [label="otherwise"];
    bb135__0_563 -> bb139__0_563 [label="1"];
    bb135__0_563 -> bb138__0_563 [label="otherwise"];
    bb136__0_563 -> bb137__0_563 [label="return"];
    bb137__0_563 -> bb545__0_563 [label=""];
    bb138__0_563 -> bb178__0_563 [label="1"];
    bb138__0_563 -> bb177__0_563 [label="otherwise"];
    bb139__0_563 -> bb140__0_563 [label="return"];
    bb140__0_563 -> bb141__0_563 [label="return"];
    bb141__0_563 -> bb142__0_563 [label="0"];
    bb141__0_563 -> bb143__0_563 [label="1"];
    bb141__0_563 -> bb11__0_563 [label="otherwise"];
    bb142__0_563 -> bb145__0_563 [label="return"];
    bb143__0_563 -> bb144__0_563 [label="return"];
    bb144__0_563 -> bb537__0_563 [label=""];
    bb145__0_563 -> bb146__0_563 [label="return"];
    bb146__0_563 -> bb147__0_563 [label="return"];
    bb147__0_563 -> bb148__0_563 [label="0"];
    bb147__0_563 -> bb149__0_563 [label="1"];
    bb147__0_563 -> bb11__0_563 [label="otherwise"];
    bb148__0_563 -> bb151__0_563 [label="return"];
    bb149__0_563 -> bb150__0_563 [label="return"];
    bb150__0_563 -> bb535__0_563 [label=""];
    bb151__0_563 -> bb152__0_563 [label="return"];
    bb152__0_563 -> bb153__0_563 [label="0"];
    bb152__0_563 -> bb154__0_563 [label="1"];
    bb152__0_563 -> bb11__0_563 [label="otherwise"];
    bb153__0_563 -> bb156__0_563 [label="return"];
    bb154__0_563 -> bb155__0_563 [label="return"];
    bb155__0_563 -> bb535__0_563 [label=""];
    bb156__0_563 -> bb157__0_563 [label="return"];
    bb157__0_563 -> bb158__0_563 [label="0"];
    bb157__0_563 -> bb159__0_563 [label="1"];
    bb157__0_563 -> bb11__0_563 [label="otherwise"];
    bb158__0_563 -> bb161__0_563 [label="return"];
    bb159__0_563 -> bb160__0_563 [label="return"];
    bb160__0_563 -> bb532__0_563 [label=""];
    bb161__0_563 -> bb162__0_563 [label="return"];
    bb162__0_563 -> bb163__0_563 [label="0"];
    bb162__0_563 -> bb164__0_563 [label="1"];
    bb162__0_563 -> bb11__0_563 [label="otherwise"];
    bb163__0_563 -> bb166__0_563 [label="return"];
    bb164__0_563 -> bb165__0_563 [label="return"];
    bb165__0_563 -> bb532__0_563 [label=""];
    bb166__0_563 -> bb167__0_563 [label="return"];
    bb167__0_563 -> bb168__0_563 [label="0"];
    bb167__0_563 -> bb169__0_563 [label="1"];
    bb167__0_563 -> bb11__0_563 [label="otherwise"];
    bb168__0_563 -> bb171__0_563 [label="return"];
    bb169__0_563 -> bb170__0_563 [label="return"];
    bb170__0_563 -> bb533__0_563 [label=""];
    bb171__0_563 -> bb172__0_563 [label="return"];
    bb172__0_563 -> bb173__0_563 [label="0"];
    bb172__0_563 -> bb174__0_563 [label="1"];
    bb172__0_563 -> bb11__0_563 [label="otherwise"];
    bb173__0_563 -> bb176__0_563 [label="return"];
    bb174__0_563 -> bb175__0_563 [label="return"];
    bb175__0_563 -> bb534__0_563 [label=""];
    bb176__0_563 -> bb180__0_563 [label=""];
    bb177__0_563 -> bb180__0_563 [label=""];
    bb178__0_563 -> bb179__0_563 [label="return"];
    bb179__0_563 -> bb180__0_563 [label=""];
    bb180__0_563 -> bb181__0_563 [label="return"];
    bb181__0_563 -> bb182__0_563 [label="return"];
    bb182__0_563 -> bb183__0_563 [label="0"];
    bb182__0_563 -> bb184__0_563 [label="1"];
    bb182__0_563 -> bb11__0_563 [label="otherwise"];
    bb183__0_563 -> bb187__0_563 [label="0"];
    bb183__0_563 -> bb186__0_563 [label="otherwise"];
    bb184__0_563 -> bb185__0_563 [label="return"];
    bb185__0_563 -> bb538__0_563 [label=""];
    bb186__0_563 -> bb531__0_563 [label=""];
    bb187__0_563 -> bb188__0_563 [label="return"];
    bb188__0_563 -> bb189__0_563 [label="return"];
    bb189__0_563 -> bb190__0_563 [label="return"];
    bb190__0_563 -> bb191__0_563 [label="0"];
    bb190__0_563 -> bb192__0_563 [label="1"];
    bb190__0_563 -> bb11__0_563 [label="otherwise"];
    bb191__0_563 -> bb194__0_563 [label="return"];
    bb192__0_563 -> bb193__0_563 [label="return"];
    bb193__0_563 -> bb530__0_563 [label=""];
    bb194__0_563 -> bb195__0_563 [label="return"];
    bb195__0_563 -> bb196__0_563 [label="0"];
    bb195__0_563 -> bb197__0_563 [label="1"];
    bb195__0_563 -> bb11__0_563 [label="otherwise"];
    bb196__0_563 -> bb199__0_563 [label="return"];
    bb197__0_563 -> bb198__0_563 [label="return"];
    bb198__0_563 -> bb530__0_563 [label=""];
    bb199__0_563 -> bb206__0_563 [label="0"];
    bb199__0_563 -> bb200__0_563 [label="otherwise"];
    bb200__0_563 -> bb201__0_563 [label="return"];
    bb201__0_563 -> bb202__0_563 [label="return"];
    bb202__0_563 -> bb203__0_563 [label="0"];
    bb202__0_563 -> bb204__0_563 [label="1"];
    bb202__0_563 -> bb11__0_563 [label="otherwise"];
    bb203__0_563 -> bb207__0_563 [label=""];
    bb204__0_563 -> bb205__0_563 [label="return"];
    bb205__0_563 -> bb529__0_563 [label=""];
    bb206__0_563 -> bb207__0_563 [label=""];
    bb207__0_563 -> bb208__0_563 [label="return"];
    bb208__0_563 -> bb209__0_563 [label="return"];
    bb209__0_563 -> bb210__0_563 [label="0"];
    bb209__0_563 -> bb211__0_563 [label="1"];
    bb209__0_563 -> bb11__0_563 [label="otherwise"];
    bb210__0_563 -> bb213__0_563 [label="return"];
    bb211__0_563 -> bb212__0_563 [label="return"];
    bb212__0_563 -> bb529__0_563 [label=""];
    bb213__0_563 -> bb214__0_563 [label="return"];
    bb214__0_563 -> bb215__0_563 [label="0"];
    bb214__0_563 -> bb216__0_563 [label="1"];
    bb214__0_563 -> bb11__0_563 [label="otherwise"];
    bb215__0_563 -> bb218__0_563 [label="success"];
    bb216__0_563 -> bb217__0_563 [label="return"];
    bb217__0_563 -> bb527__0_563 [label=""];
    bb218__0_563 -> bb219__0_563 [label="return"];
    bb219__0_563 -> bb220__0_563 [label="success"];
    bb220__0_563 -> bb221__0_563 [label="return"];
    bb221__0_563 -> bb222__0_563 [label="return"];
    bb222__0_563 -> bb223__0_563 [label="0"];
    bb222__0_563 -> bb224__0_563 [label="1"];
    bb222__0_563 -> bb11__0_563 [label="otherwise"];
    bb223__0_563 -> bb226__0_563 [label="success"];
    bb224__0_563 -> bb225__0_563 [label="return"];
    bb225__0_563 -> bb527__0_563 [label=""];
    bb226__0_563 -> bb228__0_563 [label="0"];
    bb226__0_563 -> bb227__0_563 [label="1"];
    bb226__0_563 -> bb11__0_563 [label="otherwise"];
    bb227__0_563 -> bb234__0_563 [label="return"];
    bb228__0_563 -> bb229__0_563 [label="return"];
    bb229__0_563 -> bb230__0_563 [label="return"];
    bb230__0_563 -> bb231__0_563 [label="0"];
    bb230__0_563 -> bb232__0_563 [label="1"];
    bb230__0_563 -> bb11__0_563 [label="otherwise"];
    bb231__0_563 -> bb239__0_563 [label=""];
    bb232__0_563 -> bb233__0_563 [label="return"];
    bb233__0_563 -> bb525__0_563 [label=""];
    bb234__0_563 -> bb235__0_563 [label="return"];
    bb235__0_563 -> bb236__0_563 [label="0"];
    bb235__0_563 -> bb237__0_563 [label="1"];
    bb235__0_563 -> bb11__0_563 [label="otherwise"];
    bb236__0_563 -> bb239__0_563 [label=""];
    bb237__0_563 -> bb238__0_563 [label="return"];
    bb238__0_563 -> bb525__0_563 [label=""];
    bb239__0_563 -> bb240__0_563 [label="return"];
    bb240__0_563 -> bb241__0_563 [label="return"];
    bb241__0_563 -> bb242__0_563 [label="0"];
    bb241__0_563 -> bb243__0_563 [label="1"];
    bb241__0_563 -> bb11__0_563 [label="otherwise"];
    bb242__0_563 -> bb245__0_563 [label="success"];
    bb243__0_563 -> bb244__0_563 [label="return"];
    bb244__0_563 -> bb524__0_563 [label=""];
    bb245__0_563 -> bb246__0_563 [label="return"];
    bb246__0_563 -> bb247__0_563 [label="return"];
    bb247__0_563 -> bb248__0_563 [label="return"];
    bb248__0_563 -> bb249__0_563 [label="return"];
    bb249__0_563 -> bb250__0_563 [label="0"];
    bb249__0_563 -> bb251__0_563 [label="1"];
    bb249__0_563 -> bb11__0_563 [label="otherwise"];
    bb250__0_563 -> bb253__0_563 [label="return"];
    bb251__0_563 -> bb252__0_563 [label="return"];
    bb252__0_563 -> bb523__0_563 [label=""];
    bb253__0_563 -> bb254__0_563 [label="return"];
    bb254__0_563 -> bb255__0_563 [label="0"];
    bb254__0_563 -> bb256__0_563 [label="1"];
    bb254__0_563 -> bb11__0_563 [label="otherwise"];
    bb255__0_563 -> bb258__0_563 [label="return"];
    bb256__0_563 -> bb257__0_563 [label="return"];
    bb257__0_563 -> bb523__0_563 [label=""];
    bb258__0_563 -> bb259__0_563 [label="return"];
    bb259__0_563 -> bb260__0_563 [label="0"];
    bb259__0_563 -> bb261__0_563 [label="1"];
    bb259__0_563 -> bb11__0_563 [label="otherwise"];
    bb260__0_563 -> bb263__0_563 [label="success"];
    bb261__0_563 -> bb262__0_563 [label="return"];
    bb262__0_563 -> bb522__0_563 [label=""];
    bb263__0_563 -> bb264__0_563 [label="return"];
    bb264__0_563 -> bb265__0_563 [label="return"];
    bb265__0_563 -> bb266__0_563 [label="0"];
    bb265__0_563 -> bb267__0_563 [label="1"];
    bb265__0_563 -> bb11__0_563 [label="otherwise"];
    bb266__0_563 -> bb269__0_563 [label="success"];
    bb267__0_563 -> bb268__0_563 [label="return"];
    bb268__0_563 -> bb522__0_563 [label=""];
    bb269__0_563 -> bb270__0_563 [label="return"];
    bb270__0_563 -> bb271__0_563 [label="return"];
    bb271__0_563 -> bb272__0_563 [label="0"];
    bb271__0_563 -> bb273__0_563 [label="1"];
    bb271__0_563 -> bb11__0_563 [label="otherwise"];
    bb272__0_563 -> bb275__0_563 [label="success"];
    bb273__0_563 -> bb274__0_563 [label="return"];
    bb274__0_563 -> bb526__0_563 [label=""];
    bb275__0_563 -> bb276__0_563 [label="success"];
    bb276__0_563 -> bb277__0_563 [label="return"];
    bb277__0_563 -> bb278__0_563 [label="success"];
    bb278__0_563 -> bb279__0_563 [label="return"];
    bb279__0_563 -> bb280__0_563 [label="return"];
    bb280__0_563 -> bb281__0_563 [label="0"];
    bb280__0_563 -> bb282__0_563 [label="1"];
    bb280__0_563 -> bb11__0_563 [label="otherwise"];
    bb281__0_563 -> bb284__0_563 [label="return"];
    bb282__0_563 -> bb283__0_563 [label="return"];
    bb283__0_563 -> bb521__0_563 [label=""];
    bb284__0_563 -> bb285__0_563 [label="return"];
    bb285__0_563 -> bb286__0_563 [label="0"];
    bb285__0_563 -> bb287__0_563 [label="1"];
    bb285__0_563 -> bb11__0_563 [label="otherwise"];
    bb286__0_563 -> bb289__0_563 [label="return"];
    bb287__0_563 -> bb288__0_563 [label="return"];
    bb288__0_563 -> bb521__0_563 [label=""];
    bb289__0_563 -> bb290__0_563 [label="return"];
    bb290__0_563 -> bb291__0_563 [label="0"];
    bb290__0_563 -> bb292__0_563 [label="1"];
    bb290__0_563 -> bb11__0_563 [label="otherwise"];
    bb291__0_563 -> bb294__0_563 [label="return"];
    bb292__0_563 -> bb293__0_563 [label="return"];
    bb293__0_563 -> bb521__0_563 [label=""];
    bb294__0_563 -> bb295__0_563 [label="return"];
    bb295__0_563 -> bb296__0_563 [label="0"];
    bb295__0_563 -> bb297__0_563 [label="1"];
    bb295__0_563 -> bb11__0_563 [label="otherwise"];
    bb296__0_563 -> bb299__0_563 [label="success"];
    bb297__0_563 -> bb298__0_563 [label="return"];
    bb298__0_563 -> bb520__0_563 [label=""];
    bb299__0_563 -> bb300__0_563 [label="return"];
    bb300__0_563 -> bb301__0_563 [label="success"];
    bb301__0_563 -> bb302__0_563 [label="return"];
    bb302__0_563 -> bb303__0_563 [label="return"];
    bb303__0_563 -> bb304__0_563 [label="0"];
    bb303__0_563 -> bb305__0_563 [label="1"];
    bb303__0_563 -> bb11__0_563 [label="otherwise"];
    bb304__0_563 -> bb307__0_563 [label="success"];
    bb305__0_563 -> bb306__0_563 [label="return"];
    bb306__0_563 -> bb520__0_563 [label=""];
    bb307__0_563 -> bb309__0_563 [label="0"];
    bb307__0_563 -> bb308__0_563 [label="1"];
    bb307__0_563 -> bb11__0_563 [label="otherwise"];
    bb308__0_563 -> bb315__0_563 [label="return"];
    bb309__0_563 -> bb310__0_563 [label="return"];
    bb310__0_563 -> bb311__0_563 [label="return"];
    bb311__0_563 -> bb312__0_563 [label="0"];
    bb311__0_563 -> bb313__0_563 [label="1"];
    bb311__0_563 -> bb11__0_563 [label="otherwise"];
    bb312__0_563 -> bb320__0_563 [label=""];
    bb313__0_563 -> bb314__0_563 [label="return"];
    bb314__0_563 -> bb518__0_563 [label=""];
    bb315__0_563 -> bb316__0_563 [label="return"];
    bb316__0_563 -> bb317__0_563 [label="0"];
    bb316__0_563 -> bb318__0_563 [label="1"];
    bb316__0_563 -> bb11__0_563 [label="otherwise"];
    bb317__0_563 -> bb320__0_563 [label=""];
    bb318__0_563 -> bb319__0_563 [label="return"];
    bb319__0_563 -> bb518__0_563 [label=""];
    bb320__0_563 -> bb321__0_563 [label="return"];
    bb321__0_563 -> bb322__0_563 [label="return"];
    bb322__0_563 -> bb323__0_563 [label="0"];
    bb322__0_563 -> bb324__0_563 [label="1"];
    bb322__0_563 -> bb11__0_563 [label="otherwise"];
    bb323__0_563 -> bb326__0_563 [label="success"];
    bb324__0_563 -> bb325__0_563 [label="return"];
    bb325__0_563 -> bb517__0_563 [label=""];
    bb326__0_563 -> bb327__0_563 [label="return"];
    bb327__0_563 -> bb328__0_563 [label="return"];
    bb328__0_563 -> bb329__0_563 [label="return"];
    bb329__0_563 -> bb330__0_563 [label="return"];
    bb330__0_563 -> bb331__0_563 [label="0"];
    bb330__0_563 -> bb332__0_563 [label="1"];
    bb330__0_563 -> bb11__0_563 [label="otherwise"];
    bb331__0_563 -> bb334__0_563 [label="return"];
    bb332__0_563 -> bb333__0_563 [label="return"];
    bb333__0_563 -> bb516__0_563 [label=""];
    bb334__0_563 -> bb335__0_563 [label="return"];
    bb335__0_563 -> bb336__0_563 [label="0"];
    bb335__0_563 -> bb337__0_563 [label="1"];
    bb335__0_563 -> bb11__0_563 [label="otherwise"];
    bb336__0_563 -> bb339__0_563 [label="return"];
    bb337__0_563 -> bb338__0_563 [label="return"];
    bb338__0_563 -> bb516__0_563 [label=""];
    bb339__0_563 -> bb340__0_563 [label="return"];
    bb340__0_563 -> bb341__0_563 [label="0"];
    bb340__0_563 -> bb342__0_563 [label="1"];
    bb340__0_563 -> bb11__0_563 [label="otherwise"];
    bb341__0_563 -> bb344__0_563 [label="return"];
    bb342__0_563 -> bb343__0_563 [label="return"];
    bb343__0_563 -> bb515__0_563 [label=""];
    bb344__0_563 -> bb345__0_563 [label="return"];
    bb345__0_563 -> bb346__0_563 [label="0"];
    bb345__0_563 -> bb347__0_563 [label="1"];
    bb345__0_563 -> bb11__0_563 [label="otherwise"];
    bb346__0_563 -> bb349__0_563 [label="success"];
    bb347__0_563 -> bb348__0_563 [label="return"];
    bb348__0_563 -> bb515__0_563 [label=""];
    bb349__0_563 -> bb350__0_563 [label="return"];
    bb350__0_563 -> bb351__0_563 [label="return"];
    bb351__0_563 -> bb352__0_563 [label="0"];
    bb351__0_563 -> bb353__0_563 [label="1"];
    bb351__0_563 -> bb11__0_563 [label="otherwise"];
    bb352__0_563 -> bb355__0_563 [label="success"];
    bb353__0_563 -> bb354__0_563 [label="return"];
    bb354__0_563 -> bb519__0_563 [label=""];
    bb355__0_563 -> bb356__0_563 [label="success"];
    bb356__0_563 -> bb357__0_563 [label="return"];
    bb357__0_563 -> bb358__0_563 [label="success"];
    bb358__0_563 -> bb359__0_563 [label="return"];
    bb359__0_563 -> bb360__0_563 [label="return"];
    bb360__0_563 -> bb361__0_563 [label="0"];
    bb360__0_563 -> bb362__0_563 [label="1"];
    bb360__0_563 -> bb11__0_563 [label="otherwise"];
    bb361__0_563 -> bb365__0_563 [label="1"];
    bb361__0_563 -> bb364__0_563 [label="otherwise"];
    bb362__0_563 -> bb363__0_563 [label="return"];
    bb363__0_563 -> bb514__0_563 [label=""];
    bb364__0_563 -> bb376__0_563 [label="return"];
    bb365__0_563 -> bb366__0_563 [label="return"];
    bb366__0_563 -> bb367__0_563 [label="return"];
    bb367__0_563 -> bb368__0_563 [label="0"];
    bb367__0_563 -> bb369__0_563 [label="1"];
    bb367__0_563 -> bb11__0_563 [label="otherwise"];
    bb368__0_563 -> bb371__0_563 [label="return"];
    bb369__0_563 -> bb370__0_563 [label="return"];
    bb370__0_563 -> bb512__0_563 [label=""];
    bb371__0_563 -> bb372__0_563 [label="return"];
    bb372__0_563 -> bb373__0_563 [label="0"];
    bb372__0_563 -> bb374__0_563 [label="1"];
    bb372__0_563 -> bb11__0_563 [label="otherwise"];
    bb373__0_563 -> bb386__0_563 [label=""];
    bb374__0_563 -> bb375__0_563 [label="return"];
    bb375__0_563 -> bb512__0_563 [label=""];
    bb376__0_563 -> bb377__0_563 [label="return"];
    bb377__0_563 -> bb378__0_563 [label="0"];
    bb377__0_563 -> bb379__0_563 [label="1"];
    bb377__0_563 -> bb11__0_563 [label="otherwise"];
    bb378__0_563 -> bb381__0_563 [label="return"];
    bb379__0_563 -> bb380__0_563 [label="return"];
    bb380__0_563 -> bb513__0_563 [label=""];
    bb381__0_563 -> bb382__0_563 [label="return"];
    bb382__0_563 -> bb383__0_563 [label="0"];
    bb382__0_563 -> bb384__0_563 [label="1"];
    bb382__0_563 -> bb11__0_563 [label="otherwise"];
    bb383__0_563 -> bb386__0_563 [label=""];
    bb384__0_563 -> bb385__0_563 [label="return"];
    bb385__0_563 -> bb513__0_563 [label=""];
    bb386__0_563 -> bb387__0_563 [label="1"];
    bb386__0_563 -> bb419__0_563 [label="otherwise"];
    bb387__0_563 -> bb388__0_563 [label="1"];
    bb387__0_563 -> bb419__0_563 [label="otherwise"];
    bb388__0_563 -> bb411__0_563 [label="0"];
    bb388__0_563 -> bb389__0_563 [label="otherwise"];
    bb389__0_563 -> bb390__0_563 [label="return"];
    bb390__0_563 -> bb391__0_563 [label="return"];
    bb391__0_563 -> bb392__0_563 [label="0"];
    bb391__0_563 -> bb393__0_563 [label="1"];
    bb391__0_563 -> bb11__0_563 [label="otherwise"];
    bb392__0_563 -> bb395__0_563 [label="return"];
    bb393__0_563 -> bb394__0_563 [label="return"];
    bb394__0_563 -> bb509__0_563 [label=""];
    bb395__0_563 -> bb396__0_563 [label="return"];
    bb396__0_563 -> bb397__0_563 [label="return"];
    bb397__0_563 -> bb398__0_563 [label="0"];
    bb397__0_563 -> bb399__0_563 [label="1"];
    bb397__0_563 -> bb11__0_563 [label="otherwise"];
    bb398__0_563 -> bb401__0_563 [label="return"];
    bb399__0_563 -> bb400__0_563 [label="return"];
    bb400__0_563 -> bb509__0_563 [label=""];
    bb401__0_563 -> bb402__0_563 [label="return"];
    bb402__0_563 -> bb403__0_563 [label="0"];
    bb402__0_563 -> bb404__0_563 [label="1"];
    bb402__0_563 -> bb11__0_563 [label="otherwise"];
    bb403__0_563 -> bb406__0_563 [label="return"];
    bb404__0_563 -> bb405__0_563 [label="return"];
    bb405__0_563 -> bb508__0_563 [label=""];
    bb406__0_563 -> bb407__0_563 [label="return"];
    bb407__0_563 -> bb408__0_563 [label="0"];
    bb407__0_563 -> bb409__0_563 [label="1"];
    bb407__0_563 -> bb11__0_563 [label="otherwise"];
    bb408__0_563 -> bb412__0_563 [label=""];
    bb409__0_563 -> bb410__0_563 [label="return"];
    bb410__0_563 -> bb508__0_563 [label=""];
    bb411__0_563 -> bb412__0_563 [label=""];
    bb412__0_563 -> bb413__0_563 [label="return"];
    bb413__0_563 -> bb414__0_563 [label="return"];
    bb414__0_563 -> bb415__0_563 [label="return"];
    bb415__0_563 -> bb416__0_563 [label="0"];
    bb415__0_563 -> bb417__0_563 [label="1"];
    bb415__0_563 -> bb11__0_563 [label="otherwise"];
    bb416__0_563 -> bb420__0_563 [label=""];
    bb417__0_563 -> bb418__0_563 [label="return"];
    bb418__0_563 -> bb511__0_563 [label=""];
    bb419__0_563 -> bb420__0_563 [label=""];
    bb420__0_563 -> bb421__0_563 [label="return"];
    bb421__0_563 -> bb422__0_563 [label="return"];
    bb422__0_563 -> bb423__0_563 [label="0"];
    bb422__0_563 -> bb424__0_563 [label="1"];
    bb422__0_563 -> bb11__0_563 [label="otherwise"];
    bb423__0_563 -> bb426__0_563 [label="return"];
    bb424__0_563 -> bb425__0_563 [label="return"];
    bb425__0_563 -> bb507__0_563 [label=""];
    bb426__0_563 -> bb427__0_563 [label="return"];
    bb427__0_563 -> bb428__0_563 [label="0"];
    bb427__0_563 -> bb429__0_563 [label="1"];
    bb427__0_563 -> bb11__0_563 [label="otherwise"];
    bb428__0_563 -> bb431__0_563 [label="return"];
    bb429__0_563 -> bb430__0_563 [label="return"];
    bb430__0_563 -> bb507__0_563 [label=""];
    bb431__0_563 -> bb432__0_563 [label="return"];
    bb432__0_563 -> bb433__0_563 [label="0"];
    bb432__0_563 -> bb434__0_563 [label="1"];
    bb432__0_563 -> bb11__0_563 [label="otherwise"];
    bb433__0_563 -> bb436__0_563 [label="return"];
    bb434__0_563 -> bb435__0_563 [label="return"];
    bb435__0_563 -> bb506__0_563 [label=""];
    bb436__0_563 -> bb437__0_563 [label="return"];
    bb437__0_563 -> bb438__0_563 [label="0"];
    bb437__0_563 -> bb439__0_563 [label="1"];
    bb437__0_563 -> bb11__0_563 [label="otherwise"];
    bb438__0_563 -> bb441__0_563 [label="return"];
    bb439__0_563 -> bb440__0_563 [label="return"];
    bb440__0_563 -> bb506__0_563 [label=""];
    bb441__0_563 -> bb442__0_563 [label="return"];
    bb442__0_563 -> bb443__0_563 [label="return"];
    bb443__0_563 -> bb444__0_563 [label="success"];
    bb444__0_563 -> bb445__0_563 [label="return"];
    bb445__0_563 -> bb447__0_563 [label="0"];
    bb445__0_563 -> bb446__0_563 [label="otherwise"];
    bb446__0_563 -> bb448__0_563 [label=""];
    bb447__0_563 -> bb448__0_563 [label=""];
    bb448__0_563 -> bb449__0_563 [label="success"];
    bb449__0_563 -> bb450__0_563 [label="return"];
    bb450__0_563 -> bb451__0_563 [label="return"];
    bb451__0_563 -> bb452__0_563 [label="0"];
    bb451__0_563 -> bb453__0_563 [label="1"];
    bb451__0_563 -> bb11__0_563 [label="otherwise"];
    bb452__0_563 -> bb455__0_563 [label="success"];
    bb453__0_563 -> bb454__0_563 [label="return"];
    bb454__0_563 -> bb504__0_563 [label=""];
    bb455__0_563 -> bb456__0_563 [label="success"];
    bb456__0_563 -> bb457__0_563 [label="return"];
    bb457__0_563 -> bb458__0_563 [label="return"];
    bb458__0_563 -> bb459__0_563 [label="return"];
    bb459__0_563 -> bb460__0_563 [label="0"];
    bb459__0_563 -> bb461__0_563 [label="1"];
    bb459__0_563 -> bb11__0_563 [label="otherwise"];
    bb460__0_563 -> bb463__0_563 [label="return"];
    bb461__0_563 -> bb462__0_563 [label="return"];
    bb462__0_563 -> bb503__0_563 [label=""];
    bb463__0_563 -> bb464__0_563 [label="return"];
    bb464__0_563 -> bb465__0_563 [label="0"];
    bb464__0_563 -> bb466__0_563 [label="1"];
    bb464__0_563 -> bb11__0_563 [label="otherwise"];
    bb465__0_563 -> bb468__0_563 [label="return"];
    bb466__0_563 -> bb467__0_563 [label="return"];
    bb467__0_563 -> bb503__0_563 [label=""];
    bb468__0_563 -> bb469__0_563 [label="return"];
    bb469__0_563 -> bb470__0_563 [label="0"];
    bb469__0_563 -> bb471__0_563 [label="1"];
    bb469__0_563 -> bb11__0_563 [label="otherwise"];
    bb470__0_563 -> bb473__0_563 [label="success"];
    bb471__0_563 -> bb472__0_563 [label="return"];
    bb472__0_563 -> bb505__0_563 [label=""];
    bb473__0_563 -> bb474__0_563 [label="return"];
    bb474__0_563 -> bb475__0_563 [label="return"];
    bb475__0_563 -> bb476__0_563 [label="0"];
    bb475__0_563 -> bb477__0_563 [label="1"];
    bb475__0_563 -> bb11__0_563 [label="otherwise"];
    bb476__0_563 -> bb480__0_563 [label="0"];
    bb476__0_563 -> bb479__0_563 [label="otherwise"];
    bb477__0_563 -> bb478__0_563 [label="return"];
    bb478__0_563 -> bb505__0_563 [label=""];
    bb479__0_563 -> bb481__0_563 [label="success"];
    bb480__0_563 -> bb487__0_563 [label=""];
    bb481__0_563 -> bb482__0_563 [label="return"];
    bb482__0_563 -> bb483__0_563 [label="return"];
    bb483__0_563 -> bb484__0_563 [label="success"];
    bb484__0_563 -> bb485__0_563 [label="success"];
    bb485__0_563 -> bb486__0_563 [label="success"];
    bb486__0_563 -> bb487__0_563 [label=""];
    bb487__0_563 -> bb488__0_563 [label="success"];
    bb488__0_563 -> bb489__0_563 [label="return"];
    bb489__0_563 -> bb490__0_563 [label="return"];
    bb490__0_563 -> bb491__0_563 [label="0"];
    bb490__0_563 -> bb492__0_563 [label="1"];
    bb490__0_563 -> bb11__0_563 [label="otherwise"];
    bb491__0_563 -> bb495__0_563 [label="0"];
    bb491__0_563 -> bb494__0_563 [label="otherwise"];
    bb492__0_563 -> bb493__0_563 [label="return"];
    bb493__0_563 -> bb505__0_563 [label=""];
    bb494__0_563 -> bb496__0_563 [label="success"];
    bb495__0_563 -> bb502__0_563 [label=""];
    bb496__0_563 -> bb497__0_563 [label="return"];
    bb497__0_563 -> bb498__0_563 [label="return"];
    bb498__0_563 -> bb499__0_563 [label="success"];
    bb499__0_563 -> bb500__0_563 [label="success"];
    bb500__0_563 -> bb501__0_563 [label="success"];
    bb501__0_563 -> bb502__0_563 [label=""];
    bb502__0_563 -> bb559__0_563 [label=""];
    bb503__0_563 -> bb504__0_563 [label=""];
    bb504__0_563 -> bb505__0_563 [label=""];
    bb505__0_563 -> bb514__0_563 [label=""];
    bb506__0_563 -> bb514__0_563 [label=""];
    bb507__0_563 -> bb514__0_563 [label=""];
    bb508__0_563 -> bb510__0_563 [label=""];
    bb509__0_563 -> bb510__0_563 [label=""];
    bb510__0_563 -> bb511__0_563 [label=""];
    bb511__0_563 -> bb514__0_563 [label=""];
    bb512__0_563 -> bb513__0_563 [label=""];
    bb513__0_563 -> bb514__0_563 [label=""];
    bb514__0_563 -> bb519__0_563 [label=""];
    bb515__0_563 -> bb519__0_563 [label=""];
    bb516__0_563 -> bb517__0_563 [label=""];
    bb517__0_563 -> bb519__0_563 [label=""];
    bb518__0_563 -> bb519__0_563 [label=""];
    bb519__0_563 -> bb521__0_563 [label=""];
    bb520__0_563 -> bb521__0_563 [label=""];
    bb521__0_563 -> bb526__0_563 [label=""];
    bb522__0_563 -> bb526__0_563 [label=""];
    bb523__0_563 -> bb524__0_563 [label=""];
    bb524__0_563 -> bb526__0_563 [label=""];
    bb525__0_563 -> bb526__0_563 [label=""];
    bb526__0_563 -> bb528__0_563 [label=""];
    bb527__0_563 -> bb528__0_563 [label=""];
    bb528__0_563 -> bb529__0_563 [label=""];
    bb529__0_563 -> bb530__0_563 [label=""];
    bb530__0_563 -> bb531__0_563 [label=""];
    bb531__0_563 -> bb538__0_563 [label=""];
    bb532__0_563 -> bb533__0_563 [label=""];
    bb533__0_563 -> bb534__0_563 [label=""];
    bb534__0_563 -> bb536__0_563 [label=""];
    bb535__0_563 -> bb536__0_563 [label=""];
    bb536__0_563 -> bb537__0_563 [label=""];
    bb537__0_563 -> bb538__0_563 [label=""];
    bb538__0_563 -> bb545__0_563 [label=""];
    bb539__0_563 -> bb540__0_563 [label=""];
    bb540__0_563 -> bb541__0_563 [label=""];
    bb541__0_563 -> bb543__0_563 [label=""];
    bb542__0_563 -> bb543__0_563 [label=""];
    bb543__0_563 -> bb544__0_563 [label=""];
    bb544__0_563 -> bb545__0_563 [label=""];
    bb545__0_563 -> bb546__0_563 [label=""];
    bb546__0_563 -> bb548__0_563 [label=""];
    bb547__0_563 -> bb548__0_563 [label=""];
    bb548__0_563 -> bb549__0_563 [label=""];
    bb549__0_563 -> bb550__0_563 [label=""];
    bb550__0_563 -> bb551__0_563 [label=""];
    bb551__0_563 -> bb553__0_563 [label=""];
    bb552__0_563 -> bb553__0_563 [label=""];
    bb553__0_563 -> bb554__0_563 [label=""];
    bb554__0_563 -> bb555__0_563 [label=""];
    bb555__0_563 -> bb557__0_563 [label=""];
    bb556__0_563 -> bb557__0_563 [label=""];
    bb557__0_563 -> bb558__0_563 [label=""];
    bb558__0_563 -> bb559__0_563 [label=""];
    bb560__0_563 -> bb561__0_563 [label="return"];
}
