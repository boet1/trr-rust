// MIR for `instructions::user::handle_update_user_protected_maker_orders` before PreCodegen

fn instructions::user::handle_update_user_protected_maker_orders(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::UpdateUserProtectedMakerMode<'_>>, _2: u16, _3: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug _sub_account_id => _2;
    debug protected_maker_orders => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: std::cell::RefMut<'_, state::user::User>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _9: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: std::cell::RefMut<'_, state::user::User>;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _17: std::result::Result<(), error::ErrorCode>;
    let mut _18: bool;
    let mut _19: &state::user::User;
    let _20: &state::user::User;
    let mut _21: &std::cell::RefMut<'_, state::user::User>;
    let mut _22: ();
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[&str; 2];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let mut _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: &error::ErrorCode;
    let _42: &error::ErrorCode;
    let mut _43: error::ErrorCode;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _51: std::result::Result<(), error::ErrorCode>;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: &state::user::User;
    let _56: &state::user::User;
    let mut _57: &std::cell::RefMut<'_, state::user::User>;
    let mut _58: ();
    let _60: ();
    let mut _61: &str;
    let _62: &str;
    let mut _63: &std::string::String;
    let _64: &std::string::String;
    let _65: std::string::String;
    let mut _67: std::fmt::Arguments<'_>;
    let mut _68: &[&str];
    let mut _69: &[&str; 2];
    let _70: &[&str; 2];
    let _71: [&str; 2];
    let mut _72: &[core::fmt::rt::Argument<'_>];
    let mut _73: &[core::fmt::rt::Argument<'_>; 1];
    let _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: [core::fmt::rt::Argument<'_>; 1];
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _77: &error::ErrorCode;
    let _78: &error::ErrorCode;
    let _79: ();
    let mut _80: &str;
    let _81: &str;
    let mut _82: &std::string::String;
    let _83: &std::string::String;
    let _84: std::string::String;
    let mut _86: std::fmt::Arguments<'_>;
    let mut _87: &[&str];
    let mut _88: &[&str; 2];
    let _89: &[&str; 2];
    let _90: [&str; 2];
    let mut _91: &[core::fmt::rt::Argument<'_>];
    let mut _92: &[core::fmt::rt::Argument<'_>; 1];
    let _93: &[core::fmt::rt::Argument<'_>; 1];
    let _94: [core::fmt::rt::Argument<'_>; 1];
    let mut _95: core::fmt::rt::Argument<'_>;
    let mut _96: &&str;
    let _97: &&str;
    let _98: &str;
    let mut _99: bool;
    let _100: &str;
    let mut _101: error::ErrorCode;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _107: ();
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _109: std::result::Result<(), error::ErrorCode>;
    let mut _110: &mut state::user::User;
    let mut _111: &mut state::user::User;
    let mut _112: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _113: bool;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>>;
    let mut _121: std::result::Result<std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>, error::ErrorCode>;
    let mut _122: std::result::Result<std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>, anchor_lang::error::Error>;
    let mut _123: &anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _124: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _130: ();
    let mut _131: bool;
    let _132: ();
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _134: std::result::Result<(), error::ErrorCode>;
    let mut _135: bool;
    let mut _136: &state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let _137: &state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _138: &std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _139: ();
    let _141: ();
    let mut _142: &str;
    let _143: &str;
    let mut _144: &std::string::String;
    let _145: &std::string::String;
    let _146: std::string::String;
    let mut _148: std::fmt::Arguments<'_>;
    let mut _149: &[&str];
    let mut _150: &[&str; 2];
    let _151: &[&str; 2];
    let _152: [&str; 2];
    let mut _153: &[core::fmt::rt::Argument<'_>];
    let mut _154: &[core::fmt::rt::Argument<'_>; 1];
    let _155: &[core::fmt::rt::Argument<'_>; 1];
    let _156: [core::fmt::rt::Argument<'_>; 1];
    let mut _157: core::fmt::rt::Argument<'_>;
    let mut _158: &error::ErrorCode;
    let _159: &error::ErrorCode;
    let _160: ();
    let mut _161: &str;
    let _162: &str;
    let mut _163: error::ErrorCode;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: u32;
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _171: std::result::Result<u32, error::ErrorCode>;
    let mut _172: u32;
    let mut _173: &state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _174: &std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _180: &mut state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _181: &mut std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _182: u32;
    let mut _183: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _184: std::result::Result<u32, error::ErrorCode>;
    let mut _185: u32;
    let mut _186: &state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _187: &std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: &mut state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _194: &mut std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let _195: ();
    let mut _196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _197: std::result::Result<(), error::ErrorCode>;
    let mut _198: &state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let _199: &state::protected_maker_mode_config::ProtectedMakerModeConfig;
    let mut _200: &std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _206: ();
    let mut _211: &mut instructions::user::UpdateUserProtectedMakerMode<'_>;
    let mut _212: &mut instructions::user::UpdateUserProtectedMakerMode<'_>;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    scope 1 {
        debug user => _4;
        let _23: error::ErrorCode;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: ();
        let _59: error::ErrorCode;
        let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _106: ();
        let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _118: ();
        let mut _119: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
        let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _129: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>;
        scope 6 {
            debug error_code => _23;
            let _30: std::string::String;
            let mut _210: &[&str; 2];
            scope 7 {
                debug res => _30;
            }
        }
        scope 8 {
            debug residual => _45;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _48;
            scope 11 {
            }
        }
        scope 12 {
            debug error_code => _59;
            let _66: std::string::String;
            let _85: std::string::String;
            let mut _208: &[&str; 2];
            let mut _209: &[&str; 2];
            scope 13 {
                debug res => _66;
            }
            scope 14 {
                debug res => _85;
            }
        }
        scope 15 {
            debug residual => _103;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _106;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _115;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _118;
            scope 22 {
            }
        }
        scope 23 {
            debug config => _119;
            let _140: error::ErrorCode;
            let _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _168: ();
            let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _179: u32;
            let _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _192: u32;
            let _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _205: ();
            scope 28 {
                debug error_code => _140;
                let _147: std::string::String;
                let mut _207: &[&str; 2];
                scope 29 {
                    debug res => _147;
                }
            }
            scope 30 {
                debug residual => _165;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _168;
                scope 33 {
                }
            }
            scope 34 {
                debug residual => _176;
                scope 35 {
                }
            }
            scope 36 {
                debug val => _179;
                scope 37 {
                }
            }
            scope 38 {
                debug residual => _189;
                scope 39 {
                }
            }
            scope 40 {
                debug val => _192;
                scope 41 {
                }
            }
            scope 42 {
                debug residual => _202;
                scope 43 {
                }
            }
            scope 44 {
                debug val => _205;
                scope 45 {
                }
            }
        }
        scope 24 {
            debug residual => _126;
            scope 25 {
            }
        }
        scope 26 {
            debug val => _129;
            scope 27 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _211 = deref_copy (_1.1: &mut instructions::user::UpdateUserProtectedMakerMode<'_>);
        _8 = &((*_211).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _7 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _6 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _7, move _9) -> [return: bb2, unwind: bb112];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind: bb112];
    }

    bb3: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _4 = move _14;
        StorageDead(_14);
        _215 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &_4;
        _20 = <RefMut<'_, User> as Deref>::deref(move _21) -> [return: bb8, unwind: bb111];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind: bb114];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _213 = discriminant(_5);
        StorageDead(_5);
        goto -> bb104;
    }

    bb8: {
        _19 = &(*_20);
        StorageDead(_21);
        _18 = User::is_being_liquidated(move _19) -> [return: bb9, unwind: bb111];
    }

    bb9: {
        switchInt(move _18) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_20);
        StorageLive(_23);
        _23 = error::ErrorCode::LiquidationsOngoing;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _210 = const _;
        _34 = &(*_210);
        _33 = &(*_34);
        _32 = move _33 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_23;
        _41 = &(*_42);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _41) -> [return: bb12, unwind: bb111];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_20);
        StorageLive(_22);
        _22 = ();
        _17 = std::result::Result::<(), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        goto -> bb18;
    }

    bb12: {
        StorageDead(_41);
        _39 = [move _40];
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_37);
        _31 = Arguments::<'_>::new_v1(move _32, move _36) -> [return: bb13, unwind: bb111];
    }

    bb13: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = format(move _31) -> [return: bb14, unwind: bb111];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        _29 = move _30;
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = <String as Deref>::deref(move _27) -> [return: bb15, unwind: bb110];
    }

    bb15: {
        _25 = &(*_26);
        StorageDead(_27);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb16, unwind: bb110];
    }

    bb16: {
        StorageDead(_25);
        drop(_29) -> [return: bb17, unwind: bb111];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_43);
        _43 = _23;
        _17 = std::result::Result::<(), error::ErrorCode>::Err(move _43);
        StorageDead(_43);
        StorageDead(_23);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_18);
        _16 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _17) -> [return: bb19, unwind: bb111];
    }

    bb19: {
        StorageDead(_17);
        _44 = discriminant(_16);
        switchInt(move _44) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_48);
        _48 = ((_16 as Continue).0: ());
        _15 = _48;
        StorageDead(_48);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _3;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_4;
        _56 = <RefMut<'_, User> as Deref>::deref(move _57) -> [return: bb23, unwind: bb111];
    }

    bb21: {
        StorageLive(_45);
        _45 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb22, unwind: bb111];
    }

    bb22: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb103;
    }

    bb23: {
        _55 = &(*_56);
        StorageDead(_57);
        _54 = User::is_protected_maker(move _55) -> [return: bb24, unwind: bb111];
    }

    bb24: {
        StorageDead(_55);
        _52 = Ne(move _53, move _54);
        switchInt(move _52) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_58);
        _58 = ();
        _51 = std::result::Result::<(), error::ErrorCode>::Ok(move _58);
        StorageDead(_58);
        goto -> bb42;
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_59);
        _59 = error::ErrorCode::DefaultError;
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _209 = const _;
        _70 = &(*_209);
        _69 = &(*_70);
        _68 = move _69 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_69);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_59;
        _77 = &(*_78);
        _76 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _77) -> [return: bb27, unwind: bb111];
    }

    bb27: {
        StorageDead(_77);
        _75 = [move _76];
        StorageDead(_76);
        _74 = &_75;
        _73 = &(*_74);
        _72 = move _73 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_73);
        _67 = Arguments::<'_>::new_v1(move _68, move _72) -> [return: bb28, unwind: bb111];
    }

    bb28: {
        StorageDead(_72);
        StorageDead(_68);
        _66 = format(move _67) -> [return: bb29, unwind: bb111];
    }

    bb29: {
        StorageDead(_67);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_70);
        _65 = move _66;
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _62 = <String as Deref>::deref(move _63) -> [return: bb30, unwind: bb109];
    }

    bb30: {
        _61 = &(*_62);
        StorageDead(_63);
        _60 = solana_program::log::sol_log(move _61) -> [return: bb31, unwind: bb109];
    }

    bb31: {
        StorageDead(_61);
        drop(_65) -> [return: bb32, unwind: bb111];
    }

    bb32: {
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _208 = const _;
        _89 = &(*_208);
        _88 = &(*_89);
        _87 = move _88 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _3;
        switchInt(move _99) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _98 = const "in";
        goto -> bb35;
    }

    bb34: {
        StorageLive(_100);
        _100 = const "out of";
        _98 = &(*_100);
        StorageDead(_100);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _96) -> [return: bb36, unwind: bb111];
    }

    bb36: {
        StorageDead(_96);
        _94 = [move _95];
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        _91 = move _92 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_92);
        _86 = Arguments::<'_>::new_v1(move _87, move _91) -> [return: bb37, unwind: bb111];
    }

    bb37: {
        StorageDead(_91);
        StorageDead(_87);
        _85 = format(move _86) -> [return: bb38, unwind: bb111];
    }

    bb38: {
        StorageDead(_86);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_89);
        _84 = move _85;
        StorageDead(_85);
        _83 = &_84;
        _82 = &(*_83);
        _81 = <String as Deref>::deref(move _82) -> [return: bb39, unwind: bb108];
    }

    bb39: {
        _80 = &(*_81);
        StorageDead(_82);
        _79 = solana_program::log::sol_log(move _80) -> [return: bb40, unwind: bb108];
    }

    bb40: {
        StorageDead(_80);
        drop(_84) -> [return: bb41, unwind: bb111];
    }

    bb41: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageLive(_101);
        _101 = _59;
        _51 = std::result::Result::<(), error::ErrorCode>::Err(move _101);
        StorageDead(_101);
        StorageDead(_59);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_52);
        _50 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _51) -> [return: bb43, unwind: bb111];
    }

    bb43: {
        StorageDead(_51);
        _102 = discriminant(_50);
        switchInt(move _102) -> [0: bb44, 1: bb45, otherwise: bb5];
    }

    bb44: {
        StorageLive(_106);
        _106 = ((_50 as Continue).0: ());
        _49 = _106;
        StorageDead(_106);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &mut _4;
        _111 = <RefMut<'_, User> as DerefMut>::deref_mut(move _112) -> [return: bb47, unwind: bb111];
    }

    bb45: {
        StorageLive(_103);
        _103 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb46, unwind: bb111];
    }

    bb46: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb103;
    }

    bb47: {
        _110 = &mut (*_111);
        StorageDead(_112);
        StorageLive(_113);
        _113 = _3;
        _109 = User::update_protected_maker_orders_status(move _110, move _113) -> [return: bb48, unwind: bb111];
    }

    bb48: {
        StorageDead(_113);
        StorageDead(_110);
        _108 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _109) -> [return: bb49, unwind: bb111];
    }

    bb49: {
        StorageDead(_109);
        _114 = discriminant(_108);
        switchInt(move _114) -> [0: bb50, 1: bb51, otherwise: bb5];
    }

    bb50: {
        StorageLive(_118);
        _118 = ((_108 as Continue).0: ());
        _107 = _118;
        StorageDead(_118);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _212 = deref_copy (_1.1: &mut instructions::user::UpdateUserProtectedMakerMode<'_>);
        _123 = &((*_212).3: anchor_lang::prelude::AccountLoader<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>);
        _122 = anchor_lang::prelude::AccountLoader::<'_, ProtectedMakerModeConfig>::load_mut(move _123) -> [return: bb53, unwind: bb111];
    }

    bb51: {
        StorageLive(_115);
        _115 = ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb52, unwind: bb111];
    }

    bb52: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        goto -> bb103;
    }

    bb53: {
        StorageDead(_123);
        StorageLive(_124);
        _124 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _121 = std::result::Result::<RefMut<'_, ProtectedMakerModeConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _122, move _124) -> [return: bb54, unwind: bb111];
    }

    bb54: {
        StorageDead(_124);
        StorageDead(_122);
        _120 = <std::result::Result<RefMut<'_, ProtectedMakerModeConfig>, error::ErrorCode> as Try>::branch(move _121) -> [return: bb55, unwind: bb111];
    }

    bb55: {
        StorageDead(_121);
        _125 = discriminant(_120);
        switchInt(move _125) -> [0: bb56, 1: bb57, otherwise: bb5];
    }

    bb56: {
        StorageLive(_129);
        _129 = move ((_120 as Continue).0: std::cell::RefMut<'_, state::protected_maker_mode_config::ProtectedMakerModeConfig>);
        _119 = move _129;
        StorageDead(_129);
        _219 = discriminant(_120);
        StorageDead(_120);
        StorageLive(_130);
        StorageLive(_131);
        _131 = _3;
        switchInt(move _131) -> [0: bb83, otherwise: bb59];
    }

    bb57: {
        StorageLive(_126);
        _126 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb58, unwind: bb113];
    }

    bb58: {
        StorageDead(_128);
        StorageDead(_126);
        _217 = discriminant(_120);
        StorageDead(_120);
        goto -> bb102;
    }

    bb59: {
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_119;
        _137 = <RefMut<'_, ProtectedMakerModeConfig> as Deref>::deref(move _138) -> [return: bb60, unwind: bb107];
    }

    bb60: {
        _136 = &(*_137);
        StorageDead(_138);
        _135 = ProtectedMakerModeConfig::is_reduce_only(move _136) -> [return: bb61, unwind: bb107];
    }

    bb61: {
        switchInt(move _135) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        StorageDead(_136);
        StorageDead(_137);
        StorageLive(_140);
        _140 = error::ErrorCode::DefaultError;
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _207 = const _;
        _151 = &(*_207);
        _150 = &(*_151);
        _149 = move _150 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_150);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &_140;
        _158 = &(*_159);
        _157 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _158) -> [return: bb64, unwind: bb107];
    }

    bb63: {
        StorageDead(_136);
        StorageDead(_137);
        StorageLive(_139);
        _139 = ();
        _134 = std::result::Result::<(), error::ErrorCode>::Ok(move _139);
        StorageDead(_139);
        goto -> bb71;
    }

    bb64: {
        StorageDead(_158);
        _156 = [move _157];
        StorageDead(_157);
        _155 = &_156;
        _154 = &(*_155);
        _153 = move _154 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_154);
        _148 = Arguments::<'_>::new_v1(move _149, move _153) -> [return: bb65, unwind: bb107];
    }

    bb65: {
        StorageDead(_153);
        StorageDead(_149);
        _147 = format(move _148) -> [return: bb66, unwind: bb107];
    }

    bb66: {
        StorageDead(_148);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_151);
        _146 = move _147;
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = <String as Deref>::deref(move _144) -> [return: bb67, unwind: bb106];
    }

    bb67: {
        _142 = &(*_143);
        StorageDead(_144);
        _141 = solana_program::log::sol_log(move _142) -> [return: bb68, unwind: bb106];
    }

    bb68: {
        StorageDead(_142);
        drop(_146) -> [return: bb69, unwind: bb107];
    }

    bb69: {
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = const "protected maker mode config reduce only";
        _161 = &(*_162);
        _160 = solana_program::log::sol_log(move _161) -> [return: bb70, unwind: bb107];
    }

    bb70: {
        StorageDead(_161);
        StorageDead(_162);
        StorageDead(_160);
        StorageLive(_163);
        _163 = _140;
        _134 = std::result::Result::<(), error::ErrorCode>::Err(move _163);
        StorageDead(_163);
        StorageDead(_140);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_135);
        _133 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _134) -> [return: bb72, unwind: bb107];
    }

    bb72: {
        StorageDead(_134);
        _164 = discriminant(_133);
        switchInt(move _164) -> [0: bb73, 1: bb74, otherwise: bb5];
    }

    bb73: {
        StorageLive(_168);
        _168 = ((_133 as Continue).0: ());
        _132 = _168;
        StorageDead(_168);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_119;
        _173 = <RefMut<'_, ProtectedMakerModeConfig> as Deref>::deref(move _174) -> [return: bb76, unwind: bb107];
    }

    bb74: {
        StorageLive(_165);
        _165 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_167);
        _167 = _165;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _167) -> [return: bb75, unwind: bb107];
    }

    bb75: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb100;
    }

    bb76: {
        StorageDead(_174);
        _172 = ((*_173).1: u32);
        _171 = <u32 as SafeMath>::safe_add(move _172, const 1_u32) -> [return: bb77, unwind: bb107];
    }

    bb77: {
        StorageDead(_172);
        _170 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _171) -> [return: bb78, unwind: bb107];
    }

    bb78: {
        StorageDead(_171);
        _175 = discriminant(_170);
        switchInt(move _175) -> [0: bb79, 1: bb80, otherwise: bb5];
    }

    bb79: {
        StorageLive(_179);
        _179 = ((_170 as Continue).0: u32);
        _169 = _179;
        StorageDead(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &mut _119;
        _180 = <RefMut<'_, ProtectedMakerModeConfig> as DerefMut>::deref_mut(move _181) -> [return: bb82, unwind: bb107];
    }

    bb80: {
        StorageLive(_176);
        _176 = ((_170 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb81, unwind: bb107];
    }

    bb81: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_169);
        StorageDead(_173);
        StorageDead(_170);
        goto -> bb100;
    }

    bb82: {
        StorageDead(_181);
        ((*_180).1: u32) = move _169;
        StorageDead(_169);
        StorageDead(_180);
        StorageDead(_173);
        StorageDead(_170);
        _130 = const ();
        goto -> bb91;
    }

    bb83: {
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_119;
        _186 = <RefMut<'_, ProtectedMakerModeConfig> as Deref>::deref(move _187) -> [return: bb84, unwind: bb107];
    }

    bb84: {
        StorageDead(_187);
        _185 = ((*_186).1: u32);
        _184 = <u32 as SafeMath>::safe_sub(move _185, const 1_u32) -> [return: bb85, unwind: bb107];
    }

    bb85: {
        StorageDead(_185);
        _183 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _184) -> [return: bb86, unwind: bb107];
    }

    bb86: {
        StorageDead(_184);
        _188 = discriminant(_183);
        switchInt(move _188) -> [0: bb87, 1: bb88, otherwise: bb5];
    }

    bb87: {
        StorageLive(_192);
        _192 = ((_183 as Continue).0: u32);
        _182 = _192;
        StorageDead(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &mut _119;
        _193 = <RefMut<'_, ProtectedMakerModeConfig> as DerefMut>::deref_mut(move _194) -> [return: bb90, unwind: bb107];
    }

    bb88: {
        StorageLive(_189);
        _189 = ((_183 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_191);
        _191 = _189;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _191) -> [return: bb89, unwind: bb107];
    }

    bb89: {
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_182);
        StorageDead(_186);
        StorageDead(_183);
        goto -> bb100;
    }

    bb90: {
        StorageDead(_194);
        ((*_193).1: u32) = move _182;
        StorageDead(_182);
        StorageDead(_193);
        StorageDead(_186);
        StorageDead(_183);
        _130 = const ();
        goto -> bb91;
    }

    bb91: {
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &_119;
        _199 = <RefMut<'_, ProtectedMakerModeConfig> as Deref>::deref(move _200) -> [return: bb92, unwind: bb107];
    }

    bb92: {
        _198 = &(*_199);
        StorageDead(_200);
        _197 = ProtectedMakerModeConfig::validate(move _198) -> [return: bb93, unwind: bb107];
    }

    bb93: {
        StorageDead(_198);
        _196 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _197) -> [return: bb94, unwind: bb107];
    }

    bb94: {
        StorageDead(_197);
        _201 = discriminant(_196);
        switchInt(move _201) -> [0: bb95, 1: bb96, otherwise: bb5];
    }

    bb95: {
        StorageLive(_205);
        _205 = ((_196 as Continue).0: ());
        _195 = _205;
        StorageDead(_205);
        StorageDead(_199);
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_206);
        _206 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _206);
        StorageDead(_206);
        drop(_119) -> [return: bb98, unwind: bb111];
    }

    bb96: {
        StorageLive(_202);
        _202 = ((_196 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_204);
        _204 = _202;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _204) -> [return: bb97, unwind: bb107];
    }

    bb97: {
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_199);
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb101;
    }

    bb98: {
        StorageDead(_119);
        drop(_4) -> [return: bb99, unwind: bb112];
    }

    bb99: {
        StorageDead(_4);
        goto -> bb105;
    }

    bb100: {
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb101;
    }

    bb101: {
        drop(_119) -> [return: bb102, unwind: bb111];
    }

    bb102: {
        StorageDead(_119);
        goto -> bb103;
    }

    bb103: {
        drop(_4) -> [return: bb104, unwind: bb112];
    }

    bb104: {
        StorageDead(_4);
        goto -> bb105;
    }

    bb105: {
        return;
    }

    bb106 (cleanup): {
        drop(_146) -> [return: bb107, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_119) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_84) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_65) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_29) -> [return: bb111, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_4) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        resume;
    }

    bb113 (cleanup): {
        _221 = discriminant(_120);
        goto -> bb111;
    }

    bb114 (cleanup): {
        _222 = discriminant(_5);
        goto -> bb112;
    }
}
