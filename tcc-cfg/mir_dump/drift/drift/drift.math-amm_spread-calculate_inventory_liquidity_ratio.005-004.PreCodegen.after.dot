digraph Mir_0_1868 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_inventory_liquidity_ratio(_1: i128, _2: u128, _3: u128, _4: u128) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let _5: i128;<br align="left"/>let _6: i128;<br align="left"/>let mut _7: (i128, i128);<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (i128, i128)&gt;;<br align="left"/>let mut _9: std::result::Result&lt;(i128, i128), error::ErrorCode&gt;;<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: (i128, i128);<br align="left"/>let _18: i128;<br align="left"/>let mut _19: i128;<br align="left"/>let mut _20: i128;<br align="left"/>let mut _21: i128;<br align="left"/>let _22: i128;<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: i128;<br align="left"/>let mut _25: i128;<br align="left"/>let mut _26: i128;<br align="left"/>let mut _27: i128;<br align="left"/>let mut _28: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _29: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _30: i128;<br align="left"/>let mut _31: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _32: i128;<br align="left"/>let mut _33: i128;<br align="left"/>let mut _34: i128;<br align="left"/>let mut _35: i128;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: i128;<br align="left"/>let mut _41: i128;<br align="left"/>debug base_asset_amount_with_amm =&gt; _1;<br align="left"/>debug base_asset_reserve =&gt; _2;<br align="left"/>debug min_base_asset_reserve =&gt; _3;<br align="left"/>debug max_base_asset_reserve =&gt; _4;<br align="left"/>debug max_bids =&gt; _5;<br align="left"/>debug max_asks =&gt; _6;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug min_side_liquidity =&gt; _18;<br align="left"/>debug amm_inventory_pct =&gt; _22;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>>;
    bb0__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = _2<br/>StorageLive(_11)<br/>_11 = _3<br/>StorageLive(_12)<br/>_12 = _4<br/></td></tr><tr><td align="left">_9 = _calculate_market_open_bids_asks(move _10, move _11, move _12)</td></tr></table>>];
    bb1__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;(i128, i128), error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb2__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_13 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb3__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_8 as Continue).0: (i128, i128))<br/>_7 = _17<br/>StorageDead(_17)<br/>StorageLive(_5)<br/>_5 = (_7.0: i128)<br/>StorageLive(_6)<br/>_6 = (_7.1: i128)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = _5<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _6<br/></td></tr><tr><td align="left">_20 = core::num::&lt;impl i128&gt;::abs(move _21)</td></tr></table>>];
    bb4__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb6__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_18 = &lt;i128 as Ord&gt;::min(move _19, move _20)</td></tr></table>>];
    bb8__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = _1<br/></td></tr><tr><td align="left">_24 = core::num::&lt;impl i128&gt;::abs(move _25)</td></tr></table>>];
    bb9__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageLive(_26)<br/>_26 = _18<br/>_23 = Lt(move _24, move _26)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb10__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _1<br/></td></tr><tr><td align="left">_32 = core::num::&lt;impl i128&gt;::abs(move _33)</td></tr></table>>];
    bb11__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">_31 = &lt;i128 as SafeMath&gt;::safe_mul(move _32, const _)</td></tr></table>>];
    bb12__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = std::result::Result::&lt;i128, error::ErrorCode&gt;::unwrap_or(move _31, const _)</td></tr></table>>];
    bb13__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = _18<br/></td></tr><tr><td align="left">_34 = &lt;i128 as Ord&gt;::max(move _35, const 1_i128)</td></tr></table>>];
    bb14__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/></td></tr><tr><td align="left">_29 = &lt;i128 as SafeMath&gt;::safe_div(move _30, move _34)</td></tr></table>>];
    bb15__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_28 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _29)</td></tr></table>>];
    bb16__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>_36 = discriminant(_28)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb17__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_28 as Continue).0: i128)<br/>_27 = _40<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">_22 = &lt;i128 as Ord&gt;::min(move _27, const _)</td></tr></table>>];
    bb18__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_28 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb19__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/>StorageDead(_27)<br/>StorageDead(_28)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_18)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>_22 = const _<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageLive(_41)<br/>_41 = _22<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Ok(move _41)<br/>StorageDead(_41)<br/>StorageDead(_22)<br/>StorageDead(_18)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_1868 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1868 -> bb1__0_1868 [label="return"];
    bb1__0_1868 -> bb2__0_1868 [label="return"];
    bb2__0_1868 -> bb3__0_1868 [label="0"];
    bb2__0_1868 -> bb5__0_1868 [label="1"];
    bb2__0_1868 -> bb4__0_1868 [label="otherwise"];
    bb3__0_1868 -> bb7__0_1868 [label="return"];
    bb5__0_1868 -> bb6__0_1868 [label="return"];
    bb6__0_1868 -> bb23__0_1868 [label=""];
    bb7__0_1868 -> bb8__0_1868 [label="return"];
    bb8__0_1868 -> bb9__0_1868 [label="return"];
    bb9__0_1868 -> bb21__0_1868 [label="0"];
    bb9__0_1868 -> bb10__0_1868 [label="otherwise"];
    bb10__0_1868 -> bb11__0_1868 [label="return"];
    bb11__0_1868 -> bb12__0_1868 [label="return"];
    bb12__0_1868 -> bb13__0_1868 [label="return"];
    bb13__0_1868 -> bb14__0_1868 [label="return"];
    bb14__0_1868 -> bb15__0_1868 [label="return"];
    bb15__0_1868 -> bb16__0_1868 [label="return"];
    bb16__0_1868 -> bb17__0_1868 [label="0"];
    bb16__0_1868 -> bb18__0_1868 [label="1"];
    bb16__0_1868 -> bb4__0_1868 [label="otherwise"];
    bb17__0_1868 -> bb20__0_1868 [label="return"];
    bb18__0_1868 -> bb19__0_1868 [label="return"];
    bb19__0_1868 -> bb23__0_1868 [label=""];
    bb20__0_1868 -> bb22__0_1868 [label=""];
    bb21__0_1868 -> bb22__0_1868 [label=""];
    bb22__0_1868 -> bb23__0_1868 [label=""];
}
