// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_filler_volume` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_filler_volume(_1: &mut UserStats, _2: u64, _3: i64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug quote_asset_amount => _2;
    debug now => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: i64;
    let mut _5: i64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _7: std::result::Result<i64, error::ErrorCode>;
    let mut _8: i64;
    let mut _9: i64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i64;
    let mut _15: u64;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _17: std::result::Result<u64, error::ErrorCode>;
    let mut _18: u64;
    let mut _19: u64;
    let mut _20: i64;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: i64;
    let mut _27: ();
    scope 1 {
        debug since_last => _4;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: u64;
        scope 6 {
            debug residual => _22;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _25;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        _9 = ((*_1).9: i64);
        _7 = <i64 as SafeMath>::safe_sub(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: i64);
        _5 = _14;
        StorageDead(_14);
        _4 = std::cmp::max::<i64>(const 1_i64, move _5) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_6);
        goto -> bb13;
    }

    bb7: {
        StorageDead(_5);
        StorageDead(_6);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).6: u64);
        StorageLive(_19);
        _19 = _2;
        StorageLive(_20);
        _20 = _4;
        _17 = calculate_rolling_sum(move _18, move _19, move _20, const _) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_25);
        _25 = ((_16 as Continue).0: u64);
        _15 = _25;
        StorageDead(_25);
        ((*_1).6: u64) = move _15;
        StorageDead(_15);
        StorageDead(_16);
        StorageLive(_26);
        _26 = _3;
        ((*_1).9: i64) = move _26;
        StorageDead(_26);
        StorageLive(_27);
        _27 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _27);
        StorageDead(_27);
        StorageDead(_4);
        goto -> bb14;
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_15);
        StorageDead(_16);
        goto -> bb13;
    }

    bb13: {
        StorageDead(_4);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}
