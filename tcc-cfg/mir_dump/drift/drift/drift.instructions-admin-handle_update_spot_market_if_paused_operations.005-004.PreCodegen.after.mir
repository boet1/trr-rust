// MIR for `admin::handle_update_spot_market_if_paused_operations` after PreCodegen

fn admin::handle_update_spot_market_if_paused_operations(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug paused_operations => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _14: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _19: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _25: u8;
    let mut _26: &mut state::spot_market::SpotMarket;
    let mut _27: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 1];
    let _38: &[&str; 1];
    let _39: [&str; 1];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &u16;
    let _46: &u16;
    let _47: &state::spot_market::SpotMarket;
    let mut _48: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _49: ();
    let mut _50: u8;
    let mut _51: ();
    let mut _53: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _54: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _13;
        let _34: std::string::String;
        let mut _52: &[&str; 1];
        scope 10 {
            debug res => _34;
        }
    }
    scope 6 {
        debug residual => _21;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _24;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _53 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _7 = &((*_53).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _6 = &(*_7);
        _5 = constraints::spot_market_valid(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb26];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _55 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _54 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _18 = &((*_54).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb28];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _61 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb23;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _16 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _17, move _19) -> [return: bb8, unwind: bb26];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_17);
        _15 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_24);
        _24 = move ((_15 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _14 = move _24;
        StorageDead(_24);
        _13 = &mut _14;
        _59 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_25);
        _25 = _2;
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut (*_13);
        _26 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _27) -> [return: bb13, unwind: bb25];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind: bb27];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        _57 = discriminant(_15);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb23;
    }

    bb13: {
        StorageDead(_27);
        ((*_26).48: u8) = move _25;
        StorageDead(_25);
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _52 = const _;
        _38 = &(*_52);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_13);
        _47 = <RefMut<'_, SpotMarket> as Deref>::deref(move _48) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        StorageDead(_48);
        _46 = &((*_47).42: u16);
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _45) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb16, unwind: bb25];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb17, unwind: bb25];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb19, unwind: bb24];
    }

    bb19: {
        StorageDead(_29);
        drop(_33) -> [return: bb20, unwind: bb25];
    }

    bb20: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _2;
        _49 = InsuranceFundOperation::log_all_operations_paused(move _50) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_51);
        _51 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _51);
        StorageDead(_51);
        drop(_14) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb23;
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_33) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_14) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        _63 = discriminant(_15);
        goto -> bb26;
    }

    bb28 (cleanup): {
        _64 = discriminant(_4);
        goto -> bb26;
    }
}
