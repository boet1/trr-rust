digraph Mir_0_3989 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SignedMsgWsDelegates::space(_1: &amp;ReErased state::signed_msg_user::SignedMsgWsDelegates, _2: bool) -&gt; usize<br align="left"/>let _3: usize;<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: usize;<br align="left"/>let mut _6: &amp;ReErased std::vec::Vec&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _7: (usize, bool);<br align="left"/>let mut _8: usize;<br align="left"/>let mut _9: &amp;ReErased std::vec::Vec&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _10: (usize, bool);<br align="left"/>let mut _11: usize;<br align="left"/>let mut _12: (usize, bool);<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: (usize, bool);<br align="left"/>let mut _16: (usize, bool);<br align="left"/>debug self =&gt; _1;<br align="left"/>debug add =&gt; _2;<br align="left"/>debug delegate_count =&gt; _3;<br align="left"/>>;
    bb0__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = _2<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;((*_1).0: std::vec::Vec&lt;anchor_lang::prelude::Pubkey&gt;)<br/></td></tr><tr><td align="left">_5 = Vec::&lt;anchor_lang::prelude::Pubkey&gt;::len(move _6)</td></tr></table>>];
    bb2__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_7 = CheckedAdd(_5, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_7.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _5, const 1_usize)</td></tr></table>>];
    bb3__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_3 = move (_7.0: usize)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = &amp;((*_1).0: std::vec::Vec&lt;anchor_lang::prelude::Pubkey&gt;)<br/></td></tr><tr><td align="left">_8 = Vec::&lt;anchor_lang::prelude::Pubkey&gt;::len(move _9)</td></tr></table>>];
    bb5__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_10 = CheckedSub(_8, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_10.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _8, const 1_usize)</td></tr></table>>];
    bb6__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_3 = move (_10.0: usize)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_11)<br/>_12 = CheckedAdd(const 8_usize, const 4_usize)<br/></td></tr><tr><td align="left">assert(!move (_12.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const 8_usize, const 4_usize)</td></tr></table>>];
    bb8__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_11 = move (_12.0: usize)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = _3<br/>_15 = CheckedMul(_14, const 32_usize)<br/></td></tr><tr><td align="left">assert(!move (_15.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _14, const 32_usize)</td></tr></table>>];
    bb9__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_13 = move (_15.0: usize)<br/>StorageDead(_14)<br/>_16 = CheckedAdd(_11, _13)<br/></td></tr><tr><td align="left">assert(!move (_16.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _11, move _13)</td></tr></table>>];
    bb10__0_3989 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_0 = move (_16.0: usize)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3989 -> bb4__0_3989 [label="0"];
    bb0__0_3989 -> bb1__0_3989 [label="otherwise"];
    bb1__0_3989 -> bb2__0_3989 [label="return"];
    bb2__0_3989 -> bb3__0_3989 [label="success"];
    bb3__0_3989 -> bb7__0_3989 [label=""];
    bb4__0_3989 -> bb5__0_3989 [label="return"];
    bb5__0_3989 -> bb6__0_3989 [label="success"];
    bb6__0_3989 -> bb7__0_3989 [label=""];
    bb7__0_3989 -> bb8__0_3989 [label="success"];
    bb8__0_3989 -> bb9__0_3989 [label="success"];
    bb9__0_3989 -> bb10__0_3989 [label="success"];
}
