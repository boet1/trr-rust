digraph Mir_0_565 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn fulfill_spot_order_with_external_market(_1: &amp;ReErased mut state::spot_market::SpotMarket, _2: &amp;ReErased mut state::spot_market::SpotMarket, _3: &amp;ReErased mut state::user::User, _4: &amp;ReErased mut state::user::UserStats, _5: usize, _6: &amp;ReErased anchor_lang::prelude::Pubkey, _7: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, _8: std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;, _9: &amp;ReErased anchor_lang::prelude::Pubkey, _10: i64, _11: u64, _12: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _13: &amp;ReErased state::state::FeeStructure, _14: &amp;ReErased mut dyn [Binder(Trait(state::spot_fulfillment_params::SpotFulfillmentParams), [])] + ReErased) -&gt; std::result::Result&lt;(u64, u64), error::ErrorCode&gt;<br align="left"/>let _15: i64;<br align="left"/>let mut _16: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::oracle::OraclePriceData&gt;;<br align="left"/>let mut _18: std::result::Result&lt;&amp;ReErased state::oracle::OraclePriceData, error::ErrorCode&gt;;<br align="left"/>let mut _19: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _20: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _21: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _22: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _23: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _28: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _29: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _30: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::option::Option&lt;u64&gt;&gt;;<br align="left"/>let mut _31: std::result::Result&lt;std::option::Option&lt;u64&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _32: &amp;ReErased state::user::Order;<br align="left"/>let _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: bool;<br align="left"/>let mut _36: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _37: i64;<br align="left"/>let mut _38: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: u64;<br align="left"/>let mut _41: std::option::Option&lt;state::protected_maker_mode_config::ProtectedMakerParams&gt;;<br align="left"/>let mut _42: isize;<br align="left"/>let _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _44: !;<br align="left"/>let mut _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _46: std::option::Option&lt;u64&gt;;<br align="left"/>let _47: i128;<br align="left"/>let mut _48: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _49: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _50: &amp;ReErased state::user::SpotPosition;<br align="left"/>let _51: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _52: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased mut state::user::SpotPosition&gt;;<br align="left"/>let mut _53: std::result::Result&lt;&amp;ReErased mut state::user::SpotPosition, error::ErrorCode&gt;;<br align="left"/>let mut _54: &amp;ReErased mut state::user::User;<br align="left"/>let mut _55: u16;<br align="left"/>let mut _56: isize;<br align="left"/>let _57: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _58: !;<br align="left"/>let mut _59: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _60: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _61: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _66: i128;<br align="left"/>let _67: u64;<br align="left"/>let mut _68: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _69: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _70: &amp;ReErased state::user::Order;<br align="left"/>let _71: usize;<br align="left"/>let mut _72: usize;<br align="left"/>let mut _73: bool;<br align="left"/>let mut _74: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _75: i64;<br align="left"/>let mut _76: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _77: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _78: i128;<br align="left"/>let mut _79: isize;<br align="left"/>let _80: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _81: !;<br align="left"/>let mut _82: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _83: i64;<br align="left"/>let mut _84: u64;<br align="left"/>let mut _85: isize;<br align="left"/>let _86: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _87: !;<br align="left"/>let mut _88: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _89: u64;<br align="left"/>let _90: controller::position::PositionDirection;<br align="left"/>let _91: usize;<br align="left"/>let mut _92: usize;<br align="left"/>let mut _93: bool;<br align="left"/>let _94: u64;<br align="left"/>let _95: usize;<br align="left"/>let mut _96: usize;<br align="left"/>let mut _97: bool;<br align="left"/>let _98: std::option::Option&lt;u64&gt;;<br align="left"/>let _99: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _100: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _101: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;)&gt;;<br align="left"/>let mut _102: std::result::Result&lt;(std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;;<br align="left"/>let mut _103: &amp;ReErased state::user::User;<br align="left"/>let mut _104: usize;<br align="left"/>let mut _105: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _106: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _107: isize;<br align="left"/>let _108: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _109: !;<br align="left"/>let mut _110: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _111: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let _112: u64;<br align="left"/>let mut _113: u64;<br align="left"/>let mut _114: u64;<br align="left"/>let mut _115: std::option::Option&lt;u64&gt;;<br align="left"/>let _116: std::option::Option&lt;u64&gt;;<br align="left"/>let _117: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _118: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let mut _119: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;)&gt;;<br align="left"/>let mut _120: std::result::Result&lt;(std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;), error::ErrorCode&gt;;<br align="left"/>let mut _121: &amp;ReErased dyn [Binder(Trait(state::spot_fulfillment_params::SpotFulfillmentParams), [])] + ReErased;<br align="left"/>let mut _122: isize;<br align="left"/>let _123: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _124: !;<br align="left"/>let mut _125: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _126: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;);<br align="left"/>let _127: ();<br align="left"/>let mut _128: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _129: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _130: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _131: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _132: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _133: i64;<br align="left"/>let mut _134: isize;<br align="left"/>let _135: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _136: !;<br align="left"/>let mut _137: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _138: ();<br align="left"/>let _139: u64;<br align="left"/>let mut _140: isize;<br align="left"/>let _141: u64;<br align="left"/>let mut _142: isize;<br align="left"/>let mut _143: isize;<br align="left"/>let _144: u64;<br align="left"/>let mut _145: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _146: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _147: u64;<br align="left"/>let mut _148: u64;<br align="left"/>let mut _149: u64;<br align="left"/>let mut _150: bool;<br align="left"/>let mut _151: isize;<br align="left"/>let _152: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _153: !;<br align="left"/>let mut _154: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _155: u64;<br align="left"/>let mut _156: !;<br align="left"/>let _157: ();<br align="left"/>let mut _158: &amp;ReErased str;<br align="left"/>let _159: &amp;ReErased str;<br align="left"/>let mut _160: (u64, u64);<br align="left"/>let mut _161: isize;<br align="left"/>let _162: u64;<br align="left"/>let mut _163: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _164: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _165: u64;<br align="left"/>let mut _166: u64;<br align="left"/>let mut _167: u64;<br align="left"/>let mut _168: bool;<br align="left"/>let mut _169: isize;<br align="left"/>let _170: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _171: !;<br align="left"/>let mut _172: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _173: u64;<br align="left"/>let mut _174: !;<br align="left"/>let _175: ();<br align="left"/>let mut _176: &amp;ReErased str;<br align="left"/>let _177: &amp;ReErased str;<br align="left"/>let mut _178: (u64, u64);<br align="left"/>let _179: u64;<br align="left"/>let _180: state::spot_market::SpotBalanceType;<br align="left"/>let _181: u64;<br align="left"/>let _182: state::spot_market::SpotBalanceType;<br align="left"/>let _183: u64;<br align="left"/>let _184: u64;<br align="left"/>let _185: u64;<br align="left"/>let mut _186: state::spot_fulfillment_params::ExternalSpotFill;<br align="left"/>let mut _187: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::spot_fulfillment_params::ExternalSpotFill&gt;;<br align="left"/>let mut _188: std::result::Result&lt;state::spot_fulfillment_params::ExternalSpotFill, error::ErrorCode&gt;;<br align="left"/>let mut _189: &amp;ReErased mut dyn [Binder(Trait(state::spot_fulfillment_params::SpotFulfillmentParams), [])] + ReErased;<br align="left"/>let mut _190: controller::position::PositionDirection;<br align="left"/>let mut _191: u64;<br align="left"/>let mut _192: u64;<br align="left"/>let mut _193: u64;<br align="left"/>let mut _194: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _195: isize;<br align="left"/>let _196: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _197: !;<br align="left"/>let mut _198: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _199: state::spot_fulfillment_params::ExternalSpotFill;<br align="left"/>let _200: ();<br align="left"/>let mut _201: bool;<br align="left"/>let mut _202: u64;<br align="left"/>let mut _203: !;<br align="left"/>let mut _204: (u64, u64);<br align="left"/>let _205: ();<br align="left"/>let mut _206: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _207: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _208: u128;<br align="left"/>let mut _209: u64;<br align="left"/>let mut _210: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _211: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _212: state::spot_market::SpotBalanceType;<br align="left"/>let mut _213: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _214: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _215: &amp;ReErased mut state::perp_market::PoolBalance;<br align="left"/>let mut _216: &amp;ReErased mut state::perp_market::PoolBalance;<br align="left"/>let mut _217: isize;<br align="left"/>let _218: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _219: !;<br align="left"/>let mut _220: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _221: ();<br align="left"/>let _222: ();<br align="left"/>let mut _223: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _224: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _225: u64;<br align="left"/>let mut _226: u64;<br align="left"/>let mut _227: u64;<br align="left"/>let mut _228: state::spot_market::SpotMarket;<br align="left"/>let mut _229: controller::position::PositionDirection;<br align="left"/>let mut _230: u64;<br align="left"/>let mut _231: isize;<br align="left"/>let _232: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _233: !;<br align="left"/>let mut _234: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _235: ();<br align="left"/>let _236: u128;<br align="left"/>let mut _237: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _238: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _239: u128;<br align="left"/>let mut _240: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _241: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _242: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _243: state::spot_market::SpotBalanceType;<br align="left"/>let mut _244: isize;<br align="left"/>let _245: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _246: !;<br align="left"/>let mut _247: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _248: u128;<br align="left"/>let _249: u64;<br align="left"/>let _250: u64;<br align="left"/>let _251: i64;<br align="left"/>let _252: u64;<br align="left"/>let mut _253: math::fees::ExternalFillFees;<br align="left"/>let mut _254: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::fees::ExternalFillFees&gt;;<br align="left"/>let mut _255: std::result::Result&lt;math::fees::ExternalFillFees, error::ErrorCode&gt;;<br align="left"/>let mut _256: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _257: u64;<br align="left"/>let mut _258: &amp;ReErased state::state::FeeStructure;<br align="left"/>let mut _259: u64;<br align="left"/>let mut _260: u64;<br align="left"/>let mut _261: bool;<br align="left"/>let mut _262: &amp;ReErased std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _263: u64;<br align="left"/>let mut _264: u64;<br align="left"/>let mut _265: u64;<br align="left"/>let mut _266: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _267: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _268: u128;<br align="left"/>let mut _269: isize;<br align="left"/>let _270: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _271: !;<br align="left"/>let mut _272: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _273: u64;<br align="left"/>let mut _274: i16;<br align="left"/>let mut _275: isize;<br align="left"/>let _276: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _277: !;<br align="left"/>let mut _278: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _279: math::fees::ExternalFillFees;<br align="left"/>let _280: u64;<br align="left"/>let mut _281: isize;<br align="left"/>let mut _282: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _283: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _284: u64;<br align="left"/>let mut _285: u64;<br align="left"/>let mut _286: isize;<br align="left"/>let _287: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _288: !;<br align="left"/>let mut _289: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _290: u64;<br align="left"/>let mut _291: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _292: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _293: u64;<br align="left"/>let mut _294: u64;<br align="left"/>let mut _295: isize;<br align="left"/>let _296: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _297: !;<br align="left"/>let mut _298: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _299: u64;<br align="left"/>let _300: ();<br align="left"/>let mut _301: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _302: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _303: bool;<br align="left"/>let mut _304: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _305: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _306: state::spot_market::SpotBalanceType;<br align="left"/>let mut _307: &amp;ReErased state::user::Order;<br align="left"/>let _308: usize;<br align="left"/>let mut _309: usize;<br align="left"/>let mut _310: bool;<br align="left"/>let mut _311: state::user::AssetType;<br align="left"/>let mut _312: ();<br align="left"/>let _313: error::ErrorCode;<br align="left"/>let _314: ();<br align="left"/>let mut _315: &amp;ReErased str;<br align="left"/>let _316: &amp;ReErased str;<br align="left"/>let mut _317: &amp;ReErased std::string::String;<br align="left"/>let _318: &amp;ReErased std::string::String;<br align="left"/>let _319: std::string::String;<br align="left"/>let _320: std::string::String;<br align="left"/>let mut _321: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _322: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _323: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _324: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _325: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _326: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _327: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _328: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _329: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _330: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _331: &amp;ReErased error::ErrorCode;<br align="left"/>let _332: &amp;ReErased error::ErrorCode;<br align="left"/>let _333: ();<br align="left"/>let mut _334: &amp;ReErased str;<br align="left"/>let _335: &amp;ReErased str;<br align="left"/>let mut _336: error::ErrorCode;<br align="left"/>let mut _337: isize;<br align="left"/>let _338: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _339: !;<br align="left"/>let mut _340: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _341: ();<br align="left"/>let _342: state::spot_market::SpotBalanceType;<br align="left"/>let mut _343: &amp;ReErased state::user::Order;<br align="left"/>let _344: usize;<br align="left"/>let mut _345: usize;<br align="left"/>let mut _346: bool;<br align="left"/>let mut _347: state::user::AssetType;<br align="left"/>let _348: ();<br align="left"/>let mut _349: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _350: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _351: u128;<br align="left"/>let mut _352: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _353: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _354: u64;<br align="left"/>let mut _355: isize;<br align="left"/>let _356: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _357: !;<br align="left"/>let mut _358: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _359: u128;<br align="left"/>let mut _360: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _361: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _362: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _363: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _364: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _365: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased mut state::user::SpotPosition&gt;;<br align="left"/>let mut _366: std::result::Result&lt;&amp;ReErased mut state::user::SpotPosition, error::ErrorCode&gt;;<br align="left"/>let mut _367: &amp;ReErased mut state::user::User;<br align="left"/>let mut _368: u16;<br align="left"/>let mut _369: isize;<br align="left"/>let _370: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _371: !;<br align="left"/>let mut _372: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _373: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _374: bool;<br align="left"/>let mut _375: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _376: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _377: state::spot_market::SpotBalanceType;<br align="left"/>let mut _378: std::option::Option&lt;u128&gt;;<br align="left"/>let mut _379: isize;<br align="left"/>let _380: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _381: !;<br align="left"/>let mut _382: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _383: ();<br align="left"/>let _384: ();<br align="left"/>let mut _385: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _386: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _387: bool;<br align="left"/>let mut _388: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _389: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _390: state::spot_market::SpotBalanceType;<br align="left"/>let mut _391: &amp;ReErased state::user::Order;<br align="left"/>let _392: usize;<br align="left"/>let mut _393: usize;<br align="left"/>let mut _394: bool;<br align="left"/>let mut _395: state::user::AssetType;<br align="left"/>let mut _396: ();<br align="left"/>let _397: error::ErrorCode;<br align="left"/>let _398: ();<br align="left"/>let mut _399: &amp;ReErased str;<br align="left"/>let _400: &amp;ReErased str;<br align="left"/>let mut _401: &amp;ReErased std::string::String;<br align="left"/>let _402: &amp;ReErased std::string::String;<br align="left"/>let _403: std::string::String;<br align="left"/>let _404: std::string::String;<br align="left"/>let mut _405: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _406: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _407: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _408: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _409: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _410: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _411: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _412: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _413: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _414: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _415: &amp;ReErased error::ErrorCode;<br align="left"/>let _416: &amp;ReErased error::ErrorCode;<br align="left"/>let _417: ();<br align="left"/>let mut _418: &amp;ReErased str;<br align="left"/>let _419: &amp;ReErased str;<br align="left"/>let mut _420: error::ErrorCode;<br align="left"/>let mut _421: isize;<br align="left"/>let _422: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _423: !;<br align="left"/>let mut _424: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _425: ();<br align="left"/>let _426: state::spot_market::SpotBalanceType;<br align="left"/>let mut _427: &amp;ReErased state::user::Order;<br align="left"/>let _428: usize;<br align="left"/>let mut _429: usize;<br align="left"/>let mut _430: bool;<br align="left"/>let mut _431: state::user::AssetType;<br align="left"/>let _432: ();<br align="left"/>let mut _433: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _434: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _435: u128;<br align="left"/>let mut _436: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _437: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _438: u64;<br align="left"/>let mut _439: isize;<br align="left"/>let _440: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _441: !;<br align="left"/>let mut _442: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _443: u128;<br align="left"/>let mut _444: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _445: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _446: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _447: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _448: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _449: &amp;ReErased mut state::user::User;<br align="left"/>let mut _450: bool;<br align="left"/>let mut _451: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _452: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _453: state::spot_market::SpotBalanceType;<br align="left"/>let mut _454: std::option::Option&lt;u128&gt;;<br align="left"/>let mut _455: u128;<br align="left"/>let mut _456: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _457: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _458: u64;<br align="left"/>let mut _459: isize;<br align="left"/>let _460: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _461: !;<br align="left"/>let mut _462: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _463: u128;<br align="left"/>let mut _464: isize;<br align="left"/>let _465: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _466: !;<br align="left"/>let mut _467: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _468: ();<br align="left"/>let _469: ();<br align="left"/>let mut _470: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _471: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _472: &amp;ReErased mut state::user::User;<br align="left"/>let mut _473: i64;<br align="left"/>let mut _474: i64;<br align="left"/>let mut _475: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _476: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _477: u64;<br align="left"/>let mut _478: isize;<br align="left"/>let _479: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _480: !;<br align="left"/>let mut _481: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _482: i64;<br align="left"/>let mut _483: bool;<br align="left"/>let mut _484: isize;<br align="left"/>let _485: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _486: !;<br align="left"/>let mut _487: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _488: ();<br align="left"/>let _489: ();<br align="left"/>let mut _490: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _491: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _492: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _493: u8;<br align="left"/>let mut _494: u64;<br align="left"/>let mut _495: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _496: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _497: u64;<br align="left"/>let mut _498: isize;<br align="left"/>let _499: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _500: !;<br align="left"/>let mut _501: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _502: u64;<br align="left"/>let mut _503: i64;<br align="left"/>let mut _504: isize;<br align="left"/>let _505: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _506: !;<br align="left"/>let mut _507: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _508: ();<br align="left"/>let _509: ();<br align="left"/>let mut _510: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _511: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _512: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _513: u64;<br align="left"/>let mut _514: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _515: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _516: u64;<br align="left"/>let mut _517: isize;<br align="left"/>let _518: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _519: !;<br align="left"/>let mut _520: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _521: u64;<br align="left"/>let mut _522: isize;<br align="left"/>let _523: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _524: !;<br align="left"/>let mut _525: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _526: ();<br align="left"/>let _527: ();<br align="left"/>let mut _528: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _529: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _530: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _531: &amp;ReErased mut state::user::Order;<br align="left"/>let _532: usize;<br align="left"/>let mut _533: usize;<br align="left"/>let mut _534: bool;<br align="left"/>let mut _535: u64;<br align="left"/>let mut _536: u64;<br align="left"/>let mut _537: isize;<br align="left"/>let _538: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _539: !;<br align="left"/>let mut _540: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _541: ();<br align="left"/>let _542: controller::position::PositionDirection;<br align="left"/>let _543: usize;<br align="left"/>let mut _544: usize;<br align="left"/>let mut _545: bool;<br align="left"/>let _546: bool;<br align="left"/>let mut _547: &amp;ReErased state::user::Order;<br align="left"/>let _548: usize;<br align="left"/>let mut _549: usize;<br align="left"/>let mut _550: bool;<br align="left"/>let _551: ();<br align="left"/>let mut _552: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _553: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _554: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _555: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _556: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased mut state::user::SpotPosition&gt;;<br align="left"/>let mut _557: std::result::Result&lt;&amp;ReErased mut state::user::SpotPosition, error::ErrorCode&gt;;<br align="left"/>let mut _558: &amp;ReErased mut state::user::User;<br align="left"/>let mut _559: u16;<br align="left"/>let mut _560: isize;<br align="left"/>let _561: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _562: !;<br align="left"/>let mut _563: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _564: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _565: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _566: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _567: u64;<br align="left"/>let mut _568: bool;<br align="left"/>let mut _569: isize;<br align="left"/>let _570: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _571: !;<br align="left"/>let mut _572: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _573: ();<br align="left"/>let _574: ();<br align="left"/>let mut _575: (std::option::Option&lt;&amp;ReErased mut state::user::User&gt;, std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;);<br align="left"/>let mut _576: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _577: std::option::Option&lt;&amp;ReErased mut state::user::UserStats&gt;;<br align="left"/>let mut _578: isize;<br align="left"/>let mut _579: isize;<br align="left"/>let _580: &amp;ReErased mut state::user::User;<br align="left"/>let _581: &amp;ReErased mut state::user::UserStats;<br align="left"/>let _582: ();<br align="left"/>let mut _583: bool;<br align="left"/>let mut _584: u64;<br align="left"/>let _585: ();<br align="left"/>let mut _586: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _587: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _588: u128;<br align="left"/>let mut _589: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _590: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _591: u64;<br align="left"/>let mut _592: isize;<br align="left"/>let _593: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _594: !;<br align="left"/>let mut _595: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _596: u128;<br align="left"/>let mut _597: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _598: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _599: state::spot_market::SpotBalanceType;<br align="left"/>let mut _600: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _601: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _602: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _603: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _604: &amp;ReErased mut state::user::User;<br align="left"/>let mut _605: isize;<br align="left"/>let _606: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _607: !;<br align="left"/>let mut _608: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _609: ();<br align="left"/>let _610: ();<br align="left"/>let mut _611: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _612: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _613: &amp;ReErased mut state::user::User;<br align="left"/>let mut _614: i64;<br align="left"/>let mut _615: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _616: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _617: u64;<br align="left"/>let mut _618: isize;<br align="left"/>let _619: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _620: !;<br align="left"/>let mut _621: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _622: i64;<br align="left"/>let mut _623: isize;<br align="left"/>let _624: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _625: !;<br align="left"/>let mut _626: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _627: ();<br align="left"/>let _628: ();<br align="left"/>let mut _629: &amp;ReErased mut state::user::User;<br align="left"/>let mut _630: u64;<br align="left"/>let _631: ();<br align="left"/>let mut _632: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _633: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _634: &amp;ReErased mut state::user::UserStats;<br align="left"/>let mut _635: u64;<br align="left"/>let mut _636: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _637: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _638: u64;<br align="left"/>let mut _639: isize;<br align="left"/>let _640: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _641: !;<br align="left"/>let mut _642: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _643: u64;<br align="left"/>let mut _644: i64;<br align="left"/>let mut _645: isize;<br align="left"/>let _646: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _647: !;<br align="left"/>let mut _648: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _649: ();<br align="left"/>let _650: ();<br align="left"/>let mut _651: bool;<br align="left"/>let mut _652: i64;<br align="left"/>let _653: ();<br align="left"/>let mut _654: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _655: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _656: u128;<br align="left"/>let mut _657: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _658: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _659: u64;<br align="left"/>let mut _660: i64;<br align="left"/>let mut _661: isize;<br align="left"/>let _662: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _663: !;<br align="left"/>let mut _664: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _665: u128;<br align="left"/>let mut _666: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _667: bool;<br align="left"/>let mut _668: i64;<br align="left"/>let _669: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _670: state::spot_market::SpotBalanceType;<br align="left"/>let _671: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let _672: state::spot_market::SpotBalanceType;<br align="left"/>let mut _673: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _674: &amp;ReErased mut dyn [Binder(Trait(state::spot_market::SpotBalance), [])] + ReErased;<br align="left"/>let mut _675: &amp;ReErased mut state::perp_market::PoolBalance;<br align="left"/>let mut _676: &amp;ReErased mut state::perp_market::PoolBalance;<br align="left"/>let mut _677: isize;<br align="left"/>let _678: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _679: !;<br align="left"/>let mut _680: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _681: ();<br align="left"/>let mut _682: u128;<br align="left"/>let mut _683: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _684: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _685: u128;<br align="left"/>let mut _686: u128;<br align="left"/>let mut _687: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _688: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _689: u64;<br align="left"/>let mut _690: isize;<br align="left"/>let _691: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _692: !;<br align="left"/>let mut _693: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _694: u128;<br align="left"/>let mut _695: isize;<br align="left"/>let _696: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _697: !;<br align="left"/>let mut _698: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _699: u128;<br align="left"/>let _700: u64;<br align="left"/>let _701: u64;<br align="left"/>let mut _702: u64;<br align="left"/>let mut _703: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _704: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _705: u64;<br align="left"/>let mut _706: std::option::Option&lt;u64&gt;;<br align="left"/>let _707: state::events::OrderActionRecord;<br align="left"/>let mut _708: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::events::OrderActionRecord&gt;;<br align="left"/>let mut _709: std::result::Result&lt;state::events::OrderActionRecord, error::ErrorCode&gt;;<br align="left"/>let mut _710: i64;<br align="left"/>let mut _711: state::events::OrderAction;<br align="left"/>let mut _712: state::events::OrderActionExplanation;<br align="left"/>let mut _713: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::events::OrderActionExplanation&gt;;<br align="left"/>let mut _714: std::result::Result&lt;state::events::OrderActionExplanation, error::ErrorCode&gt;;<br align="left"/>let mut _715: &amp;ReErased dyn [Binder(Trait(state::spot_fulfillment_params::SpotFulfillmentParams), [])] + ReErased;<br align="left"/>let mut _716: isize;<br align="left"/>let _717: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _718: !;<br align="left"/>let mut _719: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _720: state::events::OrderActionExplanation;<br align="left"/>let mut _721: u16;<br align="left"/>let _722: usize;<br align="left"/>let mut _723: usize;<br align="left"/>let mut _724: bool;<br align="left"/>let mut _725: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _726: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _727: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _728: u64;<br align="left"/>let mut _729: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _730: u64;<br align="left"/>let mut _731: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _732: u64;<br align="left"/>let mut _733: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _734: u64;<br align="left"/>let mut _735: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _736: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _737: u64;<br align="left"/>let mut _738: isize;<br align="left"/>let _739: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _740: !;<br align="left"/>let mut _741: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _742: u64;<br align="left"/>let mut _743: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _744: u64;<br align="left"/>let mut _745: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _746: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _747: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _748: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _749: u64;<br align="left"/>let mut _750: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _751: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _752: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _753: state::user::Order;<br align="left"/>let _754: usize;<br align="left"/>let mut _755: usize;<br align="left"/>let mut _756: bool;<br align="left"/>let mut _757: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _758: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _759: i64;<br align="left"/>let mut _760: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _761: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _762: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _763: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _764: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _765: isize;<br align="left"/>let _766: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _767: !;<br align="left"/>let mut _768: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _769: state::events::OrderActionRecord;<br align="left"/>let _770: ();<br align="left"/>let mut _771: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _772: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _773: state::events::OrderActionRecord;<br align="left"/>let mut _774: isize;<br align="left"/>let _775: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _776: !;<br align="left"/>let mut _777: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _778: ();<br align="left"/>let _779: ();<br align="left"/>let mut _780: bool;<br align="left"/>let mut _781: u64;<br align="left"/>let mut _782: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _783: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _784: &amp;ReErased state::user::Order;<br align="left"/>let _785: usize;<br align="left"/>let mut _786: usize;<br align="left"/>let mut _787: bool;<br align="left"/>let mut _788: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _789: isize;<br align="left"/>let _790: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _791: !;<br align="left"/>let mut _792: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _793: u64;<br align="left"/>let _794: ();<br align="left"/>let mut _795: &amp;ReErased mut state::user::User;<br align="left"/>let mut _796: bool;<br align="left"/>let mut _797: &amp;ReErased state::user::Order;<br align="left"/>let _798: usize;<br align="left"/>let mut _799: usize;<br align="left"/>let mut _800: bool;<br align="left"/>let mut _801: state::user::OrderStatus;<br align="left"/>let _802: usize;<br align="left"/>let mut _803: usize;<br align="left"/>let mut _804: bool;<br align="left"/>let mut _805: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _806: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased mut state::user::SpotPosition&gt;;<br align="left"/>let mut _807: std::result::Result&lt;&amp;ReErased mut state::user::SpotPosition, error::ErrorCode&gt;;<br align="left"/>let mut _808: &amp;ReErased mut state::user::User;<br align="left"/>let mut _809: u16;<br align="left"/>let mut _810: isize;<br align="left"/>let _811: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _812: !;<br align="left"/>let mut _813: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _814: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _815: (u8, bool);<br align="left"/>let mut _816: (u64, u64);<br align="left"/>let mut _817: u64;<br align="left"/>let mut _818: u64;<br align="left"/>let mut _819: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _820: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _821: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _822: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _823: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _824: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _825: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _826: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>let mut _827: &amp;ReErased state::spot_market::SpotBalanceType;<br align="left"/>debug base_market =&gt; _1;<br align="left"/>debug quote_market =&gt; _2;<br align="left"/>debug taker =&gt; _3;<br align="left"/>debug taker_stats =&gt; _4;<br align="left"/>debug taker_order_index =&gt; _5;<br align="left"/>debug taker_key =&gt; _6;<br align="left"/>debug filler =&gt; _7;<br align="left"/>debug filler_stats =&gt; _8;<br align="left"/>debug filler_key =&gt; _9;<br align="left"/>debug now =&gt; _10;<br align="left"/>debug slot =&gt; _11;<br align="left"/>debug oracle_map =&gt; _12;<br align="left"/>debug fee_structure =&gt; _13;<br align="left"/>debug fulfillment_params =&gt; _14;<br align="left"/>debug oracle_price =&gt; _15;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>debug taker_price =&gt; _29;<br align="left"/>debug residual =&gt; _43;<br align="left"/>debug val =&gt; _46;<br align="left"/>debug taker_token_amount =&gt; _47;<br align="left"/>debug residual =&gt; _57;<br align="left"/>debug val =&gt; _60;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug taker_base_asset_amount =&gt; _67;<br align="left"/>debug residual =&gt; _80;<br align="left"/>debug val =&gt; _83;<br align="left"/>debug residual =&gt; _86;<br align="left"/>debug val =&gt; _89;<br align="left"/>debug order_direction =&gt; _90;<br align="left"/>debug taker_order_slot =&gt; _94;<br align="left"/>debug max_base_asset_amount =&gt; _98;<br align="left"/>debug max_quote_asset_amount =&gt; _99;<br align="left"/>debug residual =&gt; _108;<br align="left"/>debug val =&gt; _111;<br align="left"/>debug taker_base_asset_amount =&gt; _112;<br align="left"/>debug best_bid =&gt; _116;<br align="left"/>debug best_ask =&gt; _117;<br align="left"/>debug residual =&gt; _123;<br align="left"/>debug val =&gt; _126;<br align="left"/>debug residual =&gt; _135;<br align="left"/>debug val =&gt; _138;<br align="left"/>debug taker_price =&gt; _139;<br align="left"/>debug price =&gt; _141;<br align="left"/>debug ask =&gt; _144;<br align="left"/>debug residual =&gt; _152;<br align="left"/>debug val =&gt; _155;<br align="left"/>debug bid =&gt; _162;<br align="left"/>debug residual =&gt; _170;<br align="left"/>debug val =&gt; _173;<br align="left"/>debug base_asset_amount_filled =&gt; _179;<br align="left"/>debug base_update_direction =&gt; _180;<br align="left"/>debug quote_asset_amount_filled =&gt; _181;<br align="left"/>debug quote_update_direction =&gt; _182;<br align="left"/>debug external_market_fee =&gt; _183;<br align="left"/>debug settled_referrer_rebate =&gt; _184;<br align="left"/>debug unsettled_referrer_rebate =&gt; _185;<br align="left"/>debug residual =&gt; _196;<br align="left"/>debug val =&gt; _199;<br align="left"/>debug residual =&gt; _218;<br align="left"/>debug val =&gt; _221;<br align="left"/>debug residual =&gt; _232;<br align="left"/>debug val =&gt; _235;<br align="left"/>debug fee_pool_amount =&gt; _236;<br align="left"/>debug residual =&gt; _245;<br align="left"/>debug val =&gt; _248;<br align="left"/>debug taker_fee =&gt; _249;<br align="left"/>debug fee_to_market =&gt; _250;<br align="left"/>debug fee_pool_delta =&gt; _251;<br align="left"/>debug filler_reward =&gt; _252;<br align="left"/>debug residual =&gt; _270;<br align="left"/>debug val =&gt; _273;<br align="left"/>debug residual =&gt; _276;<br align="left"/>debug val =&gt; _279;<br align="left"/>debug quote_spot_position_delta =&gt; _280;<br align="left"/>debug residual =&gt; _287;<br align="left"/>debug val =&gt; _290;<br align="left"/>debug residual =&gt; _296;<br align="left"/>debug val =&gt; _299;<br align="left"/>debug error_code =&gt; _313;<br align="left"/>debug res =&gt; _320;<br align="left"/>debug residual =&gt; _338;<br align="left"/>debug val =&gt; _341;<br align="left"/>debug base_update_direction =&gt; _342;<br align="left"/>debug residual =&gt; _356;<br align="left"/>debug val =&gt; _359;<br align="left"/>debug residual =&gt; _370;<br align="left"/>debug val =&gt; _373;<br align="left"/>debug residual =&gt; _380;<br align="left"/>debug val =&gt; _383;<br align="left"/>debug error_code =&gt; _397;<br align="left"/>debug res =&gt; _404;<br align="left"/>debug residual =&gt; _422;<br align="left"/>debug val =&gt; _425;<br align="left"/>debug quote_update_direction =&gt; _426;<br align="left"/>debug residual =&gt; _440;<br align="left"/>debug val =&gt; _443;<br align="left"/>debug residual =&gt; _460;<br align="left"/>debug val =&gt; _463;<br align="left"/>debug residual =&gt; _465;<br align="left"/>debug val =&gt; _468;<br align="left"/>debug residual =&gt; _479;<br align="left"/>debug val =&gt; _482;<br align="left"/>debug residual =&gt; _485;<br align="left"/>debug val =&gt; _488;<br align="left"/>debug residual =&gt; _499;<br align="left"/>debug val =&gt; _502;<br align="left"/>debug residual =&gt; _505;<br align="left"/>debug val =&gt; _508;<br align="left"/>debug residual =&gt; _518;<br align="left"/>debug val =&gt; _521;<br align="left"/>debug residual =&gt; _523;<br align="left"/>debug val =&gt; _526;<br align="left"/>debug residual =&gt; _538;<br align="left"/>debug val =&gt; _541;<br align="left"/>debug taker_order_direction =&gt; _542;<br align="left"/>debug taker_update_open_bids_and_asks =&gt; _546;<br align="left"/>debug residual =&gt; _561;<br align="left"/>debug val =&gt; _564;<br align="left"/>debug residual =&gt; _570;<br align="left"/>debug val =&gt; _573;<br align="left"/>debug filler =&gt; _580;<br align="left"/>debug filler_stats =&gt; _581;<br align="left"/>debug residual =&gt; _593;<br align="left"/>debug val =&gt; _596;<br align="left"/>debug residual =&gt; _606;<br align="left"/>debug val =&gt; _609;<br align="left"/>debug residual =&gt; _619;<br align="left"/>debug val =&gt; _622;<br align="left"/>debug residual =&gt; _624;<br align="left"/>debug val =&gt; _627;<br align="left"/>debug residual =&gt; _640;<br align="left"/>debug val =&gt; _643;<br align="left"/>debug residual =&gt; _646;<br align="left"/>debug val =&gt; _649;<br align="left"/>debug residual =&gt; _662;<br align="left"/>debug val =&gt; _665;<br align="left"/>debug residual =&gt; _678;<br align="left"/>debug val =&gt; _681;<br align="left"/>debug residual =&gt; _691;<br align="left"/>debug val =&gt; _694;<br align="left"/>debug residual =&gt; _696;<br align="left"/>debug val =&gt; _699;<br align="left"/>debug fill_record_id =&gt; _700;<br align="left"/>debug current_id =&gt; _701;<br align="left"/>debug order_action_record =&gt; _707;<br align="left"/>debug residual =&gt; _717;<br align="left"/>debug val =&gt; _720;<br align="left"/>debug residual =&gt; _739;<br align="left"/>debug val =&gt; _742;<br align="left"/>debug residual =&gt; _766;<br align="left"/>debug val =&gt; _769;<br align="left"/>debug residual =&gt; _775;<br align="left"/>debug val =&gt; _778;<br align="left"/>debug residual =&gt; _790;<br align="left"/>debug val =&gt; _793;<br align="left"/>debug residual =&gt; _811;<br align="left"/>debug val =&gt; _814;<br align="left"/>>;
    bb0__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;mut (*_12)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = &amp;(*_1)<br/></td></tr><tr><td align="left">_22 = SpotMarket::oracle_id(move _23)</td></tr></table>>];
    bb1__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_21 = &amp;_22<br/>_20 = &amp;(*_21)<br/></td></tr><tr><td align="left">_18 = OracleMap::&lt;'_&gt;::get_price_data(move _19, move _20)</td></tr></table>>];
    bb2__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;&amp;OraclePriceData, error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb3__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_24 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb4__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_17 as Continue).0: &amp;state::oracle::OraclePriceData)<br/>_16 = _28<br/>StorageDead(_28)<br/>_15 = ((*_16).0: i64)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _5<br/>_34 = Len(((*_3).5: [state::user::Order; 32]))<br/>_35 = Lt(_33, _34)<br/></td></tr><tr><td align="left">assert(move _35, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _34, _33)</td></tr></table>>];
    bb5__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_27)<br/>_27 = _25<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb7__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_32 = &amp;((*_3).5: [state::user::Order; 32])[_33]<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = _15<br/>_36 = Option::&lt;i64&gt;::Some(move _37)<br/>StorageDead(_37)<br/>StorageLive(_38)<br/>_38 = Option::&lt;u64&gt;::None<br/>StorageLive(_39)<br/>_39 = _11<br/>StorageLive(_40)<br/>_40 = ((*_1).26: u64)<br/>StorageLive(_41)<br/>_41 = Option::&lt;ProtectedMakerParams&gt;::None<br/></td></tr><tr><td align="left">_31 = Order::get_limit_price(move _32, move _36, move _38, move _39, move _40, const false, move _41)</td></tr></table>>];
    bb9__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_30 = &lt;std::result::Result&lt;Option&lt;u64&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _31)</td></tr></table>>];
    bb10__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>_42 = discriminant(_30)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb11__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_30 as Continue).0: std::option::Option&lt;u64&gt;)<br/>_29 = _46<br/>StorageDead(_46)<br/>StorageDead(_33)<br/>StorageDead(_30)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = &amp;mut (*_3)<br/>StorageLive(_55)<br/>_55 = ((*_1).42: u16)<br/></td></tr><tr><td align="left">_53 = User::force_get_spot_position_mut(move _54, move _55)</td></tr></table>>];
    bb12__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_30 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_45)<br/>_45 = _43<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _45)</td></tr></table>>];
    bb13__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_43)<br/>StorageDead(_33)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;std::result::Result&lt;&amp;mut SpotPosition, error::ErrorCode&gt; as Try&gt;::branch(move _53)</td></tr></table>>];
    bb15__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>_56 = discriminant(_52)<br/></td></tr><tr><td align="left">switchInt(move _56)</td></tr></table>>];
    bb16__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_60)<br/>_60 = move ((_52 as Continue).0: &amp;mut state::user::SpotPosition)<br/>_51 = move _60<br/>StorageDead(_60)<br/>_50 = &amp;(*_51)<br/>StorageLive(_61)<br/>_61 = &amp;(*_1)<br/></td></tr><tr><td align="left">_49 = SpotPosition::get_signed_token_amount(move _50, move _61)</td></tr></table>>];
    bb17__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_57)<br/>_57 = ((_52 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_59)<br/>_59 = _57<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _59)</td></tr></table>>];
    bb18__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_57)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">_48 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _49)</td></tr></table>>];
    bb20__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>_62 = discriminant(_48)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb21__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_48 as Continue).0: i128)<br/>_47 = _66<br/>StorageDead(_66)<br/>StorageDead(_52)<br/>StorageDead(_51)<br/>StorageDead(_48)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = _5<br/>_72 = Len(((*_3).5: [state::user::Order; 32]))<br/>_73 = Lt(_71, _72)<br/></td></tr><tr><td align="left">assert(move _73, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _72, _71)</td></tr></table>>];
    bb22__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_48 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_65)<br/>_65 = _63<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb23__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_70 = &amp;((*_3).5: [state::user::Order; 32])[_71]<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>_78 = _47<br/></td></tr><tr><td align="left">_77 = &lt;i128 as Cast&gt;::cast::&lt;i64&gt;(move _78)</td></tr></table>>];
    bb25__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/></td></tr><tr><td align="left">_76 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _77)</td></tr></table>>];
    bb26__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>_79 = discriminant(_76)<br/></td></tr><tr><td align="left">switchInt(move _79)</td></tr></table>>];
    bb27__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_83)<br/>_83 = ((_76 as Continue).0: i64)<br/>_75 = _83<br/>StorageDead(_83)<br/>_74 = Option::&lt;i64&gt;::Some(move _75)<br/>StorageDead(_75)<br/>StorageLive(_84)<br/>_84 = ((*_1).25: u64)<br/></td></tr><tr><td align="left">_69 = Order::get_standardized_base_asset_amount_unfilled(move _70, move _74, move _84)</td></tr></table>>];
    bb28__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_80)<br/>_80 = ((_76 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_82)<br/>_82 = _80<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _82)</td></tr></table>>];
    bb29__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_80)<br/>StorageDead(_75)<br/>StorageDead(_74)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_74)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">_68 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _69)</td></tr></table>>];
    bb31__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_85 = discriminant(_68)<br/></td></tr><tr><td align="left">switchInt(move _85)</td></tr></table>>];
    bb32__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>_89 = ((_68 as Continue).0: u64)<br/>_67 = _89<br/>StorageDead(_89)<br/>StorageDead(_76)<br/>StorageDead(_71)<br/>StorageDead(_68)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = _5<br/>_92 = Len(((*_3).5: [state::user::Order; 32]))<br/>_93 = Lt(_91, _92)<br/></td></tr><tr><td align="left">assert(move _93, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _92, _91)</td></tr></table>>];
    bb33__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_86)<br/>_86 = ((_68 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_88)<br/>_88 = _86<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _88)</td></tr></table>>];
    bb34__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_90 = (((*_3).5: [state::user::Order; 32])[_91].17: controller::position::PositionDirection)<br/>StorageDead(_91)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>_95 = _5<br/>_96 = Len(((*_3).5: [state::user::Order; 32]))<br/>_97 = Lt(_95, _96)<br/></td></tr><tr><td align="left">assert(move _97, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _96, _95)</td></tr></table>>];
    bb36__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_94 = (((*_3).5: [state::user::Order; 32])[_95].0: u64)<br/>StorageDead(_95)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_103 = &amp;(*_3)<br/>StorageLive(_104)<br/>_104 = _5<br/>StorageLive(_105)<br/>_105 = &amp;(*_1)<br/>StorageLive(_106)<br/>_106 = &amp;(*_2)<br/></td></tr><tr><td align="left">_102 = math::orders::get_max_fill_amounts(move _103, move _104, move _105, move _106, const true)</td></tr></table>>];
    bb37__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/>StorageDead(_103)<br/></td></tr><tr><td align="left">_101 = &lt;std::result::Result&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt; as Try&gt;::branch(move _102)</td></tr></table>>];
    bb38__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>_107 = discriminant(_101)<br/></td></tr><tr><td align="left">switchInt(move _107)</td></tr></table>>];
    bb39__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_111)<br/>_111 = ((_101 as Continue).0: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;))<br/>_100 = _111<br/>StorageDead(_111)<br/>StorageLive(_98)<br/>_98 = (_100.0: std::option::Option&lt;u64&gt;)<br/>StorageLive(_99)<br/>_99 = (_100.1: std::option::Option&lt;u64&gt;)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>_113 = _67<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>_115 = _98<br/></td></tr><tr><td align="left">_114 = Option::&lt;u64&gt;::unwrap_or(move _115, const _)</td></tr></table>>];
    bb40__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_108)<br/>_108 = ((_101 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_110)<br/>_110 = _108<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _110)</td></tr></table>>];
    bb41__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageDead(_108)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/></td></tr><tr><td align="left">_112 = &lt;u64 as Ord&gt;::min(move _113, move _114)</td></tr></table>>];
    bb43__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_114)<br/>StorageDead(_113)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>_121 = &amp;(*_14)<br/></td></tr><tr><td align="left">_120 = &lt;dyn SpotFulfillmentParams as SpotFulfillmentParams&gt;::get_best_bid_and_ask(move _121)</td></tr></table>>];
    bb44__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/></td></tr><tr><td align="left">_119 = &lt;std::result::Result&lt;(Option&lt;u64&gt;, Option&lt;u64&gt;), error::ErrorCode&gt; as Try&gt;::branch(move _120)</td></tr></table>>];
    bb45__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>_122 = discriminant(_119)<br/></td></tr><tr><td align="left">switchInt(move _122)</td></tr></table>>];
    bb46__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageLive(_126)<br/>_126 = ((_119 as Continue).0: (std::option::Option&lt;u64&gt;, std::option::Option&lt;u64&gt;))<br/>_118 = _126<br/>StorageDead(_126)<br/>StorageLive(_116)<br/>_116 = (_118.0: std::option::Option&lt;u64&gt;)<br/>StorageLive(_117)<br/>_117 = (_118.1: std::option::Option&lt;u64&gt;)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>_130 = &amp;mut (*_1)<br/>StorageLive(_131)<br/>_131 = _116<br/>StorageLive(_132)<br/>_132 = _117<br/>StorageLive(_133)<br/>_133 = _10<br/></td></tr><tr><td align="left">_129 = SpotMarket::update_historical_index_price(move _130, move _131, move _132, move _133)</td></tr></table>>];
    bb47__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageLive(_123)<br/>_123 = ((_119 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_125)<br/>_125 = _123<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _125)</td></tr></table>>];
    bb48__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>StorageDead(_123)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_133)<br/>StorageDead(_132)<br/>StorageDead(_131)<br/>StorageDead(_130)<br/></td></tr><tr><td align="left">_128 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _129)</td></tr></table>>];
    bb50__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>_134 = discriminant(_128)<br/></td></tr><tr><td align="left">switchInt(move _134)</td></tr></table>>];
    bb51__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageLive(_138)<br/>_138 = ((_128 as Continue).0: ())<br/>_127 = _138<br/>StorageDead(_138)<br/>StorageDead(_128)<br/>StorageDead(_127)<br/>StorageLive(_139)<br/>_140 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _140)</td></tr></table>>];
    bb52__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageLive(_135)<br/>_135 = ((_128 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_137)<br/>_137 = _135<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _137)</td></tr></table>>];
    bb53__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_137)<br/>StorageDead(_135)<br/>StorageDead(_128)<br/>StorageDead(_127)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">_142 = discriminant(_90)<br/></td></tr><tr><td align="left">switchInt(move _142)</td></tr></table>>];
    bb55__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_141)<br/>_141 = ((_29 as Some).0: u64)<br/>_139 = _141<br/>StorageDead(_141)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">_161 = discriminant(_116)<br/></td></tr><tr><td align="left">switchInt(move _161)</td></tr></table>>];
    bb57__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">_143 = discriminant(_117)<br/></td></tr><tr><td align="left">switchInt(move _143)</td></tr></table>>];
    bb58__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageLive(_144)<br/>_144 = ((_117 as Some).0: u64)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>_147 = _144<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>_149 = _144<br/>_150 = Eq(const 100_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _150, &quot;attempt to divide `{}` by zero&quot;, _149)</td></tr></table>>];
    bb59__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">_148 = Div(move _149, const 100_u64)<br/>StorageDead(_149)<br/></td></tr><tr><td align="left">_146 = &lt;u64 as SafeMath&gt;::safe_add(move _147, move _148)</td></tr></table>>];
    bb60__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/>StorageDead(_147)<br/></td></tr><tr><td align="left">_145 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _146)</td></tr></table>>];
    bb61__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_146)<br/>_151 = discriminant(_145)<br/></td></tr><tr><td align="left">switchInt(move _151)</td></tr></table>>];
    bb62__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_155)<br/>_155 = ((_145 as Continue).0: u64)<br/>_139 = _155<br/>StorageDead(_155)<br/>StorageDead(_145)<br/>StorageDead(_144)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_152)<br/>_152 = ((_145 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_154)<br/>_154 = _152<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _154)</td></tr></table>>];
    bb64__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_154)<br/>StorageDead(_152)<br/>StorageDead(_145)<br/>StorageDead(_144)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageLive(_157)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>_159 = const &quot;External market has no ask&quot;<br/>_158 = &amp;(*_159)<br/></td></tr><tr><td align="left">_157 = solana_program::log::sol_log(move _158)</td></tr></table>>];
    bb66__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_158)<br/>StorageDead(_159)<br/>StorageDead(_157)<br/>StorageLive(_160)<br/>_160 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _160)<br/>StorageDead(_160)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageLive(_162)<br/>_162 = ((_116 as Some).0: u64)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>_165 = _162<br/>StorageLive(_166)<br/>StorageLive(_167)<br/>_167 = _162<br/>_168 = Eq(const 100_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _168, &quot;attempt to divide `{}` by zero&quot;, _167)</td></tr></table>>];
    bb68__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">_166 = Div(move _167, const 100_u64)<br/>StorageDead(_167)<br/></td></tr><tr><td align="left">_164 = &lt;u64 as SafeMath&gt;::safe_sub(move _165, move _166)</td></tr></table>>];
    bb69__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_166)<br/>StorageDead(_165)<br/></td></tr><tr><td align="left">_163 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _164)</td></tr></table>>];
    bb70__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_164)<br/>_169 = discriminant(_163)<br/></td></tr><tr><td align="left">switchInt(move _169)</td></tr></table>>];
    bb71__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageLive(_173)<br/>_173 = ((_163 as Continue).0: u64)<br/>_139 = _173<br/>StorageDead(_173)<br/>StorageDead(_163)<br/>StorageDead(_162)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb72__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_170)<br/>_170 = ((_163 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_172)<br/>_172 = _170<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _172)</td></tr></table>>];
    bb73__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/>StorageDead(_170)<br/>StorageDead(_163)<br/>StorageDead(_162)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb74__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageLive(_175)<br/>StorageLive(_176)<br/>StorageLive(_177)<br/>_177 = const &quot;External market has no bid&quot;<br/>_176 = &amp;(*_177)<br/></td></tr><tr><td align="left">_175 = solana_program::log::sol_log(move _176)</td></tr></table>>];
    bb75__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_176)<br/>StorageDead(_177)<br/>StorageDead(_175)<br/>StorageLive(_178)<br/>_178 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _178)<br/>StorageDead(_178)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb76__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageLive(_186)<br/>StorageLive(_187)<br/>StorageLive(_188)<br/>StorageLive(_189)<br/>_189 = &amp;mut (*_14)<br/>StorageLive(_190)<br/>_190 = _90<br/>StorageLive(_191)<br/>_191 = _139<br/>StorageLive(_192)<br/>_192 = _112<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>_194 = _99<br/></td></tr><tr><td align="left">_193 = Option::&lt;u64&gt;::unwrap_or(move _194, const _)</td></tr></table>>];
    bb77__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_194)<br/></td></tr><tr><td align="left">_188 = &lt;dyn SpotFulfillmentParams as SpotFulfillmentParams&gt;::fulfill_order(move _189, move _190, move _191, move _192, move _193)</td></tr></table>>];
    bb78__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_193)<br/>StorageDead(_192)<br/>StorageDead(_191)<br/>StorageDead(_190)<br/>StorageDead(_189)<br/></td></tr><tr><td align="left">_187 = &lt;std::result::Result&lt;ExternalSpotFill, error::ErrorCode&gt; as Try&gt;::branch(move _188)</td></tr></table>>];
    bb79__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_188)<br/>_195 = discriminant(_187)<br/></td></tr><tr><td align="left">switchInt(move _195)</td></tr></table>>];
    bb80__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_199)<br/>_199 = move ((_187 as Continue).0: state::spot_fulfillment_params::ExternalSpotFill)<br/>_186 = move _199<br/>StorageDead(_199)<br/>StorageLive(_179)<br/>_179 = (_186.0: u64)<br/>StorageLive(_180)<br/>_180 = (_186.1: state::spot_market::SpotBalanceType)<br/>StorageLive(_181)<br/>_181 = (_186.2: u64)<br/>StorageLive(_182)<br/>_182 = (_186.3: state::spot_market::SpotBalanceType)<br/>StorageLive(_183)<br/>_183 = (_186.6: u64)<br/>StorageLive(_184)<br/>_184 = (_186.4: u64)<br/>StorageLive(_185)<br/>_185 = (_186.5: u64)<br/>StorageDead(_187)<br/>StorageDead(_186)<br/>StorageLive(_200)<br/>StorageLive(_201)<br/>StorageLive(_202)<br/>_202 = _179<br/>_201 = Eq(move _202, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _201)</td></tr></table>>];
    bb81__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_196)<br/>_196 = ((_187 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_198)<br/>_198 = _196<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _198)</td></tr></table>>];
    bb82__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>StorageDead(_196)<br/>StorageDead(_187)<br/>StorageDead(_186)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_202)<br/>StorageLive(_204)<br/>_204 = (const 0_u64, const 0_u64)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _204)<br/>StorageDead(_204)<br/>StorageDead(_201)<br/>StorageDead(_200)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb84__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_202)<br/>_200 = const ()<br/>StorageDead(_201)<br/>StorageDead(_200)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>StorageLive(_209)<br/>_209 = _184<br/>_208 = move _209 as u128 (IntToInt)<br/>StorageDead(_209)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>_827 = const _<br/>_211 = &amp;(*_827)<br/>_210 = &amp;(*_211)<br/>StorageLive(_213)<br/>_213 = &amp;mut (*_2)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>_216 = &amp;mut ((*_1).8: state::perp_market::PoolBalance)<br/>_215 = &amp;mut (*_216)<br/>_214 = move _215 as &amp;mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize))<br/>StorageDead(_215)<br/></td></tr><tr><td align="left">_207 = update_spot_balances(move _208, move _210, move _213, move _214, const false)</td></tr></table>>];
    bb85__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_214)<br/>StorageDead(_213)<br/>StorageDead(_210)<br/>StorageDead(_208)<br/></td></tr><tr><td align="left">_206 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _207)</td></tr></table>>];
    bb86__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_207)<br/>_217 = discriminant(_206)<br/></td></tr><tr><td align="left">switchInt(move _217)</td></tr></table>>];
    bb87__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageLive(_221)<br/>_221 = ((_206 as Continue).0: ())<br/>_205 = _221<br/>StorageDead(_221)<br/>StorageDead(_216)<br/>StorageDead(_211)<br/>StorageDead(_206)<br/>StorageDead(_205)<br/>StorageLive(_222)<br/>StorageLive(_223)<br/>StorageLive(_224)<br/>StorageLive(_225)<br/>_225 = _181<br/>StorageLive(_226)<br/>_226 = _179<br/>StorageLive(_227)<br/>StorageLive(_228)<br/>_228 = (*_1)<br/></td></tr><tr><td align="left">_227 = SpotMarket::get_precision(move _228)</td></tr></table>>];
    bb88__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageLive(_218)<br/>_218 = ((_206 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_220)<br/>_220 = _218<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _220)</td></tr></table>>];
    bb89__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_220)<br/>StorageDead(_218)<br/>StorageDead(_216)<br/>StorageDead(_211)<br/>StorageDead(_206)<br/>StorageDead(_205)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb90__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_228)<br/>StorageLive(_229)<br/>_229 = _90<br/>StorageLive(_230)<br/>_230 = _139<br/></td></tr><tr><td align="left">_224 = math::orders::validate_fill_price(move _225, move _226, move _227, move _229, move _230, const true)</td></tr></table>>];
    bb91__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_230)<br/>StorageDead(_229)<br/>StorageDead(_227)<br/>StorageDead(_226)<br/>StorageDead(_225)<br/></td></tr><tr><td align="left">_223 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _224)</td></tr></table>>];
    bb92__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_224)<br/>_231 = discriminant(_223)<br/></td></tr><tr><td align="left">switchInt(move _231)</td></tr></table>>];
    bb93__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageLive(_235)<br/>_235 = ((_223 as Continue).0: ())<br/>_222 = _235<br/>StorageDead(_235)<br/>StorageDead(_223)<br/>StorageDead(_222)<br/>StorageLive(_236)<br/>StorageLive(_237)<br/>StorageLive(_238)<br/>StorageLive(_239)<br/>_239 = (((*_1).8: state::perp_market::PoolBalance).0: u128)<br/>StorageLive(_240)<br/>_240 = &amp;(*_2)<br/>StorageLive(_241)<br/>StorageLive(_242)<br/>_826 = const _<br/>_242 = &amp;(*_826)<br/>_241 = &amp;(*_242)<br/></td></tr><tr><td align="left">_238 = get_token_amount(move _239, move _240, move _241)</td></tr></table>>];
    bb94__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageLive(_232)<br/>_232 = ((_223 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_234)<br/>_234 = _232<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _234)</td></tr></table>>];
    bb95__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_234)<br/>StorageDead(_232)<br/>StorageDead(_223)<br/>StorageDead(_222)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb96__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_241)<br/>StorageDead(_240)<br/>StorageDead(_239)<br/></td></tr><tr><td align="left">_237 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _238)</td></tr></table>>];
    bb97__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_238)<br/>_244 = discriminant(_237)<br/></td></tr><tr><td align="left">switchInt(move _244)</td></tr></table>>];
    bb98__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageLive(_248)<br/>_248 = ((_237 as Continue).0: u128)<br/>_236 = _248<br/>StorageDead(_248)<br/>StorageDead(_242)<br/>StorageDead(_237)<br/>StorageLive(_253)<br/>StorageLive(_254)<br/>StorageLive(_255)<br/>StorageLive(_256)<br/>_256 = &amp;(*_4)<br/>StorageLive(_257)<br/>_257 = _181<br/>StorageLive(_258)<br/>_258 = &amp;(*_13)<br/>StorageLive(_259)<br/>_259 = _94<br/>StorageLive(_260)<br/>_260 = _11<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>_262 = &amp;_7<br/></td></tr><tr><td align="left">_261 = Option::&lt;&amp;mut User&gt;::is_some(move _262)</td></tr></table>>];
    bb99__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageLive(_245)<br/>_245 = ((_237 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_247)<br/>_247 = _245<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _247)</td></tr></table>>];
    bb100__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_247)<br/>StorageDead(_245)<br/>StorageDead(_242)<br/>StorageDead(_237)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb101__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_262)<br/>StorageLive(_263)<br/>_263 = _183<br/>StorageLive(_264)<br/>_264 = _185<br/>StorageLive(_265)<br/>StorageLive(_266)<br/>StorageLive(_267)<br/>StorageLive(_268)<br/>_268 = _236<br/></td></tr><tr><td align="left">_267 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _268)</td></tr></table>>];
    bb102__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_268)<br/></td></tr><tr><td align="left">_266 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _267)</td></tr></table>>];
    bb103__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_267)<br/>_269 = discriminant(_266)<br/></td></tr><tr><td align="left">switchInt(move _269)</td></tr></table>>];
    bb104__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageLive(_273)<br/>_273 = ((_266 as Continue).0: u64)<br/>_265 = _273<br/>StorageDead(_273)<br/>StorageLive(_274)<br/>_274 = ((*_1).49: i16)<br/></td></tr><tr><td align="left">_255 = calculate_fee_for_fulfillment_with_external_market(move _256, move _257, move _258, move _259, move _260, move _261, move _263, move _264, move _265, move _274)</td></tr></table>>];
    bb105__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageLive(_270)<br/>_270 = ((_266 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_272)<br/>_272 = _270<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _272)</td></tr></table>>];
    bb106__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_272)<br/>StorageDead(_270)<br/>StorageDead(_265)<br/>StorageDead(_264)<br/>StorageDead(_263)<br/>StorageDead(_261)<br/>StorageDead(_260)<br/>StorageDead(_259)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/>StorageDead(_256)<br/>StorageDead(_255)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb107__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_274)<br/>StorageDead(_265)<br/>StorageDead(_264)<br/>StorageDead(_263)<br/>StorageDead(_261)<br/>StorageDead(_260)<br/>StorageDead(_259)<br/>StorageDead(_258)<br/>StorageDead(_257)<br/>StorageDead(_256)<br/></td></tr><tr><td align="left">_254 = &lt;std::result::Result&lt;ExternalFillFees, error::ErrorCode&gt; as Try&gt;::branch(move _255)</td></tr></table>>];
    bb108__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_255)<br/>_275 = discriminant(_254)<br/></td></tr><tr><td align="left">switchInt(move _275)</td></tr></table>>];
    bb109__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageLive(_279)<br/>_279 = move ((_254 as Continue).0: math::fees::ExternalFillFees)<br/>_253 = move _279<br/>StorageDead(_279)<br/>StorageLive(_249)<br/>_249 = (_253.0: u64)<br/>StorageLive(_250)<br/>_250 = (_253.1: u64)<br/>StorageLive(_251)<br/>_251 = (_253.2: i64)<br/>StorageLive(_252)<br/>_252 = (_253.3: u64)<br/>StorageDead(_266)<br/>StorageDead(_254)<br/>StorageDead(_253)<br/>StorageLive(_280)<br/>_281 = discriminant(_182)<br/></td></tr><tr><td align="left">switchInt(move _281)</td></tr></table>>];
    bb110__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageLive(_276)<br/>_276 = ((_254 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_278)<br/>_278 = _276<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _278)</td></tr></table>>];
    bb111__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_278)<br/>StorageDead(_276)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb112__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageLive(_291)<br/>StorageLive(_292)<br/>StorageLive(_293)<br/>_293 = _181<br/>StorageLive(_294)<br/>_294 = _249<br/></td></tr><tr><td align="left">_292 = &lt;u64 as SafeMath&gt;::safe_add(move _293, move _294)</td></tr></table>>];
    bb113__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageLive(_282)<br/>StorageLive(_283)<br/>StorageLive(_284)<br/>_284 = _181<br/>StorageLive(_285)<br/>_285 = _249<br/></td></tr><tr><td align="left">_283 = &lt;u64 as SafeMath&gt;::safe_sub(move _284, move _285)</td></tr></table>>];
    bb114__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_285)<br/>StorageDead(_284)<br/></td></tr><tr><td align="left">_282 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _283)</td></tr></table>>];
    bb115__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_283)<br/>_286 = discriminant(_282)<br/></td></tr><tr><td align="left">switchInt(move _286)</td></tr></table>>];
    bb116__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageLive(_290)<br/>_290 = ((_282 as Continue).0: u64)<br/>_280 = _290<br/>StorageDead(_290)<br/>StorageDead(_282)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb117__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageLive(_287)<br/>_287 = ((_282 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_289)<br/>_289 = _287<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _289)</td></tr></table>>];
    bb118__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_289)<br/>StorageDead(_287)<br/>StorageDead(_282)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb119__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_294)<br/>StorageDead(_293)<br/></td></tr><tr><td align="left">_291 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _292)</td></tr></table>>];
    bb120__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_292)<br/>_295 = discriminant(_291)<br/></td></tr><tr><td align="left">switchInt(move _295)</td></tr></table>>];
    bb121__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageLive(_299)<br/>_299 = ((_291 as Continue).0: u64)<br/>_280 = _299<br/>StorageDead(_299)<br/>StorageDead(_291)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb122__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageLive(_296)<br/>_296 = ((_291 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_298)<br/>_298 = _296<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _298)</td></tr></table>>];
    bb123__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_298)<br/>StorageDead(_296)<br/>StorageDead(_291)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb124__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageLive(_300)<br/>StorageLive(_301)<br/>StorageLive(_302)<br/>StorageLive(_303)<br/>StorageLive(_304)<br/>_304 = &amp;_180<br/>StorageLive(_305)<br/>StorageLive(_306)<br/>StorageLive(_307)<br/>StorageLive(_308)<br/>_308 = _5<br/>_309 = Len(((*_3).5: [state::user::Order; 32]))<br/>_310 = Lt(_308, _309)<br/></td></tr><tr><td align="left">assert(move _310, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _309, _308)</td></tr></table>>];
    bb125__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">_307 = &amp;((*_3).5: [state::user::Order; 32])[_308]<br/>StorageLive(_311)<br/>_311 = AssetType::Base<br/></td></tr><tr><td align="left">_306 = Order::get_spot_position_update_direction(move _307, move _311)</td></tr></table>>];
    bb126__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">_305 = &amp;_306<br/>StorageDead(_311)<br/>StorageDead(_307)<br/></td></tr><tr><td align="left">_303 = &lt;SpotBalanceType as PartialEq&gt;::eq(move _304, move _305)</td></tr></table>>];
    bb127__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left">switchInt(move _303)</td></tr></table>>];
    bb128__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_308)<br/>StorageDead(_306)<br/>StorageDead(_305)<br/>StorageDead(_304)<br/>StorageLive(_312)<br/>_312 = ()<br/>_302 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _312)<br/>StorageDead(_312)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb129__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageDead(_308)<br/>StorageDead(_306)<br/>StorageDead(_305)<br/>StorageDead(_304)<br/>StorageLive(_313)<br/>_313 = error::ErrorCode::FailedToFillOnExternalMarket<br/>StorageLive(_314)<br/>StorageLive(_315)<br/>StorageLive(_316)<br/>StorageLive(_317)<br/>StorageLive(_318)<br/>StorageLive(_319)<br/>StorageLive(_320)<br/>StorageLive(_321)<br/>StorageLive(_322)<br/>StorageLive(_323)<br/>StorageLive(_324)<br/>_825 = const _<br/>_324 = &amp;(*_825)<br/>_323 = &amp;(*_324)<br/>_322 = move _323 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_323)<br/>StorageLive(_326)<br/>StorageLive(_327)<br/>StorageLive(_328)<br/>StorageLive(_329)<br/>StorageLive(_330)<br/>StorageLive(_331)<br/>StorageLive(_332)<br/>_332 = &amp;_313<br/>_331 = &amp;(*_332)<br/></td></tr><tr><td align="left">_330 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _331)</td></tr></table>>];
    bb130__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageDead(_331)<br/>_329 = [move _330]<br/>StorageDead(_330)<br/>_328 = &amp;_329<br/>_327 = &amp;(*_328)<br/>_326 = move _327 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_327)<br/></td></tr><tr><td align="left">_321 = Arguments::&lt;'_&gt;::new_v1(move _322, move _326)</td></tr></table>>];
    bb131__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_326)<br/>StorageDead(_322)<br/></td></tr><tr><td align="left">_320 = format(move _321)</td></tr></table>>];
    bb132__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_321)<br/>StorageDead(_332)<br/>StorageDead(_329)<br/>StorageDead(_328)<br/>StorageDead(_324)<br/>_319 = move _320<br/>StorageDead(_320)<br/>_318 = &amp;_319<br/>_317 = &amp;(*_318)<br/></td></tr><tr><td align="left">_316 = &lt;String as Deref&gt;::deref(move _317)</td></tr></table>>];
    bb133__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">_315 = &amp;(*_316)<br/>StorageDead(_317)<br/></td></tr><tr><td align="left">_314 = solana_program::log::sol_log(move _315)</td></tr></table>>];
    bb134__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageDead(_315)<br/></td></tr><tr><td align="left">drop(_319)</td></tr></table>>];
    bb135__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_319)<br/>StorageDead(_318)<br/>StorageDead(_316)<br/>StorageDead(_314)<br/>StorageLive(_333)<br/>StorageLive(_334)<br/>StorageLive(_335)<br/>_335 = const &quot;Fill on external spot market lead to unexpected to update direction&quot;<br/>_334 = &amp;(*_335)<br/></td></tr><tr><td align="left">_333 = solana_program::log::sol_log(move _334)</td></tr></table>>];
    bb136__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageDead(_334)<br/>StorageDead(_335)<br/>StorageDead(_333)<br/>StorageLive(_336)<br/>_336 = _313<br/>_302 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _336)<br/>StorageDead(_336)<br/>StorageDead(_313)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb137__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_303)<br/></td></tr><tr><td align="left">_301 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _302)</td></tr></table>>];
    bb138__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_302)<br/>_337 = discriminant(_301)<br/></td></tr><tr><td align="left">switchInt(move _337)</td></tr></table>>];
    bb139__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageLive(_341)<br/>_341 = ((_301 as Continue).0: ())<br/>_300 = _341<br/>StorageDead(_341)<br/>StorageDead(_301)<br/>StorageDead(_300)<br/>StorageLive(_342)<br/>StorageLive(_343)<br/>StorageLive(_344)<br/>_344 = _5<br/>_345 = Len(((*_3).5: [state::user::Order; 32]))<br/>_346 = Lt(_344, _345)<br/></td></tr><tr><td align="left">assert(move _346, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _345, _344)</td></tr></table>>];
    bb140__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageLive(_338)<br/>_338 = ((_301 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_340)<br/>_340 = _338<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _340)</td></tr></table>>];
    bb141__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_340)<br/>StorageDead(_338)<br/>StorageDead(_301)<br/>StorageDead(_300)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb142__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">_343 = &amp;((*_3).5: [state::user::Order; 32])[_344]<br/>StorageLive(_347)<br/>_347 = AssetType::Base<br/></td></tr><tr><td align="left">_342 = Order::get_spot_position_update_direction(move _343, move _347)</td></tr></table>>];
    bb143__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_347)<br/>StorageDead(_343)<br/>StorageDead(_344)<br/>StorageLive(_348)<br/>StorageLive(_349)<br/>StorageLive(_350)<br/>StorageLive(_351)<br/>StorageLive(_352)<br/>StorageLive(_353)<br/>StorageLive(_354)<br/>_354 = _179<br/></td></tr><tr><td align="left">_353 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _354)</td></tr></table>>];
    bb144__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_354)<br/></td></tr><tr><td align="left">_352 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _353)</td></tr></table>>];
    bb145__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageDead(_353)<br/>_355 = discriminant(_352)<br/></td></tr><tr><td align="left">switchInt(move _355)</td></tr></table>>];
    bb146__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageLive(_359)<br/>_359 = ((_352 as Continue).0: u128)<br/>_351 = _359<br/>StorageDead(_359)<br/>StorageLive(_360)<br/>StorageLive(_361)<br/>_361 = &amp;_342<br/>_360 = &amp;(*_361)<br/>StorageLive(_362)<br/>_362 = &amp;mut (*_1)<br/>StorageLive(_363)<br/>StorageLive(_364)<br/>StorageLive(_365)<br/>StorageLive(_366)<br/>StorageLive(_367)<br/>_367 = &amp;mut (*_3)<br/>StorageLive(_368)<br/>_368 = ((*_1).42: u16)<br/></td></tr><tr><td align="left">_366 = User::force_get_spot_position_mut(move _367, move _368)</td></tr></table>>];
    bb147__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageLive(_356)<br/>_356 = ((_352 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_358)<br/>_358 = _356<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _358)</td></tr></table>>];
    bb148__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageDead(_358)<br/>StorageDead(_356)<br/>StorageDead(_351)<br/>StorageDead(_350)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb149__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageDead(_368)<br/>StorageDead(_367)<br/></td></tr><tr><td align="left">_365 = &lt;std::result::Result&lt;&amp;mut SpotPosition, error::ErrorCode&gt; as Try&gt;::branch(move _366)</td></tr></table>>];
    bb150__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_366)<br/>_369 = discriminant(_365)<br/></td></tr><tr><td align="left">switchInt(move _369)</td></tr></table>>];
    bb151__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageLive(_373)<br/>_373 = move ((_365 as Continue).0: &amp;mut state::user::SpotPosition)<br/>_364 = &amp;mut (*_373)<br/>StorageDead(_373)<br/>_363 = &amp;mut (*_364)<br/>StorageLive(_374)<br/>StorageLive(_375)<br/>_375 = &amp;_342<br/>StorageLive(_376)<br/>_824 = const _<br/>_376 = &amp;(*_824)<br/></td></tr><tr><td align="left">_374 = &lt;SpotBalanceType as PartialEq&gt;::eq(move _375, move _376)</td></tr></table>>];
    bb152__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageLive(_370)<br/>_370 = ((_365 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_372)<br/>_372 = _370<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _372)</td></tr></table>>];
    bb153__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageDead(_372)<br/>StorageDead(_370)<br/>StorageDead(_363)<br/>StorageDead(_362)<br/>StorageDead(_360)<br/>StorageDead(_351)<br/>StorageDead(_350)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb154__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageDead(_376)<br/>StorageDead(_375)<br/>StorageLive(_378)<br/>_378 = Option::&lt;u128&gt;::None<br/></td></tr><tr><td align="left">_350 = update_spot_balances_and_cumulative_deposits(move _351, move _360, move _362, move _363, move _374, move _378)</td></tr></table>>];
    bb155__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageDead(_378)<br/>StorageDead(_374)<br/>StorageDead(_363)<br/>StorageDead(_362)<br/>StorageDead(_360)<br/>StorageDead(_351)<br/></td></tr><tr><td align="left">_349 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _350)</td></tr></table>>];
    bb156__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_350)<br/>_379 = discriminant(_349)<br/></td></tr><tr><td align="left">switchInt(move _379)</td></tr></table>>];
    bb157__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageLive(_383)<br/>_383 = ((_349 as Continue).0: ())<br/>_348 = _383<br/>StorageDead(_383)<br/>StorageDead(_365)<br/>StorageDead(_364)<br/>StorageDead(_361)<br/>StorageDead(_352)<br/>StorageDead(_349)<br/>StorageDead(_348)<br/>StorageLive(_384)<br/>StorageLive(_385)<br/>StorageLive(_386)<br/>StorageLive(_387)<br/>StorageLive(_388)<br/>_388 = &amp;_182<br/>StorageLive(_389)<br/>StorageLive(_390)<br/>StorageLive(_391)<br/>StorageLive(_392)<br/>_392 = _5<br/>_393 = Len(((*_3).5: [state::user::Order; 32]))<br/>_394 = Lt(_392, _393)<br/></td></tr><tr><td align="left">assert(move _394, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _393, _392)</td></tr></table>>];
    bb158__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageLive(_380)<br/>_380 = ((_349 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_382)<br/>_382 = _380<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _382)</td></tr></table>>];
    bb159__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageDead(_382)<br/>StorageDead(_380)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb160__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">_391 = &amp;((*_3).5: [state::user::Order; 32])[_392]<br/>StorageLive(_395)<br/>_395 = AssetType::Quote<br/></td></tr><tr><td align="left">_390 = Order::get_spot_position_update_direction(move _391, move _395)</td></tr></table>>];
    bb161__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">_389 = &amp;_390<br/>StorageDead(_395)<br/>StorageDead(_391)<br/></td></tr><tr><td align="left">_387 = &lt;SpotBalanceType as PartialEq&gt;::eq(move _388, move _389)</td></tr></table>>];
    bb162__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left">switchInt(move _387)</td></tr></table>>];
    bb163__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageDead(_392)<br/>StorageDead(_390)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/>StorageLive(_396)<br/>_396 = ()<br/>_386 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _396)<br/>StorageDead(_396)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb164__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageDead(_392)<br/>StorageDead(_390)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/>StorageLive(_397)<br/>_397 = error::ErrorCode::FailedToFillOnExternalMarket<br/>StorageLive(_398)<br/>StorageLive(_399)<br/>StorageLive(_400)<br/>StorageLive(_401)<br/>StorageLive(_402)<br/>StorageLive(_403)<br/>StorageLive(_404)<br/>StorageLive(_405)<br/>StorageLive(_406)<br/>StorageLive(_407)<br/>StorageLive(_408)<br/>_823 = const _<br/>_408 = &amp;(*_823)<br/>_407 = &amp;(*_408)<br/>_406 = move _407 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_407)<br/>StorageLive(_410)<br/>StorageLive(_411)<br/>StorageLive(_412)<br/>StorageLive(_413)<br/>StorageLive(_414)<br/>StorageLive(_415)<br/>StorageLive(_416)<br/>_416 = &amp;_397<br/>_415 = &amp;(*_416)<br/></td></tr><tr><td align="left">_414 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _415)</td></tr></table>>];
    bb165__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageDead(_415)<br/>_413 = [move _414]<br/>StorageDead(_414)<br/>_412 = &amp;_413<br/>_411 = &amp;(*_412)<br/>_410 = move _411 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_411)<br/></td></tr><tr><td align="left">_405 = Arguments::&lt;'_&gt;::new_v1(move _406, move _410)</td></tr></table>>];
    bb166__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageDead(_410)<br/>StorageDead(_406)<br/></td></tr><tr><td align="left">_404 = format(move _405)</td></tr></table>>];
    bb167__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageDead(_405)<br/>StorageDead(_416)<br/>StorageDead(_413)<br/>StorageDead(_412)<br/>StorageDead(_408)<br/>_403 = move _404<br/>StorageDead(_404)<br/>_402 = &amp;_403<br/>_401 = &amp;(*_402)<br/></td></tr><tr><td align="left">_400 = &lt;String as Deref&gt;::deref(move _401)</td></tr></table>>];
    bb168__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">_399 = &amp;(*_400)<br/>StorageDead(_401)<br/></td></tr><tr><td align="left">_398 = solana_program::log::sol_log(move _399)</td></tr></table>>];
    bb169__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageDead(_399)<br/></td></tr><tr><td align="left">drop(_403)</td></tr></table>>];
    bb170__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageDead(_403)<br/>StorageDead(_402)<br/>StorageDead(_400)<br/>StorageDead(_398)<br/>StorageLive(_417)<br/>StorageLive(_418)<br/>StorageLive(_419)<br/>_419 = const &quot;Fill on external market lead to unexpected to update direction&quot;<br/>_418 = &amp;(*_419)<br/></td></tr><tr><td align="left">_417 = solana_program::log::sol_log(move _418)</td></tr></table>>];
    bb171__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageDead(_418)<br/>StorageDead(_419)<br/>StorageDead(_417)<br/>StorageLive(_420)<br/>_420 = _397<br/>_386 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _420)<br/>StorageDead(_420)<br/>StorageDead(_397)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb172__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">StorageDead(_387)<br/></td></tr><tr><td align="left">_385 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _386)</td></tr></table>>];
    bb173__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageDead(_386)<br/>_421 = discriminant(_385)<br/></td></tr><tr><td align="left">switchInt(move _421)</td></tr></table>>];
    bb174__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageLive(_425)<br/>_425 = ((_385 as Continue).0: ())<br/>_384 = _425<br/>StorageDead(_425)<br/>StorageDead(_385)<br/>StorageDead(_384)<br/>StorageLive(_426)<br/>StorageLive(_427)<br/>StorageLive(_428)<br/>_428 = _5<br/>_429 = Len(((*_3).5: [state::user::Order; 32]))<br/>_430 = Lt(_428, _429)<br/></td></tr><tr><td align="left">assert(move _430, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _429, _428)</td></tr></table>>];
    bb175__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageLive(_422)<br/>_422 = ((_385 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_424)<br/>_424 = _422<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _424)</td></tr></table>>];
    bb176__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageDead(_424)<br/>StorageDead(_422)<br/>StorageDead(_385)<br/>StorageDead(_384)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb177__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">_427 = &amp;((*_3).5: [state::user::Order; 32])[_428]<br/>StorageLive(_431)<br/>_431 = AssetType::Quote<br/></td></tr><tr><td align="left">_426 = Order::get_spot_position_update_direction(move _427, move _431)</td></tr></table>>];
    bb178__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageDead(_431)<br/>StorageDead(_427)<br/>StorageDead(_428)<br/>StorageLive(_432)<br/>StorageLive(_433)<br/>StorageLive(_434)<br/>StorageLive(_435)<br/>StorageLive(_436)<br/>StorageLive(_437)<br/>StorageLive(_438)<br/>_438 = _280<br/></td></tr><tr><td align="left">_437 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _438)</td></tr></table>>];
    bb179__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageDead(_438)<br/></td></tr><tr><td align="left">_436 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _437)</td></tr></table>>];
    bb180__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_437)<br/>_439 = discriminant(_436)<br/></td></tr><tr><td align="left">switchInt(move _439)</td></tr></table>>];
    bb181__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageLive(_443)<br/>_443 = ((_436 as Continue).0: u128)<br/>_435 = _443<br/>StorageDead(_443)<br/>StorageLive(_444)<br/>StorageLive(_445)<br/>_445 = &amp;_426<br/>_444 = &amp;(*_445)<br/>StorageLive(_446)<br/>_446 = &amp;mut (*_2)<br/>StorageLive(_447)<br/>StorageLive(_448)<br/>StorageLive(_449)<br/>_449 = &amp;mut (*_3)<br/></td></tr><tr><td align="left">_448 = User::get_quote_spot_position_mut(move _449)</td></tr></table>>];
    bb182__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">StorageLive(_440)<br/>_440 = ((_436 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_442)<br/>_442 = _440<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _442)</td></tr></table>>];
    bb183__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageDead(_442)<br/>StorageDead(_440)<br/>StorageDead(_435)<br/>StorageDead(_434)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb184__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">_447 = &amp;mut (*_448)<br/>StorageDead(_449)<br/>StorageLive(_450)<br/>StorageLive(_451)<br/>_451 = &amp;_426<br/>StorageLive(_452)<br/>_822 = const _<br/>_452 = &amp;(*_822)<br/></td></tr><tr><td align="left">_450 = &lt;SpotBalanceType as PartialEq&gt;::eq(move _451, move _452)</td></tr></table>>];
    bb185__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_452)<br/>StorageDead(_451)<br/>StorageLive(_454)<br/>StorageLive(_455)<br/>StorageLive(_456)<br/>StorageLive(_457)<br/>StorageLive(_458)<br/>_458 = _181<br/></td></tr><tr><td align="left">_457 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _458)</td></tr></table>>];
    bb186__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageDead(_458)<br/></td></tr><tr><td align="left">_456 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _457)</td></tr></table>>];
    bb187__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageDead(_457)<br/>_459 = discriminant(_456)<br/></td></tr><tr><td align="left">switchInt(move _459)</td></tr></table>>];
    bb188__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageLive(_463)<br/>_463 = ((_456 as Continue).0: u128)<br/>_455 = _463<br/>StorageDead(_463)<br/>_454 = Option::&lt;u128&gt;::Some(move _455)<br/>StorageDead(_455)<br/></td></tr><tr><td align="left">_434 = update_spot_balances_and_cumulative_deposits(move _435, move _444, move _446, move _447, move _450, move _454)</td></tr></table>>];
    bb189__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageLive(_460)<br/>_460 = ((_456 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_462)<br/>_462 = _460<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _462)</td></tr></table>>];
    bb190__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_462)<br/>StorageDead(_460)<br/>StorageDead(_455)<br/>StorageDead(_454)<br/>StorageDead(_450)<br/>StorageDead(_447)<br/>StorageDead(_446)<br/>StorageDead(_444)<br/>StorageDead(_435)<br/>StorageDead(_434)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb191__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageDead(_454)<br/>StorageDead(_450)<br/>StorageDead(_447)<br/>StorageDead(_446)<br/>StorageDead(_444)<br/>StorageDead(_435)<br/></td></tr><tr><td align="left">_433 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _434)</td></tr></table>>];
    bb192__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageDead(_434)<br/>_464 = discriminant(_433)<br/></td></tr><tr><td align="left">switchInt(move _464)</td></tr></table>>];
    bb193__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageLive(_468)<br/>_468 = ((_433 as Continue).0: ())<br/>_432 = _468<br/>StorageDead(_468)<br/>StorageDead(_456)<br/>StorageDead(_448)<br/>StorageDead(_445)<br/>StorageDead(_436)<br/>StorageDead(_433)<br/>StorageDead(_432)<br/>StorageLive(_469)<br/>StorageLive(_470)<br/>StorageLive(_471)<br/>StorageLive(_472)<br/>_472 = &amp;mut (*_3)<br/>StorageLive(_473)<br/>StorageLive(_474)<br/>StorageLive(_475)<br/>StorageLive(_476)<br/>StorageLive(_477)<br/>_477 = _249<br/></td></tr><tr><td align="left">_476 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _477)</td></tr></table>>];
    bb194__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageLive(_465)<br/>_465 = ((_433 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_467)<br/>_467 = _465<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _467)</td></tr></table>>];
    bb195__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageDead(_467)<br/>StorageDead(_465)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb196__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageDead(_477)<br/></td></tr><tr><td align="left">_475 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _476)</td></tr></table>>];
    bb197__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_476)<br/>_478 = discriminant(_475)<br/></td></tr><tr><td align="left">switchInt(move _478)</td></tr></table>>];
    bb198__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageLive(_482)<br/>_482 = ((_475 as Continue).0: i64)<br/>_474 = _482<br/>StorageDead(_482)<br/>_483 = Eq(_474, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _483, &quot;attempt to negate `{}`, which would overflow&quot;, _474)</td></tr></table>>];
    bb199__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">StorageLive(_479)<br/>_479 = ((_475 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_481)<br/>_481 = _479<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _481)</td></tr></table>>];
    bb200__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageDead(_481)<br/>StorageDead(_479)<br/>StorageDead(_474)<br/>StorageDead(_473)<br/>StorageDead(_472)<br/>StorageDead(_471)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb201__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">_473 = Neg(move _474)<br/>StorageDead(_474)<br/></td></tr><tr><td align="left">_471 = User::update_cumulative_spot_fees(move _472, move _473)</td></tr></table>>];
    bb202__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_473)<br/>StorageDead(_472)<br/></td></tr><tr><td align="left">_470 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _471)</td></tr></table>>];
    bb203__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_471)<br/>_484 = discriminant(_470)<br/></td></tr><tr><td align="left">switchInt(move _484)</td></tr></table>>];
    bb204__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageLive(_488)<br/>_488 = ((_470 as Continue).0: ())<br/>_469 = _488<br/>StorageDead(_488)<br/>StorageDead(_475)<br/>StorageDead(_470)<br/>StorageDead(_469)<br/>StorageLive(_489)<br/>StorageLive(_490)<br/>StorageLive(_491)<br/>StorageLive(_492)<br/>_492 = &amp;mut (*_4)<br/>StorageLive(_493)<br/>_493 = ((*_1).58: u8)<br/>StorageLive(_494)<br/>StorageLive(_495)<br/>StorageLive(_496)<br/>StorageLive(_497)<br/>_497 = _181<br/></td></tr><tr><td align="left">_496 = &lt;u64 as Cast&gt;::cast::&lt;u64&gt;(move _497)</td></tr></table>>];
    bb205__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageLive(_485)<br/>_485 = ((_470 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_487)<br/>_487 = _485<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _487)</td></tr></table>>];
    bb206__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageDead(_487)<br/>StorageDead(_485)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb207__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">StorageDead(_497)<br/></td></tr><tr><td align="left">_495 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _496)</td></tr></table>>];
    bb208__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_496)<br/>_498 = discriminant(_495)<br/></td></tr><tr><td align="left">switchInt(move _498)</td></tr></table>>];
    bb209__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageLive(_502)<br/>_502 = ((_495 as Continue).0: u64)<br/>_494 = _502<br/>StorageDead(_502)<br/>StorageLive(_503)<br/>_503 = _10<br/></td></tr><tr><td align="left">_491 = UserStats::update_taker_volume_30d(move _492, move _493, move _494, move _503)</td></tr></table>>];
    bb210__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageLive(_499)<br/>_499 = ((_495 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_501)<br/>_501 = _499<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _501)</td></tr></table>>];
    bb211__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageDead(_501)<br/>StorageDead(_499)<br/>StorageDead(_494)<br/>StorageDead(_493)<br/>StorageDead(_492)<br/>StorageDead(_491)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb212__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_503)<br/>StorageDead(_494)<br/>StorageDead(_493)<br/>StorageDead(_492)<br/></td></tr><tr><td align="left">_490 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _491)</td></tr></table>>];
    bb213__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_491)<br/>_504 = discriminant(_490)<br/></td></tr><tr><td align="left">switchInt(move _504)</td></tr></table>>];
    bb214__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">StorageLive(_508)<br/>_508 = ((_490 as Continue).0: ())<br/>_489 = _508<br/>StorageDead(_508)<br/>StorageDead(_495)<br/>StorageDead(_490)<br/>StorageDead(_489)<br/>StorageLive(_509)<br/>StorageLive(_510)<br/>StorageLive(_511)<br/>StorageLive(_512)<br/>_512 = &amp;mut (*_4)<br/>StorageLive(_513)<br/>StorageLive(_514)<br/>StorageLive(_515)<br/>StorageLive(_516)<br/>_516 = _249<br/></td></tr><tr><td align="left">_515 = &lt;u64 as Cast&gt;::cast::&lt;u64&gt;(move _516)</td></tr></table>>];
    bb215__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">StorageLive(_505)<br/>_505 = ((_490 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_507)<br/>_507 = _505<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _507)</td></tr></table>>];
    bb216__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageDead(_507)<br/>StorageDead(_505)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb217__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageDead(_516)<br/></td></tr><tr><td align="left">_514 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _515)</td></tr></table>>];
    bb218__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageDead(_515)<br/>_517 = discriminant(_514)<br/></td></tr><tr><td align="left">switchInt(move _517)</td></tr></table>>];
    bb219__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageLive(_521)<br/>_521 = ((_514 as Continue).0: u64)<br/>_513 = _521<br/>StorageDead(_521)<br/></td></tr><tr><td align="left">_511 = UserStats::increment_total_fees(move _512, move _513)</td></tr></table>>];
    bb220__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageLive(_518)<br/>_518 = ((_514 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_520)<br/>_520 = _518<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _520)</td></tr></table>>];
    bb221__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageDead(_520)<br/>StorageDead(_518)<br/>StorageDead(_513)<br/>StorageDead(_512)<br/>StorageDead(_511)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb222__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">StorageDead(_513)<br/>StorageDead(_512)<br/></td></tr><tr><td align="left">_510 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _511)</td></tr></table>>];
    bb223__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">StorageDead(_511)<br/>_522 = discriminant(_510)<br/></td></tr><tr><td align="left">switchInt(move _522)</td></tr></table>>];
    bb224__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageLive(_526)<br/>_526 = ((_510 as Continue).0: ())<br/>_509 = _526<br/>StorageDead(_526)<br/>StorageDead(_514)<br/>StorageDead(_510)<br/>StorageDead(_509)<br/>StorageLive(_527)<br/>StorageLive(_528)<br/>StorageLive(_529)<br/>StorageLive(_530)<br/>StorageLive(_531)<br/>StorageLive(_532)<br/>_532 = _5<br/>_533 = Len(((*_3).5: [state::user::Order; 32]))<br/>_534 = Lt(_532, _533)<br/></td></tr><tr><td align="left">assert(move _534, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _533, _532)</td></tr></table>>];
    bb225__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">StorageLive(_523)<br/>_523 = ((_510 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_525)<br/>_525 = _523<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _525)</td></tr></table>>];
    bb226__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageDead(_525)<br/>StorageDead(_523)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb227__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">_531 = &amp;mut ((*_3).5: [state::user::Order; 32])[_532]<br/>_530 = &amp;mut (*_531)<br/>StorageLive(_535)<br/>_535 = _179<br/>StorageLive(_536)<br/>_536 = _181<br/></td></tr><tr><td align="left">_529 = update_order_after_fill(move _530, move _535, move _536)</td></tr></table>>];
    bb228__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageDead(_536)<br/>StorageDead(_535)<br/>StorageDead(_530)<br/></td></tr><tr><td align="left">_528 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _529)</td></tr></table>>];
    bb229__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageDead(_529)<br/>_537 = discriminant(_528)<br/></td></tr><tr><td align="left">switchInt(move _537)</td></tr></table>>];
    bb230__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">StorageLive(_541)<br/>_541 = ((_528 as Continue).0: ())<br/>_527 = _541<br/>StorageDead(_541)<br/>StorageDead(_532)<br/>StorageDead(_531)<br/>StorageDead(_528)<br/>StorageDead(_527)<br/>StorageLive(_542)<br/>StorageLive(_543)<br/>_543 = _5<br/>_544 = Len(((*_3).5: [state::user::Order; 32]))<br/>_545 = Lt(_543, _544)<br/></td></tr><tr><td align="left">assert(move _545, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _544, _543)</td></tr></table>>];
    bb231__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageLive(_538)<br/>_538 = ((_528 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_540)<br/>_540 = _538<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _540)</td></tr></table>>];
    bb232__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">StorageDead(_540)<br/>StorageDead(_538)<br/>StorageDead(_532)<br/>StorageDead(_531)<br/>StorageDead(_528)<br/>StorageDead(_527)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb233__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">_542 = (((*_3).5: [state::user::Order; 32])[_543].17: controller::position::PositionDirection)<br/>StorageDead(_543)<br/>StorageLive(_546)<br/>StorageLive(_547)<br/>StorageLive(_548)<br/>_548 = _5<br/>_549 = Len(((*_3).5: [state::user::Order; 32]))<br/>_550 = Lt(_548, _549)<br/></td></tr><tr><td align="left">assert(move _550, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _549, _548)</td></tr></table>>];
    bb234__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">_547 = &amp;((*_3).5: [state::user::Order; 32])[_548]<br/></td></tr><tr><td align="left">_546 = Order::update_open_bids_and_asks(move _547)</td></tr></table>>];
    bb235__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageDead(_547)<br/>StorageDead(_548)<br/>StorageLive(_551)<br/>StorageLive(_552)<br/>StorageLive(_553)<br/>StorageLive(_554)<br/>StorageLive(_555)<br/>StorageLive(_556)<br/>StorageLive(_557)<br/>StorageLive(_558)<br/>_558 = &amp;mut (*_3)<br/>StorageLive(_559)<br/>_559 = ((*_1).42: u16)<br/></td></tr><tr><td align="left">_557 = User::force_get_spot_position_mut(move _558, move _559)</td></tr></table>>];
    bb236__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageDead(_559)<br/>StorageDead(_558)<br/></td></tr><tr><td align="left">_556 = &lt;std::result::Result&lt;&amp;mut SpotPosition, error::ErrorCode&gt; as Try&gt;::branch(move _557)</td></tr></table>>];
    bb237__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">StorageDead(_557)<br/>_560 = discriminant(_556)<br/></td></tr><tr><td align="left">switchInt(move _560)</td></tr></table>>];
    bb238__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left" balign="left">StorageLive(_564)<br/>_564 = move ((_556 as Continue).0: &amp;mut state::user::SpotPosition)<br/>_555 = &amp;mut (*_564)<br/>StorageDead(_564)<br/>_554 = &amp;mut (*_555)<br/>StorageLive(_565)<br/>StorageLive(_566)<br/>_566 = &amp;_542<br/>_565 = &amp;(*_566)<br/>StorageLive(_567)<br/>_567 = _179<br/>StorageLive(_568)<br/>_568 = _546<br/></td></tr><tr><td align="left">_553 = decrease_spot_open_bids_and_asks(move _554, move _565, move _567, move _568)</td></tr></table>>];
    bb239__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageLive(_561)<br/>_561 = ((_556 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_563)<br/>_563 = _561<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _563)</td></tr></table>>];
    bb240__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">StorageDead(_563)<br/>StorageDead(_561)<br/>StorageDead(_554)<br/>StorageDead(_553)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb241__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_568)<br/>StorageDead(_567)<br/>StorageDead(_565)<br/>StorageDead(_554)<br/></td></tr><tr><td align="left">_552 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _553)</td></tr></table>>];
    bb242__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageDead(_553)<br/>_569 = discriminant(_552)<br/></td></tr><tr><td align="left">switchInt(move _569)</td></tr></table>>];
    bb243__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageLive(_573)<br/>_573 = ((_552 as Continue).0: ())<br/>_551 = _573<br/>StorageDead(_573)<br/>StorageDead(_566)<br/>StorageDead(_556)<br/>StorageDead(_555)<br/>StorageDead(_552)<br/>StorageDead(_551)<br/>StorageLive(_574)<br/>StorageLive(_575)<br/>StorageLive(_576)<br/>_576 = move _7<br/>StorageLive(_577)<br/>_577 = move _8<br/>_575 = (move _576, move _577)<br/>StorageDead(_577)<br/>StorageDead(_576)<br/>_579 = discriminant((_575.0: std::option::Option&lt;&amp;mut state::user::User&gt;))<br/></td></tr><tr><td align="left">switchInt(move _579)</td></tr></table>>];
    bb244__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageLive(_570)<br/>_570 = ((_552 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_572)<br/>_572 = _570<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _572)</td></tr></table>>];
    bb245__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">StorageDead(_572)<br/>StorageDead(_570)<br/>StorageDead(_566)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb246__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">_574 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb247__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">_578 = discriminant((_575.1: std::option::Option&lt;&amp;mut state::user::UserStats&gt;))<br/></td></tr><tr><td align="left">switchInt(move _578)</td></tr></table>>];
    bb248__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageLive(_580)<br/>_580 = move (((_575.0: std::option::Option&lt;&amp;mut state::user::User&gt;) as Some).0: &amp;mut state::user::User)<br/>StorageLive(_581)<br/>_581 = move (((_575.1: std::option::Option&lt;&amp;mut state::user::UserStats&gt;) as Some).0: &amp;mut state::user::UserStats)<br/>StorageLive(_582)<br/>StorageLive(_583)<br/>StorageLive(_584)<br/>_584 = _252<br/>_583 = Gt(move _584, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _583)</td></tr></table>>];
    bb249__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">StorageDead(_584)<br/>StorageLive(_585)<br/>StorageLive(_586)<br/>StorageLive(_587)<br/>StorageLive(_588)<br/>StorageLive(_589)<br/>StorageLive(_590)<br/>StorageLive(_591)<br/>_591 = _252<br/></td></tr><tr><td align="left">_590 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _591)</td></tr></table>>];
    bb250__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageDead(_591)<br/></td></tr><tr><td align="left">_589 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _590)</td></tr></table>>];
    bb251__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">StorageDead(_590)<br/>_592 = discriminant(_589)<br/></td></tr><tr><td align="left">switchInt(move _592)</td></tr></table>>];
    bb252__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageLive(_596)<br/>_596 = ((_589 as Continue).0: u128)<br/>_588 = _596<br/>StorageDead(_596)<br/>StorageLive(_597)<br/>StorageLive(_598)<br/>_821 = const _<br/>_598 = &amp;(*_821)<br/>_597 = &amp;(*_598)<br/>StorageLive(_600)<br/>_600 = &amp;mut (*_2)<br/>StorageLive(_601)<br/>StorageLive(_602)<br/>StorageLive(_603)<br/>StorageLive(_604)<br/>_604 = &amp;mut (*_580)<br/></td></tr><tr><td align="left">_603 = User::get_quote_spot_position_mut(move _604)</td></tr></table>>];
    bb253__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageLive(_593)<br/>_593 = ((_589 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_595)<br/>_595 = _593<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _595)</td></tr></table>>];
    bb254__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageDead(_595)<br/>StorageDead(_593)<br/>StorageDead(_588)<br/>StorageDead(_587)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb255__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">_602 = &amp;mut (*_603)<br/>_601 = move _602 as &amp;mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize))<br/>StorageDead(_604)<br/>StorageDead(_602)<br/></td></tr><tr><td align="left">_587 = update_spot_balances(move _588, move _597, move _600, move _601, const false)</td></tr></table>>];
    bb256__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageDead(_601)<br/>StorageDead(_600)<br/>StorageDead(_597)<br/>StorageDead(_588)<br/></td></tr><tr><td align="left">_586 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _587)</td></tr></table>>];
    bb257__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">StorageDead(_587)<br/>_605 = discriminant(_586)<br/></td></tr><tr><td align="left">switchInt(move _605)</td></tr></table>>];
    bb258__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageLive(_609)<br/>_609 = ((_586 as Continue).0: ())<br/>_585 = _609<br/>StorageDead(_609)<br/>StorageDead(_603)<br/>StorageDead(_598)<br/>StorageDead(_589)<br/>StorageDead(_586)<br/>StorageDead(_585)<br/>StorageLive(_610)<br/>StorageLive(_611)<br/>StorageLive(_612)<br/>StorageLive(_613)<br/>_613 = &amp;mut (*_580)<br/>StorageLive(_614)<br/>StorageLive(_615)<br/>StorageLive(_616)<br/>StorageLive(_617)<br/>_617 = _252<br/></td></tr><tr><td align="left">_616 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _617)</td></tr></table>>];
    bb259__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">StorageLive(_606)<br/>_606 = ((_586 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_608)<br/>_608 = _606<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _608)</td></tr></table>>];
    bb260__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageDead(_608)<br/>StorageDead(_606)<br/>StorageDead(_603)<br/>StorageDead(_598)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb261__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageDead(_617)<br/></td></tr><tr><td align="left">_615 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _616)</td></tr></table>>];
    bb262__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageDead(_616)<br/>_618 = discriminant(_615)<br/></td></tr><tr><td align="left">switchInt(move _618)</td></tr></table>>];
    bb263__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageLive(_622)<br/>_622 = ((_615 as Continue).0: i64)<br/>_614 = _622<br/>StorageDead(_622)<br/></td></tr><tr><td align="left">_612 = User::update_cumulative_spot_fees(move _613, move _614)</td></tr></table>>];
    bb264__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageLive(_619)<br/>_619 = ((_615 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_621)<br/>_621 = _619<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _621)</td></tr></table>>];
    bb265__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">StorageDead(_621)<br/>StorageDead(_619)<br/>StorageDead(_614)<br/>StorageDead(_613)<br/>StorageDead(_612)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb266__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">StorageDead(_614)<br/>StorageDead(_613)<br/></td></tr><tr><td align="left">_611 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _612)</td></tr></table>>];
    bb267__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">StorageDead(_612)<br/>_623 = discriminant(_611)<br/></td></tr><tr><td align="left">switchInt(move _623)</td></tr></table>>];
    bb268__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageLive(_627)<br/>_627 = ((_611 as Continue).0: ())<br/>_610 = _627<br/>StorageDead(_627)<br/>StorageDead(_615)<br/>StorageDead(_611)<br/>StorageDead(_610)<br/>_582 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb269__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left" balign="left">StorageLive(_624)<br/>_624 = ((_611 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_626)<br/>_626 = _624<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _626)</td></tr></table>>];
    bb270__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageDead(_626)<br/>StorageDead(_624)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb271__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">StorageDead(_584)<br/>_582 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb272__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">StorageDead(_583)<br/>StorageDead(_582)<br/>StorageLive(_628)<br/>StorageLive(_629)<br/>_629 = &amp;mut (*_580)<br/>StorageLive(_630)<br/>_630 = _11<br/></td></tr><tr><td align="left">_628 = User::update_last_active_slot(move _629, move _630)</td></tr></table>>];
    bb273__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">StorageDead(_630)<br/>StorageDead(_629)<br/>StorageDead(_628)<br/>StorageLive(_631)<br/>StorageLive(_632)<br/>StorageLive(_633)<br/>StorageLive(_634)<br/>_634 = &amp;mut (*_581)<br/>StorageLive(_635)<br/>StorageLive(_636)<br/>StorageLive(_637)<br/>StorageLive(_638)<br/>_638 = _181<br/></td></tr><tr><td align="left">_637 = &lt;u64 as Cast&gt;::cast::&lt;u64&gt;(move _638)</td></tr></table>>];
    bb274__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_638)<br/></td></tr><tr><td align="left">_636 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _637)</td></tr></table>>];
    bb275__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">StorageDead(_637)<br/>_639 = discriminant(_636)<br/></td></tr><tr><td align="left">switchInt(move _639)</td></tr></table>>];
    bb276__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">StorageLive(_643)<br/>_643 = ((_636 as Continue).0: u64)<br/>_635 = _643<br/>StorageDead(_643)<br/>StorageLive(_644)<br/>_644 = _10<br/></td></tr><tr><td align="left">_633 = UserStats::update_filler_volume(move _634, move _635, move _644)</td></tr></table>>];
    bb277__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageLive(_640)<br/>_640 = ((_636 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_642)<br/>_642 = _640<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _642)</td></tr></table>>];
    bb278__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">StorageDead(_642)<br/>StorageDead(_640)<br/>StorageDead(_635)<br/>StorageDead(_634)<br/>StorageDead(_633)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb279__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">StorageDead(_644)<br/>StorageDead(_635)<br/>StorageDead(_634)<br/></td></tr><tr><td align="left">_632 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _633)</td></tr></table>>];
    bb280__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageDead(_633)<br/>_645 = discriminant(_632)<br/></td></tr><tr><td align="left">switchInt(move _645)</td></tr></table>>];
    bb281__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">StorageLive(_649)<br/>_649 = ((_632 as Continue).0: ())<br/>_631 = _649<br/>StorageDead(_649)<br/>StorageDead(_636)<br/>StorageDead(_632)<br/>StorageDead(_631)<br/>_574 = const ()<br/>StorageDead(_581)<br/>StorageDead(_580)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb282__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">StorageLive(_646)<br/>_646 = ((_632 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_648)<br/>_648 = _646<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _648)</td></tr></table>>];
    bb283__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_648)<br/>StorageDead(_646)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb284__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">StorageDead(_575)<br/>StorageDead(_574)<br/>StorageLive(_650)<br/>StorageLive(_651)<br/>StorageLive(_652)<br/>_652 = _251<br/>_651 = Ne(move _652, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _651)</td></tr></table>>];
    bb285__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">StorageDead(_652)<br/>StorageLive(_653)<br/>StorageLive(_654)<br/>StorageLive(_655)<br/>StorageLive(_656)<br/>StorageLive(_657)<br/>StorageLive(_658)<br/>StorageLive(_659)<br/>StorageLive(_660)<br/>_660 = _251<br/></td></tr><tr><td align="left">_659 = core::num::&lt;impl i64&gt;::unsigned_abs(move _660)</td></tr></table>>];
    bb286__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">StorageDead(_660)<br/></td></tr><tr><td align="left">_658 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _659)</td></tr></table>>];
    bb287__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageDead(_659)<br/></td></tr><tr><td align="left">_657 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _658)</td></tr></table>>];
    bb288__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">StorageDead(_658)<br/>_661 = discriminant(_657)<br/></td></tr><tr><td align="left">switchInt(move _661)</td></tr></table>>];
    bb289__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">StorageLive(_665)<br/>_665 = ((_657 as Continue).0: u128)<br/>_656 = _665<br/>StorageDead(_665)<br/>StorageLive(_666)<br/>StorageLive(_667)<br/>StorageLive(_668)<br/>_668 = _251<br/>_667 = Gt(move _668, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _667)</td></tr></table>>];
    bb290__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left" balign="left">StorageLive(_662)<br/>_662 = ((_657 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_664)<br/>_664 = _662<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _664)</td></tr></table>>];
    bb291__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">StorageDead(_664)<br/>StorageDead(_662)<br/>StorageDead(_656)<br/>StorageDead(_655)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb292__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageDead(_668)<br/>StorageLive(_669)<br/>_819 = const _<br/>_669 = &amp;(*_819)<br/>_666 = &amp;(*_669)<br/>StorageDead(_669)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb293__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">StorageDead(_668)<br/>StorageLive(_671)<br/>_820 = const _<br/>_671 = &amp;(*_820)<br/>_666 = &amp;(*_671)<br/>StorageDead(_671)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb294__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">StorageDead(_667)<br/>StorageLive(_673)<br/>_673 = &amp;mut (*_2)<br/>StorageLive(_674)<br/>StorageLive(_675)<br/>StorageLive(_676)<br/>_676 = &amp;mut ((*_1).8: state::perp_market::PoolBalance)<br/>_675 = &amp;mut (*_676)<br/>_674 = move _675 as &amp;mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize))<br/>StorageDead(_675)<br/></td></tr><tr><td align="left">_655 = update_spot_balances(move _656, move _666, move _673, move _674, const false)</td></tr></table>>];
    bb295__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">StorageDead(_674)<br/>StorageDead(_673)<br/>StorageDead(_666)<br/>StorageDead(_656)<br/></td></tr><tr><td align="left">_654 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _655)</td></tr></table>>];
    bb296__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">StorageDead(_655)<br/>_677 = discriminant(_654)<br/></td></tr><tr><td align="left">switchInt(move _677)</td></tr></table>>];
    bb297__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageLive(_681)<br/>_681 = ((_654 as Continue).0: ())<br/>_653 = _681<br/>StorageDead(_681)<br/>StorageDead(_676)<br/>StorageDead(_657)<br/>StorageDead(_654)<br/>StorageDead(_653)<br/>_650 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb298__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left" balign="left">StorageLive(_678)<br/>_678 = ((_654 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_680)<br/>_680 = _678<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _680)</td></tr></table>>];
    bb299__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left" balign="left">StorageDead(_680)<br/>StorageDead(_678)<br/>StorageDead(_676)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb300__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageDead(_652)<br/>_650 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb301__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">StorageDead(_651)<br/>StorageDead(_650)<br/>StorageLive(_682)<br/>StorageLive(_683)<br/>StorageLive(_684)<br/>StorageLive(_685)<br/>_685 = ((*_1).10: u128)<br/>StorageLive(_686)<br/>StorageLive(_687)<br/>StorageLive(_688)<br/>StorageLive(_689)<br/>_689 = _250<br/></td></tr><tr><td align="left">_688 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _689)</td></tr></table>>];
    bb302__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">StorageDead(_689)<br/></td></tr><tr><td align="left">_687 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _688)</td></tr></table>>];
    bb303__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageDead(_688)<br/>_690 = discriminant(_687)<br/></td></tr><tr><td align="left">switchInt(move _690)</td></tr></table>>];
    bb304__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageLive(_694)<br/>_694 = ((_687 as Continue).0: u128)<br/>_686 = _694<br/>StorageDead(_694)<br/></td></tr><tr><td align="left">_684 = &lt;u128 as SafeMath&gt;::safe_add(move _685, move _686)</td></tr></table>>];
    bb305__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">StorageLive(_691)<br/>_691 = ((_687 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_693)<br/>_693 = _691<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _693)</td></tr></table>>];
    bb306__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">StorageDead(_693)<br/>StorageDead(_691)<br/>StorageDead(_686)<br/>StorageDead(_685)<br/>StorageDead(_684)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb307__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">StorageDead(_686)<br/>StorageDead(_685)<br/></td></tr><tr><td align="left">_683 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _684)</td></tr></table>>];
    bb308__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">StorageDead(_684)<br/>_695 = discriminant(_683)<br/></td></tr><tr><td align="left">switchInt(move _695)</td></tr></table>>];
    bb309__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">StorageLive(_699)<br/>_699 = ((_683 as Continue).0: u128)<br/>_682 = _699<br/>StorageDead(_699)<br/>((*_1).10: u128) = move _682<br/>StorageDead(_682)<br/>StorageDead(_687)<br/>StorageDead(_683)<br/>StorageLive(_700)<br/>StorageLive(_701)<br/>_701 = ((*_1).29: u64)<br/>StorageLive(_702)<br/>StorageLive(_703)<br/>StorageLive(_704)<br/>StorageLive(_705)<br/>_705 = _701<br/></td></tr><tr><td align="left">_704 = core::num::&lt;impl u64&gt;::checked_add(move _705, const 1_u64)</td></tr></table>>];
    bb310__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">StorageLive(_696)<br/>_696 = ((_683 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_698)<br/>_698 = _696<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _698)</td></tr></table>>];
    bb311__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">StorageDead(_698)<br/>StorageDead(_696)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb312__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageDead(_705)<br/>StorageLive(_706)<br/>_706 = Option::&lt;u64&gt;::Some(const 1_u64)<br/></td></tr><tr><td align="left">_703 = Option::&lt;u64&gt;::or(move _704, move _706)</td></tr></table>>];
    bb313__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageDead(_706)<br/>StorageDead(_704)<br/></td></tr><tr><td align="left">_702 = Option::&lt;u64&gt;::unwrap(move _703)</td></tr></table>>];
    bb314__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">StorageDead(_703)<br/>((*_1).29: u64) = move _702<br/>StorageDead(_702)<br/>_700 = _701<br/>StorageDead(_701)<br/>StorageLive(_707)<br/>StorageLive(_708)<br/>StorageLive(_709)<br/>StorageLive(_710)<br/>_710 = _10<br/>StorageLive(_711)<br/>_711 = OrderAction::Fill<br/>StorageLive(_712)<br/>StorageLive(_713)<br/>StorageLive(_714)<br/>StorageLive(_715)<br/>_715 = &amp;(*_14)<br/></td></tr><tr><td align="left">_714 = &lt;dyn SpotFulfillmentParams as SpotFulfillmentParams&gt;::get_order_action_explanation(move _715)</td></tr></table>>];
    bb315__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">StorageDead(_715)<br/></td></tr><tr><td align="left">_713 = &lt;std::result::Result&lt;OrderActionExplanation, error::ErrorCode&gt; as Try&gt;::branch(move _714)</td></tr></table>>];
    bb316__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageDead(_714)<br/>_716 = discriminant(_713)<br/></td></tr><tr><td align="left">switchInt(move _716)</td></tr></table>>];
    bb317__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageLive(_720)<br/>_720 = ((_713 as Continue).0: state::events::OrderActionExplanation)<br/>_712 = _720<br/>StorageDead(_720)<br/>StorageLive(_721)<br/>StorageLive(_722)<br/>_722 = _5<br/>_723 = Len(((*_3).5: [state::user::Order; 32]))<br/>_724 = Lt(_722, _723)<br/></td></tr><tr><td align="left">assert(move _724, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _723, _722)</td></tr></table>>];
    bb318__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageLive(_717)<br/>_717 = ((_713 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_719)<br/>_719 = _717<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _719)</td></tr></table>>];
    bb319__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">StorageDead(_719)<br/>StorageDead(_717)<br/>StorageDead(_712)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/>StorageDead(_709)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb320__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">_721 = (((*_3).5: [state::user::Order; 32])[_722].11: u16)<br/>StorageLive(_725)<br/>StorageLive(_726)<br/>_726 = (*_9)<br/>_725 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _726)<br/>StorageDead(_726)<br/>StorageLive(_727)<br/>StorageLive(_728)<br/>_728 = _700<br/>_727 = Option::&lt;u64&gt;::Some(move _728)<br/>StorageDead(_728)<br/>StorageLive(_729)<br/>StorageLive(_730)<br/>_730 = _252<br/>_729 = Option::&lt;u64&gt;::Some(move _730)<br/>StorageDead(_730)<br/>StorageLive(_731)<br/>StorageLive(_732)<br/>_732 = _179<br/>_731 = Option::&lt;u64&gt;::Some(move _732)<br/>StorageDead(_732)<br/>StorageLive(_733)<br/>StorageLive(_734)<br/>StorageLive(_735)<br/>StorageLive(_736)<br/>StorageLive(_737)<br/>_737 = _181<br/></td></tr><tr><td align="left">_736 = &lt;u64 as Cast&gt;::cast::&lt;u64&gt;(move _737)</td></tr></table>>];
    bb321__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">StorageDead(_737)<br/></td></tr><tr><td align="left">_735 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _736)</td></tr></table>>];
    bb322__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageDead(_736)<br/>_738 = discriminant(_735)<br/></td></tr><tr><td align="left">switchInt(move _738)</td></tr></table>>];
    bb323__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageLive(_742)<br/>_742 = ((_735 as Continue).0: u64)<br/>_734 = _742<br/>StorageDead(_742)<br/>_733 = Option::&lt;u64&gt;::Some(move _734)<br/>StorageDead(_734)<br/>StorageLive(_743)<br/>StorageLive(_744)<br/>_744 = _249<br/>_743 = Option::&lt;u64&gt;::Some(move _744)<br/>StorageDead(_744)<br/>StorageLive(_745)<br/>_745 = Option::&lt;u64&gt;::Some(const 0_u64)<br/>StorageLive(_746)<br/>_746 = Option::&lt;u64&gt;::None<br/>StorageLive(_747)<br/>_747 = Option::&lt;i64&gt;::Some(const 0_i64)<br/>StorageLive(_748)<br/>StorageLive(_749)<br/>_749 = _183<br/>_748 = Option::&lt;u64&gt;::Some(move _749)<br/>StorageDead(_749)<br/>StorageLive(_750)<br/>StorageLive(_751)<br/>_751 = (*_6)<br/>_750 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _751)<br/>StorageDead(_751)<br/>StorageLive(_752)<br/>StorageLive(_753)<br/>StorageLive(_754)<br/>_754 = _5<br/>_755 = Len(((*_3).5: [state::user::Order; 32]))<br/>_756 = Lt(_754, _755)<br/></td></tr><tr><td align="left">assert(move _756, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _755, _754)</td></tr></table>>];
    bb324__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageLive(_739)<br/>_739 = ((_735 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_741)<br/>_741 = _739<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _741)</td></tr></table>>];
    bb325__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">StorageDead(_741)<br/>StorageDead(_739)<br/>StorageDead(_734)<br/>StorageDead(_733)<br/>StorageDead(_731)<br/>StorageDead(_729)<br/>StorageDead(_727)<br/>StorageDead(_725)<br/>StorageDead(_721)<br/>StorageDead(_712)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/>StorageDead(_709)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb326__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">_753 = ((*_3).5: [state::user::Order; 32])[_754]<br/>_752 = Option::&lt;Order&gt;::Some(move _753)<br/>StorageDead(_753)<br/>StorageLive(_757)<br/>_757 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::None<br/>StorageLive(_758)<br/>_758 = Option::&lt;Order&gt;::None<br/>StorageLive(_759)<br/>_759 = _15<br/>StorageLive(_760)<br/>_760 = Option::&lt;u64&gt;::None<br/>StorageLive(_761)<br/>_761 = Option::&lt;u64&gt;::None<br/>StorageLive(_762)<br/>_762 = Option::&lt;u64&gt;::None<br/>StorageLive(_763)<br/>_763 = Option::&lt;u64&gt;::None<br/>StorageLive(_764)<br/>_764 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">_709 = get_order_action_record(move _710, move _711, move _712, move _721, move _725, move _727, move _729, move _731, move _733, move _743, move _745, move _746, move _747, move _748, move _750, move _752, move _757, move _758, move _759, const 0_u8, move _760, move _761, move _762, move _763, move _764)</td></tr></table>>];
    bb327__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">StorageDead(_764)<br/>StorageDead(_763)<br/>StorageDead(_762)<br/>StorageDead(_761)<br/>StorageDead(_760)<br/>StorageDead(_759)<br/>StorageDead(_758)<br/>StorageDead(_757)<br/>StorageDead(_752)<br/>StorageDead(_750)<br/>StorageDead(_748)<br/>StorageDead(_747)<br/>StorageDead(_746)<br/>StorageDead(_745)<br/>StorageDead(_743)<br/>StorageDead(_733)<br/>StorageDead(_731)<br/>StorageDead(_729)<br/>StorageDead(_727)<br/>StorageDead(_725)<br/>StorageDead(_721)<br/>StorageDead(_712)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/></td></tr><tr><td align="left">_708 = &lt;std::result::Result&lt;OrderActionRecord, error::ErrorCode&gt; as Try&gt;::branch(move _709)</td></tr></table>>];
    bb328__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">StorageDead(_709)<br/>_765 = discriminant(_708)<br/></td></tr><tr><td align="left">switchInt(move _765)</td></tr></table>>];
    bb329__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">StorageLive(_769)<br/>_769 = move ((_708 as Continue).0: state::events::OrderActionRecord)<br/>_707 = move _769<br/>StorageDead(_769)<br/>StorageDead(_754)<br/>StorageDead(_735)<br/>StorageDead(_722)<br/>StorageDead(_713)<br/>StorageDead(_708)<br/>StorageLive(_770)<br/>StorageLive(_771)<br/>StorageLive(_772)<br/>StorageLive(_773)<br/>_773 = move _707<br/></td></tr><tr><td align="left">_772 = emit_stack::&lt;OrderActionRecord, 464&gt;(move _773)</td></tr></table>>];
    bb330__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">StorageLive(_766)<br/>_766 = ((_708 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_768)<br/>_768 = _766<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _768)</td></tr></table>>];
    bb331__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left" balign="left">StorageDead(_768)<br/>StorageDead(_766)<br/>StorageDead(_754)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb332__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">StorageDead(_773)<br/></td></tr><tr><td align="left">_771 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _772)</td></tr></table>>];
    bb333__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">StorageDead(_772)<br/>_774 = discriminant(_771)<br/></td></tr><tr><td align="left">switchInt(move _774)</td></tr></table>>];
    bb334__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left" balign="left">StorageLive(_778)<br/>_778 = ((_771 as Continue).0: ())<br/>_770 = _778<br/>StorageDead(_778)<br/>StorageDead(_771)<br/>StorageDead(_770)<br/>StorageLive(_779)<br/>StorageLive(_780)<br/>StorageLive(_781)<br/>StorageLive(_782)<br/>StorageLive(_783)<br/>StorageLive(_784)<br/>StorageLive(_785)<br/>_785 = _5<br/>_786 = Len(((*_3).5: [state::user::Order; 32]))<br/>_787 = Lt(_785, _786)<br/></td></tr><tr><td align="left">assert(move _787, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _786, _785)</td></tr></table>>];
    bb335__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">335</td></tr><tr><td align="left" balign="left">StorageLive(_775)<br/>_775 = ((_771 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_777)<br/>_777 = _775<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _777)</td></tr></table>>];
    bb336__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">336</td></tr><tr><td align="left" balign="left">StorageDead(_777)<br/>StorageDead(_775)<br/>StorageDead(_771)<br/>StorageDead(_770)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb337__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">337</td></tr><tr><td align="left" balign="left">_784 = &amp;((*_3).5: [state::user::Order; 32])[_785]<br/>StorageLive(_788)<br/>_788 = Option::&lt;i64&gt;::None<br/></td></tr><tr><td align="left">_783 = Order::get_base_asset_amount_unfilled(move _784, move _788)</td></tr></table>>];
    bb338__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">338</td></tr><tr><td align="left" balign="left">StorageDead(_788)<br/>StorageDead(_784)<br/></td></tr><tr><td align="left">_782 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _783)</td></tr></table>>];
    bb339__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">339</td></tr><tr><td align="left" balign="left">StorageDead(_783)<br/>_789 = discriminant(_782)<br/></td></tr><tr><td align="left">switchInt(move _789)</td></tr></table>>];
    bb340__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">340</td></tr><tr><td align="left" balign="left">StorageLive(_793)<br/>_793 = ((_782 as Continue).0: u64)<br/>_781 = _793<br/>StorageDead(_793)<br/>_780 = Eq(move _781, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _780)</td></tr></table>>];
    bb341__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">341</td></tr><tr><td align="left" balign="left">StorageLive(_790)<br/>_790 = ((_782 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_792)<br/>_792 = _790<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _792)</td></tr></table>>];
    bb342__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">342</td></tr><tr><td align="left" balign="left">StorageDead(_792)<br/>StorageDead(_790)<br/>StorageDead(_785)<br/>StorageDead(_782)<br/>StorageDead(_781)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb343__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">343</td></tr><tr><td align="left" balign="left">StorageDead(_785)<br/>StorageDead(_782)<br/>StorageDead(_781)<br/>StorageLive(_794)<br/>StorageLive(_795)<br/>_795 = &amp;mut (*_3)<br/>StorageLive(_796)<br/>StorageLive(_797)<br/>StorageLive(_798)<br/>_798 = _5<br/>_799 = Len(((*_3).5: [state::user::Order; 32]))<br/>_800 = Lt(_798, _799)<br/></td></tr><tr><td align="left">assert(move _800, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _799, _798)</td></tr></table>>];
    bb344__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">344</td></tr><tr><td align="left" balign="left">StorageDead(_785)<br/>StorageDead(_782)<br/>StorageDead(_781)<br/>_779 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb345__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">345</td></tr><tr><td align="left" balign="left">_797 = &amp;((*_3).5: [state::user::Order; 32])[_798]<br/></td></tr><tr><td align="left">_796 = Order::has_auction(move _797)</td></tr></table>>];
    bb346__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">346</td></tr><tr><td align="left" balign="left">StorageDead(_797)<br/></td></tr><tr><td align="left">_794 = User::decrement_open_orders(move _795, move _796)</td></tr></table>>];
    bb347__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left" balign="left">StorageDead(_796)<br/>StorageDead(_795)<br/>StorageDead(_798)<br/>StorageDead(_794)<br/>StorageLive(_801)<br/>_801 = OrderStatus::Filled<br/>StorageLive(_802)<br/>_802 = _5<br/>_803 = Len(((*_3).5: [state::user::Order; 32]))<br/>_804 = Lt(_802, _803)<br/></td></tr><tr><td align="left">assert(move _804, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _803, _802)</td></tr></table>>];
    bb348__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left" balign="left">(((*_3).5: [state::user::Order; 32])[_802].12: state::user::OrderStatus) = move _801<br/>StorageDead(_801)<br/>StorageDead(_802)<br/>StorageLive(_805)<br/>StorageLive(_806)<br/>StorageLive(_807)<br/>StorageLive(_808)<br/>_808 = &amp;mut (*_3)<br/>StorageLive(_809)<br/>_809 = ((*_1).42: u16)<br/></td></tr><tr><td align="left">_807 = User::force_get_spot_position_mut(move _808, move _809)</td></tr></table>>];
    bb349__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">349</td></tr><tr><td align="left" balign="left">StorageDead(_809)<br/>StorageDead(_808)<br/></td></tr><tr><td align="left">_806 = &lt;std::result::Result&lt;&amp;mut SpotPosition, error::ErrorCode&gt; as Try&gt;::branch(move _807)</td></tr></table>>];
    bb350__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">350</td></tr><tr><td align="left" balign="left">StorageDead(_807)<br/>_810 = discriminant(_806)<br/></td></tr><tr><td align="left">switchInt(move _810)</td></tr></table>>];
    bb351__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">351</td></tr><tr><td align="left" balign="left">StorageLive(_814)<br/>_814 = move ((_806 as Continue).0: &amp;mut state::user::SpotPosition)<br/>_805 = move _814<br/>StorageDead(_814)<br/>_815 = CheckedSub(((*_805).6: u8), const 1_u8)<br/></td></tr><tr><td align="left">assert(!move (_815.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, ((*_805).6: u8), const 1_u8)</td></tr></table>>];
    bb352__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">352</td></tr><tr><td align="left" balign="left">StorageLive(_811)<br/>_811 = ((_806 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_813)<br/>_813 = _811<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _813)</td></tr></table>>];
    bb353__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">353</td></tr><tr><td align="left" balign="left">StorageDead(_813)<br/>StorageDead(_811)<br/>StorageDead(_806)<br/>StorageDead(_805)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb354__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">354</td></tr><tr><td align="left" balign="left">((*_805).6: u8) = move (_815.0: u8)<br/>StorageDead(_806)<br/>StorageDead(_805)<br/>_779 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb355__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">355</td></tr><tr><td align="left" balign="left">StorageDead(_780)<br/>StorageDead(_779)<br/>StorageLive(_816)<br/>StorageLive(_817)<br/>_817 = _179<br/>StorageLive(_818)<br/>_818 = _181<br/>_816 = (move _817, move _818)<br/>StorageDead(_818)<br/>StorageDead(_817)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _816)<br/>StorageDead(_816)<br/>StorageDead(_707)<br/>StorageDead(_700)<br/>StorageDead(_546)<br/>StorageDead(_542)<br/>StorageDead(_426)<br/>StorageDead(_342)<br/>StorageDead(_280)<br/>StorageDead(_252)<br/>StorageDead(_251)<br/>StorageDead(_250)<br/>StorageDead(_249)<br/>StorageDead(_236)<br/>StorageDead(_185)<br/>StorageDead(_184)<br/>StorageDead(_183)<br/>StorageDead(_182)<br/>StorageDead(_181)<br/>StorageDead(_180)<br/>StorageDead(_179)<br/>StorageDead(_139)<br/>StorageDead(_117)<br/>StorageDead(_116)<br/>StorageDead(_112)<br/>StorageDead(_99)<br/>StorageDead(_98)<br/>StorageDead(_94)<br/>StorageDead(_90)<br/>StorageDead(_67)<br/>StorageDead(_47)<br/>StorageDead(_29)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb356__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">356</td></tr><tr><td align="left" balign="left">StorageDead(_780)<br/>StorageDead(_779)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb357__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">357</td></tr><tr><td align="left" balign="left">StorageDead(_735)<br/>StorageDead(_722)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb358__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">358</td></tr><tr><td align="left" balign="left">StorageDead(_713)<br/>StorageDead(_708)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb359__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">359</td></tr><tr><td align="left" balign="left">StorageDead(_707)<br/>StorageDead(_700)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb360__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">360</td></tr><tr><td align="left" balign="left">StorageDead(_682)<br/>StorageDead(_687)<br/>StorageDead(_683)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb361__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">361</td></tr><tr><td align="left" balign="left">StorageDead(_657)<br/>StorageDead(_654)<br/>StorageDead(_653)<br/>StorageDead(_651)<br/>StorageDead(_650)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb362__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">362</td></tr><tr><td align="left" balign="left">StorageDead(_636)<br/>StorageDead(_632)<br/>StorageDead(_631)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb363__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">363</td></tr><tr><td align="left" balign="left">StorageDead(_615)<br/>StorageDead(_611)<br/>StorageDead(_610)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb364__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">364</td></tr><tr><td align="left" balign="left">StorageDead(_589)<br/>StorageDead(_586)<br/>StorageDead(_585)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb365__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">365</td></tr><tr><td align="left" balign="left">StorageDead(_583)<br/>StorageDead(_582)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb366__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">366</td></tr><tr><td align="left" balign="left">StorageDead(_581)<br/>StorageDead(_580)<br/>StorageDead(_575)<br/>StorageDead(_574)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb367__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">367</td></tr><tr><td align="left" balign="left">StorageDead(_556)<br/>StorageDead(_555)<br/>StorageDead(_552)<br/>StorageDead(_551)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb368__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">368</td></tr><tr><td align="left" balign="left">StorageDead(_546)<br/>StorageDead(_542)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb369__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">369</td></tr><tr><td align="left" balign="left">StorageDead(_514)<br/>StorageDead(_510)<br/>StorageDead(_509)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb370__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">370</td></tr><tr><td align="left" balign="left">StorageDead(_495)<br/>StorageDead(_490)<br/>StorageDead(_489)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb371__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">371</td></tr><tr><td align="left" balign="left">StorageDead(_475)<br/>StorageDead(_470)<br/>StorageDead(_469)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb372__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">372</td></tr><tr><td align="left" balign="left">StorageDead(_456)<br/>StorageDead(_448)<br/>StorageDead(_445)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb373__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">373</td></tr><tr><td align="left" balign="left">StorageDead(_436)<br/>StorageDead(_433)<br/>StorageDead(_432)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb374__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">374</td></tr><tr><td align="left" balign="left">StorageDead(_426)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb375__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">375</td></tr><tr><td align="left" balign="left">StorageDead(_365)<br/>StorageDead(_364)<br/>StorageDead(_361)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb376__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">376</td></tr><tr><td align="left" balign="left">StorageDead(_352)<br/>StorageDead(_349)<br/>StorageDead(_348)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb377__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">377</td></tr><tr><td align="left" balign="left">StorageDead(_342)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb378__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">378</td></tr><tr><td align="left" balign="left">StorageDead(_280)<br/>StorageDead(_252)<br/>StorageDead(_251)<br/>StorageDead(_250)<br/>StorageDead(_249)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb379__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">379</td></tr><tr><td align="left" balign="left">StorageDead(_266)<br/>StorageDead(_254)<br/>StorageDead(_253)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb380__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">380</td></tr><tr><td align="left" balign="left">StorageDead(_236)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb381__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">381</td></tr><tr><td align="left" balign="left">StorageDead(_185)<br/>StorageDead(_184)<br/>StorageDead(_183)<br/>StorageDead(_182)<br/>StorageDead(_181)<br/>StorageDead(_180)<br/>StorageDead(_179)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb382__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">382</td></tr><tr><td align="left" balign="left">StorageDead(_139)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb383__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">383</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/>StorageDead(_116)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb384__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">384</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_99)<br/>StorageDead(_98)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb385__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">385</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/>StorageDead(_90)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb386__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">386</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_71)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb387__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">387</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb388__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">388</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_51)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb389__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">389</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb390__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">390</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb391__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">391</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb392__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">392</td></tr><tr><td align="left">return</td></tr></table>>];
    bb393__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">393 (cleanup)</td></tr><tr><td align="left">drop(_403)</td></tr></table>>];
    bb394__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">394 (cleanup)</td></tr><tr><td align="left">drop(_319)</td></tr></table>>];
    bb395__0_565 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">395 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_565 -> bb1__0_565 [label="return"];
    bb1__0_565 -> bb2__0_565 [label="return"];
    bb2__0_565 -> bb3__0_565 [label="return"];
    bb3__0_565 -> bb4__0_565 [label="0"];
    bb3__0_565 -> bb6__0_565 [label="1"];
    bb3__0_565 -> bb5__0_565 [label="otherwise"];
    bb4__0_565 -> bb8__0_565 [label="success"];
    bb6__0_565 -> bb7__0_565 [label="return"];
    bb7__0_565 -> bb391__0_565 [label=""];
    bb8__0_565 -> bb9__0_565 [label="return"];
    bb9__0_565 -> bb10__0_565 [label="return"];
    bb10__0_565 -> bb11__0_565 [label="0"];
    bb10__0_565 -> bb12__0_565 [label="1"];
    bb10__0_565 -> bb5__0_565 [label="otherwise"];
    bb11__0_565 -> bb14__0_565 [label="return"];
    bb12__0_565 -> bb13__0_565 [label="return"];
    bb13__0_565 -> bb390__0_565 [label=""];
    bb14__0_565 -> bb15__0_565 [label="return"];
    bb15__0_565 -> bb16__0_565 [label="0"];
    bb15__0_565 -> bb17__0_565 [label="1"];
    bb15__0_565 -> bb5__0_565 [label="otherwise"];
    bb16__0_565 -> bb19__0_565 [label="return"];
    bb17__0_565 -> bb18__0_565 [label="return"];
    bb18__0_565 -> bb388__0_565 [label=""];
    bb19__0_565 -> bb20__0_565 [label="return"];
    bb20__0_565 -> bb21__0_565 [label="0"];
    bb20__0_565 -> bb22__0_565 [label="1"];
    bb20__0_565 -> bb5__0_565 [label="otherwise"];
    bb21__0_565 -> bb24__0_565 [label="success"];
    bb22__0_565 -> bb23__0_565 [label="return"];
    bb23__0_565 -> bb388__0_565 [label=""];
    bb24__0_565 -> bb25__0_565 [label="return"];
    bb25__0_565 -> bb26__0_565 [label="return"];
    bb26__0_565 -> bb27__0_565 [label="0"];
    bb26__0_565 -> bb28__0_565 [label="1"];
    bb26__0_565 -> bb5__0_565 [label="otherwise"];
    bb27__0_565 -> bb30__0_565 [label="return"];
    bb28__0_565 -> bb29__0_565 [label="return"];
    bb29__0_565 -> bb386__0_565 [label=""];
    bb30__0_565 -> bb31__0_565 [label="return"];
    bb31__0_565 -> bb32__0_565 [label="0"];
    bb31__0_565 -> bb33__0_565 [label="1"];
    bb31__0_565 -> bb5__0_565 [label="otherwise"];
    bb32__0_565 -> bb35__0_565 [label="success"];
    bb33__0_565 -> bb34__0_565 [label="return"];
    bb34__0_565 -> bb386__0_565 [label=""];
    bb35__0_565 -> bb36__0_565 [label="success"];
    bb36__0_565 -> bb37__0_565 [label="return"];
    bb37__0_565 -> bb38__0_565 [label="return"];
    bb38__0_565 -> bb39__0_565 [label="0"];
    bb38__0_565 -> bb40__0_565 [label="1"];
    bb38__0_565 -> bb5__0_565 [label="otherwise"];
    bb39__0_565 -> bb42__0_565 [label="return"];
    bb40__0_565 -> bb41__0_565 [label="return"];
    bb41__0_565 -> bb385__0_565 [label=""];
    bb42__0_565 -> bb43__0_565 [label="return"];
    bb43__0_565 -> bb44__0_565 [label="return"];
    bb44__0_565 -> bb45__0_565 [label="return"];
    bb45__0_565 -> bb46__0_565 [label="0"];
    bb45__0_565 -> bb47__0_565 [label="1"];
    bb45__0_565 -> bb5__0_565 [label="otherwise"];
    bb46__0_565 -> bb49__0_565 [label="return"];
    bb47__0_565 -> bb48__0_565 [label="return"];
    bb48__0_565 -> bb384__0_565 [label=""];
    bb49__0_565 -> bb50__0_565 [label="return"];
    bb50__0_565 -> bb51__0_565 [label="0"];
    bb50__0_565 -> bb52__0_565 [label="1"];
    bb50__0_565 -> bb5__0_565 [label="otherwise"];
    bb51__0_565 -> bb55__0_565 [label="1"];
    bb51__0_565 -> bb54__0_565 [label="otherwise"];
    bb52__0_565 -> bb53__0_565 [label="return"];
    bb53__0_565 -> bb383__0_565 [label=""];
    bb54__0_565 -> bb57__0_565 [label="0"];
    bb54__0_565 -> bb56__0_565 [label="1"];
    bb54__0_565 -> bb5__0_565 [label="otherwise"];
    bb55__0_565 -> bb76__0_565 [label=""];
    bb56__0_565 -> bb67__0_565 [label="1"];
    bb56__0_565 -> bb74__0_565 [label="otherwise"];
    bb57__0_565 -> bb58__0_565 [label="1"];
    bb57__0_565 -> bb65__0_565 [label="otherwise"];
    bb58__0_565 -> bb59__0_565 [label="success"];
    bb59__0_565 -> bb60__0_565 [label="return"];
    bb60__0_565 -> bb61__0_565 [label="return"];
    bb61__0_565 -> bb62__0_565 [label="0"];
    bb61__0_565 -> bb63__0_565 [label="1"];
    bb61__0_565 -> bb5__0_565 [label="otherwise"];
    bb62__0_565 -> bb76__0_565 [label=""];
    bb63__0_565 -> bb64__0_565 [label="return"];
    bb64__0_565 -> bb382__0_565 [label=""];
    bb65__0_565 -> bb66__0_565 [label="return"];
    bb66__0_565 -> bb382__0_565 [label=""];
    bb67__0_565 -> bb68__0_565 [label="success"];
    bb68__0_565 -> bb69__0_565 [label="return"];
    bb69__0_565 -> bb70__0_565 [label="return"];
    bb70__0_565 -> bb71__0_565 [label="0"];
    bb70__0_565 -> bb72__0_565 [label="1"];
    bb70__0_565 -> bb5__0_565 [label="otherwise"];
    bb71__0_565 -> bb76__0_565 [label=""];
    bb72__0_565 -> bb73__0_565 [label="return"];
    bb73__0_565 -> bb382__0_565 [label=""];
    bb74__0_565 -> bb75__0_565 [label="return"];
    bb75__0_565 -> bb382__0_565 [label=""];
    bb76__0_565 -> bb77__0_565 [label="return"];
    bb77__0_565 -> bb78__0_565 [label="return"];
    bb78__0_565 -> bb79__0_565 [label="return"];
    bb79__0_565 -> bb80__0_565 [label="0"];
    bb79__0_565 -> bb81__0_565 [label="1"];
    bb79__0_565 -> bb5__0_565 [label="otherwise"];
    bb80__0_565 -> bb84__0_565 [label="0"];
    bb80__0_565 -> bb83__0_565 [label="otherwise"];
    bb81__0_565 -> bb82__0_565 [label="return"];
    bb82__0_565 -> bb382__0_565 [label=""];
    bb83__0_565 -> bb381__0_565 [label=""];
    bb84__0_565 -> bb85__0_565 [label="return"];
    bb85__0_565 -> bb86__0_565 [label="return"];
    bb86__0_565 -> bb87__0_565 [label="0"];
    bb86__0_565 -> bb88__0_565 [label="1"];
    bb86__0_565 -> bb5__0_565 [label="otherwise"];
    bb87__0_565 -> bb90__0_565 [label="return"];
    bb88__0_565 -> bb89__0_565 [label="return"];
    bb89__0_565 -> bb381__0_565 [label=""];
    bb90__0_565 -> bb91__0_565 [label="return"];
    bb91__0_565 -> bb92__0_565 [label="return"];
    bb92__0_565 -> bb93__0_565 [label="0"];
    bb92__0_565 -> bb94__0_565 [label="1"];
    bb92__0_565 -> bb5__0_565 [label="otherwise"];
    bb93__0_565 -> bb96__0_565 [label="return"];
    bb94__0_565 -> bb95__0_565 [label="return"];
    bb95__0_565 -> bb381__0_565 [label=""];
    bb96__0_565 -> bb97__0_565 [label="return"];
    bb97__0_565 -> bb98__0_565 [label="0"];
    bb97__0_565 -> bb99__0_565 [label="1"];
    bb97__0_565 -> bb5__0_565 [label="otherwise"];
    bb98__0_565 -> bb101__0_565 [label="return"];
    bb99__0_565 -> bb100__0_565 [label="return"];
    bb100__0_565 -> bb380__0_565 [label=""];
    bb101__0_565 -> bb102__0_565 [label="return"];
    bb102__0_565 -> bb103__0_565 [label="return"];
    bb103__0_565 -> bb104__0_565 [label="0"];
    bb103__0_565 -> bb105__0_565 [label="1"];
    bb103__0_565 -> bb5__0_565 [label="otherwise"];
    bb104__0_565 -> bb107__0_565 [label="return"];
    bb105__0_565 -> bb106__0_565 [label="return"];
    bb106__0_565 -> bb379__0_565 [label=""];
    bb107__0_565 -> bb108__0_565 [label="return"];
    bb108__0_565 -> bb109__0_565 [label="0"];
    bb108__0_565 -> bb110__0_565 [label="1"];
    bb108__0_565 -> bb5__0_565 [label="otherwise"];
    bb109__0_565 -> bb113__0_565 [label="0"];
    bb109__0_565 -> bb112__0_565 [label="1"];
    bb109__0_565 -> bb5__0_565 [label="otherwise"];
    bb110__0_565 -> bb111__0_565 [label="return"];
    bb111__0_565 -> bb379__0_565 [label=""];
    bb112__0_565 -> bb119__0_565 [label="return"];
    bb113__0_565 -> bb114__0_565 [label="return"];
    bb114__0_565 -> bb115__0_565 [label="return"];
    bb115__0_565 -> bb116__0_565 [label="0"];
    bb115__0_565 -> bb117__0_565 [label="1"];
    bb115__0_565 -> bb5__0_565 [label="otherwise"];
    bb116__0_565 -> bb124__0_565 [label=""];
    bb117__0_565 -> bb118__0_565 [label="return"];
    bb118__0_565 -> bb378__0_565 [label=""];
    bb119__0_565 -> bb120__0_565 [label="return"];
    bb120__0_565 -> bb121__0_565 [label="0"];
    bb120__0_565 -> bb122__0_565 [label="1"];
    bb120__0_565 -> bb5__0_565 [label="otherwise"];
    bb121__0_565 -> bb124__0_565 [label=""];
    bb122__0_565 -> bb123__0_565 [label="return"];
    bb123__0_565 -> bb378__0_565 [label=""];
    bb124__0_565 -> bb125__0_565 [label="success"];
    bb125__0_565 -> bb126__0_565 [label="return"];
    bb126__0_565 -> bb127__0_565 [label="return"];
    bb127__0_565 -> bb129__0_565 [label="0"];
    bb127__0_565 -> bb128__0_565 [label="otherwise"];
    bb128__0_565 -> bb137__0_565 [label=""];
    bb129__0_565 -> bb130__0_565 [label="return"];
    bb130__0_565 -> bb131__0_565 [label="return"];
    bb131__0_565 -> bb132__0_565 [label="return"];
    bb132__0_565 -> bb133__0_565 [label="return"];
    bb132__0_565 -> bb394__0_565 [label="unwind"];
    bb133__0_565 -> bb134__0_565 [label="return"];
    bb133__0_565 -> bb394__0_565 [label="unwind"];
    bb134__0_565 -> bb135__0_565 [label="return"];
    bb134__0_565 -> bb395__0_565 [label="unwind"];
    bb135__0_565 -> bb136__0_565 [label="return"];
    bb136__0_565 -> bb137__0_565 [label=""];
    bb137__0_565 -> bb138__0_565 [label="return"];
    bb138__0_565 -> bb139__0_565 [label="0"];
    bb138__0_565 -> bb140__0_565 [label="1"];
    bb138__0_565 -> bb5__0_565 [label="otherwise"];
    bb139__0_565 -> bb142__0_565 [label="success"];
    bb140__0_565 -> bb141__0_565 [label="return"];
    bb141__0_565 -> bb378__0_565 [label=""];
    bb142__0_565 -> bb143__0_565 [label="return"];
    bb143__0_565 -> bb144__0_565 [label="return"];
    bb144__0_565 -> bb145__0_565 [label="return"];
    bb145__0_565 -> bb146__0_565 [label="0"];
    bb145__0_565 -> bb147__0_565 [label="1"];
    bb145__0_565 -> bb5__0_565 [label="otherwise"];
    bb146__0_565 -> bb149__0_565 [label="return"];
    bb147__0_565 -> bb148__0_565 [label="return"];
    bb148__0_565 -> bb376__0_565 [label=""];
    bb149__0_565 -> bb150__0_565 [label="return"];
    bb150__0_565 -> bb151__0_565 [label="0"];
    bb150__0_565 -> bb152__0_565 [label="1"];
    bb150__0_565 -> bb5__0_565 [label="otherwise"];
    bb151__0_565 -> bb154__0_565 [label="return"];
    bb152__0_565 -> bb153__0_565 [label="return"];
    bb153__0_565 -> bb375__0_565 [label=""];
    bb154__0_565 -> bb155__0_565 [label="return"];
    bb155__0_565 -> bb156__0_565 [label="return"];
    bb156__0_565 -> bb157__0_565 [label="0"];
    bb156__0_565 -> bb158__0_565 [label="1"];
    bb156__0_565 -> bb5__0_565 [label="otherwise"];
    bb157__0_565 -> bb160__0_565 [label="success"];
    bb158__0_565 -> bb159__0_565 [label="return"];
    bb159__0_565 -> bb375__0_565 [label=""];
    bb160__0_565 -> bb161__0_565 [label="return"];
    bb161__0_565 -> bb162__0_565 [label="return"];
    bb162__0_565 -> bb164__0_565 [label="0"];
    bb162__0_565 -> bb163__0_565 [label="otherwise"];
    bb163__0_565 -> bb172__0_565 [label=""];
    bb164__0_565 -> bb165__0_565 [label="return"];
    bb165__0_565 -> bb166__0_565 [label="return"];
    bb166__0_565 -> bb167__0_565 [label="return"];
    bb167__0_565 -> bb168__0_565 [label="return"];
    bb167__0_565 -> bb393__0_565 [label="unwind"];
    bb168__0_565 -> bb169__0_565 [label="return"];
    bb168__0_565 -> bb393__0_565 [label="unwind"];
    bb169__0_565 -> bb170__0_565 [label="return"];
    bb169__0_565 -> bb395__0_565 [label="unwind"];
    bb170__0_565 -> bb171__0_565 [label="return"];
    bb171__0_565 -> bb172__0_565 [label=""];
    bb172__0_565 -> bb173__0_565 [label="return"];
    bb173__0_565 -> bb174__0_565 [label="0"];
    bb173__0_565 -> bb175__0_565 [label="1"];
    bb173__0_565 -> bb5__0_565 [label="otherwise"];
    bb174__0_565 -> bb177__0_565 [label="success"];
    bb175__0_565 -> bb176__0_565 [label="return"];
    bb176__0_565 -> bb377__0_565 [label=""];
    bb177__0_565 -> bb178__0_565 [label="return"];
    bb178__0_565 -> bb179__0_565 [label="return"];
    bb179__0_565 -> bb180__0_565 [label="return"];
    bb180__0_565 -> bb181__0_565 [label="0"];
    bb180__0_565 -> bb182__0_565 [label="1"];
    bb180__0_565 -> bb5__0_565 [label="otherwise"];
    bb181__0_565 -> bb184__0_565 [label="return"];
    bb182__0_565 -> bb183__0_565 [label="return"];
    bb183__0_565 -> bb373__0_565 [label=""];
    bb184__0_565 -> bb185__0_565 [label="return"];
    bb185__0_565 -> bb186__0_565 [label="return"];
    bb186__0_565 -> bb187__0_565 [label="return"];
    bb187__0_565 -> bb188__0_565 [label="0"];
    bb187__0_565 -> bb189__0_565 [label="1"];
    bb187__0_565 -> bb5__0_565 [label="otherwise"];
    bb188__0_565 -> bb191__0_565 [label="return"];
    bb189__0_565 -> bb190__0_565 [label="return"];
    bb190__0_565 -> bb372__0_565 [label=""];
    bb191__0_565 -> bb192__0_565 [label="return"];
    bb192__0_565 -> bb193__0_565 [label="0"];
    bb192__0_565 -> bb194__0_565 [label="1"];
    bb192__0_565 -> bb5__0_565 [label="otherwise"];
    bb193__0_565 -> bb196__0_565 [label="return"];
    bb194__0_565 -> bb195__0_565 [label="return"];
    bb195__0_565 -> bb372__0_565 [label=""];
    bb196__0_565 -> bb197__0_565 [label="return"];
    bb197__0_565 -> bb198__0_565 [label="0"];
    bb197__0_565 -> bb199__0_565 [label="1"];
    bb197__0_565 -> bb5__0_565 [label="otherwise"];
    bb198__0_565 -> bb201__0_565 [label="success"];
    bb199__0_565 -> bb200__0_565 [label="return"];
    bb200__0_565 -> bb371__0_565 [label=""];
    bb201__0_565 -> bb202__0_565 [label="return"];
    bb202__0_565 -> bb203__0_565 [label="return"];
    bb203__0_565 -> bb204__0_565 [label="0"];
    bb203__0_565 -> bb205__0_565 [label="1"];
    bb203__0_565 -> bb5__0_565 [label="otherwise"];
    bb204__0_565 -> bb207__0_565 [label="return"];
    bb205__0_565 -> bb206__0_565 [label="return"];
    bb206__0_565 -> bb371__0_565 [label=""];
    bb207__0_565 -> bb208__0_565 [label="return"];
    bb208__0_565 -> bb209__0_565 [label="0"];
    bb208__0_565 -> bb210__0_565 [label="1"];
    bb208__0_565 -> bb5__0_565 [label="otherwise"];
    bb209__0_565 -> bb212__0_565 [label="return"];
    bb210__0_565 -> bb211__0_565 [label="return"];
    bb211__0_565 -> bb370__0_565 [label=""];
    bb212__0_565 -> bb213__0_565 [label="return"];
    bb213__0_565 -> bb214__0_565 [label="0"];
    bb213__0_565 -> bb215__0_565 [label="1"];
    bb213__0_565 -> bb5__0_565 [label="otherwise"];
    bb214__0_565 -> bb217__0_565 [label="return"];
    bb215__0_565 -> bb216__0_565 [label="return"];
    bb216__0_565 -> bb370__0_565 [label=""];
    bb217__0_565 -> bb218__0_565 [label="return"];
    bb218__0_565 -> bb219__0_565 [label="0"];
    bb218__0_565 -> bb220__0_565 [label="1"];
    bb218__0_565 -> bb5__0_565 [label="otherwise"];
    bb219__0_565 -> bb222__0_565 [label="return"];
    bb220__0_565 -> bb221__0_565 [label="return"];
    bb221__0_565 -> bb369__0_565 [label=""];
    bb222__0_565 -> bb223__0_565 [label="return"];
    bb223__0_565 -> bb224__0_565 [label="0"];
    bb223__0_565 -> bb225__0_565 [label="1"];
    bb223__0_565 -> bb5__0_565 [label="otherwise"];
    bb224__0_565 -> bb227__0_565 [label="success"];
    bb225__0_565 -> bb226__0_565 [label="return"];
    bb226__0_565 -> bb369__0_565 [label=""];
    bb227__0_565 -> bb228__0_565 [label="return"];
    bb228__0_565 -> bb229__0_565 [label="return"];
    bb229__0_565 -> bb230__0_565 [label="0"];
    bb229__0_565 -> bb231__0_565 [label="1"];
    bb229__0_565 -> bb5__0_565 [label="otherwise"];
    bb230__0_565 -> bb233__0_565 [label="success"];
    bb231__0_565 -> bb232__0_565 [label="return"];
    bb232__0_565 -> bb374__0_565 [label=""];
    bb233__0_565 -> bb234__0_565 [label="success"];
    bb234__0_565 -> bb235__0_565 [label="return"];
    bb235__0_565 -> bb236__0_565 [label="return"];
    bb236__0_565 -> bb237__0_565 [label="return"];
    bb237__0_565 -> bb238__0_565 [label="0"];
    bb237__0_565 -> bb239__0_565 [label="1"];
    bb237__0_565 -> bb5__0_565 [label="otherwise"];
    bb238__0_565 -> bb241__0_565 [label="return"];
    bb239__0_565 -> bb240__0_565 [label="return"];
    bb240__0_565 -> bb367__0_565 [label=""];
    bb241__0_565 -> bb242__0_565 [label="return"];
    bb242__0_565 -> bb243__0_565 [label="0"];
    bb242__0_565 -> bb244__0_565 [label="1"];
    bb242__0_565 -> bb5__0_565 [label="otherwise"];
    bb243__0_565 -> bb247__0_565 [label="1"];
    bb243__0_565 -> bb246__0_565 [label="otherwise"];
    bb244__0_565 -> bb245__0_565 [label="return"];
    bb245__0_565 -> bb367__0_565 [label=""];
    bb246__0_565 -> bb284__0_565 [label=""];
    bb247__0_565 -> bb248__0_565 [label="1"];
    bb247__0_565 -> bb246__0_565 [label="otherwise"];
    bb248__0_565 -> bb271__0_565 [label="0"];
    bb248__0_565 -> bb249__0_565 [label="otherwise"];
    bb249__0_565 -> bb250__0_565 [label="return"];
    bb250__0_565 -> bb251__0_565 [label="return"];
    bb251__0_565 -> bb252__0_565 [label="0"];
    bb251__0_565 -> bb253__0_565 [label="1"];
    bb251__0_565 -> bb5__0_565 [label="otherwise"];
    bb252__0_565 -> bb255__0_565 [label="return"];
    bb253__0_565 -> bb254__0_565 [label="return"];
    bb254__0_565 -> bb364__0_565 [label=""];
    bb255__0_565 -> bb256__0_565 [label="return"];
    bb256__0_565 -> bb257__0_565 [label="return"];
    bb257__0_565 -> bb258__0_565 [label="0"];
    bb257__0_565 -> bb259__0_565 [label="1"];
    bb257__0_565 -> bb5__0_565 [label="otherwise"];
    bb258__0_565 -> bb261__0_565 [label="return"];
    bb259__0_565 -> bb260__0_565 [label="return"];
    bb260__0_565 -> bb364__0_565 [label=""];
    bb261__0_565 -> bb262__0_565 [label="return"];
    bb262__0_565 -> bb263__0_565 [label="0"];
    bb262__0_565 -> bb264__0_565 [label="1"];
    bb262__0_565 -> bb5__0_565 [label="otherwise"];
    bb263__0_565 -> bb266__0_565 [label="return"];
    bb264__0_565 -> bb265__0_565 [label="return"];
    bb265__0_565 -> bb363__0_565 [label=""];
    bb266__0_565 -> bb267__0_565 [label="return"];
    bb267__0_565 -> bb268__0_565 [label="0"];
    bb267__0_565 -> bb269__0_565 [label="1"];
    bb267__0_565 -> bb5__0_565 [label="otherwise"];
    bb268__0_565 -> bb272__0_565 [label=""];
    bb269__0_565 -> bb270__0_565 [label="return"];
    bb270__0_565 -> bb363__0_565 [label=""];
    bb271__0_565 -> bb272__0_565 [label=""];
    bb272__0_565 -> bb273__0_565 [label="return"];
    bb273__0_565 -> bb274__0_565 [label="return"];
    bb274__0_565 -> bb275__0_565 [label="return"];
    bb275__0_565 -> bb276__0_565 [label="0"];
    bb275__0_565 -> bb277__0_565 [label="1"];
    bb275__0_565 -> bb5__0_565 [label="otherwise"];
    bb276__0_565 -> bb279__0_565 [label="return"];
    bb277__0_565 -> bb278__0_565 [label="return"];
    bb278__0_565 -> bb362__0_565 [label=""];
    bb279__0_565 -> bb280__0_565 [label="return"];
    bb280__0_565 -> bb281__0_565 [label="0"];
    bb280__0_565 -> bb282__0_565 [label="1"];
    bb280__0_565 -> bb5__0_565 [label="otherwise"];
    bb281__0_565 -> bb284__0_565 [label=""];
    bb282__0_565 -> bb283__0_565 [label="return"];
    bb283__0_565 -> bb362__0_565 [label=""];
    bb284__0_565 -> bb300__0_565 [label="0"];
    bb284__0_565 -> bb285__0_565 [label="otherwise"];
    bb285__0_565 -> bb286__0_565 [label="return"];
    bb286__0_565 -> bb287__0_565 [label="return"];
    bb287__0_565 -> bb288__0_565 [label="return"];
    bb288__0_565 -> bb289__0_565 [label="0"];
    bb288__0_565 -> bb290__0_565 [label="1"];
    bb288__0_565 -> bb5__0_565 [label="otherwise"];
    bb289__0_565 -> bb293__0_565 [label="0"];
    bb289__0_565 -> bb292__0_565 [label="otherwise"];
    bb290__0_565 -> bb291__0_565 [label="return"];
    bb291__0_565 -> bb361__0_565 [label=""];
    bb292__0_565 -> bb294__0_565 [label=""];
    bb293__0_565 -> bb294__0_565 [label=""];
    bb294__0_565 -> bb295__0_565 [label="return"];
    bb295__0_565 -> bb296__0_565 [label="return"];
    bb296__0_565 -> bb297__0_565 [label="0"];
    bb296__0_565 -> bb298__0_565 [label="1"];
    bb296__0_565 -> bb5__0_565 [label="otherwise"];
    bb297__0_565 -> bb301__0_565 [label=""];
    bb298__0_565 -> bb299__0_565 [label="return"];
    bb299__0_565 -> bb361__0_565 [label=""];
    bb300__0_565 -> bb301__0_565 [label=""];
    bb301__0_565 -> bb302__0_565 [label="return"];
    bb302__0_565 -> bb303__0_565 [label="return"];
    bb303__0_565 -> bb304__0_565 [label="0"];
    bb303__0_565 -> bb305__0_565 [label="1"];
    bb303__0_565 -> bb5__0_565 [label="otherwise"];
    bb304__0_565 -> bb307__0_565 [label="return"];
    bb305__0_565 -> bb306__0_565 [label="return"];
    bb306__0_565 -> bb360__0_565 [label=""];
    bb307__0_565 -> bb308__0_565 [label="return"];
    bb308__0_565 -> bb309__0_565 [label="0"];
    bb308__0_565 -> bb310__0_565 [label="1"];
    bb308__0_565 -> bb5__0_565 [label="otherwise"];
    bb309__0_565 -> bb312__0_565 [label="return"];
    bb310__0_565 -> bb311__0_565 [label="return"];
    bb311__0_565 -> bb360__0_565 [label=""];
    bb312__0_565 -> bb313__0_565 [label="return"];
    bb313__0_565 -> bb314__0_565 [label="return"];
    bb314__0_565 -> bb315__0_565 [label="return"];
    bb315__0_565 -> bb316__0_565 [label="return"];
    bb316__0_565 -> bb317__0_565 [label="0"];
    bb316__0_565 -> bb318__0_565 [label="1"];
    bb316__0_565 -> bb5__0_565 [label="otherwise"];
    bb317__0_565 -> bb320__0_565 [label="success"];
    bb318__0_565 -> bb319__0_565 [label="return"];
    bb319__0_565 -> bb358__0_565 [label=""];
    bb320__0_565 -> bb321__0_565 [label="return"];
    bb321__0_565 -> bb322__0_565 [label="return"];
    bb322__0_565 -> bb323__0_565 [label="0"];
    bb322__0_565 -> bb324__0_565 [label="1"];
    bb322__0_565 -> bb5__0_565 [label="otherwise"];
    bb323__0_565 -> bb326__0_565 [label="success"];
    bb324__0_565 -> bb325__0_565 [label="return"];
    bb325__0_565 -> bb357__0_565 [label=""];
    bb326__0_565 -> bb327__0_565 [label="return"];
    bb327__0_565 -> bb328__0_565 [label="return"];
    bb328__0_565 -> bb329__0_565 [label="0"];
    bb328__0_565 -> bb330__0_565 [label="1"];
    bb328__0_565 -> bb5__0_565 [label="otherwise"];
    bb329__0_565 -> bb332__0_565 [label="return"];
    bb330__0_565 -> bb331__0_565 [label="return"];
    bb331__0_565 -> bb357__0_565 [label=""];
    bb332__0_565 -> bb333__0_565 [label="return"];
    bb333__0_565 -> bb334__0_565 [label="0"];
    bb333__0_565 -> bb335__0_565 [label="1"];
    bb333__0_565 -> bb5__0_565 [label="otherwise"];
    bb334__0_565 -> bb337__0_565 [label="success"];
    bb335__0_565 -> bb336__0_565 [label="return"];
    bb336__0_565 -> bb359__0_565 [label=""];
    bb337__0_565 -> bb338__0_565 [label="return"];
    bb338__0_565 -> bb339__0_565 [label="return"];
    bb339__0_565 -> bb340__0_565 [label="0"];
    bb339__0_565 -> bb341__0_565 [label="1"];
    bb339__0_565 -> bb5__0_565 [label="otherwise"];
    bb340__0_565 -> bb344__0_565 [label="0"];
    bb340__0_565 -> bb343__0_565 [label="otherwise"];
    bb341__0_565 -> bb342__0_565 [label="return"];
    bb342__0_565 -> bb356__0_565 [label=""];
    bb343__0_565 -> bb345__0_565 [label="success"];
    bb344__0_565 -> bb355__0_565 [label=""];
    bb345__0_565 -> bb346__0_565 [label="return"];
    bb346__0_565 -> bb347__0_565 [label="return"];
    bb347__0_565 -> bb348__0_565 [label="success"];
    bb348__0_565 -> bb349__0_565 [label="return"];
    bb349__0_565 -> bb350__0_565 [label="return"];
    bb350__0_565 -> bb351__0_565 [label="0"];
    bb350__0_565 -> bb352__0_565 [label="1"];
    bb350__0_565 -> bb5__0_565 [label="otherwise"];
    bb351__0_565 -> bb354__0_565 [label="success"];
    bb352__0_565 -> bb353__0_565 [label="return"];
    bb353__0_565 -> bb356__0_565 [label=""];
    bb354__0_565 -> bb355__0_565 [label=""];
    bb355__0_565 -> bb392__0_565 [label=""];
    bb356__0_565 -> bb359__0_565 [label=""];
    bb357__0_565 -> bb358__0_565 [label=""];
    bb358__0_565 -> bb359__0_565 [label=""];
    bb359__0_565 -> bb368__0_565 [label=""];
    bb360__0_565 -> bb368__0_565 [label=""];
    bb361__0_565 -> bb368__0_565 [label=""];
    bb362__0_565 -> bb366__0_565 [label=""];
    bb363__0_565 -> bb365__0_565 [label=""];
    bb364__0_565 -> bb365__0_565 [label=""];
    bb365__0_565 -> bb366__0_565 [label=""];
    bb366__0_565 -> bb368__0_565 [label=""];
    bb367__0_565 -> bb368__0_565 [label=""];
    bb368__0_565 -> bb374__0_565 [label=""];
    bb369__0_565 -> bb374__0_565 [label=""];
    bb370__0_565 -> bb374__0_565 [label=""];
    bb371__0_565 -> bb374__0_565 [label=""];
    bb372__0_565 -> bb373__0_565 [label=""];
    bb373__0_565 -> bb374__0_565 [label=""];
    bb374__0_565 -> bb377__0_565 [label=""];
    bb375__0_565 -> bb376__0_565 [label=""];
    bb376__0_565 -> bb377__0_565 [label=""];
    bb377__0_565 -> bb378__0_565 [label=""];
    bb378__0_565 -> bb380__0_565 [label=""];
    bb379__0_565 -> bb380__0_565 [label=""];
    bb380__0_565 -> bb381__0_565 [label=""];
    bb381__0_565 -> bb382__0_565 [label=""];
    bb382__0_565 -> bb383__0_565 [label=""];
    bb383__0_565 -> bb384__0_565 [label=""];
    bb384__0_565 -> bb385__0_565 [label=""];
    bb385__0_565 -> bb387__0_565 [label=""];
    bb386__0_565 -> bb387__0_565 [label=""];
    bb387__0_565 -> bb389__0_565 [label=""];
    bb388__0_565 -> bb389__0_565 [label=""];
    bb389__0_565 -> bb390__0_565 [label=""];
    bb390__0_565 -> bb391__0_565 [label=""];
    bb391__0_565 -> bb392__0_565 [label=""];
    bb393__0_565 -> bb395__0_565 [label="return"];
    bb394__0_565 -> bb395__0_565 [label="return"];
}
