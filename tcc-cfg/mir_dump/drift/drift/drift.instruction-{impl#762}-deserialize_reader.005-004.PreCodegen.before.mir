// MIR for `instruction::<impl at programs/drift/src/lib.rs:69:1: 69:11>::deserialize_reader` before PreCodegen

fn instruction::<impl at programs/drift/src/lib.rs:69:1: 69:11>::deserialize_reader(_1: &mut R) -> std::result::Result<UpdateSpotMarketScaleInitialAssetWeightStart, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<instruction::UpdateSpotMarketScaleInitialAssetWeightStart, std::io::Error>;
    let mut _2: instruction::UpdateSpotMarketScaleInitialAssetWeightStart;
    let mut _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _5: std::result::Result<u64, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: u64;
    let mut _12: isize;
    let mut _13: isize;
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb8];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u64);
        _3 = _11;
        StorageDead(_11);
        _2 = UpdateSpotMarketScaleInitialAssetWeightStart { scale_initial_asset_weight_start: move _3 };
        StorageDead(_3);
        _0 = std::result::Result::<UpdateSpotMarketScaleInitialAssetWeightStart, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _12 = discriminant(_4);
        StorageDead(_4);
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<UpdateSpotMarketScaleInitialAssetWeightStart, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        _14 = discriminant(_4);
        StorageDead(_4);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        _16 = discriminant(_4);
        goto -> bb8;
    }
}
