// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_max_reference_price_offset` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_max_reference_price_offset(_1: AMM) -> std::result::Result<i64, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _2: ();
    let mut _3: bool;
    let mut _4: u8;
    let mut _5: !;
    let _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: u8;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _11: std::result::Result<u8, error::ErrorCode>;
    let mut _12: u8;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: u8;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: i64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _25: std::result::Result<i64, error::ErrorCode>;
    let mut _26: i64;
    let mut _27: i64;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _29: std::result::Result<i64, error::ErrorCode>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: i64;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: i64;
    let mut _47: i64;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _49: std::result::Result<i64, error::ErrorCode>;
    let mut _50: u32;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: i64;
    let mut _61: i64;
    scope 1 {
        debug lower_bound_multiplier => _6;
        let _23: i64;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: i64;
        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _44: i64;
        scope 10 {
            debug lb_bps => _23;
            let _45: i64;
            let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _55: i64;
            scope 19 {
                debug max_offset => _45;
            }
            scope 20 {
                debug residual => _52;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _55;
                scope 23 {
                }
            }
        }
        scope 11 {
            debug residual => _31;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _34;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _41;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _44;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = (_1.70: u8);
        _3 = Le(move _4, const 100_u8);
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(const 0_i64);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb38;
    }

    bb2: {
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = (_1.70: u8);
        _11 = <u8 as SafeMath>::safe_sub(move _12, const 100_u8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        _10 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_10 as Continue).0: u8);
        _9 = _17;
        StorageDead(_17);
        _8 = <u8 as Cast>::cast::<i64>(move _9) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb36;
    }

    bb9: {
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_8);
        _18 = discriminant(_7);
        switchInt(move _18) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_7 as Continue).0: i64);
        _6 = _22;
        StorageDead(_22);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = <u128 as Cast>::cast::<i64>(const _) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_19);
        _19 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb36;
    }

    bb14: {
        _28 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _29) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_29);
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_34);
        _34 = ((_28 as Continue).0: i64);
        _27 = _34;
        StorageDead(_34);
        _35 = Eq(const 10000_i64, const 0_i64);
        assert(!move _35, "attempt to divide `{}` by zero", _27) -> [success: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_31);
        _31 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb34;
    }

    bb19: {
        _36 = Eq(const 10000_i64, const -1_i64);
        _37 = Eq(_27, const i64::MIN);
        _38 = BitAnd(move _36, move _37);
        assert(!move _38, "attempt to compute `{} / {}`, which would overflow", _27, const 10000_i64) -> [success: bb20, unwind continue];
    }

    bb20: {
        _26 = Div(move _27, const 10000_i64);
        StorageDead(_27);
        StorageLive(_39);
        _39 = _6;
        _25 = <i64 as SafeMath>::safe_mul(move _26, move _39) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_26);
        _24 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_25);
        _40 = discriminant(_24);
        switchInt(move _40) -> [0: bb23, 1: bb24, otherwise: bb6];
    }

    bb23: {
        StorageLive(_44);
        _44 = ((_24 as Continue).0: i64);
        _23 = _44;
        StorageDead(_44);
        StorageDead(_28);
        StorageDead(_24);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = (_1.64: u32);
        _49 = <u32 as Cast>::cast::<i64>(move _50) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_41);
        _41 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_43);
        StorageDead(_41);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_50);
        _48 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb28, 1: bb29, otherwise: bb6];
    }

    bb28: {
        StorageLive(_55);
        _55 = ((_48 as Continue).0: i64);
        _47 = _55;
        StorageDead(_55);
        _56 = Eq(const 2_i64, const 0_i64);
        assert(!move _56, "attempt to divide `{}` by zero", _47) -> [success: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_52);
        _52 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_48);
        StorageDead(_45);
        goto -> bb35;
    }

    bb31: {
        _57 = Eq(const 2_i64, const -1_i64);
        _58 = Eq(_47, const i64::MIN);
        _59 = BitAnd(move _57, move _58);
        assert(!move _59, "attempt to compute `{} / {}`, which would overflow", _47, const 2_i64) -> [success: bb32, unwind continue];
    }

    bb32: {
        _46 = Div(move _47, const 2_i64);
        StorageDead(_47);
        StorageLive(_60);
        _60 = _23;
        _45 = <i64 as Ord>::max(move _46, move _60) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_60);
        StorageDead(_46);
        StorageDead(_48);
        StorageLive(_61);
        _61 = _45;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        StorageDead(_45);
        StorageDead(_23);
        StorageDead(_6);
        goto -> bb38;
    }

    bb34: {
        StorageDead(_28);
        StorageDead(_24);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_23);
        goto -> bb37;
    }

    bb36: {
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_6);
        goto -> bb38;
    }

    bb38: {
        return;
    }
}
