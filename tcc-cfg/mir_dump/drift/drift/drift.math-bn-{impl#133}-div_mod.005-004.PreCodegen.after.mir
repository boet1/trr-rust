// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::div_mod` after PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::div_mod(_1: U192, _2: U192) -> (U192, U192) {
    debug self => _1;
    debug other => _2;
    let mut _0: (math::bn::U192, math::bn::U192);
    let _3: usize;
    let mut _4: &math::bn::U192;
    let mut _6: &math::bn::U192;
    let _7: ();
    let mut _8: bool;
    let mut _9: usize;
    let mut _10: !;
    let _11: !;
    let _12: ();
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: !;
    let mut _17: math::bn::U192;
    let mut _18: math::bn::U192;
    let _19: ();
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: !;
    let mut _23: math::bn::U192;
    let mut _24: u64;
    let mut _25: &math::bn::U192;
    let mut _28: (usize, usize);
    let mut _30: usize;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: (usize, bool);
    let mut _38: math::bn::U192;
    let mut _39: math::bn::U192;
    let mut _40: usize;
    let mut _41: usize;
    scope 1 {
        debug my_bits => _3;
        let _5: usize;
        scope 2 {
            debug your_bits => _5;
            let _26: usize;
            let _27: usize;
            let _29: usize;
            scope 3 {
                debug n => _26;
                debug m => _27;
            }
            scope 4 {
                debug my_words => _29;
                let _31: usize;
                scope 5 {
                    debug your_words => _31;
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = U192::bits(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        _5 = U192::bits(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _5;
        _8 = Ne(move _9, const 0_usize);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_9);
        _7 = const ();
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _3;
        StorageLive(_15);
        _15 = _5;
        _13 = Lt(move _14, move _15);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb4: {
        StorageDead(_9);
        StorageLive(_11);
        _11 = begin_panic::<&str>(const "division by zero") -> unwind continue;
    }

    bb5: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_17);
        _17 = U192::zero() -> [return: bb7, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = const ();
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _5;
        _20 = Le(move _21, const _);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_18);
        _18 = _1;
        _0 = (move _17, move _18);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb16;
    }

    bb8: {
        StorageDead(_21);
        StorageLive(_23);
        _23 = _1;
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_2;
        _24 = U192::low_u64(move _25) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        _19 = const ();
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = _3;
        _29 = U192::words(move _30) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        _0 = U192::div_mod_small(move _23, move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb16;
    }

    bb12: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _5;
        _31 = U192::words(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        StorageLive(_33);
        _33 = _31;
        StorageLive(_34);
        StorageLive(_35);
        _35 = _29;
        StorageLive(_36);
        _36 = _31;
        _37 = CheckedSub(_35, _36);
        assert(!move (_37.1: bool), "attempt to compute `{} - {}`, which would overflow", move _35, move _36) -> [success: bb14, unwind continue];
    }

    bb14: {
        _34 = move (_37.0: usize);
        StorageDead(_36);
        StorageDead(_35);
        _28 = (move _33, move _34);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_26);
        _26 = (_28.0: usize);
        StorageLive(_27);
        _27 = (_28.1: usize);
        StorageDead(_28);
        StorageLive(_38);
        _38 = _1;
        StorageLive(_39);
        _39 = _2;
        StorageLive(_40);
        _40 = _26;
        StorageLive(_41);
        _41 = _27;
        _0 = U192::div_mod_knuth(move _38, move _39, move _40, move _41) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb17;
    }

    bb16: {
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}
