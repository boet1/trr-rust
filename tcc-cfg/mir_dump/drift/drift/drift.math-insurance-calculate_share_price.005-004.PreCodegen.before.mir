// MIR for `calculate_share_price` before PreCodegen

fn calculate_share_price(_1: u128, _2: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug total_if_shares => _1;
    debug insurance_fund_vault_balance => _2;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let mut _3: bool;
    let mut _4: u128;
    let mut _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u64;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: u128;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: u128;
    let mut _25: u128;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: u128;
    scope 1 {
        debug residual => _16;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _27;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _30;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _1;
        _3 = Gt(move _4, const 0_u128);
        switchInt(move _3) -> [0: bb19, otherwise: bb1];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _2;
        _13 = <u64 as Cast>::cast::<u128>(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = ((_12 as Continue).0: u128);
        _11 = _19;
        StorageDead(_19);
        _10 = <u128 as SafeMath>::safe_mul(move _11, const _) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb21;
    }

    bb8: {
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_10);
        _20 = discriminant(_9);
        switchInt(move _20) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_9 as Continue).0: u128);
        _8 = _24;
        StorageDead(_24);
        StorageLive(_25);
        _25 = _1;
        _7 = <u128 as SafeMath>::safe_div(move _8, move _25) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_21);
        _21 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_21);
        goto -> bb21;
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_7);
        _26 = discriminant(_6);
        switchInt(move _26) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_30);
        _30 = ((_6 as Continue).0: u128);
        _5 = _30;
        StorageDead(_30);
        _0 = <u128 as Cast>::cast::<u64>(move _5) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_27);
        _27 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_27);
        goto -> bb22;
    }

    bb18: {
        StorageDead(_5);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_4);
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(const 0_u64);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_3);
        goto -> bb23;
    }

    bb21: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_5);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb23;
    }

    bb23: {
        return;
    }
}
