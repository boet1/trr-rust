digraph Mir_0_13938 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U256::low_u128(_1: &amp;ReErased math::bn::U256) -&gt; u128<br align="left"/>let _2: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _3: u128;<br align="left"/>let mut _4: u128;<br align="left"/>let mut _5: u64;<br align="left"/>let _6: usize;<br align="left"/>let mut _7: usize;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: u32;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: u64;<br align="left"/>let _13: usize;<br align="left"/>let mut _14: usize;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: (u128, bool);<br align="left"/>debug self =&gt; _1;<br align="left"/>debug arr =&gt; _2;<br align="left"/>>;
    bb0__0_13938 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = &amp;((*_1).0: [u64; 4])<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = const 1_usize<br/>_7 = Len((*_2))<br/>_8 = Lt(_6, _7)<br/></td></tr><tr><td align="left">assert(move _8, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _7, _6)</td></tr></table>>];
    bb1__0_13938 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = (*_2)[_6]<br/>_4 = move _5 as u128 (IntToInt)<br/>StorageDead(_5)<br/>_9 = const 64_i32 as u32 (IntToInt)<br/>_10 = Lt(move _9, const 128_u32)<br/></td></tr><tr><td align="left">assert(move _10, &quot;attempt to shift left by `{}`, which would overflow&quot;, const 64_i32)</td></tr></table>>];
    bb2__0_13938 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_3 = Shl(move _4, const 64_i32)<br/>StorageDead(_4)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = const 0_usize<br/>_14 = Len((*_2))<br/>_15 = Lt(_13, _14)<br/></td></tr><tr><td align="left">assert(move _15, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _14, _13)</td></tr></table>>];
    bb3__0_13938 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_12 = (*_2)[_13]<br/>_11 = move _12 as u128 (IntToInt)<br/>StorageDead(_12)<br/>_16 = CheckedAdd(_3, _11)<br/></td></tr><tr><td align="left">assert(!move (_16.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _3, move _11)</td></tr></table>>];
    bb4__0_13938 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = move (_16.0: u128)<br/>StorageDead(_11)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageDead(_13)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_13938 -> bb1__0_13938 [label="success"];
    bb1__0_13938 -> bb2__0_13938 [label="success"];
    bb2__0_13938 -> bb3__0_13938 [label="success"];
    bb3__0_13938 -> bb4__0_13938 [label="success"];
}
