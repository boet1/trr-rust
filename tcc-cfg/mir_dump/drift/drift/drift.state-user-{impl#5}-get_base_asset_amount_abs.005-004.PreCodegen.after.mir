// MIR for `state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::get_base_asset_amount_abs` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:992:1: 992:18>::get_base_asset_amount_abs(_1: &PerpPosition) -> std::result::Result<i128, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let mut _2: i128;
    let mut _3: i128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _5: std::result::Result<i128, error::ErrorCode>;
    let mut _6: &state::user::PerpPosition;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: i128;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = PerpPosition::get_base_asset_amount(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: i128);
        _3 = _11;
        StorageDead(_11);
        _2 = core::num::<impl i128>::abs(move _3) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_4);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_3);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _2);
        StorageDead(_2);
        StorageDead(_4);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
