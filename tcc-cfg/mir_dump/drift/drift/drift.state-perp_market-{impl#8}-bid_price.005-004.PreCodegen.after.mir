// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::bid_price` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::bid_price(_1: &AMM, _2: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug reserve_price => _2;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _3: i32;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _5: std::result::Result<i32, error::ErrorCode>;
    let mut _6: i32;
    let mut _7: i32;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _9: std::result::Result<i32, error::ErrorCode>;
    let mut _10: u32;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i32;
    let mut _16: bool;
    let mut _17: i32;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: i32;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _25: std::result::Result<i128, error::ErrorCode>;
    let mut _26: i128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _28: std::result::Result<i128, error::ErrorCode>;
    let mut _29: i32;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: u128;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _42: std::result::Result<u128, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: u128;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _48: std::result::Result<u128, error::ErrorCode>;
    let mut _49: u64;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: u128;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _57: std::result::Result<u128, error::ErrorCode>;
    let mut _58: i128;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug adjusted_spread => _3;
        let _23: i128;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: i128;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: i128;
        scope 10 {
            debug multiplier => _23;
            let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _54: u128;
            let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _63: u128;
            let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _68: u128;
            let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _73: u128;
            scope 19 {
                debug residual => _51;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _54;
                scope 22 {
                }
            }
            scope 23 {
                debug residual => _60;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _63;
                scope 26 {
                }
            }
            scope 27 {
                debug residual => _65;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _68;
                scope 30 {
                }
            }
            scope 31 {
                debug residual => _70;
                scope 32 {
                }
            }
            scope 33 {
                debug val => _73;
                scope 34 {
                }
            }
        }
        scope 11 {
            debug residual => _31;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _34;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _36;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _39;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).66: u32);
        _9 = <u32 as Cast>::cast::<i32>(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: i32);
        _7 = _15;
        StorageDead(_15);
        _16 = Eq(_7, const i32::MIN);
        assert(!move _16, "attempt to negate `{}`, which would overflow", _7) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb48;
    }

    bb7: {
        _6 = Neg(move _7);
        StorageDead(_7);
        StorageLive(_17);
        _17 = ((*_1).82: i32);
        _5 = <i32 as SafeMath>::safe_add(move _6, move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        StorageDead(_6);
        _4 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _5) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_5);
        _18 = discriminant(_4);
        switchInt(move _18) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_4 as Continue).0: i32);
        _3 = _22;
        StorageDead(_22);
        StorageDead(_8);
        StorageDead(_4);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _3;
        _28 = <i32 as Cast>::cast::<i128>(move _29) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_19);
        _19 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_19);
        goto -> bb48;
    }

    bb13: {
        StorageDead(_29);
        _27 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: i128);
        _26 = _34;
        StorageDead(_34);
        _25 = <i128 as SafeMath>::safe_add(const _, move _26) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb47;
    }

    bb18: {
        StorageDead(_26);
        _24 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_25);
        _35 = discriminant(_24);
        switchInt(move _35) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_39);
        _39 = ((_24 as Continue).0: i128);
        _23 = _39;
        StorageDead(_39);
        StorageDead(_27);
        StorageDead(_24);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _2;
        _48 = <u64 as Cast>::cast::<u128>(move _49) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_36);
        _36 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_38);
        StorageDead(_36);
        goto -> bb47;
    }

    bb23: {
        StorageDead(_49);
        _47 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _48) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_48);
        _50 = discriminant(_47);
        switchInt(move _50) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_54);
        _54 = ((_47 as Continue).0: u128);
        _46 = _54;
        StorageDead(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _23;
        _57 = <i128 as Cast>::cast::<u128>(move _58) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_51);
        _51 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_23);
        StorageDead(_3);
        goto -> bb46;
    }

    bb28: {
        StorageDead(_58);
        _56 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _57) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_57);
        _59 = discriminant(_56);
        switchInt(move _59) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_63);
        _63 = ((_56 as Continue).0: u128);
        _55 = _63;
        StorageDead(_63);
        _45 = <u128 as SafeMath>::safe_mul(move _46, move _55) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_60);
        _60 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb44;
    }

    bb33: {
        StorageDead(_55);
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_45);
        _64 = discriminant(_44);
        switchInt(move _64) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_68);
        _68 = ((_44 as Continue).0: u128);
        _43 = _68;
        StorageDead(_68);
        _42 = <u128 as SafeMath>::safe_div(move _43, const _) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_65);
        _65 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_67);
        StorageDead(_65);
        goto -> bb44;
    }

    bb38: {
        StorageDead(_43);
        _41 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_42);
        _69 = discriminant(_41);
        switchInt(move _69) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_73);
        _73 = ((_41 as Continue).0: u128);
        _40 = _73;
        StorageDead(_73);
        _0 = <u128 as Cast>::cast::<u64>(move _40) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_70);
        _70 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_72);
        StorageDead(_70);
        goto -> bb45;
    }

    bb43: {
        StorageDead(_40);
        StorageDead(_23);
        StorageDead(_3);
        StorageDead(_56);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_41);
        goto -> bb50;
    }

    bb44: {
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_40);
        StorageDead(_23);
        StorageDead(_3);
        StorageDead(_56);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_41);
        goto -> bb50;
    }

    bb47: {
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb49;
    }

    bb48: {
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_3);
        goto -> bb50;
    }

    bb50: {
        return;
    }
}
