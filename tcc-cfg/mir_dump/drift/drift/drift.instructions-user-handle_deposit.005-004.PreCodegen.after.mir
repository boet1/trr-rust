// MIR for `instructions::user::handle_deposit` after PreCodegen

fn instructions::user::handle_deposit(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::Deposit<'_>>, _2: u16, _3: u64, _4: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amount => _3;
    debug reduce_only => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _9: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: anchor_lang::prelude::Pubkey;
    let mut _16: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _18: std::cell::RefMut<'_, state::user::User>;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _20: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _21: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _22: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _23: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _32: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _41: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _42: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _43: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _47: instructions::optional_accounts::AccountMaps<'_>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _49: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _50: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _51: &std::collections::BTreeSet<u16>;
    let _52: &std::collections::BTreeSet<u16>;
    let _53: std::collections::BTreeSet<u16>;
    let mut _54: &std::collections::BTreeSet<u16>;
    let _55: &std::collections::BTreeSet<u16>;
    let _56: std::collections::BTreeSet<u16>;
    let mut _57: u16;
    let mut _58: u64;
    let mut _59: std::option::Option<state::state::OracleGuardRails>;
    let mut _60: state::state::OracleGuardRails;
    let mut _61: &state::state::State;
    let mut _62: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _70: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _71: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _77: ();
    let mut _78: bool;
    let mut _79: u64;
    let mut _80: !;
    let mut _81: anchor_lang::error::Error;
    let mut _82: error::ErrorCode;
    let _83: ();
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _85: std::result::Result<(), error::ErrorCode>;
    let mut _86: bool;
    let mut _87: &state::user::User;
    let _88: &state::user::User;
    let mut _89: &std::cell::RefMut<'_, state::user::User>;
    let mut _90: ();
    let _92: ();
    let mut _93: &str;
    let _94: &str;
    let mut _95: &std::string::String;
    let _96: &std::string::String;
    let _97: std::string::String;
    let mut _99: std::fmt::Arguments<'_>;
    let mut _100: &[&str];
    let mut _101: &[&str; 2];
    let _102: &[&str; 2];
    let _103: [&str; 2];
    let mut _104: &[core::fmt::rt::Argument<'_>];
    let mut _105: &[core::fmt::rt::Argument<'_>; 1];
    let _106: &[core::fmt::rt::Argument<'_>; 1];
    let _107: [core::fmt::rt::Argument<'_>; 1];
    let mut _108: core::fmt::rt::Argument<'_>;
    let mut _109: &error::ErrorCode;
    let _110: &error::ErrorCode;
    let mut _111: error::ErrorCode;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _119: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _120: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _121: &u16;
    let _122: &u16;
    let mut _123: isize;
    let mut _125: !;
    let mut _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _129: &state::oracle::OraclePriceData;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _131: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _132: &mut state::oracle_map::OracleMap<'_>;
    let mut _133: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _134: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _135: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _136: &state::spot_market::SpotMarket;
    let _137: &state::spot_market::SpotMarket;
    let mut _138: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _144: ();
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _146: std::result::Result<(), error::ErrorCode>;
    let mut _147: bool;
    let mut _148: u8;
    let mut _149: &state::user::User;
    let mut _150: &std::cell::RefMut<'_, state::user::User>;
    let mut _151: u8;
    let mut _152: &state::spot_market::SpotMarket;
    let mut _153: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _154: ();
    let _156: ();
    let mut _157: &str;
    let _158: &str;
    let mut _159: &std::string::String;
    let _160: &std::string::String;
    let _161: std::string::String;
    let mut _163: std::fmt::Arguments<'_>;
    let mut _164: &[&str];
    let mut _165: &[&str; 2];
    let _166: &[&str; 2];
    let _167: [&str; 2];
    let mut _168: &[core::fmt::rt::Argument<'_>];
    let mut _169: &[core::fmt::rt::Argument<'_>; 1];
    let _170: &[core::fmt::rt::Argument<'_>; 1];
    let _171: [core::fmt::rt::Argument<'_>; 1];
    let mut _172: core::fmt::rt::Argument<'_>;
    let mut _173: &error::ErrorCode;
    let _174: &error::ErrorCode;
    let _175: ();
    let mut _176: &str;
    let _177: &str;
    let mut _178: &std::string::String;
    let _179: &std::string::String;
    let _180: std::string::String;
    let mut _182: std::fmt::Arguments<'_>;
    let mut _183: &[&str];
    let mut _184: &[&str; 3];
    let _185: &[&str; 3];
    let _186: [&str; 3];
    let mut _187: &[core::fmt::rt::Argument<'_>];
    let mut _188: &[core::fmt::rt::Argument<'_>; 2];
    let _189: &[core::fmt::rt::Argument<'_>; 2];
    let _190: [core::fmt::rt::Argument<'_>; 2];
    let mut _191: core::fmt::rt::Argument<'_>;
    let mut _192: &u8;
    let _193: &u8;
    let _194: &state::user::User;
    let mut _195: &std::cell::RefMut<'_, state::user::User>;
    let mut _196: core::fmt::rt::Argument<'_>;
    let mut _197: &u8;
    let _198: &u8;
    let _199: &state::spot_market::SpotMarket;
    let mut _200: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _201: error::ErrorCode;
    let mut _202: isize;
    let mut _204: !;
    let mut _205: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _207: ();
    let mut _208: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _209: std::result::Result<(), error::ErrorCode>;
    let mut _210: bool;
    let mut _211: &state::spot_market::SpotMarket;
    let mut _212: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _213: isize;
    let mut _214: ();
    let _216: ();
    let mut _217: &str;
    let _218: &str;
    let mut _219: &std::string::String;
    let _220: &std::string::String;
    let _221: std::string::String;
    let mut _223: std::fmt::Arguments<'_>;
    let mut _224: &[&str];
    let mut _225: &[&str; 2];
    let _226: &[&str; 2];
    let _227: [&str; 2];
    let mut _228: &[core::fmt::rt::Argument<'_>];
    let mut _229: &[core::fmt::rt::Argument<'_>; 1];
    let _230: &[core::fmt::rt::Argument<'_>; 1];
    let _231: [core::fmt::rt::Argument<'_>; 1];
    let mut _232: core::fmt::rt::Argument<'_>;
    let mut _233: &error::ErrorCode;
    let _234: &error::ErrorCode;
    let _235: ();
    let mut _236: &str;
    let _237: &str;
    let mut _238: error::ErrorCode;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _244: ();
    let mut _245: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _246: std::result::Result<(), error::ErrorCode>;
    let mut _247: &mut state::spot_market::SpotMarket;
    let mut _248: &mut state::spot_market::SpotMarket;
    let mut _249: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _250: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _251: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _252: &state::oracle::OraclePriceData;
    let _253: &state::oracle::OraclePriceData;
    let mut _254: i64;
    let mut _255: isize;
    let mut _257: !;
    let mut _258: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _262: std::result::Result<usize, error::ErrorCode>;
    let mut _263: &mut state::user::User;
    let mut _264: &mut state::user::User;
    let mut _265: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _266: u16;
    let mut _267: &state::spot_market::SpotMarket;
    let mut _268: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _269: isize;
    let mut _271: !;
    let mut _272: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _275: &state::user::SpotPosition;
    let _276: &state::user::User;
    let mut _277: &std::cell::RefMut<'_, state::user::User>;
    let _278: usize;
    let mut _279: usize;
    let mut _280: bool;
    let mut _282: &state::spot_market::SpotMarket;
    let _283: &state::spot_market::SpotMarket;
    let mut _284: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _286: bool;
    let mut _287: bool;
    let mut _288: bool;
    let mut _289: &state::spot_market::SpotBalanceType;
    let _290: &state::user::User;
    let mut _291: &std::cell::RefMut<'_, state::user::User>;
    let _292: usize;
    let mut _293: usize;
    let mut _294: bool;
    let mut _295: &state::spot_market::SpotBalanceType;
    let _296: state::spot_market::SpotBalanceType;
    let mut _297: u64;
    let mut _298: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _299: std::result::Result<u64, error::ErrorCode>;
    let mut _300: u128;
    let mut _301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _302: std::result::Result<u128, error::ErrorCode>;
    let mut _303: &state::user::SpotPosition;
    let _304: &state::user::User;
    let mut _305: &std::cell::RefMut<'_, state::user::User>;
    let _306: usize;
    let mut _307: usize;
    let mut _308: bool;
    let mut _309: &state::spot_market::SpotMarket;
    let _310: &state::spot_market::SpotMarket;
    let mut _311: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _312: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _313: isize;
    let mut _315: !;
    let mut _316: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _318: isize;
    let mut _320: !;
    let mut _321: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _323: u64;
    let _324: ();
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _326: std::result::Result<(), error::ErrorCode>;
    let mut _327: &mut state::user::User;
    let mut _328: &mut state::user::User;
    let mut _329: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _330: u64;
    let mut _331: i64;
    let mut _332: u128;
    let mut _333: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _334: std::result::Result<u128, error::ErrorCode>;
    let mut _335: u64;
    let mut _336: state::spot_market::SpotMarket;
    let mut _337: &state::spot_market::SpotMarket;
    let mut _338: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _339: isize;
    let mut _341: !;
    let mut _342: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _344: isize;
    let mut _346: !;
    let mut _347: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _350: &state::user::User;
    let mut _351: &std::cell::RefMut<'_, state::user::User>;
    let mut _353: &state::user::User;
    let mut _354: &std::cell::RefMut<'_, state::user::User>;
    let mut _356: &mut state::user::User;
    let mut _357: &mut std::cell::RefMut<'_, state::user::User>;
    let _358: usize;
    let mut _359: usize;
    let mut _360: bool;
    let _361: ();
    let mut _362: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _363: std::result::Result<(), error::ErrorCode>;
    let mut _364: u128;
    let mut _365: u64;
    let mut _366: &state::spot_market::SpotBalanceType;
    let _367: &state::spot_market::SpotBalanceType;
    let _368: state::spot_market::SpotBalanceType;
    let mut _369: &mut state::spot_market::SpotMarket;
    let mut _370: &mut state::spot_market::SpotMarket;
    let mut _371: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _372: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _373: &mut state::user::SpotPosition;
    let mut _374: std::option::Option<u128>;
    let mut _375: isize;
    let mut _377: !;
    let mut _378: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _381: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _382: std::result::Result<u128, error::ErrorCode>;
    let mut _383: &state::user::SpotPosition;
    let mut _384: &state::spot_market::SpotMarket;
    let _385: &state::spot_market::SpotMarket;
    let mut _386: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _387: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _388: isize;
    let mut _390: !;
    let mut _391: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _393: ();
    let mut _394: bool;
    let mut _395: u128;
    let _396: ();
    let mut _397: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _398: std::result::Result<(), error::ErrorCode>;
    let mut _399: bool;
    let mut _400: u64;
    let mut _401: ();
    let _403: ();
    let mut _404: &str;
    let _405: &str;
    let mut _406: &std::string::String;
    let _407: &std::string::String;
    let _408: std::string::String;
    let mut _410: std::fmt::Arguments<'_>;
    let mut _411: &[&str];
    let mut _412: &[&str; 2];
    let _413: &[&str; 2];
    let _414: [&str; 2];
    let mut _415: &[core::fmt::rt::Argument<'_>];
    let mut _416: &[core::fmt::rt::Argument<'_>; 1];
    let _417: &[core::fmt::rt::Argument<'_>; 1];
    let _418: [core::fmt::rt::Argument<'_>; 1];
    let mut _419: core::fmt::rt::Argument<'_>;
    let mut _420: &error::ErrorCode;
    let _421: &error::ErrorCode;
    let _422: ();
    let mut _423: &str;
    let _424: &str;
    let mut _425: &std::string::String;
    let _426: &std::string::String;
    let _427: std::string::String;
    let mut _429: std::fmt::Arguments<'_>;
    let mut _430: &[&str];
    let mut _431: &[&str; 2];
    let _432: &[&str; 2];
    let _433: [&str; 2];
    let mut _434: &[core::fmt::rt::Argument<'_>];
    let mut _435: &[core::fmt::rt::Argument<'_>; 2];
    let _436: &[core::fmt::rt::Argument<'_>; 2];
    let _437: [core::fmt::rt::Argument<'_>; 2];
    let mut _438: core::fmt::rt::Argument<'_>;
    let mut _439: &u64;
    let _440: &u64;
    let mut _441: core::fmt::rt::Argument<'_>;
    let mut _442: &u128;
    let _443: &u128;
    let mut _444: error::ErrorCode;
    let mut _445: isize;
    let mut _447: !;
    let mut _448: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _450: ();
    let mut _451: bool;
    let mut _452: &state::spot_market::SpotBalanceType;
    let mut _453: &state::spot_market::SpotBalanceType;
    let _454: state::spot_market::SpotBalanceType;
    let mut _455: bool;
    let mut _456: u64;
    let _457: ();
    let mut _458: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _459: std::result::Result<(), error::ErrorCode>;
    let mut _460: bool;
    let mut _461: &state::spot_market::SpotMarket;
    let mut _462: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _463: isize;
    let mut _464: ();
    let _466: ();
    let mut _467: &str;
    let _468: &str;
    let mut _469: &std::string::String;
    let _470: &std::string::String;
    let _471: std::string::String;
    let mut _473: std::fmt::Arguments<'_>;
    let mut _474: &[&str];
    let mut _475: &[&str; 2];
    let _476: &[&str; 2];
    let _477: [&str; 2];
    let mut _478: &[core::fmt::rt::Argument<'_>];
    let mut _479: &[core::fmt::rt::Argument<'_>; 1];
    let _480: &[core::fmt::rt::Argument<'_>; 1];
    let _481: [core::fmt::rt::Argument<'_>; 1];
    let mut _482: core::fmt::rt::Argument<'_>;
    let mut _483: &error::ErrorCode;
    let _484: &error::ErrorCode;
    let _485: ();
    let mut _486: &str;
    let _487: &str;
    let mut _488: &std::string::String;
    let _489: &std::string::String;
    let _490: std::string::String;
    let mut _492: std::fmt::Arguments<'_>;
    let mut _493: &[&str];
    let mut _494: &[&str; 1];
    let _495: &[&str; 1];
    let _496: [&str; 1];
    let mut _497: error::ErrorCode;
    let mut _498: isize;
    let mut _500: !;
    let mut _501: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _503: ();
    let mut _504: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _505: ();
    let mut _506: bool;
    let mut _507: &state::user::User;
    let _508: &state::user::User;
    let mut _509: &std::cell::RefMut<'_, state::user::User>;
    let mut _511: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _512: std::result::Result<bool, error::ErrorCode>;
    let mut _513: &state::user::User;
    let _514: &state::user::User;
    let mut _515: &std::cell::RefMut<'_, state::user::User>;
    let mut _516: &state::perp_market_map::PerpMarketMap<'_>;
    let _517: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _518: &state::spot_market_map::SpotMarketMap<'_>;
    let _519: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _520: &mut state::oracle_map::OracleMap<'_>;
    let mut _521: &mut state::oracle_map::OracleMap<'_>;
    let mut _522: u32;
    let mut _523: &state::state::State;
    let mut _524: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _525: isize;
    let mut _527: !;
    let mut _528: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _530: bool;
    let _531: ();
    let mut _532: &mut state::user::User;
    let mut _533: &mut state::user::User;
    let mut _534: &mut std::cell::RefMut<'_, state::user::User>;
    let _535: ();
    let mut _536: &mut state::user::User;
    let mut _537: &mut state::user::User;
    let mut _538: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _539: u64;
    let mut _541: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _542: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _543: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _544: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _545: &u16;
    let _546: &u16;
    let mut _547: isize;
    let mut _549: !;
    let mut _550: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _552: ();
    let mut _553: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _554: std::result::Result<(), anchor_lang::error::Error>;
    let mut _555: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _556: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _557: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _558: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _559: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _560: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _561: &anchor_lang::prelude::AccountInfo<'_>;
    let _562: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _563: &anchor_lang::prelude::Signer<'_>;
    let _564: &anchor_lang::prelude::Signer<'_>;
    let mut _565: u64;
    let mut _566: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _567: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _568: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _569: bool;
    let mut _570: &state::spot_market::SpotMarket;
    let _571: &state::spot_market::SpotMarket;
    let mut _572: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _573: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _574: isize;
    let mut _576: !;
    let mut _577: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _579: ();
    let mut _580: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _581: std::result::Result<(), anchor_lang::error::Error>;
    let mut _582: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _583: isize;
    let mut _585: !;
    let mut _586: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _590: &state::spot_market::SpotMarket;
    let mut _591: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _592: u64;
    let mut _593: std::option::Option<u64>;
    let mut _594: std::option::Option<u64>;
    let mut _595: u64;
    let mut _596: std::option::Option<u64>;
    let mut _597: &mut state::spot_market::SpotMarket;
    let mut _598: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _601: bool;
    let mut _603: i64;
    let mut _604: u64;
    let mut _605: anchor_lang::prelude::Pubkey;
    let mut _606: &state::user::User;
    let mut _607: &std::cell::RefMut<'_, state::user::User>;
    let mut _608: anchor_lang::prelude::Pubkey;
    let mut _609: state::events::DepositDirection;
    let mut _610: u64;
    let mut _611: i64;
    let mut _612: u128;
    let mut _613: &state::spot_market::SpotMarket;
    let mut _614: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _615: u128;
    let mut _616: &state::spot_market::SpotMarket;
    let mut _617: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _618: u128;
    let mut _619: &state::spot_market::SpotMarket;
    let mut _620: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _621: u128;
    let mut _622: &state::spot_market::SpotMarket;
    let mut _623: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _624: u64;
    let mut _625: u64;
    let mut _626: u16;
    let mut _627: state::events::DepositExplanation;
    let mut _628: std::option::Option<anchor_lang::prelude::Pubkey>;
    let _629: ();
    let _630: ();
    let mut _631: &[&[u8]];
    let mut _632: &[&[u8]; 1];
    let _633: &[&[u8]; 1];
    let _634: [&[u8]; 1];
    let mut _635: &[u8];
    let _636: &[u8];
    let mut _637: &std::vec::Vec<u8>;
    let _638: &std::vec::Vec<u8>;
    let _639: std::vec::Vec<u8>;
    let mut _640: &state::events::DepositRecord;
    let _641: &state::events::DepositRecord;
    let _642: ();
    let mut _643: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _644: std::result::Result<(), error::ErrorCode>;
    let mut _645: &state::spot_market::SpotMarket;
    let _646: &state::spot_market::SpotMarket;
    let mut _647: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _648: isize;
    let mut _650: !;
    let mut _651: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _653: ();
    let mut _665: &mut instructions::user::Deposit<'_>;
    let mut _666: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _667: &mut instructions::user::Deposit<'_>;
    let mut _668: &mut instructions::user::Deposit<'_>;
    let mut _669: &mut instructions::user::Deposit<'_>;
    let mut _670: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _671: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _672: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _673: &mut instructions::user::Deposit<'_>;
    let mut _674: &mut instructions::user::Deposit<'_>;
    let mut _675: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _676: &mut instructions::user::Deposit<'_>;
    let mut _677: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _678: &mut instructions::user::Deposit<'_>;
    let mut _679: &mut instructions::user::Deposit<'_>;
    let mut _680: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _681: bool;
    let mut _682: isize;
    let mut _683: isize;
    let mut _684: isize;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    let mut _698: isize;
    let mut _699: isize;
    let mut _700: isize;
    let mut _701: isize;
    let mut _702: isize;
    let mut _703: isize;
    let mut _704: isize;
    let mut _705: isize;
    let mut _706: isize;
    let mut _707: isize;
    let mut _708: isize;
    let mut _709: isize;
    let mut _710: isize;
    let mut _711: isize;
    let mut _712: isize;
    let mut _713: isize;
    let mut _714: isize;
    let mut _715: isize;
    let mut _716: isize;
    let mut _717: isize;
    let mut _718: isize;
    let mut _719: isize;
    let mut _720: isize;
    let mut _721: isize;
    let mut _722: isize;
    let mut _723: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _724: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _725: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _726: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _727: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _728: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug user_key => _15;
        let _17: &mut std::cell::RefMut<'_, state::user::User>;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: std::cell::RefMut<'_, state::user::User>;
        scope 6 {
            debug user => _17;
            let _29: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 11 {
                debug state => _29;
                let _30: anchor_lang::prelude::Clock;
                let _34: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _37: anchor_lang::prelude::Clock;
                scope 12 {
                    debug clock => _30;
                    let _38: i64;
                    scope 17 {
                        debug now => _38;
                        let _39: u64;
                        scope 18 {
                            debug slot => _39;
                            let _40: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                            scope 19 {
                                debug remaining_accounts_iter => _40;
                                let _44: state::perp_market_map::PerpMarketMap<'_>;
                                let _45: state::spot_market_map::SpotMarketMap<'_>;
                                let mut _46: state::oracle_map::OracleMap<'_>;
                                let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _67: instructions::optional_accounts::AccountMaps<'_>;
                                scope 20 {
                                    debug perp_market_map => _44;
                                    debug spot_market_map => _45;
                                    debug oracle_map => _46;
                                    let _68: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                    let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _76: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                    scope 25 {
                                        debug mint => _68;
                                        let _91: error::ErrorCode;
                                        let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _116: ();
                                        let mut _117: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        let _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _127: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                        scope 30 {
                                            debug error_code => _91;
                                            let _98: std::string::String;
                                            let mut _664: &[&str; 2];
                                            scope 31 {
                                                debug res => _98;
                                            }
                                        }
                                        scope 32 {
                                            debug residual => _113;
                                            scope 33 {
                                            }
                                        }
                                        scope 34 {
                                            debug val => _116;
                                            scope 35 {
                                            }
                                        }
                                        scope 36 {
                                            debug spot_market => _117;
                                            let _128: state::oracle::OraclePriceData;
                                            let _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _143: &state::oracle::OraclePriceData;
                                            scope 41 {
                                                debug oracle_price_data => _128;
                                                let _155: error::ErrorCode;
                                                let _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _206: ();
                                                let _215: error::ErrorCode;
                                                let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _243: ();
                                                let _256: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _259: ();
                                                let _260: usize;
                                                let _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _273: usize;
                                                scope 46 {
                                                    debug error_code => _155;
                                                    let _162: std::string::String;
                                                    let _181: std::string::String;
                                                    let mut _662: &[&str; 3];
                                                    let mut _663: &[&str; 2];
                                                    scope 47 {
                                                        debug res => _162;
                                                    }
                                                    scope 48 {
                                                        debug res => _181;
                                                    }
                                                }
                                                scope 49 {
                                                    debug residual => _203;
                                                    scope 50 {
                                                    }
                                                }
                                                scope 51 {
                                                    debug val => _206;
                                                    scope 52 {
                                                    }
                                                }
                                                scope 53 {
                                                    debug error_code => _215;
                                                    let _222: std::string::String;
                                                    let mut _661: &[&str; 2];
                                                    scope 54 {
                                                        debug res => _222;
                                                    }
                                                }
                                                scope 55 {
                                                    debug residual => _240;
                                                    scope 56 {
                                                    }
                                                }
                                                scope 57 {
                                                    debug val => _243;
                                                    scope 58 {
                                                    }
                                                }
                                                scope 59 {
                                                    debug residual => _256;
                                                    scope 60 {
                                                    }
                                                }
                                                scope 61 {
                                                    debug val => _259;
                                                    scope 62 {
                                                    }
                                                }
                                                scope 63 {
                                                    debug position_index => _260;
                                                    let _274: bool;
                                                    scope 68 {
                                                        debug is_borrow_before => _274;
                                                        let _281: bool;
                                                        scope 69 {
                                                            debug force_reduce_only => _281;
                                                            let _285: u64;
                                                            let _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _317: u128;
                                                            let _319: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _322: u64;
                                                            let mut _660: &state::spot_market::SpotBalanceType;
                                                            scope 70 {
                                                                debug amount => _285;
                                                                let _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _343: u128;
                                                                let _345: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _348: ();
                                                                let _349: u64;
                                                                scope 79 {
                                                                    debug residual => _340;
                                                                    scope 80 {
                                                                    }
                                                                }
                                                                scope 81 {
                                                                    debug val => _343;
                                                                    scope 82 {
                                                                    }
                                                                }
                                                                scope 83 {
                                                                    debug residual => _345;
                                                                    scope 84 {
                                                                    }
                                                                }
                                                                scope 85 {
                                                                    debug val => _348;
                                                                    scope 86 {
                                                                    }
                                                                }
                                                                scope 87 {
                                                                    debug total_deposits_after => _349;
                                                                    let _352: u64;
                                                                    scope 88 {
                                                                        debug total_withdraws_after => _352;
                                                                        let _355: &mut state::user::SpotPosition;
                                                                        scope 89 {
                                                                            debug spot_position => _355;
                                                                            let _376: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _379: ();
                                                                            let _380: u128;
                                                                            let _389: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _392: u128;
                                                                            let mut _659: &state::spot_market::SpotBalanceType;
                                                                            scope 90 {
                                                                                debug residual => _376;
                                                                                scope 91 {
                                                                                }
                                                                            }
                                                                            scope 92 {
                                                                                debug val => _379;
                                                                                scope 93 {
                                                                                }
                                                                            }
                                                                            scope 94 {
                                                                                debug token_amount => _380;
                                                                                let _402: error::ErrorCode;
                                                                                let _446: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _449: ();
                                                                                let _465: error::ErrorCode;
                                                                                let _499: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _502: ();
                                                                                let _510: bool;
                                                                                let _526: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _529: bool;
                                                                                let _540: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                let _548: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _551: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                                                let mut _656: &state::spot_market::SpotBalanceType;
                                                                                scope 99 {
                                                                                    debug error_code => _402;
                                                                                    let _409: std::string::String;
                                                                                    let _428: std::string::String;
                                                                                    let mut _657: &[&str; 2];
                                                                                    let mut _658: &[&str; 2];
                                                                                    scope 100 {
                                                                                        debug res => _409;
                                                                                    }
                                                                                    scope 101 {
                                                                                        debug res => _428;
                                                                                    }
                                                                                }
                                                                                scope 102 {
                                                                                    debug residual => _446;
                                                                                    scope 103 {
                                                                                    }
                                                                                }
                                                                                scope 104 {
                                                                                    debug val => _449;
                                                                                    scope 105 {
                                                                                    }
                                                                                }
                                                                                scope 106 {
                                                                                    debug error_code => _465;
                                                                                    let _472: std::string::String;
                                                                                    let _491: std::string::String;
                                                                                    let mut _654: &[&str; 1];
                                                                                    let mut _655: &[&str; 2];
                                                                                    scope 107 {
                                                                                        debug res => _472;
                                                                                    }
                                                                                    scope 108 {
                                                                                        debug res => _491;
                                                                                    }
                                                                                }
                                                                                scope 109 {
                                                                                    debug residual => _499;
                                                                                    scope 110 {
                                                                                    }
                                                                                }
                                                                                scope 111 {
                                                                                    debug val => _502;
                                                                                    scope 112 {
                                                                                    }
                                                                                }
                                                                                scope 113 {
                                                                                    debug is_being_liquidated => _510;
                                                                                }
                                                                                scope 114 {
                                                                                    debug residual => _526;
                                                                                    scope 115 {
                                                                                    }
                                                                                }
                                                                                scope 116 {
                                                                                    debug val => _529;
                                                                                    scope 117 {
                                                                                    }
                                                                                }
                                                                                scope 118 {
                                                                                    debug spot_market => _540;
                                                                                    let _575: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _578: ();
                                                                                    let _584: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _587: ();
                                                                                    let _588: u64;
                                                                                    let _589: u64;
                                                                                    scope 123 {
                                                                                        debug residual => _575;
                                                                                        scope 124 {
                                                                                        }
                                                                                    }
                                                                                    scope 125 {
                                                                                        debug val => _578;
                                                                                        scope 126 {
                                                                                        }
                                                                                    }
                                                                                    scope 127 {
                                                                                        debug residual => _584;
                                                                                        scope 128 {
                                                                                        }
                                                                                    }
                                                                                    scope 129 {
                                                                                        debug val => _587;
                                                                                        scope 130 {
                                                                                        }
                                                                                    }
                                                                                    scope 131 {
                                                                                        debug deposit_record_id => _588;
                                                                                        let _599: i64;
                                                                                        scope 133 {
                                                                                            debug oracle_price => _599;
                                                                                            let _600: state::events::DepositExplanation;
                                                                                            scope 134 {
                                                                                                debug explanation => _600;
                                                                                                let _602: state::events::DepositRecord;
                                                                                                scope 135 {
                                                                                                    debug deposit_record => _602;
                                                                                                    let _649: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _652: ();
                                                                                                    scope 136 {
                                                                                                        debug residual => _649;
                                                                                                        scope 137 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 138 {
                                                                                                        debug val => _652;
                                                                                                        scope 139 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 132 {
                                                                                        debug current_id => _589;
                                                                                    }
                                                                                }
                                                                                scope 119 {
                                                                                    debug residual => _548;
                                                                                    scope 120 {
                                                                                    }
                                                                                }
                                                                                scope 121 {
                                                                                    debug val => _551;
                                                                                    scope 122 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 95 {
                                                                                debug residual => _389;
                                                                                scope 96 {
                                                                                }
                                                                            }
                                                                            scope 97 {
                                                                                debug val => _392;
                                                                                scope 98 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 71 {
                                                                debug residual => _314;
                                                                scope 72 {
                                                                }
                                                            }
                                                            scope 73 {
                                                                debug val => _317;
                                                                scope 74 {
                                                                }
                                                            }
                                                            scope 75 {
                                                                debug residual => _319;
                                                                scope 76 {
                                                                }
                                                            }
                                                            scope 77 {
                                                                debug val => _322;
                                                                scope 78 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 64 {
                                                    debug residual => _270;
                                                    scope 65 {
                                                    }
                                                }
                                                scope 66 {
                                                    debug val => _273;
                                                    scope 67 {
                                                    }
                                                }
                                            }
                                            scope 42 {
                                                debug residual => _140;
                                                scope 43 {
                                                }
                                            }
                                            scope 44 {
                                                debug val => _143;
                                                scope 45 {
                                                }
                                            }
                                        }
                                        scope 37 {
                                            debug residual => _124;
                                            scope 38 {
                                            }
                                        }
                                        scope 39 {
                                            debug val => _127;
                                            scope 40 {
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _73;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _76;
                                        scope 29 {
                                        }
                                    }
                                }
                                scope 21 {
                                    debug residual => _64;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug val => _67;
                                    scope 24 {
                                    }
                                }
                            }
                        }
                    }
                }
                scope 13 {
                    debug residual => _34;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _37;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _25;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _28;
            scope 10 {
            }
        }
    }

    bb0: {
        _681 = const false;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _665 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _9 = &((*_665).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _666 = deref_copy (*_9);
        _723 = (((_666.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _8 = &(*_723);
        _7 = constraints::deposit_not_paused(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb336];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _682 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        _667 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _16 = &((*_667).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _15 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb347];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _712 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb318;
    }

    bb7: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _668 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _22 = &((*_668).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _21 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        StorageLive(_23);
        _23 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _20 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _21, move _23) -> [return: bb9, unwind: bb336];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_21);
        _19 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _20) -> [return: bb10, unwind: bb336];
    }

    bb10: {
        StorageDead(_20);
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_28);
        _28 = move ((_19 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _18 = move _28;
        StorageDead(_28);
        _17 = &mut _18;
        _686 = discriminant(_19);
        StorageDead(_19);
        StorageLive(_29);
        _669 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _29 = &((*_669).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb14, unwind: bb335];
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb13, unwind: bb346];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _684 = discriminant(_19);
        StorageDead(_19);
        goto -> bb317;
    }

    bb14: {
        _31 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _32) -> [return: bb15, unwind: bb335];
    }

    bb15: {
        StorageDead(_32);
        _33 = discriminant(_31);
        switchInt(move _33) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_37);
        _37 = move ((_31 as Continue).0: anchor_lang::prelude::Clock);
        _30 = move _37;
        StorageDead(_37);
        _688 = discriminant(_31);
        StorageDead(_31);
        StorageLive(_38);
        _38 = (_30.4: i64);
        StorageLive(_39);
        _39 = (_30.0: u64);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _670 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _43 = &(*_670);
        _42 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _43) -> [return: bb19, unwind: bb335];
    }

    bb17: {
        StorageLive(_34);
        _34 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_36);
        _36 = move _34;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _36) -> [return: bb18, unwind: bb345];
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_34);
        _710 = discriminant(_31);
        StorageDead(_31);
        goto -> bb316;
    }

    bb19: {
        StorageDead(_43);
        _41 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _42) -> [return: bb20, unwind: bb335];
    }

    bb20: {
        StorageDead(_42);
        _40 = &mut _41;
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &mut (*_40);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = BTreeSet::<u16>::new() -> [return: bb21, unwind: bb335];
    }

    bb21: {
        _52 = &_53;
        _51 = &(*_52);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _2;
        _56 = get_writable_spot_market_set(move _57) -> [return: bb22, unwind: bb334];
    }

    bb22: {
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        StorageLive(_58);
        _58 = (_30.0: u64);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _671 = deref_copy (*_29);
        _724 = (((_671.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _62 = &(*_724);
        _61 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _62) -> [return: bb23, unwind: bb333];
    }

    bb23: {
        StorageDead(_62);
        _60 = ((*_61).7: state::state::OracleGuardRails);
        _59 = Option::<state::state::OracleGuardRails>::Some(move _60);
        StorageDead(_60);
        _49 = load_maps(move _50, move _51, move _54, move _58, move _59) -> [return: bb24, unwind: bb333];
    }

    bb24: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _49) -> [return: bb25, unwind: bb333];
    }

    bb25: {
        StorageDead(_49);
        _63 = discriminant(_48);
        switchInt(move _63) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_67);
        _67 = move ((_48 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _47 = move _67;
        StorageDead(_67);
        StorageLive(_44);
        _44 = move (_47.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_45);
        _45 = move (_47.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_46);
        _46 = move (_47.2: state::oracle_map::OracleMap<'_>);
        _692 = discriminant(_48);
        StorageDead(_61);
        drop(_56) -> [return: bb29, unwind: bb329];
    }

    bb27: {
        StorageLive(_64);
        _64 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb28, unwind: bb344];
    }

    bb28: {
        StorageDead(_66);
        StorageDead(_64);
        _690 = discriminant(_48);
        StorageDead(_61);
        drop(_56) -> [return: bb313, unwind: bb334];
    }

    bb29: {
        StorageDead(_56);
        StorageDead(_55);
        drop(_53) -> [return: bb30, unwind: bb330];
    }

    bb30: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &mut (*_40);
        _70 = get_token_mint(move _71) -> [return: bb31, unwind: bb330];
    }

    bb31: {
        StorageDead(_71);
        _69 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _70) -> [return: bb32, unwind: bb330];
    }

    bb32: {
        StorageDead(_70);
        _72 = discriminant(_69);
        switchInt(move _72) -> [0: bb33, 1: bb34, otherwise: bb4];
    }

    bb33: {
        StorageLive(_76);
        _76 = move ((_69 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _68 = move _76;
        StorageDead(_76);
        StorageDead(_69);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _3;
        _78 = Eq(move _79, const 0_u64);
        switchInt(move _78) -> [0: bb37, otherwise: bb36];
    }

    bb34: {
        StorageLive(_73);
        _73 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb35, unwind: bb330];
    }

    bb35: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_69);
        goto -> bb309;
    }

    bb36: {
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        _82 = error::ErrorCode::InsufficientDeposit;
        _81 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _82) -> [return: bb38, unwind: bb330];
    }

    bb37: {
        StorageDead(_79);
        _77 = const ();
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_17);
        _88 = <RefMut<'_, User> as Deref>::deref(move _89) -> [return: bb39, unwind: bb330];
    }

    bb38: {
        StorageDead(_82);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _81);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb309;
    }

    bb39: {
        _87 = &(*_88);
        StorageDead(_89);
        _86 = User::is_bankrupt(move _87) -> [return: bb40, unwind: bb330];
    }

    bb40: {
        switchInt(move _86) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_87);
        StorageDead(_88);
        StorageLive(_91);
        _91 = error::ErrorCode::UserBankrupt;
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _664 = const _;
        _102 = &(*_664);
        _101 = &(*_102);
        _100 = move _101 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_101);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_91;
        _109 = &(*_110);
        _108 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _109) -> [return: bb43, unwind: bb330];
    }

    bb42: {
        StorageDead(_87);
        StorageDead(_88);
        StorageLive(_90);
        _90 = ();
        _85 = std::result::Result::<(), error::ErrorCode>::Ok(move _90);
        StorageDead(_90);
        goto -> bb49;
    }

    bb43: {
        StorageDead(_109);
        _107 = [move _108];
        StorageDead(_108);
        _106 = &_107;
        _105 = &(*_106);
        _104 = move _105 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_105);
        _99 = Arguments::<'_>::new_v1(move _100, move _104) -> [return: bb44, unwind: bb330];
    }

    bb44: {
        StorageDead(_104);
        StorageDead(_100);
        _98 = format(move _99) -> [return: bb45, unwind: bb330];
    }

    bb45: {
        StorageDead(_99);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_102);
        _97 = move _98;
        StorageDead(_98);
        _96 = &_97;
        _95 = &(*_96);
        _94 = <String as Deref>::deref(move _95) -> [return: bb46, unwind: bb328];
    }

    bb46: {
        _93 = &(*_94);
        StorageDead(_95);
        _92 = solana_program::log::sol_log(move _93) -> [return: bb47, unwind: bb328];
    }

    bb47: {
        StorageDead(_93);
        drop(_97) -> [return: bb48, unwind: bb330];
    }

    bb48: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_92);
        StorageLive(_111);
        _111 = _91;
        _85 = std::result::Result::<(), error::ErrorCode>::Err(move _111);
        StorageDead(_111);
        StorageDead(_91);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_86);
        _84 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _85) -> [return: bb50, unwind: bb330];
    }

    bb50: {
        StorageDead(_85);
        _112 = discriminant(_84);
        switchInt(move _112) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_116);
        _116 = ((_84 as Continue).0: ());
        _83 = _116;
        StorageDead(_116);
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_45;
        StorageLive(_121);
        StorageLive(_122);
        _122 = &_2;
        _121 = &(*_122);
        _119 = SpotMarketMap::<'_>::get_ref_mut(move _120, move _121) -> [return: bb54, unwind: bb330];
    }

    bb52: {
        StorageLive(_113);
        _113 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb53, unwind: bb330];
    }

    bb53: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_84);
        StorageDead(_83);
        goto -> bb309;
    }

    bb54: {
        StorageDead(_121);
        StorageDead(_120);
        _118 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _119) -> [return: bb55, unwind: bb330];
    }

    bb55: {
        StorageDead(_119);
        _123 = discriminant(_118);
        switchInt(move _123) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_127);
        _127 = move ((_118 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _681 = const true;
        _117 = move _127;
        StorageDead(_127);
        _696 = discriminant(_118);
        StorageDead(_122);
        StorageDead(_118);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &mut _46;
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_117;
        _137 = <RefMut<'_, SpotMarket> as Deref>::deref(move _138) -> [return: bb59, unwind: bb342];
    }

    bb57: {
        StorageLive(_124);
        _124 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_126);
        _126 = _124;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _126) -> [return: bb58, unwind: bb343];
    }

    bb58: {
        StorageDead(_126);
        StorageDead(_124);
        _694 = discriminant(_118);
        StorageDead(_122);
        StorageDead(_118);
        goto -> bb308;
    }

    bb59: {
        _136 = &(*_137);
        StorageDead(_138);
        _135 = SpotMarket::oracle_id(move _136) -> [return: bb60, unwind: bb342];
    }

    bb60: {
        StorageDead(_136);
        _134 = &_135;
        _133 = &(*_134);
        _131 = OracleMap::<'_>::get_price_data(move _132, move _133) -> [return: bb61, unwind: bb342];
    }

    bb61: {
        StorageDead(_133);
        StorageDead(_132);
        _130 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _131) -> [return: bb62, unwind: bb342];
    }

    bb62: {
        StorageDead(_131);
        _139 = discriminant(_130);
        switchInt(move _139) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_143);
        _143 = ((_130 as Continue).0: &state::oracle::OraclePriceData);
        _129 = _143;
        StorageDead(_143);
        _128 = (*_129);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(*_17);
        _149 = <RefMut<'_, User> as Deref>::deref(move _150) -> [return: bb66, unwind: bb342];
    }

    bb64: {
        StorageLive(_140);
        _140 = ((_130 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_142);
        _142 = _140;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _142) -> [return: bb65, unwind: bb342];
    }

    bb65: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_130);
        StorageDead(_129);
        goto -> bb307;
    }

    bb66: {
        StorageDead(_150);
        _148 = ((*_149).27: u8);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_117;
        _152 = <RefMut<'_, SpotMarket> as Deref>::deref(move _153) -> [return: bb67, unwind: bb342];
    }

    bb67: {
        StorageDead(_153);
        _151 = ((*_152).62: u8);
        _147 = Eq(move _148, move _151);
        switchInt(move _147) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_154);
        _154 = ();
        _146 = std::result::Result::<(), error::ErrorCode>::Ok(move _154);
        StorageDead(_154);
        goto -> bb85;
    }

    bb69: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_155);
        _155 = error::ErrorCode::InvalidPoolId;
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _663 = const _;
        _166 = &(*_663);
        _165 = &(*_166);
        _164 = move _165 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_165);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_155;
        _173 = &(*_174);
        _172 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _173) -> [return: bb70, unwind: bb342];
    }

    bb70: {
        StorageDead(_173);
        _171 = [move _172];
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = move _169 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_169);
        _163 = Arguments::<'_>::new_v1(move _164, move _168) -> [return: bb71, unwind: bb342];
    }

    bb71: {
        StorageDead(_168);
        StorageDead(_164);
        _162 = format(move _163) -> [return: bb72, unwind: bb342];
    }

    bb72: {
        StorageDead(_163);
        StorageDead(_174);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_166);
        _161 = move _162;
        StorageDead(_162);
        _160 = &_161;
        _159 = &(*_160);
        _158 = <String as Deref>::deref(move _159) -> [return: bb73, unwind: bb327];
    }

    bb73: {
        _157 = &(*_158);
        StorageDead(_159);
        _156 = solana_program::log::sol_log(move _157) -> [return: bb74, unwind: bb327];
    }

    bb74: {
        StorageDead(_157);
        drop(_161) -> [return: bb75, unwind: bb342];
    }

    bb75: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_156);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _662 = const _;
        _185 = &(*_662);
        _184 = &(*_185);
        _183 = move _184 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_184);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &(*_17);
        _194 = <RefMut<'_, User> as Deref>::deref(move _195) -> [return: bb76, unwind: bb342];
    }

    bb76: {
        StorageDead(_195);
        _193 = &((*_194).27: u8);
        _192 = &(*_193);
        _191 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _192) -> [return: bb77, unwind: bb342];
    }

    bb77: {
        StorageDead(_192);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &_117;
        _199 = <RefMut<'_, SpotMarket> as Deref>::deref(move _200) -> [return: bb78, unwind: bb342];
    }

    bb78: {
        StorageDead(_200);
        _198 = &((*_199).62: u8);
        _197 = &(*_198);
        _196 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _197) -> [return: bb79, unwind: bb342];
    }

    bb79: {
        StorageDead(_197);
        _190 = [move _191, move _196];
        StorageDead(_196);
        StorageDead(_191);
        _189 = &_190;
        _188 = &(*_189);
        _187 = move _188 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_188);
        _182 = Arguments::<'_>::new_v1(move _183, move _187) -> [return: bb80, unwind: bb342];
    }

    bb80: {
        StorageDead(_187);
        StorageDead(_183);
        _181 = format(move _182) -> [return: bb81, unwind: bb342];
    }

    bb81: {
        StorageDead(_182);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_185);
        _180 = move _181;
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = <String as Deref>::deref(move _178) -> [return: bb82, unwind: bb326];
    }

    bb82: {
        _176 = &(*_177);
        StorageDead(_178);
        _175 = solana_program::log::sol_log(move _176) -> [return: bb83, unwind: bb326];
    }

    bb83: {
        StorageDead(_176);
        drop(_180) -> [return: bb84, unwind: bb342];
    }

    bb84: {
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageLive(_201);
        _201 = _155;
        _146 = std::result::Result::<(), error::ErrorCode>::Err(move _201);
        StorageDead(_201);
        StorageDead(_155);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_147);
        _145 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _146) -> [return: bb86, unwind: bb342];
    }

    bb86: {
        StorageDead(_146);
        _202 = discriminant(_145);
        switchInt(move _202) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_206);
        _206 = ((_145 as Continue).0: ());
        _144 = _206;
        StorageDead(_206);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_117;
        _211 = <RefMut<'_, SpotMarket> as Deref>::deref(move _212) -> [return: bb90, unwind: bb342];
    }

    bb88: {
        StorageLive(_203);
        _203 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_205);
        _205 = _203;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _205) -> [return: bb89, unwind: bb342];
    }

    bb89: {
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb307;
    }

    bb90: {
        StorageDead(_212);
        _213 = discriminant(((*_211).45: state::perp_market::MarketStatus));
        switchInt(move _213) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _210 = const false;
        goto -> bb93;
    }

    bb92: {
        _210 = const true;
        goto -> bb93;
    }

    bb93: {
        switchInt(move _210) -> [0: bb94, otherwise: bb95];
    }

    bb94: {
        StorageDead(_211);
        StorageLive(_214);
        _214 = ();
        _209 = std::result::Result::<(), error::ErrorCode>::Ok(move _214);
        StorageDead(_214);
        goto -> bb103;
    }

    bb95: {
        StorageDead(_211);
        StorageLive(_215);
        _215 = error::ErrorCode::MarketBeingInitialized;
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _661 = const _;
        _226 = &(*_661);
        _225 = &(*_226);
        _224 = move _225 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_225);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &_215;
        _233 = &(*_234);
        _232 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _233) -> [return: bb96, unwind: bb342];
    }

    bb96: {
        StorageDead(_233);
        _231 = [move _232];
        StorageDead(_232);
        _230 = &_231;
        _229 = &(*_230);
        _228 = move _229 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_229);
        _223 = Arguments::<'_>::new_v1(move _224, move _228) -> [return: bb97, unwind: bb342];
    }

    bb97: {
        StorageDead(_228);
        StorageDead(_224);
        _222 = format(move _223) -> [return: bb98, unwind: bb342];
    }

    bb98: {
        StorageDead(_223);
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_226);
        _221 = move _222;
        StorageDead(_222);
        _220 = &_221;
        _219 = &(*_220);
        _218 = <String as Deref>::deref(move _219) -> [return: bb99, unwind: bb325];
    }

    bb99: {
        _217 = &(*_218);
        StorageDead(_219);
        _216 = solana_program::log::sol_log(move _217) -> [return: bb100, unwind: bb325];
    }

    bb100: {
        StorageDead(_217);
        drop(_221) -> [return: bb101, unwind: bb342];
    }

    bb101: {
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_216);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = const "Market is being initialized";
        _236 = &(*_237);
        _235 = solana_program::log::sol_log(move _236) -> [return: bb102, unwind: bb342];
    }

    bb102: {
        StorageDead(_236);
        StorageDead(_237);
        StorageDead(_235);
        StorageLive(_238);
        _238 = _215;
        _209 = std::result::Result::<(), error::ErrorCode>::Err(move _238);
        StorageDead(_238);
        StorageDead(_215);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_210);
        _208 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _209) -> [return: bb104, unwind: bb342];
    }

    bb104: {
        StorageDead(_209);
        _239 = discriminant(_208);
        switchInt(move _239) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        StorageLive(_243);
        _243 = ((_208 as Continue).0: ());
        _207 = _243;
        StorageDead(_243);
        StorageDead(_208);
        StorageDead(_207);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &mut _117;
        _249 = &mut (*_250);
        _248 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _249) -> [return: bb108, unwind: bb342];
    }

    bb106: {
        StorageLive(_240);
        _240 = ((_208 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb107, unwind: bb342];
    }

    bb107: {
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_208);
        StorageDead(_207);
        goto -> bb307;
    }

    bb108: {
        _247 = &mut (*_248);
        StorageDead(_249);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = &_128;
        _252 = &(*_253);
        _251 = Option::<&OraclePriceData>::Some(move _252);
        StorageDead(_252);
        StorageLive(_254);
        _254 = _38;
        _246 = controller::spot_balance::update_spot_market_cumulative_interest(move _247, move _251, move _254) -> [return: bb109, unwind: bb342];
    }

    bb109: {
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_247);
        _245 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _246) -> [return: bb110, unwind: bb342];
    }

    bb110: {
        StorageDead(_246);
        _255 = discriminant(_245);
        switchInt(move _255) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        StorageLive(_259);
        _259 = ((_245 as Continue).0: ());
        _244 = _259;
        StorageDead(_259);
        StorageDead(_253);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_245);
        StorageDead(_244);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &mut (*_17);
        _264 = <RefMut<'_, User> as DerefMut>::deref_mut(move _265) -> [return: bb114, unwind: bb342];
    }

    bb112: {
        StorageLive(_256);
        _256 = ((_245 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_258);
        _258 = _256;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _258) -> [return: bb113, unwind: bb342];
    }

    bb113: {
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_253);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_245);
        StorageDead(_244);
        goto -> bb307;
    }

    bb114: {
        _263 = &mut (*_264);
        StorageDead(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_117;
        _267 = <RefMut<'_, SpotMarket> as Deref>::deref(move _268) -> [return: bb115, unwind: bb342];
    }

    bb115: {
        StorageDead(_268);
        _266 = ((*_267).42: u16);
        _262 = User::force_get_spot_position_index(move _263, move _266) -> [return: bb116, unwind: bb342];
    }

    bb116: {
        StorageDead(_266);
        StorageDead(_263);
        _261 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _262) -> [return: bb117, unwind: bb342];
    }

    bb117: {
        StorageDead(_262);
        _269 = discriminant(_261);
        switchInt(move _269) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        StorageLive(_273);
        _273 = ((_261 as Continue).0: usize);
        _260 = _273;
        StorageDead(_273);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_261);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = &(*_17);
        _276 = <RefMut<'_, User> as Deref>::deref(move _277) -> [return: bb121, unwind: bb342];
    }

    bb119: {
        StorageLive(_270);
        _270 = ((_261 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_272);
        _272 = _270;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _272) -> [return: bb120, unwind: bb342];
    }

    bb120: {
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_264);
        StorageDead(_261);
        goto -> bb306;
    }

    bb121: {
        StorageDead(_277);
        StorageLive(_278);
        _278 = _260;
        _279 = Len(((*_276).3: [state::user::SpotPosition; 8]));
        _280 = Lt(_278, _279);
        assert(move _280, "index out of bounds: the length is {} but the index is {}", move _279, _278) -> [success: bb122, unwind: bb342];
    }

    bb122: {
        _275 = &((*_276).3: [state::user::SpotPosition; 8])[_278];
        _274 = SpotPosition::is_borrow(move _275) -> [return: bb123, unwind: bb342];
    }

    bb123: {
        StorageDead(_275);
        StorageDead(_278);
        StorageDead(_276);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = &_117;
        _283 = <RefMut<'_, SpotMarket> as Deref>::deref(move _284) -> [return: bb124, unwind: bb342];
    }

    bb124: {
        _282 = &(*_283);
        StorageDead(_284);
        _281 = SpotMarket::is_reduce_only(move _282) -> [return: bb125, unwind: bb342];
    }

    bb125: {
        StorageDead(_282);
        StorageDead(_283);
        StorageLive(_285);
        StorageLive(_286);
        _286 = _281;
        switchInt(move _286) -> [0: bb126, otherwise: bb127];
    }

    bb126: {
        StorageLive(_287);
        _287 = _4;
        switchInt(move _287) -> [0: bb147, otherwise: bb127];
    }

    bb127: {
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &(*_17);
        _290 = <RefMut<'_, User> as Deref>::deref(move _291) -> [return: bb128, unwind: bb342];
    }

    bb128: {
        StorageDead(_291);
        StorageLive(_292);
        _292 = _260;
        _293 = Len(((*_290).3: [state::user::SpotPosition; 8]));
        _294 = Lt(_292, _293);
        assert(move _294, "index out of bounds: the length is {} but the index is {}", move _293, _292) -> [success: bb129, unwind: bb342];
    }

    bb129: {
        _289 = &(((*_290).3: [state::user::SpotPosition; 8])[_292].5: state::spot_market::SpotBalanceType);
        StorageLive(_295);
        _660 = const _;
        _295 = &(*_660);
        _288 = <SpotBalanceType as PartialEq>::eq(move _289, move _295) -> [return: bb130, unwind: bb342];
    }

    bb130: {
        switchInt(move _288) -> [0: bb146, otherwise: bb131];
    }

    bb131: {
        StorageDead(_295);
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_289);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _305 = &(*_17);
        _304 = <RefMut<'_, User> as Deref>::deref(move _305) -> [return: bb132, unwind: bb342];
    }

    bb132: {
        StorageDead(_305);
        StorageLive(_306);
        _306 = _260;
        _307 = Len(((*_304).3: [state::user::SpotPosition; 8]));
        _308 = Lt(_306, _307);
        assert(move _308, "index out of bounds: the length is {} but the index is {}", move _307, _306) -> [success: bb133, unwind: bb342];
    }

    bb133: {
        _303 = &((*_304).3: [state::user::SpotPosition; 8])[_306];
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &_117;
        _311 = &(*_312);
        _310 = <RefMut<'_, SpotMarket> as Deref>::deref(move _311) -> [return: bb134, unwind: bb342];
    }

    bb134: {
        _309 = &(*_310);
        StorageDead(_311);
        _302 = SpotPosition::get_token_amount(move _303, move _309) -> [return: bb135, unwind: bb342];
    }

    bb135: {
        StorageDead(_309);
        StorageDead(_303);
        _301 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _302) -> [return: bb136, unwind: bb342];
    }

    bb136: {
        StorageDead(_302);
        _313 = discriminant(_301);
        switchInt(move _313) -> [0: bb137, 1: bb138, otherwise: bb4];
    }

    bb137: {
        StorageLive(_317);
        _317 = ((_301 as Continue).0: u128);
        _300 = _317;
        StorageDead(_317);
        _299 = <u128 as Cast>::cast::<u64>(move _300) -> [return: bb140, unwind: bb342];
    }

    bb138: {
        StorageLive(_314);
        _314 = ((_301 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_316);
        _316 = _314;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _316) -> [return: bb139, unwind: bb342];
    }

    bb139: {
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_300);
        StorageDead(_299);
        goto -> bb304;
    }

    bb140: {
        StorageDead(_300);
        _298 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _299) -> [return: bb141, unwind: bb342];
    }

    bb141: {
        StorageDead(_299);
        _318 = discriminant(_298);
        switchInt(move _318) -> [0: bb142, 1: bb143, otherwise: bb4];
    }

    bb142: {
        StorageLive(_322);
        _322 = ((_298 as Continue).0: u64);
        _297 = _322;
        StorageDead(_322);
        StorageLive(_323);
        _323 = _3;
        _285 = <u64 as Ord>::min(move _297, move _323) -> [return: bb145, unwind: bb342];
    }

    bb143: {
        StorageLive(_319);
        _319 = ((_298 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_321);
        _321 = _319;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _321) -> [return: bb144, unwind: bb342];
    }

    bb144: {
        StorageDead(_321);
        StorageDead(_319);
        goto -> bb304;
    }

    bb145: {
        StorageDead(_323);
        StorageDead(_297);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_298);
        goto -> bb148;
    }

    bb146: {
        StorageDead(_295);
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_289);
        goto -> bb147;
    }

    bb147: {
        _285 = _3;
        goto -> bb148;
    }

    bb148: {
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_286);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &mut (*_17);
        _328 = <RefMut<'_, User> as DerefMut>::deref_mut(move _329) -> [return: bb149, unwind: bb342];
    }

    bb149: {
        _327 = &mut (*_328);
        StorageDead(_329);
        StorageLive(_330);
        _330 = _285;
        StorageLive(_331);
        _331 = (_128.0: i64);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = &_117;
        _337 = <RefMut<'_, SpotMarket> as Deref>::deref(move _338) -> [return: bb150, unwind: bb342];
    }

    bb150: {
        _336 = (*_337);
        StorageDead(_338);
        _335 = SpotMarket::get_precision(move _336) -> [return: bb151, unwind: bb342];
    }

    bb151: {
        StorageDead(_336);
        _334 = <u64 as Cast>::cast::<u128>(move _335) -> [return: bb152, unwind: bb342];
    }

    bb152: {
        StorageDead(_335);
        _333 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _334) -> [return: bb153, unwind: bb342];
    }

    bb153: {
        StorageDead(_334);
        _339 = discriminant(_333);
        switchInt(move _339) -> [0: bb154, 1: bb155, otherwise: bb4];
    }

    bb154: {
        StorageLive(_343);
        _343 = ((_333 as Continue).0: u128);
        _332 = _343;
        StorageDead(_343);
        _326 = User::increment_total_deposits(move _327, move _330, move _331, move _332) -> [return: bb157, unwind: bb342];
    }

    bb155: {
        StorageLive(_340);
        _340 = ((_333 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_342);
        _342 = _340;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _342) -> [return: bb156, unwind: bb342];
    }

    bb156: {
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_326);
        goto -> bb303;
    }

    bb157: {
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_327);
        _325 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _326) -> [return: bb158, unwind: bb342];
    }

    bb158: {
        StorageDead(_326);
        _344 = discriminant(_325);
        switchInt(move _344) -> [0: bb159, 1: bb160, otherwise: bb4];
    }

    bb159: {
        StorageLive(_348);
        _348 = ((_325 as Continue).0: ());
        _324 = _348;
        StorageDead(_348);
        StorageDead(_337);
        StorageDead(_333);
        StorageDead(_328);
        StorageDead(_325);
        StorageDead(_324);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_17);
        _350 = <RefMut<'_, User> as Deref>::deref(move _351) -> [return: bb162, unwind: bb342];
    }

    bb160: {
        StorageLive(_345);
        _345 = ((_325 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_347);
        _347 = _345;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _347) -> [return: bb161, unwind: bb342];
    }

    bb161: {
        StorageDead(_347);
        StorageDead(_345);
        goto -> bb303;
    }

    bb162: {
        StorageDead(_351);
        _349 = ((*_350).7: u64);
        StorageDead(_350);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = &(*_17);
        _353 = <RefMut<'_, User> as Deref>::deref(move _354) -> [return: bb163, unwind: bb342];
    }

    bb163: {
        StorageDead(_354);
        _352 = ((*_353).8: u64);
        StorageDead(_353);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = &mut (*_17);
        _356 = <RefMut<'_, User> as DerefMut>::deref_mut(move _357) -> [return: bb164, unwind: bb342];
    }

    bb164: {
        StorageDead(_357);
        StorageLive(_358);
        _358 = _260;
        _359 = Len(((*_356).3: [state::user::SpotPosition; 8]));
        _360 = Lt(_358, _359);
        assert(move _360, "index out of bounds: the length is {} but the index is {}", move _359, _358) -> [success: bb165, unwind: bb342];
    }

    bb165: {
        _355 = &mut ((*_356).3: [state::user::SpotPosition; 8])[_358];
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = _285;
        _364 = move _365 as u128 (IntToInt);
        StorageDead(_365);
        StorageLive(_366);
        StorageLive(_367);
        _659 = const _;
        _367 = &(*_659);
        _366 = &(*_367);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = &mut _117;
        _371 = &mut (*_372);
        _370 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _371) -> [return: bb166, unwind: bb342];
    }

    bb166: {
        _369 = &mut (*_370);
        StorageDead(_371);
        StorageLive(_373);
        _373 = &mut (*_355);
        StorageLive(_374);
        _374 = Option::<u128>::None;
        _363 = update_spot_balances_and_cumulative_deposits(move _364, move _366, move _369, move _373, const false, move _374) -> [return: bb167, unwind: bb342];
    }

    bb167: {
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_369);
        StorageDead(_366);
        StorageDead(_364);
        _362 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _363) -> [return: bb168, unwind: bb342];
    }

    bb168: {
        StorageDead(_363);
        _375 = discriminant(_362);
        switchInt(move _375) -> [0: bb169, 1: bb170, otherwise: bb4];
    }

    bb169: {
        StorageLive(_379);
        _379 = ((_362 as Continue).0: ());
        _361 = _379;
        StorageDead(_379);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_367);
        StorageDead(_362);
        StorageDead(_361);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        _383 = &(*_355);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_117;
        _386 = &(*_387);
        _385 = <RefMut<'_, SpotMarket> as Deref>::deref(move _386) -> [return: bb172, unwind: bb342];
    }

    bb170: {
        StorageLive(_376);
        _376 = ((_362 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_378);
        _378 = _376;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _378) -> [return: bb171, unwind: bb342];
    }

    bb171: {
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_367);
        StorageDead(_362);
        StorageDead(_361);
        goto -> bb302;
    }

    bb172: {
        _384 = &(*_385);
        StorageDead(_386);
        _382 = SpotPosition::get_token_amount(move _383, move _384) -> [return: bb173, unwind: bb342];
    }

    bb173: {
        StorageDead(_384);
        StorageDead(_383);
        _381 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _382) -> [return: bb174, unwind: bb342];
    }

    bb174: {
        StorageDead(_382);
        _388 = discriminant(_381);
        switchInt(move _388) -> [0: bb175, 1: bb176, otherwise: bb4];
    }

    bb175: {
        StorageLive(_392);
        _392 = ((_381 as Continue).0: u128);
        _380 = _392;
        StorageDead(_392);
        StorageDead(_387);
        StorageDead(_385);
        StorageDead(_381);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = _380;
        _394 = Eq(move _395, const 0_u128);
        switchInt(move _394) -> [0: bb179, otherwise: bb178];
    }

    bb176: {
        StorageLive(_389);
        _389 = ((_381 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_391);
        _391 = _389;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _391) -> [return: bb177, unwind: bb342];
    }

    bb177: {
        StorageDead(_391);
        StorageDead(_389);
        StorageDead(_387);
        StorageDead(_385);
        StorageDead(_381);
        goto -> bb301;
    }

    bb178: {
        StorageDead(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = ((*_355).0: u64);
        _399 = Eq(move _400, const 0_u64);
        switchInt(move _399) -> [0: bb181, otherwise: bb180];
    }

    bb179: {
        StorageDead(_395);
        _393 = const ();
        goto -> bb200;
    }

    bb180: {
        StorageDead(_400);
        StorageLive(_401);
        _401 = ();
        _398 = std::result::Result::<(), error::ErrorCode>::Ok(move _401);
        StorageDead(_401);
        goto -> bb195;
    }

    bb181: {
        StorageDead(_400);
        StorageLive(_402);
        _402 = error::ErrorCode::InvalidSpotPosition;
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _658 = const _;
        _413 = &(*_658);
        _412 = &(*_413);
        _411 = move _412 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_412);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_402;
        _420 = &(*_421);
        _419 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _420) -> [return: bb182, unwind: bb342];
    }

    bb182: {
        StorageDead(_420);
        _418 = [move _419];
        StorageDead(_419);
        _417 = &_418;
        _416 = &(*_417);
        _415 = move _416 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_416);
        _410 = Arguments::<'_>::new_v1(move _411, move _415) -> [return: bb183, unwind: bb342];
    }

    bb183: {
        StorageDead(_415);
        StorageDead(_411);
        _409 = format(move _410) -> [return: bb184, unwind: bb342];
    }

    bb184: {
        StorageDead(_410);
        StorageDead(_421);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_413);
        _408 = move _409;
        StorageDead(_409);
        _407 = &_408;
        _406 = &(*_407);
        _405 = <String as Deref>::deref(move _406) -> [return: bb185, unwind: bb324];
    }

    bb185: {
        _404 = &(*_405);
        StorageDead(_406);
        _403 = solana_program::log::sol_log(move _404) -> [return: bb186, unwind: bb324];
    }

    bb186: {
        StorageDead(_404);
        drop(_408) -> [return: bb187, unwind: bb342];
    }

    bb187: {
        StorageDead(_408);
        StorageDead(_407);
        StorageDead(_405);
        StorageDead(_403);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _657 = const _;
        _432 = &(*_657);
        _431 = &(*_432);
        _430 = move _431 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_431);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = &((*_355).0: u64);
        _439 = &(*_440);
        _438 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _439) -> [return: bb188, unwind: bb342];
    }

    bb188: {
        StorageDead(_439);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_380;
        _442 = &(*_443);
        _441 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _442) -> [return: bb189, unwind: bb342];
    }

    bb189: {
        StorageDead(_442);
        _437 = [move _438, move _441];
        StorageDead(_441);
        StorageDead(_438);
        _436 = &_437;
        _435 = &(*_436);
        _434 = move _435 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_435);
        _429 = Arguments::<'_>::new_v1(move _430, move _434) -> [return: bb190, unwind: bb342];
    }

    bb190: {
        StorageDead(_434);
        StorageDead(_430);
        _428 = format(move _429) -> [return: bb191, unwind: bb342];
    }

    bb191: {
        StorageDead(_429);
        StorageDead(_443);
        StorageDead(_440);
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_432);
        _427 = move _428;
        StorageDead(_428);
        _426 = &_427;
        _425 = &(*_426);
        _424 = <String as Deref>::deref(move _425) -> [return: bb192, unwind: bb323];
    }

    bb192: {
        _423 = &(*_424);
        StorageDead(_425);
        _422 = solana_program::log::sol_log(move _423) -> [return: bb193, unwind: bb323];
    }

    bb193: {
        StorageDead(_423);
        drop(_427) -> [return: bb194, unwind: bb342];
    }

    bb194: {
        StorageDead(_427);
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_422);
        StorageLive(_444);
        _444 = _402;
        _398 = std::result::Result::<(), error::ErrorCode>::Err(move _444);
        StorageDead(_444);
        StorageDead(_402);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_399);
        _397 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _398) -> [return: bb196, unwind: bb342];
    }

    bb196: {
        StorageDead(_398);
        _445 = discriminant(_397);
        switchInt(move _445) -> [0: bb197, 1: bb198, otherwise: bb4];
    }

    bb197: {
        StorageLive(_449);
        _449 = ((_397 as Continue).0: ());
        _396 = _449;
        StorageDead(_449);
        StorageDead(_397);
        StorageDead(_396);
        _393 = const ();
        goto -> bb200;
    }

    bb198: {
        StorageLive(_446);
        _446 = ((_397 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_448);
        _448 = _446;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _448) -> [return: bb199, unwind: bb342];
    }

    bb199: {
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_394);
        StorageDead(_393);
        goto -> bb301;
    }

    bb200: {
        StorageDead(_394);
        StorageDead(_393);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _452 = &((*_355).5: state::spot_market::SpotBalanceType);
        StorageLive(_453);
        _656 = const _;
        _453 = &(*_656);
        _451 = <SpotBalanceType as PartialEq>::eq(move _452, move _453) -> [return: bb201, unwind: bb342];
    }

    bb201: {
        switchInt(move _451) -> [0: bb227, otherwise: bb202];
    }

    bb202: {
        StorageDead(_453);
        StorageDead(_452);
        StorageLive(_455);
        StorageLive(_456);
        _456 = ((*_355).0: u64);
        _455 = Gt(move _456, const 0_u64);
        switchInt(move _455) -> [0: bb226, otherwise: bb203];
    }

    bb203: {
        StorageDead(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &_117;
        _461 = <RefMut<'_, SpotMarket> as Deref>::deref(move _462) -> [return: bb204, unwind: bb342];
    }

    bb204: {
        StorageDead(_462);
        _463 = discriminant(((*_461).45: state::perp_market::MarketStatus));
        switchInt(move _463) -> [1: bb206, otherwise: bb205];
    }

    bb205: {
        _460 = const false;
        goto -> bb207;
    }

    bb206: {
        _460 = const true;
        goto -> bb207;
    }

    bb207: {
        switchInt(move _460) -> [0: bb209, otherwise: bb208];
    }

    bb208: {
        StorageDead(_461);
        StorageLive(_464);
        _464 = ();
        _459 = std::result::Result::<(), error::ErrorCode>::Ok(move _464);
        StorageDead(_464);
        goto -> bb221;
    }

    bb209: {
        StorageDead(_461);
        StorageLive(_465);
        _465 = error::ErrorCode::MarketActionPaused;
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        _655 = const _;
        _476 = &(*_655);
        _475 = &(*_476);
        _474 = move _475 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_475);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _484 = &_465;
        _483 = &(*_484);
        _482 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _483) -> [return: bb210, unwind: bb342];
    }

    bb210: {
        StorageDead(_483);
        _481 = [move _482];
        StorageDead(_482);
        _480 = &_481;
        _479 = &(*_480);
        _478 = move _479 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_479);
        _473 = Arguments::<'_>::new_v1(move _474, move _478) -> [return: bb211, unwind: bb342];
    }

    bb211: {
        StorageDead(_478);
        StorageDead(_474);
        _472 = format(move _473) -> [return: bb212, unwind: bb342];
    }

    bb212: {
        StorageDead(_473);
        StorageDead(_484);
        StorageDead(_481);
        StorageDead(_480);
        StorageDead(_476);
        _471 = move _472;
        StorageDead(_472);
        _470 = &_471;
        _469 = &(*_470);
        _468 = <String as Deref>::deref(move _469) -> [return: bb213, unwind: bb322];
    }

    bb213: {
        _467 = &(*_468);
        StorageDead(_469);
        _466 = solana_program::log::sol_log(move _467) -> [return: bb214, unwind: bb322];
    }

    bb214: {
        StorageDead(_467);
        drop(_471) -> [return: bb215, unwind: bb342];
    }

    bb215: {
        StorageDead(_471);
        StorageDead(_470);
        StorageDead(_468);
        StorageDead(_466);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _654 = const _;
        _495 = &(*_654);
        _494 = &(*_495);
        _493 = move _494 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_494);
        _492 = Arguments::<'_>::new_const(move _493) -> [return: bb216, unwind: bb342];
    }

    bb216: {
        StorageDead(_493);
        _491 = format(move _492) -> [return: bb217, unwind: bb342];
    }

    bb217: {
        StorageDead(_492);
        StorageDead(_495);
        _490 = move _491;
        StorageDead(_491);
        _489 = &_490;
        _488 = &(*_489);
        _487 = <String as Deref>::deref(move _488) -> [return: bb218, unwind: bb321];
    }

    bb218: {
        _486 = &(*_487);
        StorageDead(_488);
        _485 = solana_program::log::sol_log(move _486) -> [return: bb219, unwind: bb321];
    }

    bb219: {
        StorageDead(_486);
        drop(_490) -> [return: bb220, unwind: bb342];
    }

    bb220: {
        StorageDead(_490);
        StorageDead(_489);
        StorageDead(_487);
        StorageDead(_485);
        StorageLive(_497);
        _497 = _465;
        _459 = std::result::Result::<(), error::ErrorCode>::Err(move _497);
        StorageDead(_497);
        StorageDead(_465);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_460);
        _458 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _459) -> [return: bb222, unwind: bb342];
    }

    bb222: {
        StorageDead(_459);
        _498 = discriminant(_458);
        switchInt(move _498) -> [0: bb223, 1: bb224, otherwise: bb4];
    }

    bb223: {
        StorageLive(_502);
        _502 = ((_458 as Continue).0: ());
        _457 = _502;
        StorageDead(_502);
        StorageDead(_458);
        StorageDead(_457);
        _450 = const ();
        goto -> bb229;
    }

    bb224: {
        StorageLive(_499);
        _499 = ((_458 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_501);
        _501 = _499;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _501) -> [return: bb225, unwind: bb342];
    }

    bb225: {
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_455);
        StorageDead(_451);
        StorageDead(_450);
        goto -> bb301;
    }

    bb226: {
        StorageDead(_456);
        goto -> bb228;
    }

    bb227: {
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb228;
    }

    bb228: {
        _450 = const ();
        goto -> bb229;
    }

    bb229: {
        StorageDead(_455);
        StorageDead(_451);
        StorageDead(_450);
        StorageLive(_503);
        StorageLive(_504);
        _681 = const false;
        _504 = move _117;
        _503 = std::mem::drop::<RefMut<'_, SpotMarket>>(move _504) -> [return: bb230, unwind: bb342];
    }

    bb230: {
        StorageDead(_504);
        StorageDead(_503);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        _509 = &(*_17);
        _508 = <RefMut<'_, User> as Deref>::deref(move _509) -> [return: bb231, unwind: bb342];
    }

    bb231: {
        _507 = &(*_508);
        StorageDead(_509);
        _506 = User::is_being_liquidated(move _507) -> [return: bb232, unwind: bb342];
    }

    bb232: {
        switchInt(move _506) -> [0: bb246, otherwise: bb233];
    }

    bb233: {
        StorageDead(_508);
        StorageDead(_507);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        _515 = &(*_17);
        _514 = <RefMut<'_, User> as Deref>::deref(move _515) -> [return: bb234, unwind: bb342];
    }

    bb234: {
        _513 = &(*_514);
        StorageDead(_515);
        StorageLive(_516);
        StorageLive(_517);
        _517 = &_44;
        _516 = &(*_517);
        StorageLive(_518);
        StorageLive(_519);
        _519 = &_45;
        _518 = &(*_519);
        StorageLive(_520);
        StorageLive(_521);
        _521 = &mut _46;
        _520 = &mut (*_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _672 = deref_copy (*_29);
        _725 = (((_672.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _524 = &(*_725);
        _523 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _524) -> [return: bb235, unwind: bb342];
    }

    bb235: {
        StorageDead(_524);
        _522 = ((*_523).11: u32);
        _512 = is_user_being_liquidated(move _513, move _516, move _518, move _520, move _522) -> [return: bb236, unwind: bb342];
    }

    bb236: {
        StorageDead(_522);
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_516);
        StorageDead(_513);
        _511 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _512) -> [return: bb237, unwind: bb342];
    }

    bb237: {
        StorageDead(_512);
        _525 = discriminant(_511);
        switchInt(move _525) -> [0: bb238, 1: bb239, otherwise: bb4];
    }

    bb238: {
        StorageLive(_529);
        _529 = ((_511 as Continue).0: bool);
        _510 = _529;
        StorageDead(_529);
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_511);
        StorageLive(_530);
        _530 = _510;
        switchInt(move _530) -> [0: bb242, otherwise: bb241];
    }

    bb239: {
        StorageLive(_526);
        _526 = ((_511 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_528);
        _528 = _526;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _528) -> [return: bb240, unwind: bb342];
    }

    bb240: {
        StorageDead(_528);
        StorageDead(_526);
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_519);
        StorageDead(_517);
        StorageDead(_514);
        StorageDead(_511);
        StorageDead(_510);
        StorageDead(_506);
        StorageDead(_505);
        goto -> bb301;
    }

    bb241: {
        _505 = const ();
        goto -> bb245;
    }

    bb242: {
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        _534 = &mut (*_17);
        _533 = <RefMut<'_, User> as DerefMut>::deref_mut(move _534) -> [return: bb243, unwind: bb342];
    }

    bb243: {
        _532 = &mut (*_533);
        StorageDead(_534);
        _531 = User::exit_liquidation(move _532) -> [return: bb244, unwind: bb342];
    }

    bb244: {
        StorageDead(_532);
        StorageDead(_533);
        StorageDead(_531);
        _505 = const ();
        goto -> bb245;
    }

    bb245: {
        StorageDead(_530);
        StorageDead(_510);
        goto -> bb247;
    }

    bb246: {
        StorageDead(_508);
        StorageDead(_507);
        _505 = const ();
        goto -> bb247;
    }

    bb247: {
        StorageDead(_506);
        StorageDead(_505);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _538 = &mut (*_17);
        _537 = <RefMut<'_, User> as DerefMut>::deref_mut(move _538) -> [return: bb248, unwind: bb342];
    }

    bb248: {
        _536 = &mut (*_537);
        StorageDead(_538);
        StorageLive(_539);
        _539 = _39;
        _535 = User::update_last_active_slot(move _536, move _539) -> [return: bb249, unwind: bb342];
    }

    bb249: {
        StorageDead(_539);
        StorageDead(_536);
        StorageDead(_537);
        StorageDead(_535);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        _544 = &_45;
        StorageLive(_545);
        StorageLive(_546);
        _546 = &_2;
        _545 = &(*_546);
        _543 = SpotMarketMap::<'_>::get_ref_mut(move _544, move _545) -> [return: bb250, unwind: bb342];
    }

    bb250: {
        StorageDead(_545);
        StorageDead(_544);
        _542 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _543) -> [return: bb251, unwind: bb342];
    }

    bb251: {
        StorageDead(_543);
        _547 = discriminant(_542);
        switchInt(move _547) -> [0: bb252, 1: bb253, otherwise: bb4];
    }

    bb252: {
        StorageLive(_551);
        _551 = move ((_542 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _541 = move _551;
        StorageDead(_551);
        _540 = &mut _541;
        _700 = discriminant(_542);
        StorageDead(_546);
        StorageDead(_542);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        _673 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _556 = &((*_673).6: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _555 = &(*_556);
        StorageLive(_557);
        StorageLive(_558);
        _674 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _558 = &((*_674).5: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _675 = deref_copy (*_558);
        _726 = (((_675.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _557 = &(*_726);
        StorageLive(_559);
        StorageLive(_560);
        _676 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _560 = &((*_676).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _677 = deref_copy (*_560);
        _727 = (((_677.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _559 = &(*_727);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        _678 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _564 = &((*_678).3: anchor_lang::prelude::Signer<'_>);
        _563 = &(*_564);
        _562 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _563) -> [return: bb255, unwind: bb320];
    }

    bb253: {
        StorageLive(_548);
        _548 = ((_542 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_550);
        _550 = _548;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _550) -> [return: bb254, unwind: bb340];
    }

    bb254: {
        StorageDead(_550);
        StorageDead(_548);
        _698 = discriminant(_542);
        StorageDead(_546);
        StorageDead(_542);
        goto -> bb300;
    }

    bb255: {
        _561 = &(*_562);
        StorageDead(_563);
        StorageLive(_565);
        _565 = _285;
        StorageLive(_566);
        StorageLive(_567);
        _567 = &_68;
        _566 = &(*_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _572 = &(*_540);
        _571 = <RefMut<'_, SpotMarket> as Deref>::deref(move _572) -> [return: bb256, unwind: bb320];
    }

    bb256: {
        _570 = &(*_571);
        StorageDead(_572);
        _569 = SpotMarket::has_transfer_hook(move _570) -> [return: bb257, unwind: bb320];
    }

    bb257: {
        switchInt(move _569) -> [0: bb259, otherwise: bb258];
    }

    bb258: {
        StorageDead(_571);
        StorageDead(_570);
        StorageLive(_573);
        _573 = &mut (*_40);
        _568 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _573);
        StorageDead(_573);
        goto -> bb260;
    }

    bb259: {
        StorageDead(_571);
        StorageDead(_570);
        _568 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb260;
    }

    bb260: {
        StorageDead(_569);
        _554 = receive(move _555, move _557, move _559, move _561, move _565, move _566, move _568) -> [return: bb261, unwind: bb320];
    }

    bb261: {
        StorageDead(_568);
        StorageDead(_566);
        StorageDead(_565);
        StorageDead(_561);
        StorageDead(_559);
        StorageDead(_557);
        StorageDead(_555);
        _553 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _554) -> [return: bb262, unwind: bb320];
    }

    bb262: {
        StorageDead(_554);
        _574 = discriminant(_553);
        switchInt(move _574) -> [0: bb263, 1: bb264, otherwise: bb4];
    }

    bb263: {
        StorageLive(_578);
        _578 = ((_553 as Continue).0: ());
        _552 = _578;
        StorageDead(_578);
        _702 = discriminant(_553);
        StorageDead(_567);
        StorageDead(_564);
        StorageDead(_562);
        StorageDead(_560);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_553);
        StorageDead(_552);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        _679 = deref_copy (_1.1: &mut instructions::user::Deposit<'_>);
        _680 = deref_copy ((*_679).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _728 = (((_680.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _582 = &mut (*_728);
        _581 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _582) -> [return: bb266, unwind: bb320];
    }

    bb264: {
        StorageLive(_575);
        _575 = move ((_553 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_577);
        _577 = move _575;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _577) -> [return: bb265, unwind: bb339];
    }

    bb265: {
        StorageDead(_577);
        StorageDead(_575);
        _708 = discriminant(_553);
        StorageDead(_567);
        StorageDead(_564);
        StorageDead(_562);
        StorageDead(_560);
        StorageDead(_558);
        StorageDead(_556);
        StorageDead(_553);
        StorageDead(_552);
        goto -> bb299;
    }

    bb266: {
        StorageDead(_582);
        _580 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _581) -> [return: bb267, unwind: bb320];
    }

    bb267: {
        StorageDead(_581);
        _583 = discriminant(_580);
        switchInt(move _583) -> [0: bb268, 1: bb269, otherwise: bb4];
    }

    bb268: {
        StorageLive(_587);
        _587 = ((_580 as Continue).0: ());
        _579 = _587;
        StorageDead(_587);
        _704 = discriminant(_580);
        StorageDead(_580);
        StorageDead(_579);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        _591 = &(*_540);
        _590 = <RefMut<'_, SpotMarket> as Deref>::deref(move _591) -> [return: bb271, unwind: bb320];
    }

    bb269: {
        StorageLive(_584);
        _584 = move ((_580 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_586);
        _586 = move _584;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _586) -> [return: bb270, unwind: bb338];
    }

    bb270: {
        StorageDead(_586);
        StorageDead(_584);
        _706 = discriminant(_580);
        StorageDead(_580);
        StorageDead(_579);
        goto -> bb299;
    }

    bb271: {
        StorageDead(_591);
        _589 = ((*_590).30: u64);
        StorageDead(_590);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        _595 = _589;
        _594 = core::num::<impl u64>::checked_add(move _595, const 1_u64) -> [return: bb272, unwind: bb320];
    }

    bb272: {
        StorageDead(_595);
        StorageLive(_596);
        _596 = Option::<u64>::Some(const 1_u64);
        _593 = Option::<u64>::or(move _594, move _596) -> [return: bb273, unwind: bb320];
    }

    bb273: {
        StorageDead(_596);
        StorageDead(_594);
        _592 = Option::<u64>::unwrap(move _593) -> [return: bb274, unwind: bb320];
    }

    bb274: {
        StorageDead(_593);
        StorageLive(_597);
        StorageLive(_598);
        _598 = &mut (*_540);
        _597 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _598) -> [return: bb275, unwind: bb320];
    }

    bb275: {
        StorageDead(_598);
        ((*_597).30: u64) = move _592;
        StorageDead(_592);
        StorageDead(_597);
        _588 = _589;
        StorageDead(_589);
        StorageLive(_599);
        _599 = (_128.0: i64);
        StorageLive(_600);
        StorageLive(_601);
        _601 = _274;
        switchInt(move _601) -> [0: bb277, otherwise: bb276];
    }

    bb276: {
        _600 = DepositExplanation::RepayBorrow;
        goto -> bb278;
    }

    bb277: {
        _600 = DepositExplanation::None;
        goto -> bb278;
    }

    bb278: {
        StorageDead(_601);
        StorageLive(_602);
        StorageLive(_603);
        _603 = _38;
        StorageLive(_604);
        _604 = _588;
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        _607 = &(*_17);
        _606 = <RefMut<'_, User> as Deref>::deref(move _607) -> [return: bb279, unwind: bb320];
    }

    bb279: {
        StorageDead(_607);
        _605 = ((*_606).0: anchor_lang::prelude::Pubkey);
        StorageLive(_608);
        _608 = _15;
        StorageLive(_609);
        _609 = DepositDirection::Deposit;
        StorageLive(_610);
        _610 = _285;
        StorageLive(_611);
        _611 = _599;
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        _614 = &(*_540);
        _613 = <RefMut<'_, SpotMarket> as Deref>::deref(move _614) -> [return: bb280, unwind: bb320];
    }

    bb280: {
        StorageDead(_614);
        _612 = ((*_613).11: u128);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        _617 = &(*_540);
        _616 = <RefMut<'_, SpotMarket> as Deref>::deref(move _617) -> [return: bb281, unwind: bb320];
    }

    bb281: {
        StorageDead(_617);
        _615 = ((*_616).12: u128);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        _620 = &(*_540);
        _619 = <RefMut<'_, SpotMarket> as Deref>::deref(move _620) -> [return: bb282, unwind: bb320];
    }

    bb282: {
        StorageDead(_620);
        _618 = ((*_619).13: u128);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = &(*_540);
        _622 = <RefMut<'_, SpotMarket> as Deref>::deref(move _623) -> [return: bb283, unwind: bb320];
    }

    bb283: {
        StorageDead(_623);
        _621 = ((*_622).14: u128);
        StorageLive(_624);
        _624 = _349;
        StorageLive(_625);
        _625 = _352;
        StorageLive(_626);
        _626 = _2;
        StorageLive(_627);
        _627 = _600;
        StorageLive(_628);
        _628 = Option::<anchor_lang::prelude::Pubkey>::None;
        _602 = DepositRecord { ts: move _603, user_authority: move _605, user: move _608, direction: move _609, deposit_record_id: move _604, amount: move _610, market_index: move _626, oracle_price: move _611, market_deposit_balance: move _612, market_withdraw_balance: move _615, market_cumulative_deposit_interest: move _618, market_cumulative_borrow_interest: move _621, total_deposits_after: move _624, total_withdraws_after: move _625, explanation: move _627, transfer_user: move _628 };
        StorageDead(_628);
        StorageDead(_627);
        StorageDead(_626);
        StorageDead(_625);
        StorageDead(_624);
        StorageDead(_621);
        StorageDead(_618);
        StorageDead(_615);
        StorageDead(_612);
        StorageDead(_611);
        StorageDead(_610);
        StorageDead(_609);
        StorageDead(_608);
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_603);
        StorageDead(_622);
        StorageDead(_619);
        StorageDead(_616);
        StorageDead(_613);
        StorageDead(_606);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        _641 = &_602;
        _640 = &(*_641);
        _639 = <DepositRecord as anchor_lang::Event>::data(move _640) -> [return: bb284, unwind: bb320];
    }

    bb284: {
        StorageDead(_640);
        _638 = &_639;
        _637 = &(*_638);
        _636 = <Vec<u8> as Deref>::deref(move _637) -> [return: bb285, unwind: bb319];
    }

    bb285: {
        _635 = &(*_636);
        StorageDead(_637);
        _634 = [move _635];
        StorageDead(_635);
        _633 = &_634;
        _632 = &(*_633);
        _631 = move _632 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_632);
        _630 = solana_program::log::sol_log_data(move _631) -> [return: bb286, unwind: bb319];
    }

    bb286: {
        StorageDead(_631);
        drop(_639) -> [return: bb287, unwind: bb320];
    }

    bb287: {
        StorageDead(_641);
        StorageDead(_639);
        StorageDead(_638);
        StorageDead(_636);
        StorageDead(_634);
        StorageDead(_633);
        StorageDead(_630);
        _629 = const ();
        StorageDead(_629);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        StorageLive(_647);
        _647 = &(*_540);
        _646 = <RefMut<'_, SpotMarket> as Deref>::deref(move _647) -> [return: bb288, unwind: bb320];
    }

    bb288: {
        _645 = &(*_646);
        StorageDead(_647);
        _644 = SpotMarket::validate_max_token_deposits_and_borrows(move _645, const false) -> [return: bb289, unwind: bb320];
    }

    bb289: {
        StorageDead(_645);
        _643 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _644) -> [return: bb290, unwind: bb320];
    }

    bb290: {
        StorageDead(_644);
        _648 = discriminant(_643);
        switchInt(move _648) -> [0: bb291, 1: bb292, otherwise: bb4];
    }

    bb291: {
        StorageLive(_652);
        _652 = ((_643 as Continue).0: ());
        _642 = _652;
        StorageDead(_652);
        StorageDead(_646);
        StorageDead(_643);
        StorageDead(_642);
        StorageLive(_653);
        _653 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _653);
        StorageDead(_653);
        StorageDead(_602);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_588);
        drop(_541) -> [return: bb294, unwind: bb342];
    }

    bb292: {
        StorageLive(_649);
        _649 = ((_643 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_651);
        _651 = _649;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _651) -> [return: bb293, unwind: bb320];
    }

    bb293: {
        StorageDead(_651);
        StorageDead(_649);
        StorageDead(_646);
        StorageDead(_643);
        StorageDead(_642);
        StorageDead(_602);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_588);
        goto -> bb299;
    }

    bb294: {
        StorageDead(_541);
        StorageDead(_540);
        StorageDead(_380);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_352);
        StorageDead(_349);
        StorageDead(_285);
        StorageDead(_281);
        StorageDead(_274);
        StorageDead(_260);
        StorageDead(_128);
        _681 = const false;
        StorageDead(_117);
        StorageDead(_68);
        drop(_46) -> [return: bb295, unwind: bb331];
    }

    bb295: {
        StorageDead(_46);
        drop(_45) -> [return: bb296, unwind: bb332];
    }

    bb296: {
        StorageDead(_45);
        drop(_44) -> [return: bb297, unwind: bb335];
    }

    bb297: {
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_30);
        StorageDead(_29);
        drop(_18) -> [return: bb298, unwind: bb336];
    }

    bb298: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb318;
    }

    bb299: {
        drop(_541) -> [return: bb300, unwind: bb342];
    }

    bb300: {
        StorageDead(_541);
        StorageDead(_540);
        goto -> bb301;
    }

    bb301: {
        StorageDead(_380);
        goto -> bb302;
    }

    bb302: {
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_352);
        StorageDead(_349);
        goto -> bb305;
    }

    bb303: {
        StorageDead(_337);
        StorageDead(_333);
        StorageDead(_328);
        StorageDead(_325);
        StorageDead(_324);
        goto -> bb305;
    }

    bb304: {
        StorageDead(_297);
        StorageDead(_312);
        StorageDead(_310);
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_298);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_286);
        goto -> bb305;
    }

    bb305: {
        StorageDead(_285);
        StorageDead(_281);
        StorageDead(_274);
        goto -> bb306;
    }

    bb306: {
        StorageDead(_260);
        goto -> bb307;
    }

    bb307: {
        StorageDead(_128);
        switchInt(_681) -> [0: bb308, otherwise: bb337];
    }

    bb308: {
        _681 = const false;
        StorageDead(_117);
        goto -> bb309;
    }

    bb309: {
        StorageDead(_68);
        drop(_46) -> [return: bb310, unwind: bb331];
    }

    bb310: {
        StorageDead(_46);
        drop(_45) -> [return: bb311, unwind: bb332];
    }

    bb311: {
        StorageDead(_45);
        drop(_44) -> [return: bb312, unwind: bb335];
    }

    bb312: {
        StorageDead(_44);
        goto -> bb315;
    }

    bb313: {
        StorageDead(_56);
        StorageDead(_55);
        drop(_53) -> [return: bb314, unwind: bb335];
    }

    bb314: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb315;
    }

    bb315: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb316;
    }

    bb316: {
        StorageDead(_30);
        StorageDead(_29);
        drop(_18) -> [return: bb317, unwind: bb336];
    }

    bb317: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb318;
    }

    bb318: {
        return;
    }

    bb319 (cleanup): {
        drop(_639) -> [return: bb320, unwind terminate(cleanup)];
    }

    bb320 (cleanup): {
        drop(_541) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb321 (cleanup): {
        drop(_490) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb322 (cleanup): {
        drop(_471) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb323 (cleanup): {
        drop(_427) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb324 (cleanup): {
        drop(_408) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb325 (cleanup): {
        drop(_221) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb326 (cleanup): {
        drop(_180) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb327 (cleanup): {
        drop(_161) -> [return: bb342, unwind terminate(cleanup)];
    }

    bb328 (cleanup): {
        drop(_97) -> [return: bb330, unwind terminate(cleanup)];
    }

    bb329 (cleanup): {
        drop(_53) -> [return: bb330, unwind terminate(cleanup)];
    }

    bb330 (cleanup): {
        drop(_46) -> [return: bb331, unwind terminate(cleanup)];
    }

    bb331 (cleanup): {
        drop(_45) -> [return: bb332, unwind terminate(cleanup)];
    }

    bb332 (cleanup): {
        drop(_44) -> [return: bb335, unwind terminate(cleanup)];
    }

    bb333 (cleanup): {
        drop(_56) -> [return: bb334, unwind terminate(cleanup)];
    }

    bb334 (cleanup): {
        drop(_53) -> [return: bb335, unwind terminate(cleanup)];
    }

    bb335 (cleanup): {
        drop(_18) -> [return: bb336, unwind terminate(cleanup)];
    }

    bb336 (cleanup): {
        resume;
    }

    bb337: {
        drop(_117) -> [return: bb308, unwind: bb330];
    }

    bb338 (cleanup): {
        _714 = discriminant(_580);
        goto -> bb320;
    }

    bb339 (cleanup): {
        _715 = discriminant(_553);
        goto -> bb320;
    }

    bb340 (cleanup): {
        _716 = discriminant(_542);
        goto -> bb342;
    }

    bb341 (cleanup): {
        drop(_117) -> [return: bb330, unwind terminate(cleanup)];
    }

    bb342 (cleanup): {
        switchInt(_681) -> [0: bb330, otherwise: bb341];
    }

    bb343 (cleanup): {
        _717 = discriminant(_118);
        goto -> bb330;
    }

    bb344 (cleanup): {
        _719 = discriminant(_48);
        goto -> bb333;
    }

    bb345 (cleanup): {
        _720 = discriminant(_31);
        goto -> bb335;
    }

    bb346 (cleanup): {
        _721 = discriminant(_19);
        goto -> bb336;
    }

    bb347 (cleanup): {
        _722 = discriminant(_6);
        goto -> bb336;
    }
}
