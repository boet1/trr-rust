// MIR for `calculate_accumulated_interest` after PreCodegen

fn calculate_accumulated_interest(_1: &SpotMarket, _2: i64) -> std::result::Result<InterestAccumulated, error::ErrorCode> {
    debug spot_market => _1;
    debug now => _2;
    let mut _0: std::result::Result<math::spot_balance::InterestAccumulated, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: i64;
    let mut _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: u64;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i64;
    let mut _15: !;
    let mut _16: math::spot_balance::InterestAccumulated;
    let _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: &state::spot_market::SpotMarket;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: u128;
    let _26: ();
    let mut _27: bool;
    let mut _28: u128;
    let mut _29: !;
    let mut _30: math::spot_balance::InterestAccumulated;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _33: std::result::Result<u128, error::ErrorCode>;
    let mut _34: &state::spot_market::SpotMarket;
    let mut _35: u128;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _43: std::result::Result<u64, error::ErrorCode>;
    let mut _44: u64;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _46: std::result::Result<u64, error::ErrorCode>;
    let mut _47: std::result::Result<u64, error::ErrorCode>;
    let mut _48: i64;
    let mut _49: std::result::Result<u64, error::ErrorCode>;
    let mut _50: error::ErrorCode;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: u64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _64: std::result::Result<u128, error::ErrorCode>;
    let mut _65: u128;
    let mut _66: u128;
    let mut _67: u64;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _75: std::result::Result<u128, error::ErrorCode>;
    let mut _76: u128;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _78: std::result::Result<u128, error::ErrorCode>;
    let mut _79: u128;
    let mut _80: u128;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _93: std::result::Result<u128, error::ErrorCode>;
    let mut _94: u128;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _96: std::result::Result<u128, error::ErrorCode>;
    let mut _97: u128;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _99: std::result::Result<u128, error::ErrorCode>;
    let mut _100: u128;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _102: std::result::Result<u128, error::ErrorCode>;
    let mut _103: u128;
    let mut _104: u128;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _127: std::result::Result<u128, error::ErrorCode>;
    let mut _128: u128;
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _130: std::result::Result<u128, error::ErrorCode>;
    let mut _131: u128;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _133: std::result::Result<u128, error::ErrorCode>;
    let mut _134: u128;
    let mut _135: u128;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _151: math::spot_balance::InterestAccumulated;
    let mut _152: u128;
    let mut _153: u128;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug utilization => _17;
        let _31: u128;
        let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _40: u128;
        scope 10 {
            debug borrow_rate => _31;
            let _41: u64;
            let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _55: u64;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: u64;
            scope 15 {
                debug time_since_last_update => _41;
                let _62: u128;
                let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _72: u128;
                scope 24 {
                    debug modified_borrow_rate => _62;
                    let _73: u128;
                    let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _85: u128;
                    let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _90: u128;
                    scope 29 {
                        debug modified_deposit_rate => _73;
                        let _91: u128;
                        let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _109: u128;
                        let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _114: u128;
                        let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _119: u128;
                        let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _124: u128;
                        scope 38 {
                            debug borrow_interest => _91;
                            let _125: u128;
                            let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _140: u128;
                            let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _145: u128;
                            let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _150: u128;
                            scope 55 {
                                debug deposit_interest => _125;
                            }
                            scope 56 {
                                debug residual => _137;
                                scope 57 {
                                }
                            }
                            scope 58 {
                                debug val => _140;
                                scope 59 {
                                }
                            }
                            scope 60 {
                                debug residual => _142;
                                scope 61 {
                                }
                            }
                            scope 62 {
                                debug val => _145;
                                scope 63 {
                                }
                            }
                            scope 64 {
                                debug residual => _147;
                                scope 65 {
                                }
                            }
                            scope 66 {
                                debug val => _150;
                                scope 67 {
                                }
                            }
                        }
                        scope 39 {
                            debug residual => _106;
                            scope 40 {
                            }
                        }
                        scope 41 {
                            debug val => _109;
                            scope 42 {
                            }
                        }
                        scope 43 {
                            debug residual => _111;
                            scope 44 {
                            }
                        }
                        scope 45 {
                            debug val => _114;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug residual => _116;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug val => _119;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug residual => _121;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _124;
                            scope 54 {
                            }
                        }
                    }
                    scope 30 {
                        debug residual => _82;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug val => _85;
                        scope 33 {
                        }
                    }
                    scope 34 {
                        debug residual => _87;
                        scope 35 {
                        }
                    }
                    scope 36 {
                        debug val => _90;
                        scope 37 {
                        }
                    }
                }
                scope 25 {
                    debug residual => _69;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _72;
                    scope 28 {
                    }
                }
            }
            scope 16 {
                debug residual => _52;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _55;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _58;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _61;
                scope 23 {
                }
            }
        }
        scope 11 {
            debug residual => _37;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _40;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_1).22: u64);
        _8 = <u64 as Cast>::cast::<i64>(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: i64);
        _6 = _14;
        StorageDead(_14);
        _4 = Le(move _5, move _6);
        switchInt(move _4) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb95;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_16);
        _16 = InterestAccumulated { borrow_interest: const 0_u128, deposit_interest: const 0_u128 };
        _0 = std::result::Result::<InterestAccumulated, error::ErrorCode>::Ok(move _16);
        StorageDead(_16);
        goto -> bb95;
    }

    bb8: {
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_1);
        _19 = calculate_spot_market_utilization(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_18 as Continue).0: u128);
        _17 = _25;
        StorageDead(_25);
        StorageDead(_18);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _17;
        _27 = Eq(move _28, const 0_u128);
        switchInt(move _27) -> [0: bb15, otherwise: bb14];
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_18);
        goto -> bb94;
    }

    bb14: {
        StorageDead(_28);
        StorageLive(_30);
        _30 = InterestAccumulated { borrow_interest: const 0_u128, deposit_interest: const 0_u128 };
        _0 = std::result::Result::<InterestAccumulated, error::ErrorCode>::Ok(move _30);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb94;
    }

    bb15: {
        StorageDead(_28);
        _26 = const ();
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_1);
        StorageLive(_35);
        _35 = _17;
        _33 = calculate_borrow_rate(move _34, move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        _36 = discriminant(_32);
        switchInt(move _36) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_40);
        _40 = ((_32 as Continue).0: u128);
        _31 = _40;
        StorageDead(_40);
        StorageDead(_32);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _2;
        _47 = <i64 as Cast>::cast::<u64>(move _48) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_37);
        _37 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_32);
        goto -> bb93;
    }

    bb21: {
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = error::ErrorCode::UnableToCastUnixTime;
        _49 = std::result::Result::<u64, error::ErrorCode>::Err(move _50);
        StorageDead(_50);
        _46 = std::result::Result::<u64, error::ErrorCode>::or::<error::ErrorCode>(move _47, move _49) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_49);
        StorageDead(_47);
        _45 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        _51 = discriminant(_45);
        switchInt(move _51) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_55);
        _55 = ((_45 as Continue).0: u64);
        _44 = _55;
        StorageDead(_55);
        StorageLive(_56);
        _56 = ((*_1).22: u64);
        _43 = <u64 as SafeMath>::safe_sub(move _44, move _56) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_52);
        _52 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb91;
    }

    bb27: {
        StorageDead(_56);
        StorageDead(_44);
        _42 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _43) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_43);
        _57 = discriminant(_42);
        switchInt(move _57) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_61);
        _61 = ((_42 as Continue).0: u64);
        _41 = _61;
        StorageDead(_61);
        StorageDead(_45);
        StorageDead(_42);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _31;
        StorageLive(_66);
        StorageLive(_67);
        _67 = _41;
        _66 = move _67 as u128 (IntToInt);
        StorageDead(_67);
        _64 = <u128 as SafeMath>::safe_mul(move _65, move _66) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_58);
        _58 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb91;
    }

    bb32: {
        StorageDead(_66);
        StorageDead(_65);
        _63 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _64) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_64);
        _68 = discriminant(_63);
        switchInt(move _68) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_72);
        _72 = ((_63 as Continue).0: u128);
        _62 = _72;
        StorageDead(_72);
        StorageDead(_63);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _62;
        StorageLive(_80);
        _80 = _17;
        _78 = <u128 as SafeMath>::safe_mul(move _79, move _80) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_69);
        _69 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_63);
        goto -> bb90;
    }

    bb37: {
        StorageDead(_80);
        StorageDead(_79);
        _77 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _78) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_78);
        _81 = discriminant(_77);
        switchInt(move _81) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_85);
        _85 = ((_77 as Continue).0: u128);
        _76 = _85;
        StorageDead(_85);
        _75 = <u128 as SafeMath>::safe_div(move _76, const _) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_82);
        _82 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb88;
    }

    bb42: {
        StorageDead(_76);
        _74 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _75) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_75);
        _86 = discriminant(_74);
        switchInt(move _86) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_90);
        _90 = ((_74 as Continue).0: u128);
        _73 = _90;
        StorageDead(_90);
        StorageDead(_77);
        StorageDead(_74);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = ((*_1).14: u128);
        StorageLive(_104);
        _104 = _62;
        _102 = <u128 as SafeMath>::safe_mul(move _103, move _104) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_87);
        _87 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_89);
        StorageDead(_87);
        goto -> bb88;
    }

    bb47: {
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _102) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_102);
        _105 = discriminant(_101);
        switchInt(move _105) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_109);
        _109 = ((_101 as Continue).0: u128);
        _100 = _109;
        StorageDead(_109);
        _99 = <u128 as SafeMath>::safe_div(move _100, const _) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_106);
        _106 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb84;
    }

    bb52: {
        StorageDead(_100);
        _98 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _99) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_99);
        _110 = discriminant(_98);
        switchInt(move _110) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_114);
        _114 = ((_98 as Continue).0: u128);
        _97 = _114;
        StorageDead(_114);
        _96 = <u128 as SafeMath>::safe_div(move _97, const _) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_111);
        _111 = ((_98 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_113);
        StorageDead(_111);
        goto -> bb84;
    }

    bb57: {
        StorageDead(_97);
        _95 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _96) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_96);
        _115 = discriminant(_95);
        switchInt(move _115) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_119);
        _119 = ((_95 as Continue).0: u128);
        _94 = _119;
        StorageDead(_119);
        _93 = <u128 as SafeMath>::safe_add(move _94, const 1_u128) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_116);
        _116 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_118);
        StorageDead(_116);
        goto -> bb85;
    }

    bb62: {
        StorageDead(_94);
        _92 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _93) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_93);
        _120 = discriminant(_92);
        switchInt(move _120) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_124);
        _124 = ((_92 as Continue).0: u128);
        _91 = _124;
        StorageDead(_124);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_92);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = ((*_1).13: u128);
        StorageLive(_135);
        _135 = _73;
        _133 = <u128 as SafeMath>::safe_mul(move _134, move _135) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_121);
        _121 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_123);
        StorageDead(_121);
        goto -> bb86;
    }

    bb67: {
        StorageDead(_135);
        StorageDead(_134);
        _132 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _133) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_133);
        _136 = discriminant(_132);
        switchInt(move _136) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_140);
        _140 = ((_132 as Continue).0: u128);
        _131 = _140;
        StorageDead(_140);
        _130 = <u128 as SafeMath>::safe_div(move _131, const _) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_137);
        _137 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb82;
    }

    bb72: {
        StorageDead(_131);
        _129 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _130) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_130);
        _141 = discriminant(_129);
        switchInt(move _141) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_145);
        _145 = ((_129 as Continue).0: u128);
        _128 = _145;
        StorageDead(_145);
        _127 = <u128 as SafeMath>::safe_div(move _128, const _) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_142);
        _142 = ((_129 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_144);
        StorageDead(_142);
        goto -> bb82;
    }

    bb77: {
        StorageDead(_128);
        _126 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _127) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_127);
        _146 = discriminant(_126);
        switchInt(move _146) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_150);
        _150 = ((_126 as Continue).0: u128);
        _125 = _150;
        StorageDead(_150);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_126);
        StorageLive(_151);
        StorageLive(_152);
        _152 = _91;
        StorageLive(_153);
        _153 = _125;
        _151 = InterestAccumulated { borrow_interest: move _152, deposit_interest: move _153 };
        StorageDead(_153);
        StorageDead(_152);
        _0 = std::result::Result::<InterestAccumulated, error::ErrorCode>::Ok(move _151);
        StorageDead(_151);
        StorageDead(_125);
        StorageDead(_91);
        StorageDead(_73);
        StorageDead(_62);
        StorageDead(_41);
        StorageDead(_31);
        StorageDead(_17);
        goto -> bb96;
    }

    bb80: {
        StorageLive(_147);
        _147 = ((_126 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<InterestAccumulated, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_149);
        StorageDead(_147);
        goto -> bb83;
    }

    bb82: {
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb87;
    }

    bb84: {
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_92);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_91);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_77);
        StorageDead(_74);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_73);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_62);
        goto -> bb92;
    }

    bb91: {
        StorageDead(_45);
        StorageDead(_42);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_41);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_31);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_17);
        goto -> bb96;
    }

    bb95: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb96;
    }

    bb96: {
        return;
    }
}
