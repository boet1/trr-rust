// MIR for `state::events::<impl at programs/drift/src/state/events.rs:625:1: 625:9>::deserialize_reader` after PreCodegen

fn state::events::<impl at programs/drift/src/state/events.rs:625:1: 625:9>::deserialize_reader(_1: &mut R) -> std::result::Result<SwapRecord, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<state::events::SwapRecord, std::io::Error>;
    let mut _2: state::events::SwapRecord;
    let mut _3: i64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i64>;
    let mut _5: std::result::Result<i64, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: i64;
    let mut _12: anchor_lang::prelude::Pubkey;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, anchor_lang::prelude::Pubkey>;
    let mut _14: std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error>;
    let mut _15: &mut R;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: anchor_lang::prelude::Pubkey;
    let mut _21: u64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _23: std::result::Result<u64, std::io::Error>;
    let mut _24: &mut R;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _29: u64;
    let mut _30: u64;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _32: std::result::Result<u64, std::io::Error>;
    let mut _33: &mut R;
    let mut _34: isize;
    let _35: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _38: u64;
    let mut _39: u16;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _41: std::result::Result<u16, std::io::Error>;
    let mut _42: &mut R;
    let mut _43: isize;
    let _44: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _47: u16;
    let mut _48: u16;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u16>;
    let mut _50: std::result::Result<u16, std::io::Error>;
    let mut _51: &mut R;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _56: u16;
    let mut _57: i64;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i64>;
    let mut _59: std::result::Result<i64, std::io::Error>;
    let mut _60: &mut R;
    let mut _61: isize;
    let _62: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _65: i64;
    let mut _66: i64;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, i64>;
    let mut _68: std::result::Result<i64, std::io::Error>;
    let mut _69: &mut R;
    let mut _70: isize;
    let _71: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _74: i64;
    let mut _75: u64;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, u64>;
    let mut _77: std::result::Result<u64, std::io::Error>;
    let mut _78: &mut R;
    let mut _79: isize;
    let _80: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _83: u64;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: isize;
    let mut _99: isize;
    let mut _100: isize;
    let mut _101: isize;
    let mut _102: isize;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    let mut _127: isize;
    let mut _128: isize;
    let mut _129: isize;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    let mut _135: isize;
    let mut _136: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _26;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _29;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _35;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _38;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _44;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _47;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _53;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _56;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _62;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _65;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _71;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _74;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _80;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _83;
        scope 36 {
        }
    }

    bb0: {
        _91 = const false;
        _90 = const false;
        _89 = const false;
        _88 = const false;
        _87 = const false;
        _86 = const false;
        _85 = const false;
        _84 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <i64 as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<i64, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb48];
    }

    bb2: {
        _91 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: i64);
        _3 = _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_1);
        _14 = <anchor_lang::prelude::Pubkey as BorshDeserialize>::deserialize_reader::<R>(move _15) -> [return: bb7, unwind: bb65];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb65];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb56;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<anchor_lang::prelude::Pubkey, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb65];
    }

    bb8: {
        _90 = const true;
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: anchor_lang::prelude::Pubkey);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &mut (*_1);
        _23 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _24) -> [return: bb12, unwind: bb64];
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb64];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb55;
    }

    bb12: {
        StorageDead(_24);
        _22 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _23) -> [return: bb13, unwind: bb64];
    }

    bb13: {
        _89 = const true;
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: u64);
        _21 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut (*_1);
        _32 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _33) -> [return: bb17, unwind: bb63];
    }

    bb15: {
        StorageLive(_26);
        _26 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _28) -> [return: bb16, unwind: bb63];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb54;
    }

    bb17: {
        StorageDead(_33);
        _31 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _32) -> [return: bb18, unwind: bb63];
    }

    bb18: {
        _88 = const true;
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: u64);
        _30 = _38;
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut (*_1);
        _41 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _42) -> [return: bb22, unwind: bb62];
    }

    bb20: {
        StorageLive(_35);
        _35 = move ((_31 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_37);
        _37 = move _35;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _37) -> [return: bb21, unwind: bb62];
    }

    bb21: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb53;
    }

    bb22: {
        StorageDead(_42);
        _40 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _41) -> [return: bb23, unwind: bb62];
    }

    bb23: {
        _87 = const true;
        StorageDead(_41);
        _43 = discriminant(_40);
        switchInt(move _43) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_47);
        _47 = ((_40 as Continue).0: u16);
        _39 = _47;
        StorageDead(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut (*_1);
        _50 = <u16 as BorshDeserialize>::deserialize_reader::<R>(move _51) -> [return: bb27, unwind: bb61];
    }

    bb25: {
        StorageLive(_44);
        _44 = move ((_40 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_46);
        _46 = move _44;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _46) -> [return: bb26, unwind: bb61];
    }

    bb26: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb52;
    }

    bb27: {
        StorageDead(_51);
        _49 = <std::result::Result<u16, std::io::Error> as Try>::branch(move _50) -> [return: bb28, unwind: bb61];
    }

    bb28: {
        _86 = const true;
        StorageDead(_50);
        _52 = discriminant(_49);
        switchInt(move _52) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_56);
        _56 = ((_49 as Continue).0: u16);
        _48 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &mut (*_1);
        _59 = <i64 as BorshDeserialize>::deserialize_reader::<R>(move _60) -> [return: bb32, unwind: bb60];
    }

    bb30: {
        StorageLive(_53);
        _53 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_55);
        _55 = move _53;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _55) -> [return: bb31, unwind: bb60];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb51;
    }

    bb32: {
        StorageDead(_60);
        _58 = <std::result::Result<i64, std::io::Error> as Try>::branch(move _59) -> [return: bb33, unwind: bb60];
    }

    bb33: {
        _85 = const true;
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: i64);
        _57 = _65;
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &mut (*_1);
        _68 = <i64 as BorshDeserialize>::deserialize_reader::<R>(move _69) -> [return: bb37, unwind: bb59];
    }

    bb35: {
        StorageLive(_62);
        _62 = move ((_58 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _64) -> [return: bb36, unwind: bb59];
    }

    bb36: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb50;
    }

    bb37: {
        StorageDead(_69);
        _67 = <std::result::Result<i64, std::io::Error> as Try>::branch(move _68) -> [return: bb38, unwind: bb59];
    }

    bb38: {
        _84 = const true;
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_74);
        _74 = ((_67 as Continue).0: i64);
        _66 = _74;
        StorageDead(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &mut (*_1);
        _77 = <u64 as BorshDeserialize>::deserialize_reader::<R>(move _78) -> [return: bb42, unwind: bb58];
    }

    bb40: {
        StorageLive(_71);
        _71 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_73);
        _73 = move _71;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _73) -> [return: bb41, unwind: bb58];
    }

    bb41: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb49;
    }

    bb42: {
        StorageDead(_78);
        _76 = <std::result::Result<u64, std::io::Error> as Try>::branch(move _77) -> [return: bb43, unwind: bb58];
    }

    bb43: {
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: u64);
        _75 = _83;
        StorageDead(_83);
        _2 = SwapRecord { ts: move _3, user: move _12, amount_out: move _21, amount_in: move _30, out_market_index: move _39, in_market_index: move _48, out_oracle_price: move _57, in_oracle_price: move _66, fee: move _75 };
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        _0 = std::result::Result::<SwapRecord, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _92 = discriminant(_76);
        StorageDead(_76);
        _94 = discriminant(_67);
        _84 = const false;
        StorageDead(_67);
        _96 = discriminant(_58);
        _85 = const false;
        StorageDead(_58);
        _98 = discriminant(_49);
        _86 = const false;
        StorageDead(_49);
        _100 = discriminant(_40);
        _87 = const false;
        StorageDead(_40);
        _102 = discriminant(_31);
        _88 = const false;
        StorageDead(_31);
        _104 = discriminant(_22);
        _89 = const false;
        StorageDead(_22);
        _106 = discriminant(_13);
        _90 = const false;
        StorageDead(_13);
        _108 = discriminant(_4);
        _91 = const false;
        StorageDead(_4);
        goto -> bb47;
    }

    bb45: {
        StorageLive(_80);
        _80 = move ((_76 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_82);
        _82 = move _80;
        _0 = <std::result::Result<SwapRecord, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _82) -> [return: bb46, unwind: bb57];
    }

    bb46: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_66);
        StorageDead(_57);
        StorageDead(_48);
        StorageDead(_39);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        StorageDead(_2);
        _110 = discriminant(_76);
        StorageDead(_76);
        goto -> bb49;
    }

    bb47: {
        return;
    }

    bb48 (cleanup): {
        resume;
    }

    bb49: {
        _112 = discriminant(_67);
        _84 = const false;
        StorageDead(_67);
        goto -> bb50;
    }

    bb50: {
        _114 = discriminant(_58);
        _85 = const false;
        StorageDead(_58);
        goto -> bb51;
    }

    bb51: {
        _116 = discriminant(_49);
        _86 = const false;
        StorageDead(_49);
        goto -> bb52;
    }

    bb52: {
        _118 = discriminant(_40);
        _87 = const false;
        StorageDead(_40);
        goto -> bb53;
    }

    bb53: {
        _120 = discriminant(_31);
        _88 = const false;
        StorageDead(_31);
        goto -> bb54;
    }

    bb54: {
        _122 = discriminant(_22);
        _89 = const false;
        StorageDead(_22);
        goto -> bb55;
    }

    bb55: {
        _124 = discriminant(_13);
        _90 = const false;
        StorageDead(_13);
        goto -> bb56;
    }

    bb56: {
        _126 = discriminant(_4);
        _91 = const false;
        StorageDead(_4);
        goto -> bb47;
    }

    bb57 (cleanup): {
        _128 = discriminant(_76);
        goto -> bb58;
    }

    bb58 (cleanup): {
        _129 = discriminant(_67);
        goto -> bb59;
    }

    bb59 (cleanup): {
        _130 = discriminant(_58);
        goto -> bb60;
    }

    bb60 (cleanup): {
        _131 = discriminant(_49);
        goto -> bb61;
    }

    bb61 (cleanup): {
        _132 = discriminant(_40);
        goto -> bb62;
    }

    bb62 (cleanup): {
        _133 = discriminant(_31);
        goto -> bb63;
    }

    bb63 (cleanup): {
        _134 = discriminant(_22);
        goto -> bb64;
    }

    bb64 (cleanup): {
        _135 = discriminant(_13);
        goto -> bb65;
    }

    bb65 (cleanup): {
        _136 = discriminant(_4);
        goto -> bb48;
    }
}
