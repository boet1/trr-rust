// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:121:1: 121:18>::is_as_safe_as_asset` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:121:1: 121:18>::is_as_safe_as_asset(_1: &state::perp_market::ContractTier, _2: &state::spot_market::AssetTier) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &&state::spot_market::AssetTier;
    let mut _5: &&state::spot_market::AssetTier;
    let _6: &state::spot_market::AssetTier;
    let _7: state::spot_market::AssetTier;
    let mut _8: bool;
    let mut _9: &&state::spot_market::AssetTier;
    let mut _10: &&state::spot_market::AssetTier;
    let _11: &state::spot_market::AssetTier;
    let _12: &state::spot_market::AssetTier;
    let _13: state::spot_market::AssetTier;
    let mut _14: &&state::perp_market::ContractTier;
    let mut _15: &&state::perp_market::ContractTier;
    let _16: &state::perp_market::ContractTier;
    let _17: &state::perp_market::ContractTier;
    let _18: state::perp_market::ContractTier;
    let mut _19: &&state::perp_market::ContractTier;
    let mut _20: &&state::spot_market::AssetTier;
    let mut _21: &&state::spot_market::AssetTier;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_2;
        StorageLive(_5);
        _21 = const _;
        _5 = &(*_21);
        _3 = <&state::spot_market::AssetTier as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        _0 = const true;
        goto -> bb9;
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_2;
        StorageLive(_10);
        _20 = const _;
        _10 = &(*_20);
        _8 = <&state::spot_market::AssetTier as PartialOrd>::ge(move _9, move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_14);
        _14 = &_1;
        StorageLive(_15);
        _19 = const _;
        _15 = &(*_19);
        _0 = <&state::perp_market::ContractTier as PartialOrd>::le(move _14, move _15) -> [return: bb7, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_9);
        _0 = const false;
        goto -> bb8;
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_8);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_3);
        return;
    }
}
