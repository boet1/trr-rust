// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_margin_ratio` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_margin_ratio(_1: &PerpMarket, _2: u128, _3: math::margin::MarginRequirementType, _4: bool) -> std::result::Result<u32, error::ErrorCode> {
    debug self => _1;
    debug size => _2;
    debug margin_type => _3;
    debug user_high_leverage_mode => _4;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: &state::perp_market::MarketStatus;
    let mut _8: &state::perp_market::MarketStatus;
    let _9: state::perp_market::MarketStatus;
    let mut _10: !;
    let _11: u32;
    let _12: u32;
    let mut _13: (u32, u32);
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: &state::perp_market::PerpMarket;
    let mut _17: u32;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _19: std::result::Result<u32, error::ErrorCode>;
    let mut _20: u16;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: u32;
    let mut _26: u32;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _28: std::result::Result<u32, error::ErrorCode>;
    let mut _29: u16;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: u32;
    let mut _35: u32;
    let mut _36: u32;
    let mut _38: isize;
    let mut _39: u32;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _41: std::result::Result<u32, error::ErrorCode>;
    let mut _42: u32;
    let mut _43: u32;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: bool;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _52: std::result::Result<u32, error::ErrorCode>;
    let mut _53: u128;
    let mut _54: u32;
    let mut _55: u32;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: u32;
    let mut _63: u32;
    let mut _64: u32;
    let mut _65: &state::perp_market::MarketStatus;
    scope 1 {
        debug margin_ratio_initial => _11;
        debug margin_ratio_maintenance => _12;
        let _37: u32;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: u32;
        scope 10 {
            debug default_margin_ratio => _37;
            let _50: u32;
            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _60: u32;
            scope 15 {
                debug size_adj_margin_ratio => _50;
                let _61: u32;
                scope 20 {
                    debug margin_ratio => _61;
                }
            }
            scope 16 {
                debug residual => _57;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _60;
                scope 19 {
                }
            }
        }
        scope 11 {
            debug residual => _45;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _48;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _22;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _25;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _31;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _34;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).22: state::perp_market::MarketStatus);
        StorageLive(_8);
        _65 = const _;
        _8 = &(*_65);
        _6 = <state::perp_market::MarketStatus as PartialEq>::eq(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(const 0_u32);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb39;
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _4;
        switchInt(move _14) -> [0: bb19, otherwise: bb4];
    }

    bb4: {
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        _15 = PerpMarket::is_high_leverage_mode_enabled(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _15) -> [0: bb18, otherwise: bb6];
    }

    bb6: {
        StorageDead(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_1).32: u16);
        _19 = <u16 as Cast>::cast::<u32>(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_20);
        _18 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_18 as Continue).0: u32);
        _17 = _25;
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).33: u16);
        _28 = <u16 as Cast>::cast::<u32>(move _29) -> [return: bb13, unwind continue];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_22);
        _22 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_17);
        goto -> bb38;
    }

    bb13: {
        StorageDead(_29);
        _27 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb15, 1: bb16, otherwise: bb10];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u32);
        _26 = _34;
        StorageDead(_34);
        _13 = (move _17, move _26);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_27);
        StorageDead(_18);
        goto -> bb20;
    }

    bb16: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_27);
        goto -> bb38;
    }

    bb18: {
        StorageDead(_16);
        goto -> bb19;
    }

    bb19: {
        StorageLive(_35);
        _35 = ((*_1).15: u32);
        StorageLive(_36);
        _36 = ((*_1).16: u32);
        _13 = (move _35, move _36);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_11);
        _11 = (_13.0: u32);
        StorageLive(_12);
        _12 = (_13.1: u32);
        StorageDead(_13);
        StorageLive(_37);
        _38 = discriminant(_3);
        switchInt(move _38) -> [0: bb22, 1: bb23, 2: bb21, otherwise: bb10];
    }

    bb21: {
        _37 = _12;
        goto -> bb30;
    }

    bb22: {
        _37 = _11;
        goto -> bb30;
    }

    bb23: {
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _11;
        StorageLive(_43);
        _43 = _12;
        _41 = <u32 as SafeMath>::safe_add(move _42, move _43) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _41) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_41);
        _44 = discriminant(_40);
        switchInt(move _44) -> [0: bb26, 1: bb27, otherwise: bb10];
    }

    bb26: {
        StorageLive(_48);
        _48 = ((_40 as Continue).0: u32);
        _39 = _48;
        StorageDead(_48);
        _49 = Eq(const 2_u32, const 0_u32);
        assert(!move _49, "attempt to divide `{}` by zero", _39) -> [success: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_45);
        _45 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_40);
        goto -> bb37;
    }

    bb29: {
        _37 = Div(move _39, const 2_u32);
        StorageDead(_39);
        StorageDead(_40);
        goto -> bb30;
    }

    bb30: {
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _2;
        StorageLive(_54);
        _54 = ((*_1).11: u32);
        StorageLive(_55);
        _55 = _37;
        _52 = calculate_size_premium_liability_weight(move _53, move _54, move _55, const _) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _52) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_52);
        _56 = discriminant(_51);
        switchInt(move _56) -> [0: bb33, 1: bb34, otherwise: bb10];
    }

    bb33: {
        StorageLive(_60);
        _60 = ((_51 as Continue).0: u32);
        _50 = _60;
        StorageDead(_60);
        StorageDead(_51);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _37;
        StorageLive(_63);
        _63 = _50;
        _61 = <u32 as Ord>::max(move _62, move _63) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_57);
        _57 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb37;
    }

    bb36: {
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_64);
        _64 = _61;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _64);
        StorageDead(_64);
        StorageDead(_61);
        StorageDead(_50);
        StorageDead(_37);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb39;
    }

    bb37: {
        StorageDead(_37);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb39;
    }

    bb38: {
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb39;
    }

    bb39: {
        return;
    }
}
