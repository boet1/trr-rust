// MIR for `is_oracle_mark_too_divergent` after PreCodegen

fn is_oracle_mark_too_divergent(_1: i64, _2: &PriceDivergenceGuardRails) -> std::result::Result<bool, error::ErrorCode> {
    debug price_spread_pct => _1;
    debug oracle_guard_rails => _2;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _3: u64;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: i64;
    let mut _10: u64;
    scope 1 {
        debug max_divergence => _3;
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_2).0: u64);
        StorageLive(_5);
        _6 = Eq(const 10_u64, const 0_u64);
        assert(!move _6, "attempt to divide `{}` by zero", const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _5 = Div(const _, const 10_u64);
        _3 = <u64 as Ord>::max(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        _8 = core::num::<impl i64>::unsigned_abs(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = _3;
        _7 = Gt(move _8, move _10);
        StorageDead(_10);
        StorageDead(_8);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        StorageDead(_3);
        return;
    }
}
