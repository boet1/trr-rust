// MIR for `admin::handle_settle_expired_market_pools_to_revenue_pool` before PreCodegen

fn admin::handle_settle_expired_market_pools_to_revenue_pool(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::SettleExpiredMarketPoolsToRevenuePool<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _13: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _18: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _25: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _26: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _29: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _30: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _31: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let mut _41: &std::string::String;
    let _42: &std::string::String;
    let _43: std::string::String;
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[&str; 1];
    let _48: &[&str; 1];
    let _49: [&str; 1];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let mut _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: &u16;
    let _56: &u16;
    let _57: &state::perp_market::PerpMarket;
    let mut _58: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _59: ();
    let mut _60: &str;
    let _61: &str;
    let mut _62: &std::string::String;
    let _63: &std::string::String;
    let _64: std::string::String;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[&str; 1];
    let _69: &[&str; 1];
    let _70: [&str; 1];
    let mut _71: &[core::fmt::rt::Argument<'_>];
    let mut _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: &[core::fmt::rt::Argument<'_>; 1];
    let _74: [core::fmt::rt::Argument<'_>; 1];
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: &u16;
    let _77: &u16;
    let _78: &state::spot_market::SpotMarket;
    let mut _79: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _82: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _89: ();
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _91: std::result::Result<(), error::ErrorCode>;
    let mut _92: &mut state::spot_market::SpotMarket;
    let mut _93: &mut state::spot_market::SpotMarket;
    let mut _94: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _95: std::option::Option<&state::oracle::OraclePriceData>;
    let mut _96: i64;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _102: ();
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _104: std::result::Result<(), error::ErrorCode>;
    let mut _105: bool;
    let mut _106: u16;
    let mut _107: &state::spot_market::SpotMarket;
    let mut _108: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _109: ();
    let _111: ();
    let mut _112: &str;
    let _113: &str;
    let mut _114: &std::string::String;
    let _115: &std::string::String;
    let _116: std::string::String;
    let mut _118: std::fmt::Arguments<'_>;
    let mut _119: &[&str];
    let mut _120: &[&str; 2];
    let _121: &[&str; 2];
    let _122: [&str; 2];
    let mut _123: &[core::fmt::rt::Argument<'_>];
    let mut _124: &[core::fmt::rt::Argument<'_>; 1];
    let _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: [core::fmt::rt::Argument<'_>; 1];
    let mut _127: core::fmt::rt::Argument<'_>;
    let mut _128: &error::ErrorCode;
    let _129: &error::ErrorCode;
    let _130: ();
    let mut _131: &str;
    let _132: &str;
    let mut _133: error::ErrorCode;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _139: ();
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _141: std::result::Result<(), error::ErrorCode>;
    let mut _142: bool;
    let mut _143: &state::perp_market::MarketStatus;
    let _144: &state::perp_market::PerpMarket;
    let mut _145: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _146: &state::perp_market::MarketStatus;
    let _147: state::perp_market::MarketStatus;
    let mut _148: ();
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let mut _153: &std::string::String;
    let _154: &std::string::String;
    let _155: std::string::String;
    let mut _157: std::fmt::Arguments<'_>;
    let mut _158: &[&str];
    let mut _159: &[&str; 2];
    let _160: &[&str; 2];
    let _161: [&str; 2];
    let mut _162: &[core::fmt::rt::Argument<'_>];
    let mut _163: &[core::fmt::rt::Argument<'_>; 1];
    let _164: &[core::fmt::rt::Argument<'_>; 1];
    let _165: [core::fmt::rt::Argument<'_>; 1];
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &error::ErrorCode;
    let _168: &error::ErrorCode;
    let _169: ();
    let mut _170: &str;
    let _171: &str;
    let mut _172: error::ErrorCode;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _178: ();
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _180: std::result::Result<(), error::ErrorCode>;
    let mut _181: bool;
    let mut _182: i128;
    let mut _183: &state::perp_market::PerpMarket;
    let mut _184: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _185: bool;
    let mut _186: i128;
    let mut _187: &state::perp_market::PerpMarket;
    let mut _188: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _189: bool;
    let mut _190: u32;
    let mut _191: &state::perp_market::PerpMarket;
    let mut _192: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _193: ();
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: &std::string::String;
    let _199: &std::string::String;
    let _200: std::string::String;
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[&str; 2];
    let _205: &[&str; 2];
    let _206: [&str; 2];
    let mut _207: &[core::fmt::rt::Argument<'_>];
    let mut _208: &[core::fmt::rt::Argument<'_>; 1];
    let _209: &[core::fmt::rt::Argument<'_>; 1];
    let _210: [core::fmt::rt::Argument<'_>; 1];
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &error::ErrorCode;
    let _213: &error::ErrorCode;
    let _214: ();
    let mut _215: &str;
    let _216: &str;
    let mut _217: &std::string::String;
    let _218: &std::string::String;
    let _219: std::string::String;
    let mut _221: std::fmt::Arguments<'_>;
    let mut _222: &[&str];
    let mut _223: &[&str; 3];
    let _224: &[&str; 3];
    let _225: [&str; 3];
    let mut _226: &[core::fmt::rt::Argument<'_>];
    let mut _227: &[core::fmt::rt::Argument<'_>; 3];
    let _228: &[core::fmt::rt::Argument<'_>; 3];
    let _229: [core::fmt::rt::Argument<'_>; 3];
    let mut _230: core::fmt::rt::Argument<'_>;
    let mut _231: &i128;
    let _232: &i128;
    let _233: &state::perp_market::PerpMarket;
    let mut _234: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _235: core::fmt::rt::Argument<'_>;
    let mut _236: &i128;
    let _237: &i128;
    let _238: &state::perp_market::PerpMarket;
    let mut _239: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _240: core::fmt::rt::Argument<'_>;
    let mut _241: &u32;
    let _242: &u32;
    let _243: &state::perp_market::PerpMarket;
    let mut _244: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _245: error::ErrorCode;
    let mut _246: isize;
    let mut _248: !;
    let mut _249: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _251: ();
    let mut _252: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _253: std::result::Result<(), error::ErrorCode>;
    let mut _254: bool;
    let mut _255: i128;
    let mut _256: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _257: std::result::Result<i128, error::ErrorCode>;
    let mut _258: &state::perp_market::AMM;
    let _259: &state::perp_market::AMM;
    let _260: &state::perp_market::PerpMarket;
    let mut _261: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _262: isize;
    let mut _264: !;
    let mut _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _267: ();
    let _269: ();
    let mut _270: &str;
    let _271: &str;
    let mut _272: &std::string::String;
    let _273: &std::string::String;
    let _274: std::string::String;
    let mut _276: std::fmt::Arguments<'_>;
    let mut _277: &[&str];
    let mut _278: &[&str; 2];
    let _279: &[&str; 2];
    let _280: [&str; 2];
    let mut _281: &[core::fmt::rt::Argument<'_>];
    let mut _282: &[core::fmt::rt::Argument<'_>; 1];
    let _283: &[core::fmt::rt::Argument<'_>; 1];
    let _284: [core::fmt::rt::Argument<'_>; 1];
    let mut _285: core::fmt::rt::Argument<'_>;
    let mut _286: &error::ErrorCode;
    let _287: &error::ErrorCode;
    let _288: ();
    let mut _289: &str;
    let _290: &str;
    let mut _291: error::ErrorCode;
    let mut _292: isize;
    let mut _294: !;
    let mut _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _297: ();
    let mut _298: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _299: std::result::Result<(), error::ErrorCode>;
    let mut _300: bool;
    let mut _301: u16;
    let mut _302: &state::state::State;
    let mut _303: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _304: ();
    let _306: ();
    let mut _307: &str;
    let _308: &str;
    let mut _309: &std::string::String;
    let _310: &std::string::String;
    let _311: std::string::String;
    let mut _313: std::fmt::Arguments<'_>;
    let mut _314: &[&str];
    let mut _315: &[&str; 2];
    let _316: &[&str; 2];
    let _317: [&str; 2];
    let mut _318: &[core::fmt::rt::Argument<'_>];
    let mut _319: &[core::fmt::rt::Argument<'_>; 1];
    let _320: &[core::fmt::rt::Argument<'_>; 1];
    let _321: [core::fmt::rt::Argument<'_>; 1];
    let mut _322: core::fmt::rt::Argument<'_>;
    let mut _323: &error::ErrorCode;
    let _324: &error::ErrorCode;
    let _325: ();
    let mut _326: &str;
    let _327: &str;
    let mut _328: error::ErrorCode;
    let mut _329: isize;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _335: bool;
    let mut _336: u16;
    let mut _337: &state::state::State;
    let mut _338: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _339: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _340: std::result::Result<i64, error::ErrorCode>;
    let mut _341: i64;
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _343: std::result::Result<i64, error::ErrorCode>;
    let mut _344: i64;
    let mut _345: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _346: std::result::Result<i64, error::ErrorCode>;
    let mut _347: u16;
    let mut _348: &state::state::State;
    let mut _349: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _350: isize;
    let mut _352: !;
    let mut _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _355: isize;
    let mut _357: !;
    let mut _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _360: isize;
    let mut _362: !;
    let mut _363: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _365: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _366: std::result::Result<i64, error::ErrorCode>;
    let mut _367: u16;
    let mut _368: &state::state::State;
    let mut _369: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _370: isize;
    let mut _372: !;
    let mut _373: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _375: ();
    let mut _376: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _377: std::result::Result<(), error::ErrorCode>;
    let mut _378: bool;
    let mut _379: i64;
    let mut _380: i64;
    let mut _381: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _382: std::result::Result<i64, error::ErrorCode>;
    let mut _383: i64;
    let mut _384: &state::perp_market::PerpMarket;
    let mut _385: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _386: i64;
    let mut _387: isize;
    let mut _389: !;
    let mut _390: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _392: ();
    let _394: ();
    let mut _395: &str;
    let _396: &str;
    let mut _397: &std::string::String;
    let _398: &std::string::String;
    let _399: std::string::String;
    let mut _401: std::fmt::Arguments<'_>;
    let mut _402: &[&str];
    let mut _403: &[&str; 2];
    let _404: &[&str; 2];
    let _405: [&str; 2];
    let mut _406: &[core::fmt::rt::Argument<'_>];
    let mut _407: &[core::fmt::rt::Argument<'_>; 1];
    let _408: &[core::fmt::rt::Argument<'_>; 1];
    let _409: [core::fmt::rt::Argument<'_>; 1];
    let mut _410: core::fmt::rt::Argument<'_>;
    let mut _411: &error::ErrorCode;
    let _412: &error::ErrorCode;
    let _413: ();
    let mut _414: &str;
    let _415: &str;
    let mut _416: &std::string::String;
    let _417: &std::string::String;
    let _418: std::string::String;
    let mut _420: std::fmt::Arguments<'_>;
    let mut _421: &[&str];
    let mut _422: &[&str; 2];
    let _423: &[&str; 2];
    let _424: [&str; 2];
    let mut _425: &[core::fmt::rt::Argument<'_>];
    let mut _426: &[core::fmt::rt::Argument<'_>; 1];
    let _427: &[core::fmt::rt::Argument<'_>; 1];
    let _428: [core::fmt::rt::Argument<'_>; 1];
    let mut _429: core::fmt::rt::Argument<'_>;
    let mut _430: &i64;
    let _431: &i64;
    let mut _432: error::ErrorCode;
    let mut _433: isize;
    let mut _435: !;
    let mut _436: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _439: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _440: std::result::Result<u128, error::ErrorCode>;
    let mut _441: u128;
    let mut _442: &state::perp_market::PerpMarket;
    let mut _443: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _444: &state::spot_market::SpotMarket;
    let _445: &state::spot_market::SpotMarket;
    let mut _446: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _447: &state::spot_market::SpotBalanceType;
    let _448: &state::spot_market::SpotBalanceType;
    let _449: state::spot_market::SpotBalanceType;
    let mut _450: isize;
    let mut _452: !;
    let mut _453: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _456: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _457: std::result::Result<u128, error::ErrorCode>;
    let mut _458: u128;
    let mut _459: &state::perp_market::PerpMarket;
    let mut _460: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _461: &state::spot_market::SpotMarket;
    let _462: &state::spot_market::SpotMarket;
    let mut _463: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _464: &state::spot_market::SpotBalanceType;
    let _465: &state::spot_market::SpotBalanceType;
    let _466: state::spot_market::SpotBalanceType;
    let mut _467: isize;
    let mut _469: !;
    let mut _470: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _472: ();
    let mut _473: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _474: std::result::Result<(), error::ErrorCode>;
    let mut _475: u128;
    let mut _476: &state::spot_market::SpotBalanceType;
    let _477: &state::spot_market::SpotBalanceType;
    let _478: state::spot_market::SpotBalanceType;
    let mut _479: &mut state::spot_market::SpotMarket;
    let mut _480: &mut state::spot_market::SpotMarket;
    let mut _481: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _482: &mut dyn state::spot_market::SpotBalance;
    let mut _483: &mut state::perp_market::PoolBalance;
    let mut _484: &mut state::perp_market::PoolBalance;
    let mut _485: &mut state::perp_market::PerpMarket;
    let mut _486: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _487: isize;
    let mut _489: !;
    let mut _490: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _492: ();
    let mut _493: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _494: std::result::Result<(), error::ErrorCode>;
    let mut _495: u128;
    let mut _496: &state::spot_market::SpotBalanceType;
    let _497: &state::spot_market::SpotBalanceType;
    let _498: state::spot_market::SpotBalanceType;
    let mut _499: &mut state::spot_market::SpotMarket;
    let mut _500: &mut state::spot_market::SpotMarket;
    let mut _501: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _502: &mut dyn state::spot_market::SpotBalance;
    let mut _503: &mut state::perp_market::PoolBalance;
    let mut _504: &mut state::perp_market::PoolBalance;
    let mut _505: &mut state::perp_market::PerpMarket;
    let mut _506: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _507: isize;
    let mut _509: !;
    let mut _510: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _512: ();
    let mut _513: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _514: std::result::Result<(), error::ErrorCode>;
    let mut _515: u128;
    let mut _516: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _517: std::result::Result<u128, error::ErrorCode>;
    let mut _518: u128;
    let mut _519: u128;
    let mut _520: isize;
    let mut _522: !;
    let mut _523: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _525: &state::spot_market::SpotBalanceType;
    let _526: &state::spot_market::SpotBalanceType;
    let _527: state::spot_market::SpotBalanceType;
    let mut _528: &mut state::spot_market::SpotMarket;
    let mut _529: &mut state::spot_market::SpotMarket;
    let mut _530: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _531: isize;
    let mut _533: !;
    let mut _534: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _536: i64;
    let mut _537: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _538: std::result::Result<i64, error::ErrorCode>;
    let mut _539: &state::spot_market::SpotMarket;
    let _540: &state::spot_market::SpotMarket;
    let mut _541: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _542: isize;
    let mut _544: !;
    let mut _545: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _547: state::perp_market::MarketStatus;
    let mut _548: &mut state::perp_market::PerpMarket;
    let mut _549: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _550: ();
    let mut _567: &mut instructions::admin::SettleExpiredMarketPoolsToRevenuePool<'_>;
    let mut _568: &mut instructions::admin::SettleExpiredMarketPoolsToRevenuePool<'_>;
    let mut _569: &mut instructions::admin::SettleExpiredMarketPoolsToRevenuePool<'_>;
    let mut _570: &mut instructions::admin::SettleExpiredMarketPoolsToRevenuePool<'_>;
    let mut _571: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _572: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _573: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _574: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _596: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _597: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _598: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _12;
        let _24: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
        scope 10 {
            debug spot_market => _24;
            let _37: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 15 {
                debug state => _37;
                let _44: std::string::String;
                let _65: std::string::String;
                let _80: anchor_lang::prelude::Clock;
                let _84: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                let _87: anchor_lang::prelude::Clock;
                let mut _565: &[&str; 1];
                let mut _566: &[&str; 1];
                scope 16 {
                    debug res => _44;
                }
                scope 17 {
                    debug res => _65;
                }
                scope 18 {
                    debug clock => _80;
                    let _88: i64;
                    scope 23 {
                        debug now => _88;
                        let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _101: ();
                        let _110: error::ErrorCode;
                        let _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _138: ();
                        let _149: error::ErrorCode;
                        let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _177: ();
                        let _194: error::ErrorCode;
                        let _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _250: ();
                        let _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _266: i128;
                        let _268: error::ErrorCode;
                        let _293: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _296: ();
                        let _305: error::ErrorCode;
                        let _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _333: ();
                        let _334: i64;
                        let _351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _354: i64;
                        let _356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _359: i64;
                        let _361: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _364: i64;
                        let _371: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _374: i64;
                        let mut _563: &state::perp_market::MarketStatus;
                        scope 24 {
                            debug residual => _98;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug val => _101;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug error_code => _110;
                            let _117: std::string::String;
                            let mut _564: &[&str; 2];
                            scope 29 {
                                debug res => _117;
                            }
                        }
                        scope 30 {
                            debug residual => _135;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _138;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug error_code => _149;
                            let _156: std::string::String;
                            let mut _562: &[&str; 2];
                            scope 35 {
                                debug res => _156;
                            }
                        }
                        scope 36 {
                            debug residual => _174;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug val => _177;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug error_code => _194;
                            let _201: std::string::String;
                            let _220: std::string::String;
                            let mut _560: &[&str; 3];
                            let mut _561: &[&str; 2];
                            scope 41 {
                                debug res => _201;
                            }
                            scope 42 {
                                debug res => _220;
                            }
                        }
                        scope 43 {
                            debug residual => _247;
                            scope 44 {
                            }
                        }
                        scope 45 {
                            debug val => _250;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug residual => _263;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug val => _266;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug error_code => _268;
                            let _275: std::string::String;
                            let mut _559: &[&str; 2];
                            scope 52 {
                                debug res => _275;
                            }
                        }
                        scope 53 {
                            debug residual => _293;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug val => _296;
                            scope 56 {
                            }
                        }
                        scope 57 {
                            debug error_code => _305;
                            let _312: std::string::String;
                            let mut _558: &[&str; 2];
                            scope 58 {
                                debug res => _312;
                            }
                        }
                        scope 59 {
                            debug residual => _330;
                            scope 60 {
                            }
                        }
                        scope 61 {
                            debug val => _333;
                            scope 62 {
                            }
                        }
                        scope 63 {
                            debug escrow_period_before_transfer => _334;
                            let _388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _391: i64;
                            let _393: error::ErrorCode;
                            let _434: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _437: ();
                            let _438: u128;
                            let _451: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _454: u128;
                            let mut _555: &state::spot_market::SpotBalanceType;
                            scope 80 {
                                debug residual => _388;
                                scope 81 {
                                }
                            }
                            scope 82 {
                                debug val => _391;
                                scope 83 {
                                }
                            }
                            scope 84 {
                                debug error_code => _393;
                                let _400: std::string::String;
                                let _419: std::string::String;
                                let mut _556: &[&str; 2];
                                let mut _557: &[&str; 2];
                                scope 85 {
                                    debug res => _400;
                                }
                                scope 86 {
                                    debug res => _419;
                                }
                            }
                            scope 87 {
                                debug residual => _434;
                                scope 88 {
                                }
                            }
                            scope 89 {
                                debug val => _437;
                                scope 90 {
                                }
                            }
                            scope 91 {
                                debug fee_pool_token_amount => _438;
                                let _455: u128;
                                let _468: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _471: u128;
                                let mut _554: &state::spot_market::SpotBalanceType;
                                scope 96 {
                                    debug pnl_pool_token_amount => _455;
                                    let _488: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _491: ();
                                    let _508: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _511: ();
                                    let _521: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _524: u128;
                                    let _532: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _535: ();
                                    let _543: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _546: i64;
                                    let mut _551: &state::spot_market::SpotBalanceType;
                                    let mut _552: &state::spot_market::SpotBalanceType;
                                    let mut _553: &state::spot_market::SpotBalanceType;
                                    scope 101 {
                                        debug residual => _488;
                                        scope 102 {
                                        }
                                    }
                                    scope 103 {
                                        debug val => _491;
                                        scope 104 {
                                        }
                                    }
                                    scope 105 {
                                        debug residual => _508;
                                        scope 106 {
                                        }
                                    }
                                    scope 107 {
                                        debug val => _511;
                                        scope 108 {
                                        }
                                    }
                                    scope 109 {
                                        debug residual => _521;
                                        scope 110 {
                                        }
                                    }
                                    scope 111 {
                                        debug val => _524;
                                        scope 112 {
                                        }
                                    }
                                    scope 113 {
                                        debug residual => _532;
                                        scope 114 {
                                        }
                                    }
                                    scope 115 {
                                        debug val => _535;
                                        scope 116 {
                                        }
                                    }
                                    scope 117 {
                                        debug residual => _543;
                                        scope 118 {
                                        }
                                    }
                                    scope 119 {
                                        debug val => _546;
                                        scope 120 {
                                        }
                                    }
                                }
                                scope 97 {
                                    debug residual => _468;
                                    scope 98 {
                                    }
                                }
                                scope 99 {
                                    debug val => _471;
                                    scope 100 {
                                    }
                                }
                            }
                            scope 92 {
                                debug residual => _451;
                                scope 93 {
                                }
                            }
                            scope 94 {
                                debug val => _454;
                                scope 95 {
                                }
                            }
                        }
                        scope 64 {
                            debug residual => _351;
                            scope 65 {
                            }
                        }
                        scope 66 {
                            debug val => _354;
                            scope 67 {
                            }
                        }
                        scope 68 {
                            debug residual => _356;
                            scope 69 {
                            }
                        }
                        scope 70 {
                            debug val => _359;
                            scope 71 {
                            }
                        }
                        scope 72 {
                            debug residual => _361;
                            scope 73 {
                            }
                        }
                        scope 74 {
                            debug val => _364;
                            scope 75 {
                            }
                        }
                        scope 76 {
                            debug residual => _371;
                            scope 77 {
                            }
                        }
                        scope 78 {
                            debug val => _374;
                            scope 79 {
                            }
                        }
                    }
                }
                scope 19 {
                    debug residual => _84;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug val => _87;
                    scope 22 {
                    }
                }
            }
        }
        scope 11 {
            debug residual => _33;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _36;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _20;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _23;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _567 = deref_copy (_1.1: &mut instructions::admin::SettleExpiredMarketPoolsToRevenuePool<'_>);
        _6 = &((*_567).3: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _5 = &(*_6);
        _4 = constraints::perp_market_valid(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb267];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _575 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _568 = deref_copy (_1.1: &mut instructions::admin::SettleExpiredMarketPoolsToRevenuePool<'_>);
        _17 = &((*_568).3: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _16 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb271];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _589 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb254;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        _18 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _15 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _16, move _18) -> [return: bb8, unwind: bb267];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _15) -> [return: bb9, unwind: bb267];
    }

    bb9: {
        StorageDead(_15);
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_23);
        _23 = move ((_14 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _13 = move _23;
        StorageDead(_23);
        _12 = &mut _13;
        _579 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _569 = deref_copy (_1.1: &mut instructions::admin::SettleExpiredMarketPoolsToRevenuePool<'_>);
        _30 = &((*_569).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _29 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _30) -> [return: bb13, unwind: bb266];
    }

    bb11: {
        StorageLive(_20);
        _20 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb12, unwind: bb270];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _577 = discriminant(_14);
        StorageDead(_14);
        goto -> bb253;
    }

    bb13: {
        StorageDead(_30);
        StorageLive(_31);
        _31 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _28 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _29, move _31) -> [return: bb14, unwind: bb266];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        _27 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _28) -> [return: bb15, unwind: bb266];
    }

    bb15: {
        StorageDead(_28);
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_36);
        _36 = move ((_27 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _26 = move _36;
        StorageDead(_36);
        _25 = &mut _26;
        _24 = &mut (*_25);
        _583 = discriminant(_27);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_37);
        _570 = deref_copy (_1.1: &mut instructions::admin::SettleExpiredMarketPoolsToRevenuePool<'_>);
        _37 = &((*_570).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _566 = const _;
        _48 = &(*_566);
        _47 = &(*_48);
        _46 = move _47 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &(*_12);
        _57 = <RefMut<'_, PerpMarket> as Deref>::deref(move _58) -> [return: bb19, unwind: bb265];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb18, unwind: bb269];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        _581 = discriminant(_27);
        StorageDead(_27);
        StorageDead(_25);
        goto -> bb252;
    }

    bb19: {
        StorageDead(_58);
        _56 = &((*_57).21: u16);
        _55 = &(*_56);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _55) -> [return: bb20, unwind: bb265];
    }

    bb20: {
        StorageDead(_55);
        _53 = [move _54];
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = move _51 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_51);
        _45 = Arguments::<'_>::new_v1(move _46, move _50) -> [return: bb21, unwind: bb265];
    }

    bb21: {
        StorageDead(_50);
        StorageDead(_46);
        _44 = format(move _45) -> [return: bb22, unwind: bb265];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        _43 = move _44;
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = <String as Deref>::deref(move _41) -> [return: bb23, unwind: bb264];
    }

    bb23: {
        _39 = &(*_40);
        StorageDead(_41);
        _38 = solana_program::log::sol_log(move _39) -> [return: bb24, unwind: bb264];
    }

    bb24: {
        StorageDead(_39);
        drop(_43) -> [return: bb25, unwind: bb265];
    }

    bb25: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _565 = const _;
        _69 = &(*_565);
        _68 = &(*_69);
        _67 = move _68 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &(*_24);
        _78 = <RefMut<'_, SpotMarket> as Deref>::deref(move _79) -> [return: bb26, unwind: bb265];
    }

    bb26: {
        StorageDead(_79);
        _77 = &((*_78).42: u16);
        _76 = &(*_77);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _76) -> [return: bb27, unwind: bb265];
    }

    bb27: {
        StorageDead(_76);
        _74 = [move _75];
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = move _72 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_72);
        _66 = Arguments::<'_>::new_v1(move _67, move _71) -> [return: bb28, unwind: bb265];
    }

    bb28: {
        StorageDead(_71);
        StorageDead(_67);
        _65 = format(move _66) -> [return: bb29, unwind: bb265];
    }

    bb29: {
        StorageDead(_66);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_69);
        _64 = move _65;
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = <String as Deref>::deref(move _62) -> [return: bb30, unwind: bb263];
    }

    bb30: {
        _60 = &(*_61);
        StorageDead(_62);
        _59 = solana_program::log::sol_log(move _60) -> [return: bb31, unwind: bb263];
    }

    bb31: {
        StorageDead(_60);
        drop(_64) -> [return: bb32, unwind: bb265];
    }

    bb32: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb33, unwind: bb265];
    }

    bb33: {
        _81 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _82) -> [return: bb34, unwind: bb265];
    }

    bb34: {
        StorageDead(_82);
        _83 = discriminant(_81);
        switchInt(move _83) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_87);
        _87 = move ((_81 as Continue).0: anchor_lang::prelude::Clock);
        _80 = move _87;
        StorageDead(_87);
        _585 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_88);
        _88 = (_80.4: i64);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &mut (*_24);
        _93 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _94) -> [return: bb38, unwind: bb265];
    }

    bb36: {
        StorageLive(_84);
        _84 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_86);
        _86 = move _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _86) -> [return: bb37, unwind: bb268];
    }

    bb37: {
        StorageDead(_86);
        StorageDead(_84);
        _587 = discriminant(_81);
        StorageDead(_81);
        goto -> bb251;
    }

    bb38: {
        _92 = &mut (*_93);
        StorageDead(_94);
        StorageLive(_95);
        _95 = Option::<&OraclePriceData>::None;
        StorageLive(_96);
        _96 = _88;
        _91 = controller::spot_balance::update_spot_market_cumulative_interest(move _92, move _95, move _96) -> [return: bb39, unwind: bb265];
    }

    bb39: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_92);
        _90 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _91) -> [return: bb40, unwind: bb265];
    }

    bb40: {
        StorageDead(_91);
        _97 = discriminant(_90);
        switchInt(move _97) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_101);
        _101 = ((_90 as Continue).0: ());
        _89 = _101;
        StorageDead(_101);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &(*_24);
        _107 = <RefMut<'_, SpotMarket> as Deref>::deref(move _108) -> [return: bb44, unwind: bb265];
    }

    bb42: {
        StorageLive(_98);
        _98 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb43, unwind: bb265];
    }

    bb43: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb250;
    }

    bb44: {
        StorageDead(_108);
        _106 = ((*_107).42: u16);
        _105 = Eq(move _106, const _);
        switchInt(move _105) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_109);
        _109 = ();
        _104 = std::result::Result::<(), error::ErrorCode>::Ok(move _109);
        StorageDead(_109);
        goto -> bb54;
    }

    bb46: {
        StorageDead(_107);
        StorageDead(_106);
        StorageLive(_110);
        _110 = error::ErrorCode::DefaultError;
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _564 = const _;
        _121 = &(*_564);
        _120 = &(*_121);
        _119 = move _120 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_110;
        _128 = &(*_129);
        _127 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _128) -> [return: bb47, unwind: bb265];
    }

    bb47: {
        StorageDead(_128);
        _126 = [move _127];
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = move _124 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_124);
        _118 = Arguments::<'_>::new_v1(move _119, move _123) -> [return: bb48, unwind: bb265];
    }

    bb48: {
        StorageDead(_123);
        StorageDead(_119);
        _117 = format(move _118) -> [return: bb49, unwind: bb265];
    }

    bb49: {
        StorageDead(_118);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_121);
        _116 = move _117;
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = <String as Deref>::deref(move _114) -> [return: bb50, unwind: bb262];
    }

    bb50: {
        _112 = &(*_113);
        StorageDead(_114);
        _111 = solana_program::log::sol_log(move _112) -> [return: bb51, unwind: bb262];
    }

    bb51: {
        StorageDead(_112);
        drop(_116) -> [return: bb52, unwind: bb265];
    }

    bb52: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = const "spot_market must be perp market's quote asset";
        _131 = &(*_132);
        _130 = solana_program::log::sol_log(move _131) -> [return: bb53, unwind: bb265];
    }

    bb53: {
        StorageDead(_131);
        StorageDead(_132);
        StorageDead(_130);
        StorageLive(_133);
        _133 = _110;
        _104 = std::result::Result::<(), error::ErrorCode>::Err(move _133);
        StorageDead(_133);
        StorageDead(_110);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_105);
        _103 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _104) -> [return: bb55, unwind: bb265];
    }

    bb55: {
        StorageDead(_104);
        _134 = discriminant(_103);
        switchInt(move _134) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_138);
        _138 = ((_103 as Continue).0: ());
        _102 = _138;
        StorageDead(_138);
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_12);
        _144 = <RefMut<'_, PerpMarket> as Deref>::deref(move _145) -> [return: bb59, unwind: bb265];
    }

    bb57: {
        StorageLive(_135);
        _135 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_137);
        _137 = _135;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _137) -> [return: bb58, unwind: bb265];
    }

    bb58: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_103);
        StorageDead(_102);
        goto -> bb250;
    }

    bb59: {
        StorageDead(_145);
        _143 = &((*_144).22: state::perp_market::MarketStatus);
        StorageLive(_146);
        _563 = const _;
        _146 = &(*_563);
        _142 = <state::perp_market::MarketStatus as PartialEq>::eq(move _143, move _146) -> [return: bb60, unwind: bb265];
    }

    bb60: {
        switchInt(move _142) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_148);
        _148 = ();
        _141 = std::result::Result::<(), error::ErrorCode>::Ok(move _148);
        StorageDead(_148);
        goto -> bb70;
    }

    bb62: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_149);
        _149 = error::ErrorCode::DefaultError;
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _562 = const _;
        _160 = &(*_562);
        _159 = &(*_160);
        _158 = move _159 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_149;
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _167) -> [return: bb63, unwind: bb265];
    }

    bb63: {
        StorageDead(_167);
        _165 = [move _166];
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = move _163 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_163);
        _157 = Arguments::<'_>::new_v1(move _158, move _162) -> [return: bb64, unwind: bb265];
    }

    bb64: {
        StorageDead(_162);
        StorageDead(_158);
        _156 = format(move _157) -> [return: bb65, unwind: bb265];
    }

    bb65: {
        StorageDead(_157);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_160);
        _155 = move _156;
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = <String as Deref>::deref(move _153) -> [return: bb66, unwind: bb261];
    }

    bb66: {
        _151 = &(*_152);
        StorageDead(_153);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb67, unwind: bb261];
    }

    bb67: {
        StorageDead(_151);
        drop(_155) -> [return: bb68, unwind: bb265];
    }

    bb68: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = const "Market must in Settlement";
        _170 = &(*_171);
        _169 = solana_program::log::sol_log(move _170) -> [return: bb69, unwind: bb265];
    }

    bb69: {
        StorageDead(_170);
        StorageDead(_171);
        StorageDead(_169);
        StorageLive(_172);
        _172 = _149;
        _141 = std::result::Result::<(), error::ErrorCode>::Err(move _172);
        StorageDead(_172);
        StorageDead(_149);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_142);
        _140 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _141) -> [return: bb71, unwind: bb265];
    }

    bb71: {
        StorageDead(_141);
        _173 = discriminant(_140);
        switchInt(move _173) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_177);
        _177 = ((_140 as Continue).0: ());
        _139 = _177;
        StorageDead(_177);
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &(*_12);
        _183 = <RefMut<'_, PerpMarket> as Deref>::deref(move _184) -> [return: bb75, unwind: bb265];
    }

    bb73: {
        StorageLive(_174);
        _174 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb74, unwind: bb265];
    }

    bb74: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb250;
    }

    bb75: {
        StorageDead(_184);
        _182 = (((*_183).1: state::perp_market::AMM).13: i128);
        _181 = Eq(move _182, const 0_i128);
        switchInt(move _181) -> [0: bb83, otherwise: bb76];
    }

    bb76: {
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &(*_12);
        _187 = <RefMut<'_, PerpMarket> as Deref>::deref(move _188) -> [return: bb77, unwind: bb265];
    }

    bb77: {
        StorageDead(_188);
        _186 = (((*_187).1: state::perp_market::AMM).14: i128);
        _185 = Eq(move _186, const 0_i128);
        switchInt(move _185) -> [0: bb82, otherwise: bb78];
    }

    bb78: {
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &(*_12);
        _191 = <RefMut<'_, PerpMarket> as Deref>::deref(move _192) -> [return: bb79, unwind: bb265];
    }

    bb79: {
        StorageDead(_192);
        _190 = ((*_191).19: u32);
        _189 = Eq(move _190, const 0_u32);
        switchInt(move _189) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_193);
        _193 = ();
        _180 = std::result::Result::<(), error::ErrorCode>::Ok(move _193);
        StorageDead(_193);
        goto -> bb102;
    }

    bb81: {
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb84;
    }

    bb82: {
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb84;
    }

    bb83: {
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb84;
    }

    bb84: {
        StorageLive(_194);
        _194 = error::ErrorCode::DefaultError;
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _561 = const _;
        _205 = &(*_561);
        _204 = &(*_205);
        _203 = move _204 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_204);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_194;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _212) -> [return: bb85, unwind: bb265];
    }

    bb85: {
        StorageDead(_212);
        _210 = [move _211];
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = move _208 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_208);
        _202 = Arguments::<'_>::new_v1(move _203, move _207) -> [return: bb86, unwind: bb265];
    }

    bb86: {
        StorageDead(_207);
        StorageDead(_203);
        _201 = format(move _202) -> [return: bb87, unwind: bb265];
    }

    bb87: {
        StorageDead(_202);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_205);
        _200 = move _201;
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = <String as Deref>::deref(move _198) -> [return: bb88, unwind: bb260];
    }

    bb88: {
        _196 = &(*_197);
        StorageDead(_198);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb89, unwind: bb260];
    }

    bb89: {
        StorageDead(_196);
        drop(_200) -> [return: bb90, unwind: bb265];
    }

    bb90: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _560 = const _;
        _224 = &(*_560);
        _223 = &(*_224);
        _222 = move _223 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_223);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &(*_12);
        _233 = <RefMut<'_, PerpMarket> as Deref>::deref(move _234) -> [return: bb91, unwind: bb265];
    }

    bb91: {
        StorageDead(_234);
        _232 = &(((*_233).1: state::perp_market::AMM).13: i128);
        _231 = &(*_232);
        _230 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _231) -> [return: bb92, unwind: bb265];
    }

    bb92: {
        StorageDead(_231);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &(*_12);
        _238 = <RefMut<'_, PerpMarket> as Deref>::deref(move _239) -> [return: bb93, unwind: bb265];
    }

    bb93: {
        StorageDead(_239);
        _237 = &(((*_238).1: state::perp_market::AMM).14: i128);
        _236 = &(*_237);
        _235 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _236) -> [return: bb94, unwind: bb265];
    }

    bb94: {
        StorageDead(_236);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &(*_12);
        _243 = <RefMut<'_, PerpMarket> as Deref>::deref(move _244) -> [return: bb95, unwind: bb265];
    }

    bb95: {
        StorageDead(_244);
        _242 = &((*_243).19: u32);
        _241 = &(*_242);
        _240 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _241) -> [return: bb96, unwind: bb265];
    }

    bb96: {
        StorageDead(_241);
        _229 = [move _230, move _235, move _240];
        StorageDead(_240);
        StorageDead(_235);
        StorageDead(_230);
        _228 = &_229;
        _227 = &(*_228);
        _226 = move _227 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_227);
        _221 = Arguments::<'_>::new_v1(move _222, move _226) -> [return: bb97, unwind: bb265];
    }

    bb97: {
        StorageDead(_226);
        StorageDead(_222);
        _220 = format(move _221) -> [return: bb98, unwind: bb265];
    }

    bb98: {
        StorageDead(_221);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_224);
        _219 = move _220;
        StorageDead(_220);
        _218 = &_219;
        _217 = &(*_218);
        _216 = <String as Deref>::deref(move _217) -> [return: bb99, unwind: bb259];
    }

    bb99: {
        _215 = &(*_216);
        StorageDead(_217);
        _214 = solana_program::log::sol_log(move _215) -> [return: bb100, unwind: bb259];
    }

    bb100: {
        StorageDead(_215);
        drop(_219) -> [return: bb101, unwind: bb265];
    }

    bb101: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_214);
        StorageLive(_245);
        _245 = _194;
        _180 = std::result::Result::<(), error::ErrorCode>::Err(move _245);
        StorageDead(_245);
        StorageDead(_194);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_189);
        StorageDead(_185);
        StorageDead(_181);
        _179 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _180) -> [return: bb103, unwind: bb265];
    }

    bb103: {
        StorageDead(_180);
        _246 = discriminant(_179);
        switchInt(move _246) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_250);
        _250 = ((_179 as Continue).0: ());
        _178 = _250;
        StorageDead(_250);
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &(*_12);
        _260 = <RefMut<'_, PerpMarket> as Deref>::deref(move _261) -> [return: bb107, unwind: bb265];
    }

    bb105: {
        StorageLive(_247);
        _247 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_249);
        _249 = _247;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _249) -> [return: bb106, unwind: bb265];
    }

    bb106: {
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb250;
    }

    bb107: {
        StorageDead(_261);
        _259 = &((*_260).1: state::perp_market::AMM);
        _258 = &(*_259);
        _257 = calculate_net_user_cost_basis(move _258) -> [return: bb108, unwind: bb265];
    }

    bb108: {
        StorageDead(_258);
        _256 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _257) -> [return: bb109, unwind: bb265];
    }

    bb109: {
        StorageDead(_257);
        _262 = discriminant(_256);
        switchInt(move _262) -> [0: bb110, 1: bb111, otherwise: bb4];
    }

    bb110: {
        StorageLive(_266);
        _266 = ((_256 as Continue).0: i128);
        _255 = _266;
        StorageDead(_266);
        _254 = Eq(move _255, const 0_i128);
        switchInt(move _254) -> [0: bb114, otherwise: bb113];
    }

    bb111: {
        StorageLive(_263);
        _263 = ((_256 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_265);
        _265 = _263;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _265) -> [return: bb112, unwind: bb265];
    }

    bb112: {
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb249;
    }

    bb113: {
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_256);
        StorageDead(_255);
        StorageLive(_267);
        _267 = ();
        _253 = std::result::Result::<(), error::ErrorCode>::Ok(move _267);
        StorageDead(_267);
        goto -> bb122;
    }

    bb114: {
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_256);
        StorageDead(_255);
        StorageLive(_268);
        _268 = error::ErrorCode::DefaultError;
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _559 = const _;
        _279 = &(*_559);
        _278 = &(*_279);
        _277 = move _278 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_278);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_268;
        _286 = &(*_287);
        _285 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _286) -> [return: bb115, unwind: bb265];
    }

    bb115: {
        StorageDead(_286);
        _284 = [move _285];
        StorageDead(_285);
        _283 = &_284;
        _282 = &(*_283);
        _281 = move _282 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_282);
        _276 = Arguments::<'_>::new_v1(move _277, move _281) -> [return: bb116, unwind: bb265];
    }

    bb116: {
        StorageDead(_281);
        StorageDead(_277);
        _275 = format(move _276) -> [return: bb117, unwind: bb265];
    }

    bb117: {
        StorageDead(_276);
        StorageDead(_287);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_279);
        _274 = move _275;
        StorageDead(_275);
        _273 = &_274;
        _272 = &(*_273);
        _271 = <String as Deref>::deref(move _272) -> [return: bb118, unwind: bb258];
    }

    bb118: {
        _270 = &(*_271);
        StorageDead(_272);
        _269 = solana_program::log::sol_log(move _270) -> [return: bb119, unwind: bb258];
    }

    bb119: {
        StorageDead(_270);
        drop(_274) -> [return: bb120, unwind: bb265];
    }

    bb120: {
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_269);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        _290 = const "outstanding quote_asset_amounts must be balanced";
        _289 = &(*_290);
        _288 = solana_program::log::sol_log(move _289) -> [return: bb121, unwind: bb265];
    }

    bb121: {
        StorageDead(_289);
        StorageDead(_290);
        StorageDead(_288);
        StorageLive(_291);
        _291 = _268;
        _253 = std::result::Result::<(), error::ErrorCode>::Err(move _291);
        StorageDead(_291);
        StorageDead(_268);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_254);
        _252 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _253) -> [return: bb123, unwind: bb265];
    }

    bb123: {
        StorageDead(_253);
        _292 = discriminant(_252);
        switchInt(move _292) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_296);
        _296 = ((_252 as Continue).0: ());
        _251 = _296;
        StorageDead(_296);
        StorageDead(_252);
        StorageDead(_251);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _571 = deref_copy (*_37);
        _595 = (((_571.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _303 = &(*_595);
        _302 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _303) -> [return: bb127, unwind: bb265];
    }

    bb125: {
        StorageLive(_293);
        _293 = ((_252 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_295);
        _295 = _293;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _295) -> [return: bb126, unwind: bb265];
    }

    bb126: {
        StorageDead(_295);
        StorageDead(_293);
        goto -> bb249;
    }

    bb127: {
        StorageDead(_303);
        _301 = ((*_302).12: u16);
        _300 = Ne(move _301, const 0_u16);
        switchInt(move _300) -> [0: bb129, otherwise: bb128];
    }

    bb128: {
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_304);
        _304 = ();
        _299 = std::result::Result::<(), error::ErrorCode>::Ok(move _304);
        StorageDead(_304);
        goto -> bb137;
    }

    bb129: {
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_305);
        _305 = error::ErrorCode::DefaultError;
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _558 = const _;
        _316 = &(*_558);
        _315 = &(*_316);
        _314 = move _315 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_315);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &_305;
        _323 = &(*_324);
        _322 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _323) -> [return: bb130, unwind: bb265];
    }

    bb130: {
        StorageDead(_323);
        _321 = [move _322];
        StorageDead(_322);
        _320 = &_321;
        _319 = &(*_320);
        _318 = move _319 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_319);
        _313 = Arguments::<'_>::new_v1(move _314, move _318) -> [return: bb131, unwind: bb265];
    }

    bb131: {
        StorageDead(_318);
        StorageDead(_314);
        _312 = format(move _313) -> [return: bb132, unwind: bb265];
    }

    bb132: {
        StorageDead(_313);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_316);
        _311 = move _312;
        StorageDead(_312);
        _310 = &_311;
        _309 = &(*_310);
        _308 = <String as Deref>::deref(move _309) -> [return: bb133, unwind: bb257];
    }

    bb133: {
        _307 = &(*_308);
        StorageDead(_309);
        _306 = solana_program::log::sol_log(move _307) -> [return: bb134, unwind: bb257];
    }

    bb134: {
        StorageDead(_307);
        drop(_311) -> [return: bb135, unwind: bb265];
    }

    bb135: {
        StorageDead(_311);
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_306);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _327 = const "invalid state.settlement_duration (is 0)";
        _326 = &(*_327);
        _325 = solana_program::log::sol_log(move _326) -> [return: bb136, unwind: bb265];
    }

    bb136: {
        StorageDead(_326);
        StorageDead(_327);
        StorageDead(_325);
        StorageLive(_328);
        _328 = _305;
        _299 = std::result::Result::<(), error::ErrorCode>::Err(move _328);
        StorageDead(_328);
        StorageDead(_305);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_300);
        _298 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _299) -> [return: bb138, unwind: bb265];
    }

    bb138: {
        StorageDead(_299);
        _329 = discriminant(_298);
        switchInt(move _329) -> [0: bb139, 1: bb140, otherwise: bb4];
    }

    bb139: {
        StorageLive(_333);
        _333 = ((_298 as Continue).0: ());
        _297 = _333;
        StorageDead(_333);
        StorageDead(_298);
        StorageDead(_297);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _572 = deref_copy (*_37);
        _596 = (((_572.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _338 = &(*_596);
        _337 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _338) -> [return: bb142, unwind: bb265];
    }

    bb140: {
        StorageLive(_330);
        _330 = ((_298 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_332);
        _332 = _330;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _332) -> [return: bb141, unwind: bb265];
    }

    bb141: {
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_298);
        StorageDead(_297);
        goto -> bb250;
    }

    bb142: {
        StorageDead(_338);
        _336 = ((*_337).12: u16);
        _335 = Gt(move _336, const 1_u16);
        switchInt(move _335) -> [0: bb160, otherwise: bb143];
    }

    bb143: {
        StorageDead(_337);
        StorageDead(_336);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _573 = deref_copy (*_37);
        _597 = (((_573.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _349 = &(*_597);
        _348 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _349) -> [return: bb144, unwind: bb265];
    }

    bb144: {
        StorageDead(_349);
        _347 = ((*_348).12: u16);
        _346 = <u16 as Cast>::cast::<i64>(move _347) -> [return: bb145, unwind: bb265];
    }

    bb145: {
        StorageDead(_347);
        _345 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _346) -> [return: bb146, unwind: bb265];
    }

    bb146: {
        StorageDead(_346);
        _350 = discriminant(_345);
        switchInt(move _350) -> [0: bb147, 1: bb148, otherwise: bb4];
    }

    bb147: {
        StorageLive(_354);
        _354 = ((_345 as Continue).0: i64);
        _344 = _354;
        StorageDead(_354);
        _343 = <i64 as SafeMath>::safe_add(const _, move _344) -> [return: bb150, unwind: bb265];
    }

    bb148: {
        StorageLive(_351);
        _351 = ((_345 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_353);
        _353 = _351;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _353) -> [return: bb149, unwind: bb265];
    }

    bb149: {
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_344);
        StorageDead(_343);
        goto -> bb245;
    }

    bb150: {
        StorageDead(_344);
        _342 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _343) -> [return: bb151, unwind: bb265];
    }

    bb151: {
        StorageDead(_343);
        _355 = discriminant(_342);
        switchInt(move _355) -> [0: bb152, 1: bb153, otherwise: bb4];
    }

    bb152: {
        StorageLive(_359);
        _359 = ((_342 as Continue).0: i64);
        _341 = _359;
        StorageDead(_359);
        _340 = <i64 as SafeMath>::safe_sub(move _341, const 1_i64) -> [return: bb155, unwind: bb265];
    }

    bb153: {
        StorageLive(_356);
        _356 = ((_342 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_358);
        _358 = _356;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _358) -> [return: bb154, unwind: bb265];
    }

    bb154: {
        StorageDead(_358);
        StorageDead(_356);
        goto -> bb245;
    }

    bb155: {
        StorageDead(_341);
        _339 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _340) -> [return: bb156, unwind: bb265];
    }

    bb156: {
        StorageDead(_340);
        _360 = discriminant(_339);
        switchInt(move _360) -> [0: bb157, 1: bb158, otherwise: bb4];
    }

    bb157: {
        StorageLive(_364);
        _364 = ((_339 as Continue).0: i64);
        _334 = _364;
        StorageDead(_364);
        StorageDead(_348);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_339);
        goto -> bb167;
    }

    bb158: {
        StorageLive(_361);
        _361 = ((_339 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_363);
        _363 = _361;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _363) -> [return: bb159, unwind: bb265];
    }

    bb159: {
        StorageDead(_363);
        StorageDead(_361);
        goto -> bb246;
    }

    bb160: {
        StorageDead(_337);
        StorageDead(_336);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _574 = deref_copy (*_37);
        _598 = (((_574.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _369 = &(*_598);
        _368 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _369) -> [return: bb161, unwind: bb265];
    }

    bb161: {
        StorageDead(_369);
        _367 = ((*_368).12: u16);
        _366 = <u16 as Cast>::cast::<i64>(move _367) -> [return: bb162, unwind: bb265];
    }

    bb162: {
        StorageDead(_367);
        _365 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _366) -> [return: bb163, unwind: bb265];
    }

    bb163: {
        StorageDead(_366);
        _370 = discriminant(_365);
        switchInt(move _370) -> [0: bb164, 1: bb165, otherwise: bb4];
    }

    bb164: {
        StorageLive(_374);
        _374 = ((_365 as Continue).0: i64);
        _334 = _374;
        StorageDead(_374);
        StorageDead(_368);
        StorageDead(_365);
        goto -> bb167;
    }

    bb165: {
        StorageLive(_371);
        _371 = ((_365 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_373);
        _373 = _371;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _373) -> [return: bb166, unwind: bb265];
    }

    bb166: {
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_368);
        StorageDead(_365);
        goto -> bb247;
    }

    bb167: {
        StorageDead(_335);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _379 = _88;
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        _385 = &(*_12);
        _384 = <RefMut<'_, PerpMarket> as Deref>::deref(move _385) -> [return: bb168, unwind: bb265];
    }

    bb168: {
        StorageDead(_385);
        _383 = ((*_384).6: i64);
        StorageLive(_386);
        _386 = _334;
        _382 = <i64 as SafeMath>::safe_add(move _383, move _386) -> [return: bb169, unwind: bb265];
    }

    bb169: {
        StorageDead(_386);
        StorageDead(_383);
        _381 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _382) -> [return: bb170, unwind: bb265];
    }

    bb170: {
        StorageDead(_382);
        _387 = discriminant(_381);
        switchInt(move _387) -> [0: bb171, 1: bb172, otherwise: bb4];
    }

    bb171: {
        StorageLive(_391);
        _391 = ((_381 as Continue).0: i64);
        _380 = _391;
        StorageDead(_391);
        _378 = Gt(move _379, move _380);
        switchInt(move _378) -> [0: bb175, otherwise: bb174];
    }

    bb172: {
        StorageLive(_388);
        _388 = ((_381 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_390);
        _390 = _388;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _390) -> [return: bb173, unwind: bb265];
    }

    bb173: {
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_384);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_377);
        goto -> bb244;
    }

    bb174: {
        StorageDead(_384);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_392);
        _392 = ();
        _377 = std::result::Result::<(), error::ErrorCode>::Ok(move _392);
        StorageDead(_392);
        goto -> bb188;
    }

    bb175: {
        StorageDead(_384);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_393);
        _393 = error::ErrorCode::DefaultError;
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _557 = const _;
        _404 = &(*_557);
        _403 = &(*_404);
        _402 = move _403 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_403);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = &_393;
        _411 = &(*_412);
        _410 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _411) -> [return: bb176, unwind: bb265];
    }

    bb176: {
        StorageDead(_411);
        _409 = [move _410];
        StorageDead(_410);
        _408 = &_409;
        _407 = &(*_408);
        _406 = move _407 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_407);
        _401 = Arguments::<'_>::new_v1(move _402, move _406) -> [return: bb177, unwind: bb265];
    }

    bb177: {
        StorageDead(_406);
        StorageDead(_402);
        _400 = format(move _401) -> [return: bb178, unwind: bb265];
    }

    bb178: {
        StorageDead(_401);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_408);
        StorageDead(_404);
        _399 = move _400;
        StorageDead(_400);
        _398 = &_399;
        _397 = &(*_398);
        _396 = <String as Deref>::deref(move _397) -> [return: bb179, unwind: bb256];
    }

    bb179: {
        _395 = &(*_396);
        StorageDead(_397);
        _394 = solana_program::log::sol_log(move _395) -> [return: bb180, unwind: bb256];
    }

    bb180: {
        StorageDead(_395);
        drop(_399) -> [return: bb181, unwind: bb265];
    }

    bb181: {
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_396);
        StorageDead(_394);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _556 = const _;
        _423 = &(*_556);
        _422 = &(*_423);
        _421 = move _422 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_422);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &_334;
        _430 = &(*_431);
        _429 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _430) -> [return: bb182, unwind: bb265];
    }

    bb182: {
        StorageDead(_430);
        _428 = [move _429];
        StorageDead(_429);
        _427 = &_428;
        _426 = &(*_427);
        _425 = move _426 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_426);
        _420 = Arguments::<'_>::new_v1(move _421, move _425) -> [return: bb183, unwind: bb265];
    }

    bb183: {
        StorageDead(_425);
        StorageDead(_421);
        _419 = format(move _420) -> [return: bb184, unwind: bb265];
    }

    bb184: {
        StorageDead(_420);
        StorageDead(_431);
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_423);
        _418 = move _419;
        StorageDead(_419);
        _417 = &_418;
        _416 = &(*_417);
        _415 = <String as Deref>::deref(move _416) -> [return: bb185, unwind: bb255];
    }

    bb185: {
        _414 = &(*_415);
        StorageDead(_416);
        _413 = solana_program::log::sol_log(move _414) -> [return: bb186, unwind: bb255];
    }

    bb186: {
        StorageDead(_414);
        drop(_418) -> [return: bb187, unwind: bb265];
    }

    bb187: {
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_413);
        StorageLive(_432);
        _432 = _393;
        _377 = std::result::Result::<(), error::ErrorCode>::Err(move _432);
        StorageDead(_432);
        StorageDead(_393);
        goto -> bb188;
    }

    bb188: {
        StorageDead(_378);
        _376 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _377) -> [return: bb189, unwind: bb265];
    }

    bb189: {
        StorageDead(_377);
        _433 = discriminant(_376);
        switchInt(move _433) -> [0: bb190, 1: bb191, otherwise: bb4];
    }

    bb190: {
        StorageLive(_437);
        _437 = ((_376 as Continue).0: ());
        _375 = _437;
        StorageDead(_437);
        StorageDead(_376);
        StorageDead(_375);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &(*_12);
        _442 = <RefMut<'_, PerpMarket> as Deref>::deref(move _443) -> [return: bb193, unwind: bb265];
    }

    bb191: {
        StorageLive(_434);
        _434 = ((_376 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_436);
        _436 = _434;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _436) -> [return: bb192, unwind: bb265];
    }

    bb192: {
        StorageDead(_436);
        StorageDead(_434);
        goto -> bb244;
    }

    bb193: {
        StorageDead(_443);
        _441 = ((((*_442).1: state::perp_market::AMM).4: state::perp_market::PoolBalance).0: u128);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = &(*_24);
        _445 = <RefMut<'_, SpotMarket> as Deref>::deref(move _446) -> [return: bb194, unwind: bb265];
    }

    bb194: {
        _444 = &(*_445);
        StorageDead(_446);
        StorageLive(_447);
        StorageLive(_448);
        _555 = const _;
        _448 = &(*_555);
        _447 = &(*_448);
        _440 = get_token_amount(move _441, move _444, move _447) -> [return: bb195, unwind: bb265];
    }

    bb195: {
        StorageDead(_447);
        StorageDead(_444);
        StorageDead(_441);
        _439 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _440) -> [return: bb196, unwind: bb265];
    }

    bb196: {
        StorageDead(_440);
        _450 = discriminant(_439);
        switchInt(move _450) -> [0: bb197, 1: bb198, otherwise: bb4];
    }

    bb197: {
        StorageLive(_454);
        _454 = ((_439 as Continue).0: u128);
        _438 = _454;
        StorageDead(_454);
        StorageDead(_448);
        StorageDead(_445);
        StorageDead(_442);
        StorageDead(_439);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = &(*_12);
        _459 = <RefMut<'_, PerpMarket> as Deref>::deref(move _460) -> [return: bb200, unwind: bb265];
    }

    bb198: {
        StorageLive(_451);
        _451 = ((_439 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_453);
        _453 = _451;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _453) -> [return: bb199, unwind: bb265];
    }

    bb199: {
        StorageDead(_453);
        StorageDead(_451);
        StorageDead(_448);
        StorageDead(_445);
        StorageDead(_442);
        StorageDead(_439);
        goto -> bb243;
    }

    bb200: {
        StorageDead(_460);
        _458 = (((*_459).2: state::perp_market::PoolBalance).0: u128);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        _463 = &(*_24);
        _462 = <RefMut<'_, SpotMarket> as Deref>::deref(move _463) -> [return: bb201, unwind: bb265];
    }

    bb201: {
        _461 = &(*_462);
        StorageDead(_463);
        StorageLive(_464);
        StorageLive(_465);
        _554 = const _;
        _465 = &(*_554);
        _464 = &(*_465);
        _457 = get_token_amount(move _458, move _461, move _464) -> [return: bb202, unwind: bb265];
    }

    bb202: {
        StorageDead(_464);
        StorageDead(_461);
        StorageDead(_458);
        _456 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _457) -> [return: bb203, unwind: bb265];
    }

    bb203: {
        StorageDead(_457);
        _467 = discriminant(_456);
        switchInt(move _467) -> [0: bb204, 1: bb205, otherwise: bb4];
    }

    bb204: {
        StorageLive(_471);
        _471 = ((_456 as Continue).0: u128);
        _455 = _471;
        StorageDead(_471);
        StorageDead(_465);
        StorageDead(_462);
        StorageDead(_459);
        StorageDead(_456);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = _438;
        StorageLive(_476);
        StorageLive(_477);
        _553 = const _;
        _477 = &(*_553);
        _476 = &(*_477);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        _481 = &mut (*_24);
        _480 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _481) -> [return: bb207, unwind: bb265];
    }

    bb205: {
        StorageLive(_468);
        _468 = ((_456 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_470);
        _470 = _468;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _470) -> [return: bb206, unwind: bb265];
    }

    bb206: {
        StorageDead(_470);
        StorageDead(_468);
        StorageDead(_465);
        StorageDead(_462);
        StorageDead(_459);
        StorageDead(_456);
        goto -> bb242;
    }

    bb207: {
        _479 = &mut (*_480);
        StorageDead(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &mut (*_12);
        _485 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _486) -> [return: bb208, unwind: bb265];
    }

    bb208: {
        StorageDead(_486);
        _484 = &mut (((*_485).1: state::perp_market::AMM).4: state::perp_market::PoolBalance);
        _483 = &mut (*_484);
        _482 = move _483 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_483);
        _474 = update_spot_balances(move _475, move _476, move _479, move _482, const false) -> [return: bb209, unwind: bb265];
    }

    bb209: {
        StorageDead(_482);
        StorageDead(_479);
        StorageDead(_476);
        StorageDead(_475);
        _473 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _474) -> [return: bb210, unwind: bb265];
    }

    bb210: {
        StorageDead(_474);
        _487 = discriminant(_473);
        switchInt(move _487) -> [0: bb211, 1: bb212, otherwise: bb4];
    }

    bb211: {
        StorageLive(_491);
        _491 = ((_473 as Continue).0: ());
        _472 = _491;
        StorageDead(_491);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_473);
        StorageDead(_472);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _495 = _455;
        StorageLive(_496);
        StorageLive(_497);
        _552 = const _;
        _497 = &(*_552);
        _496 = &(*_497);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        _501 = &mut (*_24);
        _500 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _501) -> [return: bb214, unwind: bb265];
    }

    bb212: {
        StorageLive(_488);
        _488 = ((_473 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_490);
        _490 = _488;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _490) -> [return: bb213, unwind: bb265];
    }

    bb213: {
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_473);
        StorageDead(_472);
        goto -> bb242;
    }

    bb214: {
        _499 = &mut (*_500);
        StorageDead(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        _506 = &mut (*_12);
        _505 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _506) -> [return: bb215, unwind: bb265];
    }

    bb215: {
        StorageDead(_506);
        _504 = &mut ((*_505).2: state::perp_market::PoolBalance);
        _503 = &mut (*_504);
        _502 = move _503 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_503);
        _494 = update_spot_balances(move _495, move _496, move _499, move _502, const false) -> [return: bb216, unwind: bb265];
    }

    bb216: {
        StorageDead(_502);
        StorageDead(_499);
        StorageDead(_496);
        StorageDead(_495);
        _493 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _494) -> [return: bb217, unwind: bb265];
    }

    bb217: {
        StorageDead(_494);
        _507 = discriminant(_493);
        switchInt(move _507) -> [0: bb218, 1: bb219, otherwise: bb4];
    }

    bb218: {
        StorageLive(_511);
        _511 = ((_493 as Continue).0: ());
        _492 = _511;
        StorageDead(_511);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_500);
        StorageDead(_497);
        StorageDead(_493);
        StorageDead(_492);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        _518 = _455;
        StorageLive(_519);
        _519 = _438;
        _517 = <u128 as SafeMath>::safe_add(move _518, move _519) -> [return: bb221, unwind: bb265];
    }

    bb219: {
        StorageLive(_508);
        _508 = ((_493 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_510);
        _510 = _508;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _510) -> [return: bb220, unwind: bb265];
    }

    bb220: {
        StorageDead(_510);
        StorageDead(_508);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_500);
        StorageDead(_497);
        StorageDead(_493);
        StorageDead(_492);
        goto -> bb242;
    }

    bb221: {
        StorageDead(_519);
        StorageDead(_518);
        _516 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _517) -> [return: bb222, unwind: bb265];
    }

    bb222: {
        StorageDead(_517);
        _520 = discriminant(_516);
        switchInt(move _520) -> [0: bb223, 1: bb224, otherwise: bb4];
    }

    bb223: {
        StorageLive(_524);
        _524 = ((_516 as Continue).0: u128);
        _515 = _524;
        StorageDead(_524);
        StorageLive(_525);
        StorageLive(_526);
        _551 = const _;
        _526 = &(*_551);
        _525 = &(*_526);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = &mut (*_24);
        _529 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _530) -> [return: bb226, unwind: bb265];
    }

    bb224: {
        StorageLive(_521);
        _521 = ((_516 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_523);
        _523 = _521;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _523) -> [return: bb225, unwind: bb265];
    }

    bb225: {
        StorageDead(_523);
        StorageDead(_521);
        StorageDead(_515);
        StorageDead(_514);
        goto -> bb241;
    }

    bb226: {
        _528 = &mut (*_529);
        StorageDead(_530);
        _514 = update_revenue_pool_balances(move _515, move _525, move _528) -> [return: bb227, unwind: bb265];
    }

    bb227: {
        StorageDead(_528);
        StorageDead(_525);
        StorageDead(_515);
        _513 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _514) -> [return: bb228, unwind: bb265];
    }

    bb228: {
        StorageDead(_514);
        _531 = discriminant(_513);
        switchInt(move _531) -> [0: bb229, 1: bb230, otherwise: bb4];
    }

    bb229: {
        StorageLive(_535);
        _535 = ((_513 as Continue).0: ());
        _512 = _535;
        StorageDead(_535);
        StorageDead(_529);
        StorageDead(_526);
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_512);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = &(*_24);
        _540 = <RefMut<'_, SpotMarket> as Deref>::deref(move _541) -> [return: bb232, unwind: bb265];
    }

    bb230: {
        StorageLive(_532);
        _532 = ((_513 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_534);
        _534 = _532;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _534) -> [return: bb231, unwind: bb265];
    }

    bb231: {
        StorageDead(_534);
        StorageDead(_532);
        StorageDead(_529);
        StorageDead(_526);
        goto -> bb241;
    }

    bb232: {
        _539 = &(*_540);
        StorageDead(_541);
        _538 = validate_spot_balances(move _539) -> [return: bb233, unwind: bb265];
    }

    bb233: {
        StorageDead(_539);
        _537 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _538) -> [return: bb234, unwind: bb265];
    }

    bb234: {
        StorageDead(_538);
        _542 = discriminant(_537);
        switchInt(move _542) -> [0: bb235, 1: bb236, otherwise: bb4];
    }

    bb235: {
        StorageLive(_546);
        _546 = ((_537 as Continue).0: i64);
        _536 = _546;
        StorageDead(_546);
        StorageDead(_540);
        StorageDead(_537);
        StorageDead(_536);
        StorageLive(_547);
        _547 = state::perp_market::MarketStatus::Delisted;
        StorageLive(_548);
        StorageLive(_549);
        _549 = &mut (*_12);
        _548 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _549) -> [return: bb238, unwind: bb265];
    }

    bb236: {
        StorageLive(_543);
        _543 = ((_537 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_545);
        _545 = _543;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _545) -> [return: bb237, unwind: bb265];
    }

    bb237: {
        StorageDead(_545);
        StorageDead(_543);
        StorageDead(_540);
        StorageDead(_537);
        StorageDead(_536);
        goto -> bb242;
    }

    bb238: {
        StorageDead(_549);
        ((*_548).22: state::perp_market::MarketStatus) = move _547;
        StorageDead(_547);
        StorageDead(_548);
        StorageLive(_550);
        _550 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _550);
        StorageDead(_550);
        StorageDead(_455);
        StorageDead(_438);
        StorageDead(_334);
        StorageDead(_88);
        StorageDead(_80);
        StorageDead(_37);
        drop(_26) -> [return: bb239, unwind: bb266];
    }

    bb239: {
        StorageDead(_26);
        StorageDead(_24);
        drop(_13) -> [return: bb240, unwind: bb267];
    }

    bb240: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb254;
    }

    bb241: {
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_512);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_455);
        goto -> bb243;
    }

    bb243: {
        StorageDead(_438);
        goto -> bb248;
    }

    bb244: {
        StorageDead(_376);
        StorageDead(_375);
        goto -> bb248;
    }

    bb245: {
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb246;
    }

    bb246: {
        StorageDead(_348);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_339);
        goto -> bb247;
    }

    bb247: {
        StorageDead(_335);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_334);
        goto -> bb250;
    }

    bb249: {
        StorageDead(_252);
        StorageDead(_251);
        goto -> bb250;
    }

    bb250: {
        StorageDead(_88);
        goto -> bb251;
    }

    bb251: {
        StorageDead(_80);
        StorageDead(_37);
        drop(_26) -> [return: bb252, unwind: bb266];
    }

    bb252: {
        StorageDead(_26);
        StorageDead(_24);
        drop(_13) -> [return: bb253, unwind: bb267];
    }

    bb253: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb254;
    }

    bb254: {
        return;
    }

    bb255 (cleanup): {
        drop(_418) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        drop(_399) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb257 (cleanup): {
        drop(_311) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb258 (cleanup): {
        drop(_274) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        drop(_219) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb260 (cleanup): {
        drop(_200) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        drop(_155) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        drop(_116) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb263 (cleanup): {
        drop(_64) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        drop(_43) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        drop(_26) -> [return: bb266, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        drop(_13) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        resume;
    }

    bb268 (cleanup): {
        _591 = discriminant(_81);
        goto -> bb265;
    }

    bb269 (cleanup): {
        _592 = discriminant(_27);
        goto -> bb266;
    }

    bb270 (cleanup): {
        _593 = discriminant(_14);
        goto -> bb267;
    }

    bb271 (cleanup): {
        _594 = discriminant(_3);
        goto -> bb267;
    }
}
