// MIR for `update_position_and_market` after PreCodegen

fn update_position_and_market(_1: &mut PerpPosition, _2: &mut PerpMarket, _3: &PositionDelta) -> std::result::Result<i64, error::ErrorCode> {
    debug position => _1;
    debug market => _2;
    debug delta => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i64;
    let mut _7: !;
    let _8: ();
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _10: std::result::Result<(), error::ErrorCode>;
    let mut _11: &mut state::user::PerpPosition;
    let mut _12: &mut state::perp_market::PerpMarket;
    let mut _13: i64;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: ();
    let mut _19: i64;
    let _20: math::position::PositionUpdateType;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::position::PositionUpdateType>;
    let mut _22: std::result::Result<math::position::PositionUpdateType, error::ErrorCode>;
    let mut _23: &state::user::PerpPosition;
    let mut _24: &controller::position::PositionDelta;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: math::position::PositionUpdateType;
    let mut _32: (i64, i64);
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _34: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _35: &state::user::PerpPosition;
    let mut _36: &controller::position::PositionDelta;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: (i64, i64, i64);
    let mut _46: isize;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _49: std::result::Result<i64, error::ErrorCode>;
    let mut _50: i64;
    let mut _51: i64;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _59: std::result::Result<i64, error::ErrorCode>;
    let mut _60: i64;
    let mut _61: i64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: i64;
    let mut _68: i64;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _71: std::result::Result<i128, error::ErrorCode>;
    let mut _72: &state::user::PerpPosition;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _80: std::result::Result<i128, error::ErrorCode>;
    let mut _81: &controller::position::PositionDelta;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _89: std::result::Result<i64, error::ErrorCode>;
    let mut _90: i64;
    let mut _91: i64;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _93: std::result::Result<i64, error::ErrorCode>;
    let mut _94: i128;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _96: std::result::Result<i128, error::ErrorCode>;
    let mut _97: i128;
    let mut _98: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _99: std::result::Result<i128, error::ErrorCode>;
    let mut _100: i128;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _102: std::result::Result<i128, error::ErrorCode>;
    let mut _103: i64;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: i128;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: i128;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _133: std::result::Result<i64, error::ErrorCode>;
    let mut _134: i64;
    let mut _135: i64;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _137: std::result::Result<i64, error::ErrorCode>;
    let mut _138: i128;
    let mut _139: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _140: std::result::Result<i128, error::ErrorCode>;
    let mut _141: i128;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _143: std::result::Result<i128, error::ErrorCode>;
    let mut _144: i128;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _146: std::result::Result<i128, error::ErrorCode>;
    let mut _147: i64;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: i128;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _159: i128;
    let mut _160: isize;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _177: std::result::Result<i64, error::ErrorCode>;
    let mut _178: i64;
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _180: std::result::Result<i64, error::ErrorCode>;
    let mut _181: i64;
    let mut _182: i64;
    let mut _183: isize;
    let mut _185: !;
    let mut _186: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _188: i64;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _194: i64;
    let mut _195: i64;
    let mut _196: i64;
    let mut _198: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _199: std::result::Result<i128, error::ErrorCode>;
    let mut _200: &state::user::PerpPosition;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _207: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _208: std::result::Result<i128, error::ErrorCode>;
    let mut _209: &controller::position::PositionDelta;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _216: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _217: std::result::Result<i64, error::ErrorCode>;
    let mut _218: i64;
    let mut _219: i64;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _221: std::result::Result<i64, error::ErrorCode>;
    let mut _222: i128;
    let mut _223: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _224: std::result::Result<i128, error::ErrorCode>;
    let mut _225: i128;
    let mut _226: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _227: std::result::Result<i128, error::ErrorCode>;
    let mut _228: i128;
    let mut _229: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _230: std::result::Result<i128, error::ErrorCode>;
    let mut _231: i64;
    let mut _232: isize;
    let mut _234: !;
    let mut _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _237: i128;
    let mut _238: isize;
    let mut _240: !;
    let mut _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _243: i128;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _254: isize;
    let mut _256: !;
    let mut _257: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _260: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _261: std::result::Result<i64, error::ErrorCode>;
    let mut _262: i64;
    let mut _263: i64;
    let mut _264: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _265: std::result::Result<i64, error::ErrorCode>;
    let mut _266: i64;
    let mut _267: i64;
    let mut _268: isize;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _273: isize;
    let mut _275: !;
    let mut _276: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _278: i64;
    let mut _279: i64;
    let mut _280: i64;
    let _281: ();
    let mut _282: isize;
    let _283: ();
    let mut _284: bool;
    let mut _285: i64;
    let mut _286: bool;
    let mut _287: i64;
    let mut _288: u32;
    let mut _289: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _290: std::result::Result<u32, error::ErrorCode>;
    let mut _291: u32;
    let mut _292: isize;
    let mut _294: !;
    let mut _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _297: u32;
    let mut _298: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _299: std::result::Result<u32, error::ErrorCode>;
    let mut _300: u32;
    let mut _301: isize;
    let mut _303: !;
    let mut _304: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _306: isize;
    let _307: ();
    let mut _308: bool;
    let mut _309: i64;
    let mut _310: bool;
    let mut _311: i64;
    let mut _312: u32;
    let mut _313: u32;
    let mut _314: u32;
    let mut _315: u32;
    let mut _316: i128;
    let mut _317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _318: std::result::Result<i128, error::ErrorCode>;
    let mut _319: i128;
    let mut _320: i128;
    let mut _321: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _322: std::result::Result<i128, error::ErrorCode>;
    let mut _323: i64;
    let mut _324: isize;
    let mut _326: !;
    let mut _327: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _329: isize;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _334: ();
    let mut _335: isize;
    let mut _336: bool;
    let mut _337: i64;
    let mut _338: i128;
    let mut _339: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _340: std::result::Result<i128, error::ErrorCode>;
    let mut _341: i128;
    let mut _342: i128;
    let mut _343: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _344: std::result::Result<i128, error::ErrorCode>;
    let mut _345: i64;
    let mut _346: isize;
    let mut _348: !;
    let mut _349: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _351: isize;
    let mut _353: !;
    let mut _354: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _356: i128;
    let mut _357: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _358: std::result::Result<i128, error::ErrorCode>;
    let mut _359: i128;
    let mut _360: i128;
    let mut _361: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _362: std::result::Result<i128, error::ErrorCode>;
    let mut _363: i64;
    let mut _364: isize;
    let mut _366: !;
    let mut _367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _369: isize;
    let mut _371: !;
    let mut _372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _374: i128;
    let mut _375: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _376: std::result::Result<i128, error::ErrorCode>;
    let mut _377: i128;
    let mut _378: i128;
    let mut _379: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _380: std::result::Result<i128, error::ErrorCode>;
    let mut _381: i64;
    let mut _382: isize;
    let mut _384: !;
    let mut _385: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _387: isize;
    let mut _389: !;
    let mut _390: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _392: i128;
    let mut _393: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _394: std::result::Result<i128, error::ErrorCode>;
    let mut _395: i128;
    let mut _396: i128;
    let mut _397: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _398: std::result::Result<i128, error::ErrorCode>;
    let mut _399: i64;
    let mut _400: isize;
    let mut _402: !;
    let mut _403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _405: isize;
    let mut _407: !;
    let mut _408: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _410: i128;
    let mut _411: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _412: std::result::Result<i128, error::ErrorCode>;
    let mut _413: i128;
    let mut _414: i128;
    let mut _415: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _416: std::result::Result<i128, error::ErrorCode>;
    let mut _417: i64;
    let mut _418: isize;
    let mut _420: !;
    let mut _421: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _423: isize;
    let mut _425: !;
    let mut _426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _428: i128;
    let mut _429: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _430: std::result::Result<i128, error::ErrorCode>;
    let mut _431: i128;
    let mut _432: i128;
    let mut _433: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _434: std::result::Result<i128, error::ErrorCode>;
    let mut _435: i64;
    let mut _436: isize;
    let mut _438: !;
    let mut _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _441: isize;
    let mut _443: !;
    let mut _444: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _446: bool;
    let mut _447: i64;
    let mut _448: i128;
    let mut _449: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _450: std::result::Result<i128, error::ErrorCode>;
    let mut _451: i128;
    let mut _452: i128;
    let mut _453: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _454: std::result::Result<i128, error::ErrorCode>;
    let mut _455: i64;
    let mut _456: isize;
    let mut _458: !;
    let mut _459: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _461: isize;
    let mut _463: !;
    let mut _464: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _466: i128;
    let mut _467: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _468: std::result::Result<i128, error::ErrorCode>;
    let mut _469: i128;
    let mut _470: i128;
    let mut _471: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _472: std::result::Result<i128, error::ErrorCode>;
    let mut _473: i64;
    let mut _474: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _475: std::result::Result<i64, error::ErrorCode>;
    let mut _476: i64;
    let mut _477: i64;
    let mut _478: isize;
    let mut _480: !;
    let mut _481: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _483: isize;
    let mut _485: !;
    let mut _486: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _488: isize;
    let mut _490: !;
    let mut _491: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _493: i128;
    let mut _494: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _495: std::result::Result<i128, error::ErrorCode>;
    let mut _496: i128;
    let mut _497: i128;
    let mut _498: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _499: std::result::Result<i128, error::ErrorCode>;
    let mut _500: i64;
    let mut _501: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _502: std::result::Result<i64, error::ErrorCode>;
    let mut _503: i64;
    let mut _504: i64;
    let mut _505: isize;
    let mut _507: !;
    let mut _508: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _510: isize;
    let mut _512: !;
    let mut _513: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _515: isize;
    let mut _517: !;
    let mut _518: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _520: i128;
    let mut _521: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _522: std::result::Result<i128, error::ErrorCode>;
    let mut _523: i128;
    let mut _524: i128;
    let mut _525: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _526: std::result::Result<i128, error::ErrorCode>;
    let mut _527: i64;
    let mut _528: isize;
    let mut _530: !;
    let mut _531: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _533: isize;
    let mut _535: !;
    let mut _536: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _538: i128;
    let mut _539: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _540: std::result::Result<i128, error::ErrorCode>;
    let mut _541: i128;
    let mut _542: i128;
    let mut _543: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _544: std::result::Result<i128, error::ErrorCode>;
    let mut _545: i64;
    let mut _546: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _547: std::result::Result<i64, error::ErrorCode>;
    let mut _548: i64;
    let mut _549: i64;
    let mut _550: isize;
    let mut _552: !;
    let mut _553: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _555: isize;
    let mut _557: !;
    let mut _558: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _560: isize;
    let mut _562: !;
    let mut _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _565: i128;
    let mut _566: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _567: std::result::Result<i128, error::ErrorCode>;
    let mut _568: i128;
    let mut _569: i128;
    let mut _570: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _571: std::result::Result<i128, error::ErrorCode>;
    let mut _572: i64;
    let mut _573: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _574: std::result::Result<i64, error::ErrorCode>;
    let mut _575: i64;
    let mut _576: i64;
    let mut _577: isize;
    let mut _579: !;
    let mut _580: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _582: isize;
    let mut _584: !;
    let mut _585: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _587: isize;
    let mut _589: !;
    let mut _590: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _592: bool;
    let mut _593: i64;
    let mut _594: i128;
    let mut _595: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _596: std::result::Result<i128, error::ErrorCode>;
    let mut _597: i128;
    let mut _598: i128;
    let mut _599: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _600: std::result::Result<i128, error::ErrorCode>;
    let mut _601: i64;
    let mut _602: isize;
    let mut _604: !;
    let mut _605: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _607: isize;
    let mut _609: !;
    let mut _610: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _612: i128;
    let mut _613: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _614: std::result::Result<i128, error::ErrorCode>;
    let mut _615: i128;
    let mut _616: i128;
    let mut _617: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _618: std::result::Result<i128, error::ErrorCode>;
    let mut _619: i64;
    let mut _620: isize;
    let mut _622: !;
    let mut _623: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _625: isize;
    let mut _627: !;
    let mut _628: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _630: i128;
    let mut _631: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _632: std::result::Result<i128, error::ErrorCode>;
    let mut _633: i128;
    let mut _634: i128;
    let mut _635: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _636: std::result::Result<i128, error::ErrorCode>;
    let mut _637: i64;
    let mut _638: isize;
    let mut _640: !;
    let mut _641: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _643: isize;
    let mut _645: !;
    let mut _646: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _648: i128;
    let mut _649: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _650: std::result::Result<i128, error::ErrorCode>;
    let mut _651: i128;
    let mut _652: i128;
    let mut _653: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _654: std::result::Result<i128, error::ErrorCode>;
    let mut _655: i64;
    let mut _656: isize;
    let mut _658: !;
    let mut _659: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _661: isize;
    let mut _663: !;
    let mut _664: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _666: i128;
    let mut _667: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _668: std::result::Result<i128, error::ErrorCode>;
    let mut _669: i128;
    let mut _670: i128;
    let mut _671: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _672: std::result::Result<i128, error::ErrorCode>;
    let mut _673: i64;
    let mut _674: isize;
    let mut _676: !;
    let mut _677: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _679: isize;
    let mut _681: !;
    let mut _682: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _684: i128;
    let mut _685: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _686: std::result::Result<i128, error::ErrorCode>;
    let mut _687: i128;
    let mut _688: i128;
    let mut _689: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _690: std::result::Result<i128, error::ErrorCode>;
    let mut _691: i64;
    let mut _692: isize;
    let mut _694: !;
    let mut _695: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _697: isize;
    let mut _699: !;
    let mut _700: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _702: i128;
    let mut _703: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _704: std::result::Result<i128, error::ErrorCode>;
    let mut _705: i128;
    let mut _706: i128;
    let mut _707: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _708: std::result::Result<i128, error::ErrorCode>;
    let mut _709: i64;
    let mut _710: isize;
    let mut _712: !;
    let mut _713: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _715: isize;
    let mut _717: !;
    let mut _718: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _720: i128;
    let mut _721: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _722: std::result::Result<i128, error::ErrorCode>;
    let mut _723: i128;
    let mut _724: i128;
    let mut _725: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _726: std::result::Result<i128, error::ErrorCode>;
    let mut _727: i64;
    let mut _728: isize;
    let mut _730: !;
    let mut _731: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _733: isize;
    let mut _735: !;
    let mut _736: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _738: i128;
    let mut _739: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _740: std::result::Result<i128, error::ErrorCode>;
    let mut _741: i128;
    let mut _742: i128;
    let mut _743: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _744: std::result::Result<i128, error::ErrorCode>;
    let mut _745: i64;
    let mut _746: isize;
    let mut _748: !;
    let mut _749: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _751: isize;
    let mut _753: !;
    let mut _754: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _756: i128;
    let mut _757: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _758: std::result::Result<i128, error::ErrorCode>;
    let mut _759: i128;
    let mut _760: i128;
    let mut _761: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _762: std::result::Result<i128, error::ErrorCode>;
    let mut _763: i64;
    let mut _764: isize;
    let mut _766: !;
    let mut _767: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _769: isize;
    let mut _771: !;
    let mut _772: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _774: i128;
    let mut _775: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _776: std::result::Result<i128, error::ErrorCode>;
    let mut _777: i128;
    let mut _778: i128;
    let mut _779: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _780: std::result::Result<i128, error::ErrorCode>;
    let mut _781: i64;
    let mut _782: isize;
    let mut _784: !;
    let mut _785: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _787: isize;
    let mut _789: !;
    let mut _790: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _792: i128;
    let mut _793: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _794: std::result::Result<i128, error::ErrorCode>;
    let mut _795: i128;
    let mut _796: i128;
    let mut _797: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _798: std::result::Result<i128, error::ErrorCode>;
    let mut _799: i64;
    let mut _800: isize;
    let mut _802: !;
    let mut _803: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _805: isize;
    let mut _807: !;
    let mut _808: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _810: ();
    let mut _811: controller::position::PositionDirection;
    let mut _812: &state::user::PerpPosition;
    let mut _813: isize;
    let mut _814: &controller::position::PositionDirection;
    let mut _815: bool;
    let mut _816: i64;
    let _817: ();
    let mut _818: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _819: std::result::Result<(), error::ErrorCode>;
    let mut _820: bool;
    let mut _821: i128;
    let mut _822: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _823: std::result::Result<i128, error::ErrorCode>;
    let mut _824: i64;
    let mut _825: isize;
    let mut _827: !;
    let mut _828: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _830: i128;
    let mut _831: ();
    let _833: ();
    let mut _834: &str;
    let _835: &str;
    let mut _836: &std::string::String;
    let _837: &std::string::String;
    let _838: std::string::String;
    let mut _840: std::fmt::Arguments<'_>;
    let mut _841: &[&str];
    let mut _842: &[&str; 2];
    let _843: &[&str; 2];
    let _844: [&str; 2];
    let mut _845: &[core::fmt::rt::Argument<'_>];
    let mut _846: &[core::fmt::rt::Argument<'_>; 1];
    let _847: &[core::fmt::rt::Argument<'_>; 1];
    let _848: [core::fmt::rt::Argument<'_>; 1];
    let mut _849: core::fmt::rt::Argument<'_>;
    let mut _850: &error::ErrorCode;
    let _851: &error::ErrorCode;
    let _852: ();
    let mut _853: &str;
    let _854: &str;
    let mut _855: &std::string::String;
    let _856: &std::string::String;
    let _857: std::string::String;
    let mut _859: std::fmt::Arguments<'_>;
    let mut _860: &[&str];
    let mut _861: &[&str; 2];
    let _862: &[&str; 2];
    let _863: [&str; 2];
    let mut _864: &[core::fmt::rt::Argument<'_>];
    let mut _865: &[core::fmt::rt::Argument<'_>; 2];
    let _866: &[core::fmt::rt::Argument<'_>; 2];
    let _867: [core::fmt::rt::Argument<'_>; 2];
    let mut _868: core::fmt::rt::Argument<'_>;
    let mut _869: &i128;
    let _870: &i128;
    let _871: i128;
    let mut _872: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _873: std::result::Result<i128, error::ErrorCode>;
    let mut _874: i64;
    let mut _875: isize;
    let mut _877: !;
    let mut _878: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _880: core::fmt::rt::Argument<'_>;
    let mut _881: &i128;
    let _882: &i128;
    let mut _883: error::ErrorCode;
    let mut _884: isize;
    let mut _886: !;
    let mut _887: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _889: ();
    let mut _890: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _891: std::result::Result<(), error::ErrorCode>;
    let mut _892: bool;
    let mut _893: i64;
    let mut _894: i64;
    let mut _895: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _896: std::result::Result<i64, error::ErrorCode>;
    let mut _897: i128;
    let mut _898: isize;
    let mut _900: !;
    let mut _901: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _903: ();
    let _905: ();
    let mut _906: &str;
    let _907: &str;
    let mut _908: &std::string::String;
    let _909: &std::string::String;
    let _910: std::string::String;
    let mut _912: std::fmt::Arguments<'_>;
    let mut _913: &[&str];
    let mut _914: &[&str; 2];
    let _915: &[&str; 2];
    let _916: [&str; 2];
    let mut _917: &[core::fmt::rt::Argument<'_>];
    let mut _918: &[core::fmt::rt::Argument<'_>; 1];
    let _919: &[core::fmt::rt::Argument<'_>; 1];
    let _920: [core::fmt::rt::Argument<'_>; 1];
    let mut _921: core::fmt::rt::Argument<'_>;
    let mut _922: &error::ErrorCode;
    let _923: &error::ErrorCode;
    let _924: ();
    let mut _925: &str;
    let _926: &str;
    let mut _927: &std::string::String;
    let _928: &std::string::String;
    let _929: std::string::String;
    let mut _931: std::fmt::Arguments<'_>;
    let mut _932: &[&str];
    let mut _933: &[&str; 2];
    let _934: &[&str; 2];
    let _935: [&str; 2];
    let mut _936: &[core::fmt::rt::Argument<'_>];
    let mut _937: &[core::fmt::rt::Argument<'_>; 2];
    let _938: &[core::fmt::rt::Argument<'_>; 2];
    let _939: [core::fmt::rt::Argument<'_>; 2];
    let mut _940: core::fmt::rt::Argument<'_>;
    let mut _941: &i64;
    let _942: &i64;
    let mut _943: core::fmt::rt::Argument<'_>;
    let mut _944: &i128;
    let _945: &i128;
    let mut _946: error::ErrorCode;
    let mut _947: isize;
    let mut _949: !;
    let mut _950: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _952: ();
    let mut _953: isize;
    let mut _954: bool;
    let mut _955: isize;
    let mut _956: bool;
    let mut _957: i64;
    let mut _958: i64;
    let mut _959: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _960: std::result::Result<i64, error::ErrorCode>;
    let mut _961: i128;
    let mut _962: isize;
    let mut _964: !;
    let mut _965: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _967: i64;
    let mut _968: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _969: std::result::Result<i64, error::ErrorCode>;
    let mut _970: i128;
    let mut _971: isize;
    let mut _973: !;
    let mut _974: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _976: ();
    let mut _977: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _978: std::result::Result<(), error::ErrorCode>;
    let mut _979: bool;
    let mut _980: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _981: std::result::Result<bool, error::ErrorCode>;
    let mut _982: u64;
    let mut _983: i64;
    let mut _984: u64;
    let mut _985: isize;
    let mut _987: !;
    let mut _988: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _990: ();
    let _992: ();
    let mut _993: &str;
    let _994: &str;
    let mut _995: &std::string::String;
    let _996: &std::string::String;
    let _997: std::string::String;
    let mut _999: std::fmt::Arguments<'_>;
    let mut _1000: &[&str];
    let mut _1001: &[&str; 2];
    let _1002: &[&str; 2];
    let _1003: [&str; 2];
    let mut _1004: &[core::fmt::rt::Argument<'_>];
    let mut _1005: &[core::fmt::rt::Argument<'_>; 1];
    let _1006: &[core::fmt::rt::Argument<'_>; 1];
    let _1007: [core::fmt::rt::Argument<'_>; 1];
    let mut _1008: core::fmt::rt::Argument<'_>;
    let mut _1009: &error::ErrorCode;
    let _1010: &error::ErrorCode;
    let _1011: ();
    let mut _1012: &str;
    let _1013: &str;
    let mut _1014: &std::string::String;
    let _1015: &std::string::String;
    let _1016: std::string::String;
    let mut _1018: std::fmt::Arguments<'_>;
    let mut _1019: &[&str];
    let mut _1020: &[&str; 2];
    let _1021: &[&str; 2];
    let _1022: [&str; 2];
    let mut _1023: &[core::fmt::rt::Argument<'_>];
    let mut _1024: &[core::fmt::rt::Argument<'_>; 2];
    let _1025: &[core::fmt::rt::Argument<'_>; 2];
    let _1026: [core::fmt::rt::Argument<'_>; 2];
    let mut _1027: core::fmt::rt::Argument<'_>;
    let mut _1028: &i64;
    let _1029: &i64;
    let mut _1030: core::fmt::rt::Argument<'_>;
    let mut _1031: &i64;
    let _1032: &i64;
    let mut _1033: error::ErrorCode;
    let mut _1034: isize;
    let mut _1036: !;
    let mut _1037: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1039: i64;
    let mut _1040: i64;
    let mut _1041: i64;
    let mut _1042: i64;
    let mut _1043: i64;
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug update_type => _20;
        let _30: i64;
        let _31: i64;
        let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _41: (i64, i64);
        scope 10 {
            debug new_base_asset_amount => _30;
            debug new_quote_asset_amount => _31;
            let _42: i64;
            let _43: i64;
            let _44: i64;
            let _47: i64;
            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _56: i64;
            let _69: i128;
            let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _77: i128;
            let _197: i128;
            let _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _205: i128;
            scope 15 {
                debug new_quote_entry_amount => _42;
                debug new_quote_break_even_amount => _43;
                debug pnl => _44;
                let _325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _328: i128;
                let _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _333: i128;
                let _347: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _350: i128;
                let _352: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _355: i128;
                let _365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _368: i128;
                let _370: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _373: i128;
                let _383: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _386: i128;
                let _388: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _391: i128;
                let _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _404: i128;
                let _406: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _409: i128;
                let _419: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _422: i128;
                let _424: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _427: i128;
                let _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _440: i128;
                let _442: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _445: i128;
                let _457: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _460: i128;
                let _462: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _465: i128;
                let _479: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _482: i64;
                let _484: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _487: i128;
                let _489: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _492: i128;
                let _506: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _509: i64;
                let _511: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _514: i128;
                let _516: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _519: i128;
                let _529: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _532: i128;
                let _534: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _537: i128;
                let _551: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _554: i64;
                let _556: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _559: i128;
                let _561: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _564: i128;
                let _578: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _581: i64;
                let _583: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _586: i128;
                let _588: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _591: i128;
                let _603: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _606: i128;
                let _608: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _611: i128;
                let _621: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _624: i128;
                let _626: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _629: i128;
                let _639: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _642: i128;
                let _644: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _647: i128;
                let _657: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _660: i128;
                let _662: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _665: i128;
                let _675: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _678: i128;
                let _680: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _683: i128;
                let _693: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _696: i128;
                let _698: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _701: i128;
                let _711: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _714: i128;
                let _716: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _719: i128;
                let _729: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _732: i128;
                let _734: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _737: i128;
                let _747: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _750: i128;
                let _752: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _755: i128;
                let _765: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _768: i128;
                let _770: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _773: i128;
                let _783: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _786: i128;
                let _788: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _791: i128;
                let _801: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _804: i128;
                let _806: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _809: i128;
                let _826: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _829: i128;
                let _832: error::ErrorCode;
                let _885: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _888: ();
                let _899: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _902: i64;
                let _904: error::ErrorCode;
                let _948: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _951: ();
                let _963: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _966: i64;
                let _972: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _975: i64;
                let _986: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _989: bool;
                let _991: error::ErrorCode;
                let _1035: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _1038: ();
                scope 127 {
                    let _293: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _296: u32;
                    let _302: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _305: u32;
                    scope 128 {
                        debug residual => _293;
                        scope 129 {
                        }
                    }
                    scope 130 {
                        debug val => _296;
                        scope 131 {
                        }
                    }
                    scope 132 {
                        debug residual => _302;
                        scope 133 {
                        }
                    }
                    scope 134 {
                        debug val => _305;
                        scope 135 {
                        }
                    }
                }
                scope 136 {
                }
                scope 137 {
                    debug residual => _325;
                    scope 138 {
                    }
                }
                scope 139 {
                    debug val => _328;
                    scope 140 {
                    }
                }
                scope 141 {
                    debug residual => _330;
                    scope 142 {
                    }
                }
                scope 143 {
                    debug val => _333;
                    scope 144 {
                    }
                }
                scope 145 {
                    debug residual => _347;
                    scope 146 {
                    }
                }
                scope 147 {
                    debug val => _350;
                    scope 148 {
                    }
                }
                scope 149 {
                    debug residual => _352;
                    scope 150 {
                    }
                }
                scope 151 {
                    debug val => _355;
                    scope 152 {
                    }
                }
                scope 153 {
                    debug residual => _365;
                    scope 154 {
                    }
                }
                scope 155 {
                    debug val => _368;
                    scope 156 {
                    }
                }
                scope 157 {
                    debug residual => _370;
                    scope 158 {
                    }
                }
                scope 159 {
                    debug val => _373;
                    scope 160 {
                    }
                }
                scope 161 {
                    debug residual => _383;
                    scope 162 {
                    }
                }
                scope 163 {
                    debug val => _386;
                    scope 164 {
                    }
                }
                scope 165 {
                    debug residual => _388;
                    scope 166 {
                    }
                }
                scope 167 {
                    debug val => _391;
                    scope 168 {
                    }
                }
                scope 169 {
                    debug residual => _401;
                    scope 170 {
                    }
                }
                scope 171 {
                    debug val => _404;
                    scope 172 {
                    }
                }
                scope 173 {
                    debug residual => _406;
                    scope 174 {
                    }
                }
                scope 175 {
                    debug val => _409;
                    scope 176 {
                    }
                }
                scope 177 {
                    debug residual => _419;
                    scope 178 {
                    }
                }
                scope 179 {
                    debug val => _422;
                    scope 180 {
                    }
                }
                scope 181 {
                    debug residual => _424;
                    scope 182 {
                    }
                }
                scope 183 {
                    debug val => _427;
                    scope 184 {
                    }
                }
                scope 185 {
                    debug residual => _437;
                    scope 186 {
                    }
                }
                scope 187 {
                    debug val => _440;
                    scope 188 {
                    }
                }
                scope 189 {
                    debug residual => _442;
                    scope 190 {
                    }
                }
                scope 191 {
                    debug val => _445;
                    scope 192 {
                    }
                }
                scope 193 {
                    debug residual => _457;
                    scope 194 {
                    }
                }
                scope 195 {
                    debug val => _460;
                    scope 196 {
                    }
                }
                scope 197 {
                    debug residual => _462;
                    scope 198 {
                    }
                }
                scope 199 {
                    debug val => _465;
                    scope 200 {
                    }
                }
                scope 201 {
                    debug residual => _479;
                    scope 202 {
                    }
                }
                scope 203 {
                    debug val => _482;
                    scope 204 {
                    }
                }
                scope 205 {
                    debug residual => _484;
                    scope 206 {
                    }
                }
                scope 207 {
                    debug val => _487;
                    scope 208 {
                    }
                }
                scope 209 {
                    debug residual => _489;
                    scope 210 {
                    }
                }
                scope 211 {
                    debug val => _492;
                    scope 212 {
                    }
                }
                scope 213 {
                    debug residual => _506;
                    scope 214 {
                    }
                }
                scope 215 {
                    debug val => _509;
                    scope 216 {
                    }
                }
                scope 217 {
                    debug residual => _511;
                    scope 218 {
                    }
                }
                scope 219 {
                    debug val => _514;
                    scope 220 {
                    }
                }
                scope 221 {
                    debug residual => _516;
                    scope 222 {
                    }
                }
                scope 223 {
                    debug val => _519;
                    scope 224 {
                    }
                }
                scope 225 {
                    debug residual => _529;
                    scope 226 {
                    }
                }
                scope 227 {
                    debug val => _532;
                    scope 228 {
                    }
                }
                scope 229 {
                    debug residual => _534;
                    scope 230 {
                    }
                }
                scope 231 {
                    debug val => _537;
                    scope 232 {
                    }
                }
                scope 233 {
                    debug residual => _551;
                    scope 234 {
                    }
                }
                scope 235 {
                    debug val => _554;
                    scope 236 {
                    }
                }
                scope 237 {
                    debug residual => _556;
                    scope 238 {
                    }
                }
                scope 239 {
                    debug val => _559;
                    scope 240 {
                    }
                }
                scope 241 {
                    debug residual => _561;
                    scope 242 {
                    }
                }
                scope 243 {
                    debug val => _564;
                    scope 244 {
                    }
                }
                scope 245 {
                    debug residual => _578;
                    scope 246 {
                    }
                }
                scope 247 {
                    debug val => _581;
                    scope 248 {
                    }
                }
                scope 249 {
                    debug residual => _583;
                    scope 250 {
                    }
                }
                scope 251 {
                    debug val => _586;
                    scope 252 {
                    }
                }
                scope 253 {
                    debug residual => _588;
                    scope 254 {
                    }
                }
                scope 255 {
                    debug val => _591;
                    scope 256 {
                    }
                }
                scope 257 {
                    debug residual => _603;
                    scope 258 {
                    }
                }
                scope 259 {
                    debug val => _606;
                    scope 260 {
                    }
                }
                scope 261 {
                    debug residual => _608;
                    scope 262 {
                    }
                }
                scope 263 {
                    debug val => _611;
                    scope 264 {
                    }
                }
                scope 265 {
                    debug residual => _621;
                    scope 266 {
                    }
                }
                scope 267 {
                    debug val => _624;
                    scope 268 {
                    }
                }
                scope 269 {
                    debug residual => _626;
                    scope 270 {
                    }
                }
                scope 271 {
                    debug val => _629;
                    scope 272 {
                    }
                }
                scope 273 {
                    debug residual => _639;
                    scope 274 {
                    }
                }
                scope 275 {
                    debug val => _642;
                    scope 276 {
                    }
                }
                scope 277 {
                    debug residual => _644;
                    scope 278 {
                    }
                }
                scope 279 {
                    debug val => _647;
                    scope 280 {
                    }
                }
                scope 281 {
                    debug residual => _657;
                    scope 282 {
                    }
                }
                scope 283 {
                    debug val => _660;
                    scope 284 {
                    }
                }
                scope 285 {
                    debug residual => _662;
                    scope 286 {
                    }
                }
                scope 287 {
                    debug val => _665;
                    scope 288 {
                    }
                }
                scope 289 {
                    debug residual => _675;
                    scope 290 {
                    }
                }
                scope 291 {
                    debug val => _678;
                    scope 292 {
                    }
                }
                scope 293 {
                    debug residual => _680;
                    scope 294 {
                    }
                }
                scope 295 {
                    debug val => _683;
                    scope 296 {
                    }
                }
                scope 297 {
                    debug residual => _693;
                    scope 298 {
                    }
                }
                scope 299 {
                    debug val => _696;
                    scope 300 {
                    }
                }
                scope 301 {
                    debug residual => _698;
                    scope 302 {
                    }
                }
                scope 303 {
                    debug val => _701;
                    scope 304 {
                    }
                }
                scope 305 {
                    debug residual => _711;
                    scope 306 {
                    }
                }
                scope 307 {
                    debug val => _714;
                    scope 308 {
                    }
                }
                scope 309 {
                    debug residual => _716;
                    scope 310 {
                    }
                }
                scope 311 {
                    debug val => _719;
                    scope 312 {
                    }
                }
                scope 313 {
                    debug residual => _729;
                    scope 314 {
                    }
                }
                scope 315 {
                    debug val => _732;
                    scope 316 {
                    }
                }
                scope 317 {
                    debug residual => _734;
                    scope 318 {
                    }
                }
                scope 319 {
                    debug val => _737;
                    scope 320 {
                    }
                }
                scope 321 {
                    debug residual => _747;
                    scope 322 {
                    }
                }
                scope 323 {
                    debug val => _750;
                    scope 324 {
                    }
                }
                scope 325 {
                    debug residual => _752;
                    scope 326 {
                    }
                }
                scope 327 {
                    debug val => _755;
                    scope 328 {
                    }
                }
                scope 329 {
                    debug residual => _765;
                    scope 330 {
                    }
                }
                scope 331 {
                    debug val => _768;
                    scope 332 {
                    }
                }
                scope 333 {
                    debug residual => _770;
                    scope 334 {
                    }
                }
                scope 335 {
                    debug val => _773;
                    scope 336 {
                    }
                }
                scope 337 {
                    debug residual => _783;
                    scope 338 {
                    }
                }
                scope 339 {
                    debug val => _786;
                    scope 340 {
                    }
                }
                scope 341 {
                    debug residual => _788;
                    scope 342 {
                    }
                }
                scope 343 {
                    debug val => _791;
                    scope 344 {
                    }
                }
                scope 345 {
                    debug residual => _801;
                    scope 346 {
                    }
                }
                scope 347 {
                    debug val => _804;
                    scope 348 {
                    }
                }
                scope 349 {
                    debug residual => _806;
                    scope 350 {
                    }
                }
                scope 351 {
                    debug val => _809;
                    scope 352 {
                    }
                }
                scope 353 {
                    debug residual => _826;
                    scope 354 {
                    }
                }
                scope 355 {
                    debug val => _829;
                    scope 356 {
                    }
                }
                scope 357 {
                    debug error_code => _832;
                    let _839: std::string::String;
                    let _858: std::string::String;
                    let _876: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _879: i128;
                    let mut _1048: &[&str; 2];
                    let mut _1049: &[&str; 2];
                    scope 358 {
                        debug res => _839;
                    }
                    scope 359 {
                        debug res => _858;
                    }
                    scope 360 {
                        debug residual => _876;
                        scope 361 {
                        }
                    }
                    scope 362 {
                        debug val => _879;
                        scope 363 {
                        }
                    }
                }
                scope 364 {
                    debug residual => _885;
                    scope 365 {
                    }
                }
                scope 366 {
                    debug val => _888;
                    scope 367 {
                    }
                }
                scope 368 {
                    debug residual => _899;
                    scope 369 {
                    }
                }
                scope 370 {
                    debug val => _902;
                    scope 371 {
                    }
                }
                scope 372 {
                    debug error_code => _904;
                    let _911: std::string::String;
                    let _930: std::string::String;
                    let mut _1046: &[&str; 2];
                    let mut _1047: &[&str; 2];
                    scope 373 {
                        debug res => _911;
                    }
                    scope 374 {
                        debug res => _930;
                    }
                }
                scope 375 {
                    debug residual => _948;
                    scope 376 {
                    }
                }
                scope 377 {
                    debug val => _951;
                    scope 378 {
                    }
                }
                scope 379 {
                }
                scope 380 {
                    debug residual => _963;
                    scope 381 {
                    }
                }
                scope 382 {
                    debug val => _966;
                    scope 383 {
                    }
                }
                scope 384 {
                    debug residual => _972;
                    scope 385 {
                    }
                }
                scope 386 {
                    debug val => _975;
                    scope 387 {
                    }
                }
                scope 388 {
                    debug residual => _986;
                    scope 389 {
                    }
                }
                scope 390 {
                    debug val => _989;
                    scope 391 {
                    }
                }
                scope 392 {
                    debug error_code => _991;
                    let _998: std::string::String;
                    let _1017: std::string::String;
                    let mut _1044: &[&str; 2];
                    let mut _1045: &[&str; 2];
                    scope 393 {
                        debug res => _998;
                    }
                    scope 394 {
                        debug res => _1017;
                    }
                }
                scope 395 {
                    debug residual => _1035;
                    scope 396 {
                    }
                }
                scope 397 {
                    debug val => _1038;
                    scope 398 {
                    }
                }
            }
            scope 16 {
                debug new_quote_entry_amount => _47;
                let _57: i64;
                let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _66: i64;
                scope 21 {
                    debug new_quote_break_even_amount => _57;
                }
                scope 22 {
                    debug residual => _63;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _66;
                    scope 25 {
                    }
                }
            }
            scope 17 {
                debug residual => _53;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _56;
                scope 20 {
                }
            }
            scope 26 {
                debug current_base_i128 => _69;
                let _78: i128;
                let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _86: i128;
                scope 31 {
                    debug delta_base_i128 => _78;
                    let _87: i64;
                    let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _108: i128;
                    let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _114: i128;
                    let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _120: i128;
                    let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _125: i64;
                    let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _130: i64;
                    scope 36 {
                        debug new_quote_entry_amount => _87;
                        let _131: i64;
                        let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _152: i128;
                        let _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _158: i128;
                        let _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _164: i128;
                        let _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _169: i64;
                        let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _174: i64;
                        scope 57 {
                            debug new_quote_break_even_amount => _131;
                            let _175: i64;
                            let _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _187: i64;
                            let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _193: i64;
                            scope 78 {
                                debug pnl => _175;
                            }
                            scope 79 {
                                debug residual => _184;
                                scope 80 {
                                }
                            }
                            scope 81 {
                                debug val => _187;
                                scope 82 {
                                }
                            }
                            scope 83 {
                                debug residual => _190;
                                scope 84 {
                                }
                            }
                            scope 85 {
                                debug val => _193;
                                scope 86 {
                                }
                            }
                        }
                        scope 58 {
                            debug residual => _149;
                            scope 59 {
                            }
                        }
                        scope 60 {
                            debug val => _152;
                            scope 61 {
                            }
                        }
                        scope 62 {
                            debug residual => _155;
                            scope 63 {
                            }
                        }
                        scope 64 {
                            debug val => _158;
                            scope 65 {
                            }
                        }
                        scope 66 {
                            debug residual => _161;
                            scope 67 {
                            }
                        }
                        scope 68 {
                            debug val => _164;
                            scope 69 {
                            }
                        }
                        scope 70 {
                            debug residual => _166;
                            scope 71 {
                            }
                        }
                        scope 72 {
                            debug val => _169;
                            scope 73 {
                            }
                        }
                        scope 74 {
                            debug residual => _171;
                            scope 75 {
                            }
                        }
                        scope 76 {
                            debug val => _174;
                            scope 77 {
                            }
                        }
                    }
                    scope 37 {
                        debug residual => _105;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _108;
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug residual => _111;
                        scope 42 {
                        }
                    }
                    scope 43 {
                        debug val => _114;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug residual => _117;
                        scope 46 {
                        }
                    }
                    scope 47 {
                        debug val => _120;
                        scope 48 {
                        }
                    }
                    scope 49 {
                        debug residual => _122;
                        scope 50 {
                        }
                    }
                    scope 51 {
                        debug val => _125;
                        scope 52 {
                        }
                    }
                    scope 53 {
                        debug residual => _127;
                        scope 54 {
                        }
                    }
                    scope 55 {
                        debug val => _130;
                        scope 56 {
                        }
                    }
                }
                scope 32 {
                    debug residual => _83;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug val => _86;
                    scope 35 {
                    }
                }
            }
            scope 27 {
                debug residual => _74;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _77;
                scope 30 {
                }
            }
            scope 87 {
                debug current_base_i128 => _197;
                let _206: i128;
                let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _214: i128;
                scope 92 {
                    debug delta_base_i128 => _206;
                    let _215: i64;
                    let _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _236: i128;
                    let _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _242: i128;
                    let _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _248: i128;
                    let _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _253: i64;
                    let _255: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _258: i64;
                    scope 97 {
                        debug new_quote_break_even_amount => _215;
                        let _259: i64;
                        let _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _272: i64;
                        let _274: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _277: i64;
                        scope 118 {
                            debug pnl => _259;
                        }
                        scope 119 {
                            debug residual => _269;
                            scope 120 {
                            }
                        }
                        scope 121 {
                            debug val => _272;
                            scope 122 {
                            }
                        }
                        scope 123 {
                            debug residual => _274;
                            scope 124 {
                            }
                        }
                        scope 125 {
                            debug val => _277;
                            scope 126 {
                            }
                        }
                    }
                    scope 98 {
                        debug residual => _233;
                        scope 99 {
                        }
                    }
                    scope 100 {
                        debug val => _236;
                        scope 101 {
                        }
                    }
                    scope 102 {
                        debug residual => _239;
                        scope 103 {
                        }
                    }
                    scope 104 {
                        debug val => _242;
                        scope 105 {
                        }
                    }
                    scope 106 {
                        debug residual => _245;
                        scope 107 {
                        }
                    }
                    scope 108 {
                        debug val => _248;
                        scope 109 {
                        }
                    }
                    scope 110 {
                        debug residual => _250;
                        scope 111 {
                        }
                    }
                    scope 112 {
                        debug val => _253;
                        scope 113 {
                        }
                    }
                    scope 114 {
                        debug residual => _255;
                        scope 115 {
                        }
                    }
                    scope 116 {
                        debug val => _258;
                        scope 117 {
                        }
                    }
                }
                scope 93 {
                    debug residual => _211;
                    scope 94 {
                    }
                }
                scope 95 {
                    debug val => _214;
                    scope 96 {
                    }
                }
            }
            scope 88 {
                debug residual => _202;
                scope 89 {
                }
            }
            scope 90 {
                debug val => _205;
                scope 91 {
                }
            }
        }
        scope 11 {
            debug residual => _38;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _41;
            scope 14 {
            }
        }
    }
    scope 6 {
        debug residual => _26;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _29;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_3).1: i64);
        _5 = Eq(move _6, const 0_i64);
        switchInt(move _5) -> [0: bb8, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut (*_1);
        StorageLive(_12);
        _12 = &mut (*_2);
        StorageLive(_13);
        _13 = ((*_3).0: i64);
        _10 = update_quote_asset_amount(move _11, move _12, move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _14 = discriminant(_9);
        switchInt(move _14) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_18);
        _18 = ((_9 as Continue).0: ());
        _8 = _18;
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_19);
        _19 = ((*_3).0: i64);
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _19);
        StorageDead(_19);
        goto -> bb636;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_15);
        _15 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb636;
    }

    bb8: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        StorageLive(_24);
        _24 = &(*_3);
        _22 = get_position_update_type(move _23, move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<PositionUpdateType, error::ErrorCode> as Try>::branch(move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        _25 = discriminant(_21);
        switchInt(move _25) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_29);
        _29 = ((_21 as Continue).0: math::position::PositionUpdateType);
        _20 = _29;
        StorageDead(_29);
        StorageDead(_21);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &(*_1);
        StorageLive(_36);
        _36 = &(*_3);
        _34 = get_new_position_amounts(move _35, move _36) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_26);
        _26 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        goto -> bb635;
    }

    bb14: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _34) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_34);
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_41);
        _41 = ((_33 as Continue).0: (i64, i64));
        _32 = _41;
        StorageDead(_41);
        StorageLive(_30);
        _30 = (_32.0: i64);
        StorageLive(_31);
        _31 = (_32.1: i64);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_45);
        _46 = discriminant(_20);
        switchInt(move _46) -> [0: bb20, 1: bb20, 2: bb31, 3: bb31, 4: bb19, otherwise: bb5];
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb635;
    }

    bb19: {
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &(*_1);
        _199 = PerpPosition::get_base_asset_amount_abs(move _200) -> [return: bb102, unwind continue];
    }

    bb20: {
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = ((*_1).4: i64);
        StorageLive(_51);
        _51 = ((*_3).0: i64);
        _49 = <i64 as SafeMath>::safe_add(move _50, move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_49);
        _52 = discriminant(_48);
        switchInt(move _52) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_56);
        _56 = ((_48 as Continue).0: i64);
        _47 = _56;
        StorageDead(_56);
        StorageDead(_48);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = ((*_1).3: i64);
        StorageLive(_61);
        _61 = ((*_3).0: i64);
        _59 = <i64 as SafeMath>::safe_add(move _60, move _61) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_53);
        _53 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        goto -> bb632;
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _59) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_59);
        _62 = discriminant(_58);
        switchInt(move _62) -> [0: bb28, 1: bb29, otherwise: bb5];
    }

    bb28: {
        StorageLive(_66);
        _66 = ((_58 as Continue).0: i64);
        _57 = _66;
        StorageDead(_66);
        StorageDead(_58);
        StorageLive(_67);
        _67 = _47;
        StorageLive(_68);
        _68 = _57;
        _45 = (move _67, move _68, const 0_i64);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_57);
        StorageDead(_47);
        goto -> bb147;
    }

    bb29: {
        StorageLive(_63);
        _63 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb632;
    }

    bb31: {
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &(*_1);
        _71 = PerpPosition::get_base_asset_amount_abs(move _72) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_72);
        _70 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_71);
        _73 = discriminant(_70);
        switchInt(move _73) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_77);
        _77 = ((_70 as Continue).0: i128);
        _69 = _77;
        StorageDead(_77);
        StorageDead(_70);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_3);
        _80 = PositionDelta::get_delta_base_abs(move _81) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_74);
        _74 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_70);
        goto -> bb631;
    }

    bb37: {
        StorageDead(_81);
        _79 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _80) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_80);
        _82 = discriminant(_79);
        switchInt(move _82) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_86);
        _86 = ((_79 as Continue).0: i128);
        _78 = _86;
        StorageDead(_86);
        StorageDead(_79);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = ((*_1).4: i64);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = ((*_1).4: i64);
        _102 = <i64 as Cast>::cast::<i128>(move _103) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_83);
        _83 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_79);
        goto -> bb630;
    }

    bb42: {
        StorageDead(_103);
        _101 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _102) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_102);
        _104 = discriminant(_101);
        switchInt(move _104) -> [0: bb44, 1: bb45, otherwise: bb5];
    }

    bb44: {
        StorageLive(_108);
        _108 = ((_101 as Continue).0: i128);
        _100 = _108;
        StorageDead(_108);
        StorageLive(_109);
        _109 = _78;
        _99 = <i128 as SafeMath>::safe_mul(move _100, move _109) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_105);
        _105 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb625;
    }

    bb47: {
        StorageDead(_109);
        StorageDead(_100);
        _98 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _99) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_99);
        _110 = discriminant(_98);
        switchInt(move _110) -> [0: bb49, 1: bb50, otherwise: bb5];
    }

    bb49: {
        StorageLive(_114);
        _114 = ((_98 as Continue).0: i128);
        _97 = _114;
        StorageDead(_114);
        StorageLive(_115);
        _115 = _69;
        _96 = <i128 as SafeMath>::safe_div(move _97, move _115) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_111);
        _111 = ((_98 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_113);
        StorageDead(_111);
        goto -> bb625;
    }

    bb52: {
        StorageDead(_115);
        StorageDead(_97);
        _95 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _96) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_96);
        _116 = discriminant(_95);
        switchInt(move _116) -> [0: bb54, 1: bb55, otherwise: bb5];
    }

    bb54: {
        StorageLive(_120);
        _120 = ((_95 as Continue).0: i128);
        _94 = _120;
        StorageDead(_120);
        _93 = <i128 as Cast>::cast::<i64>(move _94) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_117);
        _117 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_119);
        StorageDead(_117);
        goto -> bb626;
    }

    bb57: {
        StorageDead(_94);
        _92 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _93) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_93);
        _121 = discriminant(_92);
        switchInt(move _121) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_125);
        _125 = ((_92 as Continue).0: i64);
        _91 = _125;
        StorageDead(_125);
        _89 = <i64 as SafeMath>::safe_sub(move _90, move _91) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_122);
        _122 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_124);
        StorageDead(_122);
        goto -> bb627;
    }

    bb62: {
        StorageDead(_91);
        StorageDead(_90);
        _88 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _89) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_89);
        _126 = discriminant(_88);
        switchInt(move _126) -> [0: bb64, 1: bb65, otherwise: bb5];
    }

    bb64: {
        StorageLive(_130);
        _130 = ((_88 as Continue).0: i64);
        _87 = _130;
        StorageDead(_130);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_88);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = ((*_1).3: i64);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = ((*_1).3: i64);
        _146 = <i64 as Cast>::cast::<i128>(move _147) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_127);
        _127 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_129);
        StorageDead(_127);
        goto -> bb628;
    }

    bb67: {
        StorageDead(_147);
        _145 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _146) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_146);
        _148 = discriminant(_145);
        switchInt(move _148) -> [0: bb69, 1: bb70, otherwise: bb5];
    }

    bb69: {
        StorageLive(_152);
        _152 = ((_145 as Continue).0: i128);
        _144 = _152;
        StorageDead(_152);
        StorageLive(_153);
        _153 = _78;
        _143 = <i128 as SafeMath>::safe_mul(move _144, move _153) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_149);
        _149 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb620;
    }

    bb72: {
        StorageDead(_153);
        StorageDead(_144);
        _142 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _143) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_143);
        _154 = discriminant(_142);
        switchInt(move _154) -> [0: bb74, 1: bb75, otherwise: bb5];
    }

    bb74: {
        StorageLive(_158);
        _158 = ((_142 as Continue).0: i128);
        _141 = _158;
        StorageDead(_158);
        StorageLive(_159);
        _159 = _69;
        _140 = <i128 as SafeMath>::safe_div(move _141, move _159) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_155);
        _155 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_157);
        _157 = _155;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _157) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_157);
        StorageDead(_155);
        goto -> bb620;
    }

    bb77: {
        StorageDead(_159);
        StorageDead(_141);
        _139 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _140) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_140);
        _160 = discriminant(_139);
        switchInt(move _160) -> [0: bb79, 1: bb80, otherwise: bb5];
    }

    bb79: {
        StorageLive(_164);
        _164 = ((_139 as Continue).0: i128);
        _138 = _164;
        StorageDead(_164);
        _137 = <i128 as Cast>::cast::<i64>(move _138) -> [return: bb82, unwind continue];
    }

    bb80: {
        StorageLive(_161);
        _161 = ((_139 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_163);
        _163 = _161;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _163) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_163);
        StorageDead(_161);
        goto -> bb621;
    }

    bb82: {
        StorageDead(_138);
        _136 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _137) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_137);
        _165 = discriminant(_136);
        switchInt(move _165) -> [0: bb84, 1: bb85, otherwise: bb5];
    }

    bb84: {
        StorageLive(_169);
        _169 = ((_136 as Continue).0: i64);
        _135 = _169;
        StorageDead(_169);
        _133 = <i64 as SafeMath>::safe_sub(move _134, move _135) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_166);
        _166 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_168);
        _168 = _166;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _168) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_168);
        StorageDead(_166);
        goto -> bb622;
    }

    bb87: {
        StorageDead(_135);
        StorageDead(_134);
        _132 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _133) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_133);
        _170 = discriminant(_132);
        switchInt(move _170) -> [0: bb89, 1: bb90, otherwise: bb5];
    }

    bb89: {
        StorageLive(_174);
        _174 = ((_132 as Continue).0: i64);
        _131 = _174;
        StorageDead(_174);
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_132);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = ((*_1).4: i64);
        StorageLive(_182);
        _182 = _87;
        _180 = <i64 as SafeMath>::safe_sub(move _181, move _182) -> [return: bb92, unwind continue];
    }

    bb90: {
        StorageLive(_171);
        _171 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_173);
        StorageDead(_171);
        goto -> bb623;
    }

    bb92: {
        StorageDead(_182);
        StorageDead(_181);
        _179 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _180) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_180);
        _183 = discriminant(_179);
        switchInt(move _183) -> [0: bb94, 1: bb95, otherwise: bb5];
    }

    bb94: {
        StorageLive(_187);
        _187 = ((_179 as Continue).0: i64);
        _178 = _187;
        StorageDead(_187);
        StorageLive(_188);
        _188 = ((*_3).0: i64);
        _177 = <i64 as SafeMath>::safe_add(move _178, move _188) -> [return: bb97, unwind continue];
    }

    bb95: {
        StorageLive(_184);
        _184 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_186);
        _186 = _184;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _186) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_178);
        StorageDead(_177);
        goto -> bb619;
    }

    bb97: {
        StorageDead(_188);
        StorageDead(_178);
        _176 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _177) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_177);
        _189 = discriminant(_176);
        switchInt(move _189) -> [0: bb99, 1: bb100, otherwise: bb5];
    }

    bb99: {
        StorageLive(_193);
        _193 = ((_176 as Continue).0: i64);
        _175 = _193;
        StorageDead(_193);
        StorageDead(_179);
        StorageDead(_176);
        StorageLive(_194);
        _194 = _87;
        StorageLive(_195);
        _195 = _131;
        StorageLive(_196);
        _196 = _175;
        _45 = (move _194, move _195, move _196);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_175);
        StorageDead(_131);
        StorageDead(_87);
        StorageDead(_78);
        StorageDead(_69);
        goto -> bb147;
    }

    bb100: {
        StorageLive(_190);
        _190 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_192);
        StorageDead(_190);
        goto -> bb619;
    }

    bb102: {
        StorageDead(_200);
        _198 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _199) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_199);
        _201 = discriminant(_198);
        switchInt(move _201) -> [0: bb104, 1: bb105, otherwise: bb5];
    }

    bb104: {
        StorageLive(_205);
        _205 = ((_198 as Continue).0: i128);
        _197 = _205;
        StorageDead(_205);
        StorageDead(_198);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &(*_3);
        _208 = PositionDelta::get_delta_base_abs(move _209) -> [return: bb107, unwind continue];
    }

    bb105: {
        StorageLive(_202);
        _202 = ((_198 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_204);
        _204 = _202;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _204) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_198);
        goto -> bb618;
    }

    bb107: {
        StorageDead(_209);
        _207 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _208) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_208);
        _210 = discriminant(_207);
        switchInt(move _210) -> [0: bb109, 1: bb110, otherwise: bb5];
    }

    bb109: {
        StorageLive(_214);
        _214 = ((_207 as Continue).0: i128);
        _206 = _214;
        StorageDead(_214);
        StorageDead(_207);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = ((*_3).0: i64);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = ((*_3).0: i64);
        _230 = <i64 as Cast>::cast::<i128>(move _231) -> [return: bb112, unwind continue];
    }

    bb110: {
        StorageLive(_211);
        _211 = ((_207 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_207);
        goto -> bb617;
    }

    bb112: {
        StorageDead(_231);
        _229 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _230) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_230);
        _232 = discriminant(_229);
        switchInt(move _232) -> [0: bb114, 1: bb115, otherwise: bb5];
    }

    bb114: {
        StorageLive(_236);
        _236 = ((_229 as Continue).0: i128);
        _228 = _236;
        StorageDead(_236);
        StorageLive(_237);
        _237 = _197;
        _227 = <i128 as SafeMath>::safe_mul(move _228, move _237) -> [return: bb117, unwind continue];
    }

    bb115: {
        StorageLive(_233);
        _233 = ((_229 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_235);
        _235 = _233;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _235) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_235);
        StorageDead(_233);
        StorageDead(_228);
        StorageDead(_227);
        goto -> bb612;
    }

    bb117: {
        StorageDead(_237);
        StorageDead(_228);
        _226 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _227) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_227);
        _238 = discriminant(_226);
        switchInt(move _238) -> [0: bb119, 1: bb120, otherwise: bb5];
    }

    bb119: {
        StorageLive(_242);
        _242 = ((_226 as Continue).0: i128);
        _225 = _242;
        StorageDead(_242);
        StorageLive(_243);
        _243 = _206;
        _224 = <i128 as SafeMath>::safe_div(move _225, move _243) -> [return: bb122, unwind continue];
    }

    bb120: {
        StorageLive(_239);
        _239 = ((_226 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_241);
        _241 = _239;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _241) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_241);
        StorageDead(_239);
        goto -> bb612;
    }

    bb122: {
        StorageDead(_243);
        StorageDead(_225);
        _223 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _224) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_224);
        _244 = discriminant(_223);
        switchInt(move _244) -> [0: bb124, 1: bb125, otherwise: bb5];
    }

    bb124: {
        StorageLive(_248);
        _248 = ((_223 as Continue).0: i128);
        _222 = _248;
        StorageDead(_248);
        _221 = <i128 as Cast>::cast::<i64>(move _222) -> [return: bb127, unwind continue];
    }

    bb125: {
        StorageLive(_245);
        _245 = ((_223 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_247);
        _247 = _245;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _247) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_247);
        StorageDead(_245);
        goto -> bb613;
    }

    bb127: {
        StorageDead(_222);
        _220 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _221) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_221);
        _249 = discriminant(_220);
        switchInt(move _249) -> [0: bb129, 1: bb130, otherwise: bb5];
    }

    bb129: {
        StorageLive(_253);
        _253 = ((_220 as Continue).0: i64);
        _219 = _253;
        StorageDead(_253);
        _217 = <i64 as SafeMath>::safe_sub(move _218, move _219) -> [return: bb132, unwind continue];
    }

    bb130: {
        StorageLive(_250);
        _250 = ((_220 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_252);
        _252 = _250;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _252) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_252);
        StorageDead(_250);
        goto -> bb614;
    }

    bb132: {
        StorageDead(_219);
        StorageDead(_218);
        _216 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _217) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_217);
        _254 = discriminant(_216);
        switchInt(move _254) -> [0: bb134, 1: bb135, otherwise: bb5];
    }

    bb134: {
        StorageLive(_258);
        _258 = ((_216 as Continue).0: i64);
        _215 = _258;
        StorageDead(_258);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_216);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = ((*_1).4: i64);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = ((*_3).0: i64);
        StorageLive(_267);
        _267 = _215;
        _265 = <i64 as SafeMath>::safe_sub(move _266, move _267) -> [return: bb137, unwind continue];
    }

    bb135: {
        StorageLive(_255);
        _255 = ((_216 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_257);
        _257 = _255;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _257) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_257);
        StorageDead(_255);
        goto -> bb615;
    }

    bb137: {
        StorageDead(_267);
        StorageDead(_266);
        _264 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _265) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_265);
        _268 = discriminant(_264);
        switchInt(move _268) -> [0: bb139, 1: bb140, otherwise: bb5];
    }

    bb139: {
        StorageLive(_272);
        _272 = ((_264 as Continue).0: i64);
        _263 = _272;
        StorageDead(_272);
        _261 = <i64 as SafeMath>::safe_add(move _262, move _263) -> [return: bb142, unwind continue];
    }

    bb140: {
        StorageLive(_269);
        _269 = ((_264 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_271);
        _271 = _269;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _271) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_261);
        goto -> bb611;
    }

    bb142: {
        StorageDead(_263);
        StorageDead(_262);
        _260 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _261) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_261);
        _273 = discriminant(_260);
        switchInt(move _273) -> [0: bb144, 1: bb145, otherwise: bb5];
    }

    bb144: {
        StorageLive(_277);
        _277 = ((_260 as Continue).0: i64);
        _259 = _277;
        StorageDead(_277);
        StorageDead(_264);
        StorageDead(_260);
        StorageLive(_278);
        _278 = _215;
        StorageLive(_279);
        _279 = _215;
        StorageLive(_280);
        _280 = _259;
        _45 = (move _278, move _279, move _280);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_259);
        StorageDead(_215);
        StorageDead(_206);
        StorageDead(_197);
        goto -> bb147;
    }

    bb145: {
        StorageLive(_274);
        _274 = ((_260 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_276);
        _276 = _274;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _276) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_276);
        StorageDead(_274);
        goto -> bb611;
    }

    bb147: {
        StorageLive(_42);
        _42 = (_45.0: i64);
        StorageLive(_43);
        _43 = (_45.1: i64);
        StorageLive(_44);
        _44 = (_45.2: i64);
        StorageDead(_45);
        StorageLive(_281);
        _282 = discriminant(_20);
        switchInt(move _282) -> [0: bb148, otherwise: bb165];
    }

    bb148: {
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = ((*_1).2: i64);
        _284 = Eq(move _285, const 0_i64);
        switchInt(move _284) -> [0: bb157, otherwise: bb149];
    }

    bb149: {
        StorageDead(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = ((*_1).1: i64);
        _286 = Eq(move _287, const 0_i64);
        switchInt(move _286) -> [0: bb156, otherwise: bb150];
    }

    bb150: {
        StorageDead(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = ((*_2).20: u32);
        _290 = <u32 as SafeMath>::safe_add(move _291, const 1_u32) -> [return: bb151, unwind continue];
    }

    bb151: {
        StorageDead(_291);
        _289 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _290) -> [return: bb152, unwind continue];
    }

    bb152: {
        StorageDead(_290);
        _292 = discriminant(_289);
        switchInt(move _292) -> [0: bb153, 1: bb154, otherwise: bb5];
    }

    bb153: {
        StorageLive(_296);
        _296 = ((_289 as Continue).0: u32);
        _288 = _296;
        StorageDead(_296);
        ((*_2).20: u32) = move _288;
        StorageDead(_288);
        StorageDead(_289);
        _283 = const ();
        goto -> bb159;
    }

    bb154: {
        StorageLive(_293);
        _293 = ((_289 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_295);
        _295 = _293;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _295) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_295);
        StorageDead(_293);
        StorageDead(_288);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        goto -> bb609;
    }

    bb156: {
        StorageDead(_287);
        goto -> bb158;
    }

    bb157: {
        StorageDead(_285);
        goto -> bb158;
    }

    bb158: {
        _283 = const ();
        goto -> bb159;
    }

    bb159: {
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = ((*_2).19: u32);
        _299 = <u32 as SafeMath>::safe_add(move _300, const 1_u32) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_300);
        _298 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _299) -> [return: bb161, unwind continue];
    }

    bb161: {
        StorageDead(_299);
        _301 = discriminant(_298);
        switchInt(move _301) -> [0: bb162, 1: bb163, otherwise: bb5];
    }

    bb162: {
        StorageLive(_305);
        _305 = ((_298 as Continue).0: u32);
        _297 = _305;
        StorageDead(_305);
        ((*_2).19: u32) = move _297;
        StorageDead(_297);
        StorageDead(_298);
        _281 = const ();
        goto -> bb176;
    }

    bb163: {
        StorageLive(_302);
        _302 = ((_298 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_304);
        _304 = _302;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _304) -> [return: bb164, unwind continue];
    }

    bb164: {
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_297);
        StorageDead(_298);
        goto -> bb609;
    }

    bb165: {
        _306 = discriminant(_20);
        switchInt(move _306) -> [3: bb166, otherwise: bb175];
    }

    bb166: {
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = _30;
        _308 = Eq(move _309, const 0_i64);
        switchInt(move _308) -> [0: bb171, otherwise: bb167];
    }

    bb167: {
        StorageDead(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = _31;
        _310 = Eq(move _311, const 0_i64);
        switchInt(move _310) -> [0: bb170, otherwise: bb168];
    }

    bb168: {
        StorageDead(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = ((*_2).20: u32);
        _312 = core::num::<impl u32>::saturating_sub(move _313, const 1_u32) -> [return: bb169, unwind continue];
    }

    bb169: {
        StorageDead(_313);
        ((*_2).20: u32) = move _312;
        StorageDead(_312);
        _307 = const ();
        goto -> bb173;
    }

    bb170: {
        StorageDead(_311);
        goto -> bb172;
    }

    bb171: {
        StorageDead(_309);
        goto -> bb172;
    }

    bb172: {
        _307 = const ();
        goto -> bb173;
    }

    bb173: {
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_314);
        StorageLive(_315);
        _315 = ((*_2).19: u32);
        _314 = core::num::<impl u32>::saturating_sub(move _315, const 1_u32) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_315);
        ((*_2).19: u32) = move _314;
        StorageDead(_314);
        _281 = const ();
        goto -> bb176;
    }

    bb175: {
        _281 = const ();
        goto -> bb176;
    }

    bb176: {
        StorageDead(_281);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = (((*_2).1: state::perp_market::AMM).18: i128);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _323 = ((*_3).0: i64);
        _322 = <i64 as Cast>::cast::<i128>(move _323) -> [return: bb177, unwind continue];
    }

    bb177: {
        StorageDead(_323);
        _321 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _322) -> [return: bb178, unwind continue];
    }

    bb178: {
        StorageDead(_322);
        _324 = discriminant(_321);
        switchInt(move _324) -> [0: bb179, 1: bb180, otherwise: bb5];
    }

    bb179: {
        StorageLive(_328);
        _328 = ((_321 as Continue).0: i128);
        _320 = _328;
        StorageDead(_328);
        _318 = <i128 as SafeMath>::safe_add(move _319, move _320) -> [return: bb182, unwind continue];
    }

    bb180: {
        StorageLive(_325);
        _325 = ((_321 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_327);
        _327 = _325;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _327) -> [return: bb181, unwind continue];
    }

    bb181: {
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb608;
    }

    bb182: {
        StorageDead(_320);
        StorageDead(_319);
        _317 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _318) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_318);
        _329 = discriminant(_317);
        switchInt(move _329) -> [0: bb184, 1: bb185, otherwise: bb5];
    }

    bb184: {
        StorageLive(_333);
        _333 = ((_317 as Continue).0: i128);
        _316 = _333;
        StorageDead(_333);
        (((*_2).1: state::perp_market::AMM).18: i128) = move _316;
        StorageDead(_316);
        StorageDead(_321);
        StorageDead(_317);
        StorageLive(_334);
        _335 = discriminant(_20);
        switchInt(move _335) -> [0: bb188, 1: bb188, 2: bb252, 3: bb252, 4: bb187, otherwise: bb5];
    }

    bb185: {
        StorageLive(_330);
        _330 = ((_317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_332);
        _332 = _330;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _332) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_332);
        StorageDead(_330);
        goto -> bb608;
    }

    bb187: {
        StorageLive(_592);
        StorageLive(_593);
        _593 = _30;
        _592 = Gt(move _593, const 0_i64);
        switchInt(move _592) -> [0: bb397, otherwise: bb336];
    }

    bb188: {
        StorageLive(_336);
        StorageLive(_337);
        _337 = _30;
        _336 = Gt(move _337, const 0_i64);
        switchInt(move _336) -> [0: bb220, otherwise: bb189];
    }

    bb189: {
        StorageDead(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = (((*_2).1: state::perp_market::AMM).13: i128);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = ((*_3).1: i64);
        _344 = <i64 as Cast>::cast::<i128>(move _345) -> [return: bb190, unwind continue];
    }

    bb190: {
        StorageDead(_345);
        _343 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _344) -> [return: bb191, unwind continue];
    }

    bb191: {
        StorageDead(_344);
        _346 = discriminant(_343);
        switchInt(move _346) -> [0: bb192, 1: bb193, otherwise: bb5];
    }

    bb192: {
        StorageLive(_350);
        _350 = ((_343 as Continue).0: i128);
        _342 = _350;
        StorageDead(_350);
        _340 = <i128 as SafeMath>::safe_add(move _341, move _342) -> [return: bb195, unwind continue];
    }

    bb193: {
        StorageLive(_347);
        _347 = ((_343 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_349);
        _349 = _347;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _349) -> [return: bb194, unwind continue];
    }

    bb194: {
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_342);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb605;
    }

    bb195: {
        StorageDead(_342);
        StorageDead(_341);
        _339 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _340) -> [return: bb196, unwind continue];
    }

    bb196: {
        StorageDead(_340);
        _351 = discriminant(_339);
        switchInt(move _351) -> [0: bb197, 1: bb198, otherwise: bb5];
    }

    bb197: {
        StorageLive(_355);
        _355 = ((_339 as Continue).0: i128);
        _338 = _355;
        StorageDead(_355);
        (((*_2).1: state::perp_market::AMM).13: i128) = move _338;
        StorageDead(_338);
        StorageDead(_343);
        StorageDead(_339);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = (((*_2).1: state::perp_market::AMM).19: i128);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = ((*_3).0: i64);
        _362 = <i64 as Cast>::cast::<i128>(move _363) -> [return: bb200, unwind continue];
    }

    bb198: {
        StorageLive(_352);
        _352 = ((_339 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_354);
        _354 = _352;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _354) -> [return: bb199, unwind continue];
    }

    bb199: {
        StorageDead(_354);
        StorageDead(_352);
        goto -> bb605;
    }

    bb200: {
        StorageDead(_363);
        _361 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _362) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_362);
        _364 = discriminant(_361);
        switchInt(move _364) -> [0: bb202, 1: bb203, otherwise: bb5];
    }

    bb202: {
        StorageLive(_368);
        _368 = ((_361 as Continue).0: i128);
        _360 = _368;
        StorageDead(_368);
        _358 = <i128 as SafeMath>::safe_add(move _359, move _360) -> [return: bb205, unwind continue];
    }

    bb203: {
        StorageLive(_365);
        _365 = ((_361 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_367);
        _367 = _365;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _367) -> [return: bb204, unwind continue];
    }

    bb204: {
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_360);
        StorageDead(_359);
        StorageDead(_358);
        goto -> bb604;
    }

    bb205: {
        StorageDead(_360);
        StorageDead(_359);
        _357 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _358) -> [return: bb206, unwind continue];
    }

    bb206: {
        StorageDead(_358);
        _369 = discriminant(_357);
        switchInt(move _369) -> [0: bb207, 1: bb208, otherwise: bb5];
    }

    bb207: {
        StorageLive(_373);
        _373 = ((_357 as Continue).0: i128);
        _356 = _373;
        StorageDead(_373);
        (((*_2).1: state::perp_market::AMM).19: i128) = move _356;
        StorageDead(_356);
        StorageDead(_361);
        StorageDead(_357);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = (((*_2).1: state::perp_market::AMM).21: i128);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = ((*_3).0: i64);
        _380 = <i64 as Cast>::cast::<i128>(move _381) -> [return: bb210, unwind continue];
    }

    bb208: {
        StorageLive(_370);
        _370 = ((_357 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_372);
        _372 = _370;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _372) -> [return: bb209, unwind continue];
    }

    bb209: {
        StorageDead(_372);
        StorageDead(_370);
        goto -> bb604;
    }

    bb210: {
        StorageDead(_381);
        _379 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _380) -> [return: bb211, unwind continue];
    }

    bb211: {
        StorageDead(_380);
        _382 = discriminant(_379);
        switchInt(move _382) -> [0: bb212, 1: bb213, otherwise: bb5];
    }

    bb212: {
        StorageLive(_386);
        _386 = ((_379 as Continue).0: i128);
        _378 = _386;
        StorageDead(_386);
        _376 = <i128 as SafeMath>::safe_add(move _377, move _378) -> [return: bb215, unwind continue];
    }

    bb213: {
        StorageLive(_383);
        _383 = ((_379 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_385);
        _385 = _383;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _385) -> [return: bb214, unwind continue];
    }

    bb214: {
        StorageDead(_385);
        StorageDead(_383);
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb603;
    }

    bb215: {
        StorageDead(_378);
        StorageDead(_377);
        _375 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _376) -> [return: bb216, unwind continue];
    }

    bb216: {
        StorageDead(_376);
        _387 = discriminant(_375);
        switchInt(move _387) -> [0: bb217, 1: bb218, otherwise: bb5];
    }

    bb217: {
        StorageLive(_391);
        _391 = ((_375 as Continue).0: i128);
        _374 = _391;
        StorageDead(_391);
        (((*_2).1: state::perp_market::AMM).21: i128) = move _374;
        StorageDead(_374);
        StorageDead(_379);
        StorageDead(_375);
        _334 = const ();
        goto -> bb251;
    }

    bb218: {
        StorageLive(_388);
        _388 = ((_375 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_390);
        _390 = _388;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _390) -> [return: bb219, unwind continue];
    }

    bb219: {
        StorageDead(_390);
        StorageDead(_388);
        goto -> bb603;
    }

    bb220: {
        StorageDead(_337);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = (((*_2).1: state::perp_market::AMM).14: i128);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = ((*_3).1: i64);
        _398 = <i64 as Cast>::cast::<i128>(move _399) -> [return: bb221, unwind continue];
    }

    bb221: {
        StorageDead(_399);
        _397 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _398) -> [return: bb222, unwind continue];
    }

    bb222: {
        StorageDead(_398);
        _400 = discriminant(_397);
        switchInt(move _400) -> [0: bb223, 1: bb224, otherwise: bb5];
    }

    bb223: {
        StorageLive(_404);
        _404 = ((_397 as Continue).0: i128);
        _396 = _404;
        StorageDead(_404);
        _394 = <i128 as SafeMath>::safe_add(move _395, move _396) -> [return: bb226, unwind continue];
    }

    bb224: {
        StorageLive(_401);
        _401 = ((_397 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_403);
        _403 = _401;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _403) -> [return: bb225, unwind continue];
    }

    bb225: {
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_394);
        goto -> bb602;
    }

    bb226: {
        StorageDead(_396);
        StorageDead(_395);
        _393 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _394) -> [return: bb227, unwind continue];
    }

    bb227: {
        StorageDead(_394);
        _405 = discriminant(_393);
        switchInt(move _405) -> [0: bb228, 1: bb229, otherwise: bb5];
    }

    bb228: {
        StorageLive(_409);
        _409 = ((_393 as Continue).0: i128);
        _392 = _409;
        StorageDead(_409);
        (((*_2).1: state::perp_market::AMM).14: i128) = move _392;
        StorageDead(_392);
        StorageDead(_397);
        StorageDead(_393);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = (((*_2).1: state::perp_market::AMM).20: i128);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        _417 = ((*_3).0: i64);
        _416 = <i64 as Cast>::cast::<i128>(move _417) -> [return: bb231, unwind continue];
    }

    bb229: {
        StorageLive(_406);
        _406 = ((_393 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_408);
        _408 = _406;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _408) -> [return: bb230, unwind continue];
    }

    bb230: {
        StorageDead(_408);
        StorageDead(_406);
        goto -> bb602;
    }

    bb231: {
        StorageDead(_417);
        _415 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _416) -> [return: bb232, unwind continue];
    }

    bb232: {
        StorageDead(_416);
        _418 = discriminant(_415);
        switchInt(move _418) -> [0: bb233, 1: bb234, otherwise: bb5];
    }

    bb233: {
        StorageLive(_422);
        _422 = ((_415 as Continue).0: i128);
        _414 = _422;
        StorageDead(_422);
        _412 = <i128 as SafeMath>::safe_add(move _413, move _414) -> [return: bb236, unwind continue];
    }

    bb234: {
        StorageLive(_419);
        _419 = ((_415 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_421);
        _421 = _419;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _421) -> [return: bb235, unwind continue];
    }

    bb235: {
        StorageDead(_421);
        StorageDead(_419);
        StorageDead(_414);
        StorageDead(_413);
        StorageDead(_412);
        goto -> bb601;
    }

    bb236: {
        StorageDead(_414);
        StorageDead(_413);
        _411 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _412) -> [return: bb237, unwind continue];
    }

    bb237: {
        StorageDead(_412);
        _423 = discriminant(_411);
        switchInt(move _423) -> [0: bb238, 1: bb239, otherwise: bb5];
    }

    bb238: {
        StorageLive(_427);
        _427 = ((_411 as Continue).0: i128);
        _410 = _427;
        StorageDead(_427);
        (((*_2).1: state::perp_market::AMM).20: i128) = move _410;
        StorageDead(_410);
        StorageDead(_415);
        StorageDead(_411);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = (((*_2).1: state::perp_market::AMM).22: i128);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _435 = ((*_3).0: i64);
        _434 = <i64 as Cast>::cast::<i128>(move _435) -> [return: bb241, unwind continue];
    }

    bb239: {
        StorageLive(_424);
        _424 = ((_411 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_426);
        _426 = _424;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _426) -> [return: bb240, unwind continue];
    }

    bb240: {
        StorageDead(_426);
        StorageDead(_424);
        goto -> bb601;
    }

    bb241: {
        StorageDead(_435);
        _433 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _434) -> [return: bb242, unwind continue];
    }

    bb242: {
        StorageDead(_434);
        _436 = discriminant(_433);
        switchInt(move _436) -> [0: bb243, 1: bb244, otherwise: bb5];
    }

    bb243: {
        StorageLive(_440);
        _440 = ((_433 as Continue).0: i128);
        _432 = _440;
        StorageDead(_440);
        _430 = <i128 as SafeMath>::safe_add(move _431, move _432) -> [return: bb246, unwind continue];
    }

    bb244: {
        StorageLive(_437);
        _437 = ((_433 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_439);
        _439 = _437;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _439) -> [return: bb245, unwind continue];
    }

    bb245: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_432);
        StorageDead(_431);
        StorageDead(_430);
        goto -> bb600;
    }

    bb246: {
        StorageDead(_432);
        StorageDead(_431);
        _429 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _430) -> [return: bb247, unwind continue];
    }

    bb247: {
        StorageDead(_430);
        _441 = discriminant(_429);
        switchInt(move _441) -> [0: bb248, 1: bb249, otherwise: bb5];
    }

    bb248: {
        StorageLive(_445);
        _445 = ((_429 as Continue).0: i128);
        _428 = _445;
        StorageDead(_445);
        (((*_2).1: state::perp_market::AMM).22: i128) = move _428;
        StorageDead(_428);
        StorageDead(_433);
        StorageDead(_429);
        _334 = const ();
        goto -> bb251;
    }

    bb249: {
        StorageLive(_442);
        _442 = ((_429 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_444);
        _444 = _442;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _444) -> [return: bb250, unwind continue];
    }

    bb250: {
        StorageDead(_444);
        StorageDead(_442);
        goto -> bb600;
    }

    bb251: {
        StorageDead(_336);
        goto -> bb459;
    }

    bb252: {
        StorageLive(_446);
        StorageLive(_447);
        _447 = ((*_1).1: i64);
        _446 = Gt(move _447, const 0_i64);
        switchInt(move _446) -> [0: bb294, otherwise: bb253];
    }

    bb253: {
        StorageDead(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        _451 = (((*_2).1: state::perp_market::AMM).13: i128);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        _455 = ((*_3).1: i64);
        _454 = <i64 as Cast>::cast::<i128>(move _455) -> [return: bb254, unwind continue];
    }

    bb254: {
        StorageDead(_455);
        _453 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _454) -> [return: bb255, unwind continue];
    }

    bb255: {
        StorageDead(_454);
        _456 = discriminant(_453);
        switchInt(move _456) -> [0: bb256, 1: bb257, otherwise: bb5];
    }

    bb256: {
        StorageLive(_460);
        _460 = ((_453 as Continue).0: i128);
        _452 = _460;
        StorageDead(_460);
        _450 = <i128 as SafeMath>::safe_add(move _451, move _452) -> [return: bb259, unwind continue];
    }

    bb257: {
        StorageLive(_457);
        _457 = ((_453 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_459);
        _459 = _457;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _459) -> [return: bb258, unwind continue];
    }

    bb258: {
        StorageDead(_459);
        StorageDead(_457);
        StorageDead(_452);
        StorageDead(_451);
        StorageDead(_450);
        goto -> bb598;
    }

    bb259: {
        StorageDead(_452);
        StorageDead(_451);
        _449 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _450) -> [return: bb260, unwind continue];
    }

    bb260: {
        StorageDead(_450);
        _461 = discriminant(_449);
        switchInt(move _461) -> [0: bb261, 1: bb262, otherwise: bb5];
    }

    bb261: {
        StorageLive(_465);
        _465 = ((_449 as Continue).0: i128);
        _448 = _465;
        StorageDead(_465);
        (((*_2).1: state::perp_market::AMM).13: i128) = move _448;
        StorageDead(_448);
        StorageDead(_453);
        StorageDead(_449);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = (((*_2).1: state::perp_market::AMM).19: i128);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        _476 = ((*_1).4: i64);
        StorageLive(_477);
        _477 = _42;
        _475 = <i64 as SafeMath>::safe_sub(move _476, move _477) -> [return: bb264, unwind continue];
    }

    bb262: {
        StorageLive(_462);
        _462 = ((_449 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_464);
        _464 = _462;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _464) -> [return: bb263, unwind continue];
    }

    bb263: {
        StorageDead(_464);
        StorageDead(_462);
        goto -> bb598;
    }

    bb264: {
        StorageDead(_477);
        StorageDead(_476);
        _474 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _475) -> [return: bb265, unwind continue];
    }

    bb265: {
        StorageDead(_475);
        _478 = discriminant(_474);
        switchInt(move _478) -> [0: bb266, 1: bb267, otherwise: bb5];
    }

    bb266: {
        StorageLive(_482);
        _482 = ((_474 as Continue).0: i64);
        _473 = _482;
        StorageDead(_482);
        _472 = <i64 as Cast>::cast::<i128>(move _473) -> [return: bb269, unwind continue];
    }

    bb267: {
        StorageLive(_479);
        _479 = ((_474 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_481);
        _481 = _479;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _481) -> [return: bb268, unwind continue];
    }

    bb268: {
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_473);
        StorageDead(_472);
        goto -> bb596;
    }

    bb269: {
        StorageDead(_473);
        _471 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _472) -> [return: bb270, unwind continue];
    }

    bb270: {
        StorageDead(_472);
        _483 = discriminant(_471);
        switchInt(move _483) -> [0: bb271, 1: bb272, otherwise: bb5];
    }

    bb271: {
        StorageLive(_487);
        _487 = ((_471 as Continue).0: i128);
        _470 = _487;
        StorageDead(_487);
        _468 = <i128 as SafeMath>::safe_sub(move _469, move _470) -> [return: bb274, unwind continue];
    }

    bb272: {
        StorageLive(_484);
        _484 = ((_471 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_486);
        _486 = _484;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _486) -> [return: bb273, unwind continue];
    }

    bb273: {
        StorageDead(_486);
        StorageDead(_484);
        goto -> bb596;
    }

    bb274: {
        StorageDead(_470);
        StorageDead(_469);
        _467 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _468) -> [return: bb275, unwind continue];
    }

    bb275: {
        StorageDead(_468);
        _488 = discriminant(_467);
        switchInt(move _488) -> [0: bb276, 1: bb277, otherwise: bb5];
    }

    bb276: {
        StorageLive(_492);
        _492 = ((_467 as Continue).0: i128);
        _466 = _492;
        StorageDead(_492);
        (((*_2).1: state::perp_market::AMM).19: i128) = move _466;
        StorageDead(_466);
        StorageDead(_474);
        StorageDead(_471);
        StorageDead(_467);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        _496 = (((*_2).1: state::perp_market::AMM).21: i128);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        _503 = ((*_1).3: i64);
        StorageLive(_504);
        _504 = _43;
        _502 = <i64 as SafeMath>::safe_sub(move _503, move _504) -> [return: bb279, unwind continue];
    }

    bb277: {
        StorageLive(_489);
        _489 = ((_467 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_491);
        _491 = _489;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _491) -> [return: bb278, unwind continue];
    }

    bb278: {
        StorageDead(_491);
        StorageDead(_489);
        goto -> bb597;
    }

    bb279: {
        StorageDead(_504);
        StorageDead(_503);
        _501 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _502) -> [return: bb280, unwind continue];
    }

    bb280: {
        StorageDead(_502);
        _505 = discriminant(_501);
        switchInt(move _505) -> [0: bb281, 1: bb282, otherwise: bb5];
    }

    bb281: {
        StorageLive(_509);
        _509 = ((_501 as Continue).0: i64);
        _500 = _509;
        StorageDead(_509);
        _499 = <i64 as Cast>::cast::<i128>(move _500) -> [return: bb284, unwind continue];
    }

    bb282: {
        StorageLive(_506);
        _506 = ((_501 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_508);
        _508 = _506;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _508) -> [return: bb283, unwind continue];
    }

    bb283: {
        StorageDead(_508);
        StorageDead(_506);
        StorageDead(_500);
        StorageDead(_499);
        goto -> bb594;
    }

    bb284: {
        StorageDead(_500);
        _498 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _499) -> [return: bb285, unwind continue];
    }

    bb285: {
        StorageDead(_499);
        _510 = discriminant(_498);
        switchInt(move _510) -> [0: bb286, 1: bb287, otherwise: bb5];
    }

    bb286: {
        StorageLive(_514);
        _514 = ((_498 as Continue).0: i128);
        _497 = _514;
        StorageDead(_514);
        _495 = <i128 as SafeMath>::safe_sub(move _496, move _497) -> [return: bb289, unwind continue];
    }

    bb287: {
        StorageLive(_511);
        _511 = ((_498 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_513);
        _513 = _511;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _513) -> [return: bb288, unwind continue];
    }

    bb288: {
        StorageDead(_513);
        StorageDead(_511);
        goto -> bb594;
    }

    bb289: {
        StorageDead(_497);
        StorageDead(_496);
        _494 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _495) -> [return: bb290, unwind continue];
    }

    bb290: {
        StorageDead(_495);
        _515 = discriminant(_494);
        switchInt(move _515) -> [0: bb291, 1: bb292, otherwise: bb5];
    }

    bb291: {
        StorageLive(_519);
        _519 = ((_494 as Continue).0: i128);
        _493 = _519;
        StorageDead(_519);
        (((*_2).1: state::perp_market::AMM).21: i128) = move _493;
        StorageDead(_493);
        StorageDead(_501);
        StorageDead(_498);
        StorageDead(_494);
        _334 = const ();
        goto -> bb335;
    }

    bb292: {
        StorageLive(_516);
        _516 = ((_494 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_518);
        _518 = _516;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _518) -> [return: bb293, unwind continue];
    }

    bb293: {
        StorageDead(_518);
        StorageDead(_516);
        goto -> bb595;
    }

    bb294: {
        StorageDead(_447);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        _523 = (((*_2).1: state::perp_market::AMM).14: i128);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        _527 = ((*_3).1: i64);
        _526 = <i64 as Cast>::cast::<i128>(move _527) -> [return: bb295, unwind continue];
    }

    bb295: {
        StorageDead(_527);
        _525 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _526) -> [return: bb296, unwind continue];
    }

    bb296: {
        StorageDead(_526);
        _528 = discriminant(_525);
        switchInt(move _528) -> [0: bb297, 1: bb298, otherwise: bb5];
    }

    bb297: {
        StorageLive(_532);
        _532 = ((_525 as Continue).0: i128);
        _524 = _532;
        StorageDead(_532);
        _522 = <i128 as SafeMath>::safe_add(move _523, move _524) -> [return: bb300, unwind continue];
    }

    bb298: {
        StorageLive(_529);
        _529 = ((_525 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_531);
        _531 = _529;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _531) -> [return: bb299, unwind continue];
    }

    bb299: {
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_524);
        StorageDead(_523);
        StorageDead(_522);
        goto -> bb593;
    }

    bb300: {
        StorageDead(_524);
        StorageDead(_523);
        _521 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _522) -> [return: bb301, unwind continue];
    }

    bb301: {
        StorageDead(_522);
        _533 = discriminant(_521);
        switchInt(move _533) -> [0: bb302, 1: bb303, otherwise: bb5];
    }

    bb302: {
        StorageLive(_537);
        _537 = ((_521 as Continue).0: i128);
        _520 = _537;
        StorageDead(_537);
        (((*_2).1: state::perp_market::AMM).14: i128) = move _520;
        StorageDead(_520);
        StorageDead(_525);
        StorageDead(_521);
        StorageLive(_538);
        StorageLive(_539);
        StorageLive(_540);
        StorageLive(_541);
        _541 = (((*_2).1: state::perp_market::AMM).20: i128);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        _548 = ((*_1).4: i64);
        StorageLive(_549);
        _549 = _42;
        _547 = <i64 as SafeMath>::safe_sub(move _548, move _549) -> [return: bb305, unwind continue];
    }

    bb303: {
        StorageLive(_534);
        _534 = ((_521 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_536);
        _536 = _534;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _536) -> [return: bb304, unwind continue];
    }

    bb304: {
        StorageDead(_536);
        StorageDead(_534);
        goto -> bb593;
    }

    bb305: {
        StorageDead(_549);
        StorageDead(_548);
        _546 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _547) -> [return: bb306, unwind continue];
    }

    bb306: {
        StorageDead(_547);
        _550 = discriminant(_546);
        switchInt(move _550) -> [0: bb307, 1: bb308, otherwise: bb5];
    }

    bb307: {
        StorageLive(_554);
        _554 = ((_546 as Continue).0: i64);
        _545 = _554;
        StorageDead(_554);
        _544 = <i64 as Cast>::cast::<i128>(move _545) -> [return: bb310, unwind continue];
    }

    bb308: {
        StorageLive(_551);
        _551 = ((_546 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_553);
        _553 = _551;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _553) -> [return: bb309, unwind continue];
    }

    bb309: {
        StorageDead(_553);
        StorageDead(_551);
        StorageDead(_545);
        StorageDead(_544);
        goto -> bb591;
    }

    bb310: {
        StorageDead(_545);
        _543 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _544) -> [return: bb311, unwind continue];
    }

    bb311: {
        StorageDead(_544);
        _555 = discriminant(_543);
        switchInt(move _555) -> [0: bb312, 1: bb313, otherwise: bb5];
    }

    bb312: {
        StorageLive(_559);
        _559 = ((_543 as Continue).0: i128);
        _542 = _559;
        StorageDead(_559);
        _540 = <i128 as SafeMath>::safe_sub(move _541, move _542) -> [return: bb315, unwind continue];
    }

    bb313: {
        StorageLive(_556);
        _556 = ((_543 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_558);
        _558 = _556;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _558) -> [return: bb314, unwind continue];
    }

    bb314: {
        StorageDead(_558);
        StorageDead(_556);
        goto -> bb591;
    }

    bb315: {
        StorageDead(_542);
        StorageDead(_541);
        _539 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _540) -> [return: bb316, unwind continue];
    }

    bb316: {
        StorageDead(_540);
        _560 = discriminant(_539);
        switchInt(move _560) -> [0: bb317, 1: bb318, otherwise: bb5];
    }

    bb317: {
        StorageLive(_564);
        _564 = ((_539 as Continue).0: i128);
        _538 = _564;
        StorageDead(_564);
        (((*_2).1: state::perp_market::AMM).20: i128) = move _538;
        StorageDead(_538);
        StorageDead(_546);
        StorageDead(_543);
        StorageDead(_539);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = (((*_2).1: state::perp_market::AMM).22: i128);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        _575 = ((*_1).3: i64);
        StorageLive(_576);
        _576 = _43;
        _574 = <i64 as SafeMath>::safe_sub(move _575, move _576) -> [return: bb320, unwind continue];
    }

    bb318: {
        StorageLive(_561);
        _561 = ((_539 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_563);
        _563 = _561;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _563) -> [return: bb319, unwind continue];
    }

    bb319: {
        StorageDead(_563);
        StorageDead(_561);
        goto -> bb592;
    }

    bb320: {
        StorageDead(_576);
        StorageDead(_575);
        _573 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _574) -> [return: bb321, unwind continue];
    }

    bb321: {
        StorageDead(_574);
        _577 = discriminant(_573);
        switchInt(move _577) -> [0: bb322, 1: bb323, otherwise: bb5];
    }

    bb322: {
        StorageLive(_581);
        _581 = ((_573 as Continue).0: i64);
        _572 = _581;
        StorageDead(_581);
        _571 = <i64 as Cast>::cast::<i128>(move _572) -> [return: bb325, unwind continue];
    }

    bb323: {
        StorageLive(_578);
        _578 = ((_573 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_580);
        _580 = _578;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _580) -> [return: bb324, unwind continue];
    }

    bb324: {
        StorageDead(_580);
        StorageDead(_578);
        StorageDead(_572);
        StorageDead(_571);
        goto -> bb589;
    }

    bb325: {
        StorageDead(_572);
        _570 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _571) -> [return: bb326, unwind continue];
    }

    bb326: {
        StorageDead(_571);
        _582 = discriminant(_570);
        switchInt(move _582) -> [0: bb327, 1: bb328, otherwise: bb5];
    }

    bb327: {
        StorageLive(_586);
        _586 = ((_570 as Continue).0: i128);
        _569 = _586;
        StorageDead(_586);
        _567 = <i128 as SafeMath>::safe_sub(move _568, move _569) -> [return: bb330, unwind continue];
    }

    bb328: {
        StorageLive(_583);
        _583 = ((_570 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_585);
        _585 = _583;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _585) -> [return: bb329, unwind continue];
    }

    bb329: {
        StorageDead(_585);
        StorageDead(_583);
        goto -> bb589;
    }

    bb330: {
        StorageDead(_569);
        StorageDead(_568);
        _566 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _567) -> [return: bb331, unwind continue];
    }

    bb331: {
        StorageDead(_567);
        _587 = discriminant(_566);
        switchInt(move _587) -> [0: bb332, 1: bb333, otherwise: bb5];
    }

    bb332: {
        StorageLive(_591);
        _591 = ((_566 as Continue).0: i128);
        _565 = _591;
        StorageDead(_591);
        (((*_2).1: state::perp_market::AMM).22: i128) = move _565;
        StorageDead(_565);
        StorageDead(_573);
        StorageDead(_570);
        StorageDead(_566);
        _334 = const ();
        goto -> bb335;
    }

    bb333: {
        StorageLive(_588);
        _588 = ((_566 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_590);
        _590 = _588;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _590) -> [return: bb334, unwind continue];
    }

    bb334: {
        StorageDead(_590);
        StorageDead(_588);
        goto -> bb590;
    }

    bb335: {
        StorageDead(_446);
        goto -> bb459;
    }

    bb336: {
        StorageDead(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        _597 = (((*_2).1: state::perp_market::AMM).14: i128);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        _601 = ((*_1).1: i64);
        _600 = <i64 as Cast>::cast::<i128>(move _601) -> [return: bb337, unwind continue];
    }

    bb337: {
        StorageDead(_601);
        _599 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _600) -> [return: bb338, unwind continue];
    }

    bb338: {
        StorageDead(_600);
        _602 = discriminant(_599);
        switchInt(move _602) -> [0: bb339, 1: bb340, otherwise: bb5];
    }

    bb339: {
        StorageLive(_606);
        _606 = ((_599 as Continue).0: i128);
        _598 = _606;
        StorageDead(_606);
        _596 = <i128 as SafeMath>::safe_sub(move _597, move _598) -> [return: bb342, unwind continue];
    }

    bb340: {
        StorageLive(_603);
        _603 = ((_599 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_605);
        _605 = _603;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _605) -> [return: bb341, unwind continue];
    }

    bb341: {
        StorageDead(_605);
        StorageDead(_603);
        StorageDead(_598);
        StorageDead(_597);
        StorageDead(_596);
        goto -> bb587;
    }

    bb342: {
        StorageDead(_598);
        StorageDead(_597);
        _595 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _596) -> [return: bb343, unwind continue];
    }

    bb343: {
        StorageDead(_596);
        _607 = discriminant(_595);
        switchInt(move _607) -> [0: bb344, 1: bb345, otherwise: bb5];
    }

    bb344: {
        StorageLive(_611);
        _611 = ((_595 as Continue).0: i128);
        _594 = _611;
        StorageDead(_611);
        (((*_2).1: state::perp_market::AMM).14: i128) = move _594;
        StorageDead(_594);
        StorageDead(_599);
        StorageDead(_595);
        StorageLive(_612);
        StorageLive(_613);
        StorageLive(_614);
        StorageLive(_615);
        _615 = (((*_2).1: state::perp_market::AMM).13: i128);
        StorageLive(_616);
        StorageLive(_617);
        StorageLive(_618);
        StorageLive(_619);
        _619 = _30;
        _618 = <i64 as Cast>::cast::<i128>(move _619) -> [return: bb347, unwind continue];
    }

    bb345: {
        StorageLive(_608);
        _608 = ((_595 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_610);
        _610 = _608;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _610) -> [return: bb346, unwind continue];
    }

    bb346: {
        StorageDead(_610);
        StorageDead(_608);
        goto -> bb587;
    }

    bb347: {
        StorageDead(_619);
        _617 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _618) -> [return: bb348, unwind continue];
    }

    bb348: {
        StorageDead(_618);
        _620 = discriminant(_617);
        switchInt(move _620) -> [0: bb349, 1: bb350, otherwise: bb5];
    }

    bb349: {
        StorageLive(_624);
        _624 = ((_617 as Continue).0: i128);
        _616 = _624;
        StorageDead(_624);
        _614 = <i128 as SafeMath>::safe_add(move _615, move _616) -> [return: bb352, unwind continue];
    }

    bb350: {
        StorageLive(_621);
        _621 = ((_617 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_623);
        _623 = _621;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _623) -> [return: bb351, unwind continue];
    }

    bb351: {
        StorageDead(_623);
        StorageDead(_621);
        StorageDead(_616);
        StorageDead(_615);
        StorageDead(_614);
        goto -> bb586;
    }

    bb352: {
        StorageDead(_616);
        StorageDead(_615);
        _613 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _614) -> [return: bb353, unwind continue];
    }

    bb353: {
        StorageDead(_614);
        _625 = discriminant(_613);
        switchInt(move _625) -> [0: bb354, 1: bb355, otherwise: bb5];
    }

    bb354: {
        StorageLive(_629);
        _629 = ((_613 as Continue).0: i128);
        _612 = _629;
        StorageDead(_629);
        (((*_2).1: state::perp_market::AMM).13: i128) = move _612;
        StorageDead(_612);
        StorageDead(_617);
        StorageDead(_613);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        _633 = (((*_2).1: state::perp_market::AMM).20: i128);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        _637 = ((*_1).4: i64);
        _636 = <i64 as Cast>::cast::<i128>(move _637) -> [return: bb357, unwind continue];
    }

    bb355: {
        StorageLive(_626);
        _626 = ((_613 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_628);
        _628 = _626;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _628) -> [return: bb356, unwind continue];
    }

    bb356: {
        StorageDead(_628);
        StorageDead(_626);
        goto -> bb586;
    }

    bb357: {
        StorageDead(_637);
        _635 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _636) -> [return: bb358, unwind continue];
    }

    bb358: {
        StorageDead(_636);
        _638 = discriminant(_635);
        switchInt(move _638) -> [0: bb359, 1: bb360, otherwise: bb5];
    }

    bb359: {
        StorageLive(_642);
        _642 = ((_635 as Continue).0: i128);
        _634 = _642;
        StorageDead(_642);
        _632 = <i128 as SafeMath>::safe_sub(move _633, move _634) -> [return: bb362, unwind continue];
    }

    bb360: {
        StorageLive(_639);
        _639 = ((_635 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_641);
        _641 = _639;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _641) -> [return: bb361, unwind continue];
    }

    bb361: {
        StorageDead(_641);
        StorageDead(_639);
        StorageDead(_634);
        StorageDead(_633);
        StorageDead(_632);
        goto -> bb585;
    }

    bb362: {
        StorageDead(_634);
        StorageDead(_633);
        _631 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _632) -> [return: bb363, unwind continue];
    }

    bb363: {
        StorageDead(_632);
        _643 = discriminant(_631);
        switchInt(move _643) -> [0: bb364, 1: bb365, otherwise: bb5];
    }

    bb364: {
        StorageLive(_647);
        _647 = ((_631 as Continue).0: i128);
        _630 = _647;
        StorageDead(_647);
        (((*_2).1: state::perp_market::AMM).20: i128) = move _630;
        StorageDead(_630);
        StorageDead(_635);
        StorageDead(_631);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        _651 = (((*_2).1: state::perp_market::AMM).19: i128);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        _655 = _42;
        _654 = <i64 as Cast>::cast::<i128>(move _655) -> [return: bb367, unwind continue];
    }

    bb365: {
        StorageLive(_644);
        _644 = ((_631 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_646);
        _646 = _644;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _646) -> [return: bb366, unwind continue];
    }

    bb366: {
        StorageDead(_646);
        StorageDead(_644);
        goto -> bb585;
    }

    bb367: {
        StorageDead(_655);
        _653 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _654) -> [return: bb368, unwind continue];
    }

    bb368: {
        StorageDead(_654);
        _656 = discriminant(_653);
        switchInt(move _656) -> [0: bb369, 1: bb370, otherwise: bb5];
    }

    bb369: {
        StorageLive(_660);
        _660 = ((_653 as Continue).0: i128);
        _652 = _660;
        StorageDead(_660);
        _650 = <i128 as SafeMath>::safe_add(move _651, move _652) -> [return: bb372, unwind continue];
    }

    bb370: {
        StorageLive(_657);
        _657 = ((_653 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_659);
        _659 = _657;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _659) -> [return: bb371, unwind continue];
    }

    bb371: {
        StorageDead(_659);
        StorageDead(_657);
        StorageDead(_652);
        StorageDead(_651);
        StorageDead(_650);
        goto -> bb584;
    }

    bb372: {
        StorageDead(_652);
        StorageDead(_651);
        _649 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _650) -> [return: bb373, unwind continue];
    }

    bb373: {
        StorageDead(_650);
        _661 = discriminant(_649);
        switchInt(move _661) -> [0: bb374, 1: bb375, otherwise: bb5];
    }

    bb374: {
        StorageLive(_665);
        _665 = ((_649 as Continue).0: i128);
        _648 = _665;
        StorageDead(_665);
        (((*_2).1: state::perp_market::AMM).19: i128) = move _648;
        StorageDead(_648);
        StorageDead(_653);
        StorageDead(_649);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        _669 = (((*_2).1: state::perp_market::AMM).22: i128);
        StorageLive(_670);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        _673 = ((*_1).3: i64);
        _672 = <i64 as Cast>::cast::<i128>(move _673) -> [return: bb377, unwind continue];
    }

    bb375: {
        StorageLive(_662);
        _662 = ((_649 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_664);
        _664 = _662;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _664) -> [return: bb376, unwind continue];
    }

    bb376: {
        StorageDead(_664);
        StorageDead(_662);
        goto -> bb584;
    }

    bb377: {
        StorageDead(_673);
        _671 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _672) -> [return: bb378, unwind continue];
    }

    bb378: {
        StorageDead(_672);
        _674 = discriminant(_671);
        switchInt(move _674) -> [0: bb379, 1: bb380, otherwise: bb5];
    }

    bb379: {
        StorageLive(_678);
        _678 = ((_671 as Continue).0: i128);
        _670 = _678;
        StorageDead(_678);
        _668 = <i128 as SafeMath>::safe_sub(move _669, move _670) -> [return: bb382, unwind continue];
    }

    bb380: {
        StorageLive(_675);
        _675 = ((_671 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_677);
        _677 = _675;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _677) -> [return: bb381, unwind continue];
    }

    bb381: {
        StorageDead(_677);
        StorageDead(_675);
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_668);
        goto -> bb583;
    }

    bb382: {
        StorageDead(_670);
        StorageDead(_669);
        _667 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _668) -> [return: bb383, unwind continue];
    }

    bb383: {
        StorageDead(_668);
        _679 = discriminant(_667);
        switchInt(move _679) -> [0: bb384, 1: bb385, otherwise: bb5];
    }

    bb384: {
        StorageLive(_683);
        _683 = ((_667 as Continue).0: i128);
        _666 = _683;
        StorageDead(_683);
        (((*_2).1: state::perp_market::AMM).22: i128) = move _666;
        StorageDead(_666);
        StorageDead(_671);
        StorageDead(_667);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        _687 = (((*_2).1: state::perp_market::AMM).21: i128);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        _691 = _43;
        _690 = <i64 as Cast>::cast::<i128>(move _691) -> [return: bb387, unwind continue];
    }

    bb385: {
        StorageLive(_680);
        _680 = ((_667 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_682);
        _682 = _680;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _682) -> [return: bb386, unwind continue];
    }

    bb386: {
        StorageDead(_682);
        StorageDead(_680);
        goto -> bb583;
    }

    bb387: {
        StorageDead(_691);
        _689 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _690) -> [return: bb388, unwind continue];
    }

    bb388: {
        StorageDead(_690);
        _692 = discriminant(_689);
        switchInt(move _692) -> [0: bb389, 1: bb390, otherwise: bb5];
    }

    bb389: {
        StorageLive(_696);
        _696 = ((_689 as Continue).0: i128);
        _688 = _696;
        StorageDead(_696);
        _686 = <i128 as SafeMath>::safe_add(move _687, move _688) -> [return: bb392, unwind continue];
    }

    bb390: {
        StorageLive(_693);
        _693 = ((_689 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_695);
        _695 = _693;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _695) -> [return: bb391, unwind continue];
    }

    bb391: {
        StorageDead(_695);
        StorageDead(_693);
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_686);
        goto -> bb582;
    }

    bb392: {
        StorageDead(_688);
        StorageDead(_687);
        _685 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _686) -> [return: bb393, unwind continue];
    }

    bb393: {
        StorageDead(_686);
        _697 = discriminant(_685);
        switchInt(move _697) -> [0: bb394, 1: bb395, otherwise: bb5];
    }

    bb394: {
        StorageLive(_701);
        _701 = ((_685 as Continue).0: i128);
        _684 = _701;
        StorageDead(_701);
        (((*_2).1: state::perp_market::AMM).21: i128) = move _684;
        StorageDead(_684);
        StorageDead(_689);
        StorageDead(_685);
        _334 = const ();
        goto -> bb458;
    }

    bb395: {
        StorageLive(_698);
        _698 = ((_685 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_700);
        _700 = _698;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _700) -> [return: bb396, unwind continue];
    }

    bb396: {
        StorageDead(_700);
        StorageDead(_698);
        goto -> bb582;
    }

    bb397: {
        StorageDead(_593);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        _705 = (((*_2).1: state::perp_market::AMM).13: i128);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        _709 = ((*_1).1: i64);
        _708 = <i64 as Cast>::cast::<i128>(move _709) -> [return: bb398, unwind continue];
    }

    bb398: {
        StorageDead(_709);
        _707 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _708) -> [return: bb399, unwind continue];
    }

    bb399: {
        StorageDead(_708);
        _710 = discriminant(_707);
        switchInt(move _710) -> [0: bb400, 1: bb401, otherwise: bb5];
    }

    bb400: {
        StorageLive(_714);
        _714 = ((_707 as Continue).0: i128);
        _706 = _714;
        StorageDead(_714);
        _704 = <i128 as SafeMath>::safe_sub(move _705, move _706) -> [return: bb403, unwind continue];
    }

    bb401: {
        StorageLive(_711);
        _711 = ((_707 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_713);
        _713 = _711;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _713) -> [return: bb402, unwind continue];
    }

    bb402: {
        StorageDead(_713);
        StorageDead(_711);
        StorageDead(_706);
        StorageDead(_705);
        StorageDead(_704);
        goto -> bb581;
    }

    bb403: {
        StorageDead(_706);
        StorageDead(_705);
        _703 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _704) -> [return: bb404, unwind continue];
    }

    bb404: {
        StorageDead(_704);
        _715 = discriminant(_703);
        switchInt(move _715) -> [0: bb405, 1: bb406, otherwise: bb5];
    }

    bb405: {
        StorageLive(_719);
        _719 = ((_703 as Continue).0: i128);
        _702 = _719;
        StorageDead(_719);
        (((*_2).1: state::perp_market::AMM).13: i128) = move _702;
        StorageDead(_702);
        StorageDead(_707);
        StorageDead(_703);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        _723 = (((*_2).1: state::perp_market::AMM).14: i128);
        StorageLive(_724);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        _727 = _30;
        _726 = <i64 as Cast>::cast::<i128>(move _727) -> [return: bb408, unwind continue];
    }

    bb406: {
        StorageLive(_716);
        _716 = ((_703 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_718);
        _718 = _716;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _718) -> [return: bb407, unwind continue];
    }

    bb407: {
        StorageDead(_718);
        StorageDead(_716);
        goto -> bb581;
    }

    bb408: {
        StorageDead(_727);
        _725 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _726) -> [return: bb409, unwind continue];
    }

    bb409: {
        StorageDead(_726);
        _728 = discriminant(_725);
        switchInt(move _728) -> [0: bb410, 1: bb411, otherwise: bb5];
    }

    bb410: {
        StorageLive(_732);
        _732 = ((_725 as Continue).0: i128);
        _724 = _732;
        StorageDead(_732);
        _722 = <i128 as SafeMath>::safe_add(move _723, move _724) -> [return: bb413, unwind continue];
    }

    bb411: {
        StorageLive(_729);
        _729 = ((_725 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_731);
        _731 = _729;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _731) -> [return: bb412, unwind continue];
    }

    bb412: {
        StorageDead(_731);
        StorageDead(_729);
        StorageDead(_724);
        StorageDead(_723);
        StorageDead(_722);
        goto -> bb580;
    }

    bb413: {
        StorageDead(_724);
        StorageDead(_723);
        _721 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _722) -> [return: bb414, unwind continue];
    }

    bb414: {
        StorageDead(_722);
        _733 = discriminant(_721);
        switchInt(move _733) -> [0: bb415, 1: bb416, otherwise: bb5];
    }

    bb415: {
        StorageLive(_737);
        _737 = ((_721 as Continue).0: i128);
        _720 = _737;
        StorageDead(_737);
        (((*_2).1: state::perp_market::AMM).14: i128) = move _720;
        StorageDead(_720);
        StorageDead(_725);
        StorageDead(_721);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        _741 = (((*_2).1: state::perp_market::AMM).19: i128);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        _745 = ((*_1).4: i64);
        _744 = <i64 as Cast>::cast::<i128>(move _745) -> [return: bb418, unwind continue];
    }

    bb416: {
        StorageLive(_734);
        _734 = ((_721 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_736);
        _736 = _734;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _736) -> [return: bb417, unwind continue];
    }

    bb417: {
        StorageDead(_736);
        StorageDead(_734);
        goto -> bb580;
    }

    bb418: {
        StorageDead(_745);
        _743 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _744) -> [return: bb419, unwind continue];
    }

    bb419: {
        StorageDead(_744);
        _746 = discriminant(_743);
        switchInt(move _746) -> [0: bb420, 1: bb421, otherwise: bb5];
    }

    bb420: {
        StorageLive(_750);
        _750 = ((_743 as Continue).0: i128);
        _742 = _750;
        StorageDead(_750);
        _740 = <i128 as SafeMath>::safe_sub(move _741, move _742) -> [return: bb423, unwind continue];
    }

    bb421: {
        StorageLive(_747);
        _747 = ((_743 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_749);
        _749 = _747;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _749) -> [return: bb422, unwind continue];
    }

    bb422: {
        StorageDead(_749);
        StorageDead(_747);
        StorageDead(_742);
        StorageDead(_741);
        StorageDead(_740);
        goto -> bb579;
    }

    bb423: {
        StorageDead(_742);
        StorageDead(_741);
        _739 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _740) -> [return: bb424, unwind continue];
    }

    bb424: {
        StorageDead(_740);
        _751 = discriminant(_739);
        switchInt(move _751) -> [0: bb425, 1: bb426, otherwise: bb5];
    }

    bb425: {
        StorageLive(_755);
        _755 = ((_739 as Continue).0: i128);
        _738 = _755;
        StorageDead(_755);
        (((*_2).1: state::perp_market::AMM).19: i128) = move _738;
        StorageDead(_738);
        StorageDead(_743);
        StorageDead(_739);
        StorageLive(_756);
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        _759 = (((*_2).1: state::perp_market::AMM).20: i128);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        _763 = _42;
        _762 = <i64 as Cast>::cast::<i128>(move _763) -> [return: bb428, unwind continue];
    }

    bb426: {
        StorageLive(_752);
        _752 = ((_739 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_754);
        _754 = _752;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _754) -> [return: bb427, unwind continue];
    }

    bb427: {
        StorageDead(_754);
        StorageDead(_752);
        goto -> bb579;
    }

    bb428: {
        StorageDead(_763);
        _761 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _762) -> [return: bb429, unwind continue];
    }

    bb429: {
        StorageDead(_762);
        _764 = discriminant(_761);
        switchInt(move _764) -> [0: bb430, 1: bb431, otherwise: bb5];
    }

    bb430: {
        StorageLive(_768);
        _768 = ((_761 as Continue).0: i128);
        _760 = _768;
        StorageDead(_768);
        _758 = <i128 as SafeMath>::safe_add(move _759, move _760) -> [return: bb433, unwind continue];
    }

    bb431: {
        StorageLive(_765);
        _765 = ((_761 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_767);
        _767 = _765;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _767) -> [return: bb432, unwind continue];
    }

    bb432: {
        StorageDead(_767);
        StorageDead(_765);
        StorageDead(_760);
        StorageDead(_759);
        StorageDead(_758);
        goto -> bb578;
    }

    bb433: {
        StorageDead(_760);
        StorageDead(_759);
        _757 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _758) -> [return: bb434, unwind continue];
    }

    bb434: {
        StorageDead(_758);
        _769 = discriminant(_757);
        switchInt(move _769) -> [0: bb435, 1: bb436, otherwise: bb5];
    }

    bb435: {
        StorageLive(_773);
        _773 = ((_757 as Continue).0: i128);
        _756 = _773;
        StorageDead(_773);
        (((*_2).1: state::perp_market::AMM).20: i128) = move _756;
        StorageDead(_756);
        StorageDead(_761);
        StorageDead(_757);
        StorageLive(_774);
        StorageLive(_775);
        StorageLive(_776);
        StorageLive(_777);
        _777 = (((*_2).1: state::perp_market::AMM).21: i128);
        StorageLive(_778);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        _781 = ((*_1).3: i64);
        _780 = <i64 as Cast>::cast::<i128>(move _781) -> [return: bb438, unwind continue];
    }

    bb436: {
        StorageLive(_770);
        _770 = ((_757 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_772);
        _772 = _770;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _772) -> [return: bb437, unwind continue];
    }

    bb437: {
        StorageDead(_772);
        StorageDead(_770);
        goto -> bb578;
    }

    bb438: {
        StorageDead(_781);
        _779 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _780) -> [return: bb439, unwind continue];
    }

    bb439: {
        StorageDead(_780);
        _782 = discriminant(_779);
        switchInt(move _782) -> [0: bb440, 1: bb441, otherwise: bb5];
    }

    bb440: {
        StorageLive(_786);
        _786 = ((_779 as Continue).0: i128);
        _778 = _786;
        StorageDead(_786);
        _776 = <i128 as SafeMath>::safe_sub(move _777, move _778) -> [return: bb443, unwind continue];
    }

    bb441: {
        StorageLive(_783);
        _783 = ((_779 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_785);
        _785 = _783;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _785) -> [return: bb442, unwind continue];
    }

    bb442: {
        StorageDead(_785);
        StorageDead(_783);
        StorageDead(_778);
        StorageDead(_777);
        StorageDead(_776);
        goto -> bb577;
    }

    bb443: {
        StorageDead(_778);
        StorageDead(_777);
        _775 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _776) -> [return: bb444, unwind continue];
    }

    bb444: {
        StorageDead(_776);
        _787 = discriminant(_775);
        switchInt(move _787) -> [0: bb445, 1: bb446, otherwise: bb5];
    }

    bb445: {
        StorageLive(_791);
        _791 = ((_775 as Continue).0: i128);
        _774 = _791;
        StorageDead(_791);
        (((*_2).1: state::perp_market::AMM).21: i128) = move _774;
        StorageDead(_774);
        StorageDead(_779);
        StorageDead(_775);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        _795 = (((*_2).1: state::perp_market::AMM).22: i128);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        StorageLive(_799);
        _799 = _43;
        _798 = <i64 as Cast>::cast::<i128>(move _799) -> [return: bb448, unwind continue];
    }

    bb446: {
        StorageLive(_788);
        _788 = ((_775 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_790);
        _790 = _788;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _790) -> [return: bb447, unwind continue];
    }

    bb447: {
        StorageDead(_790);
        StorageDead(_788);
        goto -> bb577;
    }

    bb448: {
        StorageDead(_799);
        _797 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _798) -> [return: bb449, unwind continue];
    }

    bb449: {
        StorageDead(_798);
        _800 = discriminant(_797);
        switchInt(move _800) -> [0: bb450, 1: bb451, otherwise: bb5];
    }

    bb450: {
        StorageLive(_804);
        _804 = ((_797 as Continue).0: i128);
        _796 = _804;
        StorageDead(_804);
        _794 = <i128 as SafeMath>::safe_add(move _795, move _796) -> [return: bb453, unwind continue];
    }

    bb451: {
        StorageLive(_801);
        _801 = ((_797 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_803);
        _803 = _801;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _803) -> [return: bb452, unwind continue];
    }

    bb452: {
        StorageDead(_803);
        StorageDead(_801);
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_794);
        goto -> bb576;
    }

    bb453: {
        StorageDead(_796);
        StorageDead(_795);
        _793 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _794) -> [return: bb454, unwind continue];
    }

    bb454: {
        StorageDead(_794);
        _805 = discriminant(_793);
        switchInt(move _805) -> [0: bb455, 1: bb456, otherwise: bb5];
    }

    bb455: {
        StorageLive(_809);
        _809 = ((_793 as Continue).0: i128);
        _792 = _809;
        StorageDead(_809);
        (((*_2).1: state::perp_market::AMM).22: i128) = move _792;
        StorageDead(_792);
        StorageDead(_797);
        StorageDead(_793);
        _334 = const ();
        goto -> bb458;
    }

    bb456: {
        StorageLive(_806);
        _806 = ((_793 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_808);
        _808 = _806;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _808) -> [return: bb457, unwind continue];
    }

    bb457: {
        StorageDead(_808);
        StorageDead(_806);
        goto -> bb576;
    }

    bb458: {
        StorageDead(_592);
        goto -> bb459;
    }

    bb459: {
        StorageDead(_334);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        _812 = &(*_1);
        _811 = PerpPosition::get_direction(move _812) -> [return: bb460, unwind continue];
    }

    bb460: {
        StorageDead(_812);
        _813 = discriminant(_811);
        switchInt(move _813) -> [0: bb462, 1: bb495, otherwise: bb461];
    }

    bb461: {
        _810 = const ();
        goto -> bb521;
    }

    bb462: {
        StorageLive(_815);
        StorageLive(_816);
        _816 = ((*_1).1: i64);
        _815 = Ne(move _816, const 0_i64);
        switchInt(move _815) -> [0: bb464, otherwise: bb463];
    }

    bb463: {
        StorageDead(_816);
        StorageDead(_815);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        StorageLive(_824);
        _824 = ((*_1).0: i64);
        _823 = <i64 as Cast>::cast::<i128>(move _824) -> [return: bb465, unwind continue];
    }

    bb464: {
        StorageDead(_816);
        StorageDead(_815);
        goto -> bb461;
    }

    bb465: {
        StorageDead(_824);
        _822 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _823) -> [return: bb466, unwind continue];
    }

    bb466: {
        StorageDead(_823);
        _825 = discriminant(_822);
        switchInt(move _825) -> [0: bb467, 1: bb468, otherwise: bb5];
    }

    bb467: {
        StorageLive(_829);
        _829 = ((_822 as Continue).0: i128);
        _821 = _829;
        StorageDead(_829);
        StorageLive(_830);
        _830 = (((*_2).1: state::perp_market::AMM).34: i128);
        _820 = Eq(move _821, move _830);
        switchInt(move _820) -> [0: bb471, otherwise: bb470];
    }

    bb468: {
        StorageLive(_826);
        _826 = ((_822 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_828);
        _828 = _826;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _828) -> [return: bb469, unwind continue];
    }

    bb469: {
        StorageDead(_828);
        StorageDead(_826);
        StorageDead(_822);
        StorageDead(_821);
        goto -> bb573;
    }

    bb470: {
        StorageDead(_830);
        StorageDead(_822);
        StorageDead(_821);
        StorageLive(_831);
        _831 = ();
        _819 = std::result::Result::<(), error::ErrorCode>::Ok(move _831);
        StorageDead(_831);
        goto -> bb490;
    }

    bb471: {
        StorageDead(_830);
        StorageDead(_822);
        StorageDead(_821);
        StorageLive(_832);
        _832 = error::ErrorCode::InvalidPositionLastFundingRate;
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        _1049 = const _;
        _843 = &(*_1049);
        _842 = &(*_843);
        _841 = move _842 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_842);
        StorageLive(_845);
        StorageLive(_846);
        StorageLive(_847);
        StorageLive(_848);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        _851 = &_832;
        _850 = &(*_851);
        _849 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _850) -> [return: bb472, unwind continue];
    }

    bb472: {
        StorageDead(_850);
        _848 = [move _849];
        StorageDead(_849);
        _847 = &_848;
        _846 = &(*_847);
        _845 = move _846 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_846);
        _840 = Arguments::<'_>::new_v1(move _841, move _845) -> [return: bb473, unwind continue];
    }

    bb473: {
        StorageDead(_845);
        StorageDead(_841);
        _839 = format(move _840) -> [return: bb474, unwind continue];
    }

    bb474: {
        StorageDead(_840);
        StorageDead(_851);
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_843);
        _838 = move _839;
        StorageDead(_839);
        _837 = &_838;
        _836 = &(*_837);
        _835 = <String as Deref>::deref(move _836) -> [return: bb475, unwind: bb643];
    }

    bb475: {
        _834 = &(*_835);
        StorageDead(_836);
        _833 = solana_program::log::sol_log(move _834) -> [return: bb476, unwind: bb643];
    }

    bb476: {
        StorageDead(_834);
        drop(_838) -> [return: bb477, unwind: bb644];
    }

    bb477: {
        StorageDead(_838);
        StorageDead(_837);
        StorageDead(_835);
        StorageDead(_833);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        _1048 = const _;
        _862 = &(*_1048);
        _861 = &(*_862);
        _860 = move _861 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_861);
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        StorageLive(_867);
        StorageLive(_868);
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        _874 = ((*_1).0: i64);
        _873 = <i64 as Cast>::cast::<i128>(move _874) -> [return: bb478, unwind continue];
    }

    bb478: {
        StorageDead(_874);
        _872 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _873) -> [return: bb479, unwind continue];
    }

    bb479: {
        StorageDead(_873);
        _875 = discriminant(_872);
        switchInt(move _875) -> [0: bb480, 1: bb481, otherwise: bb5];
    }

    bb480: {
        StorageLive(_879);
        _879 = ((_872 as Continue).0: i128);
        _871 = _879;
        StorageDead(_879);
        _870 = &_871;
        _869 = &(*_870);
        _868 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _869) -> [return: bb483, unwind continue];
    }

    bb481: {
        StorageLive(_876);
        _876 = ((_872 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_878);
        _878 = _876;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _878) -> [return: bb482, unwind continue];
    }

    bb482: {
        StorageDead(_878);
        StorageDead(_876);
        StorageDead(_869);
        StorageDead(_868);
        StorageDead(_865);
        StorageDead(_864);
        StorageDead(_860);
        StorageDead(_859);
        StorageDead(_872);
        StorageDead(_871);
        StorageDead(_870);
        StorageDead(_867);
        StorageDead(_866);
        StorageDead(_862);
        StorageDead(_858);
        StorageDead(_855);
        StorageDead(_853);
        StorageDead(_857);
        StorageDead(_856);
        StorageDead(_854);
        StorageDead(_852);
        StorageDead(_832);
        goto -> bb573;
    }

    bb483: {
        StorageDead(_869);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        _882 = &(((*_2).1: state::perp_market::AMM).34: i128);
        _881 = &(*_882);
        _880 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _881) -> [return: bb484, unwind continue];
    }

    bb484: {
        StorageDead(_881);
        _867 = [move _868, move _880];
        StorageDead(_880);
        StorageDead(_868);
        _866 = &_867;
        _865 = &(*_866);
        _864 = move _865 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_865);
        _859 = Arguments::<'_>::new_v1(move _860, move _864) -> [return: bb485, unwind continue];
    }

    bb485: {
        StorageDead(_864);
        StorageDead(_860);
        _858 = format(move _859) -> [return: bb486, unwind continue];
    }

    bb486: {
        StorageDead(_859);
        StorageDead(_882);
        StorageDead(_872);
        StorageDead(_871);
        StorageDead(_870);
        StorageDead(_867);
        StorageDead(_866);
        StorageDead(_862);
        _857 = move _858;
        StorageDead(_858);
        _856 = &_857;
        _855 = &(*_856);
        _854 = <String as Deref>::deref(move _855) -> [return: bb487, unwind: bb642];
    }

    bb487: {
        _853 = &(*_854);
        StorageDead(_855);
        _852 = solana_program::log::sol_log(move _853) -> [return: bb488, unwind: bb642];
    }

    bb488: {
        StorageDead(_853);
        drop(_857) -> [return: bb489, unwind: bb644];
    }

    bb489: {
        StorageDead(_857);
        StorageDead(_856);
        StorageDead(_854);
        StorageDead(_852);
        StorageLive(_883);
        _883 = _832;
        _819 = std::result::Result::<(), error::ErrorCode>::Err(move _883);
        StorageDead(_883);
        StorageDead(_832);
        goto -> bb490;
    }

    bb490: {
        StorageDead(_820);
        _818 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _819) -> [return: bb491, unwind continue];
    }

    bb491: {
        StorageDead(_819);
        _884 = discriminant(_818);
        switchInt(move _884) -> [0: bb492, 1: bb493, otherwise: bb5];
    }

    bb492: {
        StorageLive(_888);
        _888 = ((_818 as Continue).0: ());
        _817 = _888;
        StorageDead(_888);
        StorageDead(_818);
        StorageDead(_817);
        _810 = const ();
        goto -> bb521;
    }

    bb493: {
        StorageLive(_885);
        _885 = ((_818 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_887);
        _887 = _885;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _887) -> [return: bb494, unwind continue];
    }

    bb494: {
        StorageDead(_887);
        StorageDead(_885);
        goto -> bb574;
    }

    bb495: {
        StorageLive(_889);
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        _893 = ((*_1).0: i64);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        _897 = (((*_2).1: state::perp_market::AMM).35: i128);
        _896 = <i128 as Cast>::cast::<i64>(move _897) -> [return: bb496, unwind continue];
    }

    bb496: {
        StorageDead(_897);
        _895 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _896) -> [return: bb497, unwind continue];
    }

    bb497: {
        StorageDead(_896);
        _898 = discriminant(_895);
        switchInt(move _898) -> [0: bb498, 1: bb499, otherwise: bb5];
    }

    bb498: {
        StorageLive(_902);
        _902 = ((_895 as Continue).0: i64);
        _894 = _902;
        StorageDead(_902);
        _892 = Eq(move _893, move _894);
        switchInt(move _892) -> [0: bb502, otherwise: bb501];
    }

    bb499: {
        StorageLive(_899);
        _899 = ((_895 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_901);
        _901 = _899;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _901) -> [return: bb500, unwind continue];
    }

    bb500: {
        StorageDead(_901);
        StorageDead(_899);
        StorageDead(_895);
        StorageDead(_894);
        StorageDead(_893);
        StorageDead(_892);
        StorageDead(_891);
        goto -> bb572;
    }

    bb501: {
        StorageDead(_895);
        StorageDead(_894);
        StorageDead(_893);
        StorageLive(_903);
        _903 = ();
        _891 = std::result::Result::<(), error::ErrorCode>::Ok(move _903);
        StorageDead(_903);
        goto -> bb516;
    }

    bb502: {
        StorageDead(_895);
        StorageDead(_894);
        StorageDead(_893);
        StorageLive(_904);
        _904 = error::ErrorCode::InvalidPositionLastFundingRate;
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        _1047 = const _;
        _915 = &(*_1047);
        _914 = &(*_915);
        _913 = move _914 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_914);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        _923 = &_904;
        _922 = &(*_923);
        _921 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _922) -> [return: bb503, unwind continue];
    }

    bb503: {
        StorageDead(_922);
        _920 = [move _921];
        StorageDead(_921);
        _919 = &_920;
        _918 = &(*_919);
        _917 = move _918 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_918);
        _912 = Arguments::<'_>::new_v1(move _913, move _917) -> [return: bb504, unwind continue];
    }

    bb504: {
        StorageDead(_917);
        StorageDead(_913);
        _911 = format(move _912) -> [return: bb505, unwind continue];
    }

    bb505: {
        StorageDead(_912);
        StorageDead(_923);
        StorageDead(_920);
        StorageDead(_919);
        StorageDead(_915);
        _910 = move _911;
        StorageDead(_911);
        _909 = &_910;
        _908 = &(*_909);
        _907 = <String as Deref>::deref(move _908) -> [return: bb506, unwind: bb641];
    }

    bb506: {
        _906 = &(*_907);
        StorageDead(_908);
        _905 = solana_program::log::sol_log(move _906) -> [return: bb507, unwind: bb641];
    }

    bb507: {
        StorageDead(_906);
        drop(_910) -> [return: bb508, unwind: bb644];
    }

    bb508: {
        StorageDead(_910);
        StorageDead(_909);
        StorageDead(_907);
        StorageDead(_905);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        _1046 = const _;
        _934 = &(*_1046);
        _933 = &(*_934);
        _932 = move _933 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_933);
        StorageLive(_936);
        StorageLive(_937);
        StorageLive(_938);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        _942 = &((*_1).0: i64);
        _941 = &(*_942);
        _940 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _941) -> [return: bb509, unwind continue];
    }

    bb509: {
        StorageDead(_941);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        _945 = &(((*_2).1: state::perp_market::AMM).35: i128);
        _944 = &(*_945);
        _943 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _944) -> [return: bb510, unwind continue];
    }

    bb510: {
        StorageDead(_944);
        _939 = [move _940, move _943];
        StorageDead(_943);
        StorageDead(_940);
        _938 = &_939;
        _937 = &(*_938);
        _936 = move _937 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_937);
        _931 = Arguments::<'_>::new_v1(move _932, move _936) -> [return: bb511, unwind continue];
    }

    bb511: {
        StorageDead(_936);
        StorageDead(_932);
        _930 = format(move _931) -> [return: bb512, unwind continue];
    }

    bb512: {
        StorageDead(_931);
        StorageDead(_945);
        StorageDead(_942);
        StorageDead(_939);
        StorageDead(_938);
        StorageDead(_934);
        _929 = move _930;
        StorageDead(_930);
        _928 = &_929;
        _927 = &(*_928);
        _926 = <String as Deref>::deref(move _927) -> [return: bb513, unwind: bb640];
    }

    bb513: {
        _925 = &(*_926);
        StorageDead(_927);
        _924 = solana_program::log::sol_log(move _925) -> [return: bb514, unwind: bb640];
    }

    bb514: {
        StorageDead(_925);
        drop(_929) -> [return: bb515, unwind: bb644];
    }

    bb515: {
        StorageDead(_929);
        StorageDead(_928);
        StorageDead(_926);
        StorageDead(_924);
        StorageLive(_946);
        _946 = _904;
        _891 = std::result::Result::<(), error::ErrorCode>::Err(move _946);
        StorageDead(_946);
        StorageDead(_904);
        goto -> bb516;
    }

    bb516: {
        StorageDead(_892);
        _890 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _891) -> [return: bb517, unwind continue];
    }

    bb517: {
        StorageDead(_891);
        _947 = discriminant(_890);
        switchInt(move _947) -> [0: bb518, 1: bb519, otherwise: bb5];
    }

    bb518: {
        StorageLive(_951);
        _951 = ((_890 as Continue).0: ());
        _889 = _951;
        StorageDead(_951);
        StorageDead(_890);
        StorageDead(_889);
        _810 = const ();
        goto -> bb521;
    }

    bb519: {
        StorageLive(_948);
        _948 = ((_890 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_950);
        _950 = _948;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _950) -> [return: bb520, unwind continue];
    }

    bb520: {
        StorageDead(_950);
        StorageDead(_948);
        goto -> bb572;
    }

    bb521: {
        StorageDead(_811);
        StorageDead(_810);
        StorageLive(_952);
        _953 = discriminant(_20);
        switchInt(move _953) -> [3: bb522, otherwise: bb523];
    }

    bb522: {
        ((*_1).0: i64) = const 0_i64;
        _952 = const ();
        goto -> bb543;
    }

    bb523: {
        StorageLive(_954);
        _955 = discriminant(_20);
        switchInt(move _955) -> [0: bb525, 1: bb525, 4: bb525, otherwise: bb524];
    }

    bb524: {
        _954 = const false;
        goto -> bb526;
    }

    bb525: {
        _954 = const true;
        goto -> bb526;
    }

    bb526: {
        switchInt(move _954) -> [0: bb541, otherwise: bb527];
    }

    bb527: {
        StorageLive(_956);
        StorageLive(_957);
        _957 = _30;
        _956 = Gt(move _957, const 0_i64);
        switchInt(move _956) -> [0: bb534, otherwise: bb528];
    }

    bb528: {
        StorageDead(_957);
        StorageLive(_958);
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        _961 = (((*_2).1: state::perp_market::AMM).34: i128);
        _960 = <i128 as Cast>::cast::<i64>(move _961) -> [return: bb529, unwind continue];
    }

    bb529: {
        StorageDead(_961);
        _959 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _960) -> [return: bb530, unwind continue];
    }

    bb530: {
        StorageDead(_960);
        _962 = discriminant(_959);
        switchInt(move _962) -> [0: bb531, 1: bb532, otherwise: bb5];
    }

    bb531: {
        StorageLive(_966);
        _966 = ((_959 as Continue).0: i64);
        _958 = _966;
        StorageDead(_966);
        ((*_1).0: i64) = move _958;
        StorageDead(_958);
        StorageDead(_959);
        _952 = const ();
        goto -> bb540;
    }

    bb532: {
        StorageLive(_963);
        _963 = ((_959 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_965);
        _965 = _963;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _965) -> [return: bb533, unwind continue];
    }

    bb533: {
        StorageDead(_965);
        StorageDead(_963);
        StorageDead(_958);
        StorageDead(_959);
        goto -> bb571;
    }

    bb534: {
        StorageDead(_957);
        StorageLive(_967);
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        _970 = (((*_2).1: state::perp_market::AMM).35: i128);
        _969 = <i128 as Cast>::cast::<i64>(move _970) -> [return: bb535, unwind continue];
    }

    bb535: {
        StorageDead(_970);
        _968 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _969) -> [return: bb536, unwind continue];
    }

    bb536: {
        StorageDead(_969);
        _971 = discriminant(_968);
        switchInt(move _971) -> [0: bb537, 1: bb538, otherwise: bb5];
    }

    bb537: {
        StorageLive(_975);
        _975 = ((_968 as Continue).0: i64);
        _967 = _975;
        StorageDead(_975);
        ((*_1).0: i64) = move _967;
        StorageDead(_967);
        StorageDead(_968);
        _952 = const ();
        goto -> bb540;
    }

    bb538: {
        StorageLive(_972);
        _972 = ((_968 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_974);
        _974 = _972;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _974) -> [return: bb539, unwind continue];
    }

    bb539: {
        StorageDead(_974);
        StorageDead(_972);
        StorageDead(_967);
        StorageDead(_968);
        goto -> bb571;
    }

    bb540: {
        StorageDead(_956);
        goto -> bb542;
    }

    bb541: {
        _952 = const ();
        goto -> bb542;
    }

    bb542: {
        StorageDead(_954);
        goto -> bb543;
    }

    bb543: {
        StorageDead(_952);
        StorageLive(_976);
        StorageLive(_977);
        StorageLive(_978);
        StorageLive(_979);
        StorageLive(_980);
        StorageLive(_981);
        StorageLive(_982);
        StorageLive(_983);
        _983 = ((*_1).1: i64);
        _982 = core::num::<impl i64>::unsigned_abs(move _983) -> [return: bb544, unwind continue];
    }

    bb544: {
        StorageDead(_983);
        StorageLive(_984);
        _984 = (((*_2).1: state::perp_market::AMM).52: u64);
        _981 = math::orders::is_multiple_of_step_size(move _982, move _984) -> [return: bb545, unwind continue];
    }

    bb545: {
        StorageDead(_984);
        StorageDead(_982);
        _980 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _981) -> [return: bb546, unwind continue];
    }

    bb546: {
        StorageDead(_981);
        _985 = discriminant(_980);
        switchInt(move _985) -> [0: bb547, 1: bb548, otherwise: bb5];
    }

    bb547: {
        StorageLive(_989);
        _989 = ((_980 as Continue).0: bool);
        _979 = _989;
        StorageDead(_989);
        switchInt(move _979) -> [0: bb551, otherwise: bb550];
    }

    bb548: {
        StorageLive(_986);
        _986 = ((_980 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_988);
        _988 = _986;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _988) -> [return: bb549, unwind continue];
    }

    bb549: {
        StorageDead(_988);
        StorageDead(_986);
        StorageDead(_980);
        StorageDead(_979);
        StorageDead(_978);
        goto -> bb570;
    }

    bb550: {
        StorageDead(_980);
        StorageLive(_990);
        _990 = ();
        _978 = std::result::Result::<(), error::ErrorCode>::Ok(move _990);
        StorageDead(_990);
        goto -> bb565;
    }

    bb551: {
        StorageDead(_980);
        StorageLive(_991);
        _991 = error::ErrorCode::InvalidPerpPositionDetected;
        StorageLive(_992);
        StorageLive(_993);
        StorageLive(_994);
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        _1045 = const _;
        _1002 = &(*_1045);
        _1001 = &(*_1002);
        _1000 = move _1001 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1001);
        StorageLive(_1004);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        _1010 = &_991;
        _1009 = &(*_1010);
        _1008 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _1009) -> [return: bb552, unwind continue];
    }

    bb552: {
        StorageDead(_1009);
        _1007 = [move _1008];
        StorageDead(_1008);
        _1006 = &_1007;
        _1005 = &(*_1006);
        _1004 = move _1005 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1005);
        _999 = Arguments::<'_>::new_v1(move _1000, move _1004) -> [return: bb553, unwind continue];
    }

    bb553: {
        StorageDead(_1004);
        StorageDead(_1000);
        _998 = format(move _999) -> [return: bb554, unwind continue];
    }

    bb554: {
        StorageDead(_999);
        StorageDead(_1010);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1002);
        _997 = move _998;
        StorageDead(_998);
        _996 = &_997;
        _995 = &(*_996);
        _994 = <String as Deref>::deref(move _995) -> [return: bb555, unwind: bb639];
    }

    bb555: {
        _993 = &(*_994);
        StorageDead(_995);
        _992 = solana_program::log::sol_log(move _993) -> [return: bb556, unwind: bb639];
    }

    bb556: {
        StorageDead(_993);
        drop(_997) -> [return: bb557, unwind: bb644];
    }

    bb557: {
        StorageDead(_997);
        StorageDead(_996);
        StorageDead(_994);
        StorageDead(_992);
        StorageLive(_1011);
        StorageLive(_1012);
        StorageLive(_1013);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        _1044 = const _;
        _1021 = &(*_1044);
        _1020 = &(*_1021);
        _1019 = move _1020 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1020);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        StorageLive(_1028);
        StorageLive(_1029);
        _1029 = &((*_1).1: i64);
        _1028 = &(*_1029);
        _1027 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _1028) -> [return: bb558, unwind continue];
    }

    bb558: {
        StorageDead(_1028);
        StorageLive(_1030);
        StorageLive(_1031);
        StorageLive(_1032);
        _1032 = &_30;
        _1031 = &(*_1032);
        _1030 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _1031) -> [return: bb559, unwind continue];
    }

    bb559: {
        StorageDead(_1031);
        _1026 = [move _1027, move _1030];
        StorageDead(_1030);
        StorageDead(_1027);
        _1025 = &_1026;
        _1024 = &(*_1025);
        _1023 = move _1024 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1024);
        _1018 = Arguments::<'_>::new_v1(move _1019, move _1023) -> [return: bb560, unwind continue];
    }

    bb560: {
        StorageDead(_1023);
        StorageDead(_1019);
        _1017 = format(move _1018) -> [return: bb561, unwind continue];
    }

    bb561: {
        StorageDead(_1018);
        StorageDead(_1032);
        StorageDead(_1029);
        StorageDead(_1026);
        StorageDead(_1025);
        StorageDead(_1021);
        _1016 = move _1017;
        StorageDead(_1017);
        _1015 = &_1016;
        _1014 = &(*_1015);
        _1013 = <String as Deref>::deref(move _1014) -> [return: bb562, unwind: bb638];
    }

    bb562: {
        _1012 = &(*_1013);
        StorageDead(_1014);
        _1011 = solana_program::log::sol_log(move _1012) -> [return: bb563, unwind: bb638];
    }

    bb563: {
        StorageDead(_1012);
        drop(_1016) -> [return: bb564, unwind: bb644];
    }

    bb564: {
        StorageDead(_1016);
        StorageDead(_1015);
        StorageDead(_1013);
        StorageDead(_1011);
        StorageLive(_1033);
        _1033 = _991;
        _978 = std::result::Result::<(), error::ErrorCode>::Err(move _1033);
        StorageDead(_1033);
        StorageDead(_991);
        goto -> bb565;
    }

    bb565: {
        StorageDead(_979);
        _977 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _978) -> [return: bb566, unwind continue];
    }

    bb566: {
        StorageDead(_978);
        _1034 = discriminant(_977);
        switchInt(move _1034) -> [0: bb567, 1: bb568, otherwise: bb5];
    }

    bb567: {
        StorageLive(_1038);
        _1038 = ((_977 as Continue).0: ());
        _976 = _1038;
        StorageDead(_1038);
        StorageDead(_977);
        StorageDead(_976);
        StorageLive(_1039);
        _1039 = _30;
        ((*_1).1: i64) = move _1039;
        StorageDead(_1039);
        StorageLive(_1040);
        _1040 = _31;
        ((*_1).2: i64) = move _1040;
        StorageDead(_1040);
        StorageLive(_1041);
        _1041 = _42;
        ((*_1).4: i64) = move _1041;
        StorageDead(_1041);
        StorageLive(_1042);
        _1042 = _43;
        ((*_1).3: i64) = move _1042;
        StorageDead(_1042);
        StorageLive(_1043);
        _1043 = _44;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _1043);
        StorageDead(_1043);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_20);
        goto -> bb637;
    }

    bb568: {
        StorageLive(_1035);
        _1035 = ((_977 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1037);
        _1037 = _1035;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1037) -> [return: bb569, unwind continue];
    }

    bb569: {
        StorageDead(_1037);
        StorageDead(_1035);
        goto -> bb570;
    }

    bb570: {
        StorageDead(_977);
        StorageDead(_976);
        goto -> bb610;
    }

    bb571: {
        StorageDead(_956);
        StorageDead(_954);
        StorageDead(_952);
        goto -> bb610;
    }

    bb572: {
        StorageDead(_890);
        StorageDead(_889);
        goto -> bb575;
    }

    bb573: {
        StorageDead(_820);
        StorageDead(_819);
        goto -> bb574;
    }

    bb574: {
        StorageDead(_818);
        StorageDead(_817);
        goto -> bb575;
    }

    bb575: {
        StorageDead(_811);
        StorageDead(_810);
        goto -> bb610;
    }

    bb576: {
        StorageDead(_792);
        StorageDead(_797);
        StorageDead(_793);
        goto -> bb588;
    }

    bb577: {
        StorageDead(_774);
        StorageDead(_779);
        StorageDead(_775);
        goto -> bb588;
    }

    bb578: {
        StorageDead(_756);
        StorageDead(_761);
        StorageDead(_757);
        goto -> bb588;
    }

    bb579: {
        StorageDead(_738);
        StorageDead(_743);
        StorageDead(_739);
        goto -> bb588;
    }

    bb580: {
        StorageDead(_720);
        StorageDead(_725);
        StorageDead(_721);
        goto -> bb588;
    }

    bb581: {
        StorageDead(_702);
        StorageDead(_707);
        StorageDead(_703);
        goto -> bb588;
    }

    bb582: {
        StorageDead(_684);
        StorageDead(_689);
        StorageDead(_685);
        goto -> bb588;
    }

    bb583: {
        StorageDead(_666);
        StorageDead(_671);
        StorageDead(_667);
        goto -> bb588;
    }

    bb584: {
        StorageDead(_648);
        StorageDead(_653);
        StorageDead(_649);
        goto -> bb588;
    }

    bb585: {
        StorageDead(_630);
        StorageDead(_635);
        StorageDead(_631);
        goto -> bb588;
    }

    bb586: {
        StorageDead(_612);
        StorageDead(_617);
        StorageDead(_613);
        goto -> bb588;
    }

    bb587: {
        StorageDead(_594);
        StorageDead(_599);
        StorageDead(_595);
        goto -> bb588;
    }

    bb588: {
        StorageDead(_592);
        goto -> bb607;
    }

    bb589: {
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_567);
        goto -> bb590;
    }

    bb590: {
        StorageDead(_565);
        StorageDead(_573);
        StorageDead(_570);
        StorageDead(_566);
        goto -> bb599;
    }

    bb591: {
        StorageDead(_542);
        StorageDead(_541);
        StorageDead(_540);
        goto -> bb592;
    }

    bb592: {
        StorageDead(_538);
        StorageDead(_546);
        StorageDead(_543);
        StorageDead(_539);
        goto -> bb599;
    }

    bb593: {
        StorageDead(_520);
        StorageDead(_525);
        StorageDead(_521);
        goto -> bb599;
    }

    bb594: {
        StorageDead(_497);
        StorageDead(_496);
        StorageDead(_495);
        goto -> bb595;
    }

    bb595: {
        StorageDead(_493);
        StorageDead(_501);
        StorageDead(_498);
        StorageDead(_494);
        goto -> bb599;
    }

    bb596: {
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_468);
        goto -> bb597;
    }

    bb597: {
        StorageDead(_466);
        StorageDead(_474);
        StorageDead(_471);
        StorageDead(_467);
        goto -> bb599;
    }

    bb598: {
        StorageDead(_448);
        StorageDead(_453);
        StorageDead(_449);
        goto -> bb599;
    }

    bb599: {
        StorageDead(_446);
        goto -> bb607;
    }

    bb600: {
        StorageDead(_428);
        StorageDead(_433);
        StorageDead(_429);
        goto -> bb606;
    }

    bb601: {
        StorageDead(_410);
        StorageDead(_415);
        StorageDead(_411);
        goto -> bb606;
    }

    bb602: {
        StorageDead(_392);
        StorageDead(_397);
        StorageDead(_393);
        goto -> bb606;
    }

    bb603: {
        StorageDead(_374);
        StorageDead(_379);
        StorageDead(_375);
        goto -> bb606;
    }

    bb604: {
        StorageDead(_356);
        StorageDead(_361);
        StorageDead(_357);
        goto -> bb606;
    }

    bb605: {
        StorageDead(_338);
        StorageDead(_343);
        StorageDead(_339);
        goto -> bb606;
    }

    bb606: {
        StorageDead(_336);
        goto -> bb607;
    }

    bb607: {
        StorageDead(_334);
        goto -> bb610;
    }

    bb608: {
        StorageDead(_316);
        StorageDead(_321);
        StorageDead(_317);
        goto -> bb610;
    }

    bb609: {
        StorageDead(_281);
        goto -> bb610;
    }

    bb610: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb634;
    }

    bb611: {
        StorageDead(_264);
        StorageDead(_260);
        StorageDead(_259);
        goto -> bb616;
    }

    bb612: {
        StorageDead(_225);
        StorageDead(_224);
        goto -> bb613;
    }

    bb613: {
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb614;
    }

    bb614: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        goto -> bb615;
    }

    bb615: {
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_216);
        goto -> bb616;
    }

    bb616: {
        StorageDead(_215);
        goto -> bb617;
    }

    bb617: {
        StorageDead(_206);
        goto -> bb618;
    }

    bb618: {
        StorageDead(_197);
        goto -> bb633;
    }

    bb619: {
        StorageDead(_179);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb624;
    }

    bb620: {
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb621;
    }

    bb621: {
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb622;
    }

    bb622: {
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb623;
    }

    bb623: {
        StorageDead(_145);
        StorageDead(_142);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_132);
        goto -> bb624;
    }

    bb624: {
        StorageDead(_131);
        goto -> bb629;
    }

    bb625: {
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb626;
    }

    bb626: {
        StorageDead(_94);
        StorageDead(_93);
        goto -> bb627;
    }

    bb627: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb628;
    }

    bb628: {
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_88);
        goto -> bb629;
    }

    bb629: {
        StorageDead(_87);
        goto -> bb630;
    }

    bb630: {
        StorageDead(_78);
        goto -> bb631;
    }

    bb631: {
        StorageDead(_69);
        goto -> bb633;
    }

    bb632: {
        StorageDead(_47);
        goto -> bb633;
    }

    bb633: {
        StorageDead(_45);
        goto -> bb634;
    }

    bb634: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb635;
    }

    bb635: {
        StorageDead(_20);
        goto -> bb637;
    }

    bb636: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb637;
    }

    bb637: {
        return;
    }

    bb638 (cleanup): {
        drop(_1016) -> [return: bb644, unwind terminate(cleanup)];
    }

    bb639 (cleanup): {
        drop(_997) -> [return: bb644, unwind terminate(cleanup)];
    }

    bb640 (cleanup): {
        drop(_929) -> [return: bb644, unwind terminate(cleanup)];
    }

    bb641 (cleanup): {
        drop(_910) -> [return: bb644, unwind terminate(cleanup)];
    }

    bb642 (cleanup): {
        drop(_857) -> [return: bb644, unwind terminate(cleanup)];
    }

    bb643 (cleanup): {
        drop(_838) -> [return: bb644, unwind terminate(cleanup)];
    }

    bb644 (cleanup): {
        resume;
    }
}
