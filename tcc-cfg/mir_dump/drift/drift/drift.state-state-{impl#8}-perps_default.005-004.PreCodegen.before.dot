digraph Mir_0_4185 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn state::state::FeeStructure::perps_default() -&gt; state::state::FeeStructure<br align="left"/>let mut _1: [state::state::FeeTier; 10_usize];<br align="left"/>let mut _2: state::state::FeeTier;<br align="left"/>let mut _3: state::state::FeeTier;<br align="left"/>let _4: usize;<br align="left"/>let mut _5: usize;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: state::state::FeeTier;<br align="left"/>let _8: usize;<br align="left"/>let mut _9: usize;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: state::state::FeeTier;<br align="left"/>let _12: usize;<br align="left"/>let mut _13: usize;<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: state::state::FeeTier;<br align="left"/>let _16: usize;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: bool;<br align="left"/>let mut _19: state::state::FeeTier;<br align="left"/>let _20: usize;<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: state::state::FeeTier;<br align="left"/>let _24: usize;<br align="left"/>let mut _25: usize;<br align="left"/>let mut _26: bool;<br align="left"/>let mut _27: [state::state::FeeTier; 10_usize];<br align="left"/>let mut _28: state::state::OrderFillerRewardStructure;<br align="left"/>debug fee_tiers =&gt; _1;<br align="left"/>>;
    bb0__0_4185 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_1)<br/>StorageLive(_2)<br/></td></tr><tr><td align="left">_2 = &lt;state::state::FeeTier as Default&gt;::default()</td></tr></table>>];
    bb1__0_4185 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_1 = [move _2; 10]<br/>StorageDead(_2)<br/>StorageLive(_3)<br/>_3 = state::state::FeeTier { fee_numerator: const 100_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ }<br/>StorageLive(_4)<br/>_4 = const 0_usize<br/>_5 = Len(_1)<br/>_6 = Lt(_4, _5)<br/></td></tr><tr><td align="left">assert(move _6, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _5, _4)</td></tr></table>>];
    bb2__0_4185 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_1[_4] = move _3<br/>StorageDead(_3)<br/>StorageDead(_4)<br/>StorageLive(_7)<br/>_7 = state::state::FeeTier { fee_numerator: const 90_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ }<br/>StorageLive(_8)<br/>_8 = const 1_usize<br/>_9 = Len(_1)<br/>_10 = Lt(_8, _9)<br/></td></tr><tr><td align="left">assert(move _10, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _9, _8)</td></tr></table>>];
    bb3__0_4185 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_1[_8] = move _7<br/>StorageDead(_7)<br/>StorageDead(_8)<br/>StorageLive(_11)<br/>_11 = state::state::FeeTier { fee_numerator: const 80_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ }<br/>StorageLive(_12)<br/>_12 = const 2_usize<br/>_13 = Len(_1)<br/>_14 = Lt(_12, _13)<br/></td></tr><tr><td align="left">assert(move _14, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _13, _12)</td></tr></table>>];
    bb4__0_4185 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_1[_12] = move _11<br/>StorageDead(_11)<br/>StorageDead(_12)<br/>StorageLive(_15)<br/>_15 = state::state::FeeTier { fee_numerator: const 70_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ }<br/>StorageLive(_16)<br/>_16 = const 3_usize<br/>_17 = Len(_1)<br/>_18 = Lt(_16, _17)<br/></td></tr><tr><td align="left">assert(move _18, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _17, _16)</td></tr></table>>];
    bb5__0_4185 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_1[_16] = move _15<br/>StorageDead(_15)<br/>StorageDead(_16)<br/>StorageLive(_19)<br/>_19 = state::state::FeeTier { fee_numerator: const 60_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ }<br/>StorageLive(_20)<br/>_20 = const 4_usize<br/>_21 = Len(_1)<br/>_22 = Lt(_20, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _20)</td></tr></table>>];
    bb6__0_4185 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_1[_20] = move _19<br/>StorageDead(_19)<br/>StorageDead(_20)<br/>StorageLive(_23)<br/>_23 = state::state::FeeTier { fee_numerator: const 50_u32, fee_denominator: const _, maker_rebate_numerator: const 20_u32, maker_rebate_denominator: const _, referrer_reward_numerator: const 15_u32, referrer_reward_denominator: const _, referee_fee_numerator: const 5_u32, referee_fee_denominator: const _ }<br/>StorageLive(_24)<br/>_24 = const 5_usize<br/>_25 = Len(_1)<br/>_26 = Lt(_24, _25)<br/></td></tr><tr><td align="left">assert(move _26, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _25, _24)</td></tr></table>>];
    bb7__0_4185 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_1[_24] = move _23<br/>StorageDead(_23)<br/>StorageDead(_24)<br/>StorageLive(_27)<br/>_27 = _1<br/>StorageLive(_28)<br/>_28 = OrderFillerRewardStructure { reward_numerator: const 10_u32, reward_denominator: const _, time_based_reward_lower_bound: const 10000_u128 }<br/>_0 = state::state::FeeStructure { fee_tiers: move _27, filler_reward_structure: move _28, referrer_reward_epoch_upper_bound: const _, flat_filler_fee: const 10000_u64 }<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_1)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4185 -> bb1__0_4185 [label="return"];
    bb1__0_4185 -> bb2__0_4185 [label="success"];
    bb2__0_4185 -> bb3__0_4185 [label="success"];
    bb3__0_4185 -> bb4__0_4185 [label="success"];
    bb4__0_4185 -> bb5__0_4185 [label="success"];
    bb5__0_4185 -> bb6__0_4185 [label="success"];
    bb6__0_4185 -> bb7__0_4185 [label="success"];
}
