// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::has_room_for_new_order` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::has_room_for_new_order(_1: &User) -> bool {
    debug self => _1;
    let mut _0: bool;
    let _2: ();
    let mut _3: std::slice::Iter<'_, state::user::Order>;
    let mut _4: std::slice::Iter<'_, state::user::Order>;
    let mut _5: &[state::user::Order];
    let mut _6: &[state::user::Order; 32];
    let mut _7: std::slice::Iter<'_, state::user::Order>;
    let mut _8: ();
    let _9: ();
    let mut _10: std::option::Option<&state::user::Order>;
    let mut _11: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _12: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _13: isize;
    let mut _14: !;
    let mut _16: bool;
    let mut _17: &state::user::Order;
    let mut _18: !;
    scope 1 {
        debug iter => _7;
        let _15: &state::user::Order;
        scope 2 {
            debug order => _15;
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &((*_1).5: [state::user::Order; 32]);
        _5 = move _6 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_6);
        _4 = core::slice::<impl [Order]>::iter(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::slice::Iter<'_, Order> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_7);
        _7 = move _3;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &mut _7;
        _11 = &mut (*_12);
        _10 = <std::slice::Iter<'_, Order> as Iterator>::next(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_15);
        _15 = ((_10 as Some).0: &state::user::Order);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_15);
        _16 = Order::is_available(move _17) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _2 = const ();
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_2);
        _0 = const false;
        goto -> bb11;
    }

    bb8: {
        switchInt(move _16) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_17);
        _0 = const true;
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb11;
    }

    bb10: {
        StorageDead(_17);
        _9 = const ();
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        _8 = const ();
        goto -> bb3;
    }

    bb11: {
        return;
    }
}
