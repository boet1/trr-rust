// MIR for `keeper::place_signed_msg_taker_order` before PreCodegen

fn keeper::place_signed_msg_taker_order(_1: anchor_lang::prelude::Pubkey, _2: &mut RefMut<'_, User>, _3: &mut SignedMsgUserOrdersZeroCopyMut<'_>, _4: Vec<u8>, _5: &anchor_lang::prelude::AccountInfo<'_>, _6: &PerpMarketMap<'_>, _7: &SpotMarketMap<'_>, _8: &mut OracleMap<'_>, _9: Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, _10: &state::state::State, _11: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug taker_key => _1;
    debug taker => _2;
    debug signed_msg_account => _3;
    debug taker_order_params_message_bytes => _4;
    debug ix_sysvar => _5;
    debug perp_market_map => _6;
    debug spot_market_map => _7;
    debug oracle_map => _8;
    debug high_leverage_mode_config => _9;
    debug state => _10;
    debug is_delegate_signer => _11;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _12: u16;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _14: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _20: u16;
    let _21: ();
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _23: std::result::Result<(), error::ErrorCode>;
    let mut _24: bool;
    let mut _25: u16;
    let mut _26: ();
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 2];
    let _38: &[&str; 2];
    let _39: [&str; 2];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &error::ErrorCode;
    let _46: &error::ErrorCode;
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: error::ErrorCode;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, solana_program::instruction::Instruction>;
    let mut _58: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _59: usize;
    let mut _60: usize;
    let mut _61: u16;
    let mut _62: (usize, bool);
    let mut _63: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _70: bool;
    let mut _71: anchor_lang::prelude::Pubkey;
    let mut _72: &state::user::User;
    let mut _73: &std::cell::RefMut<'_, state::user::User>;
    let mut _74: anchor_lang::prelude::Pubkey;
    let mut _75: &state::user::User;
    let mut _76: &std::cell::RefMut<'_, state::user::User>;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, validation::sig_verification::VerifiedMessage>;
    let mut _79: std::result::Result<validation::sig_verification::VerifiedMessage, anchor_lang::error::Error>;
    let mut _80: &solana_program::instruction::Instruction;
    let _81: &solana_program::instruction::Instruction;
    let mut _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: u16;
    let mut _84: &[u8; 32];
    let _85: &[u8; 32];
    let mut _86: &[u8];
    let _87: &[u8];
    let _88: &[u8];
    let mut _89: &std::vec::Vec<u8>;
    let mut _90: std::ops::RangeFull;
    let mut _91: bool;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _97: ();
    let mut _98: bool;
    let _99: ();
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _101: std::result::Result<(), error::ErrorCode>;
    let mut _102: bool;
    let mut _103: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _104: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let _105: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _106: anchor_lang::prelude::Pubkey;
    let mut _107: ();
    let _109: ();
    let mut _110: &str;
    let _111: &str;
    let mut _112: &std::string::String;
    let _113: &std::string::String;
    let _114: std::string::String;
    let mut _116: std::fmt::Arguments<'_>;
    let mut _117: &[&str];
    let mut _118: &[&str; 2];
    let _119: &[&str; 2];
    let _120: [&str; 2];
    let mut _121: &[core::fmt::rt::Argument<'_>];
    let mut _122: &[core::fmt::rt::Argument<'_>; 1];
    let _123: &[core::fmt::rt::Argument<'_>; 1];
    let _124: [core::fmt::rt::Argument<'_>; 1];
    let mut _125: core::fmt::rt::Argument<'_>;
    let mut _126: &error::ErrorCode;
    let _127: &error::ErrorCode;
    let _128: ();
    let mut _129: &str;
    let _130: &str;
    let mut _131: error::ErrorCode;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _138: &[&[u8]];
    let mut _139: &[&[u8]; 3];
    let _140: &[&[u8]; 3];
    let _141: [&[u8]; 3];
    let mut _142: &[u8];
    let _143: &[u8];
    let mut _144: &str;
    let _145: &str;
    let mut _146: &[u8];
    let mut _147: &[u8; 32];
    let _148: &[u8; 32];
    let _149: [u8; 32];
    let mut _150: anchor_lang::prelude::Pubkey;
    let mut _151: &state::user::User;
    let mut _152: &std::cell::RefMut<'_, state::user::User>;
    let mut _153: &[u8];
    let mut _154: &[u8; 2];
    let _155: &[u8; 2];
    let _156: [u8; 2];
    let mut _157: u16;
    let mut _158: std::option::Option<u16>;
    let mut _159: &anchor_lang::prelude::Pubkey;
    let _160: &anchor_lang::prelude::Pubkey;
    let _161: &anchor_lang::prelude::Pubkey;
    let _162: ();
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _164: std::result::Result<(), error::ErrorCode>;
    let mut _165: bool;
    let mut _166: &anchor_lang::prelude::Pubkey;
    let mut _167: &anchor_lang::prelude::Pubkey;
    let mut _168: ();
    let _170: ();
    let mut _171: &str;
    let _172: &str;
    let mut _173: &std::string::String;
    let _174: &std::string::String;
    let _175: std::string::String;
    let mut _177: std::fmt::Arguments<'_>;
    let mut _178: &[&str];
    let mut _179: &[&str; 2];
    let _180: &[&str; 2];
    let _181: [&str; 2];
    let mut _182: &[core::fmt::rt::Argument<'_>];
    let mut _183: &[core::fmt::rt::Argument<'_>; 1];
    let _184: &[core::fmt::rt::Argument<'_>; 1];
    let _185: [core::fmt::rt::Argument<'_>; 1];
    let mut _186: core::fmt::rt::Argument<'_>;
    let mut _187: &error::ErrorCode;
    let _188: &error::ErrorCode;
    let _189: ();
    let mut _190: &str;
    let _191: &str;
    let mut _192: error::ErrorCode;
    let mut _193: isize;
    let mut _195: !;
    let mut _196: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _200: anchor_lang::prelude::Clock;
    let mut _201: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _202: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _203: isize;
    let mut _205: !;
    let mut _206: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _209: ();
    let mut _210: bool;
    let mut _211: &state::user::MarketType;
    let mut _212: &state::user::MarketType;
    let _213: state::user::MarketType;
    let mut _214: bool;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _216: std::result::Result<bool, error::ErrorCode>;
    let mut _217: &state::order_params::OrderParams;
    let mut _218: isize;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _223: !;
    let _224: ();
    let mut _225: &str;
    let _226: &str;
    let mut _227: anchor_lang::error::Error;
    let mut _228: error::ErrorCode;
    let mut _229: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    let _230: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _231: ();
    let _233: ();
    let mut _234: bool;
    let mut _235: u64;
    let mut _236: u64;
    let mut _237: u64;
    let mut _238: !;
    let _239: ();
    let mut _240: &str;
    let _241: &str;
    let mut _242: &std::string::String;
    let _243: &std::string::String;
    let _244: std::string::String;
    let mut _246: std::fmt::Arguments<'_>;
    let mut _247: &[&str];
    let mut _248: &[&str; 2];
    let _249: &[&str; 2];
    let _250: [&str; 2];
    let mut _251: &[core::fmt::rt::Argument<'_>];
    let mut _252: &[core::fmt::rt::Argument<'_>; 1];
    let _253: &[core::fmt::rt::Argument<'_>; 1];
    let _254: [core::fmt::rt::Argument<'_>; 1];
    let mut _255: core::fmt::rt::Argument<'_>;
    let mut _256: &u64;
    let _257: &u64;
    let mut _258: anchor_lang::error::Error;
    let mut _259: error::ErrorCode;
    let mut _260: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    let _261: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _262: ();
    let mut _265: bool;
    let mut _266: &state::user::OrderType;
    let mut _267: &state::user::OrderType;
    let _268: state::user::OrderType;
    let mut _269: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _270: std::result::Result<u64, error::ErrorCode>;
    let mut _271: u64;
    let mut _272: u64;
    let mut _273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _274: std::result::Result<u64, error::ErrorCode>;
    let mut _275: u8;
    let mut _276: std::option::Option<u8>;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _282: isize;
    let mut _284: !;
    let mut _285: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _287: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _288: std::result::Result<u64, error::ErrorCode>;
    let mut _289: u64;
    let mut _290: u64;
    let mut _291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _292: std::result::Result<u64, error::ErrorCode>;
    let mut _293: u8;
    let mut _294: std::option::Option<u8>;
    let mut _295: isize;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _300: isize;
    let mut _302: !;
    let mut _303: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _305: ();
    let mut _306: bool;
    let mut _307: u64;
    let mut _308: u64;
    let mut _309: !;
    let _310: ();
    let mut _311: &str;
    let _312: &str;
    let mut _313: &std::string::String;
    let _314: &std::string::String;
    let _315: std::string::String;
    let mut _317: std::fmt::Arguments<'_>;
    let mut _318: &[&str];
    let mut _319: &[&str; 2];
    let _320: &[&str; 2];
    let _321: [&str; 2];
    let mut _322: &[core::fmt::rt::Argument<'_>];
    let mut _323: &[core::fmt::rt::Argument<'_>; 2];
    let _324: &[core::fmt::rt::Argument<'_>; 2];
    let _325: [core::fmt::rt::Argument<'_>; 2];
    let mut _326: core::fmt::rt::Argument<'_>;
    let mut _327: &u64;
    let _328: &u64;
    let mut _329: core::fmt::rt::Argument<'_>;
    let mut _330: &u64;
    let _331: &u64;
    let mut _332: ();
    let mut _334: &state::user::User;
    let mut _335: &std::cell::RefMut<'_, state::user::User>;
    let mut _337: [u8; 8];
    let mut _338: u64;
    let _339: ();
    let mut _340: bool;
    let mut _341: &mut state::signed_msg_user::SignedMsgUserOrdersZeroCopyMut<'_>;
    let mut _342: state::signed_msg_user::SignedMsgOrderId;
    let mut _343: u64;
    let mut _344: !;
    let _345: ();
    let mut _346: &str;
    let _347: &str;
    let mut _348: &std::string::String;
    let _349: &std::string::String;
    let _350: std::string::String;
    let mut _352: std::fmt::Arguments<'_>;
    let mut _353: &[&str];
    let mut _354: &[&str; 1];
    let _355: &[&str; 1];
    let _356: [&str; 1];
    let mut _357: &[core::fmt::rt::Argument<'_>];
    let mut _358: &[core::fmt::rt::Argument<'_>; 1];
    let _359: &[core::fmt::rt::Argument<'_>; 1];
    let _360: [core::fmt::rt::Argument<'_>; 1];
    let mut _361: core::fmt::rt::Argument<'_>;
    let mut _362: &anchor_lang::prelude::Pubkey;
    let _363: &anchor_lang::prelude::Pubkey;
    let mut _364: ();
    let _365: ();
    let mut _366: isize;
    let mut _368: (u32, bool);
    let mut _370: state::user::OrderType;
    let mut _371: controller::position::PositionDirection;
    let mut _372: &controller::position::PositionDirection;
    let mut _373: std::option::Option<u64>;
    let mut _374: u64;
    let mut _375: u64;
    let mut _376: state::user::OrderTriggerCondition;
    let mut _377: bool;
    let mut _378: &controller::position::PositionDirection;
    let mut _379: &controller::position::PositionDirection;
    let _380: controller::position::PositionDirection;
    let mut _381: u16;
    let mut _382: state::user::MarketType;
    let mut _383: state::order_params::OrderParams;
    let _384: ();
    let mut _385: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _386: std::result::Result<(), error::ErrorCode>;
    let mut _387: &state::state::State;
    let mut _388: &mut state::user::User;
    let mut _389: &mut state::user::User;
    let mut _390: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _391: anchor_lang::prelude::Pubkey;
    let mut _392: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _393: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _394: &mut state::oracle_map::OracleMap<'_>;
    let mut _395: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _396: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _397: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _398: &anchor_lang::prelude::Clock;
    let mut _399: state::order_params::OrderParams;
    let mut _400: state::order_params::PlaceOrderOptions;
    let mut _401: std::option::Option<controller::position::PositionDirection>;
    let mut _402: controller::position::PositionDirection;
    let mut _403: state::order_params::PlaceOrderOptions;
    let mut _404: isize;
    let mut _406: !;
    let mut _407: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _409: ();
    let mut _410: isize;
    let mut _412: (u32, bool);
    let mut _414: state::user::OrderType;
    let mut _415: controller::position::PositionDirection;
    let mut _416: &controller::position::PositionDirection;
    let mut _417: std::option::Option<u64>;
    let mut _418: u64;
    let mut _419: u64;
    let mut _420: state::user::OrderTriggerCondition;
    let mut _421: bool;
    let mut _422: &controller::position::PositionDirection;
    let mut _423: &controller::position::PositionDirection;
    let _424: controller::position::PositionDirection;
    let mut _425: u16;
    let mut _426: state::user::MarketType;
    let mut _427: state::order_params::OrderParams;
    let _428: ();
    let mut _429: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _430: std::result::Result<(), error::ErrorCode>;
    let mut _431: &state::state::State;
    let mut _432: &mut state::user::User;
    let mut _433: &mut state::user::User;
    let mut _434: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _435: anchor_lang::prelude::Pubkey;
    let mut _436: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _437: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _438: &mut state::oracle_map::OracleMap<'_>;
    let mut _439: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _440: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _441: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _442: &anchor_lang::prelude::Clock;
    let mut _443: state::order_params::OrderParams;
    let mut _444: state::order_params::PlaceOrderOptions;
    let mut _445: std::option::Option<controller::position::PositionDirection>;
    let mut _446: controller::position::PositionDirection;
    let mut _447: state::order_params::PlaceOrderOptions;
    let mut _448: isize;
    let mut _450: !;
    let mut _451: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _453: u32;
    let _454: ();
    let mut _455: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _456: std::result::Result<(), error::ErrorCode>;
    let mut _457: &mut state::signed_msg_user::SignedMsgUserOrdersZeroCopyMut<'_>;
    let mut _458: state::signed_msg_user::SignedMsgOrderId;
    let mut _459: isize;
    let mut _461: !;
    let mut _462: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _464: ();
    let mut _465: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _466: std::result::Result<(), error::ErrorCode>;
    let mut _467: &state::state::State;
    let mut _468: &mut state::user::User;
    let mut _469: &mut state::user::User;
    let mut _470: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _471: anchor_lang::prelude::Pubkey;
    let mut _472: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _473: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _474: &mut state::oracle_map::OracleMap<'_>;
    let mut _475: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _476: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _477: &anchor_lang::prelude::Clock;
    let _478: &&anchor_lang::prelude::Clock;
    let mut _479: state::order_params::OrderParams;
    let mut _480: state::order_params::PlaceOrderOptions;
    let mut _481: std::option::Option<u64>;
    let mut _482: u64;
    let mut _483: state::order_params::PlaceOrderOptions;
    let mut _484: isize;
    let mut _486: !;
    let mut _487: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _490: &[u8];
    let mut _491: &solana_program::hash::Hash;
    let _492: solana_program::hash::Hash;
    let mut _493: &[u8];
    let _494: &[u8];
    let mut _495: &std::vec::Vec<u8>;
    let _496: &std::vec::Vec<u8>;
    let _497: std::vec::Vec<u8>;
    let mut _498: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _499: &[u8; 64];
    let _500: ();
    let _501: ();
    let mut _502: &[&[u8]];
    let mut _503: &[&[u8]; 1];
    let _504: &[&[u8]; 1];
    let _505: [&[u8]; 1];
    let mut _506: &[u8];
    let _507: &[u8];
    let mut _508: &std::vec::Vec<u8>;
    let _509: &std::vec::Vec<u8>;
    let _510: std::vec::Vec<u8>;
    let mut _511: &state::events::SignedMsgOrderRecord;
    let _512: &state::events::SignedMsgOrderRecord;
    let _513: state::events::SignedMsgOrderRecord;
    let mut _514: anchor_lang::prelude::Pubkey;
    let mut _515: u64;
    let mut _516: [u8; 8];
    let mut _517: u32;
    let mut _518: state::order_params::OrderParams;
    let mut _519: &state::order_params::OrderParams;
    let mut _520: std::string::String;
    let mut _521: i64;
    let mut _522: ();
    let mut _537: &anchor_lang::prelude::Clock;
    let mut _538: bool;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    scope 1 {
        debug ix_idx => _12;
        let _27: error::ErrorCode;
        let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _55: ();
        let _56: solana_program::instruction::Instruction;
        let _65: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _68: solana_program::instruction::Instruction;
        scope 6 {
            debug error_code => _27;
            let _34: std::string::String;
            let mut _536: &[&str; 2];
            scope 7 {
                debug res => _34;
            }
        }
        scope 8 {
            debug residual => _52;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _55;
            scope 11 {
            }
        }
        scope 12 {
            debug ix => _56;
            let _69: [u8; 32];
            scope 17 {
                debug signer => _69;
                let _77: validation::sig_verification::VerifiedMessage;
                let _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _96: validation::sig_verification::VerifiedMessage;
                scope 18 {
                    debug verified_message_and_signature => _77;
                    let _108: error::ErrorCode;
                    let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _136: ();
                    let _137: (anchor_lang::prelude::Pubkey, u8);
                    let _198: [u8; 64];
                    scope 23 {
                        debug error_code => _108;
                        let _115: std::string::String;
                        let mut _534: &[&str; 2];
                        scope 24 {
                            debug res => _115;
                        }
                    }
                    scope 25 {
                        debug residual => _133;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug val => _136;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug taker_pda => _137;
                        let _169: error::ErrorCode;
                        let _194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _197: ();
                        scope 30 {
                            debug error_code => _169;
                            let _176: std::string::String;
                            let mut _535: &[&str; 2];
                            scope 31 {
                                debug res => _176;
                            }
                        }
                        scope 32 {
                            debug residual => _194;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug val => _197;
                            scope 35 {
                            }
                        }
                    }
                    scope 36 {
                        debug signature => _198;
                        let _199: &anchor_lang::prelude::Clock;
                        let _204: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _207: anchor_lang::prelude::Clock;
                        scope 37 {
                            debug clock => _199;
                            let _208: &state::order_params::OrderParams;
                            scope 42 {
                                debug matching_taker_order_params => _208;
                                let _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _222: bool;
                                let _232: u64;
                                let mut _523: &{closure@programs/drift/src/error.rs:647:9: 647:11};
                                let mut _533: &state::user::MarketType;
                                scope 43 {
                                    debug residual => _219;
                                    scope 44 {
                                    }
                                }
                                scope 45 {
                                    debug val => _222;
                                    scope 46 {
                                    }
                                }
                                scope 47 {
                                    debug order_slot => _232;
                                    let _245: std::string::String;
                                    let _263: u16;
                                    let mut _524: &{closure@programs/drift/src/error.rs:647:9: 647:11};
                                    let mut _525: &[&str; 2];
                                    scope 48 {
                                        debug res => _245;
                                    }
                                    scope 49 {
                                        debug market_index => _263;
                                        let _264: u64;
                                        let _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _281: u64;
                                        let _283: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _286: u64;
                                        let _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _299: u64;
                                        let _301: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _304: u64;
                                        let mut _532: &state::user::OrderType;
                                        scope 50 {
                                            debug max_slot => _264;
                                            let _316: std::string::String;
                                            let mut _333: u32;
                                            let mut _526: &[&str; 2];
                                            scope 67 {
                                                debug res => _316;
                                            }
                                            scope 68 {
                                                debug taker_order_id_to_use => _333;
                                                let mut _336: state::signed_msg_user::SignedMsgOrderId;
                                                scope 69 {
                                                    debug signed_msg_order_id => _336;
                                                    let _351: std::string::String;
                                                    let _460: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _463: ();
                                                    let _485: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _488: ();
                                                    let _489: std::string::String;
                                                    let mut _527: &[&str; 1];
                                                    scope 70 {
                                                        debug res => _351;
                                                    }
                                                    scope 71 {
                                                        debug stop_loss_order_params => _367;
                                                        let _367: state::order_params::SignedMsgTriggerOrderParams;
                                                        let _369: state::order_params::OrderParams;
                                                        let mut _531: &controller::position::PositionDirection;
                                                        scope 72 {
                                                            debug stop_loss_order => _369;
                                                            let _405: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _408: ();
                                                            let mut _530: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                                                            scope 73 {
                                                                debug residual => _405;
                                                                scope 74 {
                                                                }
                                                            }
                                                            scope 75 {
                                                                debug val => _408;
                                                                scope 76 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug take_profit_order_params => _411;
                                                        let _411: state::order_params::SignedMsgTriggerOrderParams;
                                                        let _413: state::order_params::OrderParams;
                                                        let mut _529: &controller::position::PositionDirection;
                                                        scope 78 {
                                                            debug take_profit_order => _413;
                                                            let _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _452: ();
                                                            let mut _528: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                                                            scope 79 {
                                                                debug residual => _449;
                                                                scope 80 {
                                                                }
                                                            }
                                                            scope 81 {
                                                                debug val => _452;
                                                                scope 82 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 83 {
                                                        debug residual => _460;
                                                        scope 84 {
                                                        }
                                                    }
                                                    scope 85 {
                                                        debug val => _463;
                                                        scope 86 {
                                                        }
                                                    }
                                                    scope 87 {
                                                        debug residual => _485;
                                                        scope 88 {
                                                        }
                                                    }
                                                    scope 89 {
                                                        debug val => _488;
                                                        scope 90 {
                                                        }
                                                    }
                                                    scope 91 {
                                                        debug order_params_hash => _489;
                                                    }
                                                }
                                            }
                                        }
                                        scope 51 {
                                            debug residual => _278;
                                            scope 52 {
                                            }
                                        }
                                        scope 53 {
                                            debug val => _281;
                                            scope 54 {
                                            }
                                        }
                                        scope 55 {
                                            debug residual => _283;
                                            scope 56 {
                                            }
                                        }
                                        scope 57 {
                                            debug val => _286;
                                            scope 58 {
                                            }
                                        }
                                        scope 59 {
                                            debug residual => _296;
                                            scope 60 {
                                            }
                                        }
                                        scope 61 {
                                            debug val => _299;
                                            scope 62 {
                                            }
                                        }
                                        scope 63 {
                                            debug residual => _301;
                                            scope 64 {
                                            }
                                        }
                                        scope 65 {
                                            debug val => _304;
                                            scope 66 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 38 {
                            debug residual => _204;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _207;
                            scope 41 {
                            }
                        }
                    }
                }
                scope 19 {
                    debug residual => _93;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug val => _96;
                    scope 22 {
                    }
                }
            }
        }
        scope 13 {
            debug residual => _65;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _68;
            scope 16 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _538 = const false;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_5);
        _14 = load_current_index_checked(move _15) -> [return: bb1, unwind: bb238];
    }

    bb1: {
        StorageDead(_15);
        _13 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _14) -> [return: bb2, unwind: bb238];
    }

    bb2: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: u16);
        _12 = _20;
        StorageDead(_20);
        _539 = discriminant(_13);
        StorageDead(_13);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _12;
        _24 = Gt(move _25, const 0_u16);
        switchInt(move _24) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _19) -> [return: bb6, unwind: bb245];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        _553 = discriminant(_13);
        StorageDead(_13);
        goto -> bb226;
    }

    bb7: {
        StorageDead(_25);
        StorageLive(_26);
        _26 = ();
        _23 = std::result::Result::<(), error::ErrorCode>::Ok(move _26);
        StorageDead(_26);
        goto -> bb16;
    }

    bb8: {
        StorageDead(_25);
        StorageLive(_27);
        _27 = error::ErrorCode::InvalidVerificationIxIndex;
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _536 = const _;
        _38 = &(*_536);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_27;
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _45) -> [return: bb9, unwind: bb238];
    }

    bb9: {
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb10, unwind: bb238];
    }

    bb10: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb11, unwind: bb238];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb12, unwind: bb237];
    }

    bb12: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb13, unwind: bb237];
    }

    bb13: {
        StorageDead(_29);
        drop(_33) -> [return: bb14, unwind: bb238];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = const "instruction index must be greater than 0 for one sig verifies";
        _48 = &(*_49);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb15, unwind: bb238];
    }

    bb15: {
        StorageDead(_48);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_50);
        _50 = _27;
        _23 = std::result::Result::<(), error::ErrorCode>::Err(move _50);
        StorageDead(_50);
        StorageDead(_27);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_24);
        _22 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _23) -> [return: bb17, unwind: bb238];
    }

    bb17: {
        StorageDead(_23);
        _51 = discriminant(_22);
        switchInt(move _51) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_55);
        _55 = ((_22 as Continue).0: ());
        _21 = _55;
        StorageDead(_55);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _12;
        _60 = move _61 as usize (IntToInt);
        StorageDead(_61);
        _62 = CheckedSub(_60, const 1_usize);
        assert(!move (_62.1: bool), "attempt to compute `{} - {}`, which would overflow", move _60, const 1_usize) -> [success: bb21, unwind: bb238];
    }

    bb19: {
        StorageLive(_52);
        _52 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb20, unwind: bb238];
    }

    bb20: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb226;
    }

    bb21: {
        _59 = move (_62.0: usize);
        StorageDead(_60);
        StorageLive(_63);
        _63 = &(*_5);
        _58 = load_instruction_at_checked(move _59, move _63) -> [return: bb22, unwind: bb238];
    }

    bb22: {
        StorageDead(_63);
        StorageDead(_59);
        _57 = <std::result::Result<Instruction, anchor_lang::prelude::ProgramError> as Try>::branch(move _58) -> [return: bb23, unwind: bb238];
    }

    bb23: {
        StorageDead(_58);
        _64 = discriminant(_57);
        switchInt(move _64) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_68);
        _68 = move ((_57 as Continue).0: solana_program::instruction::Instruction);
        _56 = move _68;
        StorageDead(_68);
        _541 = discriminant(_57);
        StorageDead(_57);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _11;
        switchInt(move _70) -> [0: bb30, otherwise: bb27];
    }

    bb25: {
        StorageLive(_65);
        _65 = move ((_57 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_67);
        _67 = move _65;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _67) -> [return: bb26, unwind: bb244];
    }

    bb26: {
        StorageDead(_67);
        StorageDead(_65);
        _551 = discriminant(_57);
        StorageDead(_57);
        goto -> bb225;
    }

    bb27: {
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &(*_2);
        _72 = <RefMut<'_, User> as Deref>::deref(move _73) -> [return: bb28, unwind: bb236];
    }

    bb28: {
        StorageDead(_73);
        _71 = ((*_72).1: anchor_lang::prelude::Pubkey);
        _69 = anchor_lang::prelude::Pubkey::to_bytes(move _71) -> [return: bb29, unwind: bb236];
    }

    bb29: {
        StorageDead(_71);
        StorageDead(_72);
        goto -> bb33;
    }

    bb30: {
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &(*_2);
        _75 = <RefMut<'_, User> as Deref>::deref(move _76) -> [return: bb31, unwind: bb236];
    }

    bb31: {
        StorageDead(_76);
        _74 = ((*_75).0: anchor_lang::prelude::Pubkey);
        _69 = anchor_lang::prelude::Pubkey::to_bytes(move _74) -> [return: bb32, unwind: bb236];
    }

    bb32: {
        StorageDead(_74);
        StorageDead(_75);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_70);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_56;
        _80 = &(*_81);
        StorageLive(_82);
        _82 = &(*_5);
        StorageLive(_83);
        _83 = _12;
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_69;
        _84 = &(*_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_4;
        StorageLive(_90);
        _90 = RangeFull;
        _88 = <Vec<u8> as Index<RangeFull>>::index(move _89, move _90) -> [return: bb34, unwind: bb236];
    }

    bb34: {
        StorageDead(_90);
        StorageDead(_89);
        _87 = &(*_88);
        _86 = &(*_87);
        StorageLive(_91);
        _91 = _11;
        _79 = verify_and_decode_ed25519_msg(move _80, move _82, move _83, move _84, move _86, move _91) -> [return: bb35, unwind: bb236];
    }

    bb35: {
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        _78 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as Try>::branch(move _79) -> [return: bb36, unwind: bb236];
    }

    bb36: {
        StorageDead(_79);
        _92 = discriminant(_78);
        switchInt(move _92) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_96);
        _96 = move ((_78 as Continue).0: validation::sig_verification::VerifiedMessage);
        _77 = move _96;
        StorageDead(_96);
        _543 = discriminant(_78);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_78);
        StorageLive(_97);
        StorageLive(_98);
        _98 = _11;
        switchInt(move _98) -> [0: bb56, otherwise: bb40];
    }

    bb38: {
        StorageLive(_93);
        _93 = move ((_78 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_95);
        _95 = move _93;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _95) -> [return: bb39, unwind: bb243];
    }

    bb39: {
        StorageDead(_95);
        StorageDead(_93);
        _549 = discriminant(_78);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_81);
        StorageDead(_78);
        goto -> bb224;
    }

    bb40: {
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(_77.2: std::option::Option<anchor_lang::prelude::Pubkey>);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _1;
        _105 = Option::<anchor_lang::prelude::Pubkey>::Some(move _106);
        _104 = &_105;
        StorageDead(_106);
        _102 = <Option<anchor_lang::prelude::Pubkey> as PartialEq>::eq(move _103, move _104) -> [return: bb41, unwind: bb236];
    }

    bb41: {
        switchInt(move _102) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_107);
        _107 = ();
        _101 = std::result::Result::<(), error::ErrorCode>::Ok(move _107);
        StorageDead(_107);
        goto -> bb51;
    }

    bb43: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_108);
        _108 = error::ErrorCode::SignedMsgUserContextUserMismatch;
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _534 = const _;
        _119 = &(*_534);
        _118 = &(*_119);
        _117 = move _118 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_118);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_108;
        _126 = &(*_127);
        _125 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _126) -> [return: bb44, unwind: bb236];
    }

    bb44: {
        StorageDead(_126);
        _124 = [move _125];
        StorageDead(_125);
        _123 = &_124;
        _122 = &(*_123);
        _121 = move _122 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_122);
        _116 = Arguments::<'_>::new_v1(move _117, move _121) -> [return: bb45, unwind: bb236];
    }

    bb45: {
        StorageDead(_121);
        StorageDead(_117);
        _115 = format(move _116) -> [return: bb46, unwind: bb236];
    }

    bb46: {
        StorageDead(_116);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        StorageDead(_119);
        _114 = move _115;
        StorageDead(_115);
        _113 = &_114;
        _112 = &(*_113);
        _111 = <String as Deref>::deref(move _112) -> [return: bb47, unwind: bb235];
    }

    bb47: {
        _110 = &(*_111);
        StorageDead(_112);
        _109 = solana_program::log::sol_log(move _110) -> [return: bb48, unwind: bb235];
    }

    bb48: {
        StorageDead(_110);
        drop(_114) -> [return: bb49, unwind: bb236];
    }

    bb49: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = const "Delegate signed msg for taker pubkey different than supplied pubkey";
        _129 = &(*_130);
        _128 = solana_program::log::sol_log(move _129) -> [return: bb50, unwind: bb236];
    }

    bb50: {
        StorageDead(_129);
        StorageDead(_130);
        StorageDead(_128);
        StorageLive(_131);
        _131 = _108;
        _101 = std::result::Result::<(), error::ErrorCode>::Err(move _131);
        StorageDead(_131);
        StorageDead(_108);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_102);
        _100 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _101) -> [return: bb52, unwind: bb236];
    }

    bb52: {
        StorageDead(_101);
        _132 = discriminant(_100);
        switchInt(move _132) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_136);
        _136 = ((_100 as Continue).0: ());
        _99 = _136;
        StorageDead(_136);
        StorageDead(_100);
        StorageDead(_99);
        _97 = const ();
        goto -> bb78;
    }

    bb54: {
        StorageLive(_133);
        _133 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb55, unwind: bb236];
    }

    bb55: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb223;
    }

    bb56: {
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = const "user";
        _144 = &(*_145);
        _143 = core::str::<impl str>::as_bytes(move _144) -> [return: bb57, unwind: bb236];
    }

    bb57: {
        _142 = &(*_143);
        StorageDead(_144);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &(*_2);
        _151 = <RefMut<'_, User> as Deref>::deref(move _152) -> [return: bb58, unwind: bb236];
    }

    bb58: {
        StorageDead(_152);
        _150 = ((*_151).0: anchor_lang::prelude::Pubkey);
        _149 = anchor_lang::prelude::Pubkey::to_bytes(move _150) -> [return: bb59, unwind: bb236];
    }

    bb59: {
        StorageDead(_150);
        _148 = &_149;
        _147 = &(*_148);
        _146 = move _147 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_147);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = (_77.1: std::option::Option<u16>);
        _157 = Option::<u16>::unwrap(move _158) -> [return: bb60, unwind: bb236];
    }

    bb60: {
        StorageDead(_158);
        _156 = core::num::<impl u16>::to_le_bytes(move _157) -> [return: bb61, unwind: bb236];
    }

    bb61: {
        StorageDead(_157);
        _155 = &_156;
        _154 = &(*_155);
        _153 = move _154 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_154);
        _141 = [move _142, move _146, move _153];
        StorageDead(_153);
        StorageDead(_146);
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _138 = move _139 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_139);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = const {alloc266: &anchor_lang::prelude::Pubkey};
        _160 = &(*_161);
        _159 = &(*_160);
        _137 = anchor_lang::prelude::Pubkey::find_program_address(move _138, move _159) -> [return: bb62, unwind: bb236];
    }

    bb62: {
        StorageDead(_159);
        StorageDead(_138);
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &(_137.0: anchor_lang::prelude::Pubkey);
        StorageLive(_167);
        _167 = &_1;
        _165 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _166, move _167) -> [return: bb63, unwind: bb236];
    }

    bb63: {
        switchInt(move _165) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageDead(_167);
        StorageDead(_166);
        StorageLive(_168);
        _168 = ();
        _164 = std::result::Result::<(), error::ErrorCode>::Ok(move _168);
        StorageDead(_168);
        goto -> bb73;
    }

    bb65: {
        StorageDead(_167);
        StorageDead(_166);
        StorageLive(_169);
        _169 = error::ErrorCode::SignedMsgUserContextUserMismatch;
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _535 = const _;
        _180 = &(*_535);
        _179 = &(*_180);
        _178 = move _179 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_179);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_169;
        _187 = &(*_188);
        _186 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _187) -> [return: bb66, unwind: bb236];
    }

    bb66: {
        StorageDead(_187);
        _185 = [move _186];
        StorageDead(_186);
        _184 = &_185;
        _183 = &(*_184);
        _182 = move _183 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_183);
        _177 = Arguments::<'_>::new_v1(move _178, move _182) -> [return: bb67, unwind: bb236];
    }

    bb67: {
        StorageDead(_182);
        StorageDead(_178);
        _176 = format(move _177) -> [return: bb68, unwind: bb236];
    }

    bb68: {
        StorageDead(_177);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_180);
        _175 = move _176;
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = <String as Deref>::deref(move _173) -> [return: bb69, unwind: bb234];
    }

    bb69: {
        _171 = &(*_172);
        StorageDead(_173);
        _170 = solana_program::log::sol_log(move _171) -> [return: bb70, unwind: bb234];
    }

    bb70: {
        StorageDead(_171);
        drop(_175) -> [return: bb71, unwind: bb236];
    }

    bb71: {
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_170);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = const "Taker key does not match pda";
        _190 = &(*_191);
        _189 = solana_program::log::sol_log(move _190) -> [return: bb72, unwind: bb236];
    }

    bb72: {
        StorageDead(_190);
        StorageDead(_191);
        StorageDead(_189);
        StorageLive(_192);
        _192 = _169;
        _164 = std::result::Result::<(), error::ErrorCode>::Err(move _192);
        StorageDead(_192);
        StorageDead(_169);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_165);
        _163 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _164) -> [return: bb74, unwind: bb236];
    }

    bb74: {
        StorageDead(_164);
        _193 = discriminant(_163);
        switchInt(move _193) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_197);
        _197 = ((_163 as Continue).0: ());
        _162 = _197;
        StorageDead(_197);
        StorageDead(_163);
        StorageDead(_162);
        _97 = const ();
        StorageDead(_137);
        goto -> bb78;
    }

    bb76: {
        StorageLive(_194);
        _194 = ((_163 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_196);
        _196 = _194;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _196) -> [return: bb77, unwind: bb236];
    }

    bb77: {
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_137);
        goto -> bb223;
    }

    bb78: {
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_198);
        _198 = (_77.7: [u8; 64]);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb79, unwind: bb236];
    }

    bb79: {
        _201 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _202) -> [return: bb80, unwind: bb236];
    }

    bb80: {
        StorageDead(_202);
        _203 = discriminant(_201);
        switchInt(move _203) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        StorageLive(_207);
        _207 = move ((_201 as Continue).0: anchor_lang::prelude::Clock);
        _200 = move _207;
        StorageDead(_207);
        _199 = &_200;
        _545 = discriminant(_201);
        StorageDead(_201);
        StorageLive(_208);
        _208 = &(_77.0: state::order_params::OrderParams);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &((*_208).1: state::user::MarketType);
        StorageLive(_212);
        _533 = const _;
        _212 = &(*_533);
        _210 = <state::user::MarketType as PartialEq>::ne(move _211, move _212) -> [return: bb84, unwind: bb236];
    }

    bb82: {
        StorageLive(_204);
        _204 = move ((_201 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_206);
        _206 = move _204;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _206) -> [return: bb83, unwind: bb242];
    }

    bb83: {
        StorageDead(_206);
        StorageDead(_204);
        _547 = discriminant(_201);
        StorageDead(_201);
        goto -> bb222;
    }

    bb84: {
        switchInt(move _210) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb93;
    }

    bb86: {
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &(*_208);
        _216 = order_params::OrderParams::has_valid_auction_params(move _217) -> [return: bb87, unwind: bb236];
    }

    bb87: {
        StorageDead(_217);
        _215 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _216) -> [return: bb88, unwind: bb236];
    }

    bb88: {
        StorageDead(_216);
        _218 = discriminant(_215);
        switchInt(move _218) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        StorageLive(_222);
        _222 = ((_215 as Continue).0: bool);
        _214 = _222;
        StorageDead(_222);
        switchInt(move _214) -> [0: bb93, otherwise: bb92];
    }

    bb90: {
        StorageLive(_219);
        _219 = ((_215 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_221);
        _221 = _219;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _221) -> [return: bb91, unwind: bb236];
    }

    bb91: {
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_215);
        goto -> bb220;
    }

    bb92: {
        StorageDead(_215);
        _209 = const ();
        StorageDead(_214);
        StorageDead(_210);
        StorageDead(_209);
        StorageLive(_232);
        _232 = (_77.3: u64);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _232;
        StorageLive(_236);
        StorageLive(_237);
        _237 = ((*_199).0: u64);
        _236 = core::num::<impl u64>::saturating_sub(move _237, const 500_u64) -> [return: bb97, unwind: bb236];
    }

    bb93: {
        StorageDead(_215);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = const "First order must be a perp taker order";
        _225 = &(*_226);
        _224 = solana_program::log::sol_log(move _225) -> [return: bb94, unwind: bb236];
    }

    bb94: {
        StorageDead(_225);
        StorageDead(_226);
        StorageDead(_224);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _523 = const _;
        _229 = &(*_523);
        StorageLive(_231);
        _231 = ();
        _228 = <{closure@programs/drift/src/error.rs:647:9: 647:11} as Fn<()>>::call(move _229, move _231) -> [return: bb95, unwind: bb236];
    }

    bb95: {
        StorageDead(_231);
        StorageDead(_229);
        _227 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _228) -> [return: bb96, unwind: bb236];
    }

    bb96: {
        StorageDead(_228);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _227);
        StorageDead(_227);
        goto -> bb220;
    }

    bb97: {
        StorageDead(_237);
        _234 = Lt(move _235, move _236);
        switchInt(move _234) -> [0: bb107, otherwise: bb98];
    }

    bb98: {
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _525 = const _;
        _249 = &(*_525);
        _248 = &(*_249);
        _247 = move _248 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_248);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &_232;
        _256 = &(*_257);
        _255 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _256) -> [return: bb99, unwind: bb236];
    }

    bb99: {
        StorageDead(_256);
        _254 = [move _255];
        StorageDead(_255);
        _253 = &_254;
        _252 = &(*_253);
        _251 = move _252 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_252);
        _246 = Arguments::<'_>::new_v1(move _247, move _251) -> [return: bb100, unwind: bb236];
    }

    bb100: {
        StorageDead(_251);
        StorageDead(_247);
        _245 = format(move _246) -> [return: bb101, unwind: bb236];
    }

    bb101: {
        StorageDead(_246);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_249);
        _244 = move _245;
        StorageDead(_245);
        _243 = &_244;
        _242 = &(*_243);
        _241 = <String as Deref>::deref(move _242) -> [return: bb102, unwind: bb233];
    }

    bb102: {
        _240 = &(*_241);
        StorageDead(_242);
        _239 = solana_program::log::sol_log(move _240) -> [return: bb103, unwind: bb233];
    }

    bb103: {
        StorageDead(_240);
        drop(_244) -> [return: bb104, unwind: bb236];
    }

    bb104: {
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_239);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _524 = const _;
        _260 = &(*_524);
        StorageLive(_262);
        _262 = ();
        _259 = <{closure@programs/drift/src/error.rs:647:9: 647:11} as Fn<()>>::call(move _260, move _262) -> [return: bb105, unwind: bb236];
    }

    bb105: {
        StorageDead(_262);
        StorageDead(_260);
        _258 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _259) -> [return: bb106, unwind: bb236];
    }

    bb106: {
        StorageDead(_259);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _258);
        StorageDead(_258);
        StorageDead(_234);
        StorageDead(_233);
        goto -> bb219;
    }

    bb107: {
        StorageDead(_236);
        StorageDead(_235);
        _233 = const ();
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_263);
        _263 = ((*_208).6: u16);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &((*_208).0: state::user::OrderType);
        StorageLive(_267);
        _532 = const _;
        _267 = &(*_532);
        _265 = <state::user::OrderType as PartialEq>::eq(move _266, move _267) -> [return: bb108, unwind: bb236];
    }

    bb108: {
        switchInt(move _265) -> [0: bb121, otherwise: bb109];
    }

    bb109: {
        StorageDead(_267);
        StorageDead(_266);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = _232;
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = ((*_208).14: std::option::Option<u8>);
        _275 = Option::<u8>::unwrap_or(move _276, const 0_u8) -> [return: bb110, unwind: bb236];
    }

    bb110: {
        StorageDead(_276);
        _274 = <u8 as Cast>::cast::<u64>(move _275) -> [return: bb111, unwind: bb236];
    }

    bb111: {
        StorageDead(_275);
        _273 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _274) -> [return: bb112, unwind: bb236];
    }

    bb112: {
        StorageDead(_274);
        _277 = discriminant(_273);
        switchInt(move _277) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_281);
        _281 = ((_273 as Continue).0: u64);
        _272 = _281;
        StorageDead(_281);
        _270 = <u64 as SafeMath>::safe_add(move _271, move _272) -> [return: bb116, unwind: bb236];
    }

    bb114: {
        StorageLive(_278);
        _278 = ((_273 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_280);
        _280 = _278;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _280) -> [return: bb115, unwind: bb236];
    }

    bb115: {
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_270);
        goto -> bb216;
    }

    bb116: {
        StorageDead(_272);
        StorageDead(_271);
        _269 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _270) -> [return: bb117, unwind: bb236];
    }

    bb117: {
        StorageDead(_270);
        _282 = discriminant(_269);
        switchInt(move _282) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        StorageLive(_286);
        _286 = ((_269 as Continue).0: u64);
        _264 = _286;
        StorageDead(_286);
        StorageDead(_273);
        StorageDead(_269);
        goto -> bb133;
    }

    bb119: {
        StorageLive(_283);
        _283 = ((_269 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_285);
        _285 = _283;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _285) -> [return: bb120, unwind: bb236];
    }

    bb120: {
        StorageDead(_285);
        StorageDead(_283);
        goto -> bb216;
    }

    bb121: {
        StorageDead(_267);
        StorageDead(_266);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = _232;
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = ((*_208).14: std::option::Option<u8>);
        _293 = Option::<u8>::unwrap(move _294) -> [return: bb122, unwind: bb236];
    }

    bb122: {
        StorageDead(_294);
        _292 = <u8 as Cast>::cast::<u64>(move _293) -> [return: bb123, unwind: bb236];
    }

    bb123: {
        StorageDead(_293);
        _291 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _292) -> [return: bb124, unwind: bb236];
    }

    bb124: {
        StorageDead(_292);
        _295 = discriminant(_291);
        switchInt(move _295) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        StorageLive(_299);
        _299 = ((_291 as Continue).0: u64);
        _290 = _299;
        StorageDead(_299);
        _288 = <u64 as SafeMath>::safe_add(move _289, move _290) -> [return: bb128, unwind: bb236];
    }

    bb126: {
        StorageLive(_296);
        _296 = ((_291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_298);
        _298 = _296;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _298) -> [return: bb127, unwind: bb236];
    }

    bb127: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        goto -> bb215;
    }

    bb128: {
        StorageDead(_290);
        StorageDead(_289);
        _287 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _288) -> [return: bb129, unwind: bb236];
    }

    bb129: {
        StorageDead(_288);
        _300 = discriminant(_287);
        switchInt(move _300) -> [0: bb130, 1: bb131, otherwise: bb4];
    }

    bb130: {
        StorageLive(_304);
        _304 = ((_287 as Continue).0: u64);
        _264 = _304;
        StorageDead(_304);
        StorageDead(_291);
        StorageDead(_287);
        goto -> bb133;
    }

    bb131: {
        StorageLive(_301);
        _301 = ((_287 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_303);
        _303 = _301;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _303) -> [return: bb132, unwind: bb236];
    }

    bb132: {
        StorageDead(_303);
        StorageDead(_301);
        goto -> bb215;
    }

    bb133: {
        StorageDead(_265);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = _264;
        StorageLive(_308);
        _308 = ((*_199).0: u64);
        _306 = Lt(move _307, move _308);
        switchInt(move _306) -> [0: bb142, otherwise: bb134];
    }

    bb134: {
        StorageDead(_308);
        StorageDead(_307);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _526 = const _;
        _320 = &(*_526);
        _319 = &(*_320);
        _318 = move _319 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_319);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = &_264;
        _327 = &(*_328);
        _326 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _327) -> [return: bb135, unwind: bb236];
    }

    bb135: {
        StorageDead(_327);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = &((*_199).0: u64);
        _330 = &(*_331);
        _329 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _330) -> [return: bb136, unwind: bb236];
    }

    bb136: {
        StorageDead(_330);
        _325 = [move _326, move _329];
        StorageDead(_329);
        StorageDead(_326);
        _324 = &_325;
        _323 = &(*_324);
        _322 = move _323 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_323);
        _317 = Arguments::<'_>::new_v1(move _318, move _322) -> [return: bb137, unwind: bb236];
    }

    bb137: {
        StorageDead(_322);
        StorageDead(_318);
        _316 = format(move _317) -> [return: bb138, unwind: bb236];
    }

    bb138: {
        StorageDead(_317);
        StorageDead(_331);
        StorageDead(_328);
        StorageDead(_325);
        StorageDead(_324);
        StorageDead(_320);
        _315 = move _316;
        StorageDead(_316);
        _314 = &_315;
        _313 = &(*_314);
        _312 = <String as Deref>::deref(move _313) -> [return: bb139, unwind: bb232];
    }

    bb139: {
        _311 = &(*_312);
        StorageDead(_313);
        _310 = solana_program::log::sol_log(move _311) -> [return: bb140, unwind: bb232];
    }

    bb140: {
        StorageDead(_311);
        drop(_315) -> [return: bb141, unwind: bb236];
    }

    bb141: {
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_312);
        StorageDead(_310);
        StorageLive(_332);
        _332 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _332);
        StorageDead(_332);
        StorageDead(_306);
        StorageDead(_305);
        goto -> bb218;
    }

    bb142: {
        StorageDead(_308);
        StorageDead(_307);
        _305 = const ();
        StorageDead(_306);
        StorageDead(_305);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = &(*_2);
        _334 = <RefMut<'_, User> as Deref>::deref(move _335) -> [return: bb143, unwind: bb236];
    }

    bb143: {
        StorageDead(_335);
        _333 = ((*_334).15: u32);
        StorageDead(_334);
        StorageLive(_336);
        StorageLive(_337);
        _337 = (_77.4: [u8; 8]);
        StorageLive(_338);
        _338 = _264;
        _336 = SignedMsgOrderId::new(move _337, move _338, const 0_u32) -> [return: bb144, unwind: bb236];
    }

    bb144: {
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = &mut (*_3);
        StorageLive(_342);
        _342 = _336;
        StorageLive(_343);
        _343 = ((*_199).0: u64);
        _340 = SignedMsgUserOrdersZeroCopyMut::<'_>::check_exists_and_prune_stale_signed_msg_order_ids(move _341, move _342, move _343) -> [return: bb145, unwind: bb236];
    }

    bb145: {
        switchInt(move _340) -> [0: bb153, otherwise: bb146];
    }

    bb146: {
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_341);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _527 = const _;
        _355 = &(*_527);
        _354 = &(*_355);
        _353 = move _354 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_354);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = &_1;
        _362 = &(*_363);
        _361 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _362) -> [return: bb147, unwind: bb236];
    }

    bb147: {
        StorageDead(_362);
        _360 = [move _361];
        StorageDead(_361);
        _359 = &_360;
        _358 = &(*_359);
        _357 = move _358 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_358);
        _352 = Arguments::<'_>::new_v1(move _353, move _357) -> [return: bb148, unwind: bb236];
    }

    bb148: {
        StorageDead(_357);
        StorageDead(_353);
        _351 = format(move _352) -> [return: bb149, unwind: bb236];
    }

    bb149: {
        StorageDead(_352);
        StorageDead(_363);
        StorageDead(_360);
        StorageDead(_359);
        StorageDead(_355);
        _350 = move _351;
        StorageDead(_351);
        _349 = &_350;
        _348 = &(*_349);
        _347 = <String as Deref>::deref(move _348) -> [return: bb150, unwind: bb231];
    }

    bb150: {
        _346 = &(*_347);
        StorageDead(_348);
        _345 = solana_program::log::sol_log(move _346) -> [return: bb151, unwind: bb231];
    }

    bb151: {
        StorageDead(_346);
        drop(_350) -> [return: bb152, unwind: bb236];
    }

    bb152: {
        StorageDead(_350);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_345);
        StorageLive(_364);
        _364 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _364);
        StorageDead(_364);
        StorageDead(_340);
        StorageDead(_339);
        goto -> bb214;
    }

    bb153: {
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_341);
        _339 = const ();
        StorageDead(_340);
        StorageDead(_339);
        StorageLive(_365);
        _366 = discriminant((_77.6: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>));
        switchInt(move _366) -> [1: bb155, otherwise: bb154];
    }

    bb154: {
        _365 = const ();
        goto -> bb170;
    }

    bb155: {
        StorageLive(_367);
        _367 = move (((_77.6: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>) as Some).0: state::order_params::SignedMsgTriggerOrderParams);
        _368 = CheckedAdd(_333, const 1_u32);
        assert(!move (_368.1: bool), "attempt to compute `{} + {}`, which would overflow", _333, const 1_u32) -> [success: bb156, unwind: bb236];
    }

    bb156: {
        _333 = move (_368.0: u32);
        StorageLive(_369);
        StorageLive(_370);
        _370 = state::user::OrderType::TriggerMarket;
        StorageLive(_371);
        StorageLive(_372);
        _372 = &((*_208).2: controller::position::PositionDirection);
        _371 = controller::position::PositionDirection::opposite(move _372) -> [return: bb157, unwind: bb236];
    }

    bb157: {
        StorageDead(_372);
        StorageLive(_373);
        StorageLive(_374);
        _374 = (_367.0: u64);
        _373 = Option::<u64>::Some(move _374);
        StorageDead(_374);
        StorageLive(_375);
        _375 = (_367.1: u64);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &((*_208).2: controller::position::PositionDirection);
        StorageLive(_379);
        _531 = const _;
        _379 = &(*_531);
        _377 = <controller::position::PositionDirection as PartialEq>::eq(move _378, move _379) -> [return: bb158, unwind: bb236];
    }

    bb158: {
        switchInt(move _377) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        StorageDead(_379);
        StorageDead(_378);
        _376 = OrderTriggerCondition::Below;
        goto -> bb161;
    }

    bb160: {
        StorageDead(_379);
        StorageDead(_378);
        _376 = OrderTriggerCondition::Above;
        goto -> bb161;
    }

    bb161: {
        StorageDead(_377);
        StorageLive(_381);
        _381 = _263;
        StorageLive(_382);
        _382 = state::user::MarketType::Perp;
        StorageLive(_383);
        _383 = <order_params::OrderParams as Default>::default() -> [return: bb162, unwind: bb236];
    }

    bb162: {
        _369 = order_params::OrderParams { order_type: move _370, market_type: move _382, direction: move _371, user_order_id: (_383.3: u8), base_asset_amount: move _375, price: (_383.5: u64), market_index: move _381, reduce_only: const true, post_only: (_383.8: state::order_params::PostOnlyParam), bit_flags: (_383.9: u8), max_ts: (_383.10: std::option::Option<i64>), trigger_price: move _373, trigger_condition: move _376, oracle_price_offset: (_383.13: std::option::Option<i32>), auction_duration: (_383.14: std::option::Option<u8>), auction_start_price: (_383.15: std::option::Option<i64>), auction_end_price: (_383.16: std::option::Option<i64>) };
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_370);
        StorageDead(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &(*_10);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = &mut (*_2);
        _389 = <RefMut<'_, User> as DerefMut>::deref_mut(move _390) -> [return: bb163, unwind: bb236];
    }

    bb163: {
        _388 = &mut (*_389);
        StorageDead(_390);
        StorageLive(_391);
        _391 = _1;
        StorageLive(_392);
        _392 = &(*_6);
        StorageLive(_393);
        _393 = &(*_7);
        StorageLive(_394);
        _394 = &mut (*_8);
        StorageLive(_395);
        StorageLive(_396);
        _530 = const _;
        _396 = &(*_530);
        _395 = &(*_396);
        StorageLive(_398);
        _398 = &(*_199);
        StorageLive(_399);
        _399 = _369;
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _402 = ((*_208).2: controller::position::PositionDirection);
        _401 = Option::<controller::position::PositionDirection>::Some(move _402);
        StorageDead(_402);
        StorageLive(_403);
        _403 = <PlaceOrderOptions as Default>::default() -> [return: bb164, unwind: bb236];
    }

    bb164: {
        _400 = PlaceOrderOptions { signed_msg_taker_order_slot: (_403.0: std::option::Option<u64>), try_expire_orders: (_403.1: bool), enforce_margin_check: const false, risk_increasing: (_403.3: bool), explanation: (_403.4: state::events::OrderActionExplanation), existing_position_direction_override: move _401 };
        StorageDead(_401);
        _386 = controller::orders::place_perp_order(move _387, move _388, move _391, move _392, move _393, move _394, move _395, move _398, move _399, move _400) -> [return: bb165, unwind: bb236];
    }

    bb165: {
        StorageDead(_400);
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_395);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_388);
        StorageDead(_387);
        _385 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _386) -> [return: bb166, unwind: bb236];
    }

    bb166: {
        StorageDead(_386);
        _404 = discriminant(_385);
        switchInt(move _404) -> [0: bb167, 1: bb168, otherwise: bb4];
    }

    bb167: {
        StorageLive(_408);
        _408 = ((_385 as Continue).0: ());
        _384 = _408;
        StorageDead(_408);
        StorageDead(_403);
        StorageDead(_396);
        StorageDead(_389);
        StorageDead(_385);
        StorageDead(_384);
        _365 = const ();
        StorageDead(_369);
        StorageDead(_367);
        goto -> bb170;
    }

    bb168: {
        StorageLive(_405);
        _405 = ((_385 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_407);
        _407 = _405;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _407) -> [return: bb169, unwind: bb236];
    }

    bb169: {
        StorageDead(_407);
        StorageDead(_405);
        StorageDead(_403);
        StorageDead(_396);
        StorageDead(_389);
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_365);
        goto -> bb214;
    }

    bb170: {
        StorageDead(_365);
        StorageLive(_409);
        _410 = discriminant((_77.5: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>));
        switchInt(move _410) -> [1: bb171, otherwise: bb186];
    }

    bb171: {
        StorageLive(_411);
        _411 = move (((_77.5: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>) as Some).0: state::order_params::SignedMsgTriggerOrderParams);
        _412 = CheckedAdd(_333, const 1_u32);
        assert(!move (_412.1: bool), "attempt to compute `{} + {}`, which would overflow", _333, const 1_u32) -> [success: bb172, unwind: bb236];
    }

    bb172: {
        _333 = move (_412.0: u32);
        StorageLive(_413);
        StorageLive(_414);
        _414 = state::user::OrderType::TriggerMarket;
        StorageLive(_415);
        StorageLive(_416);
        _416 = &((*_208).2: controller::position::PositionDirection);
        _415 = controller::position::PositionDirection::opposite(move _416) -> [return: bb173, unwind: bb236];
    }

    bb173: {
        StorageDead(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = (_411.0: u64);
        _417 = Option::<u64>::Some(move _418);
        StorageDead(_418);
        StorageLive(_419);
        _419 = (_411.1: u64);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = &((*_208).2: controller::position::PositionDirection);
        StorageLive(_423);
        _529 = const _;
        _423 = &(*_529);
        _421 = <controller::position::PositionDirection as PartialEq>::eq(move _422, move _423) -> [return: bb174, unwind: bb236];
    }

    bb174: {
        switchInt(move _421) -> [0: bb176, otherwise: bb175];
    }

    bb175: {
        StorageDead(_423);
        StorageDead(_422);
        _420 = OrderTriggerCondition::Above;
        goto -> bb177;
    }

    bb176: {
        StorageDead(_423);
        StorageDead(_422);
        _420 = OrderTriggerCondition::Below;
        goto -> bb177;
    }

    bb177: {
        StorageDead(_421);
        StorageLive(_425);
        _425 = _263;
        StorageLive(_426);
        _426 = state::user::MarketType::Perp;
        StorageLive(_427);
        _427 = <order_params::OrderParams as Default>::default() -> [return: bb178, unwind: bb236];
    }

    bb178: {
        _413 = order_params::OrderParams { order_type: move _414, market_type: move _426, direction: move _415, user_order_id: (_427.3: u8), base_asset_amount: move _419, price: (_427.5: u64), market_index: move _425, reduce_only: const true, post_only: (_427.8: state::order_params::PostOnlyParam), bit_flags: (_427.9: u8), max_ts: (_427.10: std::option::Option<i64>), trigger_price: move _417, trigger_condition: move _420, oracle_price_offset: (_427.13: std::option::Option<i32>), auction_duration: (_427.14: std::option::Option<u8>), auction_start_price: (_427.15: std::option::Option<i64>), auction_end_price: (_427.16: std::option::Option<i64>) };
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_415);
        StorageDead(_414);
        StorageDead(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &(*_10);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &mut (*_2);
        _433 = <RefMut<'_, User> as DerefMut>::deref_mut(move _434) -> [return: bb179, unwind: bb236];
    }

    bb179: {
        _432 = &mut (*_433);
        StorageDead(_434);
        StorageLive(_435);
        _435 = _1;
        StorageLive(_436);
        _436 = &(*_6);
        StorageLive(_437);
        _437 = &(*_7);
        StorageLive(_438);
        _438 = &mut (*_8);
        StorageLive(_439);
        StorageLive(_440);
        _528 = const _;
        _440 = &(*_528);
        _439 = &(*_440);
        StorageLive(_442);
        _442 = &(*_199);
        StorageLive(_443);
        _443 = _413;
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = ((*_208).2: controller::position::PositionDirection);
        _445 = Option::<controller::position::PositionDirection>::Some(move _446);
        StorageDead(_446);
        StorageLive(_447);
        _447 = <PlaceOrderOptions as Default>::default() -> [return: bb180, unwind: bb236];
    }

    bb180: {
        _444 = PlaceOrderOptions { signed_msg_taker_order_slot: (_447.0: std::option::Option<u64>), try_expire_orders: (_447.1: bool), enforce_margin_check: const false, risk_increasing: (_447.3: bool), explanation: (_447.4: state::events::OrderActionExplanation), existing_position_direction_override: move _445 };
        StorageDead(_445);
        _430 = controller::orders::place_perp_order(move _431, move _432, move _435, move _436, move _437, move _438, move _439, move _442, move _443, move _444) -> [return: bb181, unwind: bb236];
    }

    bb181: {
        StorageDead(_444);
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_436);
        StorageDead(_435);
        StorageDead(_432);
        StorageDead(_431);
        _429 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _430) -> [return: bb182, unwind: bb236];
    }

    bb182: {
        StorageDead(_430);
        _448 = discriminant(_429);
        switchInt(move _448) -> [0: bb183, 1: bb184, otherwise: bb4];
    }

    bb183: {
        StorageLive(_452);
        _452 = ((_429 as Continue).0: ());
        _428 = _452;
        StorageDead(_452);
        StorageDead(_447);
        StorageDead(_440);
        StorageDead(_433);
        StorageDead(_429);
        StorageDead(_428);
        _409 = const ();
        StorageDead(_413);
        StorageDead(_411);
        goto -> bb187;
    }

    bb184: {
        StorageLive(_449);
        _449 = ((_429 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_451);
        _451 = _449;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _451) -> [return: bb185, unwind: bb236];
    }

    bb185: {
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_447);
        StorageDead(_440);
        StorageDead(_433);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_409);
        goto -> bb214;
    }

    bb186: {
        _409 = const ();
        goto -> bb187;
    }

    bb187: {
        StorageDead(_409);
        StorageLive(_453);
        _453 = _333;
        (_336.2: u32) = move _453;
        StorageDead(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        _457 = &mut (*_3);
        StorageLive(_458);
        _458 = _336;
        _456 = SignedMsgUserOrdersZeroCopyMut::<'_>::add_signed_msg_order_id(move _457, move _458) -> [return: bb188, unwind: bb236];
    }

    bb188: {
        StorageDead(_458);
        StorageDead(_457);
        _455 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _456) -> [return: bb189, unwind: bb236];
    }

    bb189: {
        StorageDead(_456);
        _459 = discriminant(_455);
        switchInt(move _459) -> [0: bb190, 1: bb191, otherwise: bb4];
    }

    bb190: {
        StorageLive(_463);
        _463 = ((_455 as Continue).0: ());
        _454 = _463;
        StorageDead(_463);
        StorageDead(_455);
        StorageDead(_454);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = &(*_10);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _470 = &mut (*_2);
        _469 = <RefMut<'_, User> as DerefMut>::deref_mut(move _470) -> [return: bb193, unwind: bb236];
    }

    bb191: {
        StorageLive(_460);
        _460 = ((_455 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_462);
        _462 = _460;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _462) -> [return: bb192, unwind: bb236];
    }

    bb192: {
        StorageDead(_462);
        StorageDead(_460);
        StorageDead(_455);
        StorageDead(_454);
        goto -> bb214;
    }

    bb193: {
        _468 = &mut (*_469);
        StorageDead(_470);
        StorageLive(_471);
        _471 = _1;
        StorageLive(_472);
        _472 = &(*_6);
        StorageLive(_473);
        _473 = &(*_7);
        StorageLive(_474);
        _474 = &mut (*_8);
        StorageLive(_475);
        StorageLive(_476);
        _476 = &_9;
        _475 = &(*_476);
        StorageLive(_477);
        StorageLive(_478);
        _478 = &_199;
        _537 = deref_copy (*_478);
        _477 = &(*_537);
        StorageLive(_479);
        _479 = (*_208);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = _232;
        _481 = Option::<u64>::Some(move _482);
        StorageDead(_482);
        StorageLive(_483);
        _483 = <PlaceOrderOptions as Default>::default() -> [return: bb194, unwind: bb236];
    }

    bb194: {
        _480 = PlaceOrderOptions { signed_msg_taker_order_slot: move _481, try_expire_orders: (_483.1: bool), enforce_margin_check: const true, risk_increasing: (_483.3: bool), explanation: (_483.4: state::events::OrderActionExplanation), existing_position_direction_override: (_483.5: std::option::Option<controller::position::PositionDirection>) };
        StorageDead(_481);
        _466 = controller::orders::place_perp_order(move _467, move _468, move _471, move _472, move _473, move _474, move _475, move _477, move _479, move _480) -> [return: bb195, unwind: bb236];
    }

    bb195: {
        StorageDead(_480);
        StorageDead(_479);
        StorageDead(_477);
        StorageDead(_475);
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_468);
        StorageDead(_467);
        _465 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _466) -> [return: bb196, unwind: bb236];
    }

    bb196: {
        StorageDead(_466);
        _484 = discriminant(_465);
        switchInt(move _484) -> [0: bb197, 1: bb198, otherwise: bb4];
    }

    bb197: {
        StorageLive(_488);
        _488 = ((_465 as Continue).0: ());
        _464 = _488;
        StorageDead(_488);
        StorageDead(_483);
        StorageDead(_478);
        StorageDead(_476);
        StorageDead(_469);
        StorageDead(_465);
        StorageDead(_464);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &_198;
        _498 = <[u8; 64] as BorshSerialize>::try_to_vec(move _499) -> [return: bb200, unwind: bb236];
    }

    bb198: {
        StorageLive(_485);
        _485 = ((_465 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_487);
        _487 = _485;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _487) -> [return: bb199, unwind: bb236];
    }

    bb199: {
        StorageDead(_487);
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_478);
        StorageDead(_476);
        StorageDead(_469);
        StorageDead(_465);
        StorageDead(_464);
        goto -> bb214;
    }

    bb200: {
        StorageDead(_499);
        _497 = std::result::Result::<Vec<u8>, std::io::Error>::unwrap(move _498) -> [return: bb201, unwind: bb236];
    }

    bb201: {
        StorageDead(_498);
        _496 = &_497;
        _495 = &(*_496);
        _494 = <Vec<u8> as Deref>::deref(move _495) -> [return: bb202, unwind: bb230];
    }

    bb202: {
        _493 = &(*_494);
        StorageDead(_495);
        _492 = solana_program::hash::hash(move _493) -> [return: bb203, unwind: bb230];
    }

    bb203: {
        _491 = &_492;
        StorageDead(_493);
        _490 = <solana_program::hash::Hash as AsRef<[u8]>>::as_ref(move _491) -> [return: bb204, unwind: bb230];
    }

    bb204: {
        StorageDead(_491);
        _489 = base64::encode::<&[u8]>(move _490) -> [return: bb205, unwind: bb230];
    }

    bb205: {
        _538 = const true;
        StorageDead(_490);
        drop(_497) -> [return: bb206, unwind: bb241];
    }

    bb206: {
        StorageDead(_497);
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_492);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = _1;
        StorageLive(_515);
        _515 = (_336.1: u64);
        StorageLive(_516);
        _516 = (_336.0: [u8; 8]);
        StorageLive(_517);
        _517 = (_336.2: u32);
        StorageLive(_518);
        StorageLive(_519);
        _519 = &(*_208);
        _518 = <order_params::OrderParams as Clone>::clone(move _519) -> [return: bb207, unwind: bb241];
    }

    bb207: {
        StorageDead(_519);
        StorageLive(_520);
        _538 = const false;
        _520 = move _489;
        StorageLive(_521);
        _521 = ((*_199).4: i64);
        _513 = SignedMsgOrderRecord { user: move _514, hash: move _520, matching_order_params: move _518, user_order_id: move _517, signed_msg_order_max_slot: move _515, signed_msg_order_uuid: move _516, ts: move _521 };
        StorageDead(_521);
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_517);
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_514);
        _512 = &_513;
        _511 = &(*_512);
        _510 = <SignedMsgOrderRecord as anchor_lang::Event>::data(move _511) -> [return: bb208, unwind: bb229];
    }

    bb208: {
        StorageDead(_511);
        _509 = &_510;
        _508 = &(*_509);
        _507 = <Vec<u8> as Deref>::deref(move _508) -> [return: bb209, unwind: bb228];
    }

    bb209: {
        _506 = &(*_507);
        StorageDead(_508);
        _505 = [move _506];
        StorageDead(_506);
        _504 = &_505;
        _503 = &(*_504);
        _502 = move _503 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_503);
        _501 = solana_program::log::sol_log_data(move _502) -> [return: bb210, unwind: bb228];
    }

    bb210: {
        StorageDead(_502);
        drop(_510) -> [return: bb211, unwind: bb229];
    }

    bb211: {
        drop(_513) -> [return: bb212, unwind: bb241];
    }

    bb212: {
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_509);
        StorageDead(_507);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_501);
        _500 = const ();
        StorageDead(_500);
        StorageLive(_522);
        _522 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _522);
        StorageDead(_522);
        _538 = const false;
        StorageDead(_489);
        StorageDead(_336);
        StorageDead(_333);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_232);
        StorageDead(_208);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_77);
        StorageDead(_69);
        drop(_56) -> [return: bb213, unwind: bb238];
    }

    bb213: {
        StorageDead(_56);
        StorageDead(_12);
        drop(_4) -> [return: bb227, unwind: bb239];
    }

    bb214: {
        StorageDead(_336);
        StorageDead(_333);
        goto -> bb218;
    }

    bb215: {
        StorageDead(_291);
        StorageDead(_287);
        goto -> bb217;
    }

    bb216: {
        StorageDead(_273);
        StorageDead(_269);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_265);
        goto -> bb218;
    }

    bb218: {
        StorageDead(_264);
        StorageDead(_263);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_232);
        goto -> bb221;
    }

    bb220: {
        StorageDead(_214);
        StorageDead(_210);
        StorageDead(_209);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_208);
        goto -> bb222;
    }

    bb222: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb224;
    }

    bb223: {
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb224;
    }

    bb224: {
        StorageDead(_77);
        StorageDead(_69);
        drop(_56) -> [return: bb225, unwind: bb238];
    }

    bb225: {
        StorageDead(_56);
        goto -> bb226;
    }

    bb226: {
        StorageDead(_12);
        drop(_4) -> [return: bb227, unwind: bb239];
    }

    bb227: {
        return;
    }

    bb228 (cleanup): {
        drop(_510) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        drop(_513) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb230 (cleanup): {
        drop(_497) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        drop(_350) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        drop(_315) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        drop(_244) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        drop(_175) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        drop(_114) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        drop(_56) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        drop(_33) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        drop(_4) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        resume;
    }

    bb240 (cleanup): {
        drop(_489) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        switchInt(_538) -> [0: bb236, otherwise: bb240];
    }

    bb242 (cleanup): {
        _555 = discriminant(_201);
        goto -> bb236;
    }

    bb243 (cleanup): {
        _556 = discriminant(_78);
        goto -> bb236;
    }

    bb244 (cleanup): {
        _557 = discriminant(_57);
        goto -> bb238;
    }

    bb245 (cleanup): {
        _558 = discriminant(_13);
        goto -> bb238;
    }
}

alloc266 (static: ID, size: 32, align: 1) {
    0x00 │ 09 54 db be 9e c9 60 c9 8a 7a 29 3f e2 13 36 96 │ .T....`..z)?..6.
    0x10 │ 6f e1 80 d1 51 ae 4b 81 79 56 1f 89 85 4a 53 f6 │ o...Q.K.yV...JS.
}
