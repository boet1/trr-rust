// MIR for `transfer_spot_balance_to_revenue_pool` after PreCodegen

fn transfer_spot_balance_to_revenue_pool(_1: u128, _2: &mut SpotMarket, _3: &mut dyn SpotBalance) -> std::result::Result<(), error::ErrorCode> {
    debug token_amount => _1;
    debug spot_market => _2;
    debug from_spot_balance => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: bool;
    let mut _8: u16;
    let mut _9: &dyn state::spot_market::SpotBalance;
    let mut _10: u16;
    let mut _11: ();
    let _12: error::ErrorCode;
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: &std::string::String;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[&str; 2];
    let _23: &[&str; 2];
    let _24: [&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let mut _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &error::ErrorCode;
    let _31: &error::ErrorCode;
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 1];
    let _42: &[&str; 1];
    let _43: [&str; 1];
    let mut _44: error::ErrorCode;
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _52: std::result::Result<(), error::ErrorCode>;
    let mut _53: u128;
    let mut _54: &state::spot_market::SpotBalanceType;
    let _55: &state::spot_market::SpotBalanceType;
    let _56: state::spot_market::SpotBalanceType;
    let mut _57: &mut state::spot_market::SpotMarket;
    let mut _58: &mut dyn state::spot_market::SpotBalance;
    let mut _59: &mut dyn state::spot_market::SpotBalance;
    let mut _60: isize;
    let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _64: ();
    let _65: ();
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _67: std::result::Result<(), error::ErrorCode>;
    let mut _68: u128;
    let mut _69: &state::spot_market::SpotBalanceType;
    let _70: &state::spot_market::SpotBalanceType;
    let _71: state::spot_market::SpotBalanceType;
    let mut _72: &mut state::spot_market::SpotMarket;
    let mut _73: isize;
    let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _77: ();
    let mut _78: ();
    let mut _79: &state::spot_market::SpotBalanceType;
    let mut _80: &state::spot_market::SpotBalanceType;
    scope 1 {
        debug error_code => _12;
        let _19: std::string::String;
        let _38: std::string::String;
        let mut _81: &[&str; 1];
        let mut _82: &[&str; 2];
        scope 2 {
            debug res => _19;
        }
        scope 3 {
            debug res => _38;
        }
    }
    scope 4 {
        debug residual => _46;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _49;
        scope 7 {
        }
    }
    scope 8 {
        debug residual => _61;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _64;
        scope 11 {
        }
    }
    scope 12 {
        debug residual => _74;
        scope 13 {
        }
    }
    scope 14 {
        debug val => _77;
        scope 15 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_3);
        _8 = <dyn SpotBalance as SpotBalance>::market_index(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = ((*_2).42: u16);
        _7 = Eq(move _8, move _10);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_11);
        _11 = ();
        _6 = std::result::Result::<(), error::ErrorCode>::Ok(move _11);
        StorageDead(_11);
        goto -> bb15;
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_12);
        _12 = error::ErrorCode::UnequalMarketIndexForSpotTransfer;
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _82 = const _;
        _23 = &(*_82);
        _22 = &(*_23);
        _21 = move _22 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_12;
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _30) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_30);
        _28 = [move _29];
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = move _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_26);
        _20 = Arguments::<'_>::new_v1(move _21, move _25) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_25);
        StorageDead(_21);
        _19 = format(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        _18 = move _19;
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = <String as Deref>::deref(move _16) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        StorageDead(_14);
        drop(_18) -> [return: bb9, unwind: bb34];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _81 = const _;
        _42 = &(*_81);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        _39 = Arguments::<'_>::new_const(move _40) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_39);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <String as Deref>::deref(move _35) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        StorageDead(_33);
        drop(_37) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_44);
        _44 = _12;
        _6 = std::result::Result::<(), error::ErrorCode>::Err(move _44);
        StorageDead(_44);
        StorageDead(_12);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_6);
        _45 = discriminant(_5);
        switchInt(move _45) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_49);
        _49 = ((_5 as Continue).0: ());
        _4 = _49;
        StorageDead(_49);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = _1;
        StorageLive(_54);
        StorageLive(_55);
        _80 = const _;
        _55 = &(*_80);
        _54 = &(*_55);
        StorageLive(_57);
        _57 = &mut (*_2);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &mut (*_3);
        _58 = move _59 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_59);
        _52 = update_spot_balances(move _53, move _54, move _57, move _58, const false) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb31;
    }

    bb21: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _52) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb18];
    }

    bb23: {
        StorageLive(_64);
        _64 = ((_51 as Continue).0: ());
        _50 = _64;
        StorageDead(_64);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _1;
        StorageLive(_69);
        StorageLive(_70);
        _79 = const _;
        _70 = &(*_79);
        _69 = &(*_70);
        StorageLive(_72);
        _72 = &mut (*_2);
        _67 = update_revenue_pool_balances(move _68, move _69, move _72) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_61);
        _61 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb31;
    }

    bb26: {
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_68);
        _66 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _67) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_67);
        _73 = discriminant(_66);
        switchInt(move _73) -> [0: bb28, 1: bb29, otherwise: bb18];
    }

    bb28: {
        StorageLive(_77);
        _77 = ((_66 as Continue).0: ());
        _65 = _77;
        StorageDead(_77);
        StorageDead(_70);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_78);
        _78 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _78);
        StorageDead(_78);
        goto -> bb31;
    }

    bb29: {
        StorageLive(_74);
        _74 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_70);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb31;
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_37) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_18) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        resume;
    }
}
