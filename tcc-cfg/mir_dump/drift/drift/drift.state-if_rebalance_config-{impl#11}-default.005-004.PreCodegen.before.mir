// MIR for `if_rebalance_config::<impl at programs/drift/src/state/if_rebalance_config.rs:9:10: 9:17>::default` before PreCodegen

fn if_rebalance_config::<impl at programs/drift/src/state/if_rebalance_config.rs:9:10: 9:17>::default() -> IfRebalanceConfig {
    let mut _0: state::if_rebalance_config::IfRebalanceConfig;
    let mut _1: anchor_lang::prelude::Pubkey;
    let mut _2: u64;
    let mut _3: u64;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: i64;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: i64;
    let mut _11: u16;
    let mut _12: u16;
    let mut _13: u16;
    let mut _14: u8;
    let mut _15: u8;
    let mut _16: [u8; 32];

    bb0: {
        StorageLive(_1);
        _1 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <u64 as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <u64 as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <u64 as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <u64 as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <u64 as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <i64 as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <u64 as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_9);
        _9 = <u64 as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_10);
        _10 = <i64 as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_11);
        _11 = <u16 as Default>::default() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_12);
        _12 = <u16 as Default>::default() -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageLive(_13);
        _13 = <u16 as Default>::default() -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageLive(_14);
        _14 = <u8 as Default>::default() -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageLive(_15);
        _15 = <u8 as Default>::default() -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageLive(_16);
        _16 = <[u8; 32] as Default>::default() -> [return: bb16, unwind continue];
    }

    bb16: {
        _0 = IfRebalanceConfig { pubkey: move _1, total_in_amount: move _2, current_in_amount: move _3, current_out_amount: move _4, current_out_amount_transferred: move _5, current_in_amount_since_last_transfer: move _6, epoch_start_ts: move _7, epoch_in_amount: move _8, epoch_max_in_amount: move _9, epoch_duration: move _10, out_market_index: move _11, in_market_index: move _12, max_slippage_bps: move _13, swap_mode: move _14, status: move _15, padding2: move _16 };
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
