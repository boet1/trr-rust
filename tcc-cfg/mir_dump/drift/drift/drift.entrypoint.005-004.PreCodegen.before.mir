// MIR for `entrypoint` before PreCodegen

fn entrypoint(_1: *mut u8) -> u64 {
    debug input => _1;
    let mut _0: u64;
    let _2: &anchor_lang::prelude::Pubkey;
    let _3: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _4: &[u8];
    let mut _5: (&anchor_lang::prelude::Pubkey, std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>, &[u8]);
    let mut _6: *mut u8;
    let mut _7: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _8: &anchor_lang::prelude::Pubkey;
    let _9: &&anchor_lang::prelude::Pubkey;
    let mut _10: &[anchor_lang::prelude::AccountInfo<'_>];
    let _11: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let _13: &std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>;
    let mut _14: &[u8];
    let _15: &&[u8];
    let mut _16: isize;
    let mut _18: anchor_lang::prelude::ProgramError;
    let mut _19: &anchor_lang::prelude::Pubkey;
    let mut _20: &[u8];
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let mut _24: isize;
    scope 1 {
        debug program_id => _2;
        debug accounts => _3;
        debug instruction_data => _4;
        let _17: anchor_lang::prelude::ProgramError;
        scope 3 {
            debug error => _17;
        }
    }
    scope 2 {
    }

    bb0: {
        _21 = const false;
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = solana_program::entrypoint::deserialize::<'_>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_2);
        _2 = (_5.0: &anchor_lang::prelude::Pubkey);
        StorageLive(_3);
        _3 = move (_5.1: std::vec::Vec<anchor_lang::prelude::AccountInfo<'_>>);
        StorageLive(_4);
        _4 = (_5.2: &[u8]);
        StorageDead(_5);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_2;
        _19 = deref_copy (*_9);
        _8 = &(*_19);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &_3;
        _12 = &(*_13);
        _11 = <Vec<anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _12) -> [return: bb2, unwind: bb11];
    }

    bb2: {
        _10 = &(*_11);
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_4;
        _20 = deref_copy (*_15);
        _14 = &(*_20);
        _7 = program_entry(move _8, move _10, move _14) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _21 = const true;
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = move ((_7 as Err).0: anchor_lang::prelude::ProgramError);
        StorageLive(_18);
        _18 = move _17;
        _0 = <anchor_lang::prelude::ProgramError as Into<u64>>::into(move _18) -> [return: bb7, unwind: bb10];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _0 = const _;
        goto -> bb8;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_4);
        drop(_3) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        StorageDead(_3);
        StorageDead(_2);
        _22 = discriminant(_7);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        _21 = const false;
        StorageDead(_7);
        return;
    }

    bb10 (cleanup): {
        drop(_3) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb11 (cleanup): {
        drop(_3) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        _24 = discriminant(_7);
        goto -> bb12;
    }
}
