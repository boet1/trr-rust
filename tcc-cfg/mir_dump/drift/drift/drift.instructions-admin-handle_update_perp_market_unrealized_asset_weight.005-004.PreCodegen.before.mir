// MIR for `admin::handle_update_perp_market_unrealized_asset_weight` before PreCodegen

fn admin::handle_update_perp_market_unrealized_asset_weight(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u32, _3: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug unrealized_initial_asset_weight => _2;
    debug unrealized_maintenance_asset_weight => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: bool;
    let mut _18: u32;
    let mut _19: u32;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _21: std::result::Result<u32, error::ErrorCode>;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u32;
    let mut _27: ();
    let _28: error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 2];
    let _39: &[&str; 2];
    let _40: [&str; 2];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let mut _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &error::ErrorCode;
    let _47: &error::ErrorCode;
    let _48: ();
    let mut _49: &str;
    let _50: &str;
    let mut _51: &std::string::String;
    let _52: &std::string::String;
    let _53: std::string::String;
    let mut _55: std::fmt::Arguments<'_>;
    let mut _56: &[&str];
    let mut _57: &[&str; 1];
    let _58: &[&str; 1];
    let _59: [&str; 1];
    let mut _60: error::ErrorCode;
    let mut _61: isize;
    let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _65: ();
    let _66: ();
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _68: std::result::Result<(), error::ErrorCode>;
    let mut _69: bool;
    let mut _70: u32;
    let mut _71: u32;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _73: std::result::Result<u32, error::ErrorCode>;
    let mut _74: isize;
    let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _78: u32;
    let mut _79: ();
    let _80: error::ErrorCode;
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: &std::string::String;
    let _85: &std::string::String;
    let _86: std::string::String;
    let mut _88: std::fmt::Arguments<'_>;
    let mut _89: &[&str];
    let mut _90: &[&str; 2];
    let _91: &[&str; 2];
    let _92: [&str; 2];
    let mut _93: &[core::fmt::rt::Argument<'_>];
    let mut _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: &[core::fmt::rt::Argument<'_>; 1];
    let _96: [core::fmt::rt::Argument<'_>; 1];
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &error::ErrorCode;
    let _99: &error::ErrorCode;
    let _100: ();
    let mut _101: &str;
    let _102: &str;
    let mut _103: &std::string::String;
    let _104: &std::string::String;
    let _105: std::string::String;
    let mut _107: std::fmt::Arguments<'_>;
    let mut _108: &[&str];
    let mut _109: &[&str; 1];
    let _110: &[&str; 1];
    let _111: [&str; 1];
    let mut _112: error::ErrorCode;
    let mut _113: isize;
    let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _117: ();
    let _118: ();
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _120: std::result::Result<(), error::ErrorCode>;
    let mut _121: bool;
    let mut _122: u32;
    let mut _123: u32;
    let mut _124: ();
    let _125: error::ErrorCode;
    let _126: ();
    let mut _127: &str;
    let _128: &str;
    let mut _129: &std::string::String;
    let _130: &std::string::String;
    let _131: std::string::String;
    let mut _133: std::fmt::Arguments<'_>;
    let mut _134: &[&str];
    let mut _135: &[&str; 2];
    let _136: &[&str; 2];
    let _137: [&str; 2];
    let mut _138: &[core::fmt::rt::Argument<'_>];
    let mut _139: &[core::fmt::rt::Argument<'_>; 1];
    let _140: &[core::fmt::rt::Argument<'_>; 1];
    let _141: [core::fmt::rt::Argument<'_>; 1];
    let mut _142: core::fmt::rt::Argument<'_>;
    let mut _143: &error::ErrorCode;
    let _144: &error::ErrorCode;
    let _145: ();
    let mut _146: &str;
    let _147: &str;
    let mut _148: &std::string::String;
    let _149: &std::string::String;
    let _150: std::string::String;
    let mut _152: std::fmt::Arguments<'_>;
    let mut _153: &[&str];
    let mut _154: &[&str; 1];
    let _155: &[&str; 1];
    let _156: [&str; 1];
    let mut _157: error::ErrorCode;
    let mut _158: isize;
    let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _162: ();
    let _163: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _164: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _166: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _167: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _168: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _169: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _170: isize;
    let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _174: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _175: ();
    let mut _176: &str;
    let _177: &str;
    let mut _178: &std::string::String;
    let _179: &std::string::String;
    let _180: std::string::String;
    let mut _182: std::fmt::Arguments<'_>;
    let mut _183: &[&str];
    let mut _184: &[&str; 1];
    let _185: &[&str; 1];
    let _186: [&str; 1];
    let mut _187: &[core::fmt::rt::Argument<'_>];
    let mut _188: &[core::fmt::rt::Argument<'_>; 1];
    let _189: &[core::fmt::rt::Argument<'_>; 1];
    let _190: [core::fmt::rt::Argument<'_>; 1];
    let mut _191: core::fmt::rt::Argument<'_>;
    let mut _192: &u16;
    let _193: &u16;
    let _194: &state::perp_market::PerpMarket;
    let mut _195: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _196: ();
    let mut _197: &str;
    let _198: &str;
    let mut _199: &std::string::String;
    let _200: &std::string::String;
    let _201: std::string::String;
    let mut _203: std::fmt::Arguments<'_>;
    let mut _204: &[&str];
    let mut _205: &[&str; 2];
    let _206: &[&str; 2];
    let _207: [&str; 2];
    let mut _208: &[core::fmt::rt::Argument<'_>];
    let mut _209: &[core::fmt::rt::Argument<'_>; 2];
    let _210: &[core::fmt::rt::Argument<'_>; 2];
    let _211: [core::fmt::rt::Argument<'_>; 2];
    let mut _212: core::fmt::rt::Argument<'_>;
    let mut _213: &u32;
    let _214: &u32;
    let _215: &state::perp_market::PerpMarket;
    let mut _216: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _217: core::fmt::rt::Argument<'_>;
    let mut _218: &u32;
    let _219: &u32;
    let _220: ();
    let mut _221: &str;
    let _222: &str;
    let mut _223: &std::string::String;
    let _224: &std::string::String;
    let _225: std::string::String;
    let mut _227: std::fmt::Arguments<'_>;
    let mut _228: &[&str];
    let mut _229: &[&str; 2];
    let _230: &[&str; 2];
    let _231: [&str; 2];
    let mut _232: &[core::fmt::rt::Argument<'_>];
    let mut _233: &[core::fmt::rt::Argument<'_>; 2];
    let _234: &[core::fmt::rt::Argument<'_>; 2];
    let _235: [core::fmt::rt::Argument<'_>; 2];
    let mut _236: core::fmt::rt::Argument<'_>;
    let mut _237: &u32;
    let _238: &u32;
    let _239: &state::perp_market::PerpMarket;
    let mut _240: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _241: core::fmt::rt::Argument<'_>;
    let mut _242: &u32;
    let _243: &u32;
    let mut _244: u32;
    let mut _245: &mut state::perp_market::PerpMarket;
    let mut _246: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _247: u32;
    let mut _248: &mut state::perp_market::PerpMarket;
    let mut _249: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _250: ();
    let mut _260: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _261: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _23;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _26;
        scope 8 {
        }
    }
    scope 9 {
        debug error_code => _28;
        let _35: std::string::String;
        let _54: std::string::String;
        let mut _258: &[&str; 1];
        let mut _259: &[&str; 2];
        scope 10 {
            debug res => _35;
        }
        scope 11 {
            debug res => _54;
        }
    }
    scope 12 {
        debug residual => _62;
        scope 13 {
        }
    }
    scope 14 {
        debug val => _65;
        scope 15 {
        }
    }
    scope 16 {
        debug residual => _75;
        scope 17 {
        }
    }
    scope 18 {
        debug val => _78;
        scope 19 {
        }
    }
    scope 20 {
        debug error_code => _80;
        let _87: std::string::String;
        let _106: std::string::String;
        let mut _256: &[&str; 1];
        let mut _257: &[&str; 2];
        scope 21 {
            debug res => _87;
        }
        scope 22 {
            debug res => _106;
        }
    }
    scope 23 {
        debug residual => _114;
        scope 24 {
        }
    }
    scope 25 {
        debug val => _117;
        scope 26 {
        }
    }
    scope 27 {
        debug error_code => _125;
        let _132: std::string::String;
        let _151: std::string::String;
        let mut _254: &[&str; 1];
        let mut _255: &[&str; 2];
        scope 28 {
            debug res => _132;
        }
        scope 29 {
            debug res => _151;
        }
    }
    scope 30 {
        debug residual => _159;
        scope 31 {
        }
    }
    scope 32 {
        debug val => _162;
        scope 33 {
        }
    }
    scope 34 {
        debug perp_market => _163;
        let _181: std::string::String;
        let _202: std::string::String;
        let _226: std::string::String;
        let mut _251: &[&str; 2];
        let mut _252: &[&str; 2];
        let mut _253: &[&str; 1];
        scope 39 {
            debug res => _181;
        }
        scope 40 {
            debug res => _202;
        }
        scope 41 {
            debug res => _226;
        }
    }
    scope 35 {
        debug residual => _171;
        scope 36 {
        }
    }
    scope 37 {
        debug val => _174;
        scope 38 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _260 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _8 = &((*_260).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _7 = &(*_8);
        _6 = constraints::perp_market_valid(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb116];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _262 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = <u32 as Cast>::cast::<u32>(const _) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb118];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _268 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb105;
    }

    bb7: {
        _20 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        _22 = discriminant(_20);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_20 as Continue).0: u32);
        _19 = _26;
        StorageDead(_26);
        _17 = Le(move _18, move _19);
        switchInt(move _17) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb104;
    }

    bb12: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_27);
        _27 = ();
        _16 = std::result::Result::<(), error::ErrorCode>::Ok(move _27);
        StorageDead(_27);
        goto -> bb25;
    }

    bb13: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_28);
        _28 = error::ErrorCode::DefaultError;
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _259 = const _;
        _39 = &(*_259);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_28;
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _46) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_46);
        _44 = [move _45];
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = move _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_42);
        _36 = Arguments::<'_>::new_v1(move _37, move _41) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_41);
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb17, unwind: bb115];
    }

    bb17: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb18, unwind: bb115];
    }

    bb18: {
        StorageDead(_30);
        drop(_34) -> [return: bb19, unwind: bb116];
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _258 = const _;
        _58 = &(*_258);
        _57 = &(*_58);
        _56 = move _57 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_57);
        _55 = Arguments::<'_>::new_const(move _56) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_56);
        _54 = format(move _55) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_55);
        StorageDead(_58);
        _53 = move _54;
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = <String as Deref>::deref(move _51) -> [return: bb22, unwind: bb114];
    }

    bb22: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = solana_program::log::sol_log(move _49) -> [return: bb23, unwind: bb114];
    }

    bb23: {
        StorageDead(_49);
        drop(_53) -> [return: bb24, unwind: bb116];
    }

    bb24: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_48);
        StorageLive(_60);
        _60 = _28;
        _16 = std::result::Result::<(), error::ErrorCode>::Err(move _60);
        StorageDead(_60);
        StorageDead(_28);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_16);
        _61 = discriminant(_15);
        switchInt(move _61) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_65);
        _65 = ((_15 as Continue).0: ());
        _14 = _65;
        StorageDead(_65);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _3;
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = <u32 as Cast>::cast::<u32>(const _) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_62);
        _62 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_64);
        StorageDead(_62);
        goto -> bb104;
    }

    bb30: {
        _72 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _73) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_73);
        _74 = discriminant(_72);
        switchInt(move _74) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_78);
        _78 = ((_72 as Continue).0: u32);
        _71 = _78;
        StorageDead(_78);
        _69 = Le(move _70, move _71);
        switchInt(move _69) -> [0: bb36, otherwise: bb35];
    }

    bb33: {
        StorageLive(_75);
        _75 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb103;
    }

    bb35: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_79);
        _79 = ();
        _68 = std::result::Result::<(), error::ErrorCode>::Ok(move _79);
        StorageDead(_79);
        goto -> bb48;
    }

    bb36: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_80);
        _80 = error::ErrorCode::DefaultError;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _257 = const _;
        _91 = &(*_257);
        _90 = &(*_91);
        _89 = move _90 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_90);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_80;
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _98) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_98);
        _96 = [move _97];
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = move _94 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_94);
        _88 = Arguments::<'_>::new_v1(move _89, move _93) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_93);
        StorageDead(_89);
        _87 = format(move _88) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_88);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        _86 = move _87;
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <String as Deref>::deref(move _84) -> [return: bb40, unwind: bb113];
    }

    bb40: {
        _82 = &(*_83);
        StorageDead(_84);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb41, unwind: bb113];
    }

    bb41: {
        StorageDead(_82);
        drop(_86) -> [return: bb42, unwind: bb116];
    }

    bb42: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _256 = const _;
        _110 = &(*_256);
        _109 = &(*_110);
        _108 = move _109 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_109);
        _107 = Arguments::<'_>::new_const(move _108) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_108);
        _106 = format(move _107) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_107);
        StorageDead(_110);
        _105 = move _106;
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = <String as Deref>::deref(move _103) -> [return: bb45, unwind: bb112];
    }

    bb45: {
        _101 = &(*_102);
        StorageDead(_103);
        _100 = solana_program::log::sol_log(move _101) -> [return: bb46, unwind: bb112];
    }

    bb46: {
        StorageDead(_101);
        drop(_105) -> [return: bb47, unwind: bb116];
    }

    bb47: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_112);
        _112 = _80;
        _68 = std::result::Result::<(), error::ErrorCode>::Err(move _112);
        StorageDead(_112);
        StorageDead(_80);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_69);
        _67 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _68) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_68);
        _113 = discriminant(_67);
        switchInt(move _113) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_117);
        _117 = ((_67 as Continue).0: ());
        _66 = _117;
        StorageDead(_117);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = _2;
        StorageLive(_123);
        _123 = _3;
        _121 = Le(move _122, move _123);
        switchInt(move _121) -> [0: bb54, otherwise: bb53];
    }

    bb51: {
        StorageLive(_114);
        _114 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_116);
        StorageDead(_114);
        goto -> bb103;
    }

    bb53: {
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_124);
        _124 = ();
        _120 = std::result::Result::<(), error::ErrorCode>::Ok(move _124);
        StorageDead(_124);
        goto -> bb66;
    }

    bb54: {
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_125);
        _125 = error::ErrorCode::DefaultError;
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _255 = const _;
        _136 = &(*_255);
        _135 = &(*_136);
        _134 = move _135 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_135);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &_125;
        _143 = &(*_144);
        _142 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _143) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_143);
        _141 = [move _142];
        StorageDead(_142);
        _140 = &_141;
        _139 = &(*_140);
        _138 = move _139 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_139);
        _133 = Arguments::<'_>::new_v1(move _134, move _138) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_138);
        StorageDead(_134);
        _132 = format(move _133) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_133);
        StorageDead(_144);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_136);
        _131 = move _132;
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = <String as Deref>::deref(move _129) -> [return: bb58, unwind: bb111];
    }

    bb58: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = solana_program::log::sol_log(move _127) -> [return: bb59, unwind: bb111];
    }

    bb59: {
        StorageDead(_127);
        drop(_131) -> [return: bb60, unwind: bb116];
    }

    bb60: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        _254 = const _;
        _155 = &(*_254);
        _154 = &(*_155);
        _153 = move _154 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_154);
        _152 = Arguments::<'_>::new_const(move _153) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_153);
        _151 = format(move _152) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_152);
        StorageDead(_155);
        _150 = move _151;
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = <String as Deref>::deref(move _148) -> [return: bb63, unwind: bb110];
    }

    bb63: {
        _146 = &(*_147);
        StorageDead(_148);
        _145 = solana_program::log::sol_log(move _146) -> [return: bb64, unwind: bb110];
    }

    bb64: {
        StorageDead(_146);
        drop(_150) -> [return: bb65, unwind: bb116];
    }

    bb65: {
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        StorageLive(_157);
        _157 = _125;
        _120 = std::result::Result::<(), error::ErrorCode>::Err(move _157);
        StorageDead(_157);
        StorageDead(_125);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_121);
        _119 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _120) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_120);
        _158 = discriminant(_119);
        switchInt(move _158) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_162);
        _162 = ((_119 as Continue).0: ());
        _118 = _162;
        StorageDead(_162);
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _261 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _168 = &((*_261).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _167 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _168) -> [return: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_159);
        _159 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb105;
    }

    bb71: {
        StorageDead(_168);
        StorageLive(_169);
        _169 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _166 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _167, move _169) -> [return: bb72, unwind: bb116];
    }

    bb72: {
        StorageDead(_169);
        StorageDead(_167);
        _165 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _166) -> [return: bb73, unwind: bb116];
    }

    bb73: {
        StorageDead(_166);
        _170 = discriminant(_165);
        switchInt(move _170) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_174);
        _174 = move ((_165 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _164 = move _174;
        StorageDead(_174);
        _163 = &mut _164;
        _266 = discriminant(_165);
        StorageDead(_165);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _253 = const _;
        _185 = &(*_253);
        _184 = &(*_185);
        _183 = move _184 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_184);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &(*_163);
        _194 = <RefMut<'_, PerpMarket> as Deref>::deref(move _195) -> [return: bb77, unwind: bb109];
    }

    bb75: {
        StorageLive(_171);
        _171 = ((_165 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb76, unwind: bb117];
    }

    bb76: {
        StorageDead(_173);
        StorageDead(_171);
        _264 = discriminant(_165);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb105;
    }

    bb77: {
        StorageDead(_195);
        _193 = &((*_194).21: u16);
        _192 = &(*_193);
        _191 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _192) -> [return: bb78, unwind: bb109];
    }

    bb78: {
        StorageDead(_192);
        _190 = [move _191];
        StorageDead(_191);
        _189 = &_190;
        _188 = &(*_189);
        _187 = move _188 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_188);
        _182 = Arguments::<'_>::new_v1(move _183, move _187) -> [return: bb79, unwind: bb109];
    }

    bb79: {
        StorageDead(_187);
        StorageDead(_183);
        _181 = format(move _182) -> [return: bb80, unwind: bb109];
    }

    bb80: {
        StorageDead(_182);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_185);
        _180 = move _181;
        StorageDead(_181);
        _179 = &_180;
        _178 = &(*_179);
        _177 = <String as Deref>::deref(move _178) -> [return: bb81, unwind: bb108];
    }

    bb81: {
        _176 = &(*_177);
        StorageDead(_178);
        _175 = solana_program::log::sol_log(move _176) -> [return: bb82, unwind: bb108];
    }

    bb82: {
        StorageDead(_176);
        drop(_180) -> [return: bb83, unwind: bb109];
    }

    bb83: {
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_175);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _252 = const _;
        _206 = &(*_252);
        _205 = &(*_206);
        _204 = move _205 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_205);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &(*_163);
        _215 = <RefMut<'_, PerpMarket> as Deref>::deref(move _216) -> [return: bb84, unwind: bb109];
    }

    bb84: {
        StorageDead(_216);
        _214 = &((*_215).17: u32);
        _213 = &(*_214);
        _212 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _213) -> [return: bb85, unwind: bb109];
    }

    bb85: {
        StorageDead(_213);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &_2;
        _218 = &(*_219);
        _217 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _218) -> [return: bb86, unwind: bb109];
    }

    bb86: {
        StorageDead(_218);
        _211 = [move _212, move _217];
        StorageDead(_217);
        StorageDead(_212);
        _210 = &_211;
        _209 = &(*_210);
        _208 = move _209 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_209);
        _203 = Arguments::<'_>::new_v1(move _204, move _208) -> [return: bb87, unwind: bb109];
    }

    bb87: {
        StorageDead(_208);
        StorageDead(_204);
        _202 = format(move _203) -> [return: bb88, unwind: bb109];
    }

    bb88: {
        StorageDead(_203);
        StorageDead(_219);
        StorageDead(_215);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_206);
        _201 = move _202;
        StorageDead(_202);
        _200 = &_201;
        _199 = &(*_200);
        _198 = <String as Deref>::deref(move _199) -> [return: bb89, unwind: bb107];
    }

    bb89: {
        _197 = &(*_198);
        StorageDead(_199);
        _196 = solana_program::log::sol_log(move _197) -> [return: bb90, unwind: bb107];
    }

    bb90: {
        StorageDead(_197);
        drop(_201) -> [return: bb91, unwind: bb109];
    }

    bb91: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_196);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _251 = const _;
        _230 = &(*_251);
        _229 = &(*_230);
        _228 = move _229 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_229);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &(*_163);
        _239 = <RefMut<'_, PerpMarket> as Deref>::deref(move _240) -> [return: bb92, unwind: bb109];
    }

    bb92: {
        StorageDead(_240);
        _238 = &((*_239).18: u32);
        _237 = &(*_238);
        _236 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _237) -> [return: bb93, unwind: bb109];
    }

    bb93: {
        StorageDead(_237);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &_3;
        _242 = &(*_243);
        _241 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _242) -> [return: bb94, unwind: bb109];
    }

    bb94: {
        StorageDead(_242);
        _235 = [move _236, move _241];
        StorageDead(_241);
        StorageDead(_236);
        _234 = &_235;
        _233 = &(*_234);
        _232 = move _233 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_233);
        _227 = Arguments::<'_>::new_v1(move _228, move _232) -> [return: bb95, unwind: bb109];
    }

    bb95: {
        StorageDead(_232);
        StorageDead(_228);
        _226 = format(move _227) -> [return: bb96, unwind: bb109];
    }

    bb96: {
        StorageDead(_227);
        StorageDead(_243);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_230);
        _225 = move _226;
        StorageDead(_226);
        _224 = &_225;
        _223 = &(*_224);
        _222 = <String as Deref>::deref(move _223) -> [return: bb97, unwind: bb106];
    }

    bb97: {
        _221 = &(*_222);
        StorageDead(_223);
        _220 = solana_program::log::sol_log(move _221) -> [return: bb98, unwind: bb106];
    }

    bb98: {
        StorageDead(_221);
        drop(_225) -> [return: bb99, unwind: bb109];
    }

    bb99: {
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_220);
        StorageLive(_244);
        _244 = _2;
        StorageLive(_245);
        StorageLive(_246);
        _246 = &mut (*_163);
        _245 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _246) -> [return: bb100, unwind: bb109];
    }

    bb100: {
        StorageDead(_246);
        ((*_245).17: u32) = move _244;
        StorageDead(_244);
        StorageDead(_245);
        StorageLive(_247);
        _247 = _3;
        StorageLive(_248);
        StorageLive(_249);
        _249 = &mut (*_163);
        _248 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _249) -> [return: bb101, unwind: bb109];
    }

    bb101: {
        StorageDead(_249);
        ((*_248).18: u32) = move _247;
        StorageDead(_247);
        StorageDead(_248);
        StorageLive(_250);
        _250 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _250);
        StorageDead(_250);
        drop(_164) -> [return: bb102, unwind: bb116];
    }

    bb102: {
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb105;
    }

    bb103: {
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb105;
    }

    bb104: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb105;
    }

    bb105: {
        return;
    }

    bb106 (cleanup): {
        drop(_225) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb107 (cleanup): {
        drop(_201) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb108 (cleanup): {
        drop(_180) -> [return: bb109, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_164) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_150) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_131) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_105) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_86) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_53) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_34) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        resume;
    }

    bb117 (cleanup): {
        _270 = discriminant(_165);
        goto -> bb116;
    }

    bb118 (cleanup): {
        _271 = discriminant(_5);
        goto -> bb116;
    }
}
