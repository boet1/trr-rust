digraph Mir_0_1127 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn admin::handle_zero_mm_oracle_fields(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::admin::HotAdminUpdatePerpMarket&lt;ReErased&gt;&gt;) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let mut _2: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;&gt;;<br align="left"/>let mut _4: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _5: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _7: Closure(DefId(0:5661 ~ drift[d311]::instructions::admin::handle_zero_mm_oracle_fields::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _12: std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _13: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _14: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _15: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _16: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _17: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _18: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _19: ();<br align="left"/>let mut _20: &amp;ReErased mut instructions::admin::HotAdminUpdatePerpMarket&lt;ReErased&gt;;<br align="left"/>let mut _21: isize;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: isize;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug perp_market =&gt; _2;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>>;
    bb0__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_20 = deref_copy (_1.1: &amp;mut instructions::admin::HotAdminUpdatePerpMarket&lt;'_&gt;)<br/>_6 = &amp;((*_20).2: anchor_lang::prelude::AccountLoader&lt;'_, state::perp_market::PerpMarket&gt;)<br/></td></tr><tr><td align="left">_5 = anchor_lang::prelude::AccountLoader::&lt;'_, PerpMarket&gt;::load_mut(move _6)</td></tr></table>>];
    bb1__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageLive(_7)<br/>_7 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_4 = std::result::Result::&lt;RefMut&lt;'_, PerpMarket&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _5, move _7)</td></tr></table>>];
    bb2__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;RefMut&lt;'_, PerpMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb3__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_8 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb4__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = move ((_3 as Continue).0: std::cell::RefMut&lt;'_, state::perp_market::PerpMarket&gt;)<br/>_2 = move _12<br/>StorageDead(_12)<br/>_23 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;mut _2<br/></td></tr><tr><td align="left">_13 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _14)</td></tr></table>>];
    bb5__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_11)<br/>_11 = _9<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb7__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>_21 = discriminant(_3)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>(((*_13).1: state::perp_market::AMM).67: i64) = const 0_i64<br/>StorageDead(_13)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = &amp;mut _2<br/></td></tr><tr><td align="left">_15 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _16)</td></tr></table>>];
    bb9__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>(((*_15).1: state::perp_market::AMM).79: u64) = const 0_u64<br/>StorageDead(_15)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = &amp;mut _2<br/></td></tr><tr><td align="left">_17 = &lt;RefMut&lt;'_, PerpMarket&gt; as DerefMut&gt;::deref_mut(move _18)</td></tr></table>>];
    bb10__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>(((*_17).1: state::perp_market::AMM).55: u64) = const 0_u64<br/>StorageDead(_17)<br/>StorageLive(_19)<br/>_19 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _19)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb11__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb13__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb14__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">14 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb15__0_1127 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left" balign="left">_25 = discriminant(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1127 -> bb1__0_1127 [label="return"];
    bb1__0_1127 -> bb2__0_1127 [label="return"];
    bb1__0_1127 -> bb14__0_1127 [label="unwind"];
    bb2__0_1127 -> bb3__0_1127 [label="return"];
    bb2__0_1127 -> bb14__0_1127 [label="unwind"];
    bb3__0_1127 -> bb4__0_1127 [label="0"];
    bb3__0_1127 -> bb6__0_1127 [label="1"];
    bb3__0_1127 -> bb5__0_1127 [label="otherwise"];
    bb4__0_1127 -> bb8__0_1127 [label="return"];
    bb4__0_1127 -> bb13__0_1127 [label="unwind"];
    bb6__0_1127 -> bb7__0_1127 [label="return"];
    bb6__0_1127 -> bb15__0_1127 [label="unwind"];
    bb7__0_1127 -> bb12__0_1127 [label=""];
    bb8__0_1127 -> bb9__0_1127 [label="return"];
    bb8__0_1127 -> bb13__0_1127 [label="unwind"];
    bb9__0_1127 -> bb10__0_1127 [label="return"];
    bb9__0_1127 -> bb13__0_1127 [label="unwind"];
    bb10__0_1127 -> bb11__0_1127 [label="return"];
    bb10__0_1127 -> bb14__0_1127 [label="unwind"];
    bb11__0_1127 -> bb12__0_1127 [label=""];
    bb13__0_1127 -> bb14__0_1127 [label="return"];
    bb15__0_1127 -> bb14__0_1127 [label=""];
}
