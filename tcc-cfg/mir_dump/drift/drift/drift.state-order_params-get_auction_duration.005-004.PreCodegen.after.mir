// MIR for `get_auction_duration` after PreCodegen

fn get_auction_duration(_1: u64, _2: u64, _3: state::perp_market::ContractTier) -> std::result::Result<u8, error::ErrorCode> {
    debug price_diff => _1;
    debug price => _2;
    debug contract_tier => _3;
    let mut _0: std::result::Result<u8, error::ErrorCode>;
    let _4: u64;
    let mut _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _7: std::result::Result<u64, error::ErrorCode>;
    let mut _8: u64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u64;
    let mut _14: u64;
    let mut _16: bool;
    let mut _17: &state::perp_market::ContractTier;
    let mut _18: &state::perp_market::ContractTier;
    let _19: &state::perp_market::ContractTier;
    let _20: state::perp_market::ContractTier;
    let mut _21: u8;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _25: std::result::Result<u64, error::ErrorCode>;
    let mut _26: u64;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _28: std::result::Result<u64, error::ErrorCode>;
    let mut _29: u64;
    let mut _30: u64;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: bool;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug percent_diff => _4;
        let _15: u64;
        let mut _43: &state::perp_market::ContractTier;
        scope 6 {
            debug slots_per_bp => _15;
            let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _35: u64;
            let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _42: u64;
            scope 7 {
                debug residual => _32;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _35;
                scope 10 {
                }
            }
            scope 11 {
                debug residual => _39;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _42;
                scope 14 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _7 = <u64 as SafeMath>::safe_mul(move _8, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: u64);
        _5 = _13;
        StorageDead(_13);
        StorageLive(_14);
        _14 = _2;
        _4 = <u64 as Div>::div(move _5, move _14) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u8, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb25;
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_5);
        StorageDead(_6);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &_3;
        StorageLive(_18);
        StorageLive(_19);
        _43 = const _;
        _19 = &(*_43);
        _18 = &(*_19);
        _16 = state::perp_market::ContractTier::is_as_safe_as_contract(move _17, move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _16) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        _15 = const 100_u64;
        goto -> bb11;
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        _15 = const 60_u64;
        goto -> bb11;
    }

    bb11: {
        StorageDead(_16);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _4;
        StorageLive(_30);
        _30 = _15;
        _28 = <u64 as SafeMath>::safe_mul(move _29, move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _31 = discriminant(_27);
        switchInt(move _31) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_27 as Continue).0: u64);
        _26 = _35;
        StorageDead(_35);
        StorageLive(_36);
        _37 = Eq(const 100_u64, const 0_u64);
        assert(!move _37, "attempt to divide `{}` by zero", const _) -> [success: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<u8, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb24;
    }

    bb17: {
        _36 = Div(const _, const 100_u64);
        _25 = <u64 as SafeMath>::safe_div_ceil(move _26, move _36) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_26);
        _24 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_25);
        _38 = discriminant(_24);
        switchInt(move _38) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_42);
        _42 = ((_24 as Continue).0: u64);
        _23 = _42;
        StorageDead(_42);
        _22 = <u64 as Ord>::clamp(move _23, const 1_u64, const 180_u64) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_39);
        _39 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u8, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_23);
        _21 = move _22 as u8 (IntToInt);
        StorageDead(_22);
        _0 = std::result::Result::<u8, error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_15);
        StorageDead(_4);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb25;
    }

    bb24: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_15);
        StorageDead(_4);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb25;
    }

    bb25: {
        return;
    }
}
