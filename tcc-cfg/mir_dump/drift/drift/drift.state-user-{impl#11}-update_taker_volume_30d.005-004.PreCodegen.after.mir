// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_taker_volume_30d` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_taker_volume_30d(_1: &mut UserStats, _2: u8, _3: u64, _4: i64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug fuel_boost => _2;
    debug quote_asset_amount => _3;
    debug now => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: i64;
    let mut _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: i64;
    let mut _10: i64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i64;
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &mut state::user::UserStats;
    let mut _20: u8;
    let mut _21: u64;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: u64;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _29: std::result::Result<u64, error::ErrorCode>;
    let mut _30: u64;
    let mut _31: u64;
    let mut _32: i64;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: i64;
    let mut _39: ();
    scope 1 {
        debug since_last => _5;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: ();
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: u64;
        scope 6 {
            debug residual => _23;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _26;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _34;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _37;
            scope 13 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _4;
        StorageLive(_10);
        _10 = ((*_1).8: i64);
        _8 = <i64 as SafeMath>::safe_sub(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: i64);
        _6 = _15;
        StorageDead(_15);
        _5 = std::cmp::max::<i64>(const 1_i64, move _6) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_7);
        goto -> bb18;
    }

    bb7: {
        StorageDead(_6);
        StorageDead(_7);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_1);
        StorageLive(_20);
        _20 = _2;
        StorageLive(_21);
        _21 = _3;
        _18 = UserStats::update_fuel_taker_bonus(move _19, move _20, move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_17 as Continue).0: ());
        _16 = _26;
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = ((*_1).5: u64);
        StorageLive(_31);
        _31 = _3;
        StorageLive(_32);
        _32 = _5;
        _29 = calculate_rolling_sum(move _30, move _31, move _32, const _) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb18;
    }

    bb13: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        _28 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _29) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_29);
        _33 = discriminant(_28);
        switchInt(move _33) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_37);
        _37 = ((_28 as Continue).0: u64);
        _27 = _37;
        StorageDead(_37);
        ((*_1).5: u64) = move _27;
        StorageDead(_27);
        StorageDead(_28);
        StorageLive(_38);
        _38 = _4;
        ((*_1).8: i64) = move _38;
        StorageDead(_38);
        StorageLive(_39);
        _39 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _39);
        StorageDead(_39);
        StorageDead(_5);
        goto -> bb19;
    }

    bb16: {
        StorageLive(_34);
        _34 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_27);
        StorageDead(_28);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_5);
        goto -> bb19;
    }

    bb19: {
        return;
    }
}
