digraph Mir_0_3804 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarket::get_market_depth_for_funding_rate(_1: &amp;ReErased state::perp_market::PerpMarket) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _2: u128;<br align="left"/>let mut _3: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _4: u64;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _7: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _10: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _16: u128;<br align="left"/>let mut _17: isize;<br align="left"/>let _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _19: !;<br align="left"/>let mut _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _21: u64;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _24: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: u64;<br align="left"/>let mut _31: u64;<br align="left"/>let mut _32: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _33: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _34: u64;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _39: u64;<br align="left"/>let mut _40: u64;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug open_interest =&gt; _2;<br align="left"/>debug depth =&gt; _4;<br align="left"/>debug residual =&gt; _13;<br align="left"/>debug val =&gt; _16;<br align="left"/>debug residual =&gt; _18;<br align="left"/>debug val =&gt; _21;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>>;
    bb0__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>_3 = &amp;(*_1)<br/></td></tr><tr><td align="left">_2 = PerpMarket::get_open_interest(move _3)</td></tr></table>>];
    bb1__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _2<br/></td></tr><tr><td align="left">_10 = &lt;u128 as SafeMath&gt;::safe_div(move _11, const 1000_u128)</td></tr></table>>];
    bb2__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb3__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_12 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_9 as Continue).0: u128)<br/>_8 = _16<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_7 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _8)</td></tr></table>>];
    bb5__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_15)<br/>_15 = _13<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _15)</td></tr></table>>];
    bb7__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb9__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_17 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb10__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_6 as Continue).0: u64)<br/>_5 = _21<br/>StorageDead(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = (((*_1).1: state::perp_market::AMM).54: u64)<br/></td></tr><tr><td align="left">_24 = &lt;u64 as SafeMath&gt;::safe_mul(move _25, const 100_u64)</td></tr></table>>];
    bb11__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_20)<br/>_20 = _18<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _20)</td></tr></table>>];
    bb12__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _24)</td></tr></table>>];
    bb14__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_26 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb15__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_23 as Continue).0: u64)<br/>_22 = _30<br/>StorageDead(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = (((*_1).1: state::perp_market::AMM).54: u64)<br/></td></tr><tr><td align="left">_33 = &lt;u64 as SafeMath&gt;::safe_mul(move _34, const 5000_u64)</td></tr></table>>];
    bb16__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_23 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb17__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_22)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _33)</td></tr></table>>];
    bb19__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_35 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb20__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_32 as Continue).0: u64)<br/>_31 = _39<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">_4 = &lt;u64 as Ord&gt;::clamp(move _5, move _22, move _31)</td></tr></table>>];
    bb21__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_32 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_38)<br/>_38 = _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb22__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_31)<br/>StorageDead(_22)<br/>StorageDead(_5)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_22)<br/>StorageDead(_5)<br/>StorageDead(_32)<br/>StorageDead(_23)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/>StorageLive(_40)<br/>_40 = _4<br/>_0 = std::result::Result::&lt;u64, error::ErrorCode&gt;::Ok(move _40)<br/>StorageDead(_40)<br/>StorageDead(_4)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_3804 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3804 -> bb1__0_3804 [label="return"];
    bb1__0_3804 -> bb2__0_3804 [label="return"];
    bb2__0_3804 -> bb3__0_3804 [label="return"];
    bb3__0_3804 -> bb4__0_3804 [label="0"];
    bb3__0_3804 -> bb6__0_3804 [label="1"];
    bb3__0_3804 -> bb5__0_3804 [label="otherwise"];
    bb4__0_3804 -> bb8__0_3804 [label="return"];
    bb6__0_3804 -> bb7__0_3804 [label="return"];
    bb7__0_3804 -> bb25__0_3804 [label=""];
    bb8__0_3804 -> bb9__0_3804 [label="return"];
    bb9__0_3804 -> bb10__0_3804 [label="0"];
    bb9__0_3804 -> bb11__0_3804 [label="1"];
    bb9__0_3804 -> bb5__0_3804 [label="otherwise"];
    bb10__0_3804 -> bb13__0_3804 [label="return"];
    bb11__0_3804 -> bb12__0_3804 [label="return"];
    bb12__0_3804 -> bb25__0_3804 [label=""];
    bb13__0_3804 -> bb14__0_3804 [label="return"];
    bb14__0_3804 -> bb15__0_3804 [label="0"];
    bb14__0_3804 -> bb16__0_3804 [label="1"];
    bb14__0_3804 -> bb5__0_3804 [label="otherwise"];
    bb15__0_3804 -> bb18__0_3804 [label="return"];
    bb16__0_3804 -> bb17__0_3804 [label="return"];
    bb17__0_3804 -> bb24__0_3804 [label=""];
    bb18__0_3804 -> bb19__0_3804 [label="return"];
    bb19__0_3804 -> bb20__0_3804 [label="0"];
    bb19__0_3804 -> bb21__0_3804 [label="1"];
    bb19__0_3804 -> bb5__0_3804 [label="otherwise"];
    bb20__0_3804 -> bb23__0_3804 [label="return"];
    bb21__0_3804 -> bb22__0_3804 [label="return"];
    bb22__0_3804 -> bb24__0_3804 [label=""];
    bb23__0_3804 -> bb27__0_3804 [label=""];
    bb24__0_3804 -> bb26__0_3804 [label=""];
    bb25__0_3804 -> bb26__0_3804 [label=""];
    bb26__0_3804 -> bb27__0_3804 [label=""];
}
