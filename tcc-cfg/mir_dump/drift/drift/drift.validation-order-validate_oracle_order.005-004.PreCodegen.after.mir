// MIR for `validate_oracle_order` after PreCodegen

fn validate_oracle_order(_1: &Order, _2: u64, _3: u64) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug step_size => _2;
    debug min_order_size => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: &state::user::Order;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: bool;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &state::user::Order;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: ();
    let _25: ();
    let mut _26: bool;
    let mut _27: u64;
    let mut _28: !;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: error::ErrorCode;
    let _33: ();
    let mut _34: bool;
    let mut _35: !;
    let _36: ();
    let mut _37: &str;
    let _38: &str;
    let mut _39: error::ErrorCode;
    let _40: ();
    let mut _41: bool;
    let mut _42: u64;
    let mut _43: !;
    let _44: ();
    let mut _45: &str;
    let _46: &str;
    let mut _47: error::ErrorCode;
    let _48: ();
    let mut _49: bool;
    let mut _50: !;
    let _51: ();
    let mut _52: &str;
    let _53: &str;
    let mut _54: error::ErrorCode;
    let mut _55: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _9 = _3;
        StorageLive(_10);
        _10 = ((*_1).18: bool);
        _6 = validate_base_asset_amount(move _7, move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_5 as Continue).0: ());
        _4 = _15;
        StorageDead(_15);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_1);
        _18 = validate_oracle_auction_params(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb24;
    }

    bb7: {
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: ());
        _16 = _24;
        StorageDead(_24);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = ((*_1).5: u64);
        _26 = Gt(move _27, const 0_u64);
        switchInt(move _26) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb24;
    }

    bb12: {
        StorageDead(_27);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = const "Oracle order should not have trigger price";
        _30 = &(*_31);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb14, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        _25 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_33);
        StorageLive(_34);
        _34 = ((*_1).19: bool);
        switchInt(move _34) -> [0: bb16, otherwise: bb15];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_32);
        _32 = error::ErrorCode::InvalidOrderTrigger;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _32);
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb24;
    }

    bb15: {
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = const "Oracle order can not be post only";
        _37 = &(*_38);
        _36 = solana_program::log::sol_log(move _37) -> [return: bb17, unwind continue];
    }

    bb16: {
        _33 = const ();
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = ((*_1).1: u64);
        _41 = Gt(move _42, const 0_u64);
        switchInt(move _41) -> [0: bb19, otherwise: bb18];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_39);
        _39 = error::ErrorCode::InvalidOrderPostOnly;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _39);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb24;
    }

    bb18: {
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = const "Oracle order can not have a price";
        _45 = &(*_46);
        _44 = solana_program::log::sol_log(move _45) -> [return: bb20, unwind continue];
    }

    bb19: {
        StorageDead(_42);
        _40 = const ();
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_48);
        StorageLive(_49);
        _49 = ((*_1).20: bool);
        switchInt(move _49) -> [0: bb22, otherwise: bb21];
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_47);
        _47 = error::ErrorCode::InvalidOrderLimitPrice;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _47);
        StorageDead(_47);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb24;
    }

    bb21: {
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = const "Oracle order can not be immediate or cancel";
        _52 = &(*_53);
        _51 = solana_program::log::sol_log(move _52) -> [return: bb23, unwind continue];
    }

    bb22: {
        _48 = const ();
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_55);
        _55 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _55);
        StorageDead(_55);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_52);
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_54);
        _54 = error::ErrorCode::InvalidOrderIOC;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb24;
    }

    bb24: {
        return;
    }
}
