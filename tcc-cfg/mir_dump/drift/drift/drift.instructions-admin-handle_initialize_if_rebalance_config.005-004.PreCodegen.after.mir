// MIR for `admin::handle_initialize_if_rebalance_config` after PreCodegen

fn admin::handle_initialize_if_rebalance_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializeIfRebalanceConfig<'_>>, _2: if_rebalance_config::IfRebalanceConfigParams) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: anchor_lang::prelude::Clock;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _5: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _10: anchor_lang::prelude::Clock;
    let mut _13: anchor_lang::prelude::AccountInfo<'_>;
    let mut _14: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>>;
    let mut _17: std::result::Result<std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>, anchor_lang::error::Error>;
    let mut _18: &anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _24: anchor_lang::prelude::Pubkey;
    let mut _25: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _26: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _27: u64;
    let mut _28: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _29: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _30: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _31: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _32: u64;
    let mut _33: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _34: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _35: i64;
    let mut _36: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _37: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _38: u16;
    let mut _39: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _40: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _41: u16;
    let mut _42: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _43: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _44: u16;
    let mut _45: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _46: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _47: u8;
    let mut _48: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _49: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _50: &mut state::if_rebalance_config::IfRebalanceConfig;
    let mut _51: &mut std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let _52: ();
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _54: std::result::Result<(), error::ErrorCode>;
    let mut _55: &state::if_rebalance_config::IfRebalanceConfig;
    let _56: &state::if_rebalance_config::IfRebalanceConfig;
    let mut _57: &std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: ();
    let mut _64: &mut instructions::admin::InitializeIfRebalanceConfig<'_>;
    let mut _65: &mut instructions::admin::InitializeIfRebalanceConfig<'_>;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    scope 1 {
        debug clock => _3;
        let _11: i64;
        scope 6 {
            debug now => _11;
            let _12: &anchor_lang::prelude::Pubkey;
            scope 7 {
                debug pubkey => _12;
                let mut _15: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
                let _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _23: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>;
                scope 8 {
                    debug config => _15;
                    let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _62: ();
                    scope 13 {
                        debug residual => _59;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _62;
                        scope 16 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _20;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _23;
                    scope 12 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb35];
    }

    bb2: {
        StorageDead(_5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_4 as Continue).0: anchor_lang::prelude::Clock);
        _3 = move _10;
        StorageDead(_10);
        _66 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_11);
        _11 = (_3.4: i64);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _64 = deref_copy (_1.1: &mut instructions::admin::InitializeIfRebalanceConfig<'_>);
        _14 = &((*_64).1: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _13 = <anchor_lang::prelude::AccountLoader<'_, IfRebalanceConfig> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _14) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb37];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _72 = discriminant(_4);
        StorageDead(_4);
        goto -> bb32;
    }

    bb7: {
        StorageDead(_14);
        _12 = (_13.0: &anchor_lang::prelude::Pubkey);
        drop(_13) -> [return: bb8, unwind: bb35];
    }

    bb8: {
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _65 = deref_copy (_1.1: &mut instructions::admin::InitializeIfRebalanceConfig<'_>);
        _18 = &((*_65).1: anchor_lang::prelude::AccountLoader<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _17 = anchor_lang::prelude::AccountLoader::<'_, IfRebalanceConfig>::load_init(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_18);
        _16 = <std::result::Result<RefMut<'_, IfRebalanceConfig>, anchor_lang::error::Error> as Try>::branch(move _17) -> [return: bb10, unwind: bb35];
    }

    bb10: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_23);
        _23 = move ((_16 as Continue).0: std::cell::RefMut<'_, state::if_rebalance_config::IfRebalanceConfig>);
        _15 = move _23;
        StorageDead(_23);
        _68 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_24);
        _24 = (*_12);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &mut _15;
        _25 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _26) -> [return: bb14, unwind: bb34];
    }

    bb12: {
        StorageLive(_20);
        _20 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _22) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        StorageDead(_22);
        StorageDead(_20);
        _70 = discriminant(_16);
        StorageDead(_16);
        goto -> bb31;
    }

    bb14: {
        StorageDead(_26);
        ((*_25).0: anchor_lang::prelude::Pubkey) = move _24;
        StorageDead(_24);
        StorageDead(_25);
        StorageLive(_27);
        _27 = (_2.0: u64);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _15;
        _28 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _29) -> [return: bb15, unwind: bb34];
    }

    bb15: {
        StorageDead(_29);
        ((*_28).1: u64) = move _27;
        StorageDead(_27);
        StorageDead(_28);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &mut _15;
        _30 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _31) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        StorageDead(_31);
        ((*_30).2: u64) = const 0_u64;
        StorageDead(_30);
        StorageLive(_32);
        _32 = (_2.1: u64);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &mut _15;
        _33 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _34) -> [return: bb17, unwind: bb34];
    }

    bb17: {
        StorageDead(_34);
        ((*_33).8: u64) = move _32;
        StorageDead(_32);
        StorageDead(_33);
        StorageLive(_35);
        _35 = (_2.2: i64);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &mut _15;
        _36 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _37) -> [return: bb18, unwind: bb34];
    }

    bb18: {
        StorageDead(_37);
        ((*_36).9: i64) = move _35;
        StorageDead(_35);
        StorageDead(_36);
        StorageLive(_38);
        _38 = (_2.3: u16);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut _15;
        _39 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _40) -> [return: bb19, unwind: bb34];
    }

    bb19: {
        StorageDead(_40);
        ((*_39).10: u16) = move _38;
        StorageDead(_38);
        StorageDead(_39);
        StorageLive(_41);
        _41 = (_2.4: u16);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &mut _15;
        _42 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _43) -> [return: bb20, unwind: bb34];
    }

    bb20: {
        StorageDead(_43);
        ((*_42).11: u16) = move _41;
        StorageDead(_41);
        StorageDead(_42);
        StorageLive(_44);
        _44 = (_2.5: u16);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &mut _15;
        _45 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _46) -> [return: bb21, unwind: bb34];
    }

    bb21: {
        StorageDead(_46);
        ((*_45).12: u16) = move _44;
        StorageDead(_44);
        StorageDead(_45);
        StorageLive(_47);
        _47 = (_2.6: u8);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &mut _15;
        _48 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _49) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        StorageDead(_49);
        ((*_48).13: u8) = move _47;
        StorageDead(_47);
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &mut _15;
        _50 = <RefMut<'_, IfRebalanceConfig> as DerefMut>::deref_mut(move _51) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        StorageDead(_51);
        ((*_50).14: u8) = const 0_u8;
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_15;
        _56 = <RefMut<'_, IfRebalanceConfig> as Deref>::deref(move _57) -> [return: bb24, unwind: bb34];
    }

    bb24: {
        _55 = &(*_56);
        StorageDead(_57);
        _54 = IfRebalanceConfig::validate(move _55) -> [return: bb25, unwind: bb34];
    }

    bb25: {
        StorageDead(_55);
        _53 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _54) -> [return: bb26, unwind: bb34];
    }

    bb26: {
        StorageDead(_54);
        _58 = discriminant(_53);
        switchInt(move _58) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_62);
        _62 = ((_53 as Continue).0: ());
        _52 = _62;
        StorageDead(_62);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_63);
        _63 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _63);
        StorageDead(_63);
        drop(_15) -> [return: bb30, unwind: bb35];
    }

    bb28: {
        StorageLive(_59);
        _59 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        drop(_15) -> [return: bb31, unwind: bb35];
    }

    bb30: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_3);
        goto -> bb33;
    }

    bb31: {
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_3);
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_15) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }

    bb36 (cleanup): {
        _74 = discriminant(_16);
        goto -> bb35;
    }

    bb37 (cleanup): {
        _75 = discriminant(_4);
        goto -> bb35;
    }
}
