// MIR for `calculate_funding_rate_deltas_to_resolve_bankruptcy` before PreCodegen

fn calculate_funding_rate_deltas_to_resolve_bankruptcy(_1: i128, _2: &PerpMarket) -> std::result::Result<i128, error::ErrorCode> {
    debug loss => _1;
    debug market => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _3: i128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _5: std::result::Result<i128, error::ErrorCode>;
    let mut _6: i128;
    let mut _7: i128;
    let mut _8: i128;
    let mut _9: i128;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i128;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _17: std::result::Result<(), error::ErrorCode>;
    let mut _18: bool;
    let mut _19: i128;
    let mut _20: ();
    let _22: ();
    let mut _23: &str;
    let _24: &str;
    let mut _25: &std::string::String;
    let _26: &std::string::String;
    let _27: std::string::String;
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[&str; 2];
    let _32: &[&str; 2];
    let _33: [&str; 2];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let mut _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: [core::fmt::rt::Argument<'_>; 1];
    let mut _38: core::fmt::rt::Argument<'_>;
    let mut _39: &error::ErrorCode;
    let _40: &error::ErrorCode;
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: error::ErrorCode;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: i128;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _52: std::result::Result<i128, error::ErrorCode>;
    let mut _53: i128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _55: std::result::Result<i128, error::ErrorCode>;
    let mut _56: i128;
    let mut _57: i128;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: i128;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: i128;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _71: std::result::Result<i128, error::ErrorCode>;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug total_base_asset_amount => _3;
        let _21: error::ErrorCode;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: ();
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: i128;
        let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _68: i128;
        let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _76: i128;
        scope 6 {
            debug error_code => _21;
            let _28: std::string::String;
            let mut _77: &[&str; 2];
            scope 7 {
                debug res => _28;
            }
        }
        scope 8 {
            debug residual => _46;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _49;
            scope 11 {
            }
        }
        scope 12 {
            debug residual => _59;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _62;
            scope 15 {
            }
        }
        scope 16 {
            debug residual => _65;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _68;
            scope 19 {
            }
        }
        scope 20 {
            debug residual => _73;
            scope 21 {
            }
        }
        scope 22 {
            debug val => _76;
            scope 23 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = (((*_2).1: state::perp_market::AMM).13: i128);
        _6 = core::num::<impl i128>::abs(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = (((*_2).1: state::perp_market::AMM).14: i128);
        _8 = core::num::<impl i128>::abs(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _5 = <i128 as SafeMath>::safe_add(move _6, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_5);
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_4 as Continue).0: i128);
        _3 = _14;
        StorageDead(_14);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _3;
        _18 = Ne(move _19, const 0_i128);
        switchInt(move _18) -> [0: bb10, otherwise: bb9];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_11);
        _11 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_4);
        goto -> bb42;
    }

    bb9: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = ();
        _17 = std::result::Result::<(), error::ErrorCode>::Ok(move _20);
        StorageDead(_20);
        goto -> bb18;
    }

    bb10: {
        StorageDead(_19);
        StorageLive(_21);
        _21 = error::ErrorCode::CantResolvePerpBankruptcy;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _77 = const _;
        _32 = &(*_77);
        _31 = &(*_32);
        _30 = move _31 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_21;
        _39 = &(*_40);
        _38 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_39);
        _37 = [move _38];
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = move _35 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_35);
        _29 = Arguments::<'_>::new_v1(move _30, move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_30);
        _28 = format(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        _27 = move _28;
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = <String as Deref>::deref(move _25) -> [return: bb14, unwind: bb44];
    }

    bb14: {
        _23 = &(*_24);
        StorageDead(_25);
        _22 = solana_program::log::sol_log(move _23) -> [return: bb15, unwind: bb44];
    }

    bb15: {
        StorageDead(_23);
        drop(_27) -> [return: bb16, unwind: bb45];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const "Cant resolve perp bankruptcy when total base asset amount is 0";
        _42 = &(*_43);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_44);
        _44 = _21;
        _17 = std::result::Result::<(), error::ErrorCode>::Err(move _44);
        StorageDead(_44);
        StorageDead(_21);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_18);
        _16 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _17) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_17);
        _45 = discriminant(_16);
        switchInt(move _45) -> [0: bb20, 1: bb21, otherwise: bb6];
    }

    bb20: {
        StorageLive(_49);
        _49 = ((_16 as Continue).0: ());
        _15 = _49;
        StorageDead(_49);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _1;
        _56 = core::num::<impl i128>::abs(move _57) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_46);
        _46 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb42;
    }

    bb23: {
        StorageDead(_57);
        _55 = <i128 as SafeMath>::safe_mul(move _56, const _) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_56);
        _54 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_55);
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb26, 1: bb27, otherwise: bb6];
    }

    bb26: {
        StorageLive(_62);
        _62 = ((_54 as Continue).0: i128);
        _53 = _62;
        StorageDead(_62);
        StorageLive(_63);
        _63 = _3;
        _52 = <i128 as SafeMath>::safe_div_ceil(move _53, move _63) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_59);
        _59 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb40;
    }

    bb29: {
        StorageDead(_63);
        StorageDead(_53);
        _51 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_52);
        _64 = discriminant(_51);
        switchInt(move _64) -> [0: bb31, 1: bb32, otherwise: bb6];
    }

    bb31: {
        StorageLive(_68);
        _68 = ((_51 as Continue).0: i128);
        _50 = _68;
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = <u128 as Cast>::cast::<i128>(const _) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_65);
        _65 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_67);
        StorageDead(_65);
        goto -> bb40;
    }

    bb34: {
        _70 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_71);
        _72 = discriminant(_70);
        switchInt(move _72) -> [0: bb36, 1: bb37, otherwise: bb6];
    }

    bb36: {
        StorageLive(_76);
        _76 = ((_70 as Continue).0: i128);
        _69 = _76;
        StorageDead(_76);
        _0 = <i128 as SafeMath>::safe_mul(move _50, move _69) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_73);
        _73 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_50);
        StorageDead(_3);
        StorageDead(_70);
        goto -> bb41;
    }

    bb39: {
        StorageDead(_69);
        StorageDead(_50);
        StorageDead(_3);
        StorageDead(_70);
        StorageDead(_54);
        StorageDead(_51);
        goto -> bb43;
    }

    bb40: {
        StorageDead(_50);
        StorageDead(_3);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_54);
        StorageDead(_51);
        goto -> bb43;
    }

    bb42: {
        StorageDead(_3);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_27) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        resume;
    }
}
