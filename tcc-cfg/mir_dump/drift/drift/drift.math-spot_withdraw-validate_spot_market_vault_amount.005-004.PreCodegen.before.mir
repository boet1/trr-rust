// MIR for `validate_spot_market_vault_amount` before PreCodegen

fn validate_spot_market_vault_amount(_1: &SpotMarket, _2: u64) -> std::result::Result<i64, error::ErrorCode> {
    debug spot_market => _1;
    debug vault_amount => _2;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _3: i64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _5: std::result::Result<i64, error::ErrorCode>;
    let mut _6: &state::spot_market::SpotMarket;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: i64;
    let _12: ();
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _14: std::result::Result<(), error::ErrorCode>;
    let mut _15: bool;
    let mut _16: i64;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _18: std::result::Result<i64, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: i64;
    let mut _26: ();
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 2];
    let _38: &[&str; 2];
    let _39: [&str; 2];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &error::ErrorCode;
    let _46: &error::ErrorCode;
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 2];
    let _57: &[&str; 2];
    let _58: [&str; 2];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let mut _60: &[core::fmt::rt::Argument<'_>; 2];
    let _61: &[core::fmt::rt::Argument<'_>; 2];
    let _62: [core::fmt::rt::Argument<'_>; 2];
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &u64;
    let _65: &u64;
    let mut _66: core::fmt::rt::Argument<'_>;
    let mut _67: &i64;
    let _68: &i64;
    let mut _69: error::ErrorCode;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: i64;
    scope 1 {
        debug depositors_claim => _3;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: i64;
        let _27: error::ErrorCode;
        let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _74: ();
        scope 6 {
            debug residual => _21;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _24;
            scope 9 {
            }
        }
        scope 10 {
            debug error_code => _27;
            let _34: std::string::String;
            let _53: std::string::String;
            let mut _76: &[&str; 2];
            let mut _77: &[&str; 2];
            scope 11 {
                debug res => _34;
            }
            scope 12 {
                debug res => _53;
            }
        }
        scope 13 {
            debug residual => _71;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _74;
            scope 16 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = validate_spot_balances(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: i64);
        _3 = _11;
        StorageDead(_11);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _2;
        _18 = <u64 as Cast>::cast::<i64>(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb33;
    }

    bb7: {
        StorageDead(_19);
        _17 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: i64);
        _16 = _24;
        StorageDead(_24);
        StorageLive(_25);
        _25 = _3;
        _15 = Ge(move _16, move _25);
        switchInt(move _15) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb32;
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_26);
        _26 = ();
        _14 = std::result::Result::<(), error::ErrorCode>::Ok(move _26);
        StorageDead(_26);
        goto -> bb27;
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_27);
        _27 = error::ErrorCode::SpotMarketVaultInvariantViolated;
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _77 = const _;
        _38 = &(*_77);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_27;
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _45) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        StorageDead(_29);
        drop(_33) -> [return: bb19, unwind: bb37];
    }

    bb19: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _76 = const _;
        _57 = &(*_76);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_2;
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _64) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_3;
        _67 = &(*_68);
        _66 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _67) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_67);
        _62 = [move _63, move _66];
        StorageDead(_66);
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = move _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_60);
        _54 = Arguments::<'_>::new_v1(move _55, move _59) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_59);
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_54);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb24, unwind: bb35];
    }

    bb24: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb25, unwind: bb35];
    }

    bb25: {
        StorageDead(_48);
        drop(_52) -> [return: bb26, unwind: bb37];
    }

    bb26: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_69);
        _69 = _27;
        _14 = std::result::Result::<(), error::ErrorCode>::Err(move _69);
        StorageDead(_69);
        StorageDead(_27);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_15);
        _13 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _14) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_14);
        _70 = discriminant(_13);
        switchInt(move _70) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_74);
        _74 = ((_13 as Continue).0: ());
        _12 = _74;
        StorageDead(_74);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_75);
        _75 = _3;
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(move _75);
        StorageDead(_75);
        StorageDead(_3);
        goto -> bb34;
    }

    bb30: {
        StorageLive(_71);
        _71 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_73);
        StorageDead(_71);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_3);
        goto -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_52) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_33) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }
}
