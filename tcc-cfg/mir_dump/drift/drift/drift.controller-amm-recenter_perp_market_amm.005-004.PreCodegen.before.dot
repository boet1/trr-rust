digraph Mir_0_95 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn controller::amm::recenter_perp_market_amm(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: u128, _3: u128) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _4: controller::amm::SwapDirection;<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: i128;<br align="left"/>let _7: u128;<br align="left"/>let _8: u128;<br align="left"/>let mut _9: (u128, u128);<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _11: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: i128;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: controller::amm::SwapDirection;<br align="left"/>let mut _16: u128;<br align="left"/>let mut _17: isize;<br align="left"/>let _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _19: !;<br align="left"/>let mut _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _21: (u128, u128);<br align="left"/>let mut _22: u128;<br align="left"/>let _23: math::bn::U256;<br align="left"/>let mut _24: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U256&gt;;<br align="left"/>let mut _25: std::result::Result&lt;math::bn::U256, error::ErrorCode&gt;;<br align="left"/>let mut _26: math::bn::U256;<br align="left"/>let mut _27: u128;<br align="left"/>let mut _28: math::bn::U256;<br align="left"/>let mut _29: u128;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: math::bn::U256;<br align="left"/>let mut _35: u128;<br align="left"/>let mut _36: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _37: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _38: math::bn::U256;<br align="left"/>let mut _39: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::bn::U256&gt;;<br align="left"/>let mut _40: std::result::Result&lt;math::bn::U256, error::ErrorCode&gt;;<br align="left"/>let mut _41: math::bn::U256;<br align="left"/>let mut _42: math::bn::U256;<br align="left"/>let mut _43: u128;<br align="left"/>let mut _44: isize;<br align="left"/>let _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _46: !;<br align="left"/>let mut _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _48: math::bn::U256;<br align="left"/>let mut _49: isize;<br align="left"/>let _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _51: !;<br align="left"/>let mut _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _53: u128;<br align="left"/>let _54: ();<br align="left"/>let mut _55: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _56: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _57: bool;<br align="left"/>let mut _58: i128;<br align="left"/>let mut _59: i128;<br align="left"/>let mut _60: i128;<br align="left"/>let mut _61: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _62: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _63: u128;<br align="left"/>let mut _64: isize;<br align="left"/>let _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _66: !;<br align="left"/>let mut _67: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _68: i128;<br align="left"/>let mut _69: i128;<br align="left"/>let mut _70: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _71: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _72: u128;<br align="left"/>let mut _73: isize;<br align="left"/>let _74: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _75: !;<br align="left"/>let mut _76: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _77: i128;<br align="left"/>let mut _78: (i128, bool);<br align="left"/>let mut _79: ();<br align="left"/>let _80: error::ErrorCode;<br align="left"/>let _81: ();<br align="left"/>let mut _82: &amp;ReErased str;<br align="left"/>let _83: &amp;ReErased str;<br align="left"/>let mut _84: &amp;ReErased std::string::String;<br align="left"/>let _85: &amp;ReErased std::string::String;<br align="left"/>let _86: std::string::String;<br align="left"/>let _87: std::string::String;<br align="left"/>let mut _88: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _89: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _90: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _91: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _92: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _93: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _94: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _95: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _96: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _97: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _98: &amp;ReErased error::ErrorCode;<br align="left"/>let _99: &amp;ReErased error::ErrorCode;<br align="left"/>let _100: ();<br align="left"/>let mut _101: &amp;ReErased str;<br align="left"/>let _102: &amp;ReErased str;<br align="left"/>let mut _103: error::ErrorCode;<br align="left"/>let mut _104: isize;<br align="left"/>let _105: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _106: !;<br align="left"/>let mut _107: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _108: ();<br align="left"/>let mut _109: u128;<br align="left"/>let mut _110: u128;<br align="left"/>let _111: u128;<br align="left"/>let _112: u128;<br align="left"/>let mut _113: (u64, u128, u128);<br align="left"/>let mut _114: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u128, u128)&gt;;<br align="left"/>let mut _115: std::result::Result&lt;(u64, u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _116: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _117: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _118: isize;<br align="left"/>let _119: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _120: !;<br align="left"/>let mut _121: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _122: (u64, u128, u128);<br align="left"/>let mut _123: u128;<br align="left"/>let _124: u128;<br align="left"/>let _125: u128;<br align="left"/>let mut _126: (u128, u128);<br align="left"/>let mut _127: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128)&gt;;<br align="left"/>let mut _128: std::result::Result&lt;(u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _129: u128;<br align="left"/>let mut _130: u128;<br align="left"/>let mut _131: isize;<br align="left"/>let _132: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _133: !;<br align="left"/>let mut _134: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _135: (u128, u128);<br align="left"/>let mut _136: u128;<br align="left"/>let mut _137: u128;<br align="left"/>let _138: u64;<br align="left"/>let mut _139: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _140: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _141: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _142: isize;<br align="left"/>let _143: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _144: !;<br align="left"/>let mut _145: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _146: u64;<br align="left"/>let _147: (u32, u32);<br align="left"/>let mut _148: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u32, u32)&gt;;<br align="left"/>let mut _149: std::result::Result&lt;(u32, u32), error::ErrorCode&gt;;<br align="left"/>let mut _150: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _151: u64;<br align="left"/>let mut _152: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _153: isize;<br align="left"/>let _154: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _155: !;<br align="left"/>let mut _156: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _157: (u32, u32);<br align="left"/>let mut _158: ();<br align="left"/>let mut _159: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>debug market =&gt; _1;<br align="left"/>debug peg_multiplier =&gt; _2;<br align="left"/>debug sqrt_k =&gt; _3;<br align="left"/>debug swap_direction =&gt; _4;<br align="left"/>debug new_quote_asset_amount =&gt; _7;<br align="left"/>debug new_base_asset_amount =&gt; _8;<br align="left"/>debug residual =&gt; _18;<br align="left"/>debug val =&gt; _21;<br align="left"/>debug k =&gt; _23;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug residual =&gt; _45;<br align="left"/>debug val =&gt; _48;<br align="left"/>debug residual =&gt; _50;<br align="left"/>debug val =&gt; _53;<br align="left"/>debug residual =&gt; _65;<br align="left"/>debug val =&gt; _68;<br align="left"/>debug residual =&gt; _74;<br align="left"/>debug val =&gt; _77;<br align="left"/>debug error_code =&gt; _80;<br align="left"/>debug res =&gt; _87;<br align="left"/>debug residual =&gt; _105;<br align="left"/>debug val =&gt; _108;<br align="left"/>debug terminal_quote_reserves =&gt; _111;<br align="left"/>debug terminal_base_reserves =&gt; _112;<br align="left"/>debug residual =&gt; _119;<br align="left"/>debug val =&gt; _122;<br align="left"/>debug min_base_asset_reserve =&gt; _124;<br align="left"/>debug max_base_asset_reserve =&gt; _125;<br align="left"/>debug residual =&gt; _132;<br align="left"/>debug val =&gt; _135;<br align="left"/>debug reserve_price_after =&gt; _138;<br align="left"/>debug residual =&gt; _143;<br align="left"/>debug val =&gt; _146;<br align="left"/>debug residual =&gt; _154;<br align="left"/>debug val =&gt; _157;<br align="left"/>>;
    bb0__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = (((*_1).1: state::perp_market::AMM).15: i128)<br/>_5 = Gt(move _6, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = SwapDirection::Remove<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = SwapDirection::Add<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = (((*_1).1: state::perp_market::AMM).15: i128)<br/></td></tr><tr><td align="left">_12 = core::num::&lt;impl i128&gt;::unsigned_abs(move _13)</td></tr></table>>];
    bb4__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageLive(_14)<br/>_14 = _3<br/>StorageLive(_15)<br/>_15 = _4<br/>StorageLive(_16)<br/>_16 = _3<br/></td></tr><tr><td align="left">_11 = calculate_swap_output(move _12, move _14, move _15, move _16)</td></tr></table>>];
    bb5__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb6__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_17 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb7__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_10 as Continue).0: (u128, u128))<br/>_9 = _21<br/>StorageDead(_21)<br/>StorageLive(_7)<br/>_7 = (_9.0: u128)<br/>StorageLive(_8)<br/>_8 = (_9.1: u128)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageLive(_22)<br/>_22 = _8<br/>(((*_1).1: state::perp_market::AMM).5: u128) = move _22<br/>StorageDead(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _3<br/></td></tr><tr><td align="left">_26 = &lt;U256 as From&lt;u128&gt;&gt;::from(move _27)</td></tr></table>>];
    bb8__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_20)<br/>_20 = _18<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _20)</td></tr></table>>];
    bb10__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_18)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _3<br/></td></tr><tr><td align="left">_28 = &lt;U256 as From&lt;u128&gt;&gt;::from(move _29)</td></tr></table>>];
    bb12__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_25 = &lt;U256 as SafeMath&gt;::safe_mul(move _26, move _28)</td></tr></table>>];
    bb13__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;std::result::Result&lt;U256, error::ErrorCode&gt; as Try&gt;::branch(move _25)</td></tr></table>>];
    bb14__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_30 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb15__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_24 as Continue).0: math::bn::U256)<br/>_23 = _34<br/>StorageDead(_34)<br/>StorageDead(_24)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = _23<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = _8<br/></td></tr><tr><td align="left">_42 = &lt;U256 as From&lt;u128&gt;&gt;::from(move _43)</td></tr></table>>];
    bb16__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_24 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb17__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/></td></tr><tr><td align="left">_40 = &lt;U256 as SafeMath&gt;::safe_div(move _41, move _42)</td></tr></table>>];
    bb19__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_39 = &lt;std::result::Result&lt;U256, error::ErrorCode&gt; as Try&gt;::branch(move _40)</td></tr></table>>];
    bb20__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>_44 = discriminant(_39)<br/></td></tr><tr><td align="left">switchInt(move _44)</td></tr></table>>];
    bb21__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_39 as Continue).0: math::bn::U256)<br/>_38 = _48<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_37 = U256::try_to_u128(move _38)</td></tr></table>>];
    bb22__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_39 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_47)<br/>_47 = _45<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _47)</td></tr></table>>];
    bb23__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_45)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/></td></tr><tr><td align="left">_36 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _37)</td></tr></table>>];
    bb25__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_49 = discriminant(_36)<br/></td></tr><tr><td align="left">switchInt(move _49)</td></tr></table>>];
    bb26__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_36 as Continue).0: u128)<br/>_35 = _53<br/>StorageDead(_53)<br/>(((*_1).1: state::perp_market::AMM).6: u128) = move _35<br/>StorageDead(_35)<br/>StorageDead(_39)<br/>StorageDead(_36)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = _7<br/></td></tr><tr><td align="left">_62 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _63)</td></tr></table>>];
    bb27__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_36 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_52)<br/>_52 = _50<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _52)</td></tr></table>>];
    bb28__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/></td></tr><tr><td align="left">_61 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _62)</td></tr></table>>];
    bb30__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>_64 = discriminant(_61)<br/></td></tr><tr><td align="left">switchInt(move _64)</td></tr></table>>];
    bb31__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_68)<br/>_68 = ((_61 as Continue).0: i128)<br/>_60 = _68<br/>StorageDead(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>_72 = (((*_1).1: state::perp_market::AMM).6: u128)<br/></td></tr><tr><td align="left">_71 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _72)</td></tr></table>>];
    bb32__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = ((_61 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_67)<br/>_67 = _65<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _67)</td></tr></table>>];
    bb33__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_65)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/></td></tr><tr><td align="left">_70 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _71)</td></tr></table>>];
    bb35__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>_73 = discriminant(_70)<br/></td></tr><tr><td align="left">switchInt(move _73)</td></tr></table>>];
    bb36__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = ((_70 as Continue).0: i128)<br/>_69 = _77<br/>StorageDead(_77)<br/>_78 = CheckedSub(_60, _69)<br/></td></tr><tr><td align="left">assert(!move (_78.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _60, move _69)</td></tr></table>>];
    bb37__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_74)<br/>_74 = ((_70 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_76)<br/>_76 = _74<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _76)</td></tr></table>>];
    bb38__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_74)<br/>StorageDead(_69)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">_59 = move (_78.0: i128)<br/>StorageDead(_69)<br/>StorageDead(_60)<br/></td></tr><tr><td align="left">_58 = core::num::&lt;impl i128&gt;::abs(move _59)</td></tr></table>>];
    bb40__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>_57 = Lt(move _58, const 100_i128)<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb41__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_61)<br/>StorageDead(_58)<br/>StorageLive(_79)<br/>_79 = ()<br/>_56 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _79)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_61)<br/>StorageDead(_58)<br/>StorageLive(_80)<br/>_80 = error::ErrorCode::InvalidAmmDetected<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_159 = const _<br/>_91 = &amp;(*_159)<br/>_90 = &amp;(*_91)<br/>_89 = move _90 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_90)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>_99 = &amp;_80<br/>_98 = &amp;(*_99)<br/></td></tr><tr><td align="left">_97 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _98)</td></tr></table>>];
    bb43__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>_96 = [move _97]<br/>StorageDead(_97)<br/>_95 = &amp;_96<br/>_94 = &amp;(*_95)<br/>_93 = move _94 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">_88 = Arguments::&lt;'_&gt;::new_v1(move _89, move _93)</td></tr></table>>];
    bb44__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">_87 = format(move _88)</td></tr></table>>];
    bb45__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_99)<br/>StorageDead(_96)<br/>StorageDead(_95)<br/>StorageDead(_91)<br/>_86 = move _87<br/>StorageDead(_87)<br/>_85 = &amp;_86<br/>_84 = &amp;(*_85)<br/></td></tr><tr><td align="left">_83 = &lt;String as Deref&gt;::deref(move _84)</td></tr></table>>];
    bb46__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">_82 = &amp;(*_83)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">_81 = solana_program::log::sol_log(move _82)</td></tr></table>>];
    bb47__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/></td></tr><tr><td align="left">drop(_86)</td></tr></table>>];
    bb48__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_85)<br/>StorageDead(_83)<br/>StorageDead(_81)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>_102 = const &quot;quote_asset_reserve passed doesnt reconcile enough&quot;<br/>_101 = &amp;(*_102)<br/></td></tr><tr><td align="left">_100 = solana_program::log::sol_log(move _101)</td></tr></table>>];
    bb49__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_101)<br/>StorageDead(_102)<br/>StorageDead(_100)<br/>StorageLive(_103)<br/>_103 = _80<br/>_56 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _103)<br/>StorageDead(_103)<br/>StorageDead(_80)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/></td></tr><tr><td align="left">_55 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _56)</td></tr></table>>];
    bb51__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>_104 = discriminant(_55)<br/></td></tr><tr><td align="left">switchInt(move _104)</td></tr></table>>];
    bb52__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageLive(_108)<br/>_108 = ((_55 as Continue).0: ())<br/>_54 = _108<br/>StorageDead(_108)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageLive(_109)<br/>_109 = _3<br/>(((*_1).1: state::perp_market::AMM).10: u128) = move _109<br/>StorageDead(_109)<br/>StorageLive(_110)<br/>_110 = _2<br/>(((*_1).1: state::perp_market::AMM).11: u128) = move _110<br/>StorageDead(_110)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>_117 = &amp;((*_1).1: state::perp_market::AMM)<br/>_116 = &amp;(*_117)<br/></td></tr><tr><td align="left">_115 = calculate_terminal_price_and_reserves(move _116)</td></tr></table>>];
    bb53__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>_105 = ((_55 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_107)<br/>_107 = _105<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _107)</td></tr></table>>];
    bb54__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>StorageDead(_105)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_116)<br/></td></tr><tr><td align="left">_114 = &lt;std::result::Result&lt;(u64, u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _115)</td></tr></table>>];
    bb56__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/>_118 = discriminant(_114)<br/></td></tr><tr><td align="left">switchInt(move _118)</td></tr></table>>];
    bb57__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageLive(_122)<br/>_122 = ((_114 as Continue).0: (u64, u128, u128))<br/>_113 = _122<br/>StorageDead(_122)<br/>StorageLive(_111)<br/>_111 = (_113.1: u128)<br/>StorageLive(_112)<br/>_112 = (_113.2: u128)<br/>StorageDead(_117)<br/>StorageDead(_114)<br/>StorageDead(_113)<br/>StorageLive(_123)<br/>_123 = _111<br/>(((*_1).1: state::perp_market::AMM).12: u128) = move _123<br/>StorageDead(_123)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>_129 = (((*_1).1: state::perp_market::AMM).7: u128)<br/>StorageLive(_130)<br/>_130 = _112<br/></td></tr><tr><td align="left">_128 = calculate_bid_ask_bounds(move _129, move _130)</td></tr></table>>];
    bb58__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageLive(_119)<br/>_119 = ((_114 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_121)<br/>_121 = _119<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _121)</td></tr></table>>];
    bb59__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_119)<br/>StorageDead(_117)<br/>StorageDead(_114)<br/>StorageDead(_113)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_130)<br/>StorageDead(_129)<br/></td></tr><tr><td align="left">_127 = &lt;std::result::Result&lt;(u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _128)</td></tr></table>>];
    bb61__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>_131 = discriminant(_127)<br/></td></tr><tr><td align="left">switchInt(move _131)</td></tr></table>>];
    bb62__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_135)<br/>_135 = ((_127 as Continue).0: (u128, u128))<br/>_126 = _135<br/>StorageDead(_135)<br/>StorageLive(_124)<br/>_124 = (_126.0: u128)<br/>StorageLive(_125)<br/>_125 = (_126.1: u128)<br/>StorageDead(_127)<br/>StorageDead(_126)<br/>StorageLive(_136)<br/>_136 = _125<br/>(((*_1).1: state::perp_market::AMM).9: u128) = move _136<br/>StorageDead(_136)<br/>StorageLive(_137)<br/>_137 = _124<br/>(((*_1).1: state::perp_market::AMM).8: u128) = move _137<br/>StorageDead(_137)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>_141 = &amp;((*_1).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_140 = AMM::reserve_price(move _141)</td></tr></table>>];
    bb63__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_132)<br/>_132 = ((_127 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_134)<br/>_134 = _132<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _134)</td></tr></table>>];
    bb64__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_132)<br/>StorageDead(_127)<br/>StorageDead(_126)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_141)<br/></td></tr><tr><td align="left">_139 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _140)</td></tr></table>>];
    bb66__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/>_142 = discriminant(_139)<br/></td></tr><tr><td align="left">switchInt(move _142)</td></tr></table>>];
    bb67__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageLive(_146)<br/>_146 = ((_139 as Continue).0: u64)<br/>_138 = _146<br/>StorageDead(_146)<br/>StorageDead(_139)<br/>StorageLive(_147)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>_150 = &amp;mut (*_1)<br/>StorageLive(_151)<br/>_151 = _138<br/>StorageLive(_152)<br/>_152 = Option::&lt;u64&gt;::None<br/></td></tr><tr><td align="left">_149 = update_spreads(move _150, move _151, move _152)</td></tr></table>>];
    bb68__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageLive(_143)<br/>_143 = ((_139 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_145)<br/>_145 = _143<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _145)</td></tr></table>>];
    bb69__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_145)<br/>StorageDead(_143)<br/>StorageDead(_139)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>StorageDead(_151)<br/>StorageDead(_150)<br/></td></tr><tr><td align="left">_148 = &lt;std::result::Result&lt;(u32, u32), error::ErrorCode&gt; as Try&gt;::branch(move _149)</td></tr></table>>];
    bb71__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_149)<br/>_153 = discriminant(_148)<br/></td></tr><tr><td align="left">switchInt(move _153)</td></tr></table>>];
    bb72__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_157)<br/>_157 = ((_148 as Continue).0: (u32, u32))<br/>_147 = _157<br/>StorageDead(_157)<br/>StorageDead(_148)<br/>StorageDead(_147)<br/>StorageLive(_158)<br/>_158 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _158)<br/>StorageDead(_158)<br/>StorageDead(_138)<br/>StorageDead(_125)<br/>StorageDead(_124)<br/>StorageDead(_112)<br/>StorageDead(_111)<br/>StorageDead(_23)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb73__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_154)<br/>_154 = ((_148 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_156)<br/>_156 = _154<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _156)</td></tr></table>>];
    bb74__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_156)<br/>StorageDead(_154)<br/>StorageDead(_148)<br/>StorageDead(_147)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_125)<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb76__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>StorageDead(_111)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb78__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb79__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_39)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb80__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb81__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb82__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left">return</td></tr></table>>];
    bb83__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">83 (cleanup)</td></tr><tr><td align="left">drop(_86)</td></tr></table>>];
    bb84__0_95 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">84 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_95 -> bb2__0_95 [label="0"];
    bb0__0_95 -> bb1__0_95 [label="otherwise"];
    bb1__0_95 -> bb3__0_95 [label=""];
    bb2__0_95 -> bb3__0_95 [label=""];
    bb3__0_95 -> bb4__0_95 [label="return"];
    bb4__0_95 -> bb5__0_95 [label="return"];
    bb5__0_95 -> bb6__0_95 [label="return"];
    bb6__0_95 -> bb7__0_95 [label="0"];
    bb6__0_95 -> bb9__0_95 [label="1"];
    bb6__0_95 -> bb8__0_95 [label="otherwise"];
    bb7__0_95 -> bb11__0_95 [label="return"];
    bb9__0_95 -> bb10__0_95 [label="return"];
    bb10__0_95 -> bb81__0_95 [label=""];
    bb11__0_95 -> bb12__0_95 [label="return"];
    bb12__0_95 -> bb13__0_95 [label="return"];
    bb13__0_95 -> bb14__0_95 [label="return"];
    bb14__0_95 -> bb15__0_95 [label="0"];
    bb14__0_95 -> bb16__0_95 [label="1"];
    bb14__0_95 -> bb8__0_95 [label="otherwise"];
    bb15__0_95 -> bb18__0_95 [label="return"];
    bb16__0_95 -> bb17__0_95 [label="return"];
    bb17__0_95 -> bb80__0_95 [label=""];
    bb18__0_95 -> bb19__0_95 [label="return"];
    bb19__0_95 -> bb20__0_95 [label="return"];
    bb20__0_95 -> bb21__0_95 [label="0"];
    bb20__0_95 -> bb22__0_95 [label="1"];
    bb20__0_95 -> bb8__0_95 [label="otherwise"];
    bb21__0_95 -> bb24__0_95 [label="return"];
    bb22__0_95 -> bb23__0_95 [label="return"];
    bb23__0_95 -> bb79__0_95 [label=""];
    bb24__0_95 -> bb25__0_95 [label="return"];
    bb25__0_95 -> bb26__0_95 [label="0"];
    bb25__0_95 -> bb27__0_95 [label="1"];
    bb25__0_95 -> bb8__0_95 [label="otherwise"];
    bb26__0_95 -> bb29__0_95 [label="return"];
    bb27__0_95 -> bb28__0_95 [label="return"];
    bb28__0_95 -> bb79__0_95 [label=""];
    bb29__0_95 -> bb30__0_95 [label="return"];
    bb30__0_95 -> bb31__0_95 [label="0"];
    bb30__0_95 -> bb32__0_95 [label="1"];
    bb30__0_95 -> bb8__0_95 [label="otherwise"];
    bb31__0_95 -> bb34__0_95 [label="return"];
    bb32__0_95 -> bb33__0_95 [label="return"];
    bb33__0_95 -> bb77__0_95 [label=""];
    bb34__0_95 -> bb35__0_95 [label="return"];
    bb35__0_95 -> bb36__0_95 [label="0"];
    bb35__0_95 -> bb37__0_95 [label="1"];
    bb35__0_95 -> bb8__0_95 [label="otherwise"];
    bb36__0_95 -> bb39__0_95 [label="success"];
    bb37__0_95 -> bb38__0_95 [label="return"];
    bb38__0_95 -> bb77__0_95 [label=""];
    bb39__0_95 -> bb40__0_95 [label="return"];
    bb40__0_95 -> bb42__0_95 [label="0"];
    bb40__0_95 -> bb41__0_95 [label="otherwise"];
    bb41__0_95 -> bb50__0_95 [label=""];
    bb42__0_95 -> bb43__0_95 [label="return"];
    bb43__0_95 -> bb44__0_95 [label="return"];
    bb44__0_95 -> bb45__0_95 [label="return"];
    bb45__0_95 -> bb46__0_95 [label="return"];
    bb45__0_95 -> bb83__0_95 [label="unwind"];
    bb46__0_95 -> bb47__0_95 [label="return"];
    bb46__0_95 -> bb83__0_95 [label="unwind"];
    bb47__0_95 -> bb48__0_95 [label="return"];
    bb47__0_95 -> bb84__0_95 [label="unwind"];
    bb48__0_95 -> bb49__0_95 [label="return"];
    bb49__0_95 -> bb50__0_95 [label=""];
    bb50__0_95 -> bb51__0_95 [label="return"];
    bb51__0_95 -> bb52__0_95 [label="0"];
    bb51__0_95 -> bb53__0_95 [label="1"];
    bb51__0_95 -> bb8__0_95 [label="otherwise"];
    bb52__0_95 -> bb55__0_95 [label="return"];
    bb53__0_95 -> bb54__0_95 [label="return"];
    bb54__0_95 -> bb78__0_95 [label=""];
    bb55__0_95 -> bb56__0_95 [label="return"];
    bb56__0_95 -> bb57__0_95 [label="0"];
    bb56__0_95 -> bb58__0_95 [label="1"];
    bb56__0_95 -> bb8__0_95 [label="otherwise"];
    bb57__0_95 -> bb60__0_95 [label="return"];
    bb58__0_95 -> bb59__0_95 [label="return"];
    bb59__0_95 -> bb80__0_95 [label=""];
    bb60__0_95 -> bb61__0_95 [label="return"];
    bb61__0_95 -> bb62__0_95 [label="0"];
    bb61__0_95 -> bb63__0_95 [label="1"];
    bb61__0_95 -> bb8__0_95 [label="otherwise"];
    bb62__0_95 -> bb65__0_95 [label="return"];
    bb63__0_95 -> bb64__0_95 [label="return"];
    bb64__0_95 -> bb76__0_95 [label=""];
    bb65__0_95 -> bb66__0_95 [label="return"];
    bb66__0_95 -> bb67__0_95 [label="0"];
    bb66__0_95 -> bb68__0_95 [label="1"];
    bb66__0_95 -> bb8__0_95 [label="otherwise"];
    bb67__0_95 -> bb70__0_95 [label="return"];
    bb68__0_95 -> bb69__0_95 [label="return"];
    bb69__0_95 -> bb75__0_95 [label=""];
    bb70__0_95 -> bb71__0_95 [label="return"];
    bb71__0_95 -> bb72__0_95 [label="0"];
    bb71__0_95 -> bb73__0_95 [label="1"];
    bb71__0_95 -> bb8__0_95 [label="otherwise"];
    bb72__0_95 -> bb82__0_95 [label=""];
    bb73__0_95 -> bb74__0_95 [label="return"];
    bb74__0_95 -> bb75__0_95 [label=""];
    bb75__0_95 -> bb76__0_95 [label=""];
    bb76__0_95 -> bb80__0_95 [label=""];
    bb77__0_95 -> bb78__0_95 [label=""];
    bb78__0_95 -> bb80__0_95 [label=""];
    bb79__0_95 -> bb80__0_95 [label=""];
    bb80__0_95 -> bb81__0_95 [label=""];
    bb81__0_95 -> bb82__0_95 [label=""];
    bb83__0_95 -> bb84__0_95 [label="return"];
}
