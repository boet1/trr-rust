// MIR for `math::margin::validate_spot_margin_trading` before PreCodegen

fn math::margin::validate_spot_margin_trading(_1: &User, _2: &PerpMarketMap<'_>, _3: &SpotMarketMap<'_>, _4: &mut OracleMap<'_>) -> std::result::Result<(), error::ErrorCode> {
    debug user => _1;
    debug perp_market_map => _2;
    debug spot_market_map => _3;
    debug oracle_map => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: !;
    let _8: ();
    let mut _9: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _10: &[state::user::PerpPosition; 8];
    let mut _11: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _12: ();
    let _13: ();
    let mut _14: std::option::Option<&state::user::PerpPosition>;
    let mut _15: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _16: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _17: isize;
    let mut _18: !;
    let mut _20: bool;
    let mut _21: &state::user::PerpPosition;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _24: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _25: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _26: &u16;
    let _27: &u16;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _33: ();
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _35: std::result::Result<(), error::ErrorCode>;
    let mut _36: bool;
    let mut _37: &state::perp_market::ContractTier;
    let _38: &state::perp_market::PerpMarket;
    let mut _39: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _40: &state::perp_market::ContractTier;
    let _41: state::perp_market::ContractTier;
    let mut _42: ();
    let _44: ();
    let mut _45: &str;
    let _46: &str;
    let mut _47: &std::string::String;
    let _48: &std::string::String;
    let _49: std::string::String;
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[&str; 2];
    let _54: &[&str; 2];
    let _55: [&str; 2];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let mut _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: &error::ErrorCode;
    let _62: &error::ErrorCode;
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 2];
    let _73: &[&str; 2];
    let _74: [&str; 2];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &u16;
    let _81: &u16;
    let _82: &state::perp_market::PerpMarket;
    let mut _83: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _84: error::ErrorCode;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: ();
    let mut _91: i128;
    let _92: ();
    let mut _93: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _94: &[state::user::SpotPosition; 8];
    let _96: ();
    let mut _97: std::option::Option<&state::user::SpotPosition>;
    let mut _98: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _99: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _100: isize;
    let mut _101: !;
    let _104: ();
    let mut _105: bool;
    let mut _106: i64;
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _109: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _110: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _111: &u16;
    let _112: &u16;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _120: std::result::Result<i128, error::ErrorCode>;
    let mut _121: &state::user::SpotPosition;
    let mut _122: &state::spot_market::SpotMarket;
    let _123: &state::spot_market::SpotMarket;
    let mut _124: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _125: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _131: ();
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _133: std::result::Result<(), error::ErrorCode>;
    let mut _134: bool;
    let mut _135: i128;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _137: std::result::Result<i128, error::ErrorCode>;
    let mut _138: i128;
    let mut _139: i128;
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _141: std::result::Result<i128, error::ErrorCode>;
    let mut _142: i64;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: ();
    let _155: ();
    let mut _156: &str;
    let _157: &str;
    let mut _158: &std::string::String;
    let _159: &std::string::String;
    let _160: std::string::String;
    let mut _162: std::fmt::Arguments<'_>;
    let mut _163: &[&str];
    let mut _164: &[&str; 2];
    let _165: &[&str; 2];
    let _166: [&str; 2];
    let mut _167: &[core::fmt::rt::Argument<'_>];
    let mut _168: &[core::fmt::rt::Argument<'_>; 1];
    let _169: &[core::fmt::rt::Argument<'_>; 1];
    let _170: [core::fmt::rt::Argument<'_>; 1];
    let mut _171: core::fmt::rt::Argument<'_>;
    let mut _172: &error::ErrorCode;
    let _173: &error::ErrorCode;
    let _174: ();
    let mut _175: &str;
    let _176: &str;
    let mut _177: &std::string::String;
    let _178: &std::string::String;
    let _179: std::string::String;
    let mut _181: std::fmt::Arguments<'_>;
    let mut _182: &[&str];
    let mut _183: &[&str; 1];
    let _184: &[&str; 1];
    let _185: [&str; 1];
    let mut _186: &[core::fmt::rt::Argument<'_>];
    let mut _187: &[core::fmt::rt::Argument<'_>; 1];
    let _188: &[core::fmt::rt::Argument<'_>; 1];
    let _189: [core::fmt::rt::Argument<'_>; 1];
    let mut _190: core::fmt::rt::Argument<'_>;
    let mut _191: &u16;
    let _192: &u16;
    let mut _193: error::ErrorCode;
    let mut _194: isize;
    let mut _196: !;
    let mut _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _200: bool;
    let mut _201: i64;
    let mut _203: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _204: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _205: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _206: &u16;
    let _207: &u16;
    let mut _208: isize;
    let mut _210: !;
    let mut _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _214: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _215: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _216: &mut state::oracle_map::OracleMap<'_>;
    let mut _217: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _218: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _219: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _220: &state::spot_market::SpotMarket;
    let _221: &state::spot_market::SpotMarket;
    let mut _222: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _223: isize;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _229: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _230: std::result::Result<i128, error::ErrorCode>;
    let mut _231: i128;
    let mut _232: i64;
    let mut _233: i64;
    let mut _234: bool;
    let mut _235: u32;
    let mut _236: &state::spot_market::SpotMarket;
    let mut _237: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _238: i64;
    let mut _239: isize;
    let mut _241: !;
    let mut _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _244: i128;
    let mut _245: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _246: std::result::Result<i128, error::ErrorCode>;
    let mut _247: i128;
    let mut _248: i128;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _256: &state::user::User;
    let _257: ();
    let mut _258: bool;
    let mut _259: &state::user::SpotPosition;
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _262: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _263: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _264: isize;
    let mut _266: !;
    let mut _267: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _269: i128;
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _271: std::result::Result<i128, error::ErrorCode>;
    let mut _272: &state::user::SpotPosition;
    let mut _273: &state::spot_market::SpotMarket;
    let _274: &state::spot_market::SpotMarket;
    let mut _275: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _276: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _282: ();
    let mut _283: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _284: std::result::Result<(), error::ErrorCode>;
    let mut _285: bool;
    let mut _286: i128;
    let mut _287: bool;
    let mut _288: i128;
    let mut _289: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _290: std::result::Result<i128, error::ErrorCode>;
    let mut _291: i128;
    let mut _292: i128;
    let mut _293: isize;
    let mut _295: !;
    let mut _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _298: ();
    let _300: ();
    let mut _301: &str;
    let _302: &str;
    let mut _303: &std::string::String;
    let _304: &std::string::String;
    let _305: std::string::String;
    let mut _307: std::fmt::Arguments<'_>;
    let mut _308: &[&str];
    let mut _309: &[&str; 2];
    let _310: &[&str; 2];
    let _311: [&str; 2];
    let mut _312: &[core::fmt::rt::Argument<'_>];
    let mut _313: &[core::fmt::rt::Argument<'_>; 1];
    let _314: &[core::fmt::rt::Argument<'_>; 1];
    let _315: [core::fmt::rt::Argument<'_>; 1];
    let mut _316: core::fmt::rt::Argument<'_>;
    let mut _317: &error::ErrorCode;
    let _318: &error::ErrorCode;
    let _319: ();
    let mut _320: &str;
    let _321: &str;
    let mut _322: error::ErrorCode;
    let mut _323: isize;
    let mut _325: !;
    let mut _326: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _328: ();
    let mut _335: isize;
    let mut _336: isize;
    let mut _337: isize;
    let mut _338: isize;
    let mut _339: isize;
    let mut _340: isize;
    let mut _341: isize;
    let mut _342: isize;
    let mut _343: isize;
    let mut _344: isize;
    let mut _345: isize;
    let mut _346: isize;
    let mut _347: isize;
    let mut _348: isize;
    let mut _349: isize;
    let mut _350: isize;
    let mut _351: isize;
    let mut _352: isize;
    let mut _353: isize;
    let mut _354: isize;
    scope 1 {
        debug iter => _11;
        let _19: &state::user::PerpPosition;
        scope 2 {
            debug perp_position => _19;
            let _22: std::cell::Ref<'_, state::perp_market::PerpMarket>;
            let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _32: std::cell::Ref<'_, state::perp_market::PerpMarket>;
            scope 3 {
                debug perp_market => _22;
                let _43: error::ErrorCode;
                let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _89: ();
                let mut _331: &state::perp_market::ContractTier;
                scope 8 {
                    debug error_code => _43;
                    let _50: std::string::String;
                    let _69: std::string::String;
                    let mut _329: &[&str; 2];
                    let mut _330: &[&str; 2];
                    scope 9 {
                        debug res => _50;
                    }
                    scope 10 {
                        debug res => _69;
                    }
                }
                scope 11 {
                    debug residual => _86;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug val => _89;
                    scope 14 {
                    }
                }
            }
            scope 4 {
                debug residual => _29;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _32;
                scope 7 {
                }
            }
        }
    }
    scope 15 {
        debug total_open_bids_value => _91;
        let mut _95: std::slice::Iter<'_, state::user::SpotPosition>;
        let mut _254: i128;
        scope 16 {
            debug iter => _95;
            let _102: &state::user::SpotPosition;
            scope 17 {
                debug spot_position => _102;
                let _103: i64;
                scope 18 {
                    debug asks => _103;
                    let _107: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                    let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _117: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                    let _199: i64;
                    scope 19 {
                        debug spot_market => _107;
                        let _118: i128;
                        let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _130: i128;
                        scope 24 {
                            debug signed_token_amount => _118;
                            let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _147: i128;
                            let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _152: i128;
                            let _154: error::ErrorCode;
                            let _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _198: ();
                            scope 29 {
                                debug residual => _144;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _147;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug residual => _149;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _152;
                                scope 36 {
                                }
                            }
                            scope 37 {
                                debug error_code => _154;
                                let _161: std::string::String;
                                let _180: std::string::String;
                                let mut _332: &[&str; 1];
                                let mut _333: &[&str; 2];
                                scope 38 {
                                    debug res => _161;
                                }
                                scope 39 {
                                    debug res => _180;
                                }
                            }
                            scope 40 {
                                debug residual => _195;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug val => _198;
                                scope 43 {
                                }
                            }
                        }
                        scope 25 {
                            debug residual => _127;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug val => _130;
                            scope 28 {
                            }
                        }
                    }
                    scope 20 {
                        debug residual => _114;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug val => _117;
                        scope 23 {
                        }
                    }
                    scope 44 {
                        debug bids => _199;
                        let _202: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                        let _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _212: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                        scope 45 {
                            debug spot_market => _202;
                            let _213: &state::oracle::OraclePriceData;
                            let _224: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _227: &state::oracle::OraclePriceData;
                            scope 50 {
                                debug oracle_price_data => _213;
                                let _228: i128;
                                let _240: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _243: i128;
                                scope 55 {
                                    debug open_bids_value => _228;
                                    let _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _253: i128;
                                    scope 60 {
                                        debug residual => _250;
                                        scope 61 {
                                        }
                                    }
                                    scope 62 {
                                        debug val => _253;
                                        scope 63 {
                                        }
                                    }
                                }
                                scope 56 {
                                    debug residual => _240;
                                    scope 57 {
                                    }
                                }
                                scope 58 {
                                    debug val => _243;
                                    scope 59 {
                                    }
                                }
                            }
                            scope 51 {
                                debug residual => _224;
                                scope 52 {
                                }
                            }
                            scope 53 {
                                debug val => _227;
                                scope 54 {
                                }
                            }
                        }
                        scope 46 {
                            debug residual => _209;
                            scope 47 {
                            }
                        }
                        scope 48 {
                            debug val => _212;
                            scope 49 {
                            }
                        }
                    }
                }
            }
        }
        scope 64 {
            debug quote_token_amount => _254;
            let _255: &state::user::SpotPosition;
            scope 65 {
                debug quote_spot_position => _255;
                let _260: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                let _265: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _268: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                let _294: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _297: i128;
                let _299: error::ErrorCode;
                let _324: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _327: ();
                scope 66 {
                    debug quote_spot_market => _260;
                    let _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _281: i128;
                    scope 71 {
                        debug residual => _278;
                        scope 72 {
                        }
                    }
                    scope 73 {
                        debug val => _281;
                        scope 74 {
                        }
                    }
                }
                scope 67 {
                    debug residual => _265;
                    scope 68 {
                    }
                }
                scope 69 {
                    debug val => _268;
                    scope 70 {
                    }
                }
                scope 75 {
                    debug residual => _294;
                    scope 76 {
                    }
                }
                scope 77 {
                    debug val => _297;
                    scope 78 {
                    }
                }
                scope 79 {
                    debug error_code => _299;
                    let _306: std::string::String;
                    let mut _334: &[&str; 2];
                    scope 80 {
                        debug res => _306;
                    }
                }
                scope 81 {
                    debug residual => _324;
                    scope 82 {
                    }
                }
                scope 83 {
                    debug val => _327;
                    scope 84 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).20: bool);
        switchInt(move _6) -> [0: bb40, otherwise: bb1];
    }

    bb1: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &((*_1).4: [state::user::PerpPosition; 8]);
        _9 = <&[PerpPosition; 8] as IntoIterator>::into_iter(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageLive(_11);
        _11 = move _9;
        goto -> bb3;
    }

    bb3: {
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &mut _11;
        _15 = &mut (*_16);
        _14 = <std::slice::Iter<'_, PerpPosition> as Iterator>::next(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        StorageLive(_19);
        _19 = ((_14 as Some).0: &state::user::PerpPosition);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_19);
        _20 = PerpPosition::is_available(move _21) -> [return: bb8, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _8 = const ();
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_90);
        _90 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _90);
        StorageDead(_90);
        goto -> bb169;
    }

    bb8: {
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_21);
        _13 = const ();
        goto -> bb39;
    }

    bb10: {
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_2);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_19).13: u16);
        _26 = &(*_27);
        _24 = PerpMarketMap::<'_>::get_ref(move _25, move _26) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _24) -> [return: bb12, unwind: bb180];
    }

    bb12: {
        StorageDead(_24);
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb13, 1: bb14, otherwise: bb6];
    }

    bb13: {
        StorageLive(_32);
        _32 = move ((_23 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _22 = move _32;
        StorageDead(_32);
        _337 = discriminant(_23);
        StorageDead(_27);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_22;
        _38 = <Ref<'_, PerpMarket> as Deref>::deref(move _39) -> [return: bb16, unwind: bb179];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb15, unwind: bb184];
    }

    bb15: {
        StorageDead(_31);
        StorageDead(_29);
        _335 = discriminant(_23);
        StorageDead(_27);
        StorageDead(_23);
        goto -> bb168;
    }

    bb16: {
        StorageDead(_39);
        _37 = &((*_38).24: state::perp_market::ContractTier);
        StorageLive(_40);
        _331 = const _;
        _40 = &(*_331);
        _36 = <state::perp_market::ContractTier as PartialEq>::ne(move _37, move _40) -> [return: bb17, unwind: bb179];
    }

    bb17: {
        switchInt(move _36) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_42);
        _42 = ();
        _35 = std::result::Result::<(), error::ErrorCode>::Ok(move _42);
        StorageDead(_42);
        goto -> bb33;
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_43);
        _43 = error::ErrorCode::IsolatedAssetTierViolation;
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _330 = const _;
        _54 = &(*_330);
        _53 = &(*_54);
        _52 = move _53 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_43;
        _61 = &(*_62);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _61) -> [return: bb20, unwind: bb179];
    }

    bb20: {
        StorageDead(_61);
        _59 = [move _60];
        StorageDead(_60);
        _58 = &_59;
        _57 = &(*_58);
        _56 = move _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_57);
        _51 = Arguments::<'_>::new_v1(move _52, move _56) -> [return: bb21, unwind: bb179];
    }

    bb21: {
        StorageDead(_56);
        StorageDead(_52);
        _50 = format(move _51) -> [return: bb22, unwind: bb179];
    }

    bb22: {
        StorageDead(_51);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        _49 = move _50;
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = <String as Deref>::deref(move _47) -> [return: bb23, unwind: bb178];
    }

    bb23: {
        _45 = &(*_46);
        StorageDead(_47);
        _44 = solana_program::log::sol_log(move _45) -> [return: bb24, unwind: bb178];
    }

    bb24: {
        StorageDead(_45);
        drop(_49) -> [return: bb25, unwind: bb179];
    }

    bb25: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _329 = const _;
        _73 = &(*_329);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_22;
        _82 = <Ref<'_, PerpMarket> as Deref>::deref(move _83) -> [return: bb26, unwind: bb179];
    }

    bb26: {
        StorageDead(_83);
        _81 = &((*_82).21: u16);
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _80) -> [return: bb27, unwind: bb179];
    }

    bb27: {
        StorageDead(_80);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = Arguments::<'_>::new_v1(move _71, move _75) -> [return: bb28, unwind: bb179];
    }

    bb28: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb29, unwind: bb179];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <String as Deref>::deref(move _66) -> [return: bb30, unwind: bb177];
    }

    bb30: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb31, unwind: bb177];
    }

    bb31: {
        StorageDead(_64);
        drop(_68) -> [return: bb32, unwind: bb179];
    }

    bb32: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_84);
        _84 = _43;
        _35 = std::result::Result::<(), error::ErrorCode>::Err(move _84);
        StorageDead(_84);
        StorageDead(_43);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_36);
        _34 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _35) -> [return: bb34, unwind: bb179];
    }

    bb34: {
        StorageDead(_35);
        _85 = discriminant(_34);
        switchInt(move _85) -> [0: bb35, 1: bb36, otherwise: bb6];
    }

    bb35: {
        StorageLive(_89);
        _89 = ((_34 as Continue).0: ());
        _33 = _89;
        StorageDead(_89);
        StorageDead(_34);
        StorageDead(_33);
        _13 = const ();
        drop(_22) -> [return: bb38, unwind: bb180];
    }

    bb36: {
        StorageLive(_86);
        _86 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb37, unwind: bb179];
    }

    bb37: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_34);
        StorageDead(_33);
        drop(_22) -> [return: bb168, unwind: bb180];
    }

    bb38: {
        StorageDead(_22);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        _12 = const ();
        goto -> bb3;
    }

    bb40: {
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_91);
        _91 = const 0_i128;
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &((*_1).3: [state::user::SpotPosition; 8]);
        _93 = <&[SpotPosition; 8] as IntoIterator>::into_iter(move _94) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_94);
        StorageLive(_95);
        _95 = move _93;
        goto -> bb42;
    }

    bb42: {
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &mut _95;
        _98 = &mut (*_99);
        _97 = <std::slice::Iter<'_, SpotPosition> as Iterator>::next(move _98) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_98);
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb45, 1: bb44, otherwise: bb6];
    }

    bb44: {
        StorageLive(_102);
        _102 = ((_97 as Some).0: &state::user::SpotPosition);
        StorageLive(_103);
        _103 = ((*_102).2: i64);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _103;
        _105 = Lt(move _106, const 0_i64);
        switchInt(move _105) -> [0: bb88, otherwise: bb46];
    }

    bb45: {
        _92 = const ();
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_254);
        _254 = const 0_i128;
        StorageLive(_255);
        StorageLive(_256);
        _256 = &(*_1);
        _255 = User::get_quote_spot_position(move _256) -> [return: bb118, unwind continue];
    }

    bb46: {
        StorageDead(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &(*_3);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &((*_102).4: u16);
        _111 = &(*_112);
        _109 = SpotMarketMap::<'_>::get_ref(move _110, move _111) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_111);
        StorageDead(_110);
        _108 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _109) -> [return: bb48, unwind: bb180];
    }

    bb48: {
        StorageDead(_109);
        _113 = discriminant(_108);
        switchInt(move _113) -> [0: bb49, 1: bb50, otherwise: bb6];
    }

    bb49: {
        StorageLive(_117);
        _117 = move ((_108 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _107 = move _117;
        StorageDead(_117);
        _341 = discriminant(_108);
        StorageDead(_112);
        StorageDead(_108);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &(*_102);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_107;
        _124 = &(*_125);
        _123 = <Ref<'_, SpotMarket> as Deref>::deref(move _124) -> [return: bb52, unwind: bb176];
    }

    bb50: {
        StorageLive(_114);
        _114 = ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb51, unwind: bb183];
    }

    bb51: {
        StorageDead(_116);
        StorageDead(_114);
        _339 = discriminant(_108);
        StorageDead(_112);
        StorageDead(_108);
        goto -> bb165;
    }

    bb52: {
        _122 = &(*_123);
        StorageDead(_124);
        _120 = SpotPosition::get_signed_token_amount(move _121, move _122) -> [return: bb53, unwind: bb176];
    }

    bb53: {
        StorageDead(_122);
        StorageDead(_121);
        _119 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _120) -> [return: bb54, unwind: bb176];
    }

    bb54: {
        StorageDead(_120);
        _126 = discriminant(_119);
        switchInt(move _126) -> [0: bb55, 1: bb56, otherwise: bb6];
    }

    bb55: {
        StorageLive(_130);
        _130 = ((_119 as Continue).0: i128);
        _118 = _130;
        StorageDead(_130);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_119);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = _118;
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = _103;
        _141 = <i64 as Cast>::cast::<i128>(move _142) -> [return: bb58, unwind: bb176];
    }

    bb56: {
        StorageLive(_127);
        _127 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb57, unwind: bb176];
    }

    bb57: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_119);
        goto -> bb164;
    }

    bb58: {
        StorageDead(_142);
        _140 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _141) -> [return: bb59, unwind: bb176];
    }

    bb59: {
        StorageDead(_141);
        _143 = discriminant(_140);
        switchInt(move _143) -> [0: bb60, 1: bb61, otherwise: bb6];
    }

    bb60: {
        StorageLive(_147);
        _147 = ((_140 as Continue).0: i128);
        _139 = _147;
        StorageDead(_147);
        _137 = <i128 as SafeMath>::safe_add(move _138, move _139) -> [return: bb63, unwind: bb176];
    }

    bb61: {
        StorageLive(_144);
        _144 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb62, unwind: bb176];
    }

    bb62: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb162;
    }

    bb63: {
        StorageDead(_139);
        StorageDead(_138);
        _136 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _137) -> [return: bb64, unwind: bb176];
    }

    bb64: {
        StorageDead(_137);
        _148 = discriminant(_136);
        switchInt(move _148) -> [0: bb65, 1: bb66, otherwise: bb6];
    }

    bb65: {
        StorageLive(_152);
        _152 = ((_136 as Continue).0: i128);
        _135 = _152;
        StorageDead(_152);
        _134 = Ge(move _135, const 0_i128);
        switchInt(move _134) -> [0: bb69, otherwise: bb68];
    }

    bb66: {
        StorageLive(_149);
        _149 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb67, unwind: bb176];
    }

    bb67: {
        StorageDead(_151);
        StorageDead(_149);
        goto -> bb162;
    }

    bb68: {
        StorageDead(_140);
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_153);
        _153 = ();
        _133 = std::result::Result::<(), error::ErrorCode>::Ok(move _153);
        StorageDead(_153);
        goto -> bb82;
    }

    bb69: {
        StorageDead(_140);
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_154);
        _154 = error::ErrorCode::MarginTradingDisabled;
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _333 = const _;
        _165 = &(*_333);
        _164 = &(*_165);
        _163 = move _164 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_164);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_154;
        _172 = &(*_173);
        _171 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _172) -> [return: bb70, unwind: bb176];
    }

    bb70: {
        StorageDead(_172);
        _170 = [move _171];
        StorageDead(_171);
        _169 = &_170;
        _168 = &(*_169);
        _167 = move _168 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_168);
        _162 = Arguments::<'_>::new_v1(move _163, move _167) -> [return: bb71, unwind: bb176];
    }

    bb71: {
        StorageDead(_167);
        StorageDead(_163);
        _161 = format(move _162) -> [return: bb72, unwind: bb176];
    }

    bb72: {
        StorageDead(_162);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_169);
        StorageDead(_165);
        _160 = move _161;
        StorageDead(_161);
        _159 = &_160;
        _158 = &(*_159);
        _157 = <String as Deref>::deref(move _158) -> [return: bb73, unwind: bb175];
    }

    bb73: {
        _156 = &(*_157);
        StorageDead(_158);
        _155 = solana_program::log::sol_log(move _156) -> [return: bb74, unwind: bb175];
    }

    bb74: {
        StorageDead(_156);
        drop(_160) -> [return: bb75, unwind: bb176];
    }

    bb75: {
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_155);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _332 = const _;
        _184 = &(*_332);
        _183 = &(*_184);
        _182 = move _183 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_183);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &((*_102).4: u16);
        _191 = &(*_192);
        _190 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _191) -> [return: bb76, unwind: bb176];
    }

    bb76: {
        StorageDead(_191);
        _189 = [move _190];
        StorageDead(_190);
        _188 = &_189;
        _187 = &(*_188);
        _186 = move _187 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_187);
        _181 = Arguments::<'_>::new_v1(move _182, move _186) -> [return: bb77, unwind: bb176];
    }

    bb77: {
        StorageDead(_186);
        StorageDead(_182);
        _180 = format(move _181) -> [return: bb78, unwind: bb176];
    }

    bb78: {
        StorageDead(_181);
        StorageDead(_192);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_184);
        _179 = move _180;
        StorageDead(_180);
        _178 = &_179;
        _177 = &(*_178);
        _176 = <String as Deref>::deref(move _177) -> [return: bb79, unwind: bb174];
    }

    bb79: {
        _175 = &(*_176);
        StorageDead(_177);
        _174 = solana_program::log::sol_log(move _175) -> [return: bb80, unwind: bb174];
    }

    bb80: {
        StorageDead(_175);
        drop(_179) -> [return: bb81, unwind: bb176];
    }

    bb81: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_174);
        StorageLive(_193);
        _193 = _154;
        _133 = std::result::Result::<(), error::ErrorCode>::Err(move _193);
        StorageDead(_193);
        StorageDead(_154);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_134);
        _132 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _133) -> [return: bb83, unwind: bb176];
    }

    bb83: {
        StorageDead(_133);
        _194 = discriminant(_132);
        switchInt(move _194) -> [0: bb84, 1: bb85, otherwise: bb6];
    }

    bb84: {
        StorageLive(_198);
        _198 = ((_132 as Continue).0: ());
        _131 = _198;
        StorageDead(_198);
        StorageDead(_132);
        StorageDead(_131);
        _104 = const ();
        StorageDead(_118);
        drop(_107) -> [return: bb87, unwind: bb180];
    }

    bb85: {
        StorageLive(_195);
        _195 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_197);
        _197 = _195;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _197) -> [return: bb86, unwind: bb176];
    }

    bb86: {
        StorageDead(_197);
        StorageDead(_195);
        goto -> bb163;
    }

    bb87: {
        StorageDead(_107);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_106);
        _104 = const ();
        goto -> bb89;
    }

    bb89: {
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_199);
        _199 = ((*_102).1: i64);
        StorageLive(_200);
        StorageLive(_201);
        _201 = _199;
        _200 = Gt(move _201, const 0_i64);
        switchInt(move _200) -> [0: bb116, otherwise: bb90];
    }

    bb90: {
        StorageDead(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_3);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &((*_102).4: u16);
        _206 = &(*_207);
        _204 = SpotMarketMap::<'_>::get_ref(move _205, move _206) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_206);
        StorageDead(_205);
        _203 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _204) -> [return: bb92, unwind: bb180];
    }

    bb92: {
        StorageDead(_204);
        _208 = discriminant(_203);
        switchInt(move _208) -> [0: bb93, 1: bb94, otherwise: bb6];
    }

    bb93: {
        StorageLive(_212);
        _212 = move ((_203 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _202 = move _212;
        StorageDead(_212);
        _345 = discriminant(_203);
        StorageDead(_207);
        StorageDead(_203);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &mut (*_4);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _222 = &_202;
        _221 = <Ref<'_, SpotMarket> as Deref>::deref(move _222) -> [return: bb96, unwind: bb173];
    }

    bb94: {
        StorageLive(_209);
        _209 = ((_203 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_211);
        _211 = _209;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _211) -> [return: bb95, unwind: bb182];
    }

    bb95: {
        StorageDead(_211);
        StorageDead(_209);
        _343 = discriminant(_203);
        StorageDead(_207);
        StorageDead(_203);
        goto -> bb161;
    }

    bb96: {
        _220 = &(*_221);
        StorageDead(_222);
        _219 = SpotMarket::oracle_id(move _220) -> [return: bb97, unwind: bb173];
    }

    bb97: {
        StorageDead(_220);
        _218 = &_219;
        _217 = &(*_218);
        _215 = OracleMap::<'_>::get_price_data(move _216, move _217) -> [return: bb98, unwind: bb173];
    }

    bb98: {
        StorageDead(_217);
        StorageDead(_216);
        _214 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _215) -> [return: bb99, unwind: bb173];
    }

    bb99: {
        StorageDead(_215);
        _223 = discriminant(_214);
        switchInt(move _223) -> [0: bb100, 1: bb101, otherwise: bb6];
    }

    bb100: {
        StorageLive(_227);
        _227 = ((_214 as Continue).0: &state::oracle::OraclePriceData);
        _213 = _227;
        StorageDead(_227);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_214);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = _199;
        _234 = Eq(_233, const i64::MIN);
        assert(!move _234, "attempt to negate `{}`, which would overflow", _233) -> [success: bb103, unwind: bb173];
    }

    bb101: {
        StorageLive(_224);
        _224 = ((_214 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_226);
        _226 = _224;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _226) -> [return: bb102, unwind: bb173];
    }

    bb102: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_214);
        goto -> bb160;
    }

    bb103: {
        _232 = Neg(move _233);
        StorageDead(_233);
        _231 = move _232 as i128 (IntToInt);
        StorageDead(_232);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_202;
        _236 = <Ref<'_, SpotMarket> as Deref>::deref(move _237) -> [return: bb104, unwind: bb173];
    }

    bb104: {
        StorageDead(_237);
        _235 = ((*_236).41: u32);
        StorageLive(_238);
        _238 = ((*_213).0: i64);
        _230 = get_token_value(move _231, move _235, move _238) -> [return: bb105, unwind: bb173];
    }

    bb105: {
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_231);
        _229 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _230) -> [return: bb106, unwind: bb173];
    }

    bb106: {
        StorageDead(_230);
        _239 = discriminant(_229);
        switchInt(move _239) -> [0: bb107, 1: bb108, otherwise: bb6];
    }

    bb107: {
        StorageLive(_243);
        _243 = ((_229 as Continue).0: i128);
        _228 = _243;
        StorageDead(_243);
        StorageDead(_236);
        StorageDead(_229);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = _91;
        StorageLive(_248);
        _248 = _228;
        _246 = <i128 as SafeMath>::safe_add(move _247, move _248) -> [return: bb110, unwind: bb173];
    }

    bb108: {
        StorageLive(_240);
        _240 = ((_229 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_242);
        _242 = _240;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _242) -> [return: bb109, unwind: bb173];
    }

    bb109: {
        StorageDead(_242);
        StorageDead(_240);
        StorageDead(_236);
        StorageDead(_229);
        goto -> bb159;
    }

    bb110: {
        StorageDead(_248);
        StorageDead(_247);
        _245 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _246) -> [return: bb111, unwind: bb173];
    }

    bb111: {
        StorageDead(_246);
        _249 = discriminant(_245);
        switchInt(move _249) -> [0: bb112, 1: bb113, otherwise: bb6];
    }

    bb112: {
        StorageLive(_253);
        _253 = ((_245 as Continue).0: i128);
        _244 = _253;
        StorageDead(_253);
        _91 = move _244;
        StorageDead(_244);
        StorageDead(_245);
        _96 = const ();
        StorageDead(_228);
        StorageDead(_213);
        drop(_202) -> [return: bb115, unwind: bb180];
    }

    bb113: {
        StorageLive(_250);
        _250 = ((_245 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_252);
        _252 = _250;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _252) -> [return: bb114, unwind: bb173];
    }

    bb114: {
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_244);
        StorageDead(_245);
        goto -> bb159;
    }

    bb115: {
        StorageDead(_202);
        goto -> bb117;
    }

    bb116: {
        StorageDead(_201);
        _96 = const ();
        goto -> bb117;
    }

    bb117: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_96);
        _12 = const ();
        goto -> bb42;
    }

    bb118: {
        StorageDead(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        _259 = &(*_255);
        _258 = SpotPosition::is_available(move _259) -> [return: bb119, unwind continue];
    }

    bb119: {
        switchInt(move _258) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        StorageDead(_259);
        _257 = const ();
        goto -> bb134;
    }

    bb121: {
        StorageDead(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &(*_3);
        _262 = SpotMarketMap::<'_>::get_quote_spot_market(move _263) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_263);
        _261 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _262) -> [return: bb123, unwind: bb180];
    }

    bb123: {
        StorageDead(_262);
        _264 = discriminant(_261);
        switchInt(move _264) -> [0: bb124, 1: bb125, otherwise: bb6];
    }

    bb124: {
        StorageLive(_268);
        _268 = move ((_261 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _260 = move _268;
        StorageDead(_268);
        _349 = discriminant(_261);
        StorageDead(_261);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &(*_255);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_260;
        _275 = &(*_276);
        _274 = <Ref<'_, SpotMarket> as Deref>::deref(move _275) -> [return: bb127, unwind: bb172];
    }

    bb125: {
        StorageLive(_265);
        _265 = ((_261 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_267);
        _267 = _265;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _267) -> [return: bb126, unwind: bb181];
    }

    bb126: {
        StorageDead(_267);
        StorageDead(_265);
        _347 = discriminant(_261);
        StorageDead(_261);
        goto -> bb157;
    }

    bb127: {
        _273 = &(*_274);
        StorageDead(_275);
        _271 = SpotPosition::get_signed_token_amount(move _272, move _273) -> [return: bb128, unwind: bb172];
    }

    bb128: {
        StorageDead(_273);
        StorageDead(_272);
        _270 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _271) -> [return: bb129, unwind: bb172];
    }

    bb129: {
        StorageDead(_271);
        _277 = discriminant(_270);
        switchInt(move _277) -> [0: bb130, 1: bb131, otherwise: bb6];
    }

    bb130: {
        StorageLive(_281);
        _281 = ((_270 as Continue).0: i128);
        _269 = _281;
        StorageDead(_281);
        _254 = move _269;
        StorageDead(_269);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_270);
        _257 = const ();
        drop(_260) -> [return: bb133, unwind: bb180];
    }

    bb131: {
        StorageLive(_278);
        _278 = ((_270 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_280);
        _280 = _278;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _280) -> [return: bb132, unwind: bb172];
    }

    bb132: {
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_269);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_270);
        drop(_260) -> [return: bb157, unwind: bb180];
    }

    bb133: {
        StorageDead(_260);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = _91;
        _285 = Eq(move _286, const 0_i128);
        switchInt(move _285) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        StorageDead(_286);
        goto -> bb142;
    }

    bb136: {
        StorageDead(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = _254;
        StorageLive(_292);
        _292 = _91;
        _290 = <i128 as SafeMath>::safe_add(move _291, move _292) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_292);
        StorageDead(_291);
        _289 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _290) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_290);
        _293 = discriminant(_289);
        switchInt(move _293) -> [0: bb139, 1: bb140, otherwise: bb6];
    }

    bb139: {
        StorageLive(_297);
        _297 = ((_289 as Continue).0: i128);
        _288 = _297;
        StorageDead(_297);
        _287 = Ge(move _288, const 0_i128);
        switchInt(move _287) -> [0: bb143, otherwise: bb142];
    }

    bb140: {
        StorageLive(_294);
        _294 = ((_289 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_296);
        _296 = _294;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _296) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_289);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_285);
        StorageDead(_284);
        goto -> bb156;
    }

    bb142: {
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_298);
        _298 = ();
        _284 = std::result::Result::<(), error::ErrorCode>::Ok(move _298);
        StorageDead(_298);
        goto -> bb151;
    }

    bb143: {
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_299);
        _299 = error::ErrorCode::MarginTradingDisabled;
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _334 = const _;
        _310 = &(*_334);
        _309 = &(*_310);
        _308 = move _309 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_309);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &_299;
        _317 = &(*_318);
        _316 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _317) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_317);
        _315 = [move _316];
        StorageDead(_316);
        _314 = &_315;
        _313 = &(*_314);
        _312 = move _313 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_313);
        _307 = Arguments::<'_>::new_v1(move _308, move _312) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_312);
        StorageDead(_308);
        _306 = format(move _307) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_307);
        StorageDead(_318);
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_310);
        _305 = move _306;
        StorageDead(_306);
        _304 = &_305;
        _303 = &(*_304);
        _302 = <String as Deref>::deref(move _303) -> [return: bb147, unwind: bb171];
    }

    bb147: {
        _301 = &(*_302);
        StorageDead(_303);
        _300 = solana_program::log::sol_log(move _301) -> [return: bb148, unwind: bb171];
    }

    bb148: {
        StorageDead(_301);
        drop(_305) -> [return: bb149, unwind: bb180];
    }

    bb149: {
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_302);
        StorageDead(_300);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = const "Open bids leads to increased borrow for spot market 0";
        _320 = &(*_321);
        _319 = solana_program::log::sol_log(move _320) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_320);
        StorageDead(_321);
        StorageDead(_319);
        StorageLive(_322);
        _322 = _299;
        _284 = std::result::Result::<(), error::ErrorCode>::Err(move _322);
        StorageDead(_322);
        StorageDead(_299);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_287);
        StorageDead(_285);
        _283 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _284) -> [return: bb152, unwind continue];
    }

    bb152: {
        StorageDead(_284);
        _323 = discriminant(_283);
        switchInt(move _323) -> [0: bb153, 1: bb154, otherwise: bb6];
    }

    bb153: {
        StorageLive(_327);
        _327 = ((_283 as Continue).0: ());
        _282 = _327;
        StorageDead(_327);
        StorageDead(_283);
        StorageDead(_282);
        StorageLive(_328);
        _328 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _328);
        StorageDead(_328);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_91);
        goto -> bb170;
    }

    bb154: {
        StorageLive(_324);
        _324 = ((_283 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_326);
        _326 = _324;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _326) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_326);
        StorageDead(_324);
        goto -> bb156;
    }

    bb156: {
        StorageDead(_283);
        StorageDead(_282);
        goto -> bb158;
    }

    bb157: {
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_255);
        StorageDead(_254);
        goto -> bb167;
    }

    bb159: {
        StorageDead(_228);
        goto -> bb160;
    }

    bb160: {
        StorageDead(_213);
        drop(_202) -> [return: bb161, unwind: bb180];
    }

    bb161: {
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb166;
    }

    bb162: {
        StorageDead(_140);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb163;
    }

    bb163: {
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_118);
        drop(_107) -> [return: bb165, unwind: bb180];
    }

    bb165: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb166;
    }

    bb166: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb167;
    }

    bb167: {
        StorageDead(_91);
        goto -> bb170;
    }

    bb168: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb169;
    }

    bb169: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb170;
    }

    bb170: {
        return;
    }

    bb171 (cleanup): {
        drop(_305) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_260) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_202) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_179) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_160) -> [return: bb176, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_107) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_68) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_49) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        drop(_22) -> [return: bb180, unwind terminate(cleanup)];
    }

    bb180 (cleanup): {
        resume;
    }

    bb181 (cleanup): {
        _351 = discriminant(_261);
        goto -> bb180;
    }

    bb182 (cleanup): {
        _352 = discriminant(_203);
        goto -> bb180;
    }

    bb183 (cleanup): {
        _353 = discriminant(_108);
        goto -> bb180;
    }

    bb184 (cleanup): {
        _354 = discriminant(_23);
        goto -> bb180;
    }
}
