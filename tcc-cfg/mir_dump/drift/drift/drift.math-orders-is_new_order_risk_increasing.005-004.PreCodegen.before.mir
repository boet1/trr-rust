// MIR for `math::orders::is_new_order_risk_increasing` before PreCodegen

fn math::orders::is_new_order_risk_increasing(_1: &Order, _2: i64, _3: i64, _4: i64) -> std::result::Result<bool, error::ErrorCode> {
    debug order => _1;
    debug position_base_asset_amount => _2;
    debug position_bids => _3;
    debug position_asks => _4;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: !;
    let mut _8: isize;
    let _9: ();
    let mut _10: bool;
    let mut _11: i64;
    let mut _12: !;
    let mut _13: bool;
    let mut _14: i64;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _16: std::result::Result<i64, error::ErrorCode>;
    let mut _17: i64;
    let mut _18: i64;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _20: std::result::Result<i64, error::ErrorCode>;
    let mut _21: u64;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: i64;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _31: i64;
    let mut _32: i64;
    let mut _33: i64;
    let _34: ();
    let mut _35: bool;
    let mut _36: i64;
    let mut _37: !;
    let mut _38: bool;
    let mut _39: i64;
    let mut _40: i64;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _42: std::result::Result<i64, error::ErrorCode>;
    let mut _43: i64;
    let mut _44: i64;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _46: std::result::Result<i64, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: i64;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: i64;
    let mut _58: i64;
    scope 1 {
        debug residual => _23;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _26;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _28;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _31;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _49;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _52;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _54;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _57;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).18: bool);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb34;
    }

    bb2: {
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        _8 = discriminant(((*_1).17: controller::position::PositionDirection));
        switchInt(move _8) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _2;
        _35 = Le(move _36, const 0_i64);
        switchInt(move _35) -> [0: bb20, otherwise: bb19];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _2;
        _10 = Ge(move _11, const 0_i64);
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_11);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb34;
    }

    bb7: {
        StorageDead(_11);
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _3;
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_1).2: u64);
        _20 = <u64 as Cast>::cast::<i64>(move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        _19 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_19 as Continue).0: i64);
        _18 = _26;
        StorageDead(_26);
        _16 = <i64 as SafeMath>::safe_add(move _17, move _18) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb33;
    }

    bb13: {
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_16);
        _27 = discriminant(_15);
        switchInt(move _27) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_15 as Continue).0: i64);
        _14 = _31;
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _2;
        _32 = core::num::<impl i64>::abs(move _33) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_28);
        _28 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_28);
        goto -> bb33;
    }

    bb18: {
        StorageDead(_33);
        _13 = Gt(move _14, move _32);
        StorageDead(_32);
        StorageDead(_14);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        StorageDead(_19);
        StorageDead(_15);
        goto -> bb34;
    }

    bb19: {
        StorageDead(_36);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb34;
    }

    bb20: {
        StorageDead(_36);
        _34 = const ();
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _4;
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_1).2: u64);
        _46 = <u64 as Cast>::cast::<i64>(move _47) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_47);
        _45 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: i64);
        _44 = _52;
        StorageDead(_52);
        _42 = <i64 as SafeMath>::safe_sub(move _43, move _44) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb32;
    }

    bb26: {
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _42) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_42);
        _53 = discriminant(_41);
        switchInt(move _53) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_57);
        _57 = ((_41 as Continue).0: i64);
        _40 = _57;
        StorageDead(_57);
        _39 = core::num::<impl i64>::abs(move _40) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_54);
        _54 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb32;
    }

    bb31: {
        StorageDead(_40);
        StorageLive(_58);
        _58 = _2;
        _38 = Gt(move _39, move _58);
        StorageDead(_58);
        StorageDead(_39);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_45);
        StorageDead(_41);
        goto -> bb34;
    }

    bb32: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_45);
        StorageDead(_41);
        goto -> bb34;
    }

    bb33: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_19);
        StorageDead(_15);
        goto -> bb34;
    }

    bb34: {
        return;
    }
}
