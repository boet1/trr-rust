digraph Mir_0_4092 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SpotMarket::get_min_borrow_rate(_1: state::spot_market::SpotMarket) -&gt; std::result::Result&lt;u32, error::ErrorCode&gt;<br align="left"/>let mut _2: u32;<br align="left"/>let mut _3: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _4: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _5: u8;<br align="left"/>let mut _6: isize;<br align="left"/>let _7: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _8: !;<br align="left"/>let mut _9: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _10: u32;<br align="left"/>let mut _11: u32;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u32&gt;;<br align="left"/>let mut _13: std::result::Result&lt;u32, error::ErrorCode&gt;;<br align="left"/>let mut _14: u128;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: u32;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug residual =&gt; _7;<br align="left"/>debug val =&gt; _10;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>>;
    bb0__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = (_1.55: u8)<br/></td></tr><tr><td align="left">_4 = &lt;u8 as Cast&gt;::cast::&lt;u32&gt;(move _5)</td></tr></table>>];
    bb1__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">_3 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _4)</td></tr></table>>];
    bb2__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_6 = discriminant(_3)<br/></td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb3__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_3 as Continue).0: u32)<br/>_2 = _10<br/>StorageDead(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_15 = Eq(const 200_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _15, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb4__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = ((_3 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_9)<br/>_9 = _7<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _9)</td></tr></table>>];
    bb6__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_7)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_14 = Div(const _, const 200_u128)<br/></td></tr><tr><td align="left">_13 = &lt;u128 as Cast&gt;::cast::&lt;u32&gt;(move _14)</td></tr></table>>];
    bb8__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb9__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_16 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb10__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_12 as Continue).0: u32)<br/>_11 = _20<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_0 = &lt;u32 as SafeMath&gt;::safe_mul(move _2, move _11)</td></tr></table>>];
    bb11__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u32, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb12__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_11)<br/>StorageDead(_2)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_2)<br/>StorageDead(_12)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_4092 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4092 -> bb1__0_4092 [label="return"];
    bb1__0_4092 -> bb2__0_4092 [label="return"];
    bb2__0_4092 -> bb3__0_4092 [label="0"];
    bb2__0_4092 -> bb5__0_4092 [label="1"];
    bb2__0_4092 -> bb4__0_4092 [label="otherwise"];
    bb3__0_4092 -> bb7__0_4092 [label="success"];
    bb5__0_4092 -> bb6__0_4092 [label="return"];
    bb6__0_4092 -> bb14__0_4092 [label=""];
    bb7__0_4092 -> bb8__0_4092 [label="return"];
    bb8__0_4092 -> bb9__0_4092 [label="return"];
    bb9__0_4092 -> bb10__0_4092 [label="0"];
    bb9__0_4092 -> bb11__0_4092 [label="1"];
    bb9__0_4092 -> bb4__0_4092 [label="otherwise"];
    bb10__0_4092 -> bb13__0_4092 [label="return"];
    bb11__0_4092 -> bb12__0_4092 [label="return"];
    bb12__0_4092 -> bb14__0_4092 [label=""];
    bb13__0_4092 -> bb15__0_4092 [label=""];
    bb14__0_4092 -> bb15__0_4092 [label=""];
}
