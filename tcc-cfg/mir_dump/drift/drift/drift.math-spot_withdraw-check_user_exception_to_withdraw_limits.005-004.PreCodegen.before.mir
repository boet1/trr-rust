// MIR for `check_user_exception_to_withdraw_limits` before PreCodegen

fn check_user_exception_to_withdraw_limits(_1: &SpotMarket, _2: Option<&User>, _3: Option<u128>) -> std::result::Result<bool, error::ErrorCode> {
    debug spot_market => _1;
    debug user => _2;
    debug token_amount_withdrawn => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let mut _4: bool;
    let _5: ();
    let mut _6: isize;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::user::SpotPosition>;
    let mut _10: std::result::Result<&state::user::SpotPosition, error::ErrorCode>;
    let mut _11: &state::user::User;
    let mut _12: u16;
    let mut _13: isize;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: i128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: i128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _32: std::result::Result<i128, error::ErrorCode>;
    let mut _33: u64;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _44: ();
    let mut _45: &str;
    let _46: &str;
    let mut _47: &std::string::String;
    let _48: &std::string::String;
    let _49: std::string::String;
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[&str; 4];
    let _54: &[&str; 4];
    let _55: [&str; 4];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let mut _57: &[core::fmt::rt::Argument<'_>; 3];
    let _58: &[core::fmt::rt::Argument<'_>; 3];
    let _59: [core::fmt::rt::Argument<'_>; 3];
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: &i128;
    let _62: &i128;
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &u64;
    let _65: &u64;
    let mut _66: core::fmt::rt::Argument<'_>;
    let mut _67: &u64;
    let _68: &u64;
    let mut _69: bool;
    let mut _70: i128;
    let mut _71: bool;
    let mut _72: i64;
    let mut _73: bool;
    let mut _74: &state::spot_market::SpotBalanceType;
    let mut _75: &state::spot_market::SpotBalanceType;
    let _76: state::spot_market::SpotBalanceType;
    let mut _77: isize;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _81: std::result::Result<u128, error::ErrorCode>;
    let mut _82: u128;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _84: std::result::Result<u128, error::ErrorCode>;
    let mut _85: u64;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: &state::spot_market::SpotMarket;
    let mut _92: &state::spot_market::SpotBalanceType;
    let _93: &state::spot_market::SpotBalanceType;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: bool;
    let mut _100: u128;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _102: std::result::Result<u128, error::ErrorCode>;
    let mut _103: u128;
    let mut _104: u128;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: u128;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _112: std::result::Result<u128, error::ErrorCode>;
    let mut _113: u128;
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _115: std::result::Result<u128, error::ErrorCode>;
    let mut _116: u64;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: bool;
    scope 1 {
        debug valid_user_withdraw => _4;
        scope 2 {
            debug user => _7;
            let _7: &state::user::User;
            let _8: &state::user::SpotPosition;
            let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _17: &state::user::SpotPosition;
            scope 3 {
                debug spot_position => _8;
                let _18: i128;
                let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _29: i128;
                let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _38: i128;
                let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _43: i128;
                scope 8 {
                    debug net_deposits => _18;
                    let _50: std::string::String;
                    let mut _128: &state::spot_market::SpotBalanceType;
                    let mut _129: &[&str; 4];
                    scope 21 {
                        debug res => _50;
                    }
                    scope 22 {
                        debug token_amount_withdrawn => _78;
                        let _78: u128;
                        let _79: u128;
                        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _90: u128;
                        let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _98: u128;
                        scope 23 {
                            debug user_deposit_token_amount => _79;
                            let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _109: u128;
                            let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _121: u128;
                            let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _126: u128;
                            scope 32 {
                                debug residual => _106;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _109;
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug residual => _118;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug val => _121;
                                scope 39 {
                                }
                            }
                            scope 40 {
                                debug residual => _123;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug val => _126;
                                scope 43 {
                                }
                            }
                        }
                        scope 24 {
                            debug residual => _87;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug val => _90;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug residual => _95;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _98;
                            scope 31 {
                            }
                        }
                    }
                }
                scope 9 {
                    debug residual => _26;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _29;
                    scope 12 {
                    }
                }
                scope 13 {
                    debug residual => _35;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _38;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug residual => _40;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _43;
                    scope 20 {
                    }
                }
            }
            scope 4 {
                debug residual => _14;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _17;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        _4 = const false;
        StorageLive(_5);
        _6 = discriminant(_2);
        switchInt(move _6) -> [1: bb1, otherwise: bb70];
    }

    bb1: {
        StorageLive(_7);
        _7 = ((_2 as Some).0: &state::user::User);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_7);
        StorageLive(_12);
        _12 = ((*_1).42: u16);
        _10 = User::get_spot_position(move _11, move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<&SpotPosition, error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: &state::user::SpotPosition);
        _8 = _17;
        StorageDead(_17);
        StorageDead(_9);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = ((*_7).7: u64);
        _23 = <u64 as Cast>::cast::<i128>(move _24) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        goto -> bb79;
    }

    bb8: {
        StorageDead(_24);
        _22 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: i128);
        _21 = _29;
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = ((*_7).8: u64);
        _32 = <u64 as Cast>::cast::<i128>(move _33) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb77;
    }

    bb13: {
        StorageDead(_33);
        _31 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: i128);
        _30 = _38;
        StorageDead(_38);
        _20 = <i128 as SafeMath>::safe_sub(move _21, move _30) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_35);
        _35 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb76;
    }

    bb18: {
        StorageDead(_30);
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_20);
        _39 = discriminant(_19);
        switchInt(move _39) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_19 as Continue).0: i128);
        _18 = _43;
        StorageDead(_43);
        StorageDead(_31);
        StorageDead(_22);
        StorageDead(_19);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _129 = const _;
        _54 = &(*_129);
        _53 = &(*_54);
        _52 = move _53 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_18;
        _61 = &(*_62);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _61) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_40);
        _40 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb76;
    }

    bb23: {
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &((*_7).7: u64);
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _64) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &((*_7).8: u64);
        _67 = &(*_68);
        _66 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _67) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_67);
        _59 = [move _60, move _63, move _66];
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_60);
        _58 = &_59;
        _57 = &(*_58);
        _56 = move _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_57);
        _51 = Arguments::<'_>::new_v1(move _52, move _56) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_52);
        _50 = format(move _51) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        _49 = move _50;
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = <String as Deref>::deref(move _47) -> [return: bb28, unwind: bb81];
    }

    bb28: {
        _45 = &(*_46);
        StorageDead(_47);
        _44 = solana_program::log::sol_log(move _45) -> [return: bb29, unwind: bb81];
    }

    bb29: {
        StorageDead(_45);
        drop(_49) -> [return: bb30, unwind: bb82];
    }

    bb30: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _18;
        _69 = Ge(move _70, const 0_i128);
        switchInt(move _69) -> [0: bb67, otherwise: bb31];
    }

    bb31: {
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = ((*_8).3: i64);
        _71 = Ge(move _72, const 0_i64);
        switchInt(move _71) -> [0: bb66, otherwise: bb32];
    }

    bb32: {
        StorageDead(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = &((*_8).5: state::spot_market::SpotBalanceType);
        StorageLive(_75);
        _128 = const _;
        _75 = &(*_128);
        _73 = <SpotBalanceType as PartialEq>::eq(move _74, move _75) -> [return: bb33, unwind continue];
    }

    bb33: {
        switchInt(move _73) -> [0: bb65, otherwise: bb34];
    }

    bb34: {
        StorageDead(_75);
        StorageDead(_74);
        _77 = discriminant(_3);
        switchInt(move _77) -> [1: bb35, otherwise: bb64];
    }

    bb35: {
        StorageLive(_78);
        _78 = ((_3 as Some).0: u128);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = ((*_8).0: u64);
        _84 = <u64 as Cast>::cast::<u128>(move _85) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_85);
        _83 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _84) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_84);
        _86 = discriminant(_83);
        switchInt(move _86) -> [0: bb38, 1: bb39, otherwise: bb5];
    }

    bb38: {
        StorageLive(_90);
        _90 = ((_83 as Continue).0: u128);
        _82 = _90;
        StorageDead(_90);
        StorageLive(_91);
        _91 = &(*_1);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &((*_8).5: state::spot_market::SpotBalanceType);
        _92 = &(*_93);
        _81 = get_token_amount(move _82, move _91, move _92) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_87);
        _87 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb74;
    }

    bb41: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_82);
        _80 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_81);
        _94 = discriminant(_80);
        switchInt(move _94) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_98);
        _98 = ((_80 as Continue).0: u128);
        _79 = _98;
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_83);
        StorageDead(_80);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _79;
        StorageLive(_104);
        _104 = _78;
        _102 = <u128 as SafeMath>::safe_add(move _103, move _104) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_95);
        _95 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        goto -> bb74;
    }

    bb46: {
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _102) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_102);
        _105 = discriminant(_101);
        switchInt(move _105) -> [0: bb48, 1: bb49, otherwise: bb5];
    }

    bb48: {
        StorageLive(_109);
        _109 = ((_101 as Continue).0: u128);
        _100 = _109;
        StorageDead(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = ((*_1).17: u64);
        _115 = <u64 as Cast>::cast::<u128>(move _116) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_106);
        _106 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_108);
        StorageDead(_106);
        goto -> bb73;
    }

    bb51: {
        StorageDead(_116);
        _114 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _115) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_115);
        _117 = discriminant(_114);
        switchInt(move _117) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_121);
        _121 = ((_114 as Continue).0: u128);
        _113 = _121;
        StorageDead(_121);
        _112 = <u128 as SafeMath>::safe_div(move _113, const 10_u128) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_118);
        _118 = ((_114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb72;
    }

    bb56: {
        StorageDead(_113);
        _111 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _112) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_112);
        _122 = discriminant(_111);
        switchInt(move _122) -> [0: bb58, 1: bb59, otherwise: bb5];
    }

    bb58: {
        StorageLive(_126);
        _126 = ((_111 as Continue).0: u128);
        _110 = _126;
        StorageDead(_126);
        _99 = Lt(move _100, move _110);
        switchInt(move _99) -> [0: bb62, otherwise: bb61];
    }

    bb59: {
        StorageLive(_123);
        _123 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_125);
        StorageDead(_123);
        goto -> bb72;
    }

    bb61: {
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_101);
        StorageDead(_100);
        _4 = const true;
        _5 = const ();
        goto -> bb63;
    }

    bb62: {
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_101);
        StorageDead(_100);
        _5 = const ();
        goto -> bb63;
    }

    bb63: {
        StorageDead(_99);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb69;
    }

    bb64: {
        _5 = const ();
        goto -> bb69;
    }

    bb65: {
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb68;
    }

    bb66: {
        StorageDead(_72);
        goto -> bb68;
    }

    bb67: {
        StorageDead(_70);
        goto -> bb68;
    }

    bb68: {
        _5 = const ();
        goto -> bb69;
    }

    bb69: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_18);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb71;
    }

    bb70: {
        _5 = const ();
        goto -> bb71;
    }

    bb71: {
        StorageDead(_5);
        StorageLive(_127);
        _127 = _4;
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _127);
        StorageDead(_127);
        StorageDead(_4);
        goto -> bb80;
    }

    bb72: {
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb75;
    }

    bb74: {
        StorageDead(_83);
        StorageDead(_80);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_69);
        goto -> bb78;
    }

    bb76: {
        StorageDead(_31);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_22);
        StorageDead(_19);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_18);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb80;
    }

    bb80: {
        return;
    }

    bb81 (cleanup): {
        drop(_49) -> [return: bb82, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        resume;
    }
}
