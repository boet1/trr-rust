// MIR for `vault_amount_to_if_shares` before PreCodegen

fn vault_amount_to_if_shares(_1: u64, _2: u128, _3: u64) -> std::result::Result<u128, error::ErrorCode> {
    debug amount => _1;
    debug total_if_shares => _2;
    debug insurance_fund_vault_balance => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: u128;
    let mut _5: bool;
    let mut _6: u64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _8: std::result::Result<u128, error::ErrorCode>;
    let mut _9: u128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _11: std::result::Result<u128, error::ErrorCode>;
    let mut _12: u64;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: u128;
    let mut _18: u128;
    let mut _19: u128;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _21: std::result::Result<u128, error::ErrorCode>;
    let mut _22: u64;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: u128;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: u128;
    let _33: ();
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _35: std::result::Result<(), error::ErrorCode>;
    let mut _36: bool;
    let mut _37: u128;
    let mut _38: ();
    let _39: error::ErrorCode;
    let _40: ();
    let mut _41: &str;
    let _42: &str;
    let mut _43: &std::string::String;
    let _44: &std::string::String;
    let _45: std::string::String;
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let mut _49: &[&str; 2];
    let _50: &[&str; 2];
    let _51: [&str; 2];
    let mut _52: &[core::fmt::rt::Argument<'_>];
    let mut _53: &[core::fmt::rt::Argument<'_>; 1];
    let _54: &[core::fmt::rt::Argument<'_>; 1];
    let _55: [core::fmt::rt::Argument<'_>; 1];
    let mut _56: core::fmt::rt::Argument<'_>;
    let mut _57: &error::ErrorCode;
    let _58: &error::ErrorCode;
    let _59: ();
    let mut _60: &str;
    let _61: &str;
    let mut _62: &std::string::String;
    let _63: &std::string::String;
    let _64: std::string::String;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[&str; 1];
    let _69: &[&str; 1];
    let _70: [&str; 1];
    let mut _71: error::ErrorCode;
    let mut _72: isize;
    let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _76: ();
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _78: std::result::Result<u128, error::ErrorCode>;
    let mut _79: u64;
    let mut _80: isize;
    let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _84: u128;
    let mut _85: u128;
    scope 1 {
        debug n_shares => _4;
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _24;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _27;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _29;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _32;
        scope 13 {
        }
    }
    scope 14 {
        debug error_code => _39;
        let _46: std::string::String;
        let _65: std::string::String;
        let mut _86: &[&str; 1];
        let mut _87: &[&str; 2];
        scope 15 {
            debug res => _46;
        }
        scope 16 {
            debug res => _65;
        }
    }
    scope 17 {
        debug residual => _73;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _76;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _81;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _84;
        scope 24 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Gt(move _6, const 0_u64);
        switchInt(move _5) -> [0: bb18, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _1;
        _11 = <u64 as Cast>::cast::<u128>(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _10 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = ((_10 as Continue).0: u128);
        _9 = _17;
        StorageDead(_17);
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _3;
        _21 = <u64 as Cast>::cast::<u128>(move _22) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_14);
        _14 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb44;
    }

    bb8: {
        StorageDead(_22);
        _20 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_20 as Continue).0: u128);
        _19 = _27;
        StorageDead(_27);
        _8 = get_proportion_u128(move _9, move _18, move _19) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_24);
        _24 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb43;
    }

    bb13: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_9);
        _7 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_8);
        _28 = discriminant(_7);
        switchInt(move _28) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_32);
        _32 = ((_7 as Continue).0: u128);
        _4 = _32;
        StorageDead(_32);
        StorageDead(_20);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb42;
    }

    bb16: {
        StorageLive(_29);
        _29 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_31);
        StorageDead(_29);
        goto -> bb43;
    }

    bb18: {
        StorageDead(_6);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _2;
        _36 = Eq(move _37, const 0_u128);
        switchInt(move _36) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_37);
        StorageLive(_38);
        _38 = ();
        _35 = std::result::Result::<(), error::ErrorCode>::Ok(move _38);
        StorageDead(_38);
        goto -> bb32;
    }

    bb20: {
        StorageDead(_37);
        StorageLive(_39);
        _39 = error::ErrorCode::InvalidIFSharesDetected;
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _87 = const _;
        _50 = &(*_87);
        _49 = &(*_50);
        _48 = move _49 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_49);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_39;
        _57 = &(*_58);
        _56 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _57) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_57);
        _55 = [move _56];
        StorageDead(_56);
        _54 = &_55;
        _53 = &(*_54);
        _52 = move _53 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_53);
        _47 = Arguments::<'_>::new_v1(move _48, move _52) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_52);
        StorageDead(_48);
        _46 = format(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_50);
        _45 = move _46;
        StorageDead(_46);
        _44 = &_45;
        _43 = &(*_44);
        _42 = <String as Deref>::deref(move _43) -> [return: bb24, unwind: bb48];
    }

    bb24: {
        _41 = &(*_42);
        StorageDead(_43);
        _40 = solana_program::log::sol_log(move _41) -> [return: bb25, unwind: bb48];
    }

    bb25: {
        StorageDead(_41);
        drop(_45) -> [return: bb26, unwind: bb49];
    }

    bb26: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _86 = const _;
        _69 = &(*_86);
        _68 = &(*_69);
        _67 = move _68 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_68);
        _66 = Arguments::<'_>::new_const(move _67) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_67);
        _65 = format(move _66) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_66);
        StorageDead(_69);
        _64 = move _65;
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = <String as Deref>::deref(move _62) -> [return: bb29, unwind: bb47];
    }

    bb29: {
        _60 = &(*_61);
        StorageDead(_62);
        _59 = solana_program::log::sol_log(move _60) -> [return: bb30, unwind: bb47];
    }

    bb30: {
        StorageDead(_60);
        drop(_64) -> [return: bb31, unwind: bb49];
    }

    bb31: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageLive(_71);
        _71 = _39;
        _35 = std::result::Result::<(), error::ErrorCode>::Err(move _71);
        StorageDead(_71);
        StorageDead(_39);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_36);
        _34 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _35) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_35);
        _72 = discriminant(_34);
        switchInt(move _72) -> [0: bb34, 1: bb35, otherwise: bb5];
    }

    bb34: {
        StorageLive(_76);
        _76 = ((_34 as Continue).0: ());
        _33 = _76;
        StorageDead(_76);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _1;
        _78 = <u64 as Cast>::cast::<u128>(move _79) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_73);
        _73 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb45;
    }

    bb37: {
        StorageDead(_79);
        _77 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _78) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_78);
        _80 = discriminant(_77);
        switchInt(move _80) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_84);
        _84 = ((_77 as Continue).0: u128);
        _4 = _84;
        StorageDead(_84);
        StorageDead(_77);
        goto -> bb42;
    }

    bb40: {
        StorageLive(_81);
        _81 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_77);
        goto -> bb45;
    }

    bb42: {
        StorageDead(_5);
        StorageLive(_85);
        _85 = _4;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _85);
        StorageDead(_85);
        StorageDead(_4);
        goto -> bb46;
    }

    bb43: {
        StorageDead(_20);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb46;
    }

    bb46: {
        return;
    }

    bb47 (cleanup): {
        drop(_64) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_45) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        resume;
    }
}
