// MIR for `calculate_funding_payment` after PreCodegen

fn calculate_funding_payment(_1: i128, _2: &PerpPosition) -> std::result::Result<i64, error::ErrorCode> {
    debug amm_cumulative_funding_rate => _1;
    debug market_position => _2;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _3: i128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _5: std::result::Result<i128, error::ErrorCode>;
    let mut _6: i128;
    let mut _7: i128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _9: std::result::Result<i128, error::ErrorCode>;
    let mut _10: i64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i128;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: i128;
    let _21: ();
    let mut _22: bool;
    let mut _23: i128;
    let mut _24: !;
    let mut _25: i128;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _27: std::result::Result<i128, error::ErrorCode>;
    let mut _28: i128;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _30: std::result::Result<i128, error::ErrorCode>;
    let mut _31: i128;
    let mut _32: i128;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _34: std::result::Result<i128, error::ErrorCode>;
    let mut _35: i64;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug funding_rate_delta => _3;
        let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _40: i128;
        let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _45: i128;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: i128;
        scope 10 {
            debug residual => _37;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _40;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _42;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _45;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _47;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _50;
            scope 21 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _17;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _20;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_2).0: i64);
        _9 = <i64 as Cast>::cast::<i128>(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: i128);
        _7 = _15;
        StorageDead(_15);
        _5 = <i128 as SafeMath>::safe_sub(move _6, move _7) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb32;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_5);
        _16 = discriminant(_4);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_4 as Continue).0: i128);
        _3 = _20;
        StorageDead(_20);
        StorageDead(_8);
        StorageDead(_4);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _3;
        _22 = Eq(move _23, const 0_i128);
        switchInt(move _22) -> [0: bb13, otherwise: bb12];
    }

    bb10: {
        StorageLive(_17);
        _17 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        goto -> bb32;
    }

    bb12: {
        StorageDead(_23);
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(const 0_i64);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb33;
    }

    bb13: {
        StorageDead(_23);
        _21 = const ();
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _3;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = ((*_2).1: i64);
        _34 = <i64 as Cast>::cast::<i128>(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _33 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_40);
        _40 = ((_33 as Continue).0: i128);
        _32 = _40;
        StorageDead(_40);
        _30 = _calculate_funding_payment(move _31, move _32) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_37);
        _37 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb30;
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        _29 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_30);
        _41 = discriminant(_29);
        switchInt(move _41) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_45);
        _45 = ((_29 as Continue).0: i128);
        _28 = _45;
        StorageDead(_45);
        _27 = <i128 as SafeMath>::safe_div(move _28, const _) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_42);
        _42 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_44);
        StorageDead(_42);
        goto -> bb30;
    }

    bb24: {
        StorageDead(_28);
        _26 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _27) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_27);
        _46 = discriminant(_26);
        switchInt(move _46) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_50);
        _50 = ((_26 as Continue).0: i128);
        _25 = _50;
        StorageDead(_50);
        _0 = <i128 as Cast>::cast::<i64>(move _25) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_47);
        _47 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb31;
    }

    bb29: {
        StorageDead(_25);
        StorageDead(_3);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_26);
        goto -> bb34;
    }

    bb30: {
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_25);
        StorageDead(_3);
        StorageDead(_33);
        StorageDead(_29);
        StorageDead(_26);
        goto -> bb34;
    }

    bb32: {
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb33;
    }

    bb33: {
        StorageDead(_3);
        goto -> bb34;
    }

    bb34: {
        return;
    }
}
