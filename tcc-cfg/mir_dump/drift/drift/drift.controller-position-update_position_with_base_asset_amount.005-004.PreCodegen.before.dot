digraph Mir_0_686 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn update_position_with_base_asset_amount(_1: u64, _2: controller::position::PositionDirection, _3: &amp;ReErased mut state::perp_market::PerpMarket, _4: &amp;ReErased mut state::user::User, _5: usize, _6: std::option::Option&lt;u64&gt;) -&gt; std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt;<br align="left"/>let _7: controller::amm::SwapDirection;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: u64;<br align="left"/>let _10: i64;<br align="left"/>let mut _11: (u64, i64);<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, i64)&gt;;<br align="left"/>let mut _13: std::result::Result&lt;(u64, i64), error::ErrorCode&gt;;<br align="left"/>let mut _14: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _15: u64;<br align="left"/>let mut _16: controller::amm::SwapDirection;<br align="left"/>let mut _17: isize;<br align="left"/>let _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _19: !;<br align="left"/>let mut _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _21: (u64, i64);<br align="left"/>let _22: u64;<br align="left"/>let _23: i64;<br align="left"/>let mut _24: (u64, i64);<br align="left"/>let mut _25: isize;<br align="left"/>let _26: u64;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, i64)&gt;;<br align="left"/>let mut _28: std::result::Result&lt;(u64, i64), error::ErrorCode&gt;;<br align="left"/>let mut _29: controller::position::PositionDirection;<br align="left"/>let mut _30: u64;<br align="left"/>let mut _31: u64;<br align="left"/>let mut _32: u64;<br align="left"/>let mut _33: isize;<br align="left"/>let _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _35: !;<br align="left"/>let mut _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _37: (u64, i64);<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: i64;<br align="left"/>let _40: controller::position::PositionDelta;<br align="left"/>let mut _41: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, controller::position::PositionDelta&gt;;<br align="left"/>let mut _42: std::result::Result&lt;controller::position::PositionDelta, error::ErrorCode&gt;;<br align="left"/>let mut _43: u64;<br align="left"/>let mut _44: u64;<br align="left"/>let mut _45: controller::position::PositionDirection;<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _50: controller::position::PositionDelta;<br align="left"/>let _51: i64;<br align="left"/>let mut _52: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _53: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _54: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let mut _55: &amp;ReErased mut state::user::PerpPosition;<br align="left"/>let _56: usize;<br align="left"/>let mut _57: usize;<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _60: &amp;ReErased controller::position::PositionDelta;<br align="left"/>let _61: &amp;ReErased controller::position::PositionDelta;<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _66: i64;<br align="left"/>let mut _67: i128;<br align="left"/>let mut _68: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _69: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _70: i128;<br align="left"/>let mut _71: i128;<br align="left"/>let mut _72: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _73: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _74: i64;<br align="left"/>let mut _75: isize;<br align="left"/>let _76: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _77: !;<br align="left"/>let mut _78: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _79: i128;<br align="left"/>let mut _80: isize;<br align="left"/>let _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _82: !;<br align="left"/>let mut _83: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _84: i128;<br align="left"/>let _85: ();<br align="left"/>let mut _86: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _87: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _88: bool;<br align="left"/>let mut _89: u128;<br align="left"/>let mut _90: i128;<br align="left"/>let mut _91: ();<br align="left"/>let _92: error::ErrorCode;<br align="left"/>let _93: ();<br align="left"/>let mut _94: &amp;ReErased str;<br align="left"/>let _95: &amp;ReErased str;<br align="left"/>let mut _96: &amp;ReErased std::string::String;<br align="left"/>let _97: &amp;ReErased std::string::String;<br align="left"/>let _98: std::string::String;<br align="left"/>let _99: std::string::String;<br align="left"/>let mut _100: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _101: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _102: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _103: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _104: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _105: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _106: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _107: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _108: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _109: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _110: &amp;ReErased error::ErrorCode;<br align="left"/>let _111: &amp;ReErased error::ErrorCode;<br align="left"/>let _112: ();<br align="left"/>let mut _113: &amp;ReErased str;<br align="left"/>let _114: &amp;ReErased str;<br align="left"/>let mut _115: &amp;ReErased std::string::String;<br align="left"/>let _116: &amp;ReErased std::string::String;<br align="left"/>let _117: std::string::String;<br align="left"/>let _118: std::string::String;<br align="left"/>let mut _119: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _120: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _121: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _122: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _123: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _124: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _125: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _126: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _127: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _128: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _129: &amp;ReErased i128;<br align="left"/>let _130: &amp;ReErased i128;<br align="left"/>let mut _131: error::ErrorCode;<br align="left"/>let mut _132: isize;<br align="left"/>let _133: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _134: !;<br align="left"/>let mut _135: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _136: ();<br align="left"/>let _137: ();<br align="left"/>let mut _138: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _139: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _140: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _141: isize;<br align="left"/>let _142: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _143: !;<br align="left"/>let mut _144: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _145: ();<br align="left"/>let mut _146: (u64, i64, i64);<br align="left"/>let mut _147: u64;<br align="left"/>let mut _148: i64;<br align="left"/>let mut _149: i64;<br align="left"/>let mut _150: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _151: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>debug base_asset_amount =&gt; _1;<br align="left"/>debug direction =&gt; _2;<br align="left"/>debug market =&gt; _3;<br align="left"/>debug user =&gt; _4;<br align="left"/>debug position_index =&gt; _5;<br align="left"/>debug fill_price =&gt; _6;<br align="left"/>debug swap_direction =&gt; _7;<br align="left"/>debug quote_asset_swapped =&gt; _9;<br align="left"/>debug quote_asset_amount_surplus =&gt; _10;<br align="left"/>debug residual =&gt; _18;<br align="left"/>debug val =&gt; _21;<br align="left"/>debug quote_asset_amount =&gt; _22;<br align="left"/>debug quote_asset_amount_surplus =&gt; _23;<br align="left"/>debug fill_price =&gt; _26;<br align="left"/>debug residual =&gt; _34;<br align="left"/>debug val =&gt; _37;<br align="left"/>debug position_delta =&gt; _40;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>debug pnl =&gt; _51;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug residual =&gt; _76;<br align="left"/>debug val =&gt; _79;<br align="left"/>debug residual =&gt; _81;<br align="left"/>debug val =&gt; _84;<br align="left"/>debug error_code =&gt; _92;<br align="left"/>debug res =&gt; _99;<br align="left"/>debug res =&gt; _118;<br align="left"/>debug residual =&gt; _133;<br align="left"/>debug val =&gt; _136;<br align="left"/>debug residual =&gt; _142;<br align="left"/>debug val =&gt; _145;<br align="left"/>>;
    bb0__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_8 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb1__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = SwapDirection::Add<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_7 = SwapDirection::Remove<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;mut (*_3)<br/>StorageLive(_15)<br/>_15 = _1<br/>StorageLive(_16)<br/>_16 = _7<br/></td></tr><tr><td align="left">_13 = swap_base_asset(move _14, move _15, move _16)</td></tr></table>>];
    bb5__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;(u64, i64), error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb6__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_17 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb7__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_12 as Continue).0: (u64, i64))<br/>_11 = _21<br/>StorageDead(_21)<br/>StorageLive(_9)<br/>_9 = (_11.0: u64)<br/>StorageLive(_10)<br/>_10 = (_11.1: i64)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageLive(_24)<br/>_25 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb8__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_20)<br/>_20 = _18<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _20)</td></tr></table>>];
    bb9__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_18)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = _9<br/>StorageLive(_39)<br/>_39 = _10<br/>_24 = (move _38, move _39)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_6 as Some).0: u64)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _2<br/>StorageLive(_30)<br/>_30 = _9<br/>StorageLive(_31)<br/>_31 = _1<br/>StorageLive(_32)<br/>_32 = _26<br/></td></tr><tr><td align="left">_28 = controller::position::calculate_quote_asset_amount_surplus(move _29, move _30, move _31, move _32)</td></tr></table>>];
    bb12__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;(u64, i64), error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb13__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_33 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _33)</td></tr></table>>];
    bb14__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_27 as Continue).0: (u64, i64))<br/>_24 = _37<br/>StorageDead(_37)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_36)<br/>_36 = _34<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _36)</td></tr></table>>];
    bb16__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_34)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = (_24.0: u64)<br/>StorageLive(_23)<br/>_23 = (_24.1: i64)<br/>StorageDead(_24)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = _1<br/>StorageLive(_44)<br/>_44 = _22<br/>StorageLive(_45)<br/>_45 = _2<br/></td></tr><tr><td align="left">_42 = math::orders::get_position_delta_for_fill(move _43, move _44, move _45)</td></tr></table>>];
    bb18__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">_41 = &lt;std::result::Result&lt;PositionDelta, error::ErrorCode&gt; as Try&gt;::branch(move _42)</td></tr></table>>];
    bb19__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>_46 = discriminant(_41)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb20__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = move ((_41 as Continue).0: controller::position::PositionDelta)<br/>_40 = move _50<br/>StorageDead(_50)<br/>StorageDead(_41)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = _5<br/>_57 = Len(((*_4).4: [state::user::PerpPosition; 8]))<br/>_58 = Lt(_56, _57)<br/></td></tr><tr><td align="left">assert(move _58, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _57, _56)</td></tr></table>>];
    bb21__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_41 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_49)<br/>_49 = _47<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb22__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_55 = &amp;mut ((*_4).4: [state::user::PerpPosition; 8])[_56]<br/>_54 = &amp;mut (*_55)<br/>StorageLive(_59)<br/>_59 = &amp;mut (*_3)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = &amp;_40<br/>_60 = &amp;(*_61)<br/></td></tr><tr><td align="left">_53 = update_position_and_market(move _54, move _59, move _60)</td></tr></table>>];
    bb24__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_59)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">_52 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _53)</td></tr></table>>];
    bb25__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>_62 = discriminant(_52)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb26__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_52 as Continue).0: i64)<br/>_51 = _66<br/>StorageDead(_66)<br/>StorageDead(_61)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_52)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_70 = (((*_3).1: state::perp_market::AMM).15: i128)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = (_40.1: i64)<br/></td></tr><tr><td align="left">_73 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _74)</td></tr></table>>];
    bb27__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_52 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_65)<br/>_65 = _63<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb28__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/>StorageDead(_61)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/></td></tr><tr><td align="left">_72 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _73)</td></tr></table>>];
    bb30__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>_75 = discriminant(_72)<br/></td></tr><tr><td align="left">switchInt(move _75)</td></tr></table>>];
    bb31__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_72 as Continue).0: i128)<br/>_71 = _79<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">_69 = &lt;i128 as SafeMath&gt;::safe_add(move _70, move _71)</td></tr></table>>];
    bb32__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_76)<br/>_76 = ((_72 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_78)<br/>_78 = _76<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _78)</td></tr></table>>];
    bb33__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_76)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">_68 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _69)</td></tr></table>>];
    bb35__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_80 = discriminant(_68)<br/></td></tr><tr><td align="left">switchInt(move _80)</td></tr></table>>];
    bb36__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_84)<br/>_84 = ((_68 as Continue).0: i128)<br/>_67 = _84<br/>StorageDead(_84)<br/>(((*_3).1: state::perp_market::AMM).15: i128) = move _67<br/>StorageDead(_67)<br/>StorageDead(_72)<br/>StorageDead(_68)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>_90 = (((*_3).1: state::perp_market::AMM).15: i128)<br/></td></tr><tr><td align="left">_89 = core::num::&lt;impl i128&gt;::unsigned_abs(move _90)</td></tr></table>>];
    bb37__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_81)<br/>_81 = ((_68 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_83)<br/>_83 = _81<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _83)</td></tr></table>>];
    bb38__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>_88 = Le(move _89, const _)<br/></td></tr><tr><td align="left">switchInt(move _88)</td></tr></table>>];
    bb40__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageLive(_91)<br/>_91 = ()<br/>_87 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _91)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageLive(_92)<br/>_92 = error::ErrorCode::InvalidAmmDetected<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>_151 = const _<br/>_103 = &amp;(*_151)<br/>_102 = &amp;(*_103)<br/>_101 = move _102 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_102)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>_111 = &amp;_92<br/>_110 = &amp;(*_111)<br/></td></tr><tr><td align="left">_109 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _110)</td></tr></table>>];
    bb42__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>_108 = [move _109]<br/>StorageDead(_109)<br/>_107 = &amp;_108<br/>_106 = &amp;(*_107)<br/>_105 = move _106 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_106)<br/></td></tr><tr><td align="left">_100 = Arguments::&lt;'_&gt;::new_v1(move _101, move _105)</td></tr></table>>];
    bb43__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/>StorageDead(_101)<br/></td></tr><tr><td align="left">_99 = format(move _100)</td></tr></table>>];
    bb44__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_100)<br/>StorageDead(_111)<br/>StorageDead(_108)<br/>StorageDead(_107)<br/>StorageDead(_103)<br/>_98 = move _99<br/>StorageDead(_99)<br/>_97 = &amp;_98<br/>_96 = &amp;(*_97)<br/></td></tr><tr><td align="left">_95 = &lt;String as Deref&gt;::deref(move _96)</td></tr></table>>];
    bb45__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">_94 = &amp;(*_95)<br/>StorageDead(_96)<br/></td></tr><tr><td align="left">_93 = solana_program::log::sol_log(move _94)</td></tr></table>>];
    bb46__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/></td></tr><tr><td align="left">drop(_98)</td></tr></table>>];
    bb47__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_97)<br/>StorageDead(_95)<br/>StorageDead(_93)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>_150 = const _<br/>_122 = &amp;(*_150)<br/>_121 = &amp;(*_122)<br/>_120 = move _121 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_121)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>_130 = &amp;(((*_3).1: state::perp_market::AMM).15: i128)<br/>_129 = &amp;(*_130)<br/></td></tr><tr><td align="left">_128 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i128&gt;(move _129)</td></tr></table>>];
    bb48__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>_127 = [move _128]<br/>StorageDead(_128)<br/>_126 = &amp;_127<br/>_125 = &amp;(*_126)<br/>_124 = move _125 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_125)<br/></td></tr><tr><td align="left">_119 = Arguments::&lt;'_&gt;::new_v1(move _120, move _124)</td></tr></table>>];
    bb49__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageDead(_120)<br/></td></tr><tr><td align="left">_118 = format(move _119)</td></tr></table>>];
    bb50__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_130)<br/>StorageDead(_127)<br/>StorageDead(_126)<br/>StorageDead(_122)<br/>_117 = move _118<br/>StorageDead(_118)<br/>_116 = &amp;_117<br/>_115 = &amp;(*_116)<br/></td></tr><tr><td align="left">_114 = &lt;String as Deref&gt;::deref(move _115)</td></tr></table>>];
    bb51__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">_113 = &amp;(*_114)<br/>StorageDead(_115)<br/></td></tr><tr><td align="left">_112 = solana_program::log::sol_log(move _113)</td></tr></table>>];
    bb52__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_113)<br/></td></tr><tr><td align="left">drop(_117)</td></tr></table>>];
    bb53__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/>StorageDead(_116)<br/>StorageDead(_114)<br/>StorageDead(_112)<br/>StorageLive(_131)<br/>_131 = _92<br/>_87 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _131)<br/>StorageDead(_131)<br/>StorageDead(_92)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/></td></tr><tr><td align="left">_86 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _87)</td></tr></table>>];
    bb55__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>_132 = discriminant(_86)<br/></td></tr><tr><td align="left">switchInt(move _132)</td></tr></table>>];
    bb56__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageLive(_136)<br/>_136 = ((_86 as Continue).0: ())<br/>_85 = _136<br/>StorageDead(_136)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>_140 = &amp;mut (*_3)<br/></td></tr><tr><td align="left">_139 = update_spread_reserves(move _140)</td></tr></table>>];
    bb57__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageLive(_133)<br/>_133 = ((_86 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_135)<br/>_135 = _133<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _135)</td></tr></table>>];
    bb58__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_135)<br/>StorageDead(_133)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/></td></tr><tr><td align="left">_138 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _139)</td></tr></table>>];
    bb60__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_139)<br/>_141 = discriminant(_138)<br/></td></tr><tr><td align="left">switchInt(move _141)</td></tr></table>>];
    bb61__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageLive(_145)<br/>_145 = ((_138 as Continue).0: ())<br/>_137 = _145<br/>StorageDead(_145)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>_147 = _22<br/>StorageLive(_148)<br/>_148 = _23<br/>StorageLive(_149)<br/>_149 = _51<br/>_146 = (move _147, move _148, move _149)<br/>StorageDead(_149)<br/>StorageDead(_148)<br/>StorageDead(_147)<br/>_0 = std::result::Result::&lt;(u64, i64, i64), error::ErrorCode&gt;::Ok(move _146)<br/>StorageDead(_146)<br/>StorageDead(_51)<br/>StorageDead(_40)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_142)<br/>_142 = ((_138 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_144)<br/>_144 = _142<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _144)</td></tr></table>>];
    bb63__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/>StorageDead(_142)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_72)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb66__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb67__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb69__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left">return</td></tr></table>>];
    bb70__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">70 (cleanup)</td></tr><tr><td align="left">drop(_117)</td></tr></table>>];
    bb71__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">71 (cleanup)</td></tr><tr><td align="left">drop(_98)</td></tr></table>>];
    bb72__0_686 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">72 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_686 -> bb3__0_686 [label="0"];
    bb0__0_686 -> bb1__0_686 [label="1"];
    bb0__0_686 -> bb2__0_686 [label="otherwise"];
    bb1__0_686 -> bb4__0_686 [label=""];
    bb3__0_686 -> bb4__0_686 [label=""];
    bb4__0_686 -> bb5__0_686 [label="return"];
    bb5__0_686 -> bb6__0_686 [label="return"];
    bb6__0_686 -> bb7__0_686 [label="0"];
    bb6__0_686 -> bb8__0_686 [label="1"];
    bb6__0_686 -> bb2__0_686 [label="otherwise"];
    bb7__0_686 -> bb10__0_686 [label="0"];
    bb7__0_686 -> bb11__0_686 [label="1"];
    bb7__0_686 -> bb2__0_686 [label="otherwise"];
    bb8__0_686 -> bb9__0_686 [label="return"];
    bb9__0_686 -> bb68__0_686 [label=""];
    bb10__0_686 -> bb17__0_686 [label=""];
    bb11__0_686 -> bb12__0_686 [label="return"];
    bb12__0_686 -> bb13__0_686 [label="return"];
    bb13__0_686 -> bb14__0_686 [label="0"];
    bb13__0_686 -> bb15__0_686 [label="1"];
    bb13__0_686 -> bb2__0_686 [label="otherwise"];
    bb14__0_686 -> bb17__0_686 [label=""];
    bb15__0_686 -> bb16__0_686 [label="return"];
    bb16__0_686 -> bb67__0_686 [label=""];
    bb17__0_686 -> bb18__0_686 [label="return"];
    bb18__0_686 -> bb19__0_686 [label="return"];
    bb19__0_686 -> bb20__0_686 [label="0"];
    bb19__0_686 -> bb21__0_686 [label="1"];
    bb19__0_686 -> bb2__0_686 [label="otherwise"];
    bb20__0_686 -> bb23__0_686 [label="success"];
    bb21__0_686 -> bb22__0_686 [label="return"];
    bb22__0_686 -> bb66__0_686 [label=""];
    bb23__0_686 -> bb24__0_686 [label="return"];
    bb24__0_686 -> bb25__0_686 [label="return"];
    bb25__0_686 -> bb26__0_686 [label="0"];
    bb25__0_686 -> bb27__0_686 [label="1"];
    bb25__0_686 -> bb2__0_686 [label="otherwise"];
    bb26__0_686 -> bb29__0_686 [label="return"];
    bb27__0_686 -> bb28__0_686 [label="return"];
    bb28__0_686 -> bb65__0_686 [label=""];
    bb29__0_686 -> bb30__0_686 [label="return"];
    bb30__0_686 -> bb31__0_686 [label="0"];
    bb30__0_686 -> bb32__0_686 [label="1"];
    bb30__0_686 -> bb2__0_686 [label="otherwise"];
    bb31__0_686 -> bb34__0_686 [label="return"];
    bb32__0_686 -> bb33__0_686 [label="return"];
    bb33__0_686 -> bb64__0_686 [label=""];
    bb34__0_686 -> bb35__0_686 [label="return"];
    bb35__0_686 -> bb36__0_686 [label="0"];
    bb35__0_686 -> bb37__0_686 [label="1"];
    bb35__0_686 -> bb2__0_686 [label="otherwise"];
    bb36__0_686 -> bb39__0_686 [label="return"];
    bb37__0_686 -> bb38__0_686 [label="return"];
    bb38__0_686 -> bb64__0_686 [label=""];
    bb39__0_686 -> bb41__0_686 [label="0"];
    bb39__0_686 -> bb40__0_686 [label="otherwise"];
    bb40__0_686 -> bb54__0_686 [label=""];
    bb41__0_686 -> bb42__0_686 [label="return"];
    bb42__0_686 -> bb43__0_686 [label="return"];
    bb43__0_686 -> bb44__0_686 [label="return"];
    bb44__0_686 -> bb45__0_686 [label="return"];
    bb44__0_686 -> bb71__0_686 [label="unwind"];
    bb45__0_686 -> bb46__0_686 [label="return"];
    bb45__0_686 -> bb71__0_686 [label="unwind"];
    bb46__0_686 -> bb47__0_686 [label="return"];
    bb46__0_686 -> bb72__0_686 [label="unwind"];
    bb47__0_686 -> bb48__0_686 [label="return"];
    bb48__0_686 -> bb49__0_686 [label="return"];
    bb49__0_686 -> bb50__0_686 [label="return"];
    bb50__0_686 -> bb51__0_686 [label="return"];
    bb50__0_686 -> bb70__0_686 [label="unwind"];
    bb51__0_686 -> bb52__0_686 [label="return"];
    bb51__0_686 -> bb70__0_686 [label="unwind"];
    bb52__0_686 -> bb53__0_686 [label="return"];
    bb52__0_686 -> bb72__0_686 [label="unwind"];
    bb53__0_686 -> bb54__0_686 [label=""];
    bb54__0_686 -> bb55__0_686 [label="return"];
    bb55__0_686 -> bb56__0_686 [label="0"];
    bb55__0_686 -> bb57__0_686 [label="1"];
    bb55__0_686 -> bb2__0_686 [label="otherwise"];
    bb56__0_686 -> bb59__0_686 [label="return"];
    bb57__0_686 -> bb58__0_686 [label="return"];
    bb58__0_686 -> bb65__0_686 [label=""];
    bb59__0_686 -> bb60__0_686 [label="return"];
    bb60__0_686 -> bb61__0_686 [label="0"];
    bb60__0_686 -> bb62__0_686 [label="1"];
    bb60__0_686 -> bb2__0_686 [label="otherwise"];
    bb61__0_686 -> bb69__0_686 [label=""];
    bb62__0_686 -> bb63__0_686 [label="return"];
    bb63__0_686 -> bb65__0_686 [label=""];
    bb64__0_686 -> bb65__0_686 [label=""];
    bb65__0_686 -> bb66__0_686 [label=""];
    bb66__0_686 -> bb67__0_686 [label=""];
    bb67__0_686 -> bb68__0_686 [label=""];
    bb68__0_686 -> bb69__0_686 [label=""];
    bb70__0_686 -> bb72__0_686 [label="return"];
    bb71__0_686 -> bb72__0_686 [label="return"];
}
