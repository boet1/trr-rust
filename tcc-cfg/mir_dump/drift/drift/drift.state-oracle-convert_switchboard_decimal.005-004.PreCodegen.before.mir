// MIR for `convert_switchboard_decimal` before PreCodegen

fn convert_switchboard_decimal(_1: &SwitchboardDecimal) -> std::result::Result<i128, error::ErrorCode> {
    debug switchboard_decimal => _1;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _2: u128;
    let mut _3: u32;
    let mut _4: bool;
    let mut _5: u128;
    let mut _6: i128;
    let mut _7: i128;
    let mut _8: u128;
    let mut _9: u128;
    let mut _10: bool;
    let mut _11: i128;
    let mut _12: i128;
    let mut _13: u128;
    let mut _14: u128;
    let mut _15: bool;
    scope 1 {
        debug switchboard_precision => _2;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = ((*_1).1: u32);
        _2 = core::num::<impl u128>::pow(const 10_u128, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        _4 = Gt(move _5, const _);
        switchInt(move _4) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_6);
        _6 = ((*_1).0: i128);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _10 = Eq(const _, const 0_u128);
        assert(!move _10, "attempt to divide `{}` by zero", _9) -> [success: bb3, unwind continue];
    }

    bb3: {
        _8 = Div(move _9, const _);
        StorageDead(_9);
        _7 = move _8 as i128 (IntToInt);
        StorageDead(_8);
        _0 = <i128 as SafeMath>::safe_div(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb8;
    }

    bb5: {
        StorageDead(_5);
        StorageLive(_11);
        _11 = ((*_1).0: i128);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _2;
        _15 = Eq(_14, const 0_u128);
        assert(!move _15, "attempt to divide `{}` by zero", const _) -> [success: bb6, unwind continue];
    }

    bb6: {
        _13 = Div(const _, move _14);
        StorageDead(_14);
        _12 = move _13 as i128 (IntToInt);
        StorageDead(_13);
        _0 = <i128 as SafeMath>::safe_mul(move _11, move _12) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_4);
        StorageDead(_2);
        return;
    }
}
