digraph Mir_0_3826 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn AMM::get_fallback_price(_1: state::perp_market::AMM, _2: &amp;ReErased controller::position::PositionDirection, _3: u64, _4: i64, _5: i64) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _8: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _9: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _10: controller::position::PositionDirection;<br align="left"/>let mut _11: bool;<br align="left"/>let mut _12: u64;<br align="left"/>let mut _13: u64;<br align="left"/>let _14: u64;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _16: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _17: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _18: isize;<br align="left"/>let _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _22: u64;<br align="left"/>let _23: i64;<br align="left"/>let mut _24: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _25: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _26: u64;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _28: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _29: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _30: u64;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: u64;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: i64;<br align="left"/>let mut _41: i64;<br align="left"/>let mut _42: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _43: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _44: i64;<br align="left"/>let mut _45: i64;<br align="left"/>let mut _46: i64;<br align="left"/>let mut _47: i64;<br align="left"/>let mut _48: i64;<br align="left"/>let mut _49: i64;<br align="left"/>let mut _50: (i64, bool);<br align="left"/>let mut _51: bool;<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: isize;<br align="left"/>let _56: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _57: !;<br align="left"/>let mut _58: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _59: i64;<br align="left"/>let mut _60: i64;<br align="left"/>let mut _61: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _62: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _63: i64;<br align="left"/>let mut _64: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _65: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _66: i64;<br align="left"/>let mut _67: i64;<br align="left"/>let mut _68: i64;<br align="left"/>let mut _69: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _70: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _71: i64;<br align="left"/>let mut _72: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _73: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _74: u64;<br align="left"/>let mut _75: isize;<br align="left"/>let _76: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _77: !;<br align="left"/>let mut _78: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _79: i64;<br align="left"/>let mut _80: i64;<br align="left"/>let mut _81: isize;<br align="left"/>let _82: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _83: !;<br align="left"/>let mut _84: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _85: i64;<br align="left"/>let mut _86: isize;<br align="left"/>let _87: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _88: !;<br align="left"/>let mut _89: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _90: i64;<br align="left"/>let mut _91: i64;<br align="left"/>let mut _92: i64;<br align="left"/>let mut _93: i64;<br align="left"/>let mut _94: i64;<br align="left"/>let mut _95: i64;<br align="left"/>let mut _96: (i64, bool);<br align="left"/>let mut _97: bool;<br align="left"/>let mut _98: bool;<br align="left"/>let mut _99: bool;<br align="left"/>let mut _100: bool;<br align="left"/>let mut _101: isize;<br align="left"/>let _102: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _103: !;<br align="left"/>let mut _104: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _105: i64;<br align="left"/>let mut _106: bool;<br align="left"/>let mut _107: u64;<br align="left"/>let mut _108: u64;<br align="left"/>let _109: u64;<br align="left"/>let mut _110: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _111: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _112: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _113: isize;<br align="left"/>let _114: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _115: !;<br align="left"/>let mut _116: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _117: u64;<br align="left"/>let _118: i64;<br align="left"/>let mut _119: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _120: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _121: u64;<br align="left"/>let mut _122: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _123: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _124: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _125: u64;<br align="left"/>let mut _126: isize;<br align="left"/>let _127: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _128: !;<br align="left"/>let mut _129: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _130: u64;<br align="left"/>let mut _131: isize;<br align="left"/>let _132: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _133: !;<br align="left"/>let mut _134: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _135: i64;<br align="left"/>let mut _136: i64;<br align="left"/>let mut _137: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _138: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _139: i64;<br align="left"/>let mut _140: i64;<br align="left"/>let mut _141: i64;<br align="left"/>let mut _142: i64;<br align="left"/>let mut _143: i64;<br align="left"/>let mut _144: i64;<br align="left"/>let mut _145: (i64, bool);<br align="left"/>let mut _146: bool;<br align="left"/>let mut _147: bool;<br align="left"/>let mut _148: bool;<br align="left"/>let mut _149: bool;<br align="left"/>let mut _150: isize;<br align="left"/>let _151: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _152: !;<br align="left"/>let mut _153: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _154: i64;<br align="left"/>let mut _155: i64;<br align="left"/>let mut _156: i64;<br align="left"/>let mut _157: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _158: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _159: i64;<br align="left"/>let mut _160: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _161: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _162: i64;<br align="left"/>let mut _163: i64;<br align="left"/>let mut _164: i64;<br align="left"/>let mut _165: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _166: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _167: i64;<br align="left"/>let mut _168: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _169: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _170: u64;<br align="left"/>let mut _171: isize;<br align="left"/>let _172: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _173: !;<br align="left"/>let mut _174: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _175: i64;<br align="left"/>let mut _176: i64;<br align="left"/>let mut _177: isize;<br align="left"/>let _178: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _179: !;<br align="left"/>let mut _180: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _181: i64;<br align="left"/>let mut _182: isize;<br align="left"/>let _183: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _184: !;<br align="left"/>let mut _185: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _186: i64;<br align="left"/>let mut _187: i64;<br align="left"/>let mut _188: i64;<br align="left"/>let mut _189: i64;<br align="left"/>let mut _190: i64;<br align="left"/>let mut _191: i64;<br align="left"/>let mut _192: (i64, bool);<br align="left"/>let mut _193: bool;<br align="left"/>let mut _194: bool;<br align="left"/>let mut _195: bool;<br align="left"/>let mut _196: bool;<br align="left"/>let mut _197: isize;<br align="left"/>let _198: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _199: !;<br align="left"/>let mut _200: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _201: i64;<br align="left"/>let mut _202: &amp;ReErased controller::position::PositionDirection;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug direction =&gt; _2;<br align="left"/>debug amm_available_liquidity =&gt; _3;<br align="left"/>debug oracle_price =&gt; _4;<br align="left"/>debug seconds_til_order_expiry =&gt; _5;<br align="left"/>debug reserve_price =&gt; _14;<br align="left"/>debug residual =&gt; _19;<br align="left"/>debug val =&gt; _22;<br align="left"/>debug amm_ask_price =&gt; _23;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>debug residual =&gt; _56;<br align="left"/>debug val =&gt; _59;<br align="left"/>debug residual =&gt; _76;<br align="left"/>debug val =&gt; _79;<br align="left"/>debug residual =&gt; _82;<br align="left"/>debug val =&gt; _85;<br align="left"/>debug residual =&gt; _87;<br align="left"/>debug val =&gt; _90;<br align="left"/>debug residual =&gt; _102;<br align="left"/>debug val =&gt; _105;<br align="left"/>debug reserve_price =&gt; _109;<br align="left"/>debug residual =&gt; _114;<br align="left"/>debug val =&gt; _117;<br align="left"/>debug amm_bid_price =&gt; _118;<br align="left"/>debug residual =&gt; _127;<br align="left"/>debug val =&gt; _130;<br align="left"/>debug residual =&gt; _132;<br align="left"/>debug val =&gt; _135;<br align="left"/>debug residual =&gt; _151;<br align="left"/>debug val =&gt; _154;<br align="left"/>debug residual =&gt; _172;<br align="left"/>debug val =&gt; _175;<br align="left"/>debug residual =&gt; _178;<br align="left"/>debug val =&gt; _181;<br align="left"/>debug residual =&gt; _183;<br align="left"/>debug val =&gt; _186;<br align="left"/>debug residual =&gt; _198;<br align="left"/>debug val =&gt; _201;<br align="left"/>>;
    bb0__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_2)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_202 = const _<br/>_9 = &amp;(*_202)<br/>_8 = &amp;(*_9)<br/></td></tr><tr><td align="left">_6 = &lt;controller::position::PositionDirection as PartialEq&gt;::eq(move _7, move _8)</td></tr></table>>];
    bb1__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _6)</td></tr></table>>];
    bb2__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _3<br/>StorageLive(_13)<br/>_13 = (_1.54: u64)<br/>_11 = Ge(move _12, move _13)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = &amp;_1<br/></td></tr><tr><td align="left">_16 = AMM::reserve_price(move _17)</td></tr></table>>];
    bb4__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb5__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_18 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb6__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_15 as Continue).0: u64)<br/>_14 = _22<br/>StorageDead(_22)<br/>StorageDead(_15)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = &amp;_1<br/>StorageLive(_30)<br/>_30 = _14<br/></td></tr><tr><td align="left">_28 = AMM::ask_price(move _29, move _30)</td></tr></table>>];
    bb7__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_21)<br/>_21 = _19<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _21)</td></tr></table>>];
    bb9__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb11__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_31 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb12__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_27 as Continue).0: u64)<br/>_26 = _35<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_25 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _26)</td></tr></table>>];
    bb13__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb14__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _25)</td></tr></table>>];
    bb16__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_36 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb17__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_24 as Continue).0: i64)<br/>_23 = _40<br/>StorageDead(_40)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = _23<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>_46 = _23<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _5<br/>_50 = CheckedMul(_49, const 20_i64)<br/></td></tr><tr><td align="left">assert(!move (_50.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _49, const 20_i64)</td></tr></table>>];
    bb18__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_24 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb19__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_48 = move (_50.0: i64)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">_47 = &lt;i64 as Ord&gt;::clamp(move _48, const 100_i64, const 200_i64)</td></tr></table>>];
    bb21__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_51 = Eq(_47, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _51, &quot;attempt to divide `{}` by zero&quot;, _46)</td></tr></table>>];
    bb22__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_52 = Eq(_47, const -1_i64)<br/>_53 = Eq(_46, const i64::MIN)<br/>_54 = BitAnd(move _52, move _53)<br/></td></tr><tr><td align="left">assert(!move _54, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _46, _47)</td></tr></table>>];
    bb23__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_45 = Div(move _46, move _47)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_43 = &lt;i64 as SafeMath&gt;::safe_add(move _44, move _45)</td></tr></table>>];
    bb24__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">_42 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _43)</td></tr></table>>];
    bb25__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>_55 = discriminant(_42)<br/></td></tr><tr><td align="left">switchInt(move _55)</td></tr></table>>];
    bb26__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = ((_42 as Continue).0: i64)<br/>_41 = _59<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">_0 = &lt;i64 as Cast&gt;::cast::&lt;u64&gt;(move _41)</td></tr></table>>];
    bb27__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_42 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_58)<br/>_58 = _56<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _58)</td></tr></table>>];
    bb28__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_56)<br/>StorageDead(_41)<br/>StorageDead(_23)<br/>StorageDead(_14)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_23)<br/>StorageDead(_14)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = _4<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = (_1.44: u64)<br/></td></tr><tr><td align="left">_73 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _74)</td></tr></table>>];
    bb31__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/></td></tr><tr><td align="left">_72 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _73)</td></tr></table>>];
    bb32__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>_75 = discriminant(_72)<br/></td></tr><tr><td align="left">switchInt(move _75)</td></tr></table>>];
    bb33__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = ((_72 as Continue).0: i64)<br/>_71 = _79<br/>StorageDead(_79)<br/>StorageLive(_80)<br/>_80 = ((_1.1: state::oracle::HistoricalOracleData).3: i64)<br/></td></tr><tr><td align="left">_70 = &lt;i64 as SafeMath&gt;::safe_sub(move _71, move _80)</td></tr></table>>];
    bb34__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageLive(_76)<br/>_76 = ((_72 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_78)<br/>_78 = _76<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _78)</td></tr></table>>];
    bb35__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_76)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">_69 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _70)</td></tr></table>>];
    bb37__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_81 = discriminant(_69)<br/></td></tr><tr><td align="left">switchInt(move _81)</td></tr></table>>];
    bb38__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_85)<br/>_85 = ((_69 as Continue).0: i64)<br/>_68 = _85<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">_67 = &lt;i64 as Ord&gt;::max(move _68, const 0_i64)</td></tr></table>>];
    bb39__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_82)<br/>_82 = ((_69 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_84)<br/>_84 = _82<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _84)</td></tr></table>>];
    bb40__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_82)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/></td></tr><tr><td align="left">_65 = &lt;i64 as SafeMath&gt;::safe_add(move _66, move _67)</td></tr></table>>];
    bb42__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_64 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _65)</td></tr></table>>];
    bb43__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>_86 = discriminant(_64)<br/></td></tr><tr><td align="left">switchInt(move _86)</td></tr></table>>];
    bb44__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_90)<br/>_90 = ((_64 as Continue).0: i64)<br/>_63 = _90<br/>StorageDead(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>_92 = _4<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>_95 = _5<br/>_96 = CheckedMul(_95, const 2_i64)<br/></td></tr><tr><td align="left">assert(!move (_96.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _95, const 2_i64)</td></tr></table>>];
    bb45__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_87)<br/>_87 = ((_64 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_89)<br/>_89 = _87<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _89)</td></tr></table>>];
    bb46__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_87)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_94 = move (_96.0: i64)<br/>StorageDead(_95)<br/></td></tr><tr><td align="left">_93 = &lt;i64 as Ord&gt;::clamp(move _94, const 10_i64, const 50_i64)</td></tr></table>>];
    bb48__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/>_97 = Eq(_93, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _97, &quot;attempt to divide `{}` by zero&quot;, _92)</td></tr></table>>];
    bb49__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_98 = Eq(_93, const -1_i64)<br/>_99 = Eq(_92, const i64::MIN)<br/>_100 = BitAnd(move _98, move _99)<br/></td></tr><tr><td align="left">assert(!move _100, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _92, _93)</td></tr></table>>];
    bb50__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">_91 = Div(move _92, move _93)<br/>StorageDead(_93)<br/>StorageDead(_92)<br/></td></tr><tr><td align="left">_62 = &lt;i64 as SafeMath&gt;::safe_add(move _63, move _91)</td></tr></table>>];
    bb51__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">_61 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _62)</td></tr></table>>];
    bb52__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_62)<br/>_101 = discriminant(_61)<br/></td></tr><tr><td align="left">switchInt(move _101)</td></tr></table>>];
    bb53__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>_105 = ((_61 as Continue).0: i64)<br/>_60 = _105<br/>StorageDead(_105)<br/></td></tr><tr><td align="left">_0 = &lt;i64 as Cast&gt;::cast::&lt;u64&gt;(move _60)</td></tr></table>>];
    bb54__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_102)<br/>_102 = ((_61 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_104)<br/>_104 = _102<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _104)</td></tr></table>>];
    bb55__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>StorageDead(_102)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_72)<br/>StorageDead(_69)<br/>StorageDead(_64)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>_107 = _3<br/>StorageLive(_108)<br/>_108 = (_1.54: u64)<br/>_106 = Ge(move _107, move _108)<br/></td></tr><tr><td align="left">switchInt(move _106)</td></tr></table>>];
    bb59__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_107)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>_112 = &amp;_1<br/></td></tr><tr><td align="left">_111 = AMM::reserve_price(move _112)</td></tr></table>>];
    bb60__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/></td></tr><tr><td align="left">_110 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _111)</td></tr></table>>];
    bb61__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>_113 = discriminant(_110)<br/></td></tr><tr><td align="left">switchInt(move _113)</td></tr></table>>];
    bb62__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageLive(_117)<br/>_117 = ((_110 as Continue).0: u64)<br/>_109 = _117<br/>StorageDead(_117)<br/>StorageDead(_110)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>_124 = &amp;_1<br/>StorageLive(_125)<br/>_125 = _109<br/></td></tr><tr><td align="left">_123 = AMM::bid_price(move _124, move _125)</td></tr></table>>];
    bb63__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageLive(_114)<br/>_114 = ((_110 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_116)<br/>_116 = _114<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _116)</td></tr></table>>];
    bb64__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_116)<br/>StorageDead(_114)<br/>StorageDead(_110)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb65__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">_122 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _123)</td></tr></table>>];
    bb66__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>_126 = discriminant(_122)<br/></td></tr><tr><td align="left">switchInt(move _126)</td></tr></table>>];
    bb67__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageLive(_130)<br/>_130 = ((_122 as Continue).0: u64)<br/>_121 = _130<br/>StorageDead(_130)<br/></td></tr><tr><td align="left">_120 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _121)</td></tr></table>>];
    bb68__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageLive(_127)<br/>_127 = ((_122 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_129)<br/>_129 = _127<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _129)</td></tr></table>>];
    bb69__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>StorageDead(_127)<br/>StorageDead(_121)<br/>StorageDead(_120)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/></td></tr><tr><td align="left">_119 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _120)</td></tr></table>>];
    bb71__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_120)<br/>_131 = discriminant(_119)<br/></td></tr><tr><td align="left">switchInt(move _131)</td></tr></table>>];
    bb72__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_135)<br/>_135 = ((_119 as Continue).0: i64)<br/>_118 = _135<br/>StorageDead(_135)<br/>StorageDead(_122)<br/>StorageDead(_119)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>_139 = _118<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>_141 = _118<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>_144 = _5<br/>_145 = CheckedMul(_144, const 20_i64)<br/></td></tr><tr><td align="left">assert(!move (_145.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _144, const 20_i64)</td></tr></table>>];
    bb73__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_132)<br/>_132 = ((_119 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_134)<br/>_134 = _132<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _134)</td></tr></table>>];
    bb74__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_132)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">_143 = move (_145.0: i64)<br/>StorageDead(_144)<br/></td></tr><tr><td align="left">_142 = &lt;i64 as Ord&gt;::clamp(move _143, const 100_i64, const 200_i64)</td></tr></table>>];
    bb76__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_143)<br/>_146 = Eq(_142, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _146, &quot;attempt to divide `{}` by zero&quot;, _141)</td></tr></table>>];
    bb77__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">_147 = Eq(_142, const -1_i64)<br/>_148 = Eq(_141, const i64::MIN)<br/>_149 = BitAnd(move _147, move _148)<br/></td></tr><tr><td align="left">assert(!move _149, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _141, _142)</td></tr></table>>];
    bb78__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">_140 = Div(move _141, move _142)<br/>StorageDead(_142)<br/>StorageDead(_141)<br/></td></tr><tr><td align="left">_138 = &lt;i64 as SafeMath&gt;::safe_sub(move _139, move _140)</td></tr></table>>];
    bb79__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageDead(_140)<br/>StorageDead(_139)<br/></td></tr><tr><td align="left">_137 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _138)</td></tr></table>>];
    bb80__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>_150 = discriminant(_137)<br/></td></tr><tr><td align="left">switchInt(move _150)</td></tr></table>>];
    bb81__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageLive(_154)<br/>_154 = ((_137 as Continue).0: i64)<br/>_136 = _154<br/>StorageDead(_154)<br/></td></tr><tr><td align="left">_0 = &lt;i64 as Cast&gt;::cast::&lt;u64&gt;(move _136)</td></tr></table>>];
    bb82__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageLive(_151)<br/>_151 = ((_137 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_153)<br/>_153 = _151<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _153)</td></tr></table>>];
    bb83__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_153)<br/>StorageDead(_151)<br/>StorageDead(_136)<br/>StorageDead(_118)<br/>StorageDead(_109)<br/>StorageDead(_137)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb84__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_118)<br/>StorageDead(_109)<br/>StorageDead(_137)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb85__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_107)<br/>StorageLive(_155)<br/>StorageLive(_156)<br/>StorageLive(_157)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>_162 = _4<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>StorageLive(_166)<br/>StorageLive(_167)<br/>StorageLive(_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>_170 = (_1.43: u64)<br/></td></tr><tr><td align="left">_169 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _170)</td></tr></table>>];
    bb86__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_170)<br/></td></tr><tr><td align="left">_168 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _169)</td></tr></table>>];
    bb87__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_169)<br/>_171 = discriminant(_168)<br/></td></tr><tr><td align="left">switchInt(move _171)</td></tr></table>>];
    bb88__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageLive(_175)<br/>_175 = ((_168 as Continue).0: i64)<br/>_167 = _175<br/>StorageDead(_175)<br/>StorageLive(_176)<br/>_176 = ((_1.1: state::oracle::HistoricalOracleData).3: i64)<br/></td></tr><tr><td align="left">_166 = &lt;i64 as SafeMath&gt;::safe_sub(move _167, move _176)</td></tr></table>>];
    bb89__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageLive(_172)<br/>_172 = ((_168 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_174)<br/>_174 = _172<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _174)</td></tr></table>>];
    bb90__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_174)<br/>StorageDead(_172)<br/>StorageDead(_167)<br/>StorageDead(_166)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb91__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_176)<br/>StorageDead(_167)<br/></td></tr><tr><td align="left">_165 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _166)</td></tr></table>>];
    bb92__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_166)<br/>_177 = discriminant(_165)<br/></td></tr><tr><td align="left">switchInt(move _177)</td></tr></table>>];
    bb93__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageLive(_181)<br/>_181 = ((_165 as Continue).0: i64)<br/>_164 = _181<br/>StorageDead(_181)<br/></td></tr><tr><td align="left">_163 = &lt;i64 as Ord&gt;::min(move _164, const 0_i64)</td></tr></table>>];
    bb94__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageLive(_178)<br/>_178 = ((_165 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_180)<br/>_180 = _178<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _180)</td></tr></table>>];
    bb95__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_180)<br/>StorageDead(_178)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb96__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_164)<br/></td></tr><tr><td align="left">_161 = &lt;i64 as SafeMath&gt;::safe_add(move _162, move _163)</td></tr></table>>];
    bb97__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_163)<br/>StorageDead(_162)<br/></td></tr><tr><td align="left">_160 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _161)</td></tr></table>>];
    bb98__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_161)<br/>_182 = discriminant(_160)<br/></td></tr><tr><td align="left">switchInt(move _182)</td></tr></table>>];
    bb99__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageLive(_186)<br/>_186 = ((_160 as Continue).0: i64)<br/>_159 = _186<br/>StorageDead(_186)<br/>StorageLive(_187)<br/>StorageLive(_188)<br/>_188 = _4<br/>StorageLive(_189)<br/>StorageLive(_190)<br/>StorageLive(_191)<br/>_191 = _5<br/>_192 = CheckedMul(_191, const 2_i64)<br/></td></tr><tr><td align="left">assert(!move (_192.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, move _191, const 2_i64)</td></tr></table>>];
    bb100__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageLive(_183)<br/>_183 = ((_160 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_185)<br/>_185 = _183<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _185)</td></tr></table>>];
    bb101__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_185)<br/>StorageDead(_183)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb102__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">_190 = move (_192.0: i64)<br/>StorageDead(_191)<br/></td></tr><tr><td align="left">_189 = &lt;i64 as Ord&gt;::clamp(move _190, const 10_i64, const 50_i64)</td></tr></table>>];
    bb103__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_190)<br/>_193 = Eq(_189, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _193, &quot;attempt to divide `{}` by zero&quot;, _188)</td></tr></table>>];
    bb104__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">_194 = Eq(_189, const -1_i64)<br/>_195 = Eq(_188, const i64::MIN)<br/>_196 = BitAnd(move _194, move _195)<br/></td></tr><tr><td align="left">assert(!move _196, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _188, _189)</td></tr></table>>];
    bb105__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">_187 = Div(move _188, move _189)<br/>StorageDead(_189)<br/>StorageDead(_188)<br/></td></tr><tr><td align="left">_158 = &lt;i64 as SafeMath&gt;::safe_sub(move _159, move _187)</td></tr></table>>];
    bb106__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/>StorageDead(_159)<br/></td></tr><tr><td align="left">_157 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _158)</td></tr></table>>];
    bb107__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_158)<br/>_197 = discriminant(_157)<br/></td></tr><tr><td align="left">switchInt(move _197)</td></tr></table>>];
    bb108__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageLive(_201)<br/>_201 = ((_157 as Continue).0: i64)<br/>_156 = _201<br/>StorageDead(_201)<br/></td></tr><tr><td align="left">_155 = &lt;i64 as Ord&gt;::max(move _156, const 0_i64)</td></tr></table>>];
    bb109__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageLive(_198)<br/>_198 = ((_157 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_200)<br/>_200 = _198<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _200)</td></tr></table>>];
    bb110__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_200)<br/>StorageDead(_198)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb111__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_156)<br/></td></tr><tr><td align="left">_0 = &lt;i64 as Cast&gt;::cast::&lt;u64&gt;(move _155)</td></tr></table>>];
    bb112__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_155)<br/>StorageDead(_168)<br/>StorageDead(_165)<br/>StorageDead(_160)<br/>StorageDead(_157)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb113__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb114__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb115__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_164)<br/>StorageDead(_163)<br/>StorageDead(_162)<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb116__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_159)<br/>StorageDead(_158)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb117__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_156)<br/>StorageDead(_155)<br/>StorageDead(_168)<br/>StorageDead(_165)<br/>StorageDead(_160)<br/>StorageDead(_157)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb118__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_122)<br/>StorageDead(_119)<br/>StorageDead(_118)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb119__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb120__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb121__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb122__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb123__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_72)<br/>StorageDead(_69)<br/>StorageDead(_64)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb124__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb125__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb126__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb127__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb128__0_3826 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3826 -> bb1__0_3826 [label="return"];
    bb1__0_3826 -> bb58__0_3826 [label="0"];
    bb1__0_3826 -> bb2__0_3826 [label="otherwise"];
    bb2__0_3826 -> bb30__0_3826 [label="0"];
    bb2__0_3826 -> bb3__0_3826 [label="otherwise"];
    bb3__0_3826 -> bb4__0_3826 [label="return"];
    bb4__0_3826 -> bb5__0_3826 [label="return"];
    bb5__0_3826 -> bb6__0_3826 [label="0"];
    bb5__0_3826 -> bb8__0_3826 [label="1"];
    bb5__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb6__0_3826 -> bb10__0_3826 [label="return"];
    bb8__0_3826 -> bb9__0_3826 [label="return"];
    bb9__0_3826 -> bb125__0_3826 [label=""];
    bb10__0_3826 -> bb11__0_3826 [label="return"];
    bb11__0_3826 -> bb12__0_3826 [label="0"];
    bb11__0_3826 -> bb13__0_3826 [label="1"];
    bb11__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb12__0_3826 -> bb15__0_3826 [label="return"];
    bb13__0_3826 -> bb14__0_3826 [label="return"];
    bb14__0_3826 -> bb124__0_3826 [label=""];
    bb15__0_3826 -> bb16__0_3826 [label="return"];
    bb16__0_3826 -> bb17__0_3826 [label="0"];
    bb16__0_3826 -> bb18__0_3826 [label="1"];
    bb16__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb17__0_3826 -> bb20__0_3826 [label="success"];
    bb18__0_3826 -> bb19__0_3826 [label="return"];
    bb19__0_3826 -> bb124__0_3826 [label=""];
    bb20__0_3826 -> bb21__0_3826 [label="return"];
    bb21__0_3826 -> bb22__0_3826 [label="success"];
    bb22__0_3826 -> bb23__0_3826 [label="success"];
    bb23__0_3826 -> bb24__0_3826 [label="return"];
    bb24__0_3826 -> bb25__0_3826 [label="return"];
    bb25__0_3826 -> bb26__0_3826 [label="0"];
    bb25__0_3826 -> bb27__0_3826 [label="1"];
    bb25__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb26__0_3826 -> bb29__0_3826 [label="return"];
    bb27__0_3826 -> bb28__0_3826 [label="return"];
    bb28__0_3826 -> bb126__0_3826 [label=""];
    bb29__0_3826 -> bb57__0_3826 [label=""];
    bb30__0_3826 -> bb31__0_3826 [label="return"];
    bb31__0_3826 -> bb32__0_3826 [label="return"];
    bb32__0_3826 -> bb33__0_3826 [label="0"];
    bb32__0_3826 -> bb34__0_3826 [label="1"];
    bb32__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb33__0_3826 -> bb36__0_3826 [label="return"];
    bb34__0_3826 -> bb35__0_3826 [label="return"];
    bb35__0_3826 -> bb121__0_3826 [label=""];
    bb36__0_3826 -> bb37__0_3826 [label="return"];
    bb37__0_3826 -> bb38__0_3826 [label="0"];
    bb37__0_3826 -> bb39__0_3826 [label="1"];
    bb37__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb38__0_3826 -> bb41__0_3826 [label="return"];
    bb39__0_3826 -> bb40__0_3826 [label="return"];
    bb40__0_3826 -> bb121__0_3826 [label=""];
    bb41__0_3826 -> bb42__0_3826 [label="return"];
    bb42__0_3826 -> bb43__0_3826 [label="return"];
    bb43__0_3826 -> bb44__0_3826 [label="0"];
    bb43__0_3826 -> bb45__0_3826 [label="1"];
    bb43__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb44__0_3826 -> bb47__0_3826 [label="success"];
    bb45__0_3826 -> bb46__0_3826 [label="return"];
    bb46__0_3826 -> bb122__0_3826 [label=""];
    bb47__0_3826 -> bb48__0_3826 [label="return"];
    bb48__0_3826 -> bb49__0_3826 [label="success"];
    bb49__0_3826 -> bb50__0_3826 [label="success"];
    bb50__0_3826 -> bb51__0_3826 [label="return"];
    bb51__0_3826 -> bb52__0_3826 [label="return"];
    bb52__0_3826 -> bb53__0_3826 [label="0"];
    bb52__0_3826 -> bb54__0_3826 [label="1"];
    bb52__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb53__0_3826 -> bb56__0_3826 [label="return"];
    bb54__0_3826 -> bb55__0_3826 [label="return"];
    bb55__0_3826 -> bb123__0_3826 [label=""];
    bb56__0_3826 -> bb57__0_3826 [label=""];
    bb57__0_3826 -> bb114__0_3826 [label=""];
    bb58__0_3826 -> bb85__0_3826 [label="0"];
    bb58__0_3826 -> bb59__0_3826 [label="otherwise"];
    bb59__0_3826 -> bb60__0_3826 [label="return"];
    bb60__0_3826 -> bb61__0_3826 [label="return"];
    bb61__0_3826 -> bb62__0_3826 [label="0"];
    bb61__0_3826 -> bb63__0_3826 [label="1"];
    bb61__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb62__0_3826 -> bb65__0_3826 [label="return"];
    bb63__0_3826 -> bb64__0_3826 [label="return"];
    bb64__0_3826 -> bb119__0_3826 [label=""];
    bb65__0_3826 -> bb66__0_3826 [label="return"];
    bb66__0_3826 -> bb67__0_3826 [label="0"];
    bb66__0_3826 -> bb68__0_3826 [label="1"];
    bb66__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb67__0_3826 -> bb70__0_3826 [label="return"];
    bb68__0_3826 -> bb69__0_3826 [label="return"];
    bb69__0_3826 -> bb118__0_3826 [label=""];
    bb70__0_3826 -> bb71__0_3826 [label="return"];
    bb71__0_3826 -> bb72__0_3826 [label="0"];
    bb71__0_3826 -> bb73__0_3826 [label="1"];
    bb71__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb72__0_3826 -> bb75__0_3826 [label="success"];
    bb73__0_3826 -> bb74__0_3826 [label="return"];
    bb74__0_3826 -> bb118__0_3826 [label=""];
    bb75__0_3826 -> bb76__0_3826 [label="return"];
    bb76__0_3826 -> bb77__0_3826 [label="success"];
    bb77__0_3826 -> bb78__0_3826 [label="success"];
    bb78__0_3826 -> bb79__0_3826 [label="return"];
    bb79__0_3826 -> bb80__0_3826 [label="return"];
    bb80__0_3826 -> bb81__0_3826 [label="0"];
    bb80__0_3826 -> bb82__0_3826 [label="1"];
    bb80__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb81__0_3826 -> bb84__0_3826 [label="return"];
    bb82__0_3826 -> bb83__0_3826 [label="return"];
    bb83__0_3826 -> bb120__0_3826 [label=""];
    bb84__0_3826 -> bb113__0_3826 [label=""];
    bb85__0_3826 -> bb86__0_3826 [label="return"];
    bb86__0_3826 -> bb87__0_3826 [label="return"];
    bb87__0_3826 -> bb88__0_3826 [label="0"];
    bb87__0_3826 -> bb89__0_3826 [label="1"];
    bb87__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb88__0_3826 -> bb91__0_3826 [label="return"];
    bb89__0_3826 -> bb90__0_3826 [label="return"];
    bb90__0_3826 -> bb115__0_3826 [label=""];
    bb91__0_3826 -> bb92__0_3826 [label="return"];
    bb92__0_3826 -> bb93__0_3826 [label="0"];
    bb92__0_3826 -> bb94__0_3826 [label="1"];
    bb92__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb93__0_3826 -> bb96__0_3826 [label="return"];
    bb94__0_3826 -> bb95__0_3826 [label="return"];
    bb95__0_3826 -> bb115__0_3826 [label=""];
    bb96__0_3826 -> bb97__0_3826 [label="return"];
    bb97__0_3826 -> bb98__0_3826 [label="return"];
    bb98__0_3826 -> bb99__0_3826 [label="0"];
    bb98__0_3826 -> bb100__0_3826 [label="1"];
    bb98__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb99__0_3826 -> bb102__0_3826 [label="success"];
    bb100__0_3826 -> bb101__0_3826 [label="return"];
    bb101__0_3826 -> bb116__0_3826 [label=""];
    bb102__0_3826 -> bb103__0_3826 [label="return"];
    bb103__0_3826 -> bb104__0_3826 [label="success"];
    bb104__0_3826 -> bb105__0_3826 [label="success"];
    bb105__0_3826 -> bb106__0_3826 [label="return"];
    bb106__0_3826 -> bb107__0_3826 [label="return"];
    bb107__0_3826 -> bb108__0_3826 [label="0"];
    bb107__0_3826 -> bb109__0_3826 [label="1"];
    bb107__0_3826 -> bb7__0_3826 [label="otherwise"];
    bb108__0_3826 -> bb111__0_3826 [label="return"];
    bb109__0_3826 -> bb110__0_3826 [label="return"];
    bb110__0_3826 -> bb117__0_3826 [label=""];
    bb111__0_3826 -> bb112__0_3826 [label="return"];
    bb112__0_3826 -> bb113__0_3826 [label=""];
    bb113__0_3826 -> bb114__0_3826 [label=""];
    bb114__0_3826 -> bb128__0_3826 [label=""];
    bb115__0_3826 -> bb116__0_3826 [label=""];
    bb116__0_3826 -> bb117__0_3826 [label=""];
    bb117__0_3826 -> bb120__0_3826 [label=""];
    bb118__0_3826 -> bb119__0_3826 [label=""];
    bb119__0_3826 -> bb120__0_3826 [label=""];
    bb120__0_3826 -> bb127__0_3826 [label=""];
    bb121__0_3826 -> bb122__0_3826 [label=""];
    bb122__0_3826 -> bb123__0_3826 [label=""];
    bb123__0_3826 -> bb126__0_3826 [label=""];
    bb124__0_3826 -> bb125__0_3826 [label=""];
    bb125__0_3826 -> bb126__0_3826 [label=""];
    bb126__0_3826 -> bb127__0_3826 [label=""];
    bb127__0_3826 -> bb128__0_3826 [label=""];
}
