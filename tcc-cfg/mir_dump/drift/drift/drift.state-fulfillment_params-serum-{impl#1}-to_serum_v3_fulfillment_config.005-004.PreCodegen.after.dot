digraph Mir_0_3256 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SerumContext::&lt;'a, 'b&gt;::to_serum_v3_fulfillment_config(_1: &amp;ReErased state::fulfillment_params::serum::SerumContext&lt;ReErased, ReErased&gt;, _2: &amp;ReErased anchor_lang::prelude::Pubkey, _3: u16) -&gt; std::result::Result&lt;state::fulfillment_params::serum::SerumV3FulfillmentConfig, error::ErrorCode&gt;<br align="left"/>let _4: serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, serum_dex::state::Market&lt;ReErased&gt;&gt;;<br align="left"/>let mut _6: std::result::Result&lt;serum_dex::state::Market&lt;ReErased&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _7: &amp;ReErased state::fulfillment_params::serum::SerumContext&lt;ReErased, ReErased&gt;;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _12: serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let _13: [u64; 4_usize];<br align="left"/>let mut _14: &amp;ReErased serum_dex::state::MarketState;<br align="left"/>let mut _15: &amp;ReErased serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let _16: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _18: std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt;;<br align="left"/>let mut _19: std::result::Result&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;;<br align="left"/>let mut _20: &amp;ReErased [u8];<br align="left"/>let _21: &amp;ReErased [u8];<br align="left"/>let mut _22: &amp;ReErased [u64];<br align="left"/>let mut _23: &amp;ReErased [u64; 4_usize];<br align="left"/>let _24: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _25: Closure(DefId(0:3257 ~ drift[d311]::state::fulfillment_params::serum::{impl#1}::to_serum_v3_fulfillment_config::{closure#0}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: anchor_lang::prelude::Pubkey;<br align="left"/>let _31: [u64; 4_usize];<br align="left"/>let mut _32: &amp;ReErased serum_dex::state::MarketState;<br align="left"/>let mut _33: &amp;ReErased serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let _34: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _35: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _36: std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt;;<br align="left"/>let mut _37: std::result::Result&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;;<br align="left"/>let mut _38: &amp;ReErased [u8];<br align="left"/>let _39: &amp;ReErased [u8];<br align="left"/>let mut _40: &amp;ReErased [u64];<br align="left"/>let mut _41: &amp;ReErased [u64; 4_usize];<br align="left"/>let _42: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _43: Closure(DefId(0:3258 ~ drift[d311]::state::fulfillment_params::serum::{impl#1}::to_serum_v3_fulfillment_config::{closure#1}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _44: isize;<br align="left"/>let _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _46: !;<br align="left"/>let mut _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _48: anchor_lang::prelude::Pubkey;<br align="left"/>let _49: [u64; 4_usize];<br align="left"/>let mut _50: &amp;ReErased serum_dex::state::MarketState;<br align="left"/>let mut _51: &amp;ReErased serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let _52: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _53: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _54: std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt;;<br align="left"/>let mut _55: std::result::Result&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;;<br align="left"/>let mut _56: &amp;ReErased [u8];<br align="left"/>let _57: &amp;ReErased [u8];<br align="left"/>let mut _58: &amp;ReErased [u64];<br align="left"/>let mut _59: &amp;ReErased [u64; 4_usize];<br align="left"/>let _60: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _61: Closure(DefId(0:3259 ~ drift[d311]::state::fulfillment_params::serum::{impl#1}::to_serum_v3_fulfillment_config::{closure#2}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _66: anchor_lang::prelude::Pubkey;<br align="left"/>let _67: [u64; 4_usize];<br align="left"/>let mut _68: &amp;ReErased serum_dex::state::MarketState;<br align="left"/>let mut _69: &amp;ReErased serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let _70: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _71: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _72: std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt;;<br align="left"/>let mut _73: std::result::Result&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;;<br align="left"/>let mut _74: &amp;ReErased [u8];<br align="left"/>let _75: &amp;ReErased [u8];<br align="left"/>let mut _76: &amp;ReErased [u64];<br align="left"/>let mut _77: &amp;ReErased [u64; 4_usize];<br align="left"/>let _78: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _79: Closure(DefId(0:3260 ~ drift[d311]::state::fulfillment_params::serum::{impl#1}::to_serum_v3_fulfillment_config::{closure#3}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _80: isize;<br align="left"/>let _81: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _82: !;<br align="left"/>let mut _83: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _84: anchor_lang::prelude::Pubkey;<br align="left"/>let _85: [u64; 4_usize];<br align="left"/>let mut _86: &amp;ReErased serum_dex::state::MarketState;<br align="left"/>let mut _87: &amp;ReErased serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let _88: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _89: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _90: std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt;;<br align="left"/>let mut _91: std::result::Result&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;;<br align="left"/>let mut _92: &amp;ReErased [u8];<br align="left"/>let _93: &amp;ReErased [u8];<br align="left"/>let mut _94: &amp;ReErased [u64];<br align="left"/>let mut _95: &amp;ReErased [u64; 4_usize];<br align="left"/>let _96: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _97: Closure(DefId(0:3261 ~ drift[d311]::state::fulfillment_params::serum::{impl#1}::to_serum_v3_fulfillment_config::{closure#4}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _98: isize;<br align="left"/>let _99: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _100: !;<br align="left"/>let mut _101: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _102: anchor_lang::prelude::Pubkey;<br align="left"/>let _103: [u64; 4_usize];<br align="left"/>let mut _104: &amp;ReErased serum_dex::state::MarketState;<br align="left"/>let mut _105: &amp;ReErased serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let _106: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _107: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _108: std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt;;<br align="left"/>let mut _109: std::result::Result&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;;<br align="left"/>let mut _110: &amp;ReErased [u8];<br align="left"/>let _111: &amp;ReErased [u8];<br align="left"/>let mut _112: &amp;ReErased [u64];<br align="left"/>let mut _113: &amp;ReErased [u64; 4_usize];<br align="left"/>let _114: &amp;ReErased [u64; 4_usize];<br align="left"/>let mut _115: Closure(DefId(0:3262 ~ drift[d311]::state::fulfillment_params::serum::{impl#1}::to_serum_v3_fulfillment_config::{closure#5}), [ReErased, ReErased, i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _116: isize;<br align="left"/>let _117: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _118: !;<br align="left"/>let mut _119: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _120: anchor_lang::prelude::Pubkey;<br align="left"/>let _121: u64;<br align="left"/>let mut _122: &amp;ReErased serum_dex::state::MarketState;<br align="left"/>let mut _123: &amp;ReErased serum_dex::state::Market&lt;ReErased&gt;;<br align="left"/>let mut _124: state::fulfillment_params::serum::SerumV3FulfillmentConfig;<br align="left"/>let mut _125: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _126: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _127: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _128: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _129: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _130: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _131: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _132: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _133: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _134: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _135: u64;<br align="left"/>let mut _136: u16;<br align="left"/>let mut _137: instructions::keeper::SpotFulfillmentType;<br align="left"/>let mut _138: state::spot_market::SpotFulfillmentConfigStatus;<br align="left"/>let mut _139: [u8; 4_usize];<br align="left"/>let mut _140: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _141: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _142: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _143: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _144: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _145: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _146: isize;<br align="left"/>let mut _147: isize;<br align="left"/>let mut _148: isize;<br align="left"/>let mut _149: isize;<br align="left"/>let mut _150: isize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug serum_fulfillment_config_key =&gt; _2;<br align="left"/>debug market_index =&gt; _3;<br align="left"/>debug market_state =&gt; _4;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>debug market_state_event_queue =&gt; _13;<br align="left"/>debug serum_event_queue =&gt; _16;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug market_state_request_queue =&gt; _31;<br align="left"/>debug serum_request_queue =&gt; _34;<br align="left"/>debug residual =&gt; _45;<br align="left"/>debug val =&gt; _48;<br align="left"/>debug market_state_bids =&gt; _49;<br align="left"/>debug serum_bids =&gt; _52;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug market_state_asks =&gt; _67;<br align="left"/>debug serum_asks =&gt; _70;<br align="left"/>debug residual =&gt; _81;<br align="left"/>debug val =&gt; _84;<br align="left"/>debug market_state_coin_vault =&gt; _85;<br align="left"/>debug serum_base_vault =&gt; _88;<br align="left"/>debug residual =&gt; _99;<br align="left"/>debug val =&gt; _102;<br align="left"/>debug market_state_pc_vault =&gt; _103;<br align="left"/>debug serum_quote_vault =&gt; _106;<br align="left"/>debug residual =&gt; _117;<br align="left"/>debug val =&gt; _120;<br align="left"/>debug serum_signer_nonce =&gt; _121;<br align="left"/>>;
    bb0__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = &amp;(*_1)<br/></td></tr><tr><td align="left">_6 = SerumContext::&lt;'_, '_&gt;::load_serum_market(move _7)</td></tr></table>>];
    bb1__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;serum_dex::state::Market&lt;'_&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_8 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = move ((_5 as Continue).0: serum_dex::state::Market&lt;'_&gt;)<br/>_4 = move _12<br/>StorageDead(_12)<br/>_148 = discriminant(_5)<br/>StorageDead(_5)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;_4<br/></td></tr><tr><td align="left">_14 = &lt;serum_dex::state::Market&lt;'_&gt; as Deref&gt;::deref(move _15)</td></tr></table>>];
    bb4__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_11)<br/>_11 = _9<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;SerumV3FulfillmentConfig, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb6__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>_146 = discriminant(_5)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_13 = ((*_14).13: [u64; 4])<br/>StorageDead(_14)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;_13<br/>_23 = &amp;(*_24)<br/>_22 = move _23 as &amp;[u64] (PointerCoercion(Unsize))<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_21 = bytemuck::cast_slice::&lt;u64, u8&gt;(move _22)</td></tr></table>>];
    bb8__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_20 = &amp;(*_21)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_19 = &lt;anchor_lang::prelude::Pubkey as BorshDeserialize&gt;::try_from_slice(move _20)</td></tr></table>>];
    bb9__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_25)<br/>_25 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:139:26: 139:29}<br/></td></tr><tr><td align="left">_18 = std::result::Result::&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:139:26: 139:29}&gt;(move _19, move _25)</td></tr></table>>];
    bb10__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb11__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_26 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb12__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_17 as Continue).0: anchor_lang::prelude::Pubkey)<br/>_16 = _30<br/>StorageDead(_30)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>StorageDead(_17)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = &amp;_4<br/></td></tr><tr><td align="left">_32 = &lt;serum_dex::state::Market&lt;'_&gt; as Deref&gt;::deref(move _33)</td></tr></table>>];
    bb13__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;SerumV3FulfillmentConfig, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb14__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_31 = ((*_32).12: [u64; 4])<br/>StorageDead(_32)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;_31<br/>_41 = &amp;(*_42)<br/>_40 = move _41 as &amp;[u64] (PointerCoercion(Unsize))<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">_39 = bytemuck::cast_slice::&lt;u64, u8&gt;(move _40)</td></tr></table>>];
    bb16__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_38 = &amp;(*_39)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">_37 = &lt;anchor_lang::prelude::Pubkey as BorshDeserialize&gt;::try_from_slice(move _38)</td></tr></table>>];
    bb17__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageLive(_43)<br/>_43 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:144:26: 144:29}<br/></td></tr><tr><td align="left">_36 = std::result::Result::&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:144:26: 144:29}&gt;(move _37, move _43)</td></tr></table>>];
    bb18__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">_35 = &lt;std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt; as Try&gt;::branch(move _36)</td></tr></table>>];
    bb19__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_44 = discriminant(_35)<br/></td></tr><tr><td align="left">switchInt(move _44)</td></tr></table>>];
    bb20__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_35 as Continue).0: anchor_lang::prelude::Pubkey)<br/>_34 = _48<br/>StorageDead(_48)<br/>StorageDead(_42)<br/>StorageDead(_39)<br/>StorageDead(_35)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = &amp;_4<br/></td></tr><tr><td align="left">_50 = &lt;serum_dex::state::Market&lt;'_&gt; as Deref&gt;::deref(move _51)</td></tr></table>>];
    bb21__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_35 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_47)<br/>_47 = _45<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;SerumV3FulfillmentConfig, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _47)</td></tr></table>>];
    bb22__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_45)<br/>StorageDead(_42)<br/>StorageDead(_39)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>_49 = ((*_50).14: [u64; 4])<br/>StorageDead(_50)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = &amp;_49<br/>_59 = &amp;(*_60)<br/>_58 = move _59 as &amp;[u64] (PointerCoercion(Unsize))<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">_57 = bytemuck::cast_slice::&lt;u64, u8&gt;(move _58)</td></tr></table>>];
    bb24__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_56 = &amp;(*_57)<br/>StorageDead(_58)<br/></td></tr><tr><td align="left">_55 = &lt;anchor_lang::prelude::Pubkey as BorshDeserialize&gt;::try_from_slice(move _56)</td></tr></table>>];
    bb25__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageLive(_61)<br/>_61 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:148:22: 148:25}<br/></td></tr><tr><td align="left">_54 = std::result::Result::&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:148:22: 148:25}&gt;(move _55, move _61)</td></tr></table>>];
    bb26__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">_53 = &lt;std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt; as Try&gt;::branch(move _54)</td></tr></table>>];
    bb27__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>_62 = discriminant(_53)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb28__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_53 as Continue).0: anchor_lang::prelude::Pubkey)<br/>_52 = _66<br/>StorageDead(_66)<br/>StorageDead(_60)<br/>StorageDead(_57)<br/>StorageDead(_53)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = &amp;_4<br/></td></tr><tr><td align="left">_68 = &lt;serum_dex::state::Market&lt;'_&gt; as Deref&gt;::deref(move _69)</td></tr></table>>];
    bb29__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_53 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_65)<br/>_65 = _63<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;SerumV3FulfillmentConfig, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb30__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/>StorageDead(_60)<br/>StorageDead(_57)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_67 = ((*_68).15: [u64; 4])<br/>StorageDead(_68)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>_78 = &amp;_67<br/>_77 = &amp;(*_78)<br/>_76 = move _77 as &amp;[u64] (PointerCoercion(Unsize))<br/>StorageDead(_77)<br/></td></tr><tr><td align="left">_75 = bytemuck::cast_slice::&lt;u64, u8&gt;(move _76)</td></tr></table>>];
    bb32__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_74 = &amp;(*_75)<br/>StorageDead(_76)<br/></td></tr><tr><td align="left">_73 = &lt;anchor_lang::prelude::Pubkey as BorshDeserialize&gt;::try_from_slice(move _74)</td></tr></table>>];
    bb33__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageLive(_79)<br/>_79 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:152:22: 152:25}<br/></td></tr><tr><td align="left">_72 = std::result::Result::&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:152:22: 152:25}&gt;(move _73, move _79)</td></tr></table>>];
    bb34__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageDead(_73)<br/></td></tr><tr><td align="left">_71 = &lt;std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt; as Try&gt;::branch(move _72)</td></tr></table>>];
    bb35__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>_80 = discriminant(_71)<br/></td></tr><tr><td align="left">switchInt(move _80)</td></tr></table>>];
    bb36__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_84)<br/>_84 = ((_71 as Continue).0: anchor_lang::prelude::Pubkey)<br/>_70 = _84<br/>StorageDead(_84)<br/>StorageDead(_78)<br/>StorageDead(_75)<br/>StorageDead(_71)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>_87 = &amp;_4<br/></td></tr><tr><td align="left">_86 = &lt;serum_dex::state::Market&lt;'_&gt; as Deref&gt;::deref(move _87)</td></tr></table>>];
    bb37__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_81)<br/>_81 = ((_71 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_83)<br/>_83 = _81<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;SerumV3FulfillmentConfig, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _83)</td></tr></table>>];
    bb38__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_81)<br/>StorageDead(_78)<br/>StorageDead(_75)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>_85 = ((*_86).5: [u64; 4])<br/>StorageDead(_86)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = &amp;_85<br/>_95 = &amp;(*_96)<br/>_94 = move _95 as &amp;[u64] (PointerCoercion(Unsize))<br/>StorageDead(_95)<br/></td></tr><tr><td align="left">_93 = bytemuck::cast_slice::&lt;u64, u8&gt;(move _94)</td></tr></table>>];
    bb40__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_92 = &amp;(*_93)<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">_91 = &lt;anchor_lang::prelude::Pubkey as BorshDeserialize&gt;::try_from_slice(move _92)</td></tr></table>>];
    bb41__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageLive(_97)<br/>_97 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:157:26: 157:29}<br/></td></tr><tr><td align="left">_90 = std::result::Result::&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:157:26: 157:29}&gt;(move _91, move _97)</td></tr></table>>];
    bb42__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">_89 = &lt;std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt; as Try&gt;::branch(move _90)</td></tr></table>>];
    bb43__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>_98 = discriminant(_89)<br/></td></tr><tr><td align="left">switchInt(move _98)</td></tr></table>>];
    bb44__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_102)<br/>_102 = ((_89 as Continue).0: anchor_lang::prelude::Pubkey)<br/>_88 = _102<br/>StorageDead(_102)<br/>StorageDead(_96)<br/>StorageDead(_93)<br/>StorageDead(_89)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>_105 = &amp;_4<br/></td></tr><tr><td align="left">_104 = &lt;serum_dex::state::Market&lt;'_&gt; as Deref&gt;::deref(move _105)</td></tr></table>>];
    bb45__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_99)<br/>_99 = ((_89 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_101)<br/>_101 = _99<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;SerumV3FulfillmentConfig, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _101)</td></tr></table>>];
    bb46__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_101)<br/>StorageDead(_99)<br/>StorageDead(_96)<br/>StorageDead(_93)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/>_103 = ((*_104).8: [u64; 4])<br/>StorageDead(_104)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>_114 = &amp;_103<br/>_113 = &amp;(*_114)<br/>_112 = move _113 as &amp;[u64] (PointerCoercion(Unsize))<br/>StorageDead(_113)<br/></td></tr><tr><td align="left">_111 = bytemuck::cast_slice::&lt;u64, u8&gt;(move _112)</td></tr></table>>];
    bb48__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">_110 = &amp;(*_111)<br/>StorageDead(_112)<br/></td></tr><tr><td align="left">_109 = &lt;anchor_lang::prelude::Pubkey as BorshDeserialize&gt;::try_from_slice(move _110)</td></tr></table>>];
    bb49__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageLive(_115)<br/>_115 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:162:26: 162:29}<br/></td></tr><tr><td align="left">_108 = std::result::Result::&lt;anchor_lang::prelude::Pubkey, std::io::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:162:26: 162:29}&gt;(move _109, move _115)</td></tr></table>>];
    bb50__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_115)<br/>StorageDead(_109)<br/></td></tr><tr><td align="left">_107 = &lt;std::result::Result&lt;anchor_lang::prelude::Pubkey, error::ErrorCode&gt; as Try&gt;::branch(move _108)</td></tr></table>>];
    bb51__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>_116 = discriminant(_107)<br/></td></tr><tr><td align="left">switchInt(move _116)</td></tr></table>>];
    bb52__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageLive(_120)<br/>_120 = ((_107 as Continue).0: anchor_lang::prelude::Pubkey)<br/>_106 = _120<br/>StorageDead(_120)<br/>StorageDead(_114)<br/>StorageDead(_111)<br/>StorageDead(_107)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>_123 = &amp;_4<br/></td></tr><tr><td align="left">_122 = &lt;serum_dex::state::Market&lt;'_&gt; as Deref&gt;::deref(move _123)</td></tr></table>>];
    bb53__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_117)<br/>_117 = ((_107 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_119)<br/>_119 = _117<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;SerumV3FulfillmentConfig, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _119)</td></tr></table>>];
    bb54__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_117)<br/>StorageDead(_114)<br/>StorageDead(_111)<br/>StorageDead(_107)<br/>StorageDead(_106)<br/>StorageDead(_103)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>_121 = ((*_122).2: u64)<br/>StorageDead(_122)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>_125 = (*_2)<br/>StorageLive(_126)<br/>_140 = deref_copy ((*_1).0: &amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_141 = deref_copy ((*_140).0: &amp;anchor_lang::prelude::Pubkey)<br/>_126 = (*_141)<br/>StorageLive(_127)<br/>_142 = deref_copy ((*_1).1: &amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_143 = deref_copy ((*_142).0: &amp;anchor_lang::prelude::Pubkey)<br/>_127 = (*_143)<br/>StorageLive(_128)<br/>_128 = _34<br/>StorageLive(_129)<br/>_129 = _16<br/>StorageLive(_130)<br/>_130 = _52<br/>StorageLive(_131)<br/>_131 = _70<br/>StorageLive(_132)<br/>_132 = _88<br/>StorageLive(_133)<br/>_133 = _106<br/>StorageLive(_134)<br/>_144 = deref_copy ((*_1).2: &amp;anchor_lang::prelude::AccountInfo&lt;'_&gt;)<br/>_145 = deref_copy ((*_144).0: &amp;anchor_lang::prelude::Pubkey)<br/>_134 = (*_145)<br/>StorageLive(_135)<br/>_135 = _121<br/>StorageLive(_136)<br/>_136 = _3<br/>StorageLive(_137)<br/>_137 = keeper::SpotFulfillmentType::SerumV3<br/>StorageLive(_138)<br/>_138 = state::spot_market::SpotFulfillmentConfigStatus::Enabled<br/>StorageLive(_139)<br/>_139 = [const 0_u8; 4]<br/>_124 = SerumV3FulfillmentConfig { pubkey: move _125, serum_program_id: move _126, serum_market: move _127, serum_request_queue: move _128, serum_event_queue: move _129, serum_bids: move _130, serum_asks: move _131, serum_base_vault: move _132, serum_quote_vault: move _133, serum_open_orders: move _134, serum_signer_nonce: move _135, market_index: move _136, fulfillment_type: move _137, status: move _138, padding: move _139 }<br/>StorageDead(_139)<br/>StorageDead(_138)<br/>StorageDead(_137)<br/>StorageDead(_136)<br/>StorageDead(_135)<br/>StorageDead(_134)<br/>StorageDead(_133)<br/>StorageDead(_132)<br/>StorageDead(_131)<br/>StorageDead(_130)<br/>StorageDead(_129)<br/>StorageDead(_128)<br/>StorageDead(_127)<br/>StorageDead(_126)<br/>StorageDead(_125)<br/>_0 = std::result::Result::&lt;SerumV3FulfillmentConfig, error::ErrorCode&gt;::Ok(move _124)<br/>StorageDead(_124)<br/>StorageDead(_121)<br/>StorageDead(_106)<br/>StorageDead(_103)<br/>StorageDead(_88)<br/>StorageDead(_85)<br/>StorageDead(_70)<br/>StorageDead(_67)<br/>StorageDead(_52)<br/>StorageDead(_49)<br/>StorageDead(_34)<br/>StorageDead(_31)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb56__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_85)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb62__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left">return</td></tr></table>>];
    bb64__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">64 (cleanup)</td></tr><tr><td align="left">drop(_4)</td></tr></table>>];
    bb65__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">65 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb66__0_3256 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">66 (cleanup)</td></tr><tr><td align="left" balign="left">_150 = discriminant(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_3256 -> bb1__0_3256 [label="return"];
    bb1__0_3256 -> bb2__0_3256 [label="return"];
    bb1__0_3256 -> bb65__0_3256 [label="unwind"];
    bb2__0_3256 -> bb3__0_3256 [label="0"];
    bb2__0_3256 -> bb5__0_3256 [label="1"];
    bb2__0_3256 -> bb4__0_3256 [label="otherwise"];
    bb3__0_3256 -> bb7__0_3256 [label="return"];
    bb3__0_3256 -> bb64__0_3256 [label="unwind"];
    bb5__0_3256 -> bb6__0_3256 [label="return"];
    bb5__0_3256 -> bb66__0_3256 [label="unwind"];
    bb6__0_3256 -> bb62__0_3256 [label=""];
    bb7__0_3256 -> bb8__0_3256 [label="return"];
    bb7__0_3256 -> bb64__0_3256 [label="unwind"];
    bb8__0_3256 -> bb9__0_3256 [label="return"];
    bb8__0_3256 -> bb64__0_3256 [label="unwind"];
    bb9__0_3256 -> bb10__0_3256 [label="return"];
    bb9__0_3256 -> bb64__0_3256 [label="unwind"];
    bb10__0_3256 -> bb11__0_3256 [label="return"];
    bb10__0_3256 -> bb64__0_3256 [label="unwind"];
    bb11__0_3256 -> bb12__0_3256 [label="0"];
    bb11__0_3256 -> bb13__0_3256 [label="1"];
    bb11__0_3256 -> bb4__0_3256 [label="otherwise"];
    bb12__0_3256 -> bb15__0_3256 [label="return"];
    bb12__0_3256 -> bb64__0_3256 [label="unwind"];
    bb13__0_3256 -> bb14__0_3256 [label="return"];
    bb13__0_3256 -> bb64__0_3256 [label="unwind"];
    bb14__0_3256 -> bb61__0_3256 [label=""];
    bb15__0_3256 -> bb16__0_3256 [label="return"];
    bb15__0_3256 -> bb64__0_3256 [label="unwind"];
    bb16__0_3256 -> bb17__0_3256 [label="return"];
    bb16__0_3256 -> bb64__0_3256 [label="unwind"];
    bb17__0_3256 -> bb18__0_3256 [label="return"];
    bb17__0_3256 -> bb64__0_3256 [label="unwind"];
    bb18__0_3256 -> bb19__0_3256 [label="return"];
    bb18__0_3256 -> bb64__0_3256 [label="unwind"];
    bb19__0_3256 -> bb20__0_3256 [label="0"];
    bb19__0_3256 -> bb21__0_3256 [label="1"];
    bb19__0_3256 -> bb4__0_3256 [label="otherwise"];
    bb20__0_3256 -> bb23__0_3256 [label="return"];
    bb20__0_3256 -> bb64__0_3256 [label="unwind"];
    bb21__0_3256 -> bb22__0_3256 [label="return"];
    bb21__0_3256 -> bb64__0_3256 [label="unwind"];
    bb22__0_3256 -> bb60__0_3256 [label=""];
    bb23__0_3256 -> bb24__0_3256 [label="return"];
    bb23__0_3256 -> bb64__0_3256 [label="unwind"];
    bb24__0_3256 -> bb25__0_3256 [label="return"];
    bb24__0_3256 -> bb64__0_3256 [label="unwind"];
    bb25__0_3256 -> bb26__0_3256 [label="return"];
    bb25__0_3256 -> bb64__0_3256 [label="unwind"];
    bb26__0_3256 -> bb27__0_3256 [label="return"];
    bb26__0_3256 -> bb64__0_3256 [label="unwind"];
    bb27__0_3256 -> bb28__0_3256 [label="0"];
    bb27__0_3256 -> bb29__0_3256 [label="1"];
    bb27__0_3256 -> bb4__0_3256 [label="otherwise"];
    bb28__0_3256 -> bb31__0_3256 [label="return"];
    bb28__0_3256 -> bb64__0_3256 [label="unwind"];
    bb29__0_3256 -> bb30__0_3256 [label="return"];
    bb29__0_3256 -> bb64__0_3256 [label="unwind"];
    bb30__0_3256 -> bb59__0_3256 [label=""];
    bb31__0_3256 -> bb32__0_3256 [label="return"];
    bb31__0_3256 -> bb64__0_3256 [label="unwind"];
    bb32__0_3256 -> bb33__0_3256 [label="return"];
    bb32__0_3256 -> bb64__0_3256 [label="unwind"];
    bb33__0_3256 -> bb34__0_3256 [label="return"];
    bb33__0_3256 -> bb64__0_3256 [label="unwind"];
    bb34__0_3256 -> bb35__0_3256 [label="return"];
    bb34__0_3256 -> bb64__0_3256 [label="unwind"];
    bb35__0_3256 -> bb36__0_3256 [label="0"];
    bb35__0_3256 -> bb37__0_3256 [label="1"];
    bb35__0_3256 -> bb4__0_3256 [label="otherwise"];
    bb36__0_3256 -> bb39__0_3256 [label="return"];
    bb36__0_3256 -> bb64__0_3256 [label="unwind"];
    bb37__0_3256 -> bb38__0_3256 [label="return"];
    bb37__0_3256 -> bb64__0_3256 [label="unwind"];
    bb38__0_3256 -> bb58__0_3256 [label=""];
    bb39__0_3256 -> bb40__0_3256 [label="return"];
    bb39__0_3256 -> bb64__0_3256 [label="unwind"];
    bb40__0_3256 -> bb41__0_3256 [label="return"];
    bb40__0_3256 -> bb64__0_3256 [label="unwind"];
    bb41__0_3256 -> bb42__0_3256 [label="return"];
    bb41__0_3256 -> bb64__0_3256 [label="unwind"];
    bb42__0_3256 -> bb43__0_3256 [label="return"];
    bb42__0_3256 -> bb64__0_3256 [label="unwind"];
    bb43__0_3256 -> bb44__0_3256 [label="0"];
    bb43__0_3256 -> bb45__0_3256 [label="1"];
    bb43__0_3256 -> bb4__0_3256 [label="otherwise"];
    bb44__0_3256 -> bb47__0_3256 [label="return"];
    bb44__0_3256 -> bb64__0_3256 [label="unwind"];
    bb45__0_3256 -> bb46__0_3256 [label="return"];
    bb45__0_3256 -> bb64__0_3256 [label="unwind"];
    bb46__0_3256 -> bb57__0_3256 [label=""];
    bb47__0_3256 -> bb48__0_3256 [label="return"];
    bb47__0_3256 -> bb64__0_3256 [label="unwind"];
    bb48__0_3256 -> bb49__0_3256 [label="return"];
    bb48__0_3256 -> bb64__0_3256 [label="unwind"];
    bb49__0_3256 -> bb50__0_3256 [label="return"];
    bb49__0_3256 -> bb64__0_3256 [label="unwind"];
    bb50__0_3256 -> bb51__0_3256 [label="return"];
    bb50__0_3256 -> bb64__0_3256 [label="unwind"];
    bb51__0_3256 -> bb52__0_3256 [label="0"];
    bb51__0_3256 -> bb53__0_3256 [label="1"];
    bb51__0_3256 -> bb4__0_3256 [label="otherwise"];
    bb52__0_3256 -> bb55__0_3256 [label="return"];
    bb52__0_3256 -> bb64__0_3256 [label="unwind"];
    bb53__0_3256 -> bb54__0_3256 [label="return"];
    bb53__0_3256 -> bb64__0_3256 [label="unwind"];
    bb54__0_3256 -> bb57__0_3256 [label=""];
    bb55__0_3256 -> bb56__0_3256 [label="return"];
    bb55__0_3256 -> bb65__0_3256 [label="unwind"];
    bb56__0_3256 -> bb63__0_3256 [label=""];
    bb57__0_3256 -> bb58__0_3256 [label=""];
    bb58__0_3256 -> bb59__0_3256 [label=""];
    bb59__0_3256 -> bb60__0_3256 [label=""];
    bb60__0_3256 -> bb61__0_3256 [label=""];
    bb61__0_3256 -> bb62__0_3256 [label="return"];
    bb61__0_3256 -> bb65__0_3256 [label="unwind"];
    bb62__0_3256 -> bb63__0_3256 [label=""];
    bb64__0_3256 -> bb65__0_3256 [label="return"];
    bb66__0_3256 -> bb65__0_3256 [label=""];
}
