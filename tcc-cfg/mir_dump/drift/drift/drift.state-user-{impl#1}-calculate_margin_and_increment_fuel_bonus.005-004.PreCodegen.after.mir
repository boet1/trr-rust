// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::calculate_margin_and_increment_fuel_bonus` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::calculate_margin_and_increment_fuel_bonus(_1: &mut User, _2: &PerpMarketMap<'_>, _3: &SpotMarketMap<'_>, _4: &mut OracleMap<'_>, _5: MarginContext, _6: &mut UserStats, _7: i64) -> std::result::Result<MarginCalculation, error::ErrorCode> {
    debug self => _1;
    debug perp_market_map => _2;
    debug spot_market_map => _3;
    debug oracle_map => _4;
    debug context => _5;
    debug user_stats => _6;
    debug now => _7;
    let mut _0: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let _8: i64;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _10: std::result::Result<i64, error::ErrorCode>;
    let mut _11: &state::user::User;
    let mut _12: i64;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: i64;
    let _18: ();
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _20: std::result::Result<(), error::ErrorCode>;
    let mut _21: bool;
    let mut _22: i64;
    let mut _23: i64;
    let mut _24: ();
    let _26: ();
    let mut _27: &str;
    let _28: &str;
    let mut _29: &std::string::String;
    let _30: &std::string::String;
    let _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[&str; 2];
    let _36: &[&str; 2];
    let _37: [&str; 2];
    let mut _38: &[core::fmt::rt::Argument<'_>];
    let mut _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let mut _43: &error::ErrorCode;
    let _44: &error::ErrorCode;
    let _45: ();
    let mut _46: &str;
    let _47: &str;
    let mut _48: &std::string::String;
    let _49: &std::string::String;
    let _50: std::string::String;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: &[&str; 5];
    let _55: &[&str; 5];
    let _56: [&str; 5];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let mut _58: &[core::fmt::rt::Argument<'_>; 4];
    let _59: &[core::fmt::rt::Argument<'_>; 4];
    let _60: [core::fmt::rt::Argument<'_>; 4];
    let mut _61: core::fmt::rt::Argument<'_>;
    let mut _62: &i64;
    let _63: &i64;
    let mut _64: core::fmt::rt::Argument<'_>;
    let mut _65: &i64;
    let _66: &i64;
    let mut _67: core::fmt::rt::Argument<'_>;
    let mut _68: &u32;
    let _69: &u32;
    let mut _70: core::fmt::rt::Argument<'_>;
    let mut _71: &i64;
    let _72: &i64;
    let mut _73: error::ErrorCode;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::margin_calculation::MarginCalculation>;
    let mut _81: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _82: &state::user::User;
    let mut _83: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _84: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _85: &mut state::oracle_map::OracleMap<'_>;
    let mut _86: state::margin_calculation::MarginContext;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _92: ();
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _94: std::result::Result<(), error::ErrorCode>;
    let mut _95: &mut state::user::UserStats;
    let mut _96: &mut state::user::User;
    let mut _97: u32;
    let mut _98: u32;
    let mut _99: u32;
    let mut _100: i64;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: state::margin_calculation::MarginCalculation;
    scope 1 {
        debug fuel_bonus_numerator => _8;
        let _25: error::ErrorCode;
        let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _78: ();
        let _79: state::margin_calculation::MarginCalculation;
        let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _91: state::margin_calculation::MarginCalculation;
        scope 6 {
            debug error_code => _25;
            let _32: std::string::String;
            let _51: std::string::String;
            let mut _107: &[&str; 5];
            let mut _108: &[&str; 2];
            scope 7 {
                debug res => _32;
            }
            scope 8 {
                debug res => _51;
            }
        }
        scope 9 {
            debug residual => _75;
            scope 10 {
            }
        }
        scope 11 {
            debug val => _78;
            scope 12 {
            }
        }
        scope 13 {
            debug margin_calculation => _79;
            let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _105: ();
            scope 18 {
                debug residual => _102;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _105;
                scope 21 {
                }
            }
        }
        scope 14 {
            debug residual => _88;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _91;
            scope 17 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        StorageLive(_12);
        _12 = _7;
        _10 = User::get_fuel_bonus_numerator(move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _13 = discriminant(_9);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_9 as Continue).0: i64);
        _8 = _17;
        StorageDead(_17);
        StorageDead(_9);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = (_5.5: i64);
        StorageLive(_23);
        _23 = _8;
        _21 = Eq(move _22, move _23);
        switchInt(move _21) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        goto -> bb40;
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        _24 = ();
        _20 = std::result::Result::<(), error::ErrorCode>::Ok(move _24);
        StorageDead(_24);
        goto -> bb24;
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_25);
        _25 = error::ErrorCode::DefaultError;
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _108 = const _;
        _36 = &(*_108);
        _35 = &(*_36);
        _34 = move _35 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_35);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &_25;
        _43 = &(*_44);
        _42 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _43) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_43);
        _41 = [move _42];
        StorageDead(_42);
        _40 = &_41;
        _39 = &(*_40);
        _38 = move _39 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_39);
        _33 = Arguments::<'_>::new_v1(move _34, move _38) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_38);
        StorageDead(_34);
        _32 = format(move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_33);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_36);
        _31 = move _32;
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = <String as Deref>::deref(move _29) -> [return: bb12, unwind: bb43];
    }

    bb12: {
        _27 = &(*_28);
        StorageDead(_29);
        _26 = solana_program::log::sol_log(move _27) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        StorageDead(_27);
        drop(_31) -> [return: bb14, unwind: bb44];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_26);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _107 = const _;
        _55 = &(*_107);
        _54 = &(*_55);
        _53 = move _54 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_54);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(_5.5: i64);
        _62 = &(*_63);
        _61 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _62) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_62);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &_8;
        _65 = &(*_66);
        _64 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _65) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_65);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &((*_1).29: u32);
        _68 = &(*_69);
        _67 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _68) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_7;
        _71 = &(*_72);
        _70 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _71) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_71);
        _60 = [move _61, move _64, move _67, move _70];
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = move _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_58);
        _52 = Arguments::<'_>::new_v1(move _53, move _57) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_57);
        StorageDead(_53);
        _51 = format(move _52) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_52);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_55);
        _50 = move _51;
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = <String as Deref>::deref(move _48) -> [return: bb21, unwind: bb42];
    }

    bb21: {
        _46 = &(*_47);
        StorageDead(_48);
        _45 = solana_program::log::sol_log(move _46) -> [return: bb22, unwind: bb42];
    }

    bb22: {
        StorageDead(_46);
        drop(_50) -> [return: bb23, unwind: bb44];
    }

    bb23: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_73);
        _73 = _25;
        _20 = std::result::Result::<(), error::ErrorCode>::Err(move _73);
        StorageDead(_73);
        StorageDead(_25);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_21);
        _19 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _20) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_20);
        _74 = discriminant(_19);
        switchInt(move _74) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_78);
        _78 = ((_19 as Continue).0: ());
        _18 = _78;
        StorageDead(_78);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &(*_1);
        StorageLive(_83);
        _83 = &(*_2);
        StorageLive(_84);
        _84 = &(*_3);
        StorageLive(_85);
        _85 = &mut (*_4);
        StorageLive(_86);
        _86 = _5;
        _81 = math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(move _82, move _83, move _84, move _85, move _86) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_75);
        _75 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb40;
    }

    bb29: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_82);
        _80 = <std::result::Result<MarginCalculation, error::ErrorCode> as Try>::branch(move _81) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_81);
        _87 = discriminant(_80);
        switchInt(move _87) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_91);
        _91 = ((_80 as Continue).0: state::margin_calculation::MarginCalculation);
        _79 = _91;
        StorageDead(_91);
        StorageDead(_80);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = &mut (*_6);
        StorageLive(_96);
        _96 = &mut (*_1);
        StorageLive(_97);
        _97 = (_79.17: u32);
        StorageLive(_98);
        _98 = (_79.18: u32);
        StorageLive(_99);
        _99 = (_79.19: u32);
        StorageLive(_100);
        _100 = _7;
        _94 = UserStats::update_fuel_bonus(move _95, move _96, move _97, move _98, move _99, move _100) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_88);
        _88 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_80);
        goto -> bb39;
    }

    bb34: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        _93 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _94) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_94);
        _101 = discriminant(_93);
        switchInt(move _101) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_105);
        _105 = ((_93 as Continue).0: ());
        _92 = _105;
        StorageDead(_105);
        StorageDead(_93);
        StorageDead(_92);
        StorageLive(_106);
        _106 = _79;
        _0 = std::result::Result::<MarginCalculation, error::ErrorCode>::Ok(move _106);
        StorageDead(_106);
        StorageDead(_79);
        StorageDead(_8);
        goto -> bb41;
    }

    bb37: {
        StorageLive(_102);
        _102 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_79);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_8);
        goto -> bb41;
    }

    bb41: {
        return;
    }

    bb42 (cleanup): {
        drop(_50) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_31) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        resume;
    }
}
