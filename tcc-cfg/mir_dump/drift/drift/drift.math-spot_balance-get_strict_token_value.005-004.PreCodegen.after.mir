// MIR for `get_strict_token_value` after PreCodegen

fn get_strict_token_value(_1: i128, _2: u32, _3: &StrictOraclePrice) -> std::result::Result<i128, error::ErrorCode> {
    debug token_amount => _1;
    debug spot_decimals => _2;
    debug strict_price => _3;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i128;
    let mut _7: !;
    let _8: i128;
    let mut _9: u32;
    let mut _11: bool;
    let mut _12: i128;
    let mut _13: &state::oracle::StrictOraclePrice;
    let mut _14: &state::oracle::StrictOraclePrice;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _17: std::result::Result<i128, error::ErrorCode>;
    let mut _18: i128;
    let mut _19: i128;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _21: std::result::Result<i128, error::ErrorCode>;
    let mut _22: i64;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: bool;
    let mut _34: i128;
    let mut _35: i128;
    let mut _36: i128;
    let mut _37: i128;
    let mut _38: i128;
    scope 1 {
        debug precision_decrease => _8;
        let _10: i64;
        scope 2 {
            debug price => _10;
            let _15: i128;
            let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _27: i128;
            let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _32: i128;
            scope 3 {
                debug token_with_price => _15;
            }
            scope 4 {
                debug residual => _24;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _27;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _29;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _32;
                scope 11 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _1;
        _5 = Eq(move _6, const 0_i128);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(const 0_i128);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb26;
    }

    bb2: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = core::num::<impl i128>::pow(const 10_i128, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _1;
        _11 = Gt(move _12, const 0_i128);
        switchInt(move _11) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_13);
        _13 = &(*_3);
        _10 = StrictOraclePrice::min(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        goto -> bb8;
    }

    bb6: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = &(*_3);
        _10 = StrictOraclePrice::max(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_11);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _1;
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _10;
        _21 = <i64 as Cast>::cast::<i128>(move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        _20 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_21);
        _23 = discriminant(_20);
        switchInt(move _23) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_20 as Continue).0: i128);
        _19 = _27;
        StorageDead(_27);
        _17 = <i128 as SafeMath>::safe_mul(move _18, move _19) -> [return: bb15, unwind continue];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_24);
        _24 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb25;
    }

    bb15: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_17);
        _28 = discriminant(_16);
        switchInt(move _28) -> [0: bb17, 1: bb18, otherwise: bb12];
    }

    bb17: {
        StorageLive(_32);
        _32 = ((_16 as Continue).0: i128);
        _15 = _32;
        StorageDead(_32);
        StorageDead(_20);
        StorageDead(_16);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _15;
        _33 = Lt(move _34, const 0_i128);
        switchInt(move _33) -> [0: bb21, otherwise: bb20];
    }

    bb18: {
        StorageLive(_29);
        _29 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_31);
        StorageDead(_29);
        goto -> bb25;
    }

    bb20: {
        StorageDead(_34);
        StorageLive(_35);
        _35 = _15;
        StorageLive(_36);
        _36 = _8;
        _0 = <i128 as SafeDivFloor>::safe_div_floor(move _35, move _36) -> [return: bb22, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        StorageLive(_37);
        _37 = _15;
        StorageLive(_38);
        _38 = _8;
        _0 = <i128 as SafeMath>::safe_div(move _37, move _38) -> [return: bb23, unwind continue];
    }

    bb22: {
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_33);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_20);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb26;
    }

    bb26: {
        return;
    }
}
