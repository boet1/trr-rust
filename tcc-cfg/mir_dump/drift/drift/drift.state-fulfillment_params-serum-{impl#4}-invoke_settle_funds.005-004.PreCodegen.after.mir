// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:324:1: 324:44>::invoke_settle_funds` after PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:324:1: 324:44>::invoke_settle_funds(_1: &SerumFulfillmentParams<'_, '_>) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: std::vec::Vec<u8>;
    let mut _3: &serum_dex::instruction::MarketInstruction;
    let _4: serum_dex::instruction::MarketInstruction;
    let mut _6: anchor_lang::prelude::Pubkey;
    let mut _7: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _8: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _9: std::vec::Vec<u8>;
    let mut _10: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _11: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _12: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 10]>;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: *mut u8;
    let mut _16: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 10]>;
    let mut _17: anchor_lang::prelude::AccountMeta;
    let mut _18: anchor_lang::prelude::Pubkey;
    let mut _19: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _20: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _21: anchor_lang::prelude::AccountMeta;
    let mut _22: anchor_lang::prelude::Pubkey;
    let mut _23: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _24: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _25: anchor_lang::prelude::AccountMeta;
    let mut _26: anchor_lang::prelude::Pubkey;
    let mut _27: anchor_lang::prelude::AccountMeta;
    let mut _28: anchor_lang::prelude::Pubkey;
    let mut _29: anchor_lang::prelude::AccountMeta;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: anchor_lang::prelude::AccountMeta;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _34: anchor_lang::prelude::AccountMeta;
    let mut _35: anchor_lang::prelude::Pubkey;
    let mut _36: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _37: anchor_lang::prelude::AccountMeta;
    let mut _38: anchor_lang::prelude::Pubkey;
    let mut _39: anchor_lang::prelude::AccountMeta;
    let mut _40: anchor_lang::prelude::Pubkey;
    let mut _41: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _42: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _43: anchor_lang::prelude::AccountMeta;
    let mut _44: anchor_lang::prelude::Pubkey;
    let mut _45: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _47: anchor_lang::prelude::AccountInfo<'_>;
    let mut _48: &anchor_lang::prelude::AccountInfo<'_>;
    let _49: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _50: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _51: anchor_lang::prelude::AccountInfo<'_>;
    let mut _52: &anchor_lang::prelude::AccountInfo<'_>;
    let _53: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _54: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _55: anchor_lang::prelude::AccountInfo<'_>;
    let mut _56: &anchor_lang::prelude::AccountInfo<'_>;
    let _57: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _58: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _59: anchor_lang::prelude::AccountInfo<'_>;
    let mut _60: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _61: anchor_lang::prelude::AccountInfo<'_>;
    let mut _62: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _63: anchor_lang::prelude::AccountInfo<'_>;
    let mut _64: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _65: anchor_lang::prelude::AccountInfo<'_>;
    let mut _66: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _67: anchor_lang::prelude::AccountInfo<'_>;
    let mut _68: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _69: anchor_lang::prelude::AccountInfo<'_>;
    let mut _70: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _71: anchor_lang::prelude::AccountInfo<'_>;
    let mut _72: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _74: &u8;
    let _75: &u8;
    let _77: [&[&[u8]]; 1];
    let mut _78: &[&[u8]];
    let _79: &[&[u8]];
    let mut _80: &[&[u8]; 2];
    let mut _81: std::ops::RangeFull;
    let mut _82: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _83: &solana_program::instruction::Instruction;
    let _84: &solana_program::instruction::Instruction;
    let mut _85: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[anchor_lang::prelude::AccountInfo<'_>; 10];
    let _87: &[anchor_lang::prelude::AccountInfo<'_>; 10];
    let mut _88: &[&[&[u8]]];
    let mut _89: &[&[&[u8]]; 1];
    let mut _90: {closure@programs/drift/src/state/fulfillment_params/serum.rs:459:18: 459:21};
    let mut _91: &serum_dex::instruction::MarketInstruction;
    let mut _92: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _93: &anchor_lang::prelude::Pubkey;
    let mut _94: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _95: &anchor_lang::prelude::Pubkey;
    let mut _96: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _97: &anchor_lang::prelude::Pubkey;
    let mut _98: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _101: &anchor_lang::prelude::Pubkey;
    let mut _102: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _103: &anchor_lang::prelude::Pubkey;
    let mut _104: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _105: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _106: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _107: &anchor_lang::prelude::Pubkey;
    let mut _108: &anchor_lang::prelude::Pubkey;
    let mut _109: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _110: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _111: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _112: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _113: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _114: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _115: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _116: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _117: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _118: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _119: bool;
    let mut _120: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _121: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _122: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _123: *const [anchor_lang::prelude::AccountMeta; 10];
    let mut _124: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _125: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    scope 1 {
        debug data => _2;
        let _5: solana_program::instruction::Instruction;
        let mut _126: *const ();
        let mut _127: usize;
        let mut _128: usize;
        let mut _129: usize;
        let mut _130: usize;
        let mut _131: bool;
        scope 2 {
            debug instruction => _5;
            let _46: [anchor_lang::prelude::AccountInfo<'_>; 10];
            scope 4 {
                debug account_infos => _46;
                let _73: [&[u8]; 2];
                scope 5 {
                    debug signer_seeds => _73;
                    let _76: &[&[&[u8]]; 1];
                    scope 6 {
                        debug signers_seeds => _76;
                    }
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _119 = const false;
        StorageLive(_2);
        StorageLive(_3);
        _91 = const _;
        _3 = &(*_91);
        _119 = const true;
        _2 = MarketInstruction::pack(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        _7 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _8) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        StorageDead(_8);
        _92 = deref_copy ((*_7).0: &anchor_lang::prelude::AccountInfo<'_>);
        _93 = deref_copy ((*_92).0: &anchor_lang::prelude::Pubkey);
        _6 = (*_93);
        StorageLive(_9);
        _119 = const false;
        _9 = move _2;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _13 = SizeOf([anchor_lang::prelude::AccountMeta; 10]);
        _14 = AlignOf([anchor_lang::prelude::AccountMeta; 10]);
        _15 = alloc::alloc::exchange_malloc(move _13, move _14) -> [return: bb3, unwind: bb52];
    }

    bb3: {
        StorageLive(_16);
        _16 = ShallowInitBox(move _15, [anchor_lang::prelude::AccountMeta; 10]);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_1);
        _19 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _20) -> [return: bb4, unwind: bb51];
    }

    bb4: {
        StorageDead(_20);
        _94 = deref_copy ((*_19).1: &anchor_lang::prelude::AccountInfo<'_>);
        _95 = deref_copy ((*_94).0: &anchor_lang::prelude::Pubkey);
        _18 = (*_95);
        _17 = anchor_lang::prelude::AccountMeta::new(move _18, const false) -> [return: bb5, unwind: bb51];
    }

    bb5: {
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        _23 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _24) -> [return: bb6, unwind: bb51];
    }

    bb6: {
        StorageDead(_24);
        _96 = deref_copy ((*_23).2: &anchor_lang::prelude::AccountInfo<'_>);
        _97 = deref_copy ((*_96).0: &anchor_lang::prelude::Pubkey);
        _22 = (*_97);
        _21 = anchor_lang::prelude::AccountMeta::new(move _22, const false) -> [return: bb7, unwind: bb51];
    }

    bb7: {
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        _98 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _99 = deref_copy ((*_98).0: &anchor_lang::prelude::Pubkey);
        _26 = (*_99);
        _25 = anchor_lang::prelude::AccountMeta::new_readonly(move _26, const true) -> [return: bb8, unwind: bb51];
    }

    bb8: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        _100 = deref_copy ((*_1).6: &anchor_lang::prelude::AccountInfo<'_>);
        _101 = deref_copy ((*_100).0: &anchor_lang::prelude::Pubkey);
        _28 = (*_101);
        _27 = anchor_lang::prelude::AccountMeta::new(move _28, const false) -> [return: bb9, unwind: bb51];
    }

    bb9: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _102 = deref_copy ((*_1).7: &anchor_lang::prelude::AccountInfo<'_>);
        _103 = deref_copy ((*_102).0: &anchor_lang::prelude::Pubkey);
        _30 = (*_103);
        _29 = anchor_lang::prelude::AccountMeta::new(move _30, const false) -> [return: bb10, unwind: bb51];
    }

    bb10: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _104 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _120 = (((_104.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _33 = &(*_120);
        _32 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::Key>::key(move _33) -> [return: bb11, unwind: bb51];
    }

    bb11: {
        StorageDead(_33);
        _31 = anchor_lang::prelude::AccountMeta::new(move _32, const false) -> [return: bb12, unwind: bb51];
    }

    bb12: {
        StorageDead(_32);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _105 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _121 = (((_105.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _36 = &(*_121);
        _35 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::Key>::key(move _36) -> [return: bb13, unwind: bb51];
    }

    bb13: {
        StorageDead(_36);
        _34 = anchor_lang::prelude::AccountMeta::new(move _35, const false) -> [return: bb14, unwind: bb51];
    }

    bb14: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        _106 = deref_copy ((*_1).12: &anchor_lang::prelude::AccountInfo<'_>);
        _107 = deref_copy ((*_106).0: &anchor_lang::prelude::Pubkey);
        _38 = (*_107);
        _37 = anchor_lang::prelude::AccountMeta::new_readonly(move _38, const false) -> [return: bb15, unwind: bb51];
    }

    bb15: {
        StorageDead(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &((*_1).8: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _41 = <anchor_lang::prelude::Program<'_, Token> as Deref>::deref(move _42) -> [return: bb16, unwind: bb51];
    }

    bb16: {
        StorageDead(_42);
        _108 = deref_copy ((*_41).0: &anchor_lang::prelude::Pubkey);
        _40 = (*_108);
        _39 = anchor_lang::prelude::AccountMeta::new_readonly(move _40, const false) -> [return: bb17, unwind: bb51];
    }

    bb17: {
        StorageDead(_40);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _109 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _122 = (((_109.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _45 = &(*_122);
        _44 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::Key>::key(move _45) -> [return: bb18, unwind: bb51];
    }

    bb18: {
        StorageDead(_45);
        _43 = anchor_lang::prelude::AccountMeta::new(move _44, const false) -> [return: bb19, unwind: bb51];
    }

    bb19: {
        StorageDead(_44);
        _123 = (((_16.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 10]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 10]>).0: *const [anchor_lang::prelude::AccountMeta; 10]);
        _126 = _123 as *const () (PtrToPtr);
        _127 = _126 as usize (Transmute);
        _128 = AlignOf([anchor_lang::prelude::AccountMeta; 10]);
        _129 = Sub(_128, const 1_usize);
        _130 = BitAnd(_127, _129);
        _131 = Eq(_130, const 0_usize);
        assert(_131, "misaligned pointer dereference: address must be a multiple of {} but is {}", _128, _127) -> [success: bb56, unwind unreachable];
    }

    bb20: {
        StorageDead(_11);
        _5 = Instruction { program_id: move _6, accounts: move _10, data: move _9 };
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_41);
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_7);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_1);
        _49 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _50) -> [return: bb21, unwind: bb50];
    }

    bb21: {
        StorageDead(_50);
        _110 = deref_copy ((*_49).0: &anchor_lang::prelude::AccountInfo<'_>);
        _48 = &(*_110);
        _47 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _48) -> [return: bb22, unwind: bb50];
    }

    bb22: {
        StorageDead(_48);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        _53 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _54) -> [return: bb23, unwind: bb49];
    }

    bb23: {
        StorageDead(_54);
        _111 = deref_copy ((*_53).1: &anchor_lang::prelude::AccountInfo<'_>);
        _52 = &(*_111);
        _51 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _52) -> [return: bb24, unwind: bb49];
    }

    bb24: {
        StorageDead(_52);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &(*_1);
        _57 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _58) -> [return: bb25, unwind: bb48];
    }

    bb25: {
        StorageDead(_58);
        _112 = deref_copy ((*_57).2: &anchor_lang::prelude::AccountInfo<'_>);
        _56 = &(*_112);
        _55 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _56) -> [return: bb26, unwind: bb48];
    }

    bb26: {
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        _113 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _60 = &(*_113);
        _59 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _60) -> [return: bb27, unwind: bb47];
    }

    bb27: {
        StorageDead(_60);
        StorageLive(_61);
        StorageLive(_62);
        _114 = deref_copy ((*_1).6: &anchor_lang::prelude::AccountInfo<'_>);
        _62 = &(*_114);
        _61 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _62) -> [return: bb28, unwind: bb46];
    }

    bb28: {
        StorageDead(_62);
        StorageLive(_63);
        StorageLive(_64);
        _115 = deref_copy ((*_1).7: &anchor_lang::prelude::AccountInfo<'_>);
        _64 = &(*_115);
        _63 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _64) -> [return: bb29, unwind: bb45];
    }

    bb29: {
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        _116 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _124 = (((_116.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _66 = &(*_124);
        _65 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _66) -> [return: bb30, unwind: bb44];
    }

    bb30: {
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        _117 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _125 = (((_117.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _68 = &(*_125);
        _67 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _68) -> [return: bb31, unwind: bb43];
    }

    bb31: {
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        _118 = deref_copy ((*_1).12: &anchor_lang::prelude::AccountInfo<'_>);
        _70 = &(*_118);
        _69 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _70) -> [return: bb32, unwind: bb42];
    }

    bb32: {
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &((*_1).8: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _71 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _72) -> [return: bb33, unwind: bb41];
    }

    bb33: {
        StorageDead(_72);
        _46 = [move _47, move _51, move _55, move _59, move _61, move _63, move _65, move _67, move _69, move _71];
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_47);
        StorageDead(_57);
        StorageDead(_53);
        StorageDead(_49);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &((*_1).13: u8);
        _74 = &(*_75);
        _73 = get_signer_seeds(move _74) -> [return: bb34, unwind: bb40];
    }

    bb34: {
        StorageDead(_74);
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_73;
        StorageLive(_81);
        _81 = RangeFull;
        _79 = <[&[u8]; 2] as Index<RangeFull>>::index(move _80, move _81) -> [return: bb35, unwind: bb40];
    }

    bb35: {
        StorageDead(_81);
        StorageDead(_80);
        _78 = &(*_79);
        _77 = [move _78];
        StorageDead(_78);
        _76 = &_77;
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_5;
        _83 = &(*_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_46;
        _86 = &(*_87);
        _85 = move _86 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_76);
        _88 = move _89 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_89);
        _82 = invoke_signed_unchecked(move _83, move _85, move _88) -> [return: bb36, unwind: bb40];
    }

    bb36: {
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:459:18: 459:21};
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:459:18: 459:21}>(move _82, move _90) -> [return: bb37, unwind: bb40];
    }

    bb37: {
        StorageDead(_90);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_73);
        drop(_46) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        StorageDead(_46);
        drop(_5) -> [return: bb39, unwind: bb55];
    }

    bb39: {
        StorageDead(_5);
        _119 = const false;
        StorageDead(_2);
        StorageDead(_87);
        StorageDead(_84);
        return;
    }

    bb40 (cleanup): {
        drop(_46) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_69) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_67) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_65) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_63) -> [return: bb45, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_61) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_59) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_55) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_51) -> [return: bb49, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_47) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_5) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_16) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_9) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }

    bb54 (cleanup): {
        drop(_2) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        switchInt(_119) -> [0: bb53, otherwise: bb54];
    }

    bb56: {
        (*_123) = [move _17, move _21, move _25, move _27, move _29, move _31, move _34, move _37, move _39, move _43];
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_21);
        StorageDead(_17);
        _12 = move _16;
        _11 = move _12 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_16);
        StorageDead(_12);
        _10 = std::slice::<impl [anchor_lang::prelude::AccountMeta]>::into_vec::<std::alloc::Global>(move _11) -> [return: bb20, unwind: bb52];
    }
}
