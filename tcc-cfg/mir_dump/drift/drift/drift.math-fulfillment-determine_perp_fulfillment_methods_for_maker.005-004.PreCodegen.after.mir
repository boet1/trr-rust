// MIR for `determine_perp_fulfillment_methods_for_maker` after PreCodegen

fn determine_perp_fulfillment_methods_for_maker(_1: &Order, _2: &AMM, _3: u64, _4: Option<i64>, _5: Option<u64>, _6: AMMAvailability, _7: u64, _8: u8, _9: FillMode) -> std::result::Result<Vec<PerpFulfillmentMethod>, error::ErrorCode> {
    debug order => _1;
    debug amm => _2;
    debug amm_reserve_price => _3;
    debug valid_oracle_price => _4;
    debug limit_price => _5;
    debug amm_availability => _6;
    debug slot => _7;
    debug min_auction_duration => _8;
    debug fill_mode => _9;
    let mut _0: std::result::Result<std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>, error::ErrorCode>;
    let _10: controller::position::PositionDirection;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _13: std::result::Result<bool, error::ErrorCode>;
    let mut _14: state::perp_market::AMMAvailability;
    let mut _15: std::option::Option<i64>;
    let mut _16: &state::user::Order;
    let mut _17: u8;
    let mut _18: u64;
    let mut _19: state::fill_mode::FillMode;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: ();
    let mut _26: bool;
    let mut _27: !;
    let mut _28: std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>;
    let mut _30: isize;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _32: std::result::Result<u64, error::ErrorCode>;
    let mut _33: &state::perp_market::AMM;
    let mut _34: u64;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _41: std::result::Result<u64, error::ErrorCode>;
    let mut _42: &state::perp_market::AMM;
    let mut _43: u64;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _51: std::result::Result<u64, error::ErrorCode>;
    let mut _52: std::option::Option<u64>;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: controller::position::PositionDirection;
    let mut _60: u64;
    let mut _61: u64;
    let mut _62: bool;
    let mut _63: std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>;
    let mut _64: std::boxed::Box<[state::fulfillment::PerpFulfillmentMethod]>;
    let mut _65: std::boxed::Box<[state::fulfillment::PerpFulfillmentMethod; 1]>;
    let mut _66: usize;
    let mut _67: usize;
    let mut _68: *mut u8;
    let mut _69: std::boxed::Box<[state::fulfillment::PerpFulfillmentMethod; 1]>;
    let mut _70: state::fulfillment::PerpFulfillmentMethod;
    let mut _71: std::option::Option<u64>;
    let mut _72: std::vec::Vec<state::fulfillment::PerpFulfillmentMethod>;
    let mut _73: *const [state::fulfillment::PerpFulfillmentMethod; 1];
    scope 1 {
        debug maker_direction => _10;
        let _11: bool;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: bool;
        scope 2 {
            debug can_fill_with_amm => _11;
            let _29: u64;
            let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _39: u64;
            let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _48: u64;
            scope 7 {
                debug amm_price => _29;
                let _49: u64;
                let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _57: u64;
                scope 16 {
                    debug maker_price => _49;
                    let _58: bool;
                    scope 21 {
                        debug amm_crosses_maker => _58;
                        let mut _74: *const ();
                        let mut _75: usize;
                        let mut _76: usize;
                        let mut _77: usize;
                        let mut _78: usize;
                        let mut _79: bool;
                        scope 22 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _54;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _57;
                    scope 20 {
                    }
                }
            }
            scope 8 {
                debug residual => _36;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _39;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _45;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _48;
                scope 15 {
                }
            }
        }
        scope 3 {
            debug residual => _21;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _24;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_10);
        _10 = ((*_1).17: controller::position::PositionDirection);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _6;
        StorageLive(_15);
        _15 = _4;
        StorageLive(_16);
        _16 = &(*_1);
        StorageLive(_17);
        _17 = _8;
        StorageLive(_18);
        _18 = _7;
        StorageLive(_19);
        _19 = _9;
        _13 = can_fill_with_amm(move _14, move _15, move _16, move _17, move _18, move _19) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        _20 = discriminant(_12);
        switchInt(move _20) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_24);
        _24 = ((_12 as Continue).0: bool);
        _11 = _24;
        StorageDead(_24);
        StorageDead(_12);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _11;
        switchInt(move _26) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_21);
        _21 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<Vec<PerpFulfillmentMethod>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_12);
        goto -> bb36;
    }

    bb7: {
        _25 = const ();
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_29);
        _30 = discriminant(_10);
        switchInt(move _30) -> [0: bb11, 1: bb10, otherwise: bb4];
    }

    bb8: {
        StorageLive(_28);
        _28 = Vec::<PerpFulfillmentMethod>::new() -> [return: bb9, unwind continue];
    }

    bb9: {
        _0 = std::result::Result::<Vec<PerpFulfillmentMethod>, error::ErrorCode>::Ok(move _28);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb36;
    }

    bb10: {
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &(*_2);
        StorageLive(_43);
        _43 = _3;
        _41 = AMM::bid_price(move _42, move _43) -> [return: bb17, unwind continue];
    }

    bb11: {
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &(*_2);
        StorageLive(_34);
        _34 = _3;
        _32 = AMM::ask_price(move _33, move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _32) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_32);
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_39);
        _39 = ((_31 as Continue).0: u64);
        _29 = _39;
        StorageDead(_39);
        StorageDead(_31);
        goto -> bb22;
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<Vec<PerpFulfillmentMethod>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_31);
        goto -> bb35;
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _41) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_41);
        _44 = discriminant(_40);
        switchInt(move _44) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_48);
        _48 = ((_40 as Continue).0: u64);
        _29 = _48;
        StorageDead(_48);
        StorageDead(_40);
        goto -> bb22;
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<Vec<PerpFulfillmentMethod>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_40);
        goto -> bb35;
    }

    bb22: {
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _5;
        _51 = <Option<u64> as SafeUnwrap>::safe_unwrap(move _52) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_52);
        _50 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _51) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_57);
        _57 = ((_50 as Continue).0: u64);
        _49 = _57;
        StorageDead(_57);
        StorageDead(_50);
        StorageLive(_58);
        StorageLive(_59);
        _59 = _10;
        StorageLive(_60);
        _60 = _49;
        StorageLive(_61);
        _61 = _29;
        _58 = do_orders_cross(move _59, move _60, move _61) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_54);
        _54 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<Vec<PerpFulfillmentMethod>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb35;
    }

    bb28: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_62);
        _62 = _58;
        switchInt(move _62) -> [0: bb32, otherwise: bb29];
    }

    bb29: {
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _66 = SizeOf([state::fulfillment::PerpFulfillmentMethod; 1]);
        _67 = AlignOf([state::fulfillment::PerpFulfillmentMethod; 1]);
        _68 = alloc::alloc::exchange_malloc(move _66, move _67) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageLive(_69);
        _69 = ShallowInitBox(move _68, [state::fulfillment::PerpFulfillmentMethod; 1]);
        StorageLive(_70);
        StorageLive(_71);
        _71 = Option::<u64>::None;
        _70 = PerpFulfillmentMethod::AMM(move _71);
        StorageDead(_71);
        _73 = (((_69.0: std::ptr::Unique<[state::fulfillment::PerpFulfillmentMethod; 1]>).0: std::ptr::NonNull<[state::fulfillment::PerpFulfillmentMethod; 1]>).0: *const [state::fulfillment::PerpFulfillmentMethod; 1]);
        _74 = _73 as *const () (PtrToPtr);
        _75 = _74 as usize (Transmute);
        _76 = AlignOf([state::fulfillment::PerpFulfillmentMethod; 1]);
        _77 = Sub(_76, const 1_usize);
        _78 = BitAnd(_75, _77);
        _79 = Eq(_78, const 0_usize);
        assert(_79, "misaligned pointer dereference: address must be a multiple of {} but is {}", _76, _75) -> [success: bb39, unwind unreachable];
    }

    bb31: {
        StorageDead(_64);
        _0 = std::result::Result::<Vec<PerpFulfillmentMethod>, error::ErrorCode>::Ok(move _63);
        StorageDead(_63);
        goto -> bb34;
    }

    bb32: {
        StorageLive(_72);
        _72 = Vec::<PerpFulfillmentMethod>::new() -> [return: bb33, unwind continue];
    }

    bb33: {
        _0 = std::result::Result::<Vec<PerpFulfillmentMethod>, error::ErrorCode>::Ok(move _72);
        StorageDead(_72);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_62);
        StorageDead(_58);
        StorageDead(_49);
        StorageDead(_29);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb37;
    }

    bb35: {
        StorageDead(_29);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb37;
    }

    bb37: {
        return;
    }

    bb38 (cleanup): {
        resume;
    }

    bb39: {
        (*_73) = [move _70];
        StorageDead(_70);
        _65 = move _69;
        _64 = move _65 as std::boxed::Box<[state::fulfillment::PerpFulfillmentMethod]> (PointerCoercion(Unsize));
        StorageDead(_69);
        StorageDead(_65);
        _63 = std::slice::<impl [PerpFulfillmentMethod]>::into_vec::<std::alloc::Global>(move _64) -> [return: bb31, unwind: bb38];
    }
}
