// MIR for `adjust_amm` after PreCodegen

fn adjust_amm(_1: &PerpMarket, _2: u128, _3: u128, _4: bool) -> std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> {
    debug market => _1;
    debug optimal_peg => _2;
    debug budget => _3;
    debug adjust_k => _4;
    let mut _0: std::result::Result<(std::boxed::Box<state::perp_market::PerpMarket>, i128), error::ErrorCode>;
    let _5: i128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _7: std::result::Result<i128, error::ErrorCode>;
    let mut _8: u8;
    let mut _9: u8;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: i128;
    let _15: ();
    let mut _16: bool;
    let mut _17: u128;
    let mut _18: u128;
    let mut _19: bool;
    let mut _20: i128;
    let mut _21: !;
    let mut _22: (std::boxed::Box<state::perp_market::PerpMarket>, i128);
    let mut _23: std::boxed::Box<state::perp_market::PerpMarket>;
    let mut _24: state::perp_market::PerpMarket;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _27: std::result::Result<i128, error::ErrorCode>;
    let mut _28: i128;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _30: std::result::Result<i128, error::ErrorCode>;
    let mut _31: u128;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: i128;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _39: std::result::Result<i128, error::ErrorCode>;
    let mut _40: u128;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _53: std::result::Result<i128, error::ErrorCode>;
    let mut _54: u128;
    let mut _55: u128;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _63: std::result::Result<i128, error::ErrorCode>;
    let mut _64: u128;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: state::perp_market::PerpMarket;
    let _76: ();
    let mut _77: bool;
    let mut _78: i128;
    let mut _79: i128;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _81: std::result::Result<i128, error::ErrorCode>;
    let mut _82: i128;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _84: std::result::Result<i128, error::ErrorCode>;
    let mut _85: i128;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: i128;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: u128;
    let mut _98: i128;
    let mut _100: bool;
    let mut _101: i128;
    let mut _102: bool;
    let mut _103: i128;
    let mut _104: bool;
    let mut _105: i128;
    let mut _106: bool;
    let mut _107: i128;
    let mut _108: bool;
    let mut _109: i128;
    let mut _110: u128;
    let mut _111: u128;
    let mut _112: i128;
    let _113: ();
    let mut _114: bool;
    let mut _115: u128;
    let mut _116: i128;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _118: std::result::Result<i128, error::ErrorCode>;
    let mut _119: &state::perp_market::AMM;
    let _120: &state::perp_market::AMM;
    let mut _121: u128;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _129: std::result::Result<bool, error::ErrorCode>;
    let mut _130: &state::perp_market::AMM;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _137: bool;
    let mut _138: bool;
    let mut _140: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _141: std::result::Result<u128, error::ErrorCode>;
    let mut _142: state::perp_market::AMM;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _149: u128;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _151: std::result::Result<u128, error::ErrorCode>;
    let mut _152: u128;
    let mut _153: u128;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _155: std::result::Result<u128, error::ErrorCode>;
    let mut _156: u128;
    let mut _157: isize;
    let mut _159: !;
    let mut _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _162: isize;
    let mut _164: !;
    let mut _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _167: u128;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::cp_curve::UpdateKResult>;
    let mut _170: std::result::Result<math::cp_curve::UpdateKResult, error::ErrorCode>;
    let mut _171: &state::perp_market::PerpMarket;
    let mut _172: math::bn::U192;
    let mut _173: u128;
    let mut _174: isize;
    let mut _176: !;
    let mut _177: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _181: std::result::Result<i128, error::ErrorCode>;
    let mut _182: &mut state::perp_market::PerpMarket;
    let mut _183: &mut std::boxed::Box<state::perp_market::PerpMarket>;
    let mut _184: &math::cp_curve::UpdateKResult;
    let _185: &math::cp_curve::UpdateKResult;
    let mut _186: isize;
    let mut _188: !;
    let mut _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _191: i128;
    let mut _192: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _193: std::result::Result<i128, error::ErrorCode>;
    let mut _194: u128;
    let mut _195: u128;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _201: i128;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _203: std::result::Result<i128, error::ErrorCode>;
    let mut _204: i128;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _206: std::result::Result<i128, error::ErrorCode>;
    let mut _207: i128;
    let mut _208: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _209: std::result::Result<i128, error::ErrorCode>;
    let mut _210: i128;
    let mut _211: i128;
    let mut _212: i128;
    let mut _213: isize;
    let mut _215: !;
    let mut _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _218: isize;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _223: i128;
    let mut _224: isize;
    let mut _226: !;
    let mut _227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _229: u128;
    let mut _230: i128;
    let mut _231: u128;
    let mut _232: bool;
    let mut _233: i128;
    let mut _234: std::result::Result<u128, error::ErrorCode>;
    let mut _235: u128;
    let mut _236: u128;
    let mut _237: bool;
    let mut _238: u128;
    let mut _239: u128;
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _241: std::result::Result<u128, error::ErrorCode>;
    let mut _242: u128;
    let mut _243: u128;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _249: i128;
    let mut _250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _251: std::result::Result<i128, error::ErrorCode>;
    let mut _252: &state::perp_market::AMM;
    let _253: &state::perp_market::AMM;
    let mut _254: u128;
    let mut _255: isize;
    let mut _257: !;
    let mut _258: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _260: u128;
    let mut _261: (std::boxed::Box<state::perp_market::PerpMarket>, i128);
    let mut _262: std::boxed::Box<state::perp_market::PerpMarket>;
    let mut _263: i128;
    let mut _264: std::boxed::Box<state::perp_market::PerpMarket>;
    let mut _265: *const state::perp_market::PerpMarket;
    let mut _266: *const state::perp_market::PerpMarket;
    let mut _267: *const state::perp_market::PerpMarket;
    let mut _268: *const state::perp_market::PerpMarket;
    let mut _269: *const state::perp_market::PerpMarket;
    let mut _270: *const state::perp_market::PerpMarket;
    scope 1 {
        debug curve_update_intensity => _5;
        let _25: i128;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: i128;
        let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _45: i128;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: i128;
        scope 6 {
            debug delta_peg => _25;
            let mut _51: i128;
            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _60: i128;
            scope 19 {
                debug per_peg_cost => _51;
                let _61: i128;
                let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _69: i128;
                scope 24 {
                    debug budget_i128 => _61;
                    let mut _70: std::boxed::Box<state::perp_market::PerpMarket>;
                    scope 29 {
                        debug market_clone => _70;
                        let mut _72: i128;
                        scope 30 {
                            debug budget_delta_peg => _72;
                            let mut _73: u128;
                            scope 31 {
                                debug budget_delta_peg_magnitude => _73;
                                let _74: i128;
                                scope 32 {
                                    debug cost => _74;
                                    let _75: u128;
                                    scope 33 {
                                        debug new_peg => _75;
                                        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _90: i128;
                                        let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _96: i128;
                                        let _99: bool;
                                        scope 34 {
                                            debug residual => _87;
                                            scope 35 {
                                            }
                                        }
                                        scope 36 {
                                            debug val => _90;
                                            scope 37 {
                                            }
                                        }
                                        scope 38 {
                                            debug residual => _93;
                                            scope 39 {
                                            }
                                        }
                                        scope 40 {
                                            debug val => _96;
                                            scope 41 {
                                            }
                                        }
                                        scope 42 {
                                            debug use_optimal_peg => _99;
                                            let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _126: i128;
                                            let _127: bool;
                                            let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _135: bool;
                                            let mut _271: *const ();
                                            let mut _272: usize;
                                            let mut _273: usize;
                                            let mut _274: usize;
                                            let mut _275: usize;
                                            let mut _276: bool;
                                            scope 43 {
                                                debug residual => _123;
                                                scope 44 {
                                                }
                                            }
                                            scope 45 {
                                                debug val => _126;
                                                scope 46 {
                                                }
                                            }
                                            scope 47 {
                                                debug can_lower_k => _127;
                                                let _136: i128;
                                                let _139: u128;
                                                let _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _147: u128;
                                                scope 52 {
                                                    debug adjustment_cost => _136;
                                                    let _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _217: i128;
                                                    let _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _222: i128;
                                                    let _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _228: i128;
                                                    let _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _248: u128;
                                                    let _256: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _259: i128;
                                                    scope 81 {
                                                        debug residual => _214;
                                                        scope 82 {
                                                        }
                                                    }
                                                    scope 83 {
                                                        debug val => _217;
                                                        scope 84 {
                                                        }
                                                    }
                                                    scope 85 {
                                                        debug residual => _219;
                                                        scope 86 {
                                                        }
                                                    }
                                                    scope 87 {
                                                        debug val => _222;
                                                        scope 88 {
                                                        }
                                                    }
                                                    scope 89 {
                                                        debug residual => _225;
                                                        scope 90 {
                                                        }
                                                    }
                                                    scope 91 {
                                                        debug val => _228;
                                                        scope 92 {
                                                        }
                                                    }
                                                    scope 93 {
                                                        debug residual => _245;
                                                        scope 94 {
                                                        }
                                                    }
                                                    scope 95 {
                                                        debug val => _248;
                                                        scope 96 {
                                                        }
                                                    }
                                                    scope 97 {
                                                        debug residual => _256;
                                                        scope 98 {
                                                        }
                                                    }
                                                    scope 99 {
                                                        debug val => _259;
                                                        scope 100 {
                                                        }
                                                    }
                                                }
                                                scope 53 {
                                                    debug new_sqrt_k_lower_bound => _139;
                                                    let _148: u128;
                                                    let _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _161: u128;
                                                    let _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _166: u128;
                                                    scope 58 {
                                                        debug new_sqrt_k => _148;
                                                        let _168: math::cp_curve::UpdateKResult;
                                                        let _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _178: math::cp_curve::UpdateKResult;
                                                        scope 67 {
                                                            debug update_k_result => _168;
                                                            let _179: i128;
                                                            let _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _190: i128;
                                                            scope 72 {
                                                                debug adjustment_cost => _179;
                                                                let _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _200: i128;
                                                                let mut _277: *const ();
                                                                let mut _278: usize;
                                                                let mut _279: usize;
                                                                let mut _280: usize;
                                                                let mut _281: usize;
                                                                let mut _282: bool;
                                                                let mut _283: *const ();
                                                                let mut _284: usize;
                                                                let mut _285: usize;
                                                                let mut _286: usize;
                                                                let mut _287: usize;
                                                                let mut _288: bool;
                                                                scope 77 {
                                                                    debug residual => _197;
                                                                    scope 78 {
                                                                    }
                                                                }
                                                                scope 79 {
                                                                    debug val => _200;
                                                                    scope 80 {
                                                                    }
                                                                }
                                                            }
                                                            scope 73 {
                                                                debug residual => _187;
                                                                scope 74 {
                                                                }
                                                            }
                                                            scope 75 {
                                                                debug val => _190;
                                                                scope 76 {
                                                                }
                                                            }
                                                        }
                                                        scope 68 {
                                                            debug residual => _175;
                                                            scope 69 {
                                                            }
                                                        }
                                                        scope 70 {
                                                            debug val => _178;
                                                            scope 71 {
                                                            }
                                                        }
                                                    }
                                                    scope 59 {
                                                        debug residual => _158;
                                                        scope 60 {
                                                        }
                                                    }
                                                    scope 61 {
                                                        debug val => _161;
                                                        scope 62 {
                                                        }
                                                    }
                                                    scope 63 {
                                                        debug residual => _163;
                                                        scope 64 {
                                                        }
                                                    }
                                                    scope 65 {
                                                        debug val => _166;
                                                        scope 66 {
                                                        }
                                                    }
                                                }
                                                scope 54 {
                                                    debug residual => _144;
                                                    scope 55 {
                                                    }
                                                }
                                                scope 56 {
                                                    debug val => _147;
                                                    scope 57 {
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _132;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _135;
                                                scope 51 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 25 {
                    debug residual => _66;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _69;
                    scope 28 {
                    }
                }
            }
            scope 20 {
                debug residual => _57;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _60;
                scope 23 {
                }
            }
        }
        scope 7 {
            debug residual => _33;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _36;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _42;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _45;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _47;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _50;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = (((*_1).1: state::perp_market::AMM).70: u8);
        _8 = std::cmp::min::<u8>(move _9, const 100_u8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <u8 as Cast>::cast::<i128>(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _6 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: i128);
        _5 = _14;
        StorageDead(_14);
        StorageDead(_6);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        StorageLive(_18);
        _18 = (((*_1).1: state::perp_market::AMM).11: u128);
        _16 = Eq(move _17, move _18);
        switchInt(move _16) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        goto -> bb169;
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb10;
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _5;
        _19 = Eq(move _20, const 0_i128);
        switchInt(move _19) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_20);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = (*_1);
        _23 = Box::<PerpMarket>::new(move _24) -> [return: bb12, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        _15 = const ();
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _2;
        _30 = <u128 as Cast>::cast::<i128>(move _31) -> [return: bb13, unwind continue];
    }

    bb12: {
        StorageDead(_24);
        _22 = (move _23, const 0_i128);
        StorageDead(_23);
        _0 = std::result::Result::<(Box<PerpMarket>, i128), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb169;
    }

    bb13: {
        StorageDead(_31);
        _29 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_29 as Continue).0: i128);
        _28 = _36;
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = (((*_1).1: state::perp_market::AMM).11: u128);
        _39 = <u128 as Cast>::cast::<i128>(move _40) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_33);
        _33 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb167;
    }

    bb18: {
        StorageDead(_40);
        _38 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        _41 = discriminant(_38);
        switchInt(move _41) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_38 as Continue).0: i128);
        _37 = _45;
        StorageDead(_45);
        _27 = <i128 as SafeMath>::safe_sub(move _28, move _37) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_37);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb166;
    }

    bb23: {
        StorageDead(_37);
        StorageDead(_28);
        _26 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _27) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_27);
        _46 = discriminant(_26);
        switchInt(move _46) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_50);
        _50 = ((_26 as Continue).0: i128);
        _25 = _50;
        StorageDead(_50);
        StorageDead(_38);
        StorageDead(_29);
        StorageDead(_26);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = (((*_1).1: state::perp_market::AMM).6: u128);
        StorageLive(_55);
        _55 = (((*_1).1: state::perp_market::AMM).12: u128);
        _53 = calculate_per_peg_cost(move _54, move _55) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_47);
        _47 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_49);
        StorageDead(_47);
        goto -> bb166;
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _53) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_53);
        _56 = discriminant(_52);
        switchInt(move _56) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_52 as Continue).0: i128);
        _51 = _60;
        StorageDead(_60);
        StorageDead(_52);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _3;
        _63 = <u128 as Cast>::cast::<i128>(move _64) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_57);
        _57 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        goto -> bb165;
    }

    bb33: {
        StorageDead(_64);
        _62 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _63) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_63);
        _65 = discriminant(_62);
        switchInt(move _65) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_69);
        _69 = ((_62 as Continue).0: i128);
        _61 = _69;
        StorageDead(_69);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        _71 = (*_1);
        _70 = Box::<PerpMarket>::new(move _71) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_66);
        _66 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_62);
        goto -> bb164;
    }

    bb38: {
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = const 0_u128;
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _51;
        _77 = Ne(move _78, const 0_i128);
        switchInt(move _77) -> [0: bb51, otherwise: bb39];
    }

    bb39: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _61;
        _84 = <i128 as SafeMath>::safe_mul(move _85, const _) -> [return: bb40, unwind: bb171];
    }

    bb40: {
        StorageDead(_85);
        _83 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _84) -> [return: bb41, unwind: bb171];
    }

    bb41: {
        StorageDead(_84);
        _86 = discriminant(_83);
        switchInt(move _86) -> [0: bb42, 1: bb43, otherwise: bb5];
    }

    bb42: {
        StorageLive(_90);
        _90 = ((_83 as Continue).0: i128);
        _82 = _90;
        StorageDead(_90);
        StorageLive(_91);
        _91 = _51;
        _81 = <i128 as SafeMath>::safe_div(move _82, move _91) -> [return: bb45, unwind: bb171];
    }

    bb43: {
        StorageLive(_87);
        _87 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb44, unwind: bb171];
    }

    bb44: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb161;
    }

    bb45: {
        StorageDead(_91);
        StorageDead(_82);
        _80 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb46, unwind: bb171];
    }

    bb46: {
        StorageDead(_81);
        _92 = discriminant(_80);
        switchInt(move _92) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_96);
        _96 = ((_80 as Continue).0: i128);
        _79 = _96;
        StorageDead(_96);
        _72 = move _79;
        StorageDead(_79);
        StorageDead(_83);
        StorageDead(_80);
        StorageLive(_97);
        StorageLive(_98);
        _98 = _72;
        _97 = core::num::<impl i128>::unsigned_abs(move _98) -> [return: bb50, unwind: bb171];
    }

    bb48: {
        StorageLive(_93);
        _93 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb49, unwind: bb171];
    }

    bb49: {
        StorageDead(_95);
        StorageDead(_93);
        goto -> bb161;
    }

    bb50: {
        StorageDead(_98);
        _73 = move _97;
        StorageDead(_97);
        _76 = const ();
        goto -> bb52;
    }

    bb51: {
        StorageDead(_78);
        _76 = const ();
        goto -> bb52;
    }

    bb52: {
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _51;
        _100 = Eq(move _101, const 0_i128);
        switchInt(move _100) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        StorageDead(_101);
        goto -> bb56;
    }

    bb54: {
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _51;
        _102 = Gt(move _103, const 0_i128);
        switchInt(move _102) -> [0: bb58, otherwise: bb55];
    }

    bb55: {
        StorageDead(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _25;
        _104 = Lt(move _105, const 0_i128);
        switchInt(move _104) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        StorageDead(_105);
        goto -> bb61;
    }

    bb57: {
        StorageDead(_105);
        goto -> bb59;
    }

    bb58: {
        StorageDead(_103);
        goto -> bb59;
    }

    bb59: {
        StorageLive(_106);
        StorageLive(_107);
        _107 = _51;
        _106 = Lt(move _107, const 0_i128);
        switchInt(move _106) -> [0: bb63, otherwise: bb60];
    }

    bb60: {
        StorageDead(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = _25;
        _108 = Gt(move _109, const 0_i128);
        switchInt(move _108) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_109);
        _99 = const true;
        goto -> bb66;
    }

    bb62: {
        StorageDead(_109);
        goto -> bb64;
    }

    bb63: {
        StorageDead(_107);
        goto -> bb64;
    }

    bb64: {
        StorageLive(_110);
        _110 = _73;
        StorageLive(_111);
        StorageLive(_112);
        _112 = _25;
        _111 = core::num::<impl i128>::unsigned_abs(move _112) -> [return: bb65, unwind: bb171];
    }

    bb65: {
        StorageDead(_112);
        _99 = Gt(move _110, move _111);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_100);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _99;
        switchInt(move _114) -> [0: bb73, otherwise: bb67];
    }

    bb67: {
        StorageLive(_115);
        _115 = _2;
        _75 = move _115;
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _265 = (((_70.0: std::ptr::Unique<state::perp_market::PerpMarket>).0: std::ptr::NonNull<state::perp_market::PerpMarket>).0: *const state::perp_market::PerpMarket);
        _120 = &((*_265).1: state::perp_market::AMM);
        _119 = &(*_120);
        StorageLive(_121);
        _121 = _75;
        _118 = calculate_repeg_cost(move _119, move _121) -> [return: bb68, unwind: bb171];
    }

    bb68: {
        StorageDead(_121);
        StorageDead(_119);
        _117 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _118) -> [return: bb69, unwind: bb171];
    }

    bb69: {
        StorageDead(_118);
        _122 = discriminant(_117);
        switchInt(move _122) -> [0: bb70, 1: bb71, otherwise: bb5];
    }

    bb70: {
        StorageLive(_126);
        _126 = ((_117 as Continue).0: i128);
        _116 = _126;
        StorageDead(_126);
        _74 = move _116;
        StorageDead(_116);
        StorageDead(_120);
        StorageDead(_117);
        _113 = const ();
        goto -> bb150;
    }

    bb71: {
        StorageLive(_123);
        _123 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb72, unwind: bb171];
    }

    bb72: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_116);
        StorageDead(_120);
        StorageDead(_117);
        goto -> bb160;
    }

    bb73: {
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &((*_1).1: state::perp_market::AMM);
        _129 = AMM::can_lower_k(move _130) -> [return: bb74, unwind: bb171];
    }

    bb74: {
        StorageDead(_130);
        _128 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _129) -> [return: bb75, unwind: bb171];
    }

    bb75: {
        StorageDead(_129);
        _131 = discriminant(_128);
        switchInt(move _131) -> [0: bb76, 1: bb77, otherwise: bb5];
    }

    bb76: {
        StorageLive(_135);
        _135 = ((_128 as Continue).0: bool);
        _127 = _135;
        StorageDead(_135);
        StorageDead(_128);
        StorageLive(_136);
        StorageLive(_137);
        _137 = _4;
        switchInt(move _137) -> [0: bb113, otherwise: bb79];
    }

    bb77: {
        StorageLive(_132);
        _132 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb78, unwind: bb171];
    }

    bb78: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_128);
        goto -> bb159;
    }

    bb79: {
        StorageLive(_138);
        _138 = _127;
        switchInt(move _138) -> [0: bb113, otherwise: bb80];
    }

    bb80: {
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = ((*_1).1: state::perp_market::AMM);
        _141 = AMM::get_lower_bound_sqrt_k(move _142) -> [return: bb81, unwind: bb171];
    }

    bb81: {
        StorageDead(_142);
        _140 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _141) -> [return: bb82, unwind: bb171];
    }

    bb82: {
        StorageDead(_141);
        _143 = discriminant(_140);
        switchInt(move _143) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_147);
        _147 = ((_140 as Continue).0: u128);
        _139 = _147;
        StorageDead(_147);
        StorageDead(_140);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = (((*_1).1: state::perp_market::AMM).10: u128);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = (((*_1).1: state::perp_market::AMM).10: u128);
        _155 = <u128 as SafeMath>::safe_div(move _156, const 1000_u128) -> [return: bb86, unwind: bb171];
    }

    bb84: {
        StorageLive(_144);
        _144 = ((_140 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_146);
        _146 = _144;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _146) -> [return: bb85, unwind: bb171];
    }

    bb85: {
        StorageDead(_146);
        StorageDead(_144);
        StorageDead(_140);
        goto -> bb157;
    }

    bb86: {
        StorageDead(_156);
        _154 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _155) -> [return: bb87, unwind: bb171];
    }

    bb87: {
        StorageDead(_155);
        _157 = discriminant(_154);
        switchInt(move _157) -> [0: bb88, 1: bb89, otherwise: bb5];
    }

    bb88: {
        StorageLive(_161);
        _161 = ((_154 as Continue).0: u128);
        _153 = _161;
        StorageDead(_161);
        _151 = <u128 as SafeMath>::safe_sub(move _152, move _153) -> [return: bb91, unwind: bb171];
    }

    bb89: {
        StorageLive(_158);
        _158 = ((_154 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_160);
        _160 = _158;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _160) -> [return: bb90, unwind: bb171];
    }

    bb90: {
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_151);
        goto -> bb155;
    }

    bb91: {
        StorageDead(_153);
        StorageDead(_152);
        _150 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _151) -> [return: bb92, unwind: bb171];
    }

    bb92: {
        StorageDead(_151);
        _162 = discriminant(_150);
        switchInt(move _162) -> [0: bb93, 1: bb94, otherwise: bb5];
    }

    bb93: {
        StorageLive(_166);
        _166 = ((_150 as Continue).0: u128);
        _149 = _166;
        StorageDead(_166);
        StorageLive(_167);
        _167 = _139;
        _148 = <u128 as Ord>::max(move _149, move _167) -> [return: bb96, unwind: bb171];
    }

    bb94: {
        StorageLive(_163);
        _163 = ((_150 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_165);
        _165 = _163;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _165) -> [return: bb95, unwind: bb171];
    }

    bb95: {
        StorageDead(_165);
        StorageDead(_163);
        goto -> bb155;
    }

    bb96: {
        StorageDead(_167);
        StorageDead(_149);
        StorageDead(_154);
        StorageDead(_150);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &(*_1);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _148;
        _172 = <U192 as From<u128>>::from(move _173) -> [return: bb97, unwind: bb171];
    }

    bb97: {
        StorageDead(_173);
        _170 = get_update_k_result(move _171, move _172, const true) -> [return: bb98, unwind: bb171];
    }

    bb98: {
        StorageDead(_172);
        StorageDead(_171);
        _169 = <std::result::Result<UpdateKResult, error::ErrorCode> as Try>::branch(move _170) -> [return: bb99, unwind: bb171];
    }

    bb99: {
        StorageDead(_170);
        _174 = discriminant(_169);
        switchInt(move _174) -> [0: bb100, 1: bb101, otherwise: bb5];
    }

    bb100: {
        StorageLive(_178);
        _178 = move ((_169 as Continue).0: math::cp_curve::UpdateKResult);
        _168 = move _178;
        StorageDead(_178);
        StorageDead(_169);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &mut _70;
        _264 = deref_copy (*_183);
        _266 = (((_264.0: std::ptr::Unique<state::perp_market::PerpMarket>).0: std::ptr::NonNull<state::perp_market::PerpMarket>).0: *const state::perp_market::PerpMarket);
        _182 = &mut (*_266);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_168;
        _184 = &(*_185);
        _181 = adjust_k_cost_and_update(move _182, move _184) -> [return: bb103, unwind: bb171];
    }

    bb101: {
        StorageLive(_175);
        _175 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_177);
        _177 = _175;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _177) -> [return: bb102, unwind: bb171];
    }

    bb102: {
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_169);
        goto -> bb154;
    }

    bb103: {
        StorageDead(_184);
        StorageDead(_182);
        _180 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _181) -> [return: bb104, unwind: bb171];
    }

    bb104: {
        StorageDead(_181);
        _186 = discriminant(_180);
        switchInt(move _186) -> [0: bb105, 1: bb106, otherwise: bb5];
    }

    bb105: {
        StorageLive(_190);
        _190 = ((_180 as Continue).0: i128);
        _179 = _190;
        StorageDead(_190);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_180);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _267 = (((_70.0: std::ptr::Unique<state::perp_market::PerpMarket>).0: std::ptr::NonNull<state::perp_market::PerpMarket>).0: *const state::perp_market::PerpMarket);
        _283 = _267 as *const () (PtrToPtr);
        _284 = _283 as usize (Transmute);
        _285 = AlignOf(state::perp_market::PerpMarket);
        _286 = Sub(_285, const 1_usize);
        _287 = BitAnd(_284, _286);
        _288 = Eq(_287, const 0_usize);
        assert(_288, "misaligned pointer dereference: address must be a multiple of {} but is {}", _285, _284) -> [success: bb175, unwind unreachable];
    }

    bb106: {
        StorageLive(_187);
        _187 = ((_180 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_189);
        _189 = _187;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _189) -> [return: bb107, unwind: bb171];
    }

    bb107: {
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_180);
        goto -> bb153;
    }

    bb108: {
        StorageDead(_195);
        StorageDead(_194);
        _192 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _193) -> [return: bb109, unwind: bb171];
    }

    bb109: {
        StorageDead(_193);
        _196 = discriminant(_192);
        switchInt(move _196) -> [0: bb110, 1: bb111, otherwise: bb5];
    }

    bb110: {
        StorageLive(_200);
        _200 = ((_192 as Continue).0: i128);
        _191 = _200;
        StorageDead(_200);
        _51 = move _191;
        StorageDead(_191);
        StorageDead(_192);
        _136 = _179;
        StorageDead(_179);
        StorageDead(_168);
        StorageDead(_148);
        StorageDead(_139);
        goto -> bb114;
    }

    bb111: {
        StorageLive(_197);
        _197 = ((_192 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_199);
        _199 = _197;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _199) -> [return: bb112, unwind: bb171];
    }

    bb112: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_191);
        StorageDead(_192);
        goto -> bb153;
    }

    bb113: {
        _136 = const 0_i128;
        goto -> bb114;
    }

    bb114: {
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = _61;
        StorageLive(_211);
        StorageLive(_212);
        _212 = _136;
        _211 = core::num::<impl i128>::abs(move _212) -> [return: bb115, unwind: bb171];
    }

    bb115: {
        StorageDead(_212);
        _209 = <i128 as SafeMath>::safe_add(move _210, move _211) -> [return: bb116, unwind: bb171];
    }

    bb116: {
        StorageDead(_211);
        StorageDead(_210);
        _208 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _209) -> [return: bb117, unwind: bb171];
    }

    bb117: {
        StorageDead(_209);
        _213 = discriminant(_208);
        switchInt(move _213) -> [0: bb118, 1: bb119, otherwise: bb5];
    }

    bb118: {
        StorageLive(_217);
        _217 = ((_208 as Continue).0: i128);
        _207 = _217;
        StorageDead(_217);
        _206 = <i128 as SafeMath>::safe_mul(move _207, const _) -> [return: bb121, unwind: bb171];
    }

    bb119: {
        StorageLive(_214);
        _214 = ((_208 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_216);
        _216 = _214;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _216) -> [return: bb120, unwind: bb171];
    }

    bb120: {
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb151;
    }

    bb121: {
        StorageDead(_207);
        _205 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _206) -> [return: bb122, unwind: bb171];
    }

    bb122: {
        StorageDead(_206);
        _218 = discriminant(_205);
        switchInt(move _218) -> [0: bb123, 1: bb124, otherwise: bb5];
    }

    bb123: {
        StorageLive(_222);
        _222 = ((_205 as Continue).0: i128);
        _204 = _222;
        StorageDead(_222);
        StorageLive(_223);
        _223 = _51;
        _203 = <i128 as SafeMath>::safe_div(move _204, move _223) -> [return: bb126, unwind: bb171];
    }

    bb124: {
        StorageLive(_219);
        _219 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_221);
        _221 = _219;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _221) -> [return: bb125, unwind: bb171];
    }

    bb125: {
        StorageDead(_221);
        StorageDead(_219);
        goto -> bb151;
    }

    bb126: {
        StorageDead(_223);
        StorageDead(_204);
        _202 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _203) -> [return: bb127, unwind: bb171];
    }

    bb127: {
        StorageDead(_203);
        _224 = discriminant(_202);
        switchInt(move _224) -> [0: bb128, 1: bb129, otherwise: bb5];
    }

    bb128: {
        StorageLive(_228);
        _228 = ((_202 as Continue).0: i128);
        _201 = _228;
        StorageDead(_228);
        _72 = move _201;
        StorageDead(_201);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        StorageLive(_229);
        StorageLive(_230);
        _230 = _72;
        _229 = core::num::<impl i128>::unsigned_abs(move _230) -> [return: bb131, unwind: bb171];
    }

    bb129: {
        StorageLive(_225);
        _225 = ((_202 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_227);
        _227 = _225;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _227) -> [return: bb130, unwind: bb171];
    }

    bb130: {
        StorageDead(_227);
        StorageDead(_225);
        goto -> bb152;
    }

    bb131: {
        StorageDead(_230);
        _73 = move _229;
        StorageDead(_229);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = _72;
        _232 = Gt(move _233, const 0_i128);
        switchInt(move _232) -> [0: bb135, otherwise: bb132];
    }

    bb132: {
        StorageDead(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = (((*_1).1: state::perp_market::AMM).11: u128);
        StorageLive(_236);
        _236 = _73;
        _234 = <u128 as SafeMath>::safe_add(move _235, move _236) -> [return: bb133, unwind: bb171];
    }

    bb133: {
        StorageDead(_236);
        StorageDead(_235);
        _231 = std::result::Result::<u128, error::ErrorCode>::unwrap_or(move _234, const _) -> [return: bb134, unwind: bb171];
    }

    bb134: {
        StorageDead(_234);
        goto -> bb144;
    }

    bb135: {
        StorageDead(_233);
        StorageLive(_237);
        StorageLive(_238);
        _238 = (((*_1).1: state::perp_market::AMM).11: u128);
        StorageLive(_239);
        _239 = _73;
        _237 = Gt(move _238, move _239);
        switchInt(move _237) -> [0: bb142, otherwise: bb136];
    }

    bb136: {
        StorageDead(_239);
        StorageDead(_238);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = (((*_1).1: state::perp_market::AMM).11: u128);
        StorageLive(_243);
        _243 = _73;
        _241 = <u128 as SafeMath>::safe_sub(move _242, move _243) -> [return: bb137, unwind: bb171];
    }

    bb137: {
        StorageDead(_243);
        StorageDead(_242);
        _240 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _241) -> [return: bb138, unwind: bb171];
    }

    bb138: {
        StorageDead(_241);
        _244 = discriminant(_240);
        switchInt(move _244) -> [0: bb139, 1: bb140, otherwise: bb5];
    }

    bb139: {
        StorageLive(_248);
        _248 = ((_240 as Continue).0: u128);
        _231 = _248;
        StorageDead(_248);
        StorageDead(_240);
        goto -> bb143;
    }

    bb140: {
        StorageLive(_245);
        _245 = ((_240 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_247);
        _247 = _245;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _247) -> [return: bb141, unwind: bb171];
    }

    bb141: {
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_240);
        StorageDead(_237);
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb158;
    }

    bb142: {
        StorageDead(_239);
        StorageDead(_238);
        _231 = const 1_u128;
        goto -> bb143;
    }

    bb143: {
        StorageDead(_237);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_232);
        _75 = move _231;
        StorageDead(_231);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _269 = (((_70.0: std::ptr::Unique<state::perp_market::PerpMarket>).0: std::ptr::NonNull<state::perp_market::PerpMarket>).0: *const state::perp_market::PerpMarket);
        _253 = &((*_269).1: state::perp_market::AMM);
        _252 = &(*_253);
        StorageLive(_254);
        _254 = _75;
        _251 = calculate_repeg_cost(move _252, move _254) -> [return: bb145, unwind: bb171];
    }

    bb145: {
        StorageDead(_254);
        StorageDead(_252);
        _250 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _251) -> [return: bb146, unwind: bb171];
    }

    bb146: {
        StorageDead(_251);
        _255 = discriminant(_250);
        switchInt(move _255) -> [0: bb147, 1: bb148, otherwise: bb5];
    }

    bb147: {
        StorageLive(_259);
        _259 = ((_250 as Continue).0: i128);
        _249 = _259;
        StorageDead(_259);
        _74 = move _249;
        StorageDead(_249);
        StorageDead(_253);
        StorageDead(_250);
        _113 = const ();
        StorageDead(_136);
        StorageDead(_127);
        goto -> bb150;
    }

    bb148: {
        StorageLive(_256);
        _256 = ((_250 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_258);
        _258 = _256;
        _0 = <std::result::Result<(Box<PerpMarket>, i128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _258) -> [return: bb149, unwind: bb171];
    }

    bb149: {
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_249);
        StorageDead(_253);
        StorageDead(_250);
        goto -> bb158;
    }

    bb150: {
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_260);
        _260 = _75;
        _270 = (((_70.0: std::ptr::Unique<state::perp_market::PerpMarket>).0: std::ptr::NonNull<state::perp_market::PerpMarket>).0: *const state::perp_market::PerpMarket);
        _271 = _270 as *const () (PtrToPtr);
        _272 = _271 as usize (Transmute);
        _273 = AlignOf(state::perp_market::PerpMarket);
        _274 = Sub(_273, const 1_usize);
        _275 = BitAnd(_272, _274);
        _276 = Eq(_275, const 0_usize);
        assert(_276, "misaligned pointer dereference: address must be a multiple of {} but is {}", _273, _272) -> [success: bb173, unwind unreachable];
    }

    bb151: {
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_201);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        goto -> bb158;
    }

    bb153: {
        StorageDead(_179);
        goto -> bb154;
    }

    bb154: {
        StorageDead(_168);
        goto -> bb156;
    }

    bb155: {
        StorageDead(_149);
        StorageDead(_154);
        StorageDead(_150);
        goto -> bb156;
    }

    bb156: {
        StorageDead(_148);
        goto -> bb157;
    }

    bb157: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb158;
    }

    bb158: {
        StorageDead(_136);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_127);
        goto -> bb160;
    }

    bb160: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_99);
        goto -> bb162;
    }

    bb161: {
        StorageDead(_79);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb162;
    }

    bb162: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        drop(_70) -> [return: bb163, unwind: bb172];
    }

    bb163: {
        StorageDead(_70);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_61);
        goto -> bb165;
    }

    bb165: {
        StorageDead(_51);
        goto -> bb168;
    }

    bb166: {
        StorageDead(_38);
        goto -> bb167;
    }

    bb167: {
        StorageDead(_29);
        StorageDead(_26);
        goto -> bb168;
    }

    bb168: {
        StorageDead(_25);
        goto -> bb169;
    }

    bb169: {
        StorageDead(_5);
        goto -> bb170;
    }

    bb170: {
        return;
    }

    bb171 (cleanup): {
        drop(_70) -> [return: bb172, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        resume;
    }

    bb173: {
        (((*_270).1: state::perp_market::AMM).11: u128) = move _260;
        StorageDead(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = move _70;
        StorageLive(_263);
        _263 = _74;
        _261 = (move _262, move _263);
        StorageDead(_263);
        StorageDead(_262);
        _0 = std::result::Result::<(Box<PerpMarket>, i128), error::ErrorCode>::Ok(move _261);
        StorageDead(_261);
        StorageDead(_99);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_61);
        StorageDead(_51);
        StorageDead(_25);
        StorageDead(_5);
        goto -> bb170;
    }

    bb174: {
        _195 = (((*_268).1: state::perp_market::AMM).12: u128);
        _193 = calculate_per_peg_cost(move _194, move _195) -> [return: bb108, unwind: bb171];
    }

    bb175: {
        _194 = (((*_267).1: state::perp_market::AMM).6: u128);
        StorageLive(_195);
        _268 = (((_70.0: std::ptr::Unique<state::perp_market::PerpMarket>).0: std::ptr::NonNull<state::perp_market::PerpMarket>).0: *const state::perp_market::PerpMarket);
        _277 = _268 as *const () (PtrToPtr);
        _278 = _277 as usize (Transmute);
        _279 = AlignOf(state::perp_market::PerpMarket);
        _280 = Sub(_279, const 1_usize);
        _281 = BitAnd(_278, _280);
        _282 = Eq(_281, const 0_usize);
        assert(_282, "misaligned pointer dereference: address must be a multiple of {} but is {}", _279, _278) -> [success: bb174, unwind unreachable];
    }
}
