// MIR for `admin::handle_update_spot_market_margin_weights` after PreCodegen

fn admin::handle_update_spot_market_margin_weights(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>, _2: u32, _3: u32, _4: u32, _5: u32, _6: u32) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug initial_asset_weight => _2;
    debug maintenance_asset_weight => _3;
    debug initial_liability_weight => _4;
    debug maintenance_liability_weight => _5;
    debug imf_factor => _6;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _9: std::result::Result<(), anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _11: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _16: ();
    let _17: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _18: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _20: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _21: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _22: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _23: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 1];
    let _39: &[&str; 1];
    let _40: [&str; 1];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let mut _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &u16;
    let _47: &u16;
    let _48: &state::spot_market::SpotMarket;
    let mut _49: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _52: std::result::Result<(), error::ErrorCode>;
    let mut _53: u16;
    let mut _54: &state::spot_market::SpotMarket;
    let mut _55: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _56: u32;
    let mut _57: u32;
    let mut _58: u32;
    let mut _59: u32;
    let mut _60: u32;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _66: ();
    let mut _67: &str;
    let _68: &str;
    let mut _69: &std::string::String;
    let _70: &std::string::String;
    let _71: std::string::String;
    let mut _73: std::fmt::Arguments<'_>;
    let mut _74: &[&str];
    let mut _75: &[&str; 2];
    let _76: &[&str; 2];
    let _77: [&str; 2];
    let mut _78: &[core::fmt::rt::Argument<'_>];
    let mut _79: &[core::fmt::rt::Argument<'_>; 2];
    let _80: &[core::fmt::rt::Argument<'_>; 2];
    let _81: [core::fmt::rt::Argument<'_>; 2];
    let mut _82: core::fmt::rt::Argument<'_>;
    let mut _83: &u32;
    let _84: &u32;
    let _85: &state::spot_market::SpotMarket;
    let mut _86: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _87: core::fmt::rt::Argument<'_>;
    let mut _88: &u32;
    let _89: &u32;
    let _90: ();
    let mut _91: &str;
    let _92: &str;
    let mut _93: &std::string::String;
    let _94: &std::string::String;
    let _95: std::string::String;
    let mut _97: std::fmt::Arguments<'_>;
    let mut _98: &[&str];
    let mut _99: &[&str; 2];
    let _100: &[&str; 2];
    let _101: [&str; 2];
    let mut _102: &[core::fmt::rt::Argument<'_>];
    let mut _103: &[core::fmt::rt::Argument<'_>; 2];
    let _104: &[core::fmt::rt::Argument<'_>; 2];
    let _105: [core::fmt::rt::Argument<'_>; 2];
    let mut _106: core::fmt::rt::Argument<'_>;
    let mut _107: &u32;
    let _108: &u32;
    let _109: &state::spot_market::SpotMarket;
    let mut _110: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &u32;
    let _113: &u32;
    let _114: ();
    let mut _115: &str;
    let _116: &str;
    let mut _117: &std::string::String;
    let _118: &std::string::String;
    let _119: std::string::String;
    let mut _121: std::fmt::Arguments<'_>;
    let mut _122: &[&str];
    let mut _123: &[&str; 2];
    let _124: &[&str; 2];
    let _125: [&str; 2];
    let mut _126: &[core::fmt::rt::Argument<'_>];
    let mut _127: &[core::fmt::rt::Argument<'_>; 2];
    let _128: &[core::fmt::rt::Argument<'_>; 2];
    let _129: [core::fmt::rt::Argument<'_>; 2];
    let mut _130: core::fmt::rt::Argument<'_>;
    let mut _131: &u32;
    let _132: &u32;
    let _133: &state::spot_market::SpotMarket;
    let mut _134: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _135: core::fmt::rt::Argument<'_>;
    let mut _136: &u32;
    let _137: &u32;
    let _138: ();
    let mut _139: &str;
    let _140: &str;
    let mut _141: &std::string::String;
    let _142: &std::string::String;
    let _143: std::string::String;
    let mut _145: std::fmt::Arguments<'_>;
    let mut _146: &[&str];
    let mut _147: &[&str; 2];
    let _148: &[&str; 2];
    let _149: [&str; 2];
    let mut _150: &[core::fmt::rt::Argument<'_>];
    let mut _151: &[core::fmt::rt::Argument<'_>; 2];
    let _152: &[core::fmt::rt::Argument<'_>; 2];
    let _153: [core::fmt::rt::Argument<'_>; 2];
    let mut _154: core::fmt::rt::Argument<'_>;
    let mut _155: &u32;
    let _156: &u32;
    let _157: &state::spot_market::SpotMarket;
    let mut _158: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _159: core::fmt::rt::Argument<'_>;
    let mut _160: &u32;
    let _161: &u32;
    let _162: ();
    let mut _163: &str;
    let _164: &str;
    let mut _165: &std::string::String;
    let _166: &std::string::String;
    let _167: std::string::String;
    let mut _169: std::fmt::Arguments<'_>;
    let mut _170: &[&str];
    let mut _171: &[&str; 2];
    let _172: &[&str; 2];
    let _173: [&str; 2];
    let mut _174: &[core::fmt::rt::Argument<'_>];
    let mut _175: &[core::fmt::rt::Argument<'_>; 2];
    let _176: &[core::fmt::rt::Argument<'_>; 2];
    let _177: [core::fmt::rt::Argument<'_>; 2];
    let mut _178: core::fmt::rt::Argument<'_>;
    let mut _179: &u32;
    let _180: &u32;
    let _181: &state::spot_market::SpotMarket;
    let mut _182: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _183: core::fmt::rt::Argument<'_>;
    let mut _184: &u32;
    let _185: &u32;
    let mut _186: u32;
    let mut _187: &mut state::spot_market::SpotMarket;
    let mut _188: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _189: u32;
    let mut _190: &mut state::spot_market::SpotMarket;
    let mut _191: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _192: u32;
    let mut _193: &mut state::spot_market::SpotMarket;
    let mut _194: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _195: u32;
    let mut _196: &mut state::spot_market::SpotMarket;
    let mut _197: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _198: u32;
    let mut _199: &mut state::spot_market::SpotMarket;
    let mut _200: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _201: ();
    let mut _208: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _209: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug spot_market => _17;
        let _35: std::string::String;
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: ();
        let _72: std::string::String;
        let _96: std::string::String;
        let _120: std::string::String;
        let _144: std::string::String;
        let _168: std::string::String;
        let mut _202: &[&str; 2];
        let mut _203: &[&str; 2];
        let mut _204: &[&str; 2];
        let mut _205: &[&str; 2];
        let mut _206: &[&str; 2];
        let mut _207: &[&str; 1];
        scope 10 {
            debug res => _35;
        }
        scope 11 {
            debug residual => _62;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _65;
            scope 14 {
            }
        }
        scope 15 {
            debug res => _72;
        }
        scope 16 {
            debug res => _96;
        }
        scope 17 {
            debug res => _120;
        }
        scope 18 {
            debug res => _144;
        }
        scope 19 {
            debug res => _168;
        }
    }
    scope 6 {
        debug residual => _25;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _28;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _208 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _11 = &((*_208).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _10 = &(*_11);
        _9 = constraints::spot_market_valid(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        _8 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _9) -> [return: bb2, unwind: bb81];
    }

    bb2: {
        StorageDead(_9);
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_8 as Continue).0: ());
        _7 = _16;
        StorageDead(_16);
        _210 = discriminant(_8);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _209 = deref_copy (_1.1: &mut instructions::admin::AdminUpdateSpotMarket<'_>);
        _22 = &((*_209).2: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _21 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _22) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = move ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_15);
        _15 = move _13;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _15) -> [return: bb6, unwind: bb83];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        _216 = discriminant(_8);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb73;
    }

    bb7: {
        StorageDead(_22);
        StorageLive(_23);
        _23 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _20 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _21, move _23) -> [return: bb8, unwind: bb81];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_21);
        _19 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _20) -> [return: bb9, unwind: bb81];
    }

    bb9: {
        StorageDead(_20);
        _24 = discriminant(_19);
        switchInt(move _24) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_28);
        _28 = move ((_19 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _18 = move _28;
        StorageDead(_28);
        _17 = &mut _18;
        _214 = discriminant(_19);
        StorageDead(_19);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _207 = const _;
        _39 = &(*_207);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_17);
        _48 = <RefMut<'_, SpotMarket> as Deref>::deref(move _49) -> [return: bb13, unwind: bb80];
    }

    bb11: {
        StorageLive(_25);
        _25 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb12, unwind: bb82];
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_25);
        _212 = discriminant(_19);
        StorageDead(_19);
        goto -> bb72;
    }

    bb13: {
        StorageDead(_49);
        _47 = &((*_48).42: u16);
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _46) -> [return: bb14, unwind: bb80];
    }

    bb14: {
        StorageDead(_46);
        _44 = [move _45];
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = move _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_42);
        _36 = Arguments::<'_>::new_v1(move _37, move _41) -> [return: bb15, unwind: bb80];
    }

    bb15: {
        StorageDead(_41);
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb16, unwind: bb80];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb17, unwind: bb79];
    }

    bb17: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb18, unwind: bb79];
    }

    bb18: {
        StorageDead(_30);
        drop(_34) -> [return: bb19, unwind: bb80];
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_17);
        _54 = <RefMut<'_, SpotMarket> as Deref>::deref(move _55) -> [return: bb20, unwind: bb80];
    }

    bb20: {
        StorageDead(_55);
        _53 = ((*_54).42: u16);
        StorageLive(_56);
        _56 = _2;
        StorageLive(_57);
        _57 = _3;
        StorageLive(_58);
        _58 = _4;
        StorageLive(_59);
        _59 = _5;
        StorageLive(_60);
        _60 = _6;
        _52 = validate_margin_weights(move _53, move _56, move _57, move _58, move _59, move _60) -> [return: bb21, unwind: bb80];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_53);
        _51 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _52) -> [return: bb22, unwind: bb80];
    }

    bb22: {
        StorageDead(_52);
        _61 = discriminant(_51);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb4];
    }

    bb23: {
        StorageLive(_65);
        _65 = ((_51 as Continue).0: ());
        _50 = _65;
        StorageDead(_65);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _206 = const _;
        _76 = &(*_206);
        _75 = &(*_76);
        _74 = move _75 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &(*_17);
        _85 = <RefMut<'_, SpotMarket> as Deref>::deref(move _86) -> [return: bb26, unwind: bb80];
    }

    bb24: {
        StorageLive(_62);
        _62 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb25, unwind: bb80];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        drop(_18) -> [return: bb72, unwind: bb81];
    }

    bb26: {
        StorageDead(_86);
        _84 = &((*_85).31: u32);
        _83 = &(*_84);
        _82 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _83) -> [return: bb27, unwind: bb80];
    }

    bb27: {
        StorageDead(_83);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_2;
        _88 = &(*_89);
        _87 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _88) -> [return: bb28, unwind: bb80];
    }

    bb28: {
        StorageDead(_88);
        _81 = [move _82, move _87];
        StorageDead(_87);
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = move _79 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_79);
        _73 = Arguments::<'_>::new_v1(move _74, move _78) -> [return: bb29, unwind: bb80];
    }

    bb29: {
        StorageDead(_78);
        StorageDead(_74);
        _72 = format(move _73) -> [return: bb30, unwind: bb80];
    }

    bb30: {
        StorageDead(_73);
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_76);
        _71 = move _72;
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = <String as Deref>::deref(move _69) -> [return: bb31, unwind: bb78];
    }

    bb31: {
        _67 = &(*_68);
        StorageDead(_69);
        _66 = solana_program::log::sol_log(move _67) -> [return: bb32, unwind: bb78];
    }

    bb32: {
        StorageDead(_67);
        drop(_71) -> [return: bb33, unwind: bb80];
    }

    bb33: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _205 = const _;
        _100 = &(*_205);
        _99 = &(*_100);
        _98 = move _99 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &(*_17);
        _109 = <RefMut<'_, SpotMarket> as Deref>::deref(move _110) -> [return: bb34, unwind: bb80];
    }

    bb34: {
        StorageDead(_110);
        _108 = &((*_109).32: u32);
        _107 = &(*_108);
        _106 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _107) -> [return: bb35, unwind: bb80];
    }

    bb35: {
        StorageDead(_107);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_3;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _112) -> [return: bb36, unwind: bb80];
    }

    bb36: {
        StorageDead(_112);
        _105 = [move _106, move _111];
        StorageDead(_111);
        StorageDead(_106);
        _104 = &_105;
        _103 = &(*_104);
        _102 = move _103 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_103);
        _97 = Arguments::<'_>::new_v1(move _98, move _102) -> [return: bb37, unwind: bb80];
    }

    bb37: {
        StorageDead(_102);
        StorageDead(_98);
        _96 = format(move _97) -> [return: bb38, unwind: bb80];
    }

    bb38: {
        StorageDead(_97);
        StorageDead(_113);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        _95 = move _96;
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = <String as Deref>::deref(move _93) -> [return: bb39, unwind: bb77];
    }

    bb39: {
        _91 = &(*_92);
        StorageDead(_93);
        _90 = solana_program::log::sol_log(move _91) -> [return: bb40, unwind: bb77];
    }

    bb40: {
        StorageDead(_91);
        drop(_95) -> [return: bb41, unwind: bb80];
    }

    bb41: {
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _204 = const _;
        _124 = &(*_204);
        _123 = &(*_124);
        _122 = move _123 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_123);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &(*_17);
        _133 = <RefMut<'_, SpotMarket> as Deref>::deref(move _134) -> [return: bb42, unwind: bb80];
    }

    bb42: {
        StorageDead(_134);
        _132 = &((*_133).33: u32);
        _131 = &(*_132);
        _130 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _131) -> [return: bb43, unwind: bb80];
    }

    bb43: {
        StorageDead(_131);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &_4;
        _136 = &(*_137);
        _135 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _136) -> [return: bb44, unwind: bb80];
    }

    bb44: {
        StorageDead(_136);
        _129 = [move _130, move _135];
        StorageDead(_135);
        StorageDead(_130);
        _128 = &_129;
        _127 = &(*_128);
        _126 = move _127 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_127);
        _121 = Arguments::<'_>::new_v1(move _122, move _126) -> [return: bb45, unwind: bb80];
    }

    bb45: {
        StorageDead(_126);
        StorageDead(_122);
        _120 = format(move _121) -> [return: bb46, unwind: bb80];
    }

    bb46: {
        StorageDead(_121);
        StorageDead(_137);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_124);
        _119 = move _120;
        StorageDead(_120);
        _118 = &_119;
        _117 = &(*_118);
        _116 = <String as Deref>::deref(move _117) -> [return: bb47, unwind: bb76];
    }

    bb47: {
        _115 = &(*_116);
        StorageDead(_117);
        _114 = solana_program::log::sol_log(move _115) -> [return: bb48, unwind: bb76];
    }

    bb48: {
        StorageDead(_115);
        drop(_119) -> [return: bb49, unwind: bb80];
    }

    bb49: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_114);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _203 = const _;
        _148 = &(*_203);
        _147 = &(*_148);
        _146 = move _147 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_147);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &(*_17);
        _157 = <RefMut<'_, SpotMarket> as Deref>::deref(move _158) -> [return: bb50, unwind: bb80];
    }

    bb50: {
        StorageDead(_158);
        _156 = &((*_157).34: u32);
        _155 = &(*_156);
        _154 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _155) -> [return: bb51, unwind: bb80];
    }

    bb51: {
        StorageDead(_155);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_5;
        _160 = &(*_161);
        _159 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _160) -> [return: bb52, unwind: bb80];
    }

    bb52: {
        StorageDead(_160);
        _153 = [move _154, move _159];
        StorageDead(_159);
        StorageDead(_154);
        _152 = &_153;
        _151 = &(*_152);
        _150 = move _151 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_151);
        _145 = Arguments::<'_>::new_v1(move _146, move _150) -> [return: bb53, unwind: bb80];
    }

    bb53: {
        StorageDead(_150);
        StorageDead(_146);
        _144 = format(move _145) -> [return: bb54, unwind: bb80];
    }

    bb54: {
        StorageDead(_145);
        StorageDead(_161);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_148);
        _143 = move _144;
        StorageDead(_144);
        _142 = &_143;
        _141 = &(*_142);
        _140 = <String as Deref>::deref(move _141) -> [return: bb55, unwind: bb75];
    }

    bb55: {
        _139 = &(*_140);
        StorageDead(_141);
        _138 = solana_program::log::sol_log(move _139) -> [return: bb56, unwind: bb75];
    }

    bb56: {
        StorageDead(_139);
        drop(_143) -> [return: bb57, unwind: bb80];
    }

    bb57: {
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _202 = const _;
        _172 = &(*_202);
        _171 = &(*_172);
        _170 = move _171 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_171);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &(*_17);
        _181 = <RefMut<'_, SpotMarket> as Deref>::deref(move _182) -> [return: bb58, unwind: bb80];
    }

    bb58: {
        StorageDead(_182);
        _180 = &((*_181).35: u32);
        _179 = &(*_180);
        _178 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _179) -> [return: bb59, unwind: bb80];
    }

    bb59: {
        StorageDead(_179);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_6;
        _184 = &(*_185);
        _183 = core::fmt::rt::Argument::<'_>::new_debug::<u32>(move _184) -> [return: bb60, unwind: bb80];
    }

    bb60: {
        StorageDead(_184);
        _177 = [move _178, move _183];
        StorageDead(_183);
        StorageDead(_178);
        _176 = &_177;
        _175 = &(*_176);
        _174 = move _175 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_175);
        _169 = Arguments::<'_>::new_v1(move _170, move _174) -> [return: bb61, unwind: bb80];
    }

    bb61: {
        StorageDead(_174);
        StorageDead(_170);
        _168 = format(move _169) -> [return: bb62, unwind: bb80];
    }

    bb62: {
        StorageDead(_169);
        StorageDead(_185);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_172);
        _167 = move _168;
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = <String as Deref>::deref(move _165) -> [return: bb63, unwind: bb74];
    }

    bb63: {
        _163 = &(*_164);
        StorageDead(_165);
        _162 = solana_program::log::sol_log(move _163) -> [return: bb64, unwind: bb74];
    }

    bb64: {
        StorageDead(_163);
        drop(_167) -> [return: bb65, unwind: bb80];
    }

    bb65: {
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageLive(_186);
        _186 = _2;
        StorageLive(_187);
        StorageLive(_188);
        _188 = &mut (*_17);
        _187 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _188) -> [return: bb66, unwind: bb80];
    }

    bb66: {
        StorageDead(_188);
        ((*_187).31: u32) = move _186;
        StorageDead(_186);
        StorageDead(_187);
        StorageLive(_189);
        _189 = _3;
        StorageLive(_190);
        StorageLive(_191);
        _191 = &mut (*_17);
        _190 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _191) -> [return: bb67, unwind: bb80];
    }

    bb67: {
        StorageDead(_191);
        ((*_190).32: u32) = move _189;
        StorageDead(_189);
        StorageDead(_190);
        StorageLive(_192);
        _192 = _4;
        StorageLive(_193);
        StorageLive(_194);
        _194 = &mut (*_17);
        _193 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _194) -> [return: bb68, unwind: bb80];
    }

    bb68: {
        StorageDead(_194);
        ((*_193).33: u32) = move _192;
        StorageDead(_192);
        StorageDead(_193);
        StorageLive(_195);
        _195 = _5;
        StorageLive(_196);
        StorageLive(_197);
        _197 = &mut (*_17);
        _196 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _197) -> [return: bb69, unwind: bb80];
    }

    bb69: {
        StorageDead(_197);
        ((*_196).34: u32) = move _195;
        StorageDead(_195);
        StorageDead(_196);
        StorageLive(_198);
        _198 = _6;
        StorageLive(_199);
        StorageLive(_200);
        _200 = &mut (*_17);
        _199 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _200) -> [return: bb70, unwind: bb80];
    }

    bb70: {
        StorageDead(_200);
        ((*_199).35: u32) = move _198;
        StorageDead(_198);
        StorageDead(_199);
        StorageLive(_201);
        _201 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _201);
        StorageDead(_201);
        drop(_18) -> [return: bb71, unwind: bb81];
    }

    bb71: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb73;
    }

    bb72: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb73;
    }

    bb73: {
        return;
    }

    bb74 (cleanup): {
        drop(_167) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_143) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_119) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_95) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_71) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_34) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_18) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        resume;
    }

    bb82 (cleanup): {
        _218 = discriminant(_19);
        goto -> bb81;
    }

    bb83 (cleanup): {
        _219 = discriminant(_8);
        goto -> bb81;
    }
}
