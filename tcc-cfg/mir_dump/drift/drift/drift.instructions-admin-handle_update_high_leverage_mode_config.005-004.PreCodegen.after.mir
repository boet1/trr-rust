// MIR for `admin::handle_update_high_leverage_mode_config` after PreCodegen

fn admin::handle_update_high_leverage_mode_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::UpdateHighLeverageModeConfig<'_>>, _2: u32, _3: bool, _4: Option<u32>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug max_users => _2;
    debug reduce_only => _3;
    debug current_users => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, error::ErrorCode>;
    let mut _8: std::result::Result<std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _10: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _16: u32;
    let mut _17: &mut state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _18: &mut std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _19: bool;
    let mut _20: &mut state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _21: &mut std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let _22: ();
    let mut _23: isize;
    let mut _25: u32;
    let mut _26: &mut state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _27: &mut std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let _28: ();
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _30: std::result::Result<(), error::ErrorCode>;
    let mut _31: &state::high_leverage_mode_config::HighLeverageModeConfig;
    let _32: &state::high_leverage_mode_config::HighLeverageModeConfig;
    let mut _33: &std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: ();
    let mut _40: &mut instructions::admin::UpdateHighLeverageModeConfig<'_>;
    let mut _41: isize;
    let mut _42: isize;
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    scope 1 {
        debug config => _5;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: ();
        scope 6 {
            debug current_users => _24;
            let _24: u32;
        }
        scope 7 {
            debug residual => _35;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _38;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _40 = deref_copy (_1.1: &mut instructions::admin::UpdateHighLeverageModeConfig<'_>);
        _9 = &((*_40).1: anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _8 = anchor_lang::prelude::AccountLoader::<'_, HighLeverageModeConfig>::load_mut(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _7 = std::result::Result::<RefMut<'_, HighLeverageModeConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _8, move _10) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        _6 = <std::result::Result<RefMut<'_, HighLeverageModeConfig>, error::ErrorCode> as Try>::branch(move _7) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = move ((_6 as Continue).0: std::cell::RefMut<'_, state::high_leverage_mode_config::HighLeverageModeConfig>);
        _5 = move _15;
        StorageDead(_15);
        _43 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_16);
        _16 = _2;
        StorageLive(_17);
        StorageLive(_18);
        _18 = &mut _5;
        _17 = <RefMut<'_, HighLeverageModeConfig> as DerefMut>::deref_mut(move _18) -> [return: bb8, unwind: bb23];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _41 = discriminant(_6);
        StorageDead(_6);
        goto -> bb21;
    }

    bb8: {
        StorageDead(_18);
        ((*_17).0: u32) = move _16;
        StorageDead(_16);
        StorageDead(_17);
        StorageLive(_19);
        _19 = _3;
        StorageLive(_20);
        StorageLive(_21);
        _21 = &mut _5;
        _20 = <RefMut<'_, HighLeverageModeConfig> as DerefMut>::deref_mut(move _21) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        StorageDead(_21);
        ((*_20).2: u8) = move _19 as u8 (IntToInt);
        StorageDead(_19);
        StorageDead(_20);
        StorageLive(_22);
        _23 = discriminant(_4);
        switchInt(move _23) -> [1: bb10, otherwise: bb12];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_4 as Some).0: u32);
        StorageLive(_25);
        _25 = _24;
        StorageLive(_26);
        StorageLive(_27);
        _27 = &mut _5;
        _26 = <RefMut<'_, HighLeverageModeConfig> as DerefMut>::deref_mut(move _27) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        StorageDead(_27);
        ((*_26).1: u32) = move _25;
        StorageDead(_25);
        StorageDead(_26);
        _22 = const ();
        StorageDead(_24);
        goto -> bb13;
    }

    bb12: {
        _22 = const ();
        goto -> bb13;
    }

    bb13: {
        StorageDead(_22);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_5;
        _32 = <RefMut<'_, HighLeverageModeConfig> as Deref>::deref(move _33) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        _31 = &(*_32);
        StorageDead(_33);
        _30 = HighLeverageModeConfig::validate(move _31) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        StorageDead(_31);
        _29 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _30) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        StorageDead(_30);
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_38);
        _38 = ((_29 as Continue).0: ());
        _28 = _38;
        StorageDead(_38);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_39);
        _39 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _39);
        StorageDead(_39);
        drop(_5) -> [return: bb20, unwind: bb24];
    }

    bb18: {
        StorageLive(_35);
        _35 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        drop(_5) -> [return: bb21, unwind: bb24];
    }

    bb20: {
        StorageDead(_5);
        goto -> bb22;
    }

    bb21: {
        StorageDead(_5);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_5) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25 (cleanup): {
        _45 = discriminant(_6);
        goto -> bb24;
    }
}
