// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:114:1: 114:49>::new` before PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:114:1: 114:49>::new(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, _2: &state::state::State, _3: &SpotMarket, _4: &SpotMarket, _5: i64) -> std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> {
    debug account_info_iter => _1;
    debug state => _2;
    debug base_market => _3;
    debug quote_market => _4;
    debug now => _5;
    let mut _0: std::result::Result<state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode>;
    let _6: std::vec::Vec<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _7: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _9: std::iter::Map<std::iter::Filter<std::iter::Skip<std::slice::Iter<'_, &anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:127:21: 127:26}>, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:132:18: 132:23}>;
    let mut _10: std::iter::Filter<std::iter::Skip<std::slice::Iter<'_, &anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:127:21: 127:26}>;
    let mut _11: std::iter::Skip<std::slice::Iter<'_, &anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _12: std::slice::Iter<'_, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _13: &[&anchor_lang::prelude::AccountInfo<'_>];
    let _14: &[&anchor_lang::prelude::AccountInfo<'_>];
    let mut _15: &std::vec::Vec<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _16: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:127:21: 127:26};
    let mut _17: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:132:18: 132:23};
    let _18: ();
    let mut _19: &mut std::vec::Vec<anchor_lang::prelude::UncheckedAccount<'_>>;
    let _23: &[&anchor_lang::prelude::AccountInfo<'_>];
    let mut _24: &std::vec::Vec<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _25: std::ops::Range<usize>;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: (usize, bool);
    let mut _30: &[&anchor_lang::prelude::AccountInfo<'_>];
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>>;
    let mut _47: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>, error::ErrorCode>;
    let mut _48: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _49: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _50: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:139:77: 139:80};
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>>;
    let mut _58: std::result::Result<std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>, error::ErrorCode>;
    let mut _59: std::result::Result<std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _60: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _61: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _67: ();
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _69: std::result::Result<(), error::ErrorCode>;
    let mut _70: bool;
    let mut _71: &state::spot_market::SpotFulfillmentConfigStatus;
    let _72: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _73: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _74: &state::spot_market::SpotFulfillmentConfigStatus;
    let _75: state::spot_market::SpotFulfillmentConfigStatus;
    let mut _76: ();
    let _78: ();
    let mut _79: &str;
    let _80: &str;
    let mut _81: &std::string::String;
    let _82: &std::string::String;
    let _83: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[&str; 2];
    let _88: &[&str; 2];
    let _89: [&str; 2];
    let mut _90: &[core::fmt::rt::Argument<'_>];
    let mut _91: &[core::fmt::rt::Argument<'_>; 1];
    let _92: &[core::fmt::rt::Argument<'_>; 1];
    let _93: [core::fmt::rt::Argument<'_>; 1];
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &error::ErrorCode;
    let _96: &error::ErrorCode;
    let mut _97: error::ErrorCode;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _103: ();
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _105: std::result::Result<(), error::ErrorCode>;
    let mut _106: bool;
    let mut _107: &&anchor_lang::prelude::Pubkey;
    let _108: &anchor_lang::prelude::Pubkey;
    let mut _109: &&anchor_lang::prelude::Pubkey;
    let mut _110: ();
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: &std::string::String;
    let _116: &std::string::String;
    let _117: std::string::String;
    let mut _119: std::fmt::Arguments<'_>;
    let mut _120: &[&str];
    let mut _121: &[&str; 2];
    let _122: &[&str; 2];
    let _123: [&str; 2];
    let mut _124: &[core::fmt::rt::Argument<'_>];
    let mut _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: &[core::fmt::rt::Argument<'_>; 1];
    let _127: [core::fmt::rt::Argument<'_>; 1];
    let mut _128: core::fmt::rt::Argument<'_>;
    let mut _129: &error::ErrorCode;
    let _130: &error::ErrorCode;
    let mut _131: error::ErrorCode;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _137: ();
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _139: std::result::Result<(), error::ErrorCode>;
    let mut _140: bool;
    let mut _141: u16;
    let mut _142: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _143: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _144: u16;
    let mut _145: ();
    let _147: ();
    let mut _148: &str;
    let _149: &str;
    let mut _150: &std::string::String;
    let _151: &std::string::String;
    let _152: std::string::String;
    let mut _154: std::fmt::Arguments<'_>;
    let mut _155: &[&str];
    let mut _156: &[&str; 2];
    let _157: &[&str; 2];
    let _158: [&str; 2];
    let mut _159: &[core::fmt::rt::Argument<'_>];
    let mut _160: &[core::fmt::rt::Argument<'_>; 1];
    let _161: &[core::fmt::rt::Argument<'_>; 1];
    let _162: [core::fmt::rt::Argument<'_>; 1];
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &error::ErrorCode;
    let _165: &error::ErrorCode;
    let _166: ();
    let mut _167: &str;
    let _168: &str;
    let mut _169: &std::string::String;
    let _170: &std::string::String;
    let _171: std::string::String;
    let mut _173: std::fmt::Arguments<'_>;
    let mut _174: &[&str];
    let mut _175: &[&str; 2];
    let _176: &[&str; 2];
    let _177: [&str; 2];
    let mut _178: &[core::fmt::rt::Argument<'_>];
    let mut _179: &[core::fmt::rt::Argument<'_>; 2];
    let _180: &[core::fmt::rt::Argument<'_>; 2];
    let _181: [core::fmt::rt::Argument<'_>; 2];
    let mut _182: core::fmt::rt::Argument<'_>;
    let mut _183: &u16;
    let _184: &u16;
    let _185: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _186: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _187: core::fmt::rt::Argument<'_>;
    let mut _188: &u16;
    let _189: &u16;
    let mut _190: error::ErrorCode;
    let mut _191: isize;
    let mut _193: !;
    let mut _194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _196: ();
    let mut _197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _198: std::result::Result<(), error::ErrorCode>;
    let mut _199: bool;
    let mut _200: &&anchor_lang::prelude::Pubkey;
    let _201: &anchor_lang::prelude::Pubkey;
    let mut _202: &&anchor_lang::prelude::Pubkey;
    let mut _203: ();
    let _205: ();
    let mut _206: &str;
    let _207: &str;
    let mut _208: &std::string::String;
    let _209: &std::string::String;
    let _210: std::string::String;
    let mut _212: std::fmt::Arguments<'_>;
    let mut _213: &[&str];
    let mut _214: &[&str; 2];
    let _215: &[&str; 2];
    let _216: [&str; 2];
    let mut _217: &[core::fmt::rt::Argument<'_>];
    let mut _218: &[core::fmt::rt::Argument<'_>; 1];
    let _219: &[core::fmt::rt::Argument<'_>; 1];
    let _220: [core::fmt::rt::Argument<'_>; 1];
    let mut _221: core::fmt::rt::Argument<'_>;
    let mut _222: &error::ErrorCode;
    let _223: &error::ErrorCode;
    let mut _224: error::ErrorCode;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _230: ();
    let mut _231: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _232: std::result::Result<(), error::ErrorCode>;
    let mut _233: bool;
    let mut _234: &&anchor_lang::prelude::Pubkey;
    let _235: &anchor_lang::prelude::Pubkey;
    let mut _236: &&anchor_lang::prelude::Pubkey;
    let mut _237: ();
    let _239: ();
    let mut _240: &str;
    let _241: &str;
    let mut _242: &std::string::String;
    let _243: &std::string::String;
    let _244: std::string::String;
    let mut _246: std::fmt::Arguments<'_>;
    let mut _247: &[&str];
    let mut _248: &[&str; 2];
    let _249: &[&str; 2];
    let _250: [&str; 2];
    let mut _251: &[core::fmt::rt::Argument<'_>];
    let mut _252: &[core::fmt::rt::Argument<'_>; 1];
    let _253: &[core::fmt::rt::Argument<'_>; 1];
    let _254: [core::fmt::rt::Argument<'_>; 1];
    let mut _255: core::fmt::rt::Argument<'_>;
    let mut _256: &error::ErrorCode;
    let _257: &error::ErrorCode;
    let mut _258: error::ErrorCode;
    let mut _259: isize;
    let mut _261: !;
    let mut _262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _264: ();
    let mut _265: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _266: std::result::Result<(), error::ErrorCode>;
    let mut _267: bool;
    let mut _268: &&anchor_lang::prelude::Pubkey;
    let _269: &anchor_lang::prelude::Pubkey;
    let _270: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _271: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _272: &&anchor_lang::prelude::Pubkey;
    let mut _273: ();
    let _275: ();
    let mut _276: &str;
    let _277: &str;
    let mut _278: &std::string::String;
    let _279: &std::string::String;
    let _280: std::string::String;
    let mut _282: std::fmt::Arguments<'_>;
    let mut _283: &[&str];
    let mut _284: &[&str; 2];
    let _285: &[&str; 2];
    let _286: [&str; 2];
    let mut _287: &[core::fmt::rt::Argument<'_>];
    let mut _288: &[core::fmt::rt::Argument<'_>; 1];
    let _289: &[core::fmt::rt::Argument<'_>; 1];
    let _290: [core::fmt::rt::Argument<'_>; 1];
    let mut _291: core::fmt::rt::Argument<'_>;
    let mut _292: &error::ErrorCode;
    let _293: &error::ErrorCode;
    let mut _294: error::ErrorCode;
    let mut _295: isize;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _300: ();
    let mut _301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _302: std::result::Result<(), error::ErrorCode>;
    let mut _303: bool;
    let mut _304: &&anchor_lang::prelude::Pubkey;
    let _305: &anchor_lang::prelude::Pubkey;
    let _306: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _307: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _308: &&anchor_lang::prelude::Pubkey;
    let mut _309: ();
    let _311: ();
    let mut _312: &str;
    let _313: &str;
    let mut _314: &std::string::String;
    let _315: &std::string::String;
    let _316: std::string::String;
    let mut _318: std::fmt::Arguments<'_>;
    let mut _319: &[&str];
    let mut _320: &[&str; 2];
    let _321: &[&str; 2];
    let _322: [&str; 2];
    let mut _323: &[core::fmt::rt::Argument<'_>];
    let mut _324: &[core::fmt::rt::Argument<'_>; 1];
    let _325: &[core::fmt::rt::Argument<'_>; 1];
    let _326: [core::fmt::rt::Argument<'_>; 1];
    let mut _327: core::fmt::rt::Argument<'_>;
    let mut _328: &error::ErrorCode;
    let _329: &error::ErrorCode;
    let mut _330: error::ErrorCode;
    let mut _331: isize;
    let mut _333: !;
    let mut _334: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _336: ();
    let mut _337: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _338: std::result::Result<(), error::ErrorCode>;
    let mut _339: bool;
    let mut _340: &&anchor_lang::prelude::Pubkey;
    let _341: &anchor_lang::prelude::Pubkey;
    let _342: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _343: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _344: &&anchor_lang::prelude::Pubkey;
    let mut _345: ();
    let _347: ();
    let mut _348: &str;
    let _349: &str;
    let mut _350: &std::string::String;
    let _351: &std::string::String;
    let _352: std::string::String;
    let mut _354: std::fmt::Arguments<'_>;
    let mut _355: &[&str];
    let mut _356: &[&str; 2];
    let _357: &[&str; 2];
    let _358: [&str; 2];
    let mut _359: &[core::fmt::rt::Argument<'_>];
    let mut _360: &[core::fmt::rt::Argument<'_>; 1];
    let _361: &[core::fmt::rt::Argument<'_>; 1];
    let _362: [core::fmt::rt::Argument<'_>; 1];
    let mut _363: core::fmt::rt::Argument<'_>;
    let mut _364: &error::ErrorCode;
    let _365: &error::ErrorCode;
    let _366: ();
    let mut _367: &str;
    let _368: &str;
    let mut _369: error::ErrorCode;
    let mut _370: isize;
    let mut _372: !;
    let mut _373: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _375: ();
    let mut _376: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _377: std::result::Result<(), error::ErrorCode>;
    let mut _378: bool;
    let mut _379: &&anchor_lang::prelude::Pubkey;
    let _380: &anchor_lang::prelude::Pubkey;
    let _381: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _382: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _383: &&anchor_lang::prelude::Pubkey;
    let mut _384: ();
    let _386: ();
    let mut _387: &str;
    let _388: &str;
    let mut _389: &std::string::String;
    let _390: &std::string::String;
    let _391: std::string::String;
    let mut _393: std::fmt::Arguments<'_>;
    let mut _394: &[&str];
    let mut _395: &[&str; 2];
    let _396: &[&str; 2];
    let _397: [&str; 2];
    let mut _398: &[core::fmt::rt::Argument<'_>];
    let mut _399: &[core::fmt::rt::Argument<'_>; 1];
    let _400: &[core::fmt::rt::Argument<'_>; 1];
    let _401: [core::fmt::rt::Argument<'_>; 1];
    let mut _402: core::fmt::rt::Argument<'_>;
    let mut _403: &error::ErrorCode;
    let _404: &error::ErrorCode;
    let _405: ();
    let mut _406: &str;
    let _407: &str;
    let mut _408: error::ErrorCode;
    let mut _409: isize;
    let mut _411: !;
    let mut _412: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _414: ();
    let mut _415: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _416: std::result::Result<(), error::ErrorCode>;
    let mut _417: bool;
    let mut _418: &&anchor_lang::prelude::Pubkey;
    let _419: &anchor_lang::prelude::Pubkey;
    let _420: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _421: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _422: &&anchor_lang::prelude::Pubkey;
    let mut _423: ();
    let _425: ();
    let mut _426: &str;
    let _427: &str;
    let mut _428: &std::string::String;
    let _429: &std::string::String;
    let _430: std::string::String;
    let mut _432: std::fmt::Arguments<'_>;
    let mut _433: &[&str];
    let mut _434: &[&str; 2];
    let _435: &[&str; 2];
    let _436: [&str; 2];
    let mut _437: &[core::fmt::rt::Argument<'_>];
    let mut _438: &[core::fmt::rt::Argument<'_>; 1];
    let _439: &[core::fmt::rt::Argument<'_>; 1];
    let _440: [core::fmt::rt::Argument<'_>; 1];
    let mut _441: core::fmt::rt::Argument<'_>;
    let mut _442: &error::ErrorCode;
    let _443: &error::ErrorCode;
    let _444: ();
    let mut _445: &str;
    let _446: &str;
    let mut _447: error::ErrorCode;
    let mut _448: isize;
    let mut _450: !;
    let mut _451: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _453: ();
    let mut _454: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _455: std::result::Result<(), error::ErrorCode>;
    let mut _456: bool;
    let mut _457: &&anchor_lang::prelude::Pubkey;
    let _458: &anchor_lang::prelude::Pubkey;
    let _459: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _460: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _461: &&anchor_lang::prelude::Pubkey;
    let mut _462: ();
    let _464: ();
    let mut _465: &str;
    let _466: &str;
    let mut _467: &std::string::String;
    let _468: &std::string::String;
    let _469: std::string::String;
    let mut _471: std::fmt::Arguments<'_>;
    let mut _472: &[&str];
    let mut _473: &[&str; 2];
    let _474: &[&str; 2];
    let _475: [&str; 2];
    let mut _476: &[core::fmt::rt::Argument<'_>];
    let mut _477: &[core::fmt::rt::Argument<'_>; 1];
    let _478: &[core::fmt::rt::Argument<'_>; 1];
    let _479: [core::fmt::rt::Argument<'_>; 1];
    let mut _480: core::fmt::rt::Argument<'_>;
    let mut _481: &error::ErrorCode;
    let _482: &error::ErrorCode;
    let _483: ();
    let mut _484: &str;
    let _485: &str;
    let mut _486: error::ErrorCode;
    let mut _487: isize;
    let mut _489: !;
    let mut _490: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _492: ();
    let mut _493: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _494: std::result::Result<(), error::ErrorCode>;
    let mut _495: bool;
    let mut _496: &&anchor_lang::prelude::Pubkey;
    let _497: &anchor_lang::prelude::Pubkey;
    let _498: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _499: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _500: &&anchor_lang::prelude::Pubkey;
    let mut _501: ();
    let _503: ();
    let mut _504: &str;
    let _505: &str;
    let mut _506: &std::string::String;
    let _507: &std::string::String;
    let _508: std::string::String;
    let mut _510: std::fmt::Arguments<'_>;
    let mut _511: &[&str];
    let mut _512: &[&str; 2];
    let _513: &[&str; 2];
    let _514: [&str; 2];
    let mut _515: &[core::fmt::rt::Argument<'_>];
    let mut _516: &[core::fmt::rt::Argument<'_>; 1];
    let _517: &[core::fmt::rt::Argument<'_>; 1];
    let _518: [core::fmt::rt::Argument<'_>; 1];
    let mut _519: core::fmt::rt::Argument<'_>;
    let mut _520: &error::ErrorCode;
    let _521: &error::ErrorCode;
    let _522: ();
    let mut _523: &str;
    let _524: &str;
    let mut _525: error::ErrorCode;
    let mut _526: isize;
    let mut _528: !;
    let mut _529: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _531: ();
    let mut _532: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _533: std::result::Result<(), error::ErrorCode>;
    let mut _534: bool;
    let mut _535: &&anchor_lang::prelude::Pubkey;
    let _536: &anchor_lang::prelude::Pubkey;
    let _537: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _538: &std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
    let mut _539: &&anchor_lang::prelude::Pubkey;
    let mut _540: ();
    let _542: ();
    let mut _543: &str;
    let _544: &str;
    let mut _545: &std::string::String;
    let _546: &std::string::String;
    let _547: std::string::String;
    let mut _549: std::fmt::Arguments<'_>;
    let mut _550: &[&str];
    let mut _551: &[&str; 2];
    let _552: &[&str; 2];
    let _553: [&str; 2];
    let mut _554: &[core::fmt::rt::Argument<'_>];
    let mut _555: &[core::fmt::rt::Argument<'_>; 1];
    let _556: &[core::fmt::rt::Argument<'_>; 1];
    let _557: [core::fmt::rt::Argument<'_>; 1];
    let mut _558: core::fmt::rt::Argument<'_>;
    let mut _559: &error::ErrorCode;
    let _560: &error::ErrorCode;
    let mut _561: error::ErrorCode;
    let mut _562: isize;
    let mut _564: !;
    let mut _565: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _568: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _569: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _570: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let mut _571: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>;
    let mut _572: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _573: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:215:67: 215:70};
    let mut _574: isize;
    let mut _576: !;
    let mut _577: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _580: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _581: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _582: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let mut _583: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>;
    let mut _584: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _585: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:220:68: 220:71};
    let mut _586: isize;
    let mut _588: !;
    let mut _589: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _592: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _593: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, error::ErrorCode>;
    let mut _594: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _595: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _596: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:224:87: 224:90};
    let mut _597: isize;
    let mut _599: !;
    let mut _600: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _603: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _604: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, error::ErrorCode>;
    let mut _605: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _606: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _607: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:228:90: 228:93};
    let mut _608: isize;
    let mut _610: !;
    let mut _611: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _613: state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentParams<'_, '_>;
    let mut _614: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _615: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>;
    let mut _616: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _617: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _618: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _619: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _620: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _621: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _622: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _623: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _624: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _625: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _626: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _627: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _628: u8;
    let mut _629: i64;
    let mut _630: std::vec::Vec<anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _646: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _647: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _648: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _649: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _650: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _651: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _652: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _653: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _654: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _655: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _656: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _657: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _658: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _659: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _660: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _661: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _662: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _663: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _664: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _665: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _666: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _667: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _668: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _669: bool;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: isize;
    let mut _674: isize;
    scope 1 {
        debug account_info_vec => _6;
        let mut _8: std::vec::Vec<anchor_lang::prelude::UncheckedAccount<'_>>;
        scope 2 {
            debug remaining_ooa_accounts => _8;
            let _20: &[&anchor_lang::prelude::AccountInfo<'_>; 14];
            let _21: usize;
            scope 3 {
                debug account_infos => _20;
                let _31: &&anchor_lang::prelude::AccountInfo<'_>;
                let _32: &&anchor_lang::prelude::AccountInfo<'_>;
                let _33: &&anchor_lang::prelude::AccountInfo<'_>;
                let _34: &&anchor_lang::prelude::AccountInfo<'_>;
                let _35: &&anchor_lang::prelude::AccountInfo<'_>;
                let _36: &&anchor_lang::prelude::AccountInfo<'_>;
                let _37: &&anchor_lang::prelude::AccountInfo<'_>;
                let _38: &&anchor_lang::prelude::AccountInfo<'_>;
                let _39: &&anchor_lang::prelude::AccountInfo<'_>;
                let _40: &&anchor_lang::prelude::AccountInfo<'_>;
                let _41: &&anchor_lang::prelude::AccountInfo<'_>;
                let _42: &&anchor_lang::prelude::AccountInfo<'_>;
                let _43: &&anchor_lang::prelude::AccountInfo<'_>;
                let _44: &&anchor_lang::prelude::AccountInfo<'_>;
                scope 8 {
                    debug openbook_v2_fulfillment_config => _31;
                    debug drift_signer => _32;
                    debug openbook_v2_program => _33;
                    debug openbook_v2_market => _34;
                    debug openbook_v2_market_authority => _35;
                    debug openbook_v2_event_heap => _36;
                    debug openbook_v2_bids => _37;
                    debug openbook_v2_asks => _38;
                    debug openbook_v2_base_vault => _39;
                    debug openbook_v2_quote_vault => _40;
                    debug base_market_vault => _41;
                    debug quote_market_vault => _42;
                    debug token_program => _43;
                    debug system_program => _44;
                    let _45: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                    let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _55: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                    scope 9 {
                        debug openbook_v2_fulfillment_config_loader => _45;
                        let _56: std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _66: std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>;
                        scope 14 {
                            debug openbook_v2_fulfillment_config => _56;
                            let _77: error::ErrorCode;
                            let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _102: ();
                            let _111: error::ErrorCode;
                            let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _136: ();
                            let _146: error::ErrorCode;
                            let _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _195: ();
                            let _204: error::ErrorCode;
                            let _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _229: ();
                            let _238: error::ErrorCode;
                            let _260: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _263: ();
                            let _274: error::ErrorCode;
                            let _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _299: ();
                            let _310: error::ErrorCode;
                            let _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _335: ();
                            let _346: error::ErrorCode;
                            let _371: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _374: ();
                            let _385: error::ErrorCode;
                            let _410: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _413: ();
                            let _424: error::ErrorCode;
                            let _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _452: ();
                            let _463: error::ErrorCode;
                            let _488: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _491: ();
                            let _502: error::ErrorCode;
                            let _527: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _530: ();
                            let _541: error::ErrorCode;
                            let _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _566: ();
                            let _567: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
                            let _575: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _578: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
                            let mut _645: &state::spot_market::SpotFulfillmentConfigStatus;
                            scope 19 {
                                debug error_code => _77;
                                let _84: std::string::String;
                                let mut _644: &[&str; 2];
                                scope 20 {
                                    debug res => _84;
                                }
                            }
                            scope 21 {
                                debug residual => _99;
                                scope 22 {
                                }
                            }
                            scope 23 {
                                debug val => _102;
                                scope 24 {
                                }
                            }
                            scope 25 {
                                debug error_code => _111;
                                let _118: std::string::String;
                                let mut _643: &[&str; 2];
                                scope 26 {
                                    debug res => _118;
                                }
                            }
                            scope 27 {
                                debug residual => _133;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug val => _136;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug error_code => _146;
                                let _153: std::string::String;
                                let _172: std::string::String;
                                let mut _641: &[&str; 2];
                                let mut _642: &[&str; 2];
                                scope 32 {
                                    debug res => _153;
                                }
                                scope 33 {
                                    debug res => _172;
                                }
                            }
                            scope 34 {
                                debug residual => _192;
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug val => _195;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug error_code => _204;
                                let _211: std::string::String;
                                let mut _640: &[&str; 2];
                                scope 39 {
                                    debug res => _211;
                                }
                            }
                            scope 40 {
                                debug residual => _226;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug val => _229;
                                scope 43 {
                                }
                            }
                            scope 44 {
                                debug error_code => _238;
                                let _245: std::string::String;
                                let mut _639: &[&str; 2];
                                scope 45 {
                                    debug res => _245;
                                }
                            }
                            scope 46 {
                                debug residual => _260;
                                scope 47 {
                                }
                            }
                            scope 48 {
                                debug val => _263;
                                scope 49 {
                                }
                            }
                            scope 50 {
                                debug error_code => _274;
                                let _281: std::string::String;
                                let mut _638: &[&str; 2];
                                scope 51 {
                                    debug res => _281;
                                }
                            }
                            scope 52 {
                                debug residual => _296;
                                scope 53 {
                                }
                            }
                            scope 54 {
                                debug val => _299;
                                scope 55 {
                                }
                            }
                            scope 56 {
                                debug error_code => _310;
                                let _317: std::string::String;
                                let mut _637: &[&str; 2];
                                scope 57 {
                                    debug res => _317;
                                }
                            }
                            scope 58 {
                                debug residual => _332;
                                scope 59 {
                                }
                            }
                            scope 60 {
                                debug val => _335;
                                scope 61 {
                                }
                            }
                            scope 62 {
                                debug error_code => _346;
                                let _353: std::string::String;
                                let mut _636: &[&str; 2];
                                scope 63 {
                                    debug res => _353;
                                }
                            }
                            scope 64 {
                                debug residual => _371;
                                scope 65 {
                                }
                            }
                            scope 66 {
                                debug val => _374;
                                scope 67 {
                                }
                            }
                            scope 68 {
                                debug error_code => _385;
                                let _392: std::string::String;
                                let mut _635: &[&str; 2];
                                scope 69 {
                                    debug res => _392;
                                }
                            }
                            scope 70 {
                                debug residual => _410;
                                scope 71 {
                                }
                            }
                            scope 72 {
                                debug val => _413;
                                scope 73 {
                                }
                            }
                            scope 74 {
                                debug error_code => _424;
                                let _431: std::string::String;
                                let mut _634: &[&str; 2];
                                scope 75 {
                                    debug res => _431;
                                }
                            }
                            scope 76 {
                                debug residual => _449;
                                scope 77 {
                                }
                            }
                            scope 78 {
                                debug val => _452;
                                scope 79 {
                                }
                            }
                            scope 80 {
                                debug error_code => _463;
                                let _470: std::string::String;
                                let mut _633: &[&str; 2];
                                scope 81 {
                                    debug res => _470;
                                }
                            }
                            scope 82 {
                                debug residual => _488;
                                scope 83 {
                                }
                            }
                            scope 84 {
                                debug val => _491;
                                scope 85 {
                                }
                            }
                            scope 86 {
                                debug error_code => _502;
                                let _509: std::string::String;
                                let mut _632: &[&str; 2];
                                scope 87 {
                                    debug res => _509;
                                }
                            }
                            scope 88 {
                                debug residual => _527;
                                scope 89 {
                                }
                            }
                            scope 90 {
                                debug val => _530;
                                scope 91 {
                                }
                            }
                            scope 92 {
                                debug error_code => _541;
                                let _548: std::string::String;
                                let mut _631: &[&str; 2];
                                scope 93 {
                                    debug res => _548;
                                }
                            }
                            scope 94 {
                                debug residual => _563;
                                scope 95 {
                                }
                            }
                            scope 96 {
                                debug val => _566;
                                scope 97 {
                                }
                            }
                            scope 98 {
                                debug base_market_vault => _567;
                                let _579: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
                                let _587: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _590: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
                                scope 103 {
                                    debug quote_market_vault => _579;
                                    let _591: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                    let _598: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _601: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                    scope 108 {
                                        debug token_program => _591;
                                        let _602: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                        let _609: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _612: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                        scope 113 {
                                            debug system_program => _602;
                                        }
                                        scope 114 {
                                            debug residual => _609;
                                            scope 115 {
                                            }
                                        }
                                        scope 116 {
                                            debug val => _612;
                                            scope 117 {
                                            }
                                        }
                                    }
                                    scope 109 {
                                        debug residual => _598;
                                        scope 110 {
                                        }
                                    }
                                    scope 111 {
                                        debug val => _601;
                                        scope 112 {
                                        }
                                    }
                                }
                                scope 104 {
                                    debug residual => _587;
                                    scope 105 {
                                    }
                                }
                                scope 106 {
                                    debug val => _590;
                                    scope 107 {
                                    }
                                }
                            }
                            scope 99 {
                                debug residual => _575;
                                scope 100 {
                                }
                            }
                            scope 101 {
                                debug val => _578;
                                scope 102 {
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _63;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _66;
                            scope 18 {
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _52;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _55;
                        scope 13 {
                        }
                    }
                }
            }
            scope 4 {
                debug offset => _21;
                let _22: &[&anchor_lang::prelude::AccountInfo<'_>];
                scope 5 {
                    debug slice => _22;
                    scope 6 {
                        scope 7 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _669 = const false;
        StorageLive(_6);
        StorageLive(_7);
        _7 = &mut (*_1);
        _6 = <&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::collect::<Vec<&anchor_lang::prelude::AccountInfo<'_>>>(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &_6;
        _14 = <Vec<&anchor_lang::prelude::AccountInfo<'_>> as Deref>::deref(move _15) -> [return: bb2, unwind: bb283];
    }

    bb2: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = core::slice::<impl [&anchor_lang::prelude::AccountInfo<'_>]>::iter(move _13) -> [return: bb3, unwind: bb283];
    }

    bb3: {
        StorageDead(_13);
        _11 = <std::slice::Iter<'_, &anchor_lang::prelude::AccountInfo<'_>> as Iterator>::skip(move _12, const 14_usize) -> [return: bb4, unwind: bb283];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_16);
        _16 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:127:21: 127:26};
        _10 = <Skip<std::slice::Iter<'_, &anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::filter::<{closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:127:21: 127:26}>(move _11, move _16) -> [return: bb5, unwind: bb283];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_11);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:132:18: 132:23};
        _9 = <Filter<Skip<std::slice::Iter<'_, &anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:127:21: 127:26}> as Iterator>::map::<anchor_lang::prelude::UncheckedAccount<'_>, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:132:18: 132:23}>(move _10, move _17) -> [return: bb6, unwind: bb283];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_10);
        _8 = <Map<Filter<Skip<std::slice::Iter<'_, &anchor_lang::prelude::AccountInfo<'_>>>, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:127:21: 127:26}>, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:132:18: 132:23}> as Iterator>::collect::<Vec<anchor_lang::prelude::UncheckedAccount<'_>>>(move _9) -> [return: bb7, unwind: bb283];
    }

    bb7: {
        _669 = const true;
        StorageDead(_9);
        StorageDead(_14);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut _8;
        _18 = Vec::<anchor_lang::prelude::UncheckedAccount<'_>>::truncate(move _19, const 3_usize) -> [return: bb8, unwind: bb287];
    }

    bb8: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_20);
        StorageLive(_21);
        _21 = const 0_usize;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &_6;
        StorageLive(_25);
        StorageLive(_26);
        _26 = _21;
        StorageLive(_27);
        StorageLive(_28);
        _28 = _21;
        _29 = CheckedAdd(_28, const 14_usize);
        assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", move _28, const 14_usize) -> [success: bb9, unwind: bb287];
    }

    bb9: {
        _27 = move (_29.0: usize);
        StorageDead(_28);
        _25 = std::ops::Range::<usize> { start: move _26, end: move _27 };
        StorageDead(_27);
        StorageDead(_26);
        _23 = <Vec<&anchor_lang::prelude::AccountInfo<'_>> as Index<std::ops::Range<usize>>>::index(move _24, move _25) -> [return: bb10, unwind: bb287];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = &(*_23);
        StorageLive(_30);
        _30 = &(*_22);
        _20 = OpenbookV2FulfillmentParams::<'a, 'b>::new::as_array::<&anchor_lang::prelude::AccountInfo<'_>>(move _30) -> [return: bb11, unwind: bb287];
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_31);
        _31 = &(*_20)[0 of 14];
        StorageLive(_32);
        _32 = &(*_20)[1 of 14];
        StorageLive(_33);
        _33 = &(*_20)[2 of 14];
        StorageLive(_34);
        _34 = &(*_20)[3 of 14];
        StorageLive(_35);
        _35 = &(*_20)[4 of 14];
        StorageLive(_36);
        _36 = &(*_20)[5 of 14];
        StorageLive(_37);
        _37 = &(*_20)[6 of 14];
        StorageLive(_38);
        _38 = &(*_20)[7 of 14];
        StorageLive(_39);
        _39 = &(*_20)[8 of 14];
        StorageLive(_40);
        _40 = &(*_20)[9 of 14];
        StorageLive(_41);
        _41 = &(*_20)[10 of 14];
        StorageLive(_42);
        _42 = &(*_20)[11 of 14];
        StorageLive(_43);
        _43 = &(*_20)[12 of 14];
        StorageLive(_44);
        _44 = &(*_20)[13 of 14];
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _646 = deref_copy (*_31);
        _49 = &(*_646);
        _48 = anchor_lang::prelude::AccountLoader::<'_, OpenbookV2FulfillmentConfig>::try_from(move _49) -> [return: bb12, unwind: bb287];
    }

    bb12: {
        StorageDead(_49);
        StorageLive(_50);
        _50 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:139:77: 139:80};
        _47 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, OpenbookV2FulfillmentConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:139:77: 139:80}>(move _48, move _50) -> [return: bb13, unwind: bb287];
    }

    bb13: {
        StorageDead(_50);
        StorageDead(_48);
        _46 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, OpenbookV2FulfillmentConfig>, error::ErrorCode> as Try>::branch(move _47) -> [return: bb14, unwind: bb287];
    }

    bb14: {
        StorageDead(_47);
        _51 = discriminant(_46);
        switchInt(move _51) -> [0: bb15, 1: bb17, otherwise: bb16];
    }

    bb15: {
        StorageLive(_55);
        _55 = move ((_46 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>);
        _45 = move _55;
        StorageDead(_55);
        StorageDead(_46);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &_45;
        _59 = anchor_lang::prelude::AccountLoader::<'_, OpenbookV2FulfillmentConfig>::load(move _60) -> [return: bb19, unwind: bb287];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        StorageLive(_52);
        _52 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb18, unwind: bb287];
    }

    bb18: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_46);
        goto -> bb262;
    }

    bb19: {
        StorageDead(_60);
        StorageLive(_61);
        _61 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _58 = std::result::Result::<Ref<'_, OpenbookV2FulfillmentConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _59, move _61) -> [return: bb20, unwind: bb287];
    }

    bb20: {
        StorageDead(_61);
        StorageDead(_59);
        _57 = <std::result::Result<Ref<'_, OpenbookV2FulfillmentConfig>, error::ErrorCode> as Try>::branch(move _58) -> [return: bb21, unwind: bb287];
    }

    bb21: {
        StorageDead(_58);
        _62 = discriminant(_57);
        switchInt(move _62) -> [0: bb22, 1: bb23, otherwise: bb16];
    }

    bb22: {
        StorageLive(_66);
        _66 = move ((_57 as Continue).0: std::cell::Ref<'_, state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig>);
        _56 = move _66;
        StorageDead(_66);
        _672 = discriminant(_57);
        StorageDead(_57);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &_56;
        _72 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _73) -> [return: bb25, unwind: bb282];
    }

    bb23: {
        StorageLive(_63);
        _63 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb24, unwind: bb285];
    }

    bb24: {
        StorageDead(_65);
        StorageDead(_63);
        _670 = discriminant(_57);
        StorageDead(_57);
        goto -> bb261;
    }

    bb25: {
        StorageDead(_73);
        _71 = &((*_72).11: state::spot_market::SpotFulfillmentConfigStatus);
        StorageLive(_74);
        _645 = const _;
        _74 = &(*_645);
        _70 = <state::spot_market::SpotFulfillmentConfigStatus as PartialEq>::eq(move _71, move _74) -> [return: bb26, unwind: bb282];
    }

    bb26: {
        switchInt(move _70) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_76);
        _76 = ();
        _69 = std::result::Result::<(), error::ErrorCode>::Ok(move _76);
        StorageDead(_76);
        goto -> bb35;
    }

    bb28: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_77);
        _77 = error::ErrorCode::SpotFulfillmentConfigDisabled;
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _644 = const _;
        _88 = &(*_644);
        _87 = &(*_88);
        _86 = move _87 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_77;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _95) -> [return: bb29, unwind: bb282];
    }

    bb29: {
        StorageDead(_95);
        _93 = [move _94];
        StorageDead(_94);
        _92 = &_93;
        _91 = &(*_92);
        _90 = move _91 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_91);
        _85 = Arguments::<'_>::new_v1(move _86, move _90) -> [return: bb30, unwind: bb282];
    }

    bb30: {
        StorageDead(_90);
        StorageDead(_86);
        _84 = format(move _85) -> [return: bb31, unwind: bb282];
    }

    bb31: {
        StorageDead(_85);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_88);
        _83 = move _84;
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = <String as Deref>::deref(move _81) -> [return: bb32, unwind: bb281];
    }

    bb32: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = solana_program::log::sol_log(move _79) -> [return: bb33, unwind: bb281];
    }

    bb33: {
        StorageDead(_79);
        drop(_83) -> [return: bb34, unwind: bb282];
    }

    bb34: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageLive(_97);
        _97 = _77;
        _69 = std::result::Result::<(), error::ErrorCode>::Err(move _97);
        StorageDead(_97);
        StorageDead(_77);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_70);
        _68 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _69) -> [return: bb36, unwind: bb282];
    }

    bb36: {
        StorageDead(_69);
        _98 = discriminant(_68);
        switchInt(move _98) -> [0: bb37, 1: bb38, otherwise: bb16];
    }

    bb37: {
        StorageLive(_102);
        _102 = ((_68 as Continue).0: ());
        _67 = _102;
        StorageDead(_102);
        StorageDead(_68);
        StorageDead(_67);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &((*_2).3: anchor_lang::prelude::Pubkey);
        _107 = &_108;
        StorageLive(_109);
        _647 = deref_copy (*_32);
        _109 = &((*_647).0: &anchor_lang::prelude::Pubkey);
        _106 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _107, move _109) -> [return: bb40, unwind: bb282];
    }

    bb38: {
        StorageLive(_99);
        _99 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb39, unwind: bb282];
    }

    bb39: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb260;
    }

    bb40: {
        switchInt(move _106) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_110);
        _110 = ();
        _105 = std::result::Result::<(), error::ErrorCode>::Ok(move _110);
        StorageDead(_110);
        goto -> bb49;
    }

    bb42: {
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageLive(_111);
        _111 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _643 = const _;
        _122 = &(*_643);
        _121 = &(*_122);
        _120 = move _121 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_121);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_111;
        _129 = &(*_130);
        _128 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _129) -> [return: bb43, unwind: bb282];
    }

    bb43: {
        StorageDead(_129);
        _127 = [move _128];
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_125);
        _119 = Arguments::<'_>::new_v1(move _120, move _124) -> [return: bb44, unwind: bb282];
    }

    bb44: {
        StorageDead(_124);
        StorageDead(_120);
        _118 = format(move _119) -> [return: bb45, unwind: bb282];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        _117 = move _118;
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = <String as Deref>::deref(move _115) -> [return: bb46, unwind: bb280];
    }

    bb46: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb47, unwind: bb280];
    }

    bb47: {
        StorageDead(_113);
        drop(_117) -> [return: bb48, unwind: bb282];
    }

    bb48: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_131);
        _131 = _111;
        _105 = std::result::Result::<(), error::ErrorCode>::Err(move _131);
        StorageDead(_131);
        StorageDead(_111);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_106);
        _104 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _105) -> [return: bb50, unwind: bb282];
    }

    bb50: {
        StorageDead(_105);
        _132 = discriminant(_104);
        switchInt(move _132) -> [0: bb51, 1: bb52, otherwise: bb16];
    }

    bb51: {
        StorageLive(_136);
        _136 = ((_104 as Continue).0: ());
        _103 = _136;
        StorageDead(_136);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_56;
        _142 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _143) -> [return: bb54, unwind: bb282];
    }

    bb52: {
        StorageLive(_133);
        _133 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb53, unwind: bb282];
    }

    bb53: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb260;
    }

    bb54: {
        StorageDead(_143);
        _141 = ((*_142).9: u16);
        StorageLive(_144);
        _144 = ((*_3).42: u16);
        _140 = Eq(move _141, move _144);
        switchInt(move _140) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_145);
        _145 = ();
        _139 = std::result::Result::<(), error::ErrorCode>::Ok(move _145);
        StorageDead(_145);
        goto -> bb71;
    }

    bb56: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_146);
        _146 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _642 = const _;
        _157 = &(*_642);
        _156 = &(*_157);
        _155 = move _156 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_156);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_146;
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _164) -> [return: bb57, unwind: bb282];
    }

    bb57: {
        StorageDead(_164);
        _162 = [move _163];
        StorageDead(_163);
        _161 = &_162;
        _160 = &(*_161);
        _159 = move _160 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_160);
        _154 = Arguments::<'_>::new_v1(move _155, move _159) -> [return: bb58, unwind: bb282];
    }

    bb58: {
        StorageDead(_159);
        StorageDead(_155);
        _153 = format(move _154) -> [return: bb59, unwind: bb282];
    }

    bb59: {
        StorageDead(_154);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_157);
        _152 = move _153;
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = <String as Deref>::deref(move _150) -> [return: bb60, unwind: bb279];
    }

    bb60: {
        _148 = &(*_149);
        StorageDead(_150);
        _147 = solana_program::log::sol_log(move _148) -> [return: bb61, unwind: bb279];
    }

    bb61: {
        StorageDead(_148);
        drop(_152) -> [return: bb62, unwind: bb282];
    }

    bb62: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_147);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _641 = const _;
        _176 = &(*_641);
        _175 = &(*_176);
        _174 = move _175 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_175);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_56;
        _185 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _186) -> [return: bb63, unwind: bb282];
    }

    bb63: {
        StorageDead(_186);
        _184 = &((*_185).9: u16);
        _183 = &(*_184);
        _182 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _183) -> [return: bb64, unwind: bb282];
    }

    bb64: {
        StorageDead(_183);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &((*_3).42: u16);
        _188 = &(*_189);
        _187 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _188) -> [return: bb65, unwind: bb282];
    }

    bb65: {
        StorageDead(_188);
        _181 = [move _182, move _187];
        StorageDead(_187);
        StorageDead(_182);
        _180 = &_181;
        _179 = &(*_180);
        _178 = move _179 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_179);
        _173 = Arguments::<'_>::new_v1(move _174, move _178) -> [return: bb66, unwind: bb282];
    }

    bb66: {
        StorageDead(_178);
        StorageDead(_174);
        _172 = format(move _173) -> [return: bb67, unwind: bb282];
    }

    bb67: {
        StorageDead(_173);
        StorageDead(_189);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_176);
        _171 = move _172;
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = <String as Deref>::deref(move _169) -> [return: bb68, unwind: bb278];
    }

    bb68: {
        _167 = &(*_168);
        StorageDead(_169);
        _166 = solana_program::log::sol_log(move _167) -> [return: bb69, unwind: bb278];
    }

    bb69: {
        StorageDead(_167);
        drop(_171) -> [return: bb70, unwind: bb282];
    }

    bb70: {
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageLive(_190);
        _190 = _146;
        _139 = std::result::Result::<(), error::ErrorCode>::Err(move _190);
        StorageDead(_190);
        StorageDead(_146);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_140);
        _138 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _139) -> [return: bb72, unwind: bb282];
    }

    bb72: {
        StorageDead(_139);
        _191 = discriminant(_138);
        switchInt(move _191) -> [0: bb73, 1: bb74, otherwise: bb16];
    }

    bb73: {
        StorageLive(_195);
        _195 = ((_138 as Continue).0: ());
        _137 = _195;
        StorageDead(_195);
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = &((*_3).3: anchor_lang::prelude::Pubkey);
        _200 = &_201;
        StorageLive(_202);
        _648 = deref_copy (*_41);
        _202 = &((*_648).0: &anchor_lang::prelude::Pubkey);
        _199 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _200, move _202) -> [return: bb76, unwind: bb282];
    }

    bb74: {
        StorageLive(_192);
        _192 = ((_138 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_194);
        _194 = _192;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _194) -> [return: bb75, unwind: bb282];
    }

    bb75: {
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb260;
    }

    bb76: {
        switchInt(move _199) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_203);
        _203 = ();
        _198 = std::result::Result::<(), error::ErrorCode>::Ok(move _203);
        StorageDead(_203);
        goto -> bb85;
    }

    bb78: {
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_204);
        _204 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _640 = const _;
        _215 = &(*_640);
        _214 = &(*_215);
        _213 = move _214 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_214);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_204;
        _222 = &(*_223);
        _221 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _222) -> [return: bb79, unwind: bb282];
    }

    bb79: {
        StorageDead(_222);
        _220 = [move _221];
        StorageDead(_221);
        _219 = &_220;
        _218 = &(*_219);
        _217 = move _218 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_218);
        _212 = Arguments::<'_>::new_v1(move _213, move _217) -> [return: bb80, unwind: bb282];
    }

    bb80: {
        StorageDead(_217);
        StorageDead(_213);
        _211 = format(move _212) -> [return: bb81, unwind: bb282];
    }

    bb81: {
        StorageDead(_212);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_215);
        _210 = move _211;
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = <String as Deref>::deref(move _208) -> [return: bb82, unwind: bb277];
    }

    bb82: {
        _206 = &(*_207);
        StorageDead(_208);
        _205 = solana_program::log::sol_log(move _206) -> [return: bb83, unwind: bb277];
    }

    bb83: {
        StorageDead(_206);
        drop(_210) -> [return: bb84, unwind: bb282];
    }

    bb84: {
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_205);
        StorageLive(_224);
        _224 = _204;
        _198 = std::result::Result::<(), error::ErrorCode>::Err(move _224);
        StorageDead(_224);
        StorageDead(_204);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_199);
        _197 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _198) -> [return: bb86, unwind: bb282];
    }

    bb86: {
        StorageDead(_198);
        _225 = discriminant(_197);
        switchInt(move _225) -> [0: bb87, 1: bb88, otherwise: bb16];
    }

    bb87: {
        StorageLive(_229);
        _229 = ((_197 as Continue).0: ());
        _196 = _229;
        StorageDead(_229);
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = &((*_4).3: anchor_lang::prelude::Pubkey);
        _234 = &_235;
        StorageLive(_236);
        _649 = deref_copy (*_42);
        _236 = &((*_649).0: &anchor_lang::prelude::Pubkey);
        _233 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _234, move _236) -> [return: bb90, unwind: bb282];
    }

    bb88: {
        StorageLive(_226);
        _226 = ((_197 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_228);
        _228 = _226;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _228) -> [return: bb89, unwind: bb282];
    }

    bb89: {
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_197);
        StorageDead(_196);
        goto -> bb260;
    }

    bb90: {
        switchInt(move _233) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_234);
        StorageLive(_237);
        _237 = ();
        _232 = std::result::Result::<(), error::ErrorCode>::Ok(move _237);
        StorageDead(_237);
        goto -> bb99;
    }

    bb92: {
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_234);
        StorageLive(_238);
        _238 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        _639 = const _;
        _249 = &(*_639);
        _248 = &(*_249);
        _247 = move _248 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_248);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = &_238;
        _256 = &(*_257);
        _255 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _256) -> [return: bb93, unwind: bb282];
    }

    bb93: {
        StorageDead(_256);
        _254 = [move _255];
        StorageDead(_255);
        _253 = &_254;
        _252 = &(*_253);
        _251 = move _252 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_252);
        _246 = Arguments::<'_>::new_v1(move _247, move _251) -> [return: bb94, unwind: bb282];
    }

    bb94: {
        StorageDead(_251);
        StorageDead(_247);
        _245 = format(move _246) -> [return: bb95, unwind: bb282];
    }

    bb95: {
        StorageDead(_246);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_249);
        _244 = move _245;
        StorageDead(_245);
        _243 = &_244;
        _242 = &(*_243);
        _241 = <String as Deref>::deref(move _242) -> [return: bb96, unwind: bb276];
    }

    bb96: {
        _240 = &(*_241);
        StorageDead(_242);
        _239 = solana_program::log::sol_log(move _240) -> [return: bb97, unwind: bb276];
    }

    bb97: {
        StorageDead(_240);
        drop(_244) -> [return: bb98, unwind: bb282];
    }

    bb98: {
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_239);
        StorageLive(_258);
        _258 = _238;
        _232 = std::result::Result::<(), error::ErrorCode>::Err(move _258);
        StorageDead(_258);
        StorageDead(_238);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_233);
        _231 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _232) -> [return: bb100, unwind: bb282];
    }

    bb100: {
        StorageDead(_232);
        _259 = discriminant(_231);
        switchInt(move _259) -> [0: bb101, 1: bb102, otherwise: bb16];
    }

    bb101: {
        StorageLive(_263);
        _263 = ((_231 as Continue).0: ());
        _230 = _263;
        StorageDead(_263);
        StorageDead(_231);
        StorageDead(_230);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = &_56;
        _270 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _271) -> [return: bb104, unwind: bb282];
    }

    bb102: {
        StorageLive(_260);
        _260 = ((_231 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_262);
        _262 = _260;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _262) -> [return: bb103, unwind: bb282];
    }

    bb103: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_231);
        StorageDead(_230);
        goto -> bb260;
    }

    bb104: {
        StorageDead(_271);
        _269 = &((*_270).1: anchor_lang::prelude::Pubkey);
        _268 = &_269;
        StorageLive(_272);
        _650 = deref_copy (*_33);
        _272 = &((*_650).0: &anchor_lang::prelude::Pubkey);
        _267 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _268, move _272) -> [return: bb105, unwind: bb282];
    }

    bb105: {
        switchInt(move _267) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_268);
        StorageLive(_273);
        _273 = ();
        _266 = std::result::Result::<(), error::ErrorCode>::Ok(move _273);
        StorageDead(_273);
        goto -> bb114;
    }

    bb107: {
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_268);
        StorageLive(_274);
        _274 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _638 = const _;
        _285 = &(*_638);
        _284 = &(*_285);
        _283 = move _284 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_284);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_274;
        _292 = &(*_293);
        _291 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _292) -> [return: bb108, unwind: bb282];
    }

    bb108: {
        StorageDead(_292);
        _290 = [move _291];
        StorageDead(_291);
        _289 = &_290;
        _288 = &(*_289);
        _287 = move _288 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_288);
        _282 = Arguments::<'_>::new_v1(move _283, move _287) -> [return: bb109, unwind: bb282];
    }

    bb109: {
        StorageDead(_287);
        StorageDead(_283);
        _281 = format(move _282) -> [return: bb110, unwind: bb282];
    }

    bb110: {
        StorageDead(_282);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_285);
        _280 = move _281;
        StorageDead(_281);
        _279 = &_280;
        _278 = &(*_279);
        _277 = <String as Deref>::deref(move _278) -> [return: bb111, unwind: bb275];
    }

    bb111: {
        _276 = &(*_277);
        StorageDead(_278);
        _275 = solana_program::log::sol_log(move _276) -> [return: bb112, unwind: bb275];
    }

    bb112: {
        StorageDead(_276);
        drop(_280) -> [return: bb113, unwind: bb282];
    }

    bb113: {
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_275);
        StorageLive(_294);
        _294 = _274;
        _266 = std::result::Result::<(), error::ErrorCode>::Err(move _294);
        StorageDead(_294);
        StorageDead(_274);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_267);
        _265 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _266) -> [return: bb115, unwind: bb282];
    }

    bb115: {
        StorageDead(_266);
        _295 = discriminant(_265);
        switchInt(move _295) -> [0: bb116, 1: bb117, otherwise: bb16];
    }

    bb116: {
        StorageLive(_299);
        _299 = ((_265 as Continue).0: ());
        _264 = _299;
        StorageDead(_299);
        StorageDead(_265);
        StorageDead(_264);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &_56;
        _306 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _307) -> [return: bb119, unwind: bb282];
    }

    bb117: {
        StorageLive(_296);
        _296 = ((_265 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_298);
        _298 = _296;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _298) -> [return: bb118, unwind: bb282];
    }

    bb118: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_265);
        StorageDead(_264);
        goto -> bb260;
    }

    bb119: {
        StorageDead(_307);
        _305 = &((*_306).3: anchor_lang::prelude::Pubkey);
        _304 = &_305;
        StorageLive(_308);
        _651 = deref_copy (*_35);
        _308 = &((*_651).0: &anchor_lang::prelude::Pubkey);
        _303 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _304, move _308) -> [return: bb120, unwind: bb282];
    }

    bb120: {
        switchInt(move _303) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_309);
        _309 = ();
        _302 = std::result::Result::<(), error::ErrorCode>::Ok(move _309);
        StorageDead(_309);
        goto -> bb129;
    }

    bb122: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_310);
        _310 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _637 = const _;
        _321 = &(*_637);
        _320 = &(*_321);
        _319 = move _320 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_320);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &_310;
        _328 = &(*_329);
        _327 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _328) -> [return: bb123, unwind: bb282];
    }

    bb123: {
        StorageDead(_328);
        _326 = [move _327];
        StorageDead(_327);
        _325 = &_326;
        _324 = &(*_325);
        _323 = move _324 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_324);
        _318 = Arguments::<'_>::new_v1(move _319, move _323) -> [return: bb124, unwind: bb282];
    }

    bb124: {
        StorageDead(_323);
        StorageDead(_319);
        _317 = format(move _318) -> [return: bb125, unwind: bb282];
    }

    bb125: {
        StorageDead(_318);
        StorageDead(_329);
        StorageDead(_326);
        StorageDead(_325);
        StorageDead(_321);
        _316 = move _317;
        StorageDead(_317);
        _315 = &_316;
        _314 = &(*_315);
        _313 = <String as Deref>::deref(move _314) -> [return: bb126, unwind: bb274];
    }

    bb126: {
        _312 = &(*_313);
        StorageDead(_314);
        _311 = solana_program::log::sol_log(move _312) -> [return: bb127, unwind: bb274];
    }

    bb127: {
        StorageDead(_312);
        drop(_316) -> [return: bb128, unwind: bb282];
    }

    bb128: {
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_311);
        StorageLive(_330);
        _330 = _310;
        _302 = std::result::Result::<(), error::ErrorCode>::Err(move _330);
        StorageDead(_330);
        StorageDead(_310);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_303);
        _301 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _302) -> [return: bb130, unwind: bb282];
    }

    bb130: {
        StorageDead(_302);
        _331 = discriminant(_301);
        switchInt(move _331) -> [0: bb131, 1: bb132, otherwise: bb16];
    }

    bb131: {
        StorageLive(_335);
        _335 = ((_301 as Continue).0: ());
        _300 = _335;
        StorageDead(_335);
        StorageDead(_301);
        StorageDead(_300);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &_56;
        _342 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _343) -> [return: bb134, unwind: bb282];
    }

    bb132: {
        StorageLive(_332);
        _332 = ((_301 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_334);
        _334 = _332;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _334) -> [return: bb133, unwind: bb282];
    }

    bb133: {
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_301);
        StorageDead(_300);
        goto -> bb260;
    }

    bb134: {
        StorageDead(_343);
        _341 = &((*_342).4: anchor_lang::prelude::Pubkey);
        _340 = &_341;
        StorageLive(_344);
        _652 = deref_copy (*_36);
        _344 = &((*_652).0: &anchor_lang::prelude::Pubkey);
        _339 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _340, move _344) -> [return: bb135, unwind: bb282];
    }

    bb135: {
        switchInt(move _339) -> [0: bb137, otherwise: bb136];
    }

    bb136: {
        StorageDead(_344);
        StorageDead(_342);
        StorageDead(_341);
        StorageDead(_340);
        StorageLive(_345);
        _345 = ();
        _338 = std::result::Result::<(), error::ErrorCode>::Ok(move _345);
        StorageDead(_345);
        goto -> bb145;
    }

    bb137: {
        StorageDead(_344);
        StorageDead(_342);
        StorageDead(_341);
        StorageDead(_340);
        StorageLive(_346);
        _346 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _636 = const _;
        _357 = &(*_636);
        _356 = &(*_357);
        _355 = move _356 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_356);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        _365 = &_346;
        _364 = &(*_365);
        _363 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _364) -> [return: bb138, unwind: bb282];
    }

    bb138: {
        StorageDead(_364);
        _362 = [move _363];
        StorageDead(_363);
        _361 = &_362;
        _360 = &(*_361);
        _359 = move _360 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_360);
        _354 = Arguments::<'_>::new_v1(move _355, move _359) -> [return: bb139, unwind: bb282];
    }

    bb139: {
        StorageDead(_359);
        StorageDead(_355);
        _353 = format(move _354) -> [return: bb140, unwind: bb282];
    }

    bb140: {
        StorageDead(_354);
        StorageDead(_365);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_357);
        _352 = move _353;
        StorageDead(_353);
        _351 = &_352;
        _350 = &(*_351);
        _349 = <String as Deref>::deref(move _350) -> [return: bb141, unwind: bb273];
    }

    bb141: {
        _348 = &(*_349);
        StorageDead(_350);
        _347 = solana_program::log::sol_log(move _348) -> [return: bb142, unwind: bb273];
    }

    bb142: {
        StorageDead(_348);
        drop(_352) -> [return: bb143, unwind: bb282];
    }

    bb143: {
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_349);
        StorageDead(_347);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        _368 = const "Openbook V2 eventheap key does not match";
        _367 = &(*_368);
        _366 = solana_program::log::sol_log(move _367) -> [return: bb144, unwind: bb282];
    }

    bb144: {
        StorageDead(_367);
        StorageDead(_368);
        StorageDead(_366);
        StorageLive(_369);
        _369 = _346;
        _338 = std::result::Result::<(), error::ErrorCode>::Err(move _369);
        StorageDead(_369);
        StorageDead(_346);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_339);
        _337 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _338) -> [return: bb146, unwind: bb282];
    }

    bb146: {
        StorageDead(_338);
        _370 = discriminant(_337);
        switchInt(move _370) -> [0: bb147, 1: bb148, otherwise: bb16];
    }

    bb147: {
        StorageLive(_374);
        _374 = ((_337 as Continue).0: ());
        _336 = _374;
        StorageDead(_374);
        StorageDead(_337);
        StorageDead(_336);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _382 = &_56;
        _381 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _382) -> [return: bb150, unwind: bb282];
    }

    bb148: {
        StorageLive(_371);
        _371 = ((_337 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_373);
        _373 = _371;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _373) -> [return: bb149, unwind: bb282];
    }

    bb149: {
        StorageDead(_373);
        StorageDead(_371);
        StorageDead(_337);
        StorageDead(_336);
        goto -> bb260;
    }

    bb150: {
        StorageDead(_382);
        _380 = &((*_381).5: anchor_lang::prelude::Pubkey);
        _379 = &_380;
        StorageLive(_383);
        _653 = deref_copy (*_37);
        _383 = &((*_653).0: &anchor_lang::prelude::Pubkey);
        _378 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _379, move _383) -> [return: bb151, unwind: bb282];
    }

    bb151: {
        switchInt(move _378) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_384);
        _384 = ();
        _377 = std::result::Result::<(), error::ErrorCode>::Ok(move _384);
        StorageDead(_384);
        goto -> bb161;
    }

    bb153: {
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_379);
        StorageLive(_385);
        _385 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _635 = const _;
        _396 = &(*_635);
        _395 = &(*_396);
        _394 = move _395 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_395);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &_385;
        _403 = &(*_404);
        _402 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _403) -> [return: bb154, unwind: bb282];
    }

    bb154: {
        StorageDead(_403);
        _401 = [move _402];
        StorageDead(_402);
        _400 = &_401;
        _399 = &(*_400);
        _398 = move _399 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_399);
        _393 = Arguments::<'_>::new_v1(move _394, move _398) -> [return: bb155, unwind: bb282];
    }

    bb155: {
        StorageDead(_398);
        StorageDead(_394);
        _392 = format(move _393) -> [return: bb156, unwind: bb282];
    }

    bb156: {
        StorageDead(_393);
        StorageDead(_404);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_396);
        _391 = move _392;
        StorageDead(_392);
        _390 = &_391;
        _389 = &(*_390);
        _388 = <String as Deref>::deref(move _389) -> [return: bb157, unwind: bb272];
    }

    bb157: {
        _387 = &(*_388);
        StorageDead(_389);
        _386 = solana_program::log::sol_log(move _387) -> [return: bb158, unwind: bb272];
    }

    bb158: {
        StorageDead(_387);
        drop(_391) -> [return: bb159, unwind: bb282];
    }

    bb159: {
        StorageDead(_391);
        StorageDead(_390);
        StorageDead(_388);
        StorageDead(_386);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        _407 = const "Openbook V2 bids key does not match";
        _406 = &(*_407);
        _405 = solana_program::log::sol_log(move _406) -> [return: bb160, unwind: bb282];
    }

    bb160: {
        StorageDead(_406);
        StorageDead(_407);
        StorageDead(_405);
        StorageLive(_408);
        _408 = _385;
        _377 = std::result::Result::<(), error::ErrorCode>::Err(move _408);
        StorageDead(_408);
        StorageDead(_385);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_378);
        _376 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _377) -> [return: bb162, unwind: bb282];
    }

    bb162: {
        StorageDead(_377);
        _409 = discriminant(_376);
        switchInt(move _409) -> [0: bb163, 1: bb164, otherwise: bb16];
    }

    bb163: {
        StorageLive(_413);
        _413 = ((_376 as Continue).0: ());
        _375 = _413;
        StorageDead(_413);
        StorageDead(_376);
        StorageDead(_375);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_56;
        _420 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _421) -> [return: bb166, unwind: bb282];
    }

    bb164: {
        StorageLive(_410);
        _410 = ((_376 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_412);
        _412 = _410;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _412) -> [return: bb165, unwind: bb282];
    }

    bb165: {
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_376);
        StorageDead(_375);
        goto -> bb260;
    }

    bb166: {
        StorageDead(_421);
        _419 = &((*_420).6: anchor_lang::prelude::Pubkey);
        _418 = &_419;
        StorageLive(_422);
        _654 = deref_copy (*_38);
        _422 = &((*_654).0: &anchor_lang::prelude::Pubkey);
        _417 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _418, move _422) -> [return: bb167, unwind: bb282];
    }

    bb167: {
        switchInt(move _417) -> [0: bb169, otherwise: bb168];
    }

    bb168: {
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_418);
        StorageLive(_423);
        _423 = ();
        _416 = std::result::Result::<(), error::ErrorCode>::Ok(move _423);
        StorageDead(_423);
        goto -> bb177;
    }

    bb169: {
        StorageDead(_422);
        StorageDead(_420);
        StorageDead(_419);
        StorageDead(_418);
        StorageLive(_424);
        _424 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        _634 = const _;
        _435 = &(*_634);
        _434 = &(*_435);
        _433 = move _434 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_434);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_424;
        _442 = &(*_443);
        _441 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _442) -> [return: bb170, unwind: bb282];
    }

    bb170: {
        StorageDead(_442);
        _440 = [move _441];
        StorageDead(_441);
        _439 = &_440;
        _438 = &(*_439);
        _437 = move _438 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_438);
        _432 = Arguments::<'_>::new_v1(move _433, move _437) -> [return: bb171, unwind: bb282];
    }

    bb171: {
        StorageDead(_437);
        StorageDead(_433);
        _431 = format(move _432) -> [return: bb172, unwind: bb282];
    }

    bb172: {
        StorageDead(_432);
        StorageDead(_443);
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_435);
        _430 = move _431;
        StorageDead(_431);
        _429 = &_430;
        _428 = &(*_429);
        _427 = <String as Deref>::deref(move _428) -> [return: bb173, unwind: bb271];
    }

    bb173: {
        _426 = &(*_427);
        StorageDead(_428);
        _425 = solana_program::log::sol_log(move _426) -> [return: bb174, unwind: bb271];
    }

    bb174: {
        StorageDead(_426);
        drop(_430) -> [return: bb175, unwind: bb282];
    }

    bb175: {
        StorageDead(_430);
        StorageDead(_429);
        StorageDead(_427);
        StorageDead(_425);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _446 = const "Openbook V2 asks key does not match";
        _445 = &(*_446);
        _444 = solana_program::log::sol_log(move _445) -> [return: bb176, unwind: bb282];
    }

    bb176: {
        StorageDead(_445);
        StorageDead(_446);
        StorageDead(_444);
        StorageLive(_447);
        _447 = _424;
        _416 = std::result::Result::<(), error::ErrorCode>::Err(move _447);
        StorageDead(_447);
        StorageDead(_424);
        goto -> bb177;
    }

    bb177: {
        StorageDead(_417);
        _415 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _416) -> [return: bb178, unwind: bb282];
    }

    bb178: {
        StorageDead(_416);
        _448 = discriminant(_415);
        switchInt(move _448) -> [0: bb179, 1: bb180, otherwise: bb16];
    }

    bb179: {
        StorageLive(_452);
        _452 = ((_415 as Continue).0: ());
        _414 = _452;
        StorageDead(_452);
        StorageDead(_415);
        StorageDead(_414);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = &_56;
        _459 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _460) -> [return: bb182, unwind: bb282];
    }

    bb180: {
        StorageLive(_449);
        _449 = ((_415 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_451);
        _451 = _449;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _451) -> [return: bb181, unwind: bb282];
    }

    bb181: {
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_415);
        StorageDead(_414);
        goto -> bb260;
    }

    bb182: {
        StorageDead(_460);
        _458 = &((*_459).7: anchor_lang::prelude::Pubkey);
        _457 = &_458;
        StorageLive(_461);
        _655 = deref_copy (*_39);
        _461 = &((*_655).0: &anchor_lang::prelude::Pubkey);
        _456 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _457, move _461) -> [return: bb183, unwind: bb282];
    }

    bb183: {
        switchInt(move _456) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        StorageDead(_461);
        StorageDead(_459);
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_462);
        _462 = ();
        _455 = std::result::Result::<(), error::ErrorCode>::Ok(move _462);
        StorageDead(_462);
        goto -> bb193;
    }

    bb185: {
        StorageDead(_461);
        StorageDead(_459);
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_463);
        _463 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        _633 = const _;
        _474 = &(*_633);
        _473 = &(*_474);
        _472 = move _473 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_473);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &_463;
        _481 = &(*_482);
        _480 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _481) -> [return: bb186, unwind: bb282];
    }

    bb186: {
        StorageDead(_481);
        _479 = [move _480];
        StorageDead(_480);
        _478 = &_479;
        _477 = &(*_478);
        _476 = move _477 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_477);
        _471 = Arguments::<'_>::new_v1(move _472, move _476) -> [return: bb187, unwind: bb282];
    }

    bb187: {
        StorageDead(_476);
        StorageDead(_472);
        _470 = format(move _471) -> [return: bb188, unwind: bb282];
    }

    bb188: {
        StorageDead(_471);
        StorageDead(_482);
        StorageDead(_479);
        StorageDead(_478);
        StorageDead(_474);
        _469 = move _470;
        StorageDead(_470);
        _468 = &_469;
        _467 = &(*_468);
        _466 = <String as Deref>::deref(move _467) -> [return: bb189, unwind: bb270];
    }

    bb189: {
        _465 = &(*_466);
        StorageDead(_467);
        _464 = solana_program::log::sol_log(move _465) -> [return: bb190, unwind: bb270];
    }

    bb190: {
        StorageDead(_465);
        drop(_469) -> [return: bb191, unwind: bb282];
    }

    bb191: {
        StorageDead(_469);
        StorageDead(_468);
        StorageDead(_466);
        StorageDead(_464);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        _485 = const "OpenbookV2 quote vault key does not match";
        _484 = &(*_485);
        _483 = solana_program::log::sol_log(move _484) -> [return: bb192, unwind: bb282];
    }

    bb192: {
        StorageDead(_484);
        StorageDead(_485);
        StorageDead(_483);
        StorageLive(_486);
        _486 = _463;
        _455 = std::result::Result::<(), error::ErrorCode>::Err(move _486);
        StorageDead(_486);
        StorageDead(_463);
        goto -> bb193;
    }

    bb193: {
        StorageDead(_456);
        _454 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _455) -> [return: bb194, unwind: bb282];
    }

    bb194: {
        StorageDead(_455);
        _487 = discriminant(_454);
        switchInt(move _487) -> [0: bb195, 1: bb196, otherwise: bb16];
    }

    bb195: {
        StorageLive(_491);
        _491 = ((_454 as Continue).0: ());
        _453 = _491;
        StorageDead(_491);
        StorageDead(_454);
        StorageDead(_453);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = &_56;
        _498 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _499) -> [return: bb198, unwind: bb282];
    }

    bb196: {
        StorageLive(_488);
        _488 = ((_454 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_490);
        _490 = _488;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _490) -> [return: bb197, unwind: bb282];
    }

    bb197: {
        StorageDead(_490);
        StorageDead(_488);
        StorageDead(_454);
        StorageDead(_453);
        goto -> bb260;
    }

    bb198: {
        StorageDead(_499);
        _497 = &((*_498).8: anchor_lang::prelude::Pubkey);
        _496 = &_497;
        StorageLive(_500);
        _656 = deref_copy (*_40);
        _500 = &((*_656).0: &anchor_lang::prelude::Pubkey);
        _495 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _496, move _500) -> [return: bb199, unwind: bb282];
    }

    bb199: {
        switchInt(move _495) -> [0: bb201, otherwise: bb200];
    }

    bb200: {
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_497);
        StorageDead(_496);
        StorageLive(_501);
        _501 = ();
        _494 = std::result::Result::<(), error::ErrorCode>::Ok(move _501);
        StorageDead(_501);
        goto -> bb209;
    }

    bb201: {
        StorageDead(_500);
        StorageDead(_498);
        StorageDead(_497);
        StorageDead(_496);
        StorageLive(_502);
        _502 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        _632 = const _;
        _513 = &(*_632);
        _512 = &(*_513);
        _511 = move _512 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_512);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        _521 = &_502;
        _520 = &(*_521);
        _519 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _520) -> [return: bb202, unwind: bb282];
    }

    bb202: {
        StorageDead(_520);
        _518 = [move _519];
        StorageDead(_519);
        _517 = &_518;
        _516 = &(*_517);
        _515 = move _516 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_516);
        _510 = Arguments::<'_>::new_v1(move _511, move _515) -> [return: bb203, unwind: bb282];
    }

    bb203: {
        StorageDead(_515);
        StorageDead(_511);
        _509 = format(move _510) -> [return: bb204, unwind: bb282];
    }

    bb204: {
        StorageDead(_510);
        StorageDead(_521);
        StorageDead(_518);
        StorageDead(_517);
        StorageDead(_513);
        _508 = move _509;
        StorageDead(_509);
        _507 = &_508;
        _506 = &(*_507);
        _505 = <String as Deref>::deref(move _506) -> [return: bb205, unwind: bb269];
    }

    bb205: {
        _504 = &(*_505);
        StorageDead(_506);
        _503 = solana_program::log::sol_log(move _504) -> [return: bb206, unwind: bb269];
    }

    bb206: {
        StorageDead(_504);
        drop(_508) -> [return: bb207, unwind: bb282];
    }

    bb207: {
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_505);
        StorageDead(_503);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = const "OpenbookV2 quote vault key does not match";
        _523 = &(*_524);
        _522 = solana_program::log::sol_log(move _523) -> [return: bb208, unwind: bb282];
    }

    bb208: {
        StorageDead(_523);
        StorageDead(_524);
        StorageDead(_522);
        StorageLive(_525);
        _525 = _502;
        _494 = std::result::Result::<(), error::ErrorCode>::Err(move _525);
        StorageDead(_525);
        StorageDead(_502);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_495);
        _493 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _494) -> [return: bb210, unwind: bb282];
    }

    bb210: {
        StorageDead(_494);
        _526 = discriminant(_493);
        switchInt(move _526) -> [0: bb211, 1: bb212, otherwise: bb16];
    }

    bb211: {
        StorageLive(_530);
        _530 = ((_493 as Continue).0: ());
        _492 = _530;
        StorageDead(_530);
        StorageDead(_493);
        StorageDead(_492);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _538 = &_56;
        _537 = <Ref<'_, OpenbookV2FulfillmentConfig> as Deref>::deref(move _538) -> [return: bb214, unwind: bb282];
    }

    bb212: {
        StorageLive(_527);
        _527 = ((_493 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_529);
        _529 = _527;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _529) -> [return: bb213, unwind: bb282];
    }

    bb213: {
        StorageDead(_529);
        StorageDead(_527);
        StorageDead(_493);
        StorageDead(_492);
        goto -> bb260;
    }

    bb214: {
        StorageDead(_538);
        _536 = &((*_537).2: anchor_lang::prelude::Pubkey);
        _535 = &_536;
        StorageLive(_539);
        _657 = deref_copy (*_34);
        _539 = &((*_657).0: &anchor_lang::prelude::Pubkey);
        _534 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _535, move _539) -> [return: bb215, unwind: bb282];
    }

    bb215: {
        switchInt(move _534) -> [0: bb217, otherwise: bb216];
    }

    bb216: {
        StorageDead(_539);
        StorageDead(_537);
        StorageDead(_536);
        StorageDead(_535);
        StorageLive(_540);
        _540 = ();
        _533 = std::result::Result::<(), error::ErrorCode>::Ok(move _540);
        StorageDead(_540);
        goto -> bb224;
    }

    bb217: {
        StorageDead(_539);
        StorageDead(_537);
        StorageDead(_536);
        StorageDead(_535);
        StorageLive(_541);
        _541 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        _631 = const _;
        _552 = &(*_631);
        _551 = &(*_552);
        _550 = move _551 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_551);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        _560 = &_541;
        _559 = &(*_560);
        _558 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _559) -> [return: bb218, unwind: bb282];
    }

    bb218: {
        StorageDead(_559);
        _557 = [move _558];
        StorageDead(_558);
        _556 = &_557;
        _555 = &(*_556);
        _554 = move _555 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_555);
        _549 = Arguments::<'_>::new_v1(move _550, move _554) -> [return: bb219, unwind: bb282];
    }

    bb219: {
        StorageDead(_554);
        StorageDead(_550);
        _548 = format(move _549) -> [return: bb220, unwind: bb282];
    }

    bb220: {
        StorageDead(_549);
        StorageDead(_560);
        StorageDead(_557);
        StorageDead(_556);
        StorageDead(_552);
        _547 = move _548;
        StorageDead(_548);
        _546 = &_547;
        _545 = &(*_546);
        _544 = <String as Deref>::deref(move _545) -> [return: bb221, unwind: bb268];
    }

    bb221: {
        _543 = &(*_544);
        StorageDead(_545);
        _542 = solana_program::log::sol_log(move _543) -> [return: bb222, unwind: bb268];
    }

    bb222: {
        StorageDead(_543);
        drop(_547) -> [return: bb223, unwind: bb282];
    }

    bb223: {
        StorageDead(_547);
        StorageDead(_546);
        StorageDead(_544);
        StorageDead(_542);
        StorageLive(_561);
        _561 = _541;
        _533 = std::result::Result::<(), error::ErrorCode>::Err(move _561);
        StorageDead(_561);
        StorageDead(_541);
        goto -> bb224;
    }

    bb224: {
        StorageDead(_534);
        _532 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _533) -> [return: bb225, unwind: bb282];
    }

    bb225: {
        StorageDead(_533);
        _562 = discriminant(_532);
        switchInt(move _562) -> [0: bb226, 1: bb227, otherwise: bb16];
    }

    bb226: {
        StorageLive(_566);
        _566 = ((_532 as Continue).0: ());
        _531 = _566;
        StorageDead(_566);
        StorageDead(_532);
        StorageDead(_531);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _658 = deref_copy (*_41);
        _572 = &(*_658);
        _571 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::try_from(move _572) -> [return: bb229, unwind: bb282];
    }

    bb227: {
        StorageLive(_563);
        _563 = ((_532 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_565);
        _565 = _563;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _565) -> [return: bb228, unwind: bb282];
    }

    bb228: {
        StorageDead(_565);
        StorageDead(_563);
        StorageDead(_532);
        StorageDead(_531);
        goto -> bb260;
    }

    bb229: {
        StorageDead(_572);
        StorageLive(_573);
        _573 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:215:67: 215:70};
        _570 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:215:67: 215:70}>(move _571, move _573) -> [return: bb230, unwind: bb282];
    }

    bb230: {
        StorageDead(_573);
        StorageDead(_571);
        _569 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as Try>::branch(move _570) -> [return: bb231, unwind: bb282];
    }

    bb231: {
        StorageDead(_570);
        _574 = discriminant(_569);
        switchInt(move _574) -> [0: bb232, 1: bb233, otherwise: bb16];
    }

    bb232: {
        StorageLive(_578);
        _578 = move ((_569 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _568 = move _578;
        StorageDead(_578);
        _567 = Box::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>::new(move _568) -> [return: bb235, unwind: bb282];
    }

    bb233: {
        StorageLive(_575);
        _575 = ((_569 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_577);
        _577 = _575;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _577) -> [return: bb234, unwind: bb282];
    }

    bb234: {
        StorageDead(_577);
        StorageDead(_575);
        StorageDead(_568);
        StorageDead(_569);
        goto -> bb259;
    }

    bb235: {
        StorageDead(_568);
        StorageDead(_569);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        _659 = deref_copy (*_42);
        _584 = &(*_659);
        _583 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::try_from(move _584) -> [return: bb236, unwind: bb267];
    }

    bb236: {
        StorageDead(_584);
        StorageLive(_585);
        _585 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:220:68: 220:71};
        _582 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:220:68: 220:71}>(move _583, move _585) -> [return: bb237, unwind: bb267];
    }

    bb237: {
        StorageDead(_585);
        StorageDead(_583);
        _581 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as Try>::branch(move _582) -> [return: bb238, unwind: bb267];
    }

    bb238: {
        StorageDead(_582);
        _586 = discriminant(_581);
        switchInt(move _586) -> [0: bb239, 1: bb240, otherwise: bb16];
    }

    bb239: {
        StorageLive(_590);
        _590 = move ((_581 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _580 = move _590;
        StorageDead(_590);
        _579 = Box::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>::new(move _580) -> [return: bb242, unwind: bb267];
    }

    bb240: {
        StorageLive(_587);
        _587 = ((_581 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_589);
        _589 = _587;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _589) -> [return: bb241, unwind: bb267];
    }

    bb241: {
        StorageDead(_589);
        StorageDead(_587);
        StorageDead(_580);
        StorageDead(_581);
        goto -> bb258;
    }

    bb242: {
        StorageDead(_580);
        StorageDead(_581);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        _595 = (*_43);
        _594 = <anchor_lang::prelude::Program<'_, Token> as TryFrom<&anchor_lang::prelude::AccountInfo<'_>>>::try_from(move _595) -> [return: bb243, unwind: bb266];
    }

    bb243: {
        StorageDead(_595);
        StorageLive(_596);
        _596 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:224:87: 224:90};
        _593 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:224:87: 224:90}>(move _594, move _596) -> [return: bb244, unwind: bb266];
    }

    bb244: {
        StorageDead(_596);
        StorageDead(_594);
        _592 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, error::ErrorCode> as Try>::branch(move _593) -> [return: bb245, unwind: bb266];
    }

    bb245: {
        StorageDead(_593);
        _597 = discriminant(_592);
        switchInt(move _597) -> [0: bb246, 1: bb247, otherwise: bb16];
    }

    bb246: {
        StorageLive(_601);
        _601 = move ((_592 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _591 = move _601;
        StorageDead(_601);
        StorageDead(_592);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        _606 = (*_44);
        _605 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as TryFrom<&anchor_lang::prelude::AccountInfo<'_>>>::try_from(move _606) -> [return: bb249, unwind: bb266];
    }

    bb247: {
        StorageLive(_598);
        _598 = ((_592 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_600);
        _600 = _598;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _600) -> [return: bb248, unwind: bb266];
    }

    bb248: {
        StorageDead(_600);
        StorageDead(_598);
        StorageDead(_592);
        goto -> bb257;
    }

    bb249: {
        StorageDead(_606);
        StorageLive(_607);
        _607 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:228:90: 228:93};
        _604 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:228:90: 228:93}>(move _605, move _607) -> [return: bb250, unwind: bb266];
    }

    bb250: {
        StorageDead(_607);
        StorageDead(_605);
        _603 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, error::ErrorCode> as Try>::branch(move _604) -> [return: bb251, unwind: bb266];
    }

    bb251: {
        StorageDead(_604);
        _608 = discriminant(_603);
        switchInt(move _608) -> [0: bb252, 1: bb253, otherwise: bb16];
    }

    bb252: {
        StorageLive(_612);
        _612 = move ((_603 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _602 = move _612;
        StorageDead(_612);
        StorageDead(_603);
        StorageLive(_613);
        StorageLive(_614);
        _660 = deref_copy (*_32);
        _614 = &(*_660);
        StorageLive(_615);
        StorageLive(_616);
        _661 = deref_copy (*_33);
        _616 = &(*_661);
        StorageLive(_617);
        _662 = deref_copy (*_34);
        _617 = &(*_662);
        _615 = OpenbookV2Context::<'_, '_> { openbook_v2_program: move _616, openbook_v2_market: move _617 };
        StorageDead(_617);
        StorageDead(_616);
        StorageLive(_618);
        _663 = deref_copy (*_35);
        _618 = &(*_663);
        StorageLive(_619);
        _664 = deref_copy (*_36);
        _619 = &(*_664);
        StorageLive(_620);
        _665 = deref_copy (*_37);
        _620 = &(*_665);
        StorageLive(_621);
        _666 = deref_copy (*_38);
        _621 = &(*_666);
        StorageLive(_622);
        _667 = deref_copy (*_39);
        _622 = &(*_667);
        StorageLive(_623);
        _668 = deref_copy (*_40);
        _623 = &(*_668);
        StorageLive(_624);
        _624 = move _567;
        StorageLive(_625);
        _625 = move _579;
        StorageLive(_626);
        _626 = move _591;
        StorageLive(_627);
        _627 = move _602;
        StorageLive(_628);
        _628 = ((*_2).15: u8);
        StorageLive(_629);
        _629 = _5;
        StorageLive(_630);
        _669 = const false;
        _630 = move _8;
        _613 = OpenbookV2FulfillmentParams::<'_, '_> { drift_signer: move _614, openbook_v2_context: move _615, openbook_v2_market_authority: move _618, openbook_v2_event_heap: move _619, openbook_v2_bids: move _620, openbook_v2_asks: move _621, openbook_v2_base_vault: move _622, openbook_v2_quote_vault: move _623, base_market_vault: move _624, quote_market_vault: move _625, token_program: move _626, system_program: move _627, signer_nonce: move _628, now: move _629, remaining_ooa_accounts: move _630 };
        StorageDead(_630);
        StorageDead(_629);
        StorageDead(_628);
        StorageDead(_627);
        StorageDead(_626);
        StorageDead(_625);
        StorageDead(_624);
        StorageDead(_623);
        StorageDead(_622);
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_619);
        StorageDead(_618);
        StorageDead(_615);
        StorageDead(_614);
        _0 = std::result::Result::<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode>::Ok(move _613);
        StorageDead(_613);
        StorageDead(_602);
        StorageDead(_591);
        StorageDead(_579);
        StorageDead(_567);
        drop(_56) -> [return: bb255, unwind: bb287];
    }

    bb253: {
        StorageLive(_609);
        _609 = ((_603 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_611);
        _611 = _609;
        _0 = <std::result::Result<OpenbookV2FulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _611) -> [return: bb254, unwind: bb266];
    }

    bb254: {
        StorageDead(_611);
        StorageDead(_609);
        StorageDead(_603);
        StorageDead(_602);
        goto -> bb257;
    }

    bb255: {
        StorageDead(_56);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_20);
        _669 = const false;
        StorageDead(_8);
        drop(_6) -> [return: bb256, unwind: bb284];
    }

    bb256: {
        StorageDead(_6);
        goto -> bb265;
    }

    bb257: {
        StorageDead(_591);
        drop(_579) -> [return: bb258, unwind: bb267];
    }

    bb258: {
        StorageDead(_579);
        drop(_567) -> [return: bb259, unwind: bb282];
    }

    bb259: {
        StorageDead(_567);
        goto -> bb260;
    }

    bb260: {
        drop(_56) -> [return: bb261, unwind: bb287];
    }

    bb261: {
        StorageDead(_56);
        goto -> bb262;
    }

    bb262: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_20);
        drop(_8) -> [return: bb263, unwind: bb283];
    }

    bb263: {
        _669 = const false;
        StorageDead(_8);
        drop(_6) -> [return: bb264, unwind: bb284];
    }

    bb264: {
        StorageDead(_6);
        goto -> bb265;
    }

    bb265: {
        return;
    }

    bb266 (cleanup): {
        drop(_579) -> [return: bb267, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        drop(_567) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        drop(_547) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        drop(_508) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        drop(_469) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_430) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_391) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        drop(_352) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        drop(_316) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        drop(_280) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        drop(_244) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        drop(_210) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        drop(_171) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb279 (cleanup): {
        drop(_152) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb280 (cleanup): {
        drop(_117) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb281 (cleanup): {
        drop(_83) -> [return: bb282, unwind terminate(cleanup)];
    }

    bb282 (cleanup): {
        drop(_56) -> [return: bb287, unwind terminate(cleanup)];
    }

    bb283 (cleanup): {
        drop(_6) -> [return: bb284, unwind terminate(cleanup)];
    }

    bb284 (cleanup): {
        resume;
    }

    bb285 (cleanup): {
        _674 = discriminant(_57);
        goto -> bb287;
    }

    bb286 (cleanup): {
        drop(_8) -> [return: bb283, unwind terminate(cleanup)];
    }

    bb287 (cleanup): {
        switchInt(_669) -> [0: bb283, otherwise: bb286];
    }
}
