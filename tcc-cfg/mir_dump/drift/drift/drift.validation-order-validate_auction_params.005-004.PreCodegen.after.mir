// MIR for `validate_auction_params` after PreCodegen

fn validate_auction_params(_1: &Order) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: i64;
    let mut _7: ();
    let _8: error::ErrorCode;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 2];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let mut _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &error::ErrorCode;
    let _27: &error::ErrorCode;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: error::ErrorCode;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: ();
    let _37: ();
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _39: std::result::Result<(), error::ErrorCode>;
    let mut _40: bool;
    let mut _41: i64;
    let mut _42: ();
    let _43: error::ErrorCode;
    let _44: ();
    let mut _45: &str;
    let _46: &str;
    let mut _47: &std::string::String;
    let _48: &std::string::String;
    let _49: std::string::String;
    let mut _51: std::fmt::Arguments<'_>;
    let mut _52: &[&str];
    let mut _53: &[&str; 2];
    let _54: &[&str; 2];
    let _55: [&str; 2];
    let mut _56: &[core::fmt::rt::Argument<'_>];
    let mut _57: &[core::fmt::rt::Argument<'_>; 1];
    let _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: [core::fmt::rt::Argument<'_>; 1];
    let mut _60: core::fmt::rt::Argument<'_>;
    let mut _61: &error::ErrorCode;
    let _62: &error::ErrorCode;
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: error::ErrorCode;
    let mut _67: isize;
    let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _71: ();
    let _72: ();
    let mut _73: isize;
    let _74: ();
    let mut _75: bool;
    let mut _76: i64;
    let mut _77: i64;
    let mut _78: !;
    let _79: ();
    let mut _80: &str;
    let _81: &str;
    let mut _82: &std::string::String;
    let _83: &std::string::String;
    let _84: std::string::String;
    let _85: std::string::String;
    let mut _86: std::fmt::Arguments<'_>;
    let mut _87: &[&str];
    let mut _88: &[&str; 3];
    let _89: &[&str; 3];
    let _90: [&str; 3];
    let mut _91: &[core::fmt::rt::Argument<'_>];
    let mut _92: &[core::fmt::rt::Argument<'_>; 2];
    let _93: &[core::fmt::rt::Argument<'_>; 2];
    let _94: [core::fmt::rt::Argument<'_>; 2];
    let mut _95: core::fmt::rt::Argument<'_>;
    let mut _96: &i64;
    let _97: &i64;
    let mut _98: core::fmt::rt::Argument<'_>;
    let mut _99: &i64;
    let _100: &i64;
    let mut _101: error::ErrorCode;
    let mut _102: bool;
    let mut _103: u64;
    let mut _104: bool;
    let mut _105: u64;
    let mut _106: u64;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _108: std::result::Result<u64, error::ErrorCode>;
    let mut _109: i64;
    let mut _110: isize;
    let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _114: u64;
    let mut _115: !;
    let _116: ();
    let mut _117: &str;
    let _118: &str;
    let mut _119: &std::string::String;
    let _120: &std::string::String;
    let _121: std::string::String;
    let _122: std::string::String;
    let mut _123: std::fmt::Arguments<'_>;
    let mut _124: &[&str];
    let mut _125: &[&str; 3];
    let _126: &[&str; 3];
    let _127: [&str; 3];
    let mut _128: &[core::fmt::rt::Argument<'_>];
    let mut _129: &[core::fmt::rt::Argument<'_>; 2];
    let _130: &[core::fmt::rt::Argument<'_>; 2];
    let _131: [core::fmt::rt::Argument<'_>; 2];
    let mut _132: core::fmt::rt::Argument<'_>;
    let mut _133: &u64;
    let _134: &u64;
    let mut _135: core::fmt::rt::Argument<'_>;
    let mut _136: &i64;
    let _137: &i64;
    let mut _138: error::ErrorCode;
    let _139: ();
    let mut _140: bool;
    let mut _141: i64;
    let mut _142: i64;
    let mut _143: !;
    let _144: ();
    let mut _145: &str;
    let _146: &str;
    let mut _147: &std::string::String;
    let _148: &std::string::String;
    let _149: std::string::String;
    let _150: std::string::String;
    let mut _151: std::fmt::Arguments<'_>;
    let mut _152: &[&str];
    let mut _153: &[&str; 3];
    let _154: &[&str; 3];
    let _155: [&str; 3];
    let mut _156: &[core::fmt::rt::Argument<'_>];
    let mut _157: &[core::fmt::rt::Argument<'_>; 2];
    let _158: &[core::fmt::rt::Argument<'_>; 2];
    let _159: [core::fmt::rt::Argument<'_>; 2];
    let mut _160: core::fmt::rt::Argument<'_>;
    let mut _161: &i64;
    let _162: &i64;
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &i64;
    let _165: &i64;
    let mut _166: error::ErrorCode;
    let mut _167: bool;
    let mut _168: u64;
    let mut _169: bool;
    let mut _170: u64;
    let mut _171: u64;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _173: std::result::Result<u64, error::ErrorCode>;
    let mut _174: i64;
    let mut _175: isize;
    let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _179: u64;
    let mut _180: !;
    let _181: ();
    let mut _182: &str;
    let _183: &str;
    let mut _184: &std::string::String;
    let _185: &std::string::String;
    let _186: std::string::String;
    let _187: std::string::String;
    let mut _188: std::fmt::Arguments<'_>;
    let mut _189: &[&str];
    let mut _190: &[&str; 3];
    let _191: &[&str; 3];
    let _192: [&str; 3];
    let mut _193: &[core::fmt::rt::Argument<'_>];
    let mut _194: &[core::fmt::rt::Argument<'_>; 2];
    let _195: &[core::fmt::rt::Argument<'_>; 2];
    let _196: [core::fmt::rt::Argument<'_>; 2];
    let mut _197: core::fmt::rt::Argument<'_>;
    let mut _198: &u64;
    let _199: &u64;
    let mut _200: core::fmt::rt::Argument<'_>;
    let mut _201: &i64;
    let _202: &i64;
    let mut _203: error::ErrorCode;
    let mut _204: ();
    let mut _205: &[&str; 3];
    let mut _206: &[&str; 3];
    let mut _207: &[&str; 3];
    let mut _208: &[&str; 3];
    scope 1 {
        debug error_code => _8;
        let _15: std::string::String;
        let mut _210: &[&str; 2];
        scope 2 {
            debug res => _15;
        }
    }
    scope 3 {
        debug residual => _33;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _36;
        scope 6 {
        }
    }
    scope 7 {
        debug error_code => _43;
        let _50: std::string::String;
        let mut _209: &[&str; 2];
        scope 8 {
            debug res => _50;
        }
    }
    scope 9 {
        debug residual => _68;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _71;
        scope 12 {
        }
    }
    scope 13 {
        debug res => _85;
    }
    scope 14 {
        debug residual => _111;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _114;
        scope 17 {
        }
    }
    scope 18 {
        debug res => _122;
    }
    scope 19 {
        debug res => _150;
    }
    scope 20 {
        debug residual => _176;
        scope 21 {
        }
    }
    scope 22 {
        debug val => _179;
        scope 23 {
        }
    }
    scope 24 {
        debug res => _187;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).6: i64);
        _5 = Ne(move _6, const 0_i64);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        _7 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb10;
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = error::ErrorCode::InvalidOrderAuction;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _210 = const _;
        _19 = &(*_210);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &_8;
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _26) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_26);
        _24 = [move _25];
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <String as Deref>::deref(move _12) -> [return: bb6, unwind: bb94];
    }

    bb6: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb7, unwind: bb94];
    }

    bb7: {
        StorageDead(_10);
        drop(_14) -> [return: bb8, unwind: bb95];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = const "Auction start price was 0";
        _29 = &(*_30);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_31);
        _31 = _8;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _31);
        StorageDead(_31);
        StorageDead(_8);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_4);
        _32 = discriminant(_3);
        switchInt(move _32) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_36);
        _36 = ((_3 as Continue).0: ());
        _2 = _36;
        StorageDead(_36);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = ((*_1).7: i64);
        _40 = Ne(move _41, const 0_i64);
        switchInt(move _40) -> [0: bb17, otherwise: bb16];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_33);
        _33 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb88;
    }

    bb16: {
        StorageDead(_41);
        StorageLive(_42);
        _42 = ();
        _39 = std::result::Result::<(), error::ErrorCode>::Ok(move _42);
        StorageDead(_42);
        goto -> bb25;
    }

    bb17: {
        StorageDead(_41);
        StorageLive(_43);
        _43 = error::ErrorCode::InvalidOrderAuction;
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _209 = const _;
        _54 = &(*_209);
        _53 = &(*_54);
        _52 = move _53 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_53);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_43;
        _61 = &(*_62);
        _60 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _61) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_61);
        _59 = [move _60];
        StorageDead(_60);
        _58 = &_59;
        _57 = &(*_58);
        _56 = move _57 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_57);
        _51 = Arguments::<'_>::new_v1(move _52, move _56) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_56);
        StorageDead(_52);
        _50 = format(move _51) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_51);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_54);
        _49 = move _50;
        StorageDead(_50);
        _48 = &_49;
        _47 = &(*_48);
        _46 = <String as Deref>::deref(move _47) -> [return: bb21, unwind: bb93];
    }

    bb21: {
        _45 = &(*_46);
        StorageDead(_47);
        _44 = solana_program::log::sol_log(move _45) -> [return: bb22, unwind: bb93];
    }

    bb22: {
        StorageDead(_45);
        drop(_49) -> [return: bb23, unwind: bb95];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = const "Auction end price was 0";
        _64 = &(*_65);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_64);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_66);
        _66 = _43;
        _39 = std::result::Result::<(), error::ErrorCode>::Err(move _66);
        StorageDead(_66);
        StorageDead(_43);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_40);
        _38 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _39) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_39);
        _67 = discriminant(_38);
        switchInt(move _67) -> [0: bb27, 1: bb28, otherwise: bb13];
    }

    bb27: {
        StorageLive(_71);
        _71 = ((_38 as Continue).0: ());
        _37 = _71;
        StorageDead(_71);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_72);
        _73 = discriminant(((*_1).17: controller::position::PositionDirection));
        switchInt(move _73) -> [0: bb31, 1: bb30, otherwise: bb13];
    }

    bb28: {
        StorageLive(_68);
        _68 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb88;
    }

    bb30: {
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _141 = ((*_1).6: i64);
        StorageLive(_142);
        _142 = ((*_1).7: i64);
        _140 = Lt(move _141, move _142);
        switchInt(move _140) -> [0: bb66, otherwise: bb58];
    }

    bb31: {
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = ((*_1).6: i64);
        StorageLive(_77);
        _77 = ((*_1).7: i64);
        _75 = Gt(move _76, move _77);
        switchInt(move _75) -> [0: bb40, otherwise: bb32];
    }

    bb32: {
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _207 = const _;
        _89 = &(*_207);
        _88 = &(*_89);
        _87 = move _88 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &((*_1).6: i64);
        _96 = &(*_97);
        _95 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _96) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_96);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &((*_1).7: i64);
        _99 = &(*_100);
        _98 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _99) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_99);
        _94 = [move _95, move _98];
        StorageDead(_98);
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        _91 = move _92 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_92);
        _86 = Arguments::<'_>::new_v1(move _87, move _91) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_91);
        StorageDead(_87);
        _85 = format(move _86) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_86);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_89);
        _84 = move _85;
        StorageDead(_85);
        _83 = &_84;
        _82 = &(*_83);
        _81 = <String as Deref>::deref(move _82) -> [return: bb37, unwind: bb92];
    }

    bb37: {
        _80 = &(*_81);
        StorageDead(_82);
        _79 = solana_program::log::sol_log(move _80) -> [return: bb38, unwind: bb92];
    }

    bb38: {
        StorageDead(_80);
        drop(_84) -> [return: bb39, unwind: bb95];
    }

    bb39: {
        StorageDead(_84);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageLive(_101);
        _101 = error::ErrorCode::InvalidOrderAuction;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _101);
        StorageDead(_101);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb87;
    }

    bb40: {
        StorageDead(_77);
        StorageDead(_76);
        _74 = const ();
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_102);
        StorageLive(_103);
        _103 = ((*_1).1: u64);
        _102 = Ne(move _103, const 0_u64);
        switchInt(move _102) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = ((*_1).1: u64);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = ((*_1).7: i64);
        _108 = <i64 as Cast>::cast::<u64>(move _109) -> [return: bb43, unwind continue];
    }

    bb42: {
        StorageDead(_103);
        goto -> bb57;
    }

    bb43: {
        StorageDead(_109);
        _107 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _108) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_108);
        _110 = discriminant(_107);
        switchInt(move _110) -> [0: bb45, 1: bb46, otherwise: bb13];
    }

    bb45: {
        StorageLive(_114);
        _114 = ((_107 as Continue).0: u64);
        _106 = _114;
        StorageDead(_114);
        _104 = Lt(move _105, move _106);
        switchInt(move _104) -> [0: bb49, otherwise: bb48];
    }

    bb46: {
        StorageLive(_111);
        _111 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb86;
    }

    bb48: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _208 = const _;
        _126 = &(*_208);
        _125 = &(*_126);
        _124 = move _125 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_125);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &((*_1).1: u64);
        _133 = &(*_134);
        _132 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _133) -> [return: bb50, unwind continue];
    }

    bb49: {
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb57;
    }

    bb50: {
        StorageDead(_133);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &((*_1).7: i64);
        _136 = &(*_137);
        _135 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _136) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_136);
        _131 = [move _132, move _135];
        StorageDead(_135);
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = move _129 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_129);
        _123 = Arguments::<'_>::new_v1(move _124, move _128) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_128);
        StorageDead(_124);
        _122 = format(move _123) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_123);
        StorageDead(_137);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_126);
        _121 = move _122;
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = <String as Deref>::deref(move _119) -> [return: bb54, unwind: bb91];
    }

    bb54: {
        _117 = &(*_118);
        StorageDead(_119);
        _116 = solana_program::log::sol_log(move _117) -> [return: bb55, unwind: bb91];
    }

    bb55: {
        StorageDead(_117);
        drop(_121) -> [return: bb56, unwind: bb95];
    }

    bb56: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageLive(_138);
        _138 = error::ErrorCode::InvalidOrderAuction;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _138);
        StorageDead(_138);
        goto -> bb86;
    }

    bb57: {
        _72 = const ();
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb84;
    }

    bb58: {
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _205 = const _;
        _154 = &(*_205);
        _153 = &(*_154);
        _152 = move _153 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_153);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &((*_1).6: i64);
        _161 = &(*_162);
        _160 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _161) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_161);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &((*_1).7: i64);
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _164) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_164);
        _159 = [move _160, move _163];
        StorageDead(_163);
        StorageDead(_160);
        _158 = &_159;
        _157 = &(*_158);
        _156 = move _157 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_157);
        _151 = Arguments::<'_>::new_v1(move _152, move _156) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_156);
        StorageDead(_152);
        _150 = format(move _151) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_151);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_154);
        _149 = move _150;
        StorageDead(_150);
        _148 = &_149;
        _147 = &(*_148);
        _146 = <String as Deref>::deref(move _147) -> [return: bb63, unwind: bb90];
    }

    bb63: {
        _145 = &(*_146);
        StorageDead(_147);
        _144 = solana_program::log::sol_log(move _145) -> [return: bb64, unwind: bb90];
    }

    bb64: {
        StorageDead(_145);
        drop(_149) -> [return: bb65, unwind: bb95];
    }

    bb65: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_144);
        StorageLive(_166);
        _166 = error::ErrorCode::InvalidOrderAuction;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _166);
        StorageDead(_166);
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb87;
    }

    bb66: {
        StorageDead(_142);
        StorageDead(_141);
        _139 = const ();
        StorageDead(_140);
        StorageDead(_139);
        StorageLive(_167);
        StorageLive(_168);
        _168 = ((*_1).1: u64);
        _167 = Ne(move _168, const 0_u64);
        switchInt(move _167) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        StorageDead(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = ((*_1).1: u64);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = ((*_1).7: i64);
        _173 = <i64 as Cast>::cast::<u64>(move _174) -> [return: bb69, unwind continue];
    }

    bb68: {
        StorageDead(_168);
        goto -> bb83;
    }

    bb69: {
        StorageDead(_174);
        _172 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _173) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_173);
        _175 = discriminant(_172);
        switchInt(move _175) -> [0: bb71, 1: bb72, otherwise: bb13];
    }

    bb71: {
        StorageLive(_179);
        _179 = ((_172 as Continue).0: u64);
        _171 = _179;
        StorageDead(_179);
        _169 = Gt(move _170, move _171);
        switchInt(move _169) -> [0: bb75, otherwise: bb74];
    }

    bb72: {
        StorageLive(_176);
        _176 = ((_172 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb85;
    }

    bb74: {
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _206 = const _;
        _191 = &(*_206);
        _190 = &(*_191);
        _189 = move _190 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_190);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &((*_1).1: u64);
        _198 = &(*_199);
        _197 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _198) -> [return: bb76, unwind continue];
    }

    bb75: {
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb83;
    }

    bb76: {
        StorageDead(_198);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &((*_1).7: i64);
        _201 = &(*_202);
        _200 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _201) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_201);
        _196 = [move _197, move _200];
        StorageDead(_200);
        StorageDead(_197);
        _195 = &_196;
        _194 = &(*_195);
        _193 = move _194 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_194);
        _188 = Arguments::<'_>::new_v1(move _189, move _193) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_193);
        StorageDead(_189);
        _187 = format(move _188) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_188);
        StorageDead(_202);
        StorageDead(_199);
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_191);
        _186 = move _187;
        StorageDead(_187);
        _185 = &_186;
        _184 = &(*_185);
        _183 = <String as Deref>::deref(move _184) -> [return: bb80, unwind: bb89];
    }

    bb80: {
        _182 = &(*_183);
        StorageDead(_184);
        _181 = solana_program::log::sol_log(move _182) -> [return: bb81, unwind: bb89];
    }

    bb81: {
        StorageDead(_182);
        drop(_186) -> [return: bb82, unwind: bb95];
    }

    bb82: {
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_181);
        StorageLive(_203);
        _203 = error::ErrorCode::InvalidOrderAuction;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _203);
        StorageDead(_203);
        goto -> bb85;
    }

    bb83: {
        _72 = const ();
        StorageDead(_169);
        StorageDead(_167);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_72);
        StorageLive(_204);
        _204 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _204);
        StorageDead(_204);
        goto -> bb88;
    }

    bb85: {
        StorageDead(_169);
        StorageDead(_167);
        goto -> bb87;
    }

    bb86: {
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_72);
        goto -> bb88;
    }

    bb88: {
        return;
    }

    bb89 (cleanup): {
        drop(_186) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        drop(_149) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        drop(_121) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_84) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        drop(_49) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb94 (cleanup): {
        drop(_14) -> [return: bb95, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        resume;
    }
}
