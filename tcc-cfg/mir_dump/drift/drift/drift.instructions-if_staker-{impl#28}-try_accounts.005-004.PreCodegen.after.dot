digraph Mir_0_8887 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(_1: &amp;ReErased anchor_lang::prelude::Pubkey, _2: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;], _3: &amp;ReErased [u8], _4: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps, _5: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;) -&gt; std::result::Result&lt;instructions::if_staker::TransferProtocolIfShares&lt;ReErased&gt;, anchor_lang::error::Error&gt;<br align="left"/>let mut _6: &amp;ReErased [u8];<br align="left"/>let _7: u16;<br align="left"/>let mut _8: &lt;instructions::if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::if_staker::TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;, &lt;instructions::if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::if_staker::TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args&gt;;<br align="left"/>let mut _10: std::result::Result&lt;&lt;instructions::if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::if_staker::TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let mut _11: std::result::Result&lt;&lt;instructions::if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::if_staker::TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args, std::io::Error&gt;;<br align="left"/>let mut _12: &amp;ReErased mut &amp;ReErased [u8];<br align="left"/>let mut _13: &amp;ReErased mut &amp;ReErased [u8];<br align="left"/>let mut _14: Closure(DefId(0:8888 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#0}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((std::io::Error,)) -&gt; anchor_lang::error::ErrorCode, []), ()]);<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;;<br align="left"/>let _19: &lt;instructions::if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::if_staker::TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args;<br align="left"/>let _20: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _21: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::Signer&lt;ReErased&gt;&gt;;<br align="left"/>let mut _22: std::result::Result&lt;anchor_lang::prelude::Signer&lt;ReErased&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _23: std::result::Result&lt;anchor_lang::prelude::Signer&lt;ReErased&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _24: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _25: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _26: &amp;ReErased [u8];<br align="left"/>let mut _27: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps;<br align="left"/>let mut _28: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _29: Closure(DefId(0:8889 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#1}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _34: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let _35: anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;;<br align="left"/>let mut _36: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;&gt;;<br align="left"/>let mut _37: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _38: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _39: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _40: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _41: &amp;ReErased [u8];<br align="left"/>let mut _42: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps;<br align="left"/>let mut _43: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _44: Closure(DefId(0:8890 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#2}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _49: anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;;<br align="left"/>let _50: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _51: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;&gt;;<br align="left"/>let mut _52: std::result::Result&lt;std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _53: std::result::Result&lt;std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _54: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _55: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _56: &amp;ReErased [u8];<br align="left"/>let mut _57: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps;<br align="left"/>let mut _58: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _59: Closure(DefId(0:8891 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#3}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _60: isize;<br align="left"/>let _61: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _62: !;<br align="left"/>let mut _63: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _64: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let _65: anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _66: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _67: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _68: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _69: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _70: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _71: &amp;ReErased [u8];<br align="left"/>let mut _72: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps;<br align="left"/>let mut _73: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _74: Closure(DefId(0:8892 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#4}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _75: isize;<br align="left"/>let _76: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _77: !;<br align="left"/>let mut _78: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _79: anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _80: anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let mut _81: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;&gt;;<br align="left"/>let mut _82: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _83: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _84: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _85: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _86: &amp;ReErased [u8];<br align="left"/>let mut _87: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps;<br align="left"/>let mut _88: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _89: Closure(DefId(0:8893 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#5}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _90: isize;<br align="left"/>let _91: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _92: !;<br align="left"/>let mut _93: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _94: anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let _95: anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _96: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _97: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _98: std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _99: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _100: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _101: &amp;ReErased [u8];<br align="left"/>let mut _102: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps;<br align="left"/>let mut _103: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _104: Closure(DefId(0:8894 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#6}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _105: isize;<br align="left"/>let _106: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _107: !;<br align="left"/>let mut _108: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _109: anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let _110: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _111: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, anchor_lang::prelude::Signer&lt;ReErased&gt;&gt;;<br align="left"/>let mut _112: std::result::Result&lt;anchor_lang::prelude::Signer&lt;ReErased&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _113: std::result::Result&lt;anchor_lang::prelude::Signer&lt;ReErased&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _114: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _115: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _116: &amp;ReErased [u8];<br align="left"/>let mut _117: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps;<br align="left"/>let mut _118: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _119: Closure(DefId(0:8895 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#7}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _120: isize;<br align="left"/>let _121: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _122: !;<br align="left"/>let mut _123: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _124: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let _125: std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _126: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;, std::alloc::Global&gt;&gt;;<br align="left"/>let mut _127: std::result::Result&lt;std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;, std::alloc::Global&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _128: std::result::Result&lt;std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;, std::alloc::Global&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _129: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _130: &amp;ReErased mut &amp;ReErased [anchor_lang::prelude::AccountInfo&lt;ReErased&gt;];<br align="left"/>let mut _131: &amp;ReErased [u8];<br align="left"/>let mut _132: &amp;ReErased mut instructions::if_staker::TransferProtocolIfSharesBumps;<br align="left"/>let mut _133: &amp;ReErased mut std::collections::BTreeSet&lt;anchor_lang::prelude::Pubkey, std::alloc::Global&gt;;<br align="left"/>let mut _134: Closure(DefId(0:8896 ~ drift[d311]::instructions::if_staker::{impl#28}::try_accounts::{closure#8}), [ReErased, i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; anchor_lang::error::Error, []), ()]);<br align="left"/>let mut _135: isize;<br align="left"/>let _136: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _137: !;<br align="left"/>let mut _138: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _139: std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;, std::alloc::Global&gt;;<br align="left"/>let _140: ();<br align="left"/>let mut _141: bool;<br align="left"/>let mut _142: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _143: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;;<br align="left"/>let _144: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;;<br align="left"/>let mut _145: !;<br align="left"/>let mut _146: anchor_lang::error::Error;<br align="left"/>let mut _147: anchor_lang::error::Error;<br align="left"/>let mut _148: anchor_lang::error::ErrorCode;<br align="left"/>let _149: anchor_lang::prelude::Pubkey;<br align="left"/>let _150: u8;<br align="left"/>let mut _151: (anchor_lang::prelude::Pubkey, u8);<br align="left"/>let mut _152: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _153: &amp;ReErased [&amp;ReErased [u8]; 2_usize];<br align="left"/>let _154: &amp;ReErased [&amp;ReErased [u8]; 2_usize];<br align="left"/>let _155: [&amp;ReErased [u8]; 2_usize];<br align="left"/>let mut _156: &amp;ReErased [u8];<br align="left"/>let mut _157: &amp;ReErased [u8; 11_usize];<br align="left"/>let _158: &amp;ReErased [u8; 11_usize];<br align="left"/>let mut _159: &amp;ReErased [u8];<br align="left"/>let _160: &amp;ReErased [u8];<br align="left"/>let mut _161: &amp;ReErased [u8; 2_usize];<br align="left"/>let _162: [u8; 2_usize];<br align="left"/>let mut _163: u16;<br align="left"/>let mut _164: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _165: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _166: u8;<br align="left"/>let _167: ();<br align="left"/>let mut _168: bool;<br align="left"/>let mut _169: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _170: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _171: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _172: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _173: !;<br align="left"/>let mut _174: anchor_lang::error::Error;<br align="left"/>let mut _175: anchor_lang::error::Error;<br align="left"/>let mut _176: anchor_lang::error::Error;<br align="left"/>let mut _177: anchor_lang::error::ErrorCode;<br align="left"/>let mut _178: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);<br align="left"/>let mut _179: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _180: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _181: anchor_lang::prelude::Pubkey;<br align="left"/>let _182: ();<br align="left"/>let mut _183: bool;<br align="left"/>let mut _184: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _185: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _186: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _187: !;<br align="left"/>let mut _188: anchor_lang::error::Error;<br align="left"/>let mut _189: anchor_lang::error::Error;<br align="left"/>let mut _190: anchor_lang::error::ErrorCode;<br align="left"/>let _191: anchor_lang::prelude::Pubkey;<br align="left"/>let _192: u8;<br align="left"/>let mut _193: (anchor_lang::prelude::Pubkey, u8);<br align="left"/>let mut _194: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _195: &amp;ReErased [&amp;ReErased [u8]; 3_usize];<br align="left"/>let _196: &amp;ReErased [&amp;ReErased [u8]; 3_usize];<br align="left"/>let _197: [&amp;ReErased [u8]; 3_usize];<br align="left"/>let mut _198: &amp;ReErased [u8];<br align="left"/>let mut _199: &amp;ReErased [u8; 20_usize];<br align="left"/>let _200: &amp;ReErased [u8; 20_usize];<br align="left"/>let mut _201: &amp;ReErased [u8];<br align="left"/>let _202: &amp;ReErased [u8];<br align="left"/>let mut _203: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _204: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _205: &amp;ReErased anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _206: &amp;ReErased [u8];<br align="left"/>let _207: &amp;ReErased [u8];<br align="left"/>let mut _208: &amp;ReErased [u8; 2_usize];<br align="left"/>let _209: [u8; 2_usize];<br align="left"/>let mut _210: u16;<br align="left"/>let mut _211: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _212: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _213: u8;<br align="left"/>let _214: ();<br align="left"/>let mut _215: bool;<br align="left"/>let mut _216: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _217: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _218: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let mut _219: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _220: !;<br align="left"/>let mut _221: anchor_lang::error::Error;<br align="left"/>let mut _222: anchor_lang::error::Error;<br align="left"/>let mut _223: anchor_lang::error::Error;<br align="left"/>let mut _224: anchor_lang::error::ErrorCode;<br align="left"/>let mut _225: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);<br align="left"/>let mut _226: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _227: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let mut _228: anchor_lang::prelude::Pubkey;<br align="left"/>let _229: ();<br align="left"/>let mut _230: bool;<br align="left"/>let mut _231: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _232: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let _233: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let mut _234: !;<br align="left"/>let mut _235: anchor_lang::error::Error;<br align="left"/>let mut _236: anchor_lang::error::Error;<br align="left"/>let mut _237: anchor_lang::error::ErrorCode;<br align="left"/>let _238: ();<br align="left"/>let _239: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _240: &amp;ReErased state::insurance_fund_stake::InsuranceFundStake;<br align="left"/>let mut _241: &amp;ReErased std::cell::Ref&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let _242: std::cell::Ref&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let mut _243: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;&gt;;<br align="left"/>let mut _244: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _245: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let mut _246: isize;<br align="left"/>let _247: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _248: !;<br align="left"/>let mut _249: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _250: std::cell::Ref&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let _251: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _252: &amp;ReErased anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _253: bool;<br align="left"/>let mut _254: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _255: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _256: !;<br align="left"/>let mut _257: anchor_lang::error::Error;<br align="left"/>let mut _258: anchor_lang::error::Error;<br align="left"/>let mut _259: anchor_lang::error::Error;<br align="left"/>let mut _260: anchor_lang::error::ErrorCode;<br align="left"/>let mut _261: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);<br align="left"/>let mut _262: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _263: anchor_lang::prelude::Pubkey;<br align="left"/>let _264: ();<br align="left"/>let mut _265: bool;<br align="left"/>let mut _266: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _267: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let _268: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _269: !;<br align="left"/>let mut _270: anchor_lang::error::Error;<br align="left"/>let mut _271: anchor_lang::error::Error;<br align="left"/>let mut _272: anchor_lang::error::ErrorCode;<br align="left"/>let _273: ();<br align="left"/>let _274: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _275: &amp;ReErased state::user::UserStats;<br align="left"/>let mut _276: &amp;ReErased std::cell::Ref&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let _277: std::cell::Ref&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _278: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::Ref&lt;ReErased, state::user::UserStats&gt;&gt;;<br align="left"/>let mut _279: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::user::UserStats&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _280: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _281: isize;<br align="left"/>let _282: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _283: !;<br align="left"/>let mut _284: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _285: std::cell::Ref&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let _286: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _287: &amp;ReErased anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _288: bool;<br align="left"/>let mut _289: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _290: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _291: !;<br align="left"/>let mut _292: anchor_lang::error::Error;<br align="left"/>let mut _293: anchor_lang::error::Error;<br align="left"/>let mut _294: anchor_lang::error::Error;<br align="left"/>let mut _295: anchor_lang::error::ErrorCode;<br align="left"/>let mut _296: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);<br align="left"/>let mut _297: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _298: anchor_lang::prelude::Pubkey;<br align="left"/>let _299: anchor_lang::prelude::Pubkey;<br align="left"/>let _300: u8;<br align="left"/>let mut _301: (anchor_lang::prelude::Pubkey, u8);<br align="left"/>let mut _302: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _303: &amp;ReErased [&amp;ReErased [u8]; 2_usize];<br align="left"/>let _304: &amp;ReErased [&amp;ReErased [u8]; 2_usize];<br align="left"/>let _305: [&amp;ReErased [u8]; 2_usize];<br align="left"/>let mut _306: &amp;ReErased [u8];<br align="left"/>let _307: &amp;ReErased [u8];<br align="left"/>let mut _308: &amp;ReErased [u8; 20_usize];<br align="left"/>let _309: &amp;ReErased [u8; 20_usize];<br align="left"/>let mut _310: &amp;ReErased [u8];<br align="left"/>let _311: &amp;ReErased [u8];<br align="left"/>let mut _312: &amp;ReErased [u8; 2_usize];<br align="left"/>let _313: [u8; 2_usize];<br align="left"/>let mut _314: u16;<br align="left"/>let mut _315: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _316: &amp;ReErased &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _317: u8;<br align="left"/>let _318: ();<br align="left"/>let mut _319: bool;<br align="left"/>let mut _320: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _321: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _322: &amp;ReErased anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;;<br align="left"/>let mut _323: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _324: !;<br align="left"/>let mut _325: anchor_lang::error::Error;<br align="left"/>let mut _326: anchor_lang::error::Error;<br align="left"/>let mut _327: anchor_lang::error::Error;<br align="left"/>let mut _328: anchor_lang::error::ErrorCode;<br align="left"/>let mut _329: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);<br align="left"/>let mut _330: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _331: &amp;ReErased anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;;<br align="left"/>let mut _332: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _333: instructions::if_staker::TransferProtocolIfShares&lt;ReErased&gt;;<br align="left"/>let mut _334: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _335: anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;;<br align="left"/>let mut _336: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _337: anchor_lang::prelude::AccountLoader&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _338: anchor_lang::prelude::AccountLoader&lt;ReErased, state::insurance_fund_stake::InsuranceFundStake&gt;;<br align="left"/>let mut _339: anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::UserStats&gt;;<br align="left"/>let mut _340: anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _341: std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _342: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _343: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _344: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _345: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _346: bool;<br align="left"/>let mut _347: bool;<br align="left"/>let mut _348: bool;<br align="left"/>let mut _349: bool;<br align="left"/>let mut _350: bool;<br align="left"/>let mut _351: bool;<br align="left"/>let mut _352: bool;<br align="left"/>let mut _353: isize;<br align="left"/>let mut _354: isize;<br align="left"/>let mut _355: isize;<br align="left"/>let mut _356: isize;<br align="left"/>let mut _357: isize;<br align="left"/>let mut _358: isize;<br align="left"/>let mut _359: isize;<br align="left"/>let mut _360: isize;<br align="left"/>let mut _361: isize;<br align="left"/>let mut _362: isize;<br align="left"/>let mut _363: isize;<br align="left"/>let mut _364: isize;<br align="left"/>let mut _365: isize;<br align="left"/>let mut _366: isize;<br align="left"/>let mut _367: isize;<br align="left"/>let mut _368: isize;<br align="left"/>let mut _369: isize;<br align="left"/>let mut _370: isize;<br align="left"/>let mut _371: isize;<br align="left"/>let mut _372: isize;<br align="left"/>let mut _373: isize;<br align="left"/>let mut _374: isize;<br align="left"/>let mut _375: isize;<br align="left"/>let mut _376: isize;<br align="left"/>let mut _377: isize;<br align="left"/>let mut _378: isize;<br align="left"/>let mut _379: isize;<br align="left"/>let mut _380: isize;<br align="left"/>let mut _381: isize;<br align="left"/>let mut _382: isize;<br align="left"/>let mut _383: isize;<br align="left"/>let mut _384: isize;<br align="left"/>let mut _385: isize;<br align="left"/>let mut _386: isize;<br align="left"/>let mut _387: isize;<br align="left"/>let mut _388: isize;<br align="left"/>let mut _389: isize;<br align="left"/>let mut _390: isize;<br align="left"/>let mut _391: isize;<br align="left"/>let mut _392: isize;<br align="left"/>let mut _393: isize;<br align="left"/>let mut _394: isize;<br align="left"/>let mut _395: isize;<br align="left"/>let mut _396: isize;<br align="left"/>let mut _397: isize;<br align="left"/>let mut _398: isize;<br align="left"/>let mut _399: isize;<br align="left"/>let mut _400: isize;<br align="left"/>let mut _401: isize;<br align="left"/>let mut _402: isize;<br align="left"/>let mut _403: *const anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;;<br align="left"/>let mut _404: *const anchor_lang::prelude::InterfaceAccount&lt;ReErased, anchor_spl::token_interface::TokenAccount&gt;;<br align="left"/>debug __program_id =&gt; _1;<br align="left"/>debug __accounts =&gt; _2;<br align="left"/>debug __ix_data =&gt; _3;<br align="left"/>debug __bumps =&gt; _4;<br align="left"/>debug __reallocs =&gt; _5;<br align="left"/>debug __ix_data =&gt; _6;<br align="left"/>debug market_index =&gt; _7;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug signer =&gt; _20;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug transfer_config =&gt; _35;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>debug state =&gt; _50;<br align="left"/>debug residual =&gt; _61;<br align="left"/>debug val =&gt; _64;<br align="left"/>debug spot_market =&gt; _65;<br align="left"/>debug residual =&gt; _76;<br align="left"/>debug val =&gt; _79;<br align="left"/>debug insurance_fund_stake =&gt; _80;<br align="left"/>debug residual =&gt; _91;<br align="left"/>debug val =&gt; _94;<br align="left"/>debug user_stats =&gt; _95;<br align="left"/>debug residual =&gt; _106;<br align="left"/>debug val =&gt; _109;<br align="left"/>debug authority =&gt; _110;<br align="left"/>debug residual =&gt; _121;<br align="left"/>debug val =&gt; _124;<br align="left"/>debug insurance_fund_vault =&gt; _125;<br align="left"/>debug residual =&gt; _136;<br align="left"/>debug val =&gt; _139;<br align="left"/>debug __pda_address =&gt; _149;<br align="left"/>debug __bump =&gt; _150;<br align="left"/>debug __pda_address =&gt; _191;<br align="left"/>debug __bump =&gt; _192;<br align="left"/>debug my_key =&gt; _239;<br align="left"/>debug residual =&gt; _247;<br align="left"/>debug val =&gt; _250;<br align="left"/>debug target_key =&gt; _251;<br align="left"/>debug my_key =&gt; _274;<br align="left"/>debug residual =&gt; _282;<br align="left"/>debug val =&gt; _285;<br align="left"/>debug target_key =&gt; _286;<br align="left"/>debug __pda_address =&gt; _299;<br align="left"/>debug __bump =&gt; _300;<br align="left"/>>;
    bb0__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_352 = const false<br/>_351 = const false<br/>_346 = const false<br/>_350 = const false<br/>_349 = const false<br/>_348 = const false<br/>_347 = const false<br/>StorageLive(_6)<br/>_6 = _3<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = &amp;mut _6<br/>_12 = &amp;mut (*_13)<br/></td></tr><tr><td align="left">_11 = &lt;&lt;if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args as BorshDeserialize&gt;::deserialize(move _12)</td></tr></table>>];
    bb1__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_14)<br/>_14 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_10 = std::result::Result::&lt;&lt;if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args, std::io::Error&gt;::map_err::&lt;anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _11, move _14)</td></tr></table>>];
    bb2__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;&lt;if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args, anchor_lang::error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb3__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_15 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb4__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = move ((_9 as Continue).0: &lt;instructions::if_staker::TransferProtocolIfShares&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::if_staker::TransferProtocolIfSharesBumps&gt;&gt;::try_accounts::__Args)<br/>_8 = move _19<br/>StorageDead(_19)<br/>StorageLive(_7)<br/>_7 = (_8.0: u16)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;(*_1)<br/>StorageLive(_25)<br/>_25 = &amp;mut (*_2)<br/>StorageLive(_26)<br/>_26 = &amp;(*_6)<br/>StorageLive(_27)<br/>_27 = &amp;mut (*_4)<br/>StorageLive(_28)<br/>_28 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_23 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as anchor_lang::Accounts&lt;'_, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(move _24, move _25, move _26, move _27, move _28)</td></tr></table>>];
    bb5__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb7__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_29)<br/>_29 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_22 = std::result::Result::&lt;anchor_lang::prelude::Signer&lt;'_&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _23, move _29)</td></tr></table>>];
    bb9__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_21 = &lt;std::result::Result&lt;anchor_lang::prelude::Signer&lt;'_&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _22)</td></tr></table>>];
    bb10__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>_30 = discriminant(_21)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb11__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer&lt;'_&gt;)<br/>_20 = move _34<br/>StorageDead(_34)<br/>_353 = discriminant(_21)<br/>StorageDead(_21)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>_39 = &amp;(*_1)<br/>StorageLive(_40)<br/>_40 = &amp;mut (*_2)<br/>StorageLive(_41)<br/>_41 = &amp;(*_6)<br/>StorageLive(_42)<br/>_42 = &amp;mut (*_4)<br/>StorageLive(_43)<br/>_43 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_38 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, ProtocolIfSharesTransferConfig&gt; as anchor_lang::Accounts&lt;'_, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(move _39, move _40, move _41, move _42, move _43)</td></tr></table>>];
    bb12__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = move ((_21 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_33)<br/>_33 = move _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb13__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>_391 = discriminant(_21)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageLive(_44)<br/>_44 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_37 = std::result::Result::&lt;anchor_lang::prelude::AccountLoader&lt;'_, ProtocolIfSharesTransferConfig&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _38, move _44)</td></tr></table>>];
    bb15__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_36 = &lt;std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;'_, ProtocolIfSharesTransferConfig&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _37)</td></tr></table>>];
    bb16__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>_45 = discriminant(_36)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb17__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader&lt;'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig&gt;)<br/>_35 = move _49<br/>StorageDead(_49)<br/>_355 = discriminant(_36)<br/>StorageDead(_36)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_54 = &amp;(*_1)<br/>StorageLive(_55)<br/>_55 = &amp;mut (*_2)<br/>StorageLive(_56)<br/>_56 = &amp;(*_6)<br/>StorageLive(_57)<br/>_57 = &amp;mut (*_4)<br/>StorageLive(_58)<br/>_58 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_53 = &lt;Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt; as anchor_lang::Accounts&lt;'_, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(move _54, move _55, move _56, move _57, move _58)</td></tr></table>>];
    bb18__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = move ((_36 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_48)<br/>_48 = move _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb19__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/>_389 = discriminant(_36)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageLive(_59)<br/>_59 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_52 = std::result::Result::&lt;Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _53, move _59)</td></tr></table>>];
    bb21__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">_51 = &lt;std::result::Result&lt;Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _52)</td></tr></table>>];
    bb22__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>_60 = discriminant(_51)<br/></td></tr><tr><td align="left">switchInt(move _60)</td></tr></table>>];
    bb23__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_64)<br/>_64 = move ((_51 as Continue).0: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>_50 = move _64<br/>StorageDead(_64)<br/>_357 = discriminant(_51)<br/>StorageDead(_51)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_69 = &amp;(*_1)<br/>StorageLive(_70)<br/>_70 = &amp;mut (*_2)<br/>StorageLive(_71)<br/>_71 = &amp;(*_6)<br/>StorageLive(_72)<br/>_72 = &amp;mut (*_4)<br/>StorageLive(_73)<br/>_73 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_68 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt; as anchor_lang::Accounts&lt;'_, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(move _69, move _70, move _71, move _72, move _73)</td></tr></table>>];
    bb24__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = move ((_51 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_63)<br/>_63 = move _61<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _63)</td></tr></table>>];
    bb25__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_61)<br/>_387 = discriminant(_51)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageDead(_72)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/>StorageLive(_74)<br/>_74 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_67 = std::result::Result::&lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _68, move _74)</td></tr></table>>];
    bb27__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_74)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">_66 = &lt;std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _67)</td></tr></table>>];
    bb28__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>_75 = discriminant(_66)<br/></td></tr><tr><td align="left">switchInt(move _75)</td></tr></table>>];
    bb29__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_79)<br/>_79 = move ((_66 as Continue).0: anchor_lang::prelude::AccountLoader&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_65 = move _79<br/>StorageDead(_79)<br/>_359 = discriminant(_66)<br/>StorageDead(_66)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>_84 = &amp;(*_1)<br/>StorageLive(_85)<br/>_85 = &amp;mut (*_2)<br/>StorageLive(_86)<br/>_86 = &amp;(*_6)<br/>StorageLive(_87)<br/>_87 = &amp;mut (*_4)<br/>StorageLive(_88)<br/>_88 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_83 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, InsuranceFundStake&gt; as anchor_lang::Accounts&lt;'_, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(move _84, move _85, move _86, move _87, move _88)</td></tr></table>>];
    bb30__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_76)<br/>_76 = move ((_66 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_78)<br/>_78 = move _76<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _78)</td></tr></table>>];
    bb31__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_76)<br/>_385 = discriminant(_66)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/>StorageLive(_89)<br/>_89 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_82 = std::result::Result::&lt;anchor_lang::prelude::AccountLoader&lt;'_, InsuranceFundStake&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _83, move _89)</td></tr></table>>];
    bb33__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">_81 = &lt;std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;'_, InsuranceFundStake&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _82)</td></tr></table>>];
    bb34__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>_90 = discriminant(_81)<br/></td></tr><tr><td align="left">switchInt(move _90)</td></tr></table>>];
    bb35__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_94)<br/>_94 = move ((_81 as Continue).0: anchor_lang::prelude::AccountLoader&lt;'_, state::insurance_fund_stake::InsuranceFundStake&gt;)<br/>_80 = move _94<br/>StorageDead(_94)<br/>_361 = discriminant(_81)<br/>StorageDead(_81)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>_99 = &amp;(*_1)<br/>StorageLive(_100)<br/>_100 = &amp;mut (*_2)<br/>StorageLive(_101)<br/>_101 = &amp;(*_6)<br/>StorageLive(_102)<br/>_102 = &amp;mut (*_4)<br/>StorageLive(_103)<br/>_103 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_98 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, UserStats&gt; as anchor_lang::Accounts&lt;'_, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(move _99, move _100, move _101, move _102, move _103)</td></tr></table>>];
    bb36__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_91)<br/>_91 = move ((_81 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_93)<br/>_93 = move _91<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _93)</td></tr></table>>];
    bb37__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_91)<br/>_383 = discriminant(_81)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageDead(_102)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/>StorageDead(_99)<br/>StorageLive(_104)<br/>_104 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_97 = std::result::Result::&lt;anchor_lang::prelude::AccountLoader&lt;'_, UserStats&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _98, move _104)</td></tr></table>>];
    bb39__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>StorageDead(_98)<br/></td></tr><tr><td align="left">_96 = &lt;std::result::Result&lt;anchor_lang::prelude::AccountLoader&lt;'_, UserStats&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _97)</td></tr></table>>];
    bb40__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>_105 = discriminant(_96)<br/></td></tr><tr><td align="left">switchInt(move _105)</td></tr></table>>];
    bb41__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageLive(_109)<br/>_109 = move ((_96 as Continue).0: anchor_lang::prelude::AccountLoader&lt;'_, state::user::UserStats&gt;)<br/>_95 = move _109<br/>StorageDead(_109)<br/>_363 = discriminant(_96)<br/>StorageDead(_96)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>_114 = &amp;(*_1)<br/>StorageLive(_115)<br/>_115 = &amp;mut (*_2)<br/>StorageLive(_116)<br/>_116 = &amp;(*_6)<br/>StorageLive(_117)<br/>_117 = &amp;mut (*_4)<br/>StorageLive(_118)<br/>_118 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_113 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as anchor_lang::Accounts&lt;'_, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(move _114, move _115, move _116, move _117, move _118)</td></tr></table>>];
    bb42__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_106)<br/>_106 = move ((_96 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_108)<br/>_108 = move _106<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _108)</td></tr></table>>];
    bb43__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_106)<br/>_381 = discriminant(_96)<br/>StorageDead(_96)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageDead(_117)<br/>StorageDead(_116)<br/>StorageDead(_115)<br/>StorageDead(_114)<br/>StorageLive(_119)<br/>_119 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_112 = std::result::Result::&lt;anchor_lang::prelude::Signer&lt;'_&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _113, move _119)</td></tr></table>>];
    bb45__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_119)<br/>StorageDead(_113)<br/></td></tr><tr><td align="left">_111 = &lt;std::result::Result&lt;anchor_lang::prelude::Signer&lt;'_&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _112)</td></tr></table>>];
    bb46__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_112)<br/>_120 = discriminant(_111)<br/></td></tr><tr><td align="left">switchInt(move _120)</td></tr></table>>];
    bb47__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageLive(_124)<br/>_124 = move ((_111 as Continue).0: anchor_lang::prelude::Signer&lt;'_&gt;)<br/>_110 = move _124<br/>StorageDead(_124)<br/>_365 = discriminant(_111)<br/>StorageDead(_111)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>_129 = &amp;(*_1)<br/>StorageLive(_130)<br/>_130 = &amp;mut (*_2)<br/>StorageLive(_131)<br/>_131 = &amp;(*_6)<br/>StorageLive(_132)<br/>_132 = &amp;mut (*_4)<br/>StorageLive(_133)<br/>_133 = &amp;mut (*_5)<br/></td></tr><tr><td align="left">_128 = &lt;Box&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt; as anchor_lang::Accounts&lt;'_, TransferProtocolIfSharesBumps&gt;&gt;::try_accounts(move _129, move _130, move _131, move _132, move _133)</td></tr></table>>];
    bb48__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_121)<br/>_121 = move ((_111 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_123)<br/>_123 = move _121<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _123)</td></tr></table>>];
    bb49__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>StorageDead(_121)<br/>_379 = discriminant(_111)<br/>StorageDead(_111)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_133)<br/>StorageDead(_132)<br/>StorageDead(_131)<br/>StorageDead(_130)<br/>StorageDead(_129)<br/>StorageLive(_134)<br/>_134 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}<br/></td></tr><tr><td align="left">_127 = std::result::Result::&lt;Box&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;, anchor_lang::error::Error&gt;::map_err::&lt;anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}&gt;(move _128, move _134)</td></tr></table>>];
    bb51__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_128)<br/></td></tr><tr><td align="left">_126 = &lt;std::result::Result&lt;Box&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _127)</td></tr></table>>];
    bb52__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_127)<br/>_135 = discriminant(_126)<br/></td></tr><tr><td align="left">switchInt(move _135)</td></tr></table>>];
    bb53__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_139)<br/>_139 = move ((_126 as Continue).0: std::boxed::Box&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;)<br/>_125 = move _139<br/>StorageDead(_139)<br/>_367 = discriminant(_126)<br/>StorageDead(_126)<br/>StorageLive(_140)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>_144 = &amp;_35<br/>_143 = &amp;(*_144)<br/></td></tr><tr><td align="left">_142 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, ProtocolIfSharesTransferConfig&gt; as AsRef&lt;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;::as_ref(move _143)</td></tr></table>>];
    bb54__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_136)<br/>_136 = move ((_126 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_138)<br/>_138 = move _136<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _138)</td></tr></table>>];
    bb55__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_138)<br/>StorageDead(_136)<br/>_377 = discriminant(_126)<br/>StorageDead(_126)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_143)<br/>_141 = ((*_142).6: bool)<br/></td></tr><tr><td align="left">switchInt(move _141)</td></tr></table>>];
    bb57__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/>StorageDead(_142)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>StorageLive(_148)<br/>_148 = ConstraintMut<br/></td></tr><tr><td align="left">_147 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _148)</td></tr></table>>];
    bb58__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/></td></tr><tr><td align="left">_146 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _147, const &quot;transfer_config&quot;)</td></tr></table>>];
    bb59__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_147)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _146)<br/>StorageDead(_146)<br/>StorageDead(_141)<br/>StorageDead(_140)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/>StorageDead(_142)<br/>_140 = const ()<br/>StorageDead(_141)<br/>StorageDead(_140)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>StorageLive(_153)<br/>StorageLive(_154)<br/>StorageLive(_155)<br/>StorageLive(_156)<br/>StorageLive(_157)<br/>StorageLive(_158)<br/>_158 = const b&quot;spot_market&quot;<br/>_157 = &amp;(*_158)<br/>_156 = move _157 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_157)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>_163 = _7<br/></td></tr><tr><td align="left">_162 = core::num::&lt;impl u16&gt;::to_le_bytes(move _163)</td></tr></table>>];
    bb61__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">_161 = &amp;_162<br/>StorageDead(_163)<br/></td></tr><tr><td align="left">_160 = &lt;[u8; 2] as AsRef&lt;[u8]&gt;&gt;::as_ref(move _161)</td></tr></table>>];
    bb62__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">_159 = &amp;(*_160)<br/>StorageDead(_161)<br/>_155 = [move _156, move _159]<br/>StorageDead(_159)<br/>StorageDead(_156)<br/>_154 = &amp;_155<br/>_153 = &amp;(*_154)<br/>_152 = move _153 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_153)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>_165 = &amp;_1<br/>_342 = deref_copy (*_165)<br/>_164 = &amp;(*_342)<br/></td></tr><tr><td align="left">_151 = anchor_lang::prelude::Pubkey::find_program_address(move _152, move _164)</td></tr></table>>];
    bb63__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_164)<br/>StorageDead(_152)<br/>StorageLive(_149)<br/>_149 = (_151.0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_150)<br/>_150 = (_151.1: u8)<br/>StorageDead(_165)<br/>StorageDead(_162)<br/>StorageDead(_160)<br/>StorageDead(_158)<br/>StorageDead(_155)<br/>StorageDead(_154)<br/>StorageDead(_151)<br/>StorageLive(_166)<br/>_166 = _150<br/>((*_4).0: u8) = move _166<br/>StorageDead(_166)<br/>StorageLive(_167)<br/>StorageLive(_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>_171 = &amp;_65<br/></td></tr><tr><td align="left">_170 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt; as anchor_lang::Key&gt;::key(move _171)</td></tr></table>>];
    bb64__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">_169 = &amp;_170<br/>StorageDead(_171)<br/>StorageLive(_172)<br/>_172 = &amp;_149<br/></td></tr><tr><td align="left">_168 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _169, move _172)</td></tr></table>>];
    bb65__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left">switchInt(move _168)</td></tr></table>>];
    bb66__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/>StorageDead(_170)<br/>StorageDead(_169)<br/>StorageLive(_174)<br/>StorageLive(_175)<br/>StorageLive(_176)<br/>StorageLive(_177)<br/>_177 = ConstraintSeeds<br/></td></tr><tr><td align="left">_176 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _177)</td></tr></table>>];
    bb67__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_177)<br/></td></tr><tr><td align="left">_175 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _176, const &quot;spot_market&quot;)</td></tr></table>>];
    bb68__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">_352 = const true<br/>StorageDead(_176)<br/>StorageLive(_178)<br/>StorageLive(_179)<br/>StorageLive(_180)<br/>_180 = &amp;_65<br/></td></tr><tr><td align="left">_179 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt; as anchor_lang::Key&gt;::key(move _180)</td></tr></table>>];
    bb69__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_180)<br/>StorageLive(_181)<br/>_181 = _149<br/>_178 = (move _179, move _181)<br/>StorageDead(_181)<br/>StorageDead(_179)<br/>_352 = const false<br/></td></tr><tr><td align="left">_174 = anchor_lang::error::Error::with_pubkeys(move _175, move _178)</td></tr></table>>];
    bb70__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_178)<br/>_352 = const false<br/>StorageDead(_175)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _174)<br/>StorageDead(_174)<br/>StorageDead(_168)<br/>StorageDead(_167)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb71__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_172)<br/>StorageDead(_170)<br/>StorageDead(_169)<br/>_167 = const ()<br/>StorageDead(_168)<br/>StorageDead(_167)<br/>StorageLive(_182)<br/>StorageLive(_183)<br/>StorageLive(_184)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>_186 = &amp;_65<br/>_185 = &amp;(*_186)<br/></td></tr><tr><td align="left">_184 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, SpotMarket&gt; as AsRef&lt;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;::as_ref(move _185)</td></tr></table>>];
    bb72__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_185)<br/>_183 = ((*_184).6: bool)<br/></td></tr><tr><td align="left">switchInt(move _183)</td></tr></table>>];
    bb73__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageDead(_186)<br/>StorageDead(_184)<br/>StorageLive(_188)<br/>StorageLive(_189)<br/>StorageLive(_190)<br/>_190 = ConstraintMut<br/></td></tr><tr><td align="left">_189 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _190)</td></tr></table>>];
    bb74__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_190)<br/></td></tr><tr><td align="left">_188 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _189, const &quot;spot_market&quot;)</td></tr></table>>];
    bb75__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_189)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _188)<br/>StorageDead(_188)<br/>StorageDead(_183)<br/>StorageDead(_182)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb76__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_186)<br/>StorageDead(_184)<br/>_182 = const ()<br/>StorageDead(_183)<br/>StorageDead(_182)<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>_200 = const b&quot;insurance_fund_stake&quot;<br/>_199 = &amp;(*_200)<br/>_198 = move _199 as &amp;[u8] (PointerCoercion(Unsize))<br/>StorageDead(_199)<br/>StorageLive(_201)<br/>StorageLive(_202)<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>StorageLive(_205)<br/>_205 = &amp;_110<br/></td></tr><tr><td align="left">_204 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as Deref&gt;::deref(move _205)</td></tr></table>>];
    bb77__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_205)<br/>_343 = deref_copy ((*_204).0: &amp;anchor_lang::prelude::Pubkey)<br/>_203 = &amp;(*_343)<br/></td></tr><tr><td align="left">_202 = &lt;anchor_lang::prelude::Pubkey as AsRef&lt;[u8]&gt;&gt;::as_ref(move _203)</td></tr></table>>];
    bb78__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">_201 = &amp;(*_202)<br/>StorageDead(_203)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>_210 = _7<br/></td></tr><tr><td align="left">_209 = core::num::&lt;impl u16&gt;::to_le_bytes(move _210)</td></tr></table>>];
    bb79__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">_208 = &amp;_209<br/>StorageDead(_210)<br/></td></tr><tr><td align="left">_207 = &lt;[u8; 2] as AsRef&lt;[u8]&gt;&gt;::as_ref(move _208)</td></tr></table>>];
    bb80__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">_206 = &amp;(*_207)<br/>StorageDead(_208)<br/>_197 = [move _198, move _201, move _206]<br/>StorageDead(_206)<br/>StorageDead(_201)<br/>StorageDead(_198)<br/>_196 = &amp;_197<br/>_195 = &amp;(*_196)<br/>_194 = move _195 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_195)<br/>StorageLive(_211)<br/>StorageLive(_212)<br/>_212 = &amp;_1<br/>_344 = deref_copy (*_212)<br/>_211 = &amp;(*_344)<br/></td></tr><tr><td align="left">_193 = anchor_lang::prelude::Pubkey::find_program_address(move _194, move _211)</td></tr></table>>];
    bb81__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_211)<br/>StorageDead(_194)<br/>StorageLive(_191)<br/>_191 = (_193.0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_192)<br/>_192 = (_193.1: u8)<br/>StorageDead(_212)<br/>StorageDead(_209)<br/>StorageDead(_207)<br/>StorageDead(_204)<br/>StorageDead(_202)<br/>StorageDead(_200)<br/>StorageDead(_197)<br/>StorageDead(_196)<br/>StorageDead(_193)<br/>StorageLive(_213)<br/>_213 = _192<br/>((*_4).1: u8) = move _213<br/>StorageDead(_213)<br/>StorageLive(_214)<br/>StorageLive(_215)<br/>StorageLive(_216)<br/>StorageLive(_217)<br/>StorageLive(_218)<br/>_218 = &amp;_80<br/></td></tr><tr><td align="left">_217 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, InsuranceFundStake&gt; as anchor_lang::Key&gt;::key(move _218)</td></tr></table>>];
    bb82__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">_216 = &amp;_217<br/>StorageDead(_218)<br/>StorageLive(_219)<br/>_219 = &amp;_191<br/></td></tr><tr><td align="left">_215 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _216, move _219)</td></tr></table>>];
    bb83__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left">switchInt(move _215)</td></tr></table>>];
    bb84__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_219)<br/>StorageDead(_217)<br/>StorageDead(_216)<br/>StorageLive(_221)<br/>StorageLive(_222)<br/>StorageLive(_223)<br/>StorageLive(_224)<br/>_224 = ConstraintSeeds<br/></td></tr><tr><td align="left">_223 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _224)</td></tr></table>>];
    bb85__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageDead(_224)<br/></td></tr><tr><td align="left">_222 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _223, const &quot;insurance_fund_stake&quot;)</td></tr></table>>];
    bb86__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">_351 = const true<br/>StorageDead(_223)<br/>StorageLive(_225)<br/>StorageLive(_226)<br/>StorageLive(_227)<br/>_227 = &amp;_80<br/></td></tr><tr><td align="left">_226 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, InsuranceFundStake&gt; as anchor_lang::Key&gt;::key(move _227)</td></tr></table>>];
    bb87__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_227)<br/>StorageLive(_228)<br/>_228 = _191<br/>_225 = (move _226, move _228)<br/>StorageDead(_228)<br/>StorageDead(_226)<br/>_351 = const false<br/></td></tr><tr><td align="left">_221 = anchor_lang::error::Error::with_pubkeys(move _222, move _225)</td></tr></table>>];
    bb88__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_225)<br/>_351 = const false<br/>StorageDead(_222)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _221)<br/>StorageDead(_221)<br/>StorageDead(_215)<br/>StorageDead(_214)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb89__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_219)<br/>StorageDead(_217)<br/>StorageDead(_216)<br/>_214 = const ()<br/>StorageDead(_215)<br/>StorageDead(_214)<br/>StorageLive(_229)<br/>StorageLive(_230)<br/>StorageLive(_231)<br/>StorageLive(_232)<br/>StorageLive(_233)<br/>_233 = &amp;_80<br/>_232 = &amp;(*_233)<br/></td></tr><tr><td align="left">_231 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, InsuranceFundStake&gt; as AsRef&lt;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;::as_ref(move _232)</td></tr></table>>];
    bb90__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_232)<br/>_230 = ((*_231).6: bool)<br/></td></tr><tr><td align="left">switchInt(move _230)</td></tr></table>>];
    bb91__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageDead(_233)<br/>StorageDead(_231)<br/>StorageLive(_235)<br/>StorageLive(_236)<br/>StorageLive(_237)<br/>_237 = ConstraintMut<br/></td></tr><tr><td align="left">_236 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _237)</td></tr></table>>];
    bb92__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_237)<br/></td></tr><tr><td align="left">_235 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _236, const &quot;insurance_fund_stake&quot;)</td></tr></table>>];
    bb93__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_236)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _235)<br/>StorageDead(_235)<br/>StorageDead(_230)<br/>StorageDead(_229)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb94__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_233)<br/>StorageDead(_231)<br/>_229 = const ()<br/>StorageDead(_230)<br/>StorageDead(_229)<br/>StorageLive(_238)<br/>StorageLive(_239)<br/>StorageLive(_240)<br/>StorageLive(_241)<br/>StorageLive(_242)<br/>StorageLive(_243)<br/>StorageLive(_244)<br/>StorageLive(_245)<br/>_245 = &amp;_80<br/></td></tr><tr><td align="left">_244 = anchor_lang::prelude::AccountLoader::&lt;'_, InsuranceFundStake&gt;::load(move _245)</td></tr></table>>];
    bb95__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageDead(_245)<br/></td></tr><tr><td align="left">_243 = &lt;std::result::Result&lt;Ref&lt;'_, InsuranceFundStake&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _244)</td></tr></table>>];
    bb96__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">_349 = const true<br/>_350 = const true<br/>StorageDead(_244)<br/>_246 = discriminant(_243)<br/></td></tr><tr><td align="left">switchInt(move _246)</td></tr></table>>];
    bb97__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageLive(_250)<br/>_250 = move ((_243 as Continue).0: std::cell::Ref&lt;'_, state::insurance_fund_stake::InsuranceFundStake&gt;)<br/>_242 = move _250<br/>StorageDead(_250)<br/>_241 = &amp;_242<br/></td></tr><tr><td align="left">_240 = &lt;Ref&lt;'_, InsuranceFundStake&gt; as Deref&gt;::deref(move _241)</td></tr></table>>];
    bb98__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageLive(_247)<br/>_247 = move ((_243 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_249)<br/>_249 = move _247<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _249)</td></tr></table>>];
    bb99__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_249)<br/>StorageDead(_247)<br/>StorageDead(_241)<br/>_375 = discriminant(_243)<br/>_349 = const false<br/>_350 = const false<br/>StorageDead(_243)<br/>StorageDead(_242)<br/>StorageDead(_240)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb100__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_241)<br/>_239 = ((*_240).0: anchor_lang::prelude::Pubkey)<br/></td></tr><tr><td align="left">drop(_242)</td></tr></table>>];
    bb101__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">StorageDead(_252)<br/>StorageLive(_253)<br/>StorageLive(_254)<br/>_254 = &amp;_239<br/>StorageLive(_255)<br/>_255 = &amp;_251<br/></td></tr><tr><td align="left">_253 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _254, move _255)</td></tr></table>>];
    bb102__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left">switchInt(move _253)</td></tr></table>>];
    bb103__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_255)<br/>StorageDead(_254)<br/>StorageLive(_257)<br/>StorageLive(_258)<br/>StorageLive(_259)<br/>StorageLive(_260)<br/>_260 = ConstraintHasOne<br/></td></tr><tr><td align="left">_259 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _260)</td></tr></table>>];
    bb104__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_260)<br/></td></tr><tr><td align="left">_258 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _259, const &quot;insurance_fund_stake&quot;)</td></tr></table>>];
    bb105__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_259)<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>_262 = _239<br/>StorageLive(_263)<br/>_263 = _251<br/>_261 = (move _262, move _263)<br/>StorageDead(_263)<br/>StorageDead(_262)<br/></td></tr><tr><td align="left">_257 = anchor_lang::error::Error::with_pubkeys(move _258, move _261)</td></tr></table>>];
    bb106__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_261)<br/>StorageDead(_258)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _257)<br/>StorageDead(_257)<br/>StorageDead(_253)<br/>StorageDead(_251)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb107__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_255)<br/>StorageDead(_254)<br/>_238 = const ()<br/>StorageDead(_253)<br/>StorageDead(_251)<br/>StorageDead(_239)<br/>StorageDead(_238)<br/>StorageLive(_264)<br/>StorageLive(_265)<br/>StorageLive(_266)<br/>StorageLive(_267)<br/>StorageLive(_268)<br/>_268 = &amp;_95<br/>_267 = &amp;(*_268)<br/></td></tr><tr><td align="left">_266 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, UserStats&gt; as AsRef&lt;anchor_lang::prelude::AccountInfo&lt;'_&gt;&gt;&gt;::as_ref(move _267)</td></tr></table>>];
    bb108__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_267)<br/>_265 = ((*_266).6: bool)<br/></td></tr><tr><td align="left">switchInt(move _265)</td></tr></table>>];
    bb109__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_268)<br/>StorageDead(_266)<br/>StorageLive(_270)<br/>StorageLive(_271)<br/>StorageLive(_272)<br/>_272 = ConstraintMut<br/></td></tr><tr><td align="left">_271 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _272)</td></tr></table>>];
    bb110__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_272)<br/></td></tr><tr><td align="left">_270 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _271, const &quot;user_stats&quot;)</td></tr></table>>];
    bb111__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_271)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _270)<br/>StorageDead(_270)<br/>StorageDead(_265)<br/>StorageDead(_264)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb112__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_268)<br/>StorageDead(_266)<br/>_264 = const ()<br/>StorageDead(_265)<br/>StorageDead(_264)<br/>StorageLive(_273)<br/>StorageLive(_274)<br/>StorageLive(_275)<br/>StorageLive(_276)<br/>StorageLive(_277)<br/>StorageLive(_278)<br/>StorageLive(_279)<br/>StorageLive(_280)<br/>_280 = &amp;_95<br/></td></tr><tr><td align="left">_279 = anchor_lang::prelude::AccountLoader::&lt;'_, UserStats&gt;::load(move _280)</td></tr></table>>];
    bb113__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_280)<br/></td></tr><tr><td align="left">_278 = &lt;std::result::Result&lt;Ref&lt;'_, UserStats&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _279)</td></tr></table>>];
    bb114__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">_347 = const true<br/>_348 = const true<br/>StorageDead(_279)<br/>_281 = discriminant(_278)<br/></td></tr><tr><td align="left">switchInt(move _281)</td></tr></table>>];
    bb115__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageLive(_285)<br/>_285 = move ((_278 as Continue).0: std::cell::Ref&lt;'_, state::user::UserStats&gt;)<br/>_277 = move _285<br/>StorageDead(_285)<br/>_276 = &amp;_277<br/></td></tr><tr><td align="left">_275 = &lt;Ref&lt;'_, UserStats&gt; as Deref&gt;::deref(move _276)</td></tr></table>>];
    bb116__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageLive(_282)<br/>_282 = move ((_278 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_284)<br/>_284 = move _282<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _284)</td></tr></table>>];
    bb117__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_284)<br/>StorageDead(_282)<br/>StorageDead(_276)<br/>_373 = discriminant(_278)<br/>_347 = const false<br/>_348 = const false<br/>StorageDead(_278)<br/>StorageDead(_277)<br/>StorageDead(_275)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb118__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">StorageDead(_276)<br/>_274 = ((*_275).0: anchor_lang::prelude::Pubkey)<br/></td></tr><tr><td align="left">drop(_277)</td></tr></table>>];
    bb119__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_287)<br/>StorageLive(_288)<br/>StorageLive(_289)<br/>_289 = &amp;_274<br/>StorageLive(_290)<br/>_290 = &amp;_286<br/></td></tr><tr><td align="left">_288 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _289, move _290)</td></tr></table>>];
    bb120__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left">switchInt(move _288)</td></tr></table>>];
    bb121__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageDead(_290)<br/>StorageDead(_289)<br/>StorageLive(_292)<br/>StorageLive(_293)<br/>StorageLive(_294)<br/>StorageLive(_295)<br/>_295 = ConstraintHasOne<br/></td></tr><tr><td align="left">_294 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _295)</td></tr></table>>];
    bb122__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageDead(_295)<br/></td></tr><tr><td align="left">_293 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _294, const &quot;user_stats&quot;)</td></tr></table>>];
    bb123__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_294)<br/>StorageLive(_296)<br/>StorageLive(_297)<br/>_297 = _274<br/>StorageLive(_298)<br/>_298 = _286<br/>_296 = (move _297, move _298)<br/>StorageDead(_298)<br/>StorageDead(_297)<br/></td></tr><tr><td align="left">_292 = anchor_lang::error::Error::with_pubkeys(move _293, move _296)</td></tr></table>>];
    bb124__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageDead(_296)<br/>StorageDead(_293)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _292)<br/>StorageDead(_292)<br/>StorageDead(_288)<br/>StorageDead(_286)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb125__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_290)<br/>StorageDead(_289)<br/>_273 = const ()<br/>StorageDead(_288)<br/>StorageDead(_286)<br/>StorageDead(_274)<br/>StorageDead(_273)<br/>StorageLive(_301)<br/>StorageLive(_302)<br/>StorageLive(_303)<br/>StorageLive(_304)<br/>StorageLive(_305)<br/>StorageLive(_306)<br/>StorageLive(_307)<br/>StorageLive(_308)<br/>StorageLive(_309)<br/>_309 = const b&quot;insurance_fund_vault&quot;<br/>_308 = &amp;(*_309)<br/></td></tr><tr><td align="left">_307 = &lt;[u8; 20] as AsRef&lt;[u8]&gt;&gt;::as_ref(move _308)</td></tr></table>>];
    bb126__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">_306 = &amp;(*_307)<br/>StorageDead(_308)<br/>StorageLive(_310)<br/>StorageLive(_311)<br/>StorageLive(_312)<br/>StorageLive(_313)<br/>StorageLive(_314)<br/>_314 = _7<br/></td></tr><tr><td align="left">_313 = core::num::&lt;impl u16&gt;::to_le_bytes(move _314)</td></tr></table>>];
    bb127__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">_312 = &amp;_313<br/>StorageDead(_314)<br/></td></tr><tr><td align="left">_311 = &lt;[u8; 2] as AsRef&lt;[u8]&gt;&gt;::as_ref(move _312)</td></tr></table>>];
    bb128__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">_310 = &amp;(*_311)<br/>StorageDead(_312)<br/>_305 = [move _306, move _310]<br/>StorageDead(_310)<br/>StorageDead(_306)<br/>_304 = &amp;_305<br/>_303 = &amp;(*_304)<br/>_302 = move _303 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_303)<br/>StorageLive(_315)<br/>StorageLive(_316)<br/>_316 = &amp;_1<br/>_345 = deref_copy (*_316)<br/>_315 = &amp;(*_345)<br/></td></tr><tr><td align="left">_301 = anchor_lang::prelude::Pubkey::find_program_address(move _302, move _315)</td></tr></table>>];
    bb129__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageDead(_315)<br/>StorageDead(_302)<br/>StorageLive(_299)<br/>_299 = (_301.0: anchor_lang::prelude::Pubkey)<br/>StorageLive(_300)<br/>_300 = (_301.1: u8)<br/>StorageDead(_316)<br/>StorageDead(_313)<br/>StorageDead(_311)<br/>StorageDead(_309)<br/>StorageDead(_307)<br/>StorageDead(_305)<br/>StorageDead(_304)<br/>StorageDead(_301)<br/>StorageLive(_317)<br/>_317 = _300<br/>((*_4).2: u8) = move _317<br/>StorageDead(_317)<br/>StorageLive(_318)<br/>StorageLive(_319)<br/>StorageLive(_320)<br/>StorageLive(_321)<br/>StorageLive(_322)<br/>_403 = (((_125.0: std::ptr::Unique&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;).0: *const anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;)<br/>_322 = &amp;(*_403)<br/></td></tr><tr><td align="left">_321 = &lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt; as anchor_lang::Key&gt;::key(move _322)</td></tr></table>>];
    bb130__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">_320 = &amp;_321<br/>StorageDead(_322)<br/>StorageLive(_323)<br/>_323 = &amp;_299<br/></td></tr><tr><td align="left">_319 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::ne(move _320, move _323)</td></tr></table>>];
    bb131__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left">switchInt(move _319)</td></tr></table>>];
    bb132__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageDead(_323)<br/>StorageDead(_321)<br/>StorageDead(_320)<br/>StorageLive(_325)<br/>StorageLive(_326)<br/>StorageLive(_327)<br/>StorageLive(_328)<br/>_328 = ConstraintSeeds<br/></td></tr><tr><td align="left">_327 = &lt;anchor_lang::error::Error as From&lt;anchor_lang::error::ErrorCode&gt;&gt;::from(move _328)</td></tr></table>>];
    bb133__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageDead(_328)<br/></td></tr><tr><td align="left">_326 = anchor_lang::error::Error::with_account_name::&lt;&amp;str&gt;(move _327, const &quot;insurance_fund_vault&quot;)</td></tr></table>>];
    bb134__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">_346 = const true<br/>StorageDead(_327)<br/>StorageLive(_329)<br/>StorageLive(_330)<br/>StorageLive(_331)<br/>_404 = (((_125.0: std::ptr::Unique&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;&gt;).0: *const anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt;)<br/>_331 = &amp;(*_404)<br/></td></tr><tr><td align="left">_330 = &lt;anchor_lang::prelude::InterfaceAccount&lt;'_, anchor_spl::token_interface::TokenAccount&gt; as anchor_lang::Key&gt;::key(move _331)</td></tr></table>>];
    bb135__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_331)<br/>StorageLive(_332)<br/>_332 = _299<br/>_329 = (move _330, move _332)<br/>StorageDead(_332)<br/>StorageDead(_330)<br/>_346 = const false<br/></td></tr><tr><td align="left">_325 = anchor_lang::error::Error::with_pubkeys(move _326, move _329)</td></tr></table>>];
    bb136__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageDead(_329)<br/>_346 = const false<br/>StorageDead(_326)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Err(move _325)<br/>StorageDead(_325)<br/>StorageDead(_319)<br/>StorageDead(_318)<br/>StorageDead(_300)<br/>StorageDead(_299)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb137__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_323)<br/>StorageDead(_321)<br/>StorageDead(_320)<br/>_318 = const ()<br/>StorageDead(_319)<br/>StorageDead(_318)<br/>StorageLive(_333)<br/>StorageLive(_334)<br/>_334 = move _20<br/>StorageLive(_335)<br/>_335 = move _35<br/>StorageLive(_336)<br/>_336 = move _50<br/>StorageLive(_337)<br/>_337 = move _65<br/>StorageLive(_338)<br/>_338 = move _80<br/>StorageLive(_339)<br/>_339 = move _95<br/>StorageLive(_340)<br/>_340 = move _110<br/>StorageLive(_341)<br/>_341 = move _125<br/>_333 = if_staker::TransferProtocolIfShares::&lt;'_&gt; { signer: move _334, transfer_config: move _335, state: move _336, spot_market: move _337, insurance_fund_stake: move _338, user_stats: move _339, authority: move _340, insurance_fund_vault: move _341 }<br/>StorageDead(_341)<br/>StorageDead(_340)<br/>StorageDead(_339)<br/>StorageDead(_338)<br/>StorageDead(_337)<br/>StorageDead(_336)<br/>StorageDead(_335)<br/>StorageDead(_334)<br/>_0 = std::result::Result::&lt;if_staker::TransferProtocolIfShares&lt;'_&gt;, anchor_lang::error::Error&gt;::Ok(move _333)<br/>StorageDead(_333)<br/>StorageDead(_300)<br/>StorageDead(_299)<br/>StorageDead(_192)<br/>StorageDead(_191)<br/>StorageDead(_150)<br/>StorageDead(_149)<br/>StorageDead(_125)<br/>StorageDead(_110)<br/>StorageDead(_95)<br/>StorageDead(_80)<br/>StorageDead(_65)<br/>StorageDead(_50)<br/>StorageDead(_35)<br/>StorageDead(_20)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb138__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_274)<br/>StorageDead(_273)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb139__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageDead(_239)<br/>StorageDead(_238)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb140__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">StorageDead(_192)<br/>StorageDead(_191)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb141__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_150)<br/>StorageDead(_149)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb142__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left">drop(_125)</td></tr></table>>];
    bb143__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_125)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb144__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb145__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb146__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb147__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/></td></tr><tr><td align="left">drop(_50)</td></tr></table>>];
    bb148__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb149__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb150__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb151__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb152__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left">return</td></tr></table>>];
    bb153__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">153 (cleanup)</td></tr><tr><td align="left">drop(_277)</td></tr></table>>];
    bb154__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">154 (cleanup)</td></tr><tr><td align="left">drop(_242)</td></tr></table>>];
    bb155__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">155 (cleanup)</td></tr><tr><td align="left">drop(_125)</td></tr></table>>];
    bb156__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">156 (cleanup)</td></tr><tr><td align="left">drop(_50)</td></tr></table>>];
    bb157__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">157 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb158__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">_369 = discriminant(_243)<br/>_349 = const false<br/>_350 = const false<br/>StorageDead(_243)<br/>StorageDead(_242)<br/>StorageDead(_240)<br/>StorageLive(_251)<br/>StorageLive(_252)<br/>_252 = &amp;_110<br/></td></tr><tr><td align="left">_251 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as anchor_lang::Key&gt;::key(move _252)</td></tr></table>>];
    bb159__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">_371 = discriminant(_278)<br/>_347 = const false<br/>_348 = const false<br/>StorageDead(_278)<br/>StorageDead(_277)<br/>StorageDead(_275)<br/>StorageLive(_286)<br/>StorageLive(_287)<br/>_287 = &amp;_110<br/></td></tr><tr><td align="left">_286 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as anchor_lang::Key&gt;::key(move _287)</td></tr></table>>];
    bb160__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">160 (cleanup)</td></tr><tr><td align="left">drop(_326)</td></tr></table>>];
    bb161__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">161 (cleanup)</td></tr><tr><td align="left">switchInt(_346)</td></tr></table>>];
    bb162__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">162 (cleanup)</td></tr><tr><td align="left" balign="left">_393 = discriminant(_278)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb163__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">163 (cleanup)</td></tr><tr><td align="left" balign="left">_394 = discriminant(_243)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb164__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">164 (cleanup)</td></tr><tr><td align="left">drop(_222)</td></tr></table>>];
    bb165__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">165 (cleanup)</td></tr><tr><td align="left">switchInt(_351)</td></tr></table>>];
    bb166__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">166 (cleanup)</td></tr><tr><td align="left">drop(_175)</td></tr></table>>];
    bb167__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">167 (cleanup)</td></tr><tr><td align="left">switchInt(_352)</td></tr></table>>];
    bb168__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">168 (cleanup)</td></tr><tr><td align="left" balign="left">_395 = discriminant(_126)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb169__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">169 (cleanup)</td></tr><tr><td align="left" balign="left">_396 = discriminant(_111)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb170__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">170 (cleanup)</td></tr><tr><td align="left" balign="left">_397 = discriminant(_96)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb171__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">171 (cleanup)</td></tr><tr><td align="left" balign="left">_398 = discriminant(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb172__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">172 (cleanup)</td></tr><tr><td align="left" balign="left">_399 = discriminant(_66)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb173__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">173 (cleanup)</td></tr><tr><td align="left" balign="left">_400 = discriminant(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb174__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">174 (cleanup)</td></tr><tr><td align="left" balign="left">_401 = discriminant(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb175__0_8887 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">175 (cleanup)</td></tr><tr><td align="left" balign="left">_402 = discriminant(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_8887 -> bb1__0_8887 [label="return"];
    bb1__0_8887 -> bb2__0_8887 [label="return"];
    bb1__0_8887 -> bb157__0_8887 [label="unwind"];
    bb2__0_8887 -> bb3__0_8887 [label="return"];
    bb3__0_8887 -> bb4__0_8887 [label="0"];
    bb3__0_8887 -> bb6__0_8887 [label="1"];
    bb3__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb4__0_8887 -> bb8__0_8887 [label="return"];
    bb6__0_8887 -> bb7__0_8887 [label="return"];
    bb7__0_8887 -> bb151__0_8887 [label=""];
    bb8__0_8887 -> bb9__0_8887 [label="return"];
    bb8__0_8887 -> bb157__0_8887 [label="unwind"];
    bb9__0_8887 -> bb10__0_8887 [label="return"];
    bb9__0_8887 -> bb157__0_8887 [label="unwind"];
    bb10__0_8887 -> bb11__0_8887 [label="0"];
    bb10__0_8887 -> bb12__0_8887 [label="1"];
    bb10__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb11__0_8887 -> bb14__0_8887 [label="return"];
    bb12__0_8887 -> bb13__0_8887 [label="return"];
    bb12__0_8887 -> bb175__0_8887 [label="unwind"];
    bb13__0_8887 -> bb150__0_8887 [label=""];
    bb14__0_8887 -> bb15__0_8887 [label="return"];
    bb14__0_8887 -> bb157__0_8887 [label="unwind"];
    bb15__0_8887 -> bb16__0_8887 [label="return"];
    bb15__0_8887 -> bb157__0_8887 [label="unwind"];
    bb16__0_8887 -> bb17__0_8887 [label="0"];
    bb16__0_8887 -> bb18__0_8887 [label="1"];
    bb16__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb17__0_8887 -> bb20__0_8887 [label="return"];
    bb18__0_8887 -> bb19__0_8887 [label="return"];
    bb18__0_8887 -> bb174__0_8887 [label="unwind"];
    bb19__0_8887 -> bb149__0_8887 [label=""];
    bb20__0_8887 -> bb21__0_8887 [label="return"];
    bb20__0_8887 -> bb157__0_8887 [label="unwind"];
    bb21__0_8887 -> bb22__0_8887 [label="return"];
    bb21__0_8887 -> bb157__0_8887 [label="unwind"];
    bb22__0_8887 -> bb23__0_8887 [label="0"];
    bb22__0_8887 -> bb24__0_8887 [label="1"];
    bb22__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb23__0_8887 -> bb26__0_8887 [label="return"];
    bb23__0_8887 -> bb156__0_8887 [label="unwind"];
    bb24__0_8887 -> bb25__0_8887 [label="return"];
    bb24__0_8887 -> bb173__0_8887 [label="unwind"];
    bb25__0_8887 -> bb148__0_8887 [label=""];
    bb26__0_8887 -> bb27__0_8887 [label="return"];
    bb26__0_8887 -> bb156__0_8887 [label="unwind"];
    bb27__0_8887 -> bb28__0_8887 [label="return"];
    bb27__0_8887 -> bb156__0_8887 [label="unwind"];
    bb28__0_8887 -> bb29__0_8887 [label="0"];
    bb28__0_8887 -> bb30__0_8887 [label="1"];
    bb28__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb29__0_8887 -> bb32__0_8887 [label="return"];
    bb29__0_8887 -> bb156__0_8887 [label="unwind"];
    bb30__0_8887 -> bb31__0_8887 [label="return"];
    bb30__0_8887 -> bb172__0_8887 [label="unwind"];
    bb31__0_8887 -> bb147__0_8887 [label=""];
    bb32__0_8887 -> bb33__0_8887 [label="return"];
    bb32__0_8887 -> bb156__0_8887 [label="unwind"];
    bb33__0_8887 -> bb34__0_8887 [label="return"];
    bb33__0_8887 -> bb156__0_8887 [label="unwind"];
    bb34__0_8887 -> bb35__0_8887 [label="0"];
    bb34__0_8887 -> bb36__0_8887 [label="1"];
    bb34__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb35__0_8887 -> bb38__0_8887 [label="return"];
    bb35__0_8887 -> bb156__0_8887 [label="unwind"];
    bb36__0_8887 -> bb37__0_8887 [label="return"];
    bb36__0_8887 -> bb171__0_8887 [label="unwind"];
    bb37__0_8887 -> bb146__0_8887 [label=""];
    bb38__0_8887 -> bb39__0_8887 [label="return"];
    bb38__0_8887 -> bb156__0_8887 [label="unwind"];
    bb39__0_8887 -> bb40__0_8887 [label="return"];
    bb39__0_8887 -> bb156__0_8887 [label="unwind"];
    bb40__0_8887 -> bb41__0_8887 [label="0"];
    bb40__0_8887 -> bb42__0_8887 [label="1"];
    bb40__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb41__0_8887 -> bb44__0_8887 [label="return"];
    bb41__0_8887 -> bb156__0_8887 [label="unwind"];
    bb42__0_8887 -> bb43__0_8887 [label="return"];
    bb42__0_8887 -> bb170__0_8887 [label="unwind"];
    bb43__0_8887 -> bb145__0_8887 [label=""];
    bb44__0_8887 -> bb45__0_8887 [label="return"];
    bb44__0_8887 -> bb156__0_8887 [label="unwind"];
    bb45__0_8887 -> bb46__0_8887 [label="return"];
    bb45__0_8887 -> bb156__0_8887 [label="unwind"];
    bb46__0_8887 -> bb47__0_8887 [label="0"];
    bb46__0_8887 -> bb48__0_8887 [label="1"];
    bb46__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb47__0_8887 -> bb50__0_8887 [label="return"];
    bb47__0_8887 -> bb156__0_8887 [label="unwind"];
    bb48__0_8887 -> bb49__0_8887 [label="return"];
    bb48__0_8887 -> bb169__0_8887 [label="unwind"];
    bb49__0_8887 -> bb144__0_8887 [label=""];
    bb50__0_8887 -> bb51__0_8887 [label="return"];
    bb50__0_8887 -> bb156__0_8887 [label="unwind"];
    bb51__0_8887 -> bb52__0_8887 [label="return"];
    bb51__0_8887 -> bb156__0_8887 [label="unwind"];
    bb52__0_8887 -> bb53__0_8887 [label="0"];
    bb52__0_8887 -> bb54__0_8887 [label="1"];
    bb52__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb53__0_8887 -> bb56__0_8887 [label="return"];
    bb53__0_8887 -> bb155__0_8887 [label="unwind"];
    bb54__0_8887 -> bb55__0_8887 [label="return"];
    bb54__0_8887 -> bb168__0_8887 [label="unwind"];
    bb55__0_8887 -> bb143__0_8887 [label=""];
    bb56__0_8887 -> bb57__0_8887 [label="0"];
    bb56__0_8887 -> bb60__0_8887 [label="otherwise"];
    bb57__0_8887 -> bb58__0_8887 [label="return"];
    bb57__0_8887 -> bb155__0_8887 [label="unwind"];
    bb58__0_8887 -> bb59__0_8887 [label="return"];
    bb58__0_8887 -> bb155__0_8887 [label="unwind"];
    bb59__0_8887 -> bb142__0_8887 [label=""];
    bb60__0_8887 -> bb61__0_8887 [label="return"];
    bb60__0_8887 -> bb155__0_8887 [label="unwind"];
    bb61__0_8887 -> bb62__0_8887 [label="return"];
    bb61__0_8887 -> bb155__0_8887 [label="unwind"];
    bb62__0_8887 -> bb63__0_8887 [label="return"];
    bb62__0_8887 -> bb155__0_8887 [label="unwind"];
    bb63__0_8887 -> bb64__0_8887 [label="return"];
    bb63__0_8887 -> bb155__0_8887 [label="unwind"];
    bb64__0_8887 -> bb65__0_8887 [label="return"];
    bb64__0_8887 -> bb155__0_8887 [label="unwind"];
    bb65__0_8887 -> bb71__0_8887 [label="0"];
    bb65__0_8887 -> bb66__0_8887 [label="otherwise"];
    bb66__0_8887 -> bb67__0_8887 [label="return"];
    bb66__0_8887 -> bb155__0_8887 [label="unwind"];
    bb67__0_8887 -> bb68__0_8887 [label="return"];
    bb67__0_8887 -> bb155__0_8887 [label="unwind"];
    bb68__0_8887 -> bb69__0_8887 [label="return"];
    bb68__0_8887 -> bb167__0_8887 [label="unwind"];
    bb69__0_8887 -> bb70__0_8887 [label="return"];
    bb69__0_8887 -> bb167__0_8887 [label="unwind"];
    bb70__0_8887 -> bb141__0_8887 [label=""];
    bb71__0_8887 -> bb72__0_8887 [label="return"];
    bb71__0_8887 -> bb155__0_8887 [label="unwind"];
    bb72__0_8887 -> bb73__0_8887 [label="0"];
    bb72__0_8887 -> bb76__0_8887 [label="otherwise"];
    bb73__0_8887 -> bb74__0_8887 [label="return"];
    bb73__0_8887 -> bb155__0_8887 [label="unwind"];
    bb74__0_8887 -> bb75__0_8887 [label="return"];
    bb74__0_8887 -> bb155__0_8887 [label="unwind"];
    bb75__0_8887 -> bb141__0_8887 [label=""];
    bb76__0_8887 -> bb77__0_8887 [label="return"];
    bb76__0_8887 -> bb155__0_8887 [label="unwind"];
    bb77__0_8887 -> bb78__0_8887 [label="return"];
    bb77__0_8887 -> bb155__0_8887 [label="unwind"];
    bb78__0_8887 -> bb79__0_8887 [label="return"];
    bb78__0_8887 -> bb155__0_8887 [label="unwind"];
    bb79__0_8887 -> bb80__0_8887 [label="return"];
    bb79__0_8887 -> bb155__0_8887 [label="unwind"];
    bb80__0_8887 -> bb81__0_8887 [label="return"];
    bb80__0_8887 -> bb155__0_8887 [label="unwind"];
    bb81__0_8887 -> bb82__0_8887 [label="return"];
    bb81__0_8887 -> bb155__0_8887 [label="unwind"];
    bb82__0_8887 -> bb83__0_8887 [label="return"];
    bb82__0_8887 -> bb155__0_8887 [label="unwind"];
    bb83__0_8887 -> bb89__0_8887 [label="0"];
    bb83__0_8887 -> bb84__0_8887 [label="otherwise"];
    bb84__0_8887 -> bb85__0_8887 [label="return"];
    bb84__0_8887 -> bb155__0_8887 [label="unwind"];
    bb85__0_8887 -> bb86__0_8887 [label="return"];
    bb85__0_8887 -> bb155__0_8887 [label="unwind"];
    bb86__0_8887 -> bb87__0_8887 [label="return"];
    bb86__0_8887 -> bb165__0_8887 [label="unwind"];
    bb87__0_8887 -> bb88__0_8887 [label="return"];
    bb87__0_8887 -> bb165__0_8887 [label="unwind"];
    bb88__0_8887 -> bb140__0_8887 [label=""];
    bb89__0_8887 -> bb90__0_8887 [label="return"];
    bb89__0_8887 -> bb155__0_8887 [label="unwind"];
    bb90__0_8887 -> bb91__0_8887 [label="0"];
    bb90__0_8887 -> bb94__0_8887 [label="otherwise"];
    bb91__0_8887 -> bb92__0_8887 [label="return"];
    bb91__0_8887 -> bb155__0_8887 [label="unwind"];
    bb92__0_8887 -> bb93__0_8887 [label="return"];
    bb92__0_8887 -> bb155__0_8887 [label="unwind"];
    bb93__0_8887 -> bb140__0_8887 [label=""];
    bb94__0_8887 -> bb95__0_8887 [label="return"];
    bb94__0_8887 -> bb155__0_8887 [label="unwind"];
    bb95__0_8887 -> bb96__0_8887 [label="return"];
    bb95__0_8887 -> bb155__0_8887 [label="unwind"];
    bb96__0_8887 -> bb97__0_8887 [label="0"];
    bb96__0_8887 -> bb98__0_8887 [label="1"];
    bb96__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb97__0_8887 -> bb100__0_8887 [label="return"];
    bb97__0_8887 -> bb154__0_8887 [label="unwind"];
    bb98__0_8887 -> bb99__0_8887 [label="return"];
    bb98__0_8887 -> bb163__0_8887 [label="unwind"];
    bb99__0_8887 -> bb139__0_8887 [label=""];
    bb100__0_8887 -> bb158__0_8887 [label="return"];
    bb100__0_8887 -> bb163__0_8887 [label="unwind"];
    bb101__0_8887 -> bb102__0_8887 [label="return"];
    bb101__0_8887 -> bb155__0_8887 [label="unwind"];
    bb102__0_8887 -> bb107__0_8887 [label="0"];
    bb102__0_8887 -> bb103__0_8887 [label="otherwise"];
    bb103__0_8887 -> bb104__0_8887 [label="return"];
    bb103__0_8887 -> bb155__0_8887 [label="unwind"];
    bb104__0_8887 -> bb105__0_8887 [label="return"];
    bb104__0_8887 -> bb155__0_8887 [label="unwind"];
    bb105__0_8887 -> bb106__0_8887 [label="return"];
    bb105__0_8887 -> bb155__0_8887 [label="unwind"];
    bb106__0_8887 -> bb139__0_8887 [label=""];
    bb107__0_8887 -> bb108__0_8887 [label="return"];
    bb107__0_8887 -> bb155__0_8887 [label="unwind"];
    bb108__0_8887 -> bb109__0_8887 [label="0"];
    bb108__0_8887 -> bb112__0_8887 [label="otherwise"];
    bb109__0_8887 -> bb110__0_8887 [label="return"];
    bb109__0_8887 -> bb155__0_8887 [label="unwind"];
    bb110__0_8887 -> bb111__0_8887 [label="return"];
    bb110__0_8887 -> bb155__0_8887 [label="unwind"];
    bb111__0_8887 -> bb140__0_8887 [label=""];
    bb112__0_8887 -> bb113__0_8887 [label="return"];
    bb112__0_8887 -> bb155__0_8887 [label="unwind"];
    bb113__0_8887 -> bb114__0_8887 [label="return"];
    bb113__0_8887 -> bb155__0_8887 [label="unwind"];
    bb114__0_8887 -> bb115__0_8887 [label="0"];
    bb114__0_8887 -> bb116__0_8887 [label="1"];
    bb114__0_8887 -> bb5__0_8887 [label="otherwise"];
    bb115__0_8887 -> bb118__0_8887 [label="return"];
    bb115__0_8887 -> bb153__0_8887 [label="unwind"];
    bb116__0_8887 -> bb117__0_8887 [label="return"];
    bb116__0_8887 -> bb162__0_8887 [label="unwind"];
    bb117__0_8887 -> bb138__0_8887 [label=""];
    bb118__0_8887 -> bb159__0_8887 [label="return"];
    bb118__0_8887 -> bb162__0_8887 [label="unwind"];
    bb119__0_8887 -> bb120__0_8887 [label="return"];
    bb119__0_8887 -> bb155__0_8887 [label="unwind"];
    bb120__0_8887 -> bb125__0_8887 [label="0"];
    bb120__0_8887 -> bb121__0_8887 [label="otherwise"];
    bb121__0_8887 -> bb122__0_8887 [label="return"];
    bb121__0_8887 -> bb155__0_8887 [label="unwind"];
    bb122__0_8887 -> bb123__0_8887 [label="return"];
    bb122__0_8887 -> bb155__0_8887 [label="unwind"];
    bb123__0_8887 -> bb124__0_8887 [label="return"];
    bb123__0_8887 -> bb155__0_8887 [label="unwind"];
    bb124__0_8887 -> bb138__0_8887 [label=""];
    bb125__0_8887 -> bb126__0_8887 [label="return"];
    bb125__0_8887 -> bb155__0_8887 [label="unwind"];
    bb126__0_8887 -> bb127__0_8887 [label="return"];
    bb126__0_8887 -> bb155__0_8887 [label="unwind"];
    bb127__0_8887 -> bb128__0_8887 [label="return"];
    bb127__0_8887 -> bb155__0_8887 [label="unwind"];
    bb128__0_8887 -> bb129__0_8887 [label="return"];
    bb128__0_8887 -> bb155__0_8887 [label="unwind"];
    bb129__0_8887 -> bb130__0_8887 [label="return"];
    bb129__0_8887 -> bb155__0_8887 [label="unwind"];
    bb130__0_8887 -> bb131__0_8887 [label="return"];
    bb130__0_8887 -> bb155__0_8887 [label="unwind"];
    bb131__0_8887 -> bb137__0_8887 [label="0"];
    bb131__0_8887 -> bb132__0_8887 [label="otherwise"];
    bb132__0_8887 -> bb133__0_8887 [label="return"];
    bb132__0_8887 -> bb155__0_8887 [label="unwind"];
    bb133__0_8887 -> bb134__0_8887 [label="return"];
    bb133__0_8887 -> bb155__0_8887 [label="unwind"];
    bb134__0_8887 -> bb135__0_8887 [label="return"];
    bb134__0_8887 -> bb161__0_8887 [label="unwind"];
    bb135__0_8887 -> bb136__0_8887 [label="return"];
    bb135__0_8887 -> bb161__0_8887 [label="unwind"];
    bb136__0_8887 -> bb140__0_8887 [label=""];
    bb137__0_8887 -> bb152__0_8887 [label=""];
    bb138__0_8887 -> bb140__0_8887 [label=""];
    bb139__0_8887 -> bb140__0_8887 [label=""];
    bb140__0_8887 -> bb141__0_8887 [label=""];
    bb141__0_8887 -> bb142__0_8887 [label=""];
    bb142__0_8887 -> bb143__0_8887 [label="return"];
    bb142__0_8887 -> bb156__0_8887 [label="unwind"];
    bb143__0_8887 -> bb144__0_8887 [label=""];
    bb144__0_8887 -> bb145__0_8887 [label=""];
    bb145__0_8887 -> bb146__0_8887 [label=""];
    bb146__0_8887 -> bb147__0_8887 [label=""];
    bb147__0_8887 -> bb148__0_8887 [label="return"];
    bb147__0_8887 -> bb157__0_8887 [label="unwind"];
    bb148__0_8887 -> bb149__0_8887 [label=""];
    bb149__0_8887 -> bb150__0_8887 [label=""];
    bb150__0_8887 -> bb151__0_8887 [label=""];
    bb151__0_8887 -> bb152__0_8887 [label=""];
    bb153__0_8887 -> bb162__0_8887 [label="return"];
    bb154__0_8887 -> bb163__0_8887 [label="return"];
    bb155__0_8887 -> bb156__0_8887 [label="return"];
    bb156__0_8887 -> bb157__0_8887 [label="return"];
    bb158__0_8887 -> bb101__0_8887 [label="return"];
    bb158__0_8887 -> bb155__0_8887 [label="unwind"];
    bb159__0_8887 -> bb119__0_8887 [label="return"];
    bb159__0_8887 -> bb155__0_8887 [label="unwind"];
    bb160__0_8887 -> bb155__0_8887 [label="return"];
    bb161__0_8887 -> bb155__0_8887 [label="0"];
    bb161__0_8887 -> bb160__0_8887 [label="otherwise"];
    bb162__0_8887 -> bb155__0_8887 [label=""];
    bb163__0_8887 -> bb155__0_8887 [label=""];
    bb164__0_8887 -> bb155__0_8887 [label="return"];
    bb165__0_8887 -> bb155__0_8887 [label="0"];
    bb165__0_8887 -> bb164__0_8887 [label="otherwise"];
    bb166__0_8887 -> bb155__0_8887 [label="return"];
    bb167__0_8887 -> bb155__0_8887 [label="0"];
    bb167__0_8887 -> bb166__0_8887 [label="otherwise"];
    bb168__0_8887 -> bb156__0_8887 [label=""];
    bb169__0_8887 -> bb156__0_8887 [label=""];
    bb170__0_8887 -> bb156__0_8887 [label=""];
    bb171__0_8887 -> bb156__0_8887 [label=""];
    bb172__0_8887 -> bb156__0_8887 [label=""];
    bb173__0_8887 -> bb157__0_8887 [label=""];
    bb174__0_8887 -> bb157__0_8887 [label=""];
    bb175__0_8887 -> bb157__0_8887 [label=""];
}
