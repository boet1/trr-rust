// MIR for `__cpi_client_accounts_initialize_user::<impl at programs/drift/src/instructions/user.rs:3933:10: 3933:18>::to_account_metas` after PreCodegen

fn __cpi_client_accounts_initialize_user::<impl at programs/drift/src/instructions/user.rs:3933:10: 3933:18>::to_account_metas(_1: &__cpi_client_accounts_initialize_user::InitializeUser<'_>, _2: Option<bool>) -> Vec<anchor_lang::prelude::AccountMeta> {
    debug self => _1;
    debug is_signer => _2;
    let mut _0: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _3: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _6: anchor_lang::prelude::AccountMeta;
    let mut _7: anchor_lang::prelude::Pubkey;
    let mut _8: &anchor_lang::prelude::AccountInfo<'_>;
    let _9: &anchor_lang::prelude::AccountInfo<'_>;
    let _10: ();
    let mut _11: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _12: anchor_lang::prelude::AccountMeta;
    let mut _13: anchor_lang::prelude::Pubkey;
    let mut _14: &anchor_lang::prelude::AccountInfo<'_>;
    let _15: &anchor_lang::prelude::AccountInfo<'_>;
    let _16: ();
    let mut _17: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _18: anchor_lang::prelude::AccountMeta;
    let mut _19: anchor_lang::prelude::Pubkey;
    let mut _20: &anchor_lang::prelude::AccountInfo<'_>;
    let _21: &anchor_lang::prelude::AccountInfo<'_>;
    let _22: ();
    let mut _23: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _24: anchor_lang::prelude::AccountMeta;
    let mut _25: anchor_lang::prelude::Pubkey;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let _27: &anchor_lang::prelude::AccountInfo<'_>;
    let _28: ();
    let mut _29: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _30: anchor_lang::prelude::AccountMeta;
    let mut _31: anchor_lang::prelude::Pubkey;
    let mut _32: &anchor_lang::prelude::AccountInfo<'_>;
    let _33: &anchor_lang::prelude::AccountInfo<'_>;
    let _34: ();
    let mut _35: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _36: anchor_lang::prelude::AccountMeta;
    let mut _37: anchor_lang::prelude::Pubkey;
    let mut _38: &anchor_lang::prelude::AccountInfo<'_>;
    let _39: &anchor_lang::prelude::AccountInfo<'_>;
    let _40: ();
    let mut _41: &mut std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _42: anchor_lang::prelude::AccountMeta;
    let mut _43: anchor_lang::prelude::Pubkey;
    let mut _44: &anchor_lang::prelude::AccountInfo<'_>;
    let _45: &anchor_lang::prelude::AccountInfo<'_>;
    scope 1 {
        debug account_metas => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = Vec::<anchor_lang::prelude::AccountMeta>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = &mut _3;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).0: anchor_lang::prelude::AccountInfo<'_>);
        _8 = &(*_9);
        _7 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _8) -> [return: bb2, unwind: bb23];
    }

    bb2: {
        StorageDead(_8);
        _6 = anchor_lang::prelude::AccountMeta::new(move _7, const false) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        StorageDead(_7);
        _4 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _5, move _6) -> [return: bb4, unwind: bb23];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_9);
        StorageDead(_4);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut _3;
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_1).1: anchor_lang::prelude::AccountInfo<'_>);
        _14 = &(*_15);
        _13 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _14) -> [return: bb5, unwind: bb23];
    }

    bb5: {
        StorageDead(_14);
        _12 = anchor_lang::prelude::AccountMeta::new(move _13, const false) -> [return: bb6, unwind: bb23];
    }

    bb6: {
        StorageDead(_13);
        _10 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _11, move _12) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_15);
        StorageDead(_10);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &mut _3;
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).2: anchor_lang::prelude::AccountInfo<'_>);
        _20 = &(*_21);
        _19 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _20) -> [return: bb8, unwind: bb23];
    }

    bb8: {
        StorageDead(_20);
        _18 = anchor_lang::prelude::AccountMeta::new(move _19, const false) -> [return: bb9, unwind: bb23];
    }

    bb9: {
        StorageDead(_19);
        _16 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _17, move _18) -> [return: bb10, unwind: bb23];
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_21);
        StorageDead(_16);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &mut _3;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).3: anchor_lang::prelude::AccountInfo<'_>);
        _26 = &(*_27);
        _25 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _26) -> [return: bb11, unwind: bb23];
    }

    bb11: {
        StorageDead(_26);
        _24 = anchor_lang::prelude::AccountMeta::new_readonly(move _25, const true) -> [return: bb12, unwind: bb23];
    }

    bb12: {
        StorageDead(_25);
        _22 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _23, move _24) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_27);
        StorageDead(_22);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &mut _3;
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &((*_1).4: anchor_lang::prelude::AccountInfo<'_>);
        _32 = &(*_33);
        _31 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _32) -> [return: bb14, unwind: bb23];
    }

    bb14: {
        StorageDead(_32);
        _30 = anchor_lang::prelude::AccountMeta::new(move _31, const true) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        StorageDead(_31);
        _28 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _29, move _30) -> [return: bb16, unwind: bb23];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_33);
        StorageDead(_28);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut _3;
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &((*_1).5: anchor_lang::prelude::AccountInfo<'_>);
        _38 = &(*_39);
        _37 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _38) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        StorageDead(_38);
        _36 = anchor_lang::prelude::AccountMeta::new_readonly(move _37, const false) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        StorageDead(_37);
        _34 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _35, move _36) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_39);
        StorageDead(_34);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _3;
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &((*_1).6: anchor_lang::prelude::AccountInfo<'_>);
        _44 = &(*_45);
        _43 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _44) -> [return: bb20, unwind: bb23];
    }

    bb20: {
        StorageDead(_44);
        _42 = anchor_lang::prelude::AccountMeta::new_readonly(move _43, const false) -> [return: bb21, unwind: bb23];
    }

    bb21: {
        StorageDead(_43);
        _40 = Vec::<anchor_lang::prelude::AccountMeta>::push(move _41, move _42) -> [return: bb22, unwind: bb23];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_45);
        StorageDead(_40);
        _0 = move _3;
        StorageDead(_3);
        return;
    }

    bb23 (cleanup): {
        drop(_3) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        resume;
    }
}
