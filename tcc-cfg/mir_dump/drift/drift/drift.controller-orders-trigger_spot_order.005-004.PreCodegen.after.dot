digraph Mir_0_567 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn trigger_spot_order(_1: u32, _2: &amp;ReErased state::state::State, _3: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _4: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _5: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _6: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _7: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;, _8: &amp;ReErased anchor_lang::prelude::Clock) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _9: i64;<br align="left"/>let _10: u64;<br align="left"/>let _11: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _12: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let _13: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _14: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let _15: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _16: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _17: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _18: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _19: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _20: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _21: Closure(DefId(0:4724 ~ drift[d311]::controller::orders::trigger_spot_order::{closure#1}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _27: usize;<br align="left"/>let mut _28: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _29: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _30: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _31: &amp;ReErased mut std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _32: std::slice::Iter&lt;ReErased, state::user::Order&gt;;<br align="left"/>let mut _33: &amp;ReErased [state::user::Order];<br align="left"/>let mut _34: &amp;ReErased [state::user::Order; 32_usize];<br align="left"/>let _35: &amp;ReErased state::user::User;<br align="left"/>let mut _36: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _37: Closure(DefId(0:568 ~ drift[d311]::controller::orders::trigger_spot_order::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn((&amp;ReErased state::user::Order,)) -&gt; bool, []), (&amp;ReErased u32,)]);<br align="left"/>let mut _38: &amp;ReErased u32;<br align="left"/>let mut _39: Closure(DefId(0:4725 ~ drift[d311]::controller::orders::trigger_spot_order::{closure#2}), [i32, Binder(extern &quot;RustCall&quot; fn(()) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _40: isize;<br align="left"/>let _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _42: !;<br align="left"/>let mut _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _44: usize;<br align="left"/>let _45: state::user::OrderStatus;<br align="left"/>let _46: u16;<br align="left"/>let _47: state::user::MarketType;<br align="left"/>let mut _48: (state::user::OrderStatus, u16, state::user::MarketType);<br align="left"/>let mut _49: state::user::OrderStatus;<br align="left"/>let mut _50: &amp;ReErased state::user::User;<br align="left"/>let mut _51: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _52: usize;<br align="left"/>let mut _53: usize;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: u16;<br align="left"/>let mut _56: &amp;ReErased state::user::User;<br align="left"/>let mut _57: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _58: usize;<br align="left"/>let mut _59: usize;<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: state::user::MarketType;<br align="left"/>let mut _62: &amp;ReErased state::user::User;<br align="left"/>let mut _63: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _64: usize;<br align="left"/>let mut _65: usize;<br align="left"/>let mut _66: bool;<br align="left"/>let _67: ();<br align="left"/>let mut _68: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _69: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _70: bool;<br align="left"/>let mut _71: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _72: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _73: state::user::OrderStatus;<br align="left"/>let mut _74: ();<br align="left"/>let _75: error::ErrorCode;<br align="left"/>let _76: ();<br align="left"/>let mut _77: &amp;ReErased str;<br align="left"/>let _78: &amp;ReErased str;<br align="left"/>let mut _79: &amp;ReErased std::string::String;<br align="left"/>let _80: &amp;ReErased std::string::String;<br align="left"/>let _81: std::string::String;<br align="left"/>let _82: std::string::String;<br align="left"/>let mut _83: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _84: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _85: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _86: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _87: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _88: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _89: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _90: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _91: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _92: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _93: &amp;ReErased error::ErrorCode;<br align="left"/>let _94: &amp;ReErased error::ErrorCode;<br align="left"/>let _95: ();<br align="left"/>let mut _96: &amp;ReErased str;<br align="left"/>let _97: &amp;ReErased str;<br align="left"/>let mut _98: error::ErrorCode;<br align="left"/>let mut _99: isize;<br align="left"/>let _100: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _101: !;<br align="left"/>let mut _102: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _103: ();<br align="left"/>let _104: ();<br align="left"/>let mut _105: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _106: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _107: bool;<br align="left"/>let mut _108: &amp;ReErased state::user::Order;<br align="left"/>let _109: &amp;ReErased state::user::User;<br align="left"/>let mut _110: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _111: usize;<br align="left"/>let mut _112: usize;<br align="left"/>let mut _113: bool;<br align="left"/>let mut _114: ();<br align="left"/>let _115: error::ErrorCode;<br align="left"/>let _116: ();<br align="left"/>let mut _117: &amp;ReErased str;<br align="left"/>let _118: &amp;ReErased str;<br align="left"/>let mut _119: &amp;ReErased std::string::String;<br align="left"/>let _120: &amp;ReErased std::string::String;<br align="left"/>let _121: std::string::String;<br align="left"/>let _122: std::string::String;<br align="left"/>let mut _123: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _124: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _125: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _126: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _127: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _128: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _129: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _130: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _131: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _132: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _133: &amp;ReErased error::ErrorCode;<br align="left"/>let _134: &amp;ReErased error::ErrorCode;<br align="left"/>let _135: ();<br align="left"/>let mut _136: &amp;ReErased str;<br align="left"/>let _137: &amp;ReErased str;<br align="left"/>let mut _138: error::ErrorCode;<br align="left"/>let mut _139: isize;<br align="left"/>let _140: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _141: !;<br align="left"/>let mut _142: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _143: ();<br align="left"/>let _144: ();<br align="left"/>let mut _145: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _146: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _147: bool;<br align="left"/>let mut _148: &amp;ReErased state::user::Order;<br align="left"/>let _149: &amp;ReErased state::user::User;<br align="left"/>let mut _150: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _151: usize;<br align="left"/>let mut _152: usize;<br align="left"/>let mut _153: bool;<br align="left"/>let mut _154: ();<br align="left"/>let _155: error::ErrorCode;<br align="left"/>let _156: ();<br align="left"/>let mut _157: &amp;ReErased str;<br align="left"/>let _158: &amp;ReErased str;<br align="left"/>let mut _159: &amp;ReErased std::string::String;<br align="left"/>let _160: &amp;ReErased std::string::String;<br align="left"/>let _161: std::string::String;<br align="left"/>let _162: std::string::String;<br align="left"/>let mut _163: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _164: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _165: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _166: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _167: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _168: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _169: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _170: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _171: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _172: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _173: &amp;ReErased error::ErrorCode;<br align="left"/>let _174: &amp;ReErased error::ErrorCode;<br align="left"/>let _175: ();<br align="left"/>let mut _176: &amp;ReErased str;<br align="left"/>let _177: &amp;ReErased str;<br align="left"/>let mut _178: error::ErrorCode;<br align="left"/>let mut _179: isize;<br align="left"/>let _180: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _181: !;<br align="left"/>let mut _182: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _183: ();<br align="left"/>let _184: ();<br align="left"/>let mut _185: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _186: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _187: bool;<br align="left"/>let mut _188: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _189: &amp;ReErased state::user::MarketType;<br align="left"/>let _190: state::user::MarketType;<br align="left"/>let mut _191: ();<br align="left"/>let _192: error::ErrorCode;<br align="left"/>let _193: ();<br align="left"/>let mut _194: &amp;ReErased str;<br align="left"/>let _195: &amp;ReErased str;<br align="left"/>let mut _196: &amp;ReErased std::string::String;<br align="left"/>let _197: &amp;ReErased std::string::String;<br align="left"/>let _198: std::string::String;<br align="left"/>let _199: std::string::String;<br align="left"/>let mut _200: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _201: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _202: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _203: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _204: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _205: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _206: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _207: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _208: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _209: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _210: &amp;ReErased error::ErrorCode;<br align="left"/>let _211: &amp;ReErased error::ErrorCode;<br align="left"/>let _212: ();<br align="left"/>let mut _213: &amp;ReErased str;<br align="left"/>let _214: &amp;ReErased str;<br align="left"/>let mut _215: error::ErrorCode;<br align="left"/>let mut _216: isize;<br align="left"/>let _217: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _218: !;<br align="left"/>let mut _219: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _220: ();<br align="left"/>let _221: ();<br align="left"/>let mut _222: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _223: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _224: &amp;ReErased mut state::user::User;<br align="left"/>let mut _225: &amp;ReErased mut state::user::User;<br align="left"/>let mut _226: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _227: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _228: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _229: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _230: u32;<br align="left"/>let mut _231: isize;<br align="left"/>let _232: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _233: !;<br align="left"/>let mut _234: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _235: ();<br align="left"/>let _236: ();<br align="left"/>let mut _237: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _238: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _239: bool;<br align="left"/>let mut _240: &amp;ReErased state::user::User;<br align="left"/>let _241: &amp;ReErased state::user::User;<br align="left"/>let mut _242: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _243: ();<br align="left"/>let _244: error::ErrorCode;<br align="left"/>let _245: ();<br align="left"/>let mut _246: &amp;ReErased str;<br align="left"/>let _247: &amp;ReErased str;<br align="left"/>let mut _248: &amp;ReErased std::string::String;<br align="left"/>let _249: &amp;ReErased std::string::String;<br align="left"/>let _250: std::string::String;<br align="left"/>let _251: std::string::String;<br align="left"/>let mut _252: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _253: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _254: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _255: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _256: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _257: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _258: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _259: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _260: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _261: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _262: &amp;ReErased error::ErrorCode;<br align="left"/>let _263: &amp;ReErased error::ErrorCode;<br align="left"/>let mut _264: error::ErrorCode;<br align="left"/>let mut _265: isize;<br align="left"/>let _266: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _267: !;<br align="left"/>let mut _268: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _269: ();<br align="left"/>let _270: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _271: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _272: std::result::Result&lt;std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _273: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _274: &amp;ReErased u16;<br align="left"/>let _275: &amp;ReErased u16;<br align="left"/>let mut _276: isize;<br align="left"/>let _277: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _278: !;<br align="left"/>let mut _279: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _280: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _281: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _282: math::oracle::OracleValidity;<br align="left"/>let mut _283: (&amp;ReErased state::oracle::OraclePriceData, math::oracle::OracleValidity);<br align="left"/>let mut _284: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (&amp;ReErased state::oracle::OraclePriceData, math::oracle::OracleValidity)&gt;;<br align="left"/>let mut _285: std::result::Result&lt;(&amp;ReErased state::oracle::OraclePriceData, math::oracle::OracleValidity), error::ErrorCode&gt;;<br align="left"/>let mut _286: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _287: state::user::MarketType;<br align="left"/>let mut _288: u16;<br align="left"/>let mut _289: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _290: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _291: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _292: &amp;ReErased (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let _293: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);<br align="left"/>let mut _294: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _295: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _296: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _297: i64;<br align="left"/>let mut _298: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _299: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _300: u64;<br align="left"/>let mut _301: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _302: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _303: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _304: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _305: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _306: isize;<br align="left"/>let _307: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _308: !;<br align="left"/>let mut _309: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _310: u64;<br align="left"/>let mut _311: isize;<br align="left"/>let _312: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _313: !;<br align="left"/>let mut _314: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _315: (&amp;ReErased state::oracle::OraclePriceData, math::oracle::OracleValidity);<br align="left"/>let _316: state::oracle::StrictOraclePrice;<br align="left"/>let mut _317: i64;<br align="left"/>let mut _318: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _319: i64;<br align="left"/>let mut _320: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _321: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _322: ();<br align="left"/>let mut _323: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _324: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _325: bool;<br align="left"/>let mut _326: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _327: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _328: math::oracle::OracleValidity;<br align="left"/>let mut _329: std::option::Option&lt;math::oracle::DriftAction&gt;;<br align="left"/>let mut _330: math::oracle::DriftAction;<br align="left"/>let mut _331: isize;<br align="left"/>let _332: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _333: !;<br align="left"/>let mut _334: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _335: bool;<br align="left"/>let mut _336: ();<br align="left"/>let _337: error::ErrorCode;<br align="left"/>let _338: ();<br align="left"/>let mut _339: &amp;ReErased str;<br align="left"/>let _340: &amp;ReErased str;<br align="left"/>let mut _341: &amp;ReErased std::string::String;<br align="left"/>let _342: &amp;ReErased std::string::String;<br align="left"/>let _343: std::string::String;<br align="left"/>let _344: std::string::String;<br align="left"/>let mut _345: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _346: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _347: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _348: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _349: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _350: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _351: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _352: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _353: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _354: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _355: &amp;ReErased error::ErrorCode;<br align="left"/>let _356: &amp;ReErased error::ErrorCode;<br align="left"/>let _357: ();<br align="left"/>let mut _358: &amp;ReErased str;<br align="left"/>let _359: &amp;ReErased str;<br align="left"/>let mut _360: &amp;ReErased std::string::String;<br align="left"/>let _361: &amp;ReErased std::string::String;<br align="left"/>let _362: std::string::String;<br align="left"/>let _363: std::string::String;<br align="left"/>let mut _364: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _365: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _366: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _367: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _368: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _369: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _370: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _371: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _372: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _373: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _374: &amp;ReErased u16;<br align="left"/>let _375: &amp;ReErased u16;<br align="left"/>let _376: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _377: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _378: error::ErrorCode;<br align="left"/>let mut _379: isize;<br align="left"/>let _380: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _381: !;<br align="left"/>let mut _382: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _383: ();<br align="left"/>let _384: i64;<br align="left"/>let _385: bool;<br align="left"/>let mut _386: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _387: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _388: i64;<br align="left"/>let mut _389: i64;<br align="left"/>let mut _390: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _391: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _392: i64;<br align="left"/>let mut _393: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _394: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _395: u64;<br align="left"/>let mut _396: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let mut _397: isize;<br align="left"/>let _398: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _399: !;<br align="left"/>let mut _400: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _401: i64;<br align="left"/>let mut _402: isize;<br align="left"/>let _403: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _404: !;<br align="left"/>let mut _405: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _406: bool;<br align="left"/>let _407: ();<br align="left"/>let mut _408: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _409: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _410: bool;<br align="left"/>let mut _411: ();<br align="left"/>let _412: error::ErrorCode;<br align="left"/>let _413: ();<br align="left"/>let mut _414: &amp;ReErased str;<br align="left"/>let _415: &amp;ReErased str;<br align="left"/>let mut _416: &amp;ReErased std::string::String;<br align="left"/>let _417: &amp;ReErased std::string::String;<br align="left"/>let _418: std::string::String;<br align="left"/>let _419: std::string::String;<br align="left"/>let mut _420: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _421: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _422: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _423: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _424: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _425: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _426: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _427: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _428: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _429: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _430: &amp;ReErased error::ErrorCode;<br align="left"/>let _431: &amp;ReErased error::ErrorCode;<br align="left"/>let _432: ();<br align="left"/>let mut _433: &amp;ReErased str;<br align="left"/>let _434: &amp;ReErased str;<br align="left"/>let mut _435: error::ErrorCode;<br align="left"/>let mut _436: isize;<br align="left"/>let _437: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _438: !;<br align="left"/>let mut _439: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _440: ();<br align="left"/>let _441: bool;<br align="left"/>let mut _442: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _443: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _444: &amp;ReErased state::user::Order;<br align="left"/>let _445: &amp;ReErased state::user::Order;<br align="left"/>let _446: &amp;ReErased state::user::User;<br align="left"/>let mut _447: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _448: usize;<br align="left"/>let mut _449: usize;<br align="left"/>let mut _450: bool;<br align="left"/>let mut _451: u64;<br align="left"/>let mut _452: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _453: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _454: u64;<br align="left"/>let mut _455: i64;<br align="left"/>let mut _456: isize;<br align="left"/>let _457: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _458: !;<br align="left"/>let mut _459: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _460: u64;<br align="left"/>let mut _461: isize;<br align="left"/>let _462: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _463: !;<br align="left"/>let mut _464: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _465: bool;<br align="left"/>let _466: ();<br align="left"/>let mut _467: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _468: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _469: bool;<br align="left"/>let mut _470: ();<br align="left"/>let _471: error::ErrorCode;<br align="left"/>let _472: ();<br align="left"/>let mut _473: &amp;ReErased str;<br align="left"/>let _474: &amp;ReErased str;<br align="left"/>let mut _475: &amp;ReErased std::string::String;<br align="left"/>let _476: &amp;ReErased std::string::String;<br align="left"/>let _477: std::string::String;<br align="left"/>let _478: std::string::String;<br align="left"/>let mut _479: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _480: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _481: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _482: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _483: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _484: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _485: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _486: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _487: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _488: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _489: &amp;ReErased error::ErrorCode;<br align="left"/>let _490: &amp;ReErased error::ErrorCode;<br align="left"/>let mut _491: error::ErrorCode;<br align="left"/>let mut _492: isize;<br align="left"/>let _493: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _494: !;<br align="left"/>let mut _495: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _496: ();<br align="left"/>let _497: usize;<br align="left"/>let mut _498: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _499: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _500: &amp;ReErased state::user::User;<br align="left"/>let _501: &amp;ReErased state::user::User;<br align="left"/>let mut _502: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _503: u16;<br align="left"/>let mut _504: isize;<br align="left"/>let _505: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _506: !;<br align="left"/>let mut _507: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _508: usize;<br align="left"/>let _509: i128;<br align="left"/>let mut _510: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _511: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _512: &amp;ReErased state::user::SpotPosition;<br align="left"/>let _513: &amp;ReErased state::user::User;<br align="left"/>let mut _514: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _515: usize;<br align="left"/>let mut _516: usize;<br align="left"/>let mut _517: bool;<br align="left"/>let mut _518: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _519: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _520: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _521: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _522: isize;<br align="left"/>let _523: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _524: !;<br align="left"/>let mut _525: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _526: i128;<br align="left"/>let _527: state::user::OrderFillSimulation;<br align="left"/>let mut _528: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::user::OrderFillSimulation&gt;;<br align="left"/>let mut _529: std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;;<br align="left"/>let mut _530: &amp;ReErased state::user::SpotPosition;<br align="left"/>let _531: &amp;ReErased state::user::User;<br align="left"/>let mut _532: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _533: usize;<br align="left"/>let mut _534: usize;<br align="left"/>let mut _535: bool;<br align="left"/>let mut _536: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _537: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _538: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _539: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _540: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let _541: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _542: std::option::Option&lt;i128&gt;;<br align="left"/>let mut _543: i128;<br align="left"/>let mut _544: math::margin::MarginRequirementType;<br align="left"/>let mut _545: isize;<br align="left"/>let _546: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _547: !;<br align="left"/>let mut _548: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _549: state::user::OrderFillSimulation;<br align="left"/>let _550: ();<br align="left"/>let _551: ();<br align="left"/>let mut _552: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _553: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _554: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _555: &amp;ReErased mut state::user::Order;<br align="left"/>let mut _556: &amp;ReErased mut state::user::User;<br align="left"/>let mut _557: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _558: usize;<br align="left"/>let mut _559: usize;<br align="left"/>let mut _560: bool;<br align="left"/>let mut _561: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _562: u64;<br align="left"/>let mut _563: std::option::Option&lt;&amp;ReErased state::perp_market::PerpMarket&gt;;<br align="left"/>let mut _564: isize;<br align="left"/>let _565: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _566: !;<br align="left"/>let mut _567: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _568: ();<br align="left"/>let _569: ();<br align="left"/>let mut _570: bool;<br align="left"/>let mut _571: &amp;ReErased state::user::Order;<br align="left"/>let _572: &amp;ReErased state::user::User;<br align="left"/>let mut _573: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _574: usize;<br align="left"/>let mut _575: usize;<br align="left"/>let mut _576: bool;<br align="left"/>let _577: ();<br align="left"/>let mut _578: &amp;ReErased mut state::user::User;<br align="left"/>let mut _579: &amp;ReErased mut state::user::User;<br align="left"/>let mut _580: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _581: controller::position::PositionDirection;<br align="left"/>let mut _582: &amp;ReErased state::user::User;<br align="left"/>let mut _583: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _584: usize;<br align="left"/>let mut _585: usize;<br align="left"/>let mut _586: bool;<br align="left"/>let _587: u64;<br align="left"/>let mut _588: &amp;ReErased state::user::User;<br align="left"/>let mut _589: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _590: usize;<br align="left"/>let mut _591: usize;<br align="left"/>let mut _592: bool;<br align="left"/>let _593: bool;<br align="left"/>let mut _594: &amp;ReErased state::user::Order;<br align="left"/>let _595: &amp;ReErased state::user::User;<br align="left"/>let mut _596: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _597: usize;<br align="left"/>let mut _598: usize;<br align="left"/>let mut _599: bool;<br align="left"/>let _600: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _601: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased mut state::user::SpotPosition&gt;;<br align="left"/>let mut _602: std::result::Result&lt;&amp;ReErased mut state::user::SpotPosition, error::ErrorCode&gt;;<br align="left"/>let mut _603: &amp;ReErased mut state::user::User;<br align="left"/>let mut _604: &amp;ReErased mut state::user::User;<br align="left"/>let mut _605: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _606: u16;<br align="left"/>let mut _607: isize;<br align="left"/>let _608: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _609: !;<br align="left"/>let mut _610: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _611: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let _612: ();<br align="left"/>let mut _613: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _614: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _615: &amp;ReErased mut state::user::SpotPosition;<br align="left"/>let mut _616: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _617: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _618: u64;<br align="left"/>let mut _619: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _620: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _621: u64;<br align="left"/>let mut _622: isize;<br align="left"/>let _623: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _624: !;<br align="left"/>let mut _625: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _626: u64;<br align="left"/>let mut _627: bool;<br align="left"/>let mut _628: isize;<br align="left"/>let _629: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _630: !;<br align="left"/>let mut _631: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _632: ();<br align="left"/>let _633: bool;<br align="left"/>let mut _634: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _635: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _636: std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _637: bool;<br align="left"/>let mut _638: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _639: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _640: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _641: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _642: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _643: Closure(DefId(0:4726 ~ drift[d311]::controller::orders::trigger_spot_order::{closure#3}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]);<br align="left"/>let mut _644: isize;<br align="left"/>let _645: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _646: !;<br align="left"/>let mut _647: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _648: std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _649: std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _650: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;&gt;;<br align="left"/>let mut _651: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _652: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _653: isize;<br align="left"/>let _654: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _655: !;<br align="left"/>let mut _656: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _657: std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _658: u64;<br align="left"/>let mut _659: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _660: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _661: &amp;ReErased mut state::user::User;<br align="left"/>let mut _662: &amp;ReErased mut state::user::User;<br align="left"/>let mut _663: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _664: std::option::Option&lt;&amp;ReErased mut state::user::User&gt;;<br align="left"/>let mut _665: &amp;ReErased mut std::option::Option&lt;std::cell::RefMut&lt;ReErased, state::user::User&gt;&gt;;<br align="left"/>let mut _666: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _667: &amp;ReErased mut state::spot_market::SpotMarket;<br align="left"/>let mut _668: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _669: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _670: u64;<br align="left"/>let mut _671: u64;<br align="left"/>let mut _672: isize;<br align="left"/>let _673: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _674: !;<br align="left"/>let mut _675: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _676: u64;<br align="left"/>let _677: state::events::OrderActionRecord;<br align="left"/>let mut _678: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::events::OrderActionRecord&gt;;<br align="left"/>let mut _679: std::result::Result&lt;state::events::OrderActionRecord, error::ErrorCode&gt;;<br align="left"/>let mut _680: i64;<br align="left"/>let mut _681: state::events::OrderAction;<br align="left"/>let mut _682: state::events::OrderActionExplanation;<br align="left"/>let mut _683: u16;<br align="left"/>let mut _684: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _685: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _686: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _687: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _688: u64;<br align="left"/>let mut _689: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _690: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _691: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _692: u64;<br align="left"/>let mut _693: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _694: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _695: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _696: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _697: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _698: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _699: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _700: state::user::Order;<br align="left"/>let mut _701: &amp;ReErased state::user::User;<br align="left"/>let mut _702: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _703: usize;<br align="left"/>let mut _704: usize;<br align="left"/>let mut _705: bool;<br align="left"/>let mut _706: std::option::Option&lt;anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _707: std::option::Option&lt;state::user::Order&gt;;<br align="left"/>let mut _708: i64;<br align="left"/>let mut _709: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _710: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _711: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _712: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _713: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _714: u64;<br align="left"/>let mut _715: i64;<br align="left"/>let mut _716: isize;<br align="left"/>let _717: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _718: !;<br align="left"/>let mut _719: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _720: state::events::OrderActionRecord;<br align="left"/>let _721: ();<br align="left"/>let _722: ();<br align="left"/>let mut _723: &amp;ReErased [&amp;ReErased [u8]];<br align="left"/>let mut _724: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _725: &amp;ReErased [&amp;ReErased [u8]; 1_usize];<br align="left"/>let _726: [&amp;ReErased [u8]; 1_usize];<br align="left"/>let mut _727: &amp;ReErased [u8];<br align="left"/>let _728: &amp;ReErased [u8];<br align="left"/>let mut _729: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _730: &amp;ReErased std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let _731: std::vec::Vec&lt;u8, std::alloc::Global&gt;;<br align="left"/>let mut _732: &amp;ReErased state::events::OrderActionRecord;<br align="left"/>let _733: &amp;ReErased state::events::OrderActionRecord;<br align="left"/>let _734: state::user::OrderFillSimulation;<br align="left"/>let mut _735: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::user::OrderFillSimulation&gt;;<br align="left"/>let mut _736: std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;;<br align="left"/>let mut _737: &amp;ReErased state::user::SpotPosition;<br align="left"/>let _738: &amp;ReErased state::user::SpotPosition;<br align="left"/>let mut _739: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, &amp;ReErased state::user::SpotPosition&gt;;<br align="left"/>let mut _740: std::result::Result&lt;&amp;ReErased state::user::SpotPosition, error::ErrorCode&gt;;<br align="left"/>let mut _741: &amp;ReErased state::user::User;<br align="left"/>let _742: &amp;ReErased state::user::User;<br align="left"/>let mut _743: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _744: u16;<br align="left"/>let mut _745: isize;<br align="left"/>let _746: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _747: !;<br align="left"/>let mut _748: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _749: &amp;ReErased state::user::SpotPosition;<br align="left"/>let mut _750: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let _751: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _752: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _753: &amp;ReErased std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let mut _754: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let _755: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _756: std::option::Option&lt;i128&gt;;<br align="left"/>let mut _757: i128;<br align="left"/>let mut _758: math::margin::MarginRequirementType;<br align="left"/>let mut _759: isize;<br align="left"/>let _760: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _761: !;<br align="left"/>let mut _762: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _763: state::user::OrderFillSimulation;<br align="left"/>let _764: ();<br align="left"/>let mut _765: std::cell::Ref&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _766: ();<br align="left"/>let mut _767: std::cell::RefMut&lt;ReErased, state::spot_market::SpotMarket&gt;;<br align="left"/>let _768: bool;<br align="left"/>let mut _769: &amp;ReErased state::user::OrderFillSimulation;<br align="left"/>let mut _770: state::user::OrderFillSimulation;<br align="left"/>let _771: ();<br align="left"/>let mut _772: bool;<br align="left"/>let mut _773: bool;<br align="left"/>let mut _774: &amp;ReErased state::user::User;<br align="left"/>let mut _775: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let _776: usize;<br align="left"/>let mut _777: usize;<br align="left"/>let mut _778: bool;<br align="left"/>let _779: bool;<br align="left"/>let mut _780: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _781: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _782: &amp;ReErased state::user::User;<br align="left"/>let _783: &amp;ReErased state::user::User;<br align="left"/>let mut _784: &amp;ReErased std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _785: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _786: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _787: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _788: isize;<br align="left"/>let _789: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _790: !;<br align="left"/>let mut _791: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _792: bool;<br align="left"/>let mut _793: bool;<br align="left"/>let _794: ();<br align="left"/>let mut _795: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _796: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _797: usize;<br align="left"/>let mut _798: &amp;ReErased mut state::user::User;<br align="left"/>let mut _799: &amp;ReErased mut state::user::User;<br align="left"/>let mut _800: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _801: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _802: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _803: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _804: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _805: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _806: i64;<br align="left"/>let mut _807: u64;<br align="left"/>let mut _808: state::events::OrderActionExplanation;<br align="left"/>let mut _809: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _810: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _811: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _812: isize;<br align="left"/>let _813: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _814: !;<br align="left"/>let mut _815: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _816: ();<br align="left"/>let _817: ();<br align="left"/>let mut _818: &amp;ReErased mut state::user::User;<br align="left"/>let mut _819: &amp;ReErased mut state::user::User;<br align="left"/>let mut _820: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::user::User&gt;;<br align="left"/>let mut _821: u64;<br align="left"/>let mut _822: ();<br align="left"/>let mut _823: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _824: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _825: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _826: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _827: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _828: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _829: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _830: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _831: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _832: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _833: &amp;ReErased state::user::OrderStatus;<br align="left"/>let mut _834: bool;<br align="left"/>let mut _835: bool;<br align="left"/>let mut _836: isize;<br align="left"/>let mut _837: isize;<br align="left"/>let mut _838: isize;<br align="left"/>let mut _839: isize;<br align="left"/>let mut _840: isize;<br align="left"/>let mut _841: isize;<br align="left"/>let mut _842: isize;<br align="left"/>let mut _843: isize;<br align="left"/>let mut _844: isize;<br align="left"/>let mut _845: isize;<br align="left"/>let mut _846: isize;<br align="left"/>let mut _847: isize;<br align="left"/>let mut _848: isize;<br align="left"/>let mut _849: isize;<br align="left"/>let mut _850: isize;<br align="left"/>let mut _851: isize;<br align="left"/>let mut _852: isize;<br align="left"/>let mut _853: isize;<br align="left"/>let mut _854: isize;<br align="left"/>let mut _855: isize;<br align="left"/>debug order_id =&gt; _1;<br align="left"/>debug state =&gt; _2;<br align="left"/>debug user =&gt; _3;<br align="left"/>debug spot_market_map =&gt; _4;<br align="left"/>debug perp_market_map =&gt; _5;<br align="left"/>debug oracle_map =&gt; _6;<br align="left"/>debug filler =&gt; _7;<br align="left"/>debug clock =&gt; _8;<br align="left"/>debug now =&gt; _9;<br align="left"/>debug slot =&gt; _10;<br align="left"/>debug filler_key =&gt; _11;<br align="left"/>debug user_key =&gt; _13;<br align="left"/>debug user =&gt; _15;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug order_index =&gt; _27;<br align="left"/>debug residual =&gt; _41;<br align="left"/>debug val =&gt; _44;<br align="left"/>debug order_status =&gt; _45;<br align="left"/>debug market_index =&gt; _46;<br align="left"/>debug market_type =&gt; _47;<br align="left"/>debug error_code =&gt; _75;<br align="left"/>debug res =&gt; _82;<br align="left"/>debug residual =&gt; _100;<br align="left"/>debug val =&gt; _103;<br align="left"/>debug error_code =&gt; _115;<br align="left"/>debug res =&gt; _122;<br align="left"/>debug residual =&gt; _140;<br align="left"/>debug val =&gt; _143;<br align="left"/>debug error_code =&gt; _155;<br align="left"/>debug res =&gt; _162;<br align="left"/>debug residual =&gt; _180;<br align="left"/>debug val =&gt; _183;<br align="left"/>debug error_code =&gt; _192;<br align="left"/>debug res =&gt; _199;<br align="left"/>debug residual =&gt; _217;<br align="left"/>debug val =&gt; _220;<br align="left"/>debug residual =&gt; _232;<br align="left"/>debug val =&gt; _235;<br align="left"/>debug error_code =&gt; _244;<br align="left"/>debug res =&gt; _251;<br align="left"/>debug residual =&gt; _266;<br align="left"/>debug val =&gt; _269;<br align="left"/>debug spot_market =&gt; _270;<br align="left"/>debug residual =&gt; _277;<br align="left"/>debug val =&gt; _280;<br align="left"/>debug oracle_price_data =&gt; _281;<br align="left"/>debug oracle_validity =&gt; _282;<br align="left"/>debug residual =&gt; _307;<br align="left"/>debug val =&gt; _310;<br align="left"/>debug residual =&gt; _312;<br align="left"/>debug val =&gt; _315;<br align="left"/>debug strict_oracle_price =&gt; _316;<br align="left"/>debug residual =&gt; _332;<br align="left"/>debug val =&gt; _335;<br align="left"/>debug error_code =&gt; _337;<br align="left"/>debug res =&gt; _344;<br align="left"/>debug res =&gt; _363;<br align="left"/>debug residual =&gt; _380;<br align="left"/>debug val =&gt; _383;<br align="left"/>debug oracle_price =&gt; _384;<br align="left"/>debug oracle_too_divergent_with_twap_5min =&gt; _385;<br align="left"/>debug residual =&gt; _398;<br align="left"/>debug val =&gt; _401;<br align="left"/>debug residual =&gt; _403;<br align="left"/>debug val =&gt; _406;<br align="left"/>debug error_code =&gt; _412;<br align="left"/>debug res =&gt; _419;<br align="left"/>debug residual =&gt; _437;<br align="left"/>debug val =&gt; _440;<br align="left"/>debug can_trigger =&gt; _441;<br align="left"/>debug residual =&gt; _457;<br align="left"/>debug val =&gt; _460;<br align="left"/>debug residual =&gt; _462;<br align="left"/>debug val =&gt; _465;<br align="left"/>debug error_code =&gt; _471;<br align="left"/>debug res =&gt; _478;<br align="left"/>debug residual =&gt; _493;<br align="left"/>debug val =&gt; _496;<br align="left"/>debug position_index =&gt; _497;<br align="left"/>debug residual =&gt; _505;<br align="left"/>debug val =&gt; _508;<br align="left"/>debug signed_token_amount =&gt; _509;<br align="left"/>debug residual =&gt; _523;<br align="left"/>debug val =&gt; _526;<br align="left"/>debug worst_case_simulation_before =&gt; _527;<br align="left"/>debug residual =&gt; _546;<br align="left"/>debug val =&gt; _549;<br align="left"/>debug residual =&gt; _565;<br align="left"/>debug val =&gt; _568;<br align="left"/>debug direction =&gt; _581;<br align="left"/>debug base_asset_amount =&gt; _587;<br align="left"/>debug update_open_bids_and_asks =&gt; _593;<br align="left"/>debug user_position =&gt; _600;<br align="left"/>debug residual =&gt; _608;<br align="left"/>debug val =&gt; _611;<br align="left"/>debug residual =&gt; _623;<br align="left"/>debug val =&gt; _626;<br align="left"/>debug residual =&gt; _629;<br align="left"/>debug val =&gt; _632;<br align="left"/>debug is_filler_taker =&gt; _633;<br align="left"/>debug filler =&gt; _636;<br align="left"/>debug residual =&gt; _645;<br align="left"/>debug val =&gt; _648;<br align="left"/>debug quote_market =&gt; _649;<br align="left"/>debug residual =&gt; _654;<br align="left"/>debug val =&gt; _657;<br align="left"/>debug filler_reward =&gt; _658;<br align="left"/>debug residual =&gt; _673;<br align="left"/>debug val =&gt; _676;<br align="left"/>debug order_action_record =&gt; _677;<br align="left"/>debug residual =&gt; _717;<br align="left"/>debug val =&gt; _720;<br align="left"/>debug worst_case_simulation_after =&gt; _734;<br align="left"/>debug residual =&gt; _746;<br align="left"/>debug val =&gt; _749;<br align="left"/>debug residual =&gt; _760;<br align="left"/>debug val =&gt; _763;<br align="left"/>debug is_risk_increasing =&gt; _768;<br align="left"/>debug meets_initial_margin_requirement =&gt; _779;<br align="left"/>debug residual =&gt; _789;<br align="left"/>debug val =&gt; _792;<br align="left"/>debug residual =&gt; _813;<br align="left"/>debug val =&gt; _816;<br align="left"/>>;
    bb0__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_835 = const false<br/>_834 = const false<br/>StorageLive(_9)<br/>_9 = ((*_8).4: i64)<br/>StorageLive(_10)<br/>_10 = ((*_8).0: u64)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;(*_7)<br/></td></tr><tr><td align="left">_11 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, User&gt; as anchor_lang::Key&gt;::key(move _12)</td></tr></table>>];
    bb1__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;(*_3)<br/></td></tr><tr><td align="left">_13 = &lt;anchor_lang::prelude::AccountLoader&lt;'_, User&gt; as anchor_lang::Key&gt;::key(move _14)</td></tr></table>>];
    bb2__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = &amp;(*_3)<br/></td></tr><tr><td align="left">_19 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _20)</td></tr></table>>];
    bb3__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_21)<br/>_21 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_18 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _19, move _21)</td></tr></table>>];
    bb4__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _18)</td></tr></table>>];
    bb5__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_22 = discriminant(_17)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb6__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = move ((_17 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_16 = move _26<br/>StorageDead(_26)<br/>_15 = &amp;mut _16<br/>_838 = discriminant(_17)<br/>StorageDead(_17)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = &amp;(*_15)<br/></td></tr><tr><td align="left">_35 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _36)</td></tr></table>>];
    bb7__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_17 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb9__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>_836 = discriminant(_17)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_34 = &amp;((*_35).5: [state::user::Order; 32])<br/>_33 = move _34 as &amp;[state::user::Order] (PointerCoercion(Unsize))<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = core::slice::&lt;impl [Order]&gt;::iter(move _33)</td></tr></table>>];
    bb11__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_31 = &amp;mut _32<br/>StorageDead(_33)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = &amp;_1<br/>_37 = {closure@programs/drift/src/controller/orders.rs:5224:19: 5224:26} { order_id: move _38 }<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_30 = &lt;std::slice::Iter&lt;'_, Order&gt; as Iterator&gt;::position::&lt;{closure@programs/drift/src/controller/orders.rs:5224:19: 5224:26}&gt;(move _31, move _37)</td></tr></table>>];
    bb12__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_31)<br/>StorageLive(_39)<br/>_39 = {closure@programs/drift/src/error.rs:647:9: 647:11}<br/></td></tr><tr><td align="left">_29 = Option::&lt;usize&gt;::ok_or_else::&lt;error::ErrorCode, {closure@programs/drift/src/error.rs:647:9: 647:11}&gt;(move _30, move _39)</td></tr></table>>];
    bb13__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_28 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _29)</td></tr></table>>];
    bb14__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>_40 = discriminant(_28)<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb15__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_28 as Continue).0: usize)<br/>_27 = _44<br/>StorageDead(_44)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_28)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = &amp;(*_15)<br/></td></tr><tr><td align="left">_50 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _51)</td></tr></table>>];
    bb16__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_28 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_43)<br/>_43 = _41<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _43)</td></tr></table>>];
    bb17__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_41)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageLive(_52)<br/>_52 = _27<br/>_53 = Len(((*_50).5: [state::user::Order; 32]))<br/>_54 = Lt(_52, _53)<br/></td></tr><tr><td align="left">assert(move _54, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _53, _52)</td></tr></table>>];
    bb19__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_49 = (((*_50).5: [state::user::Order; 32])[_52].12: state::user::OrderStatus)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = &amp;(*_15)<br/></td></tr><tr><td align="left">_56 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _57)</td></tr></table>>];
    bb20__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageLive(_58)<br/>_58 = _27<br/>_59 = Len(((*_56).5: [state::user::Order; 32]))<br/>_60 = Lt(_58, _59)<br/></td></tr><tr><td align="left">assert(move _60, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _59, _58)</td></tr></table>>];
    bb21__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_55 = (((*_56).5: [state::user::Order; 32])[_58].11: u16)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = &amp;(*_15)<br/></td></tr><tr><td align="left">_62 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _63)</td></tr></table>>];
    bb22__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageLive(_64)<br/>_64 = _27<br/>_65 = Len(((*_62).5: [state::user::Order; 32]))<br/>_66 = Lt(_64, _65)<br/></td></tr><tr><td align="left">assert(move _66, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _65, _64)</td></tr></table>>];
    bb23__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_61 = (((*_62).5: [state::user::Order; 32])[_64].14: state::user::MarketType)<br/>_48 = (move _49, move _55, move _61)<br/>StorageDead(_61)<br/>StorageDead(_55)<br/>StorageDead(_49)<br/>StorageLive(_45)<br/>_45 = (_48.0: state::user::OrderStatus)<br/>StorageLive(_46)<br/>_46 = (_48.1: u16)<br/>StorageLive(_47)<br/>_47 = (_48.2: state::user::MarketType)<br/>StorageDead(_64)<br/>StorageDead(_62)<br/>StorageDead(_58)<br/>StorageDead(_56)<br/>StorageDead(_52)<br/>StorageDead(_50)<br/>StorageDead(_48)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;_45<br/>StorageLive(_72)<br/>_833 = const _<br/>_72 = &amp;(*_833)<br/></td></tr><tr><td align="left">_70 = &lt;OrderStatus as PartialEq&gt;::eq(move _71, move _72)</td></tr></table>>];
    bb24__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left">switchInt(move _70)</td></tr></table>>];
    bb25__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_71)<br/>StorageLive(_74)<br/>_74 = ()<br/>_69 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _74)<br/>StorageDead(_74)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_71)<br/>StorageLive(_75)<br/>_75 = error::ErrorCode::OrderNotOpen<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>_832 = const _<br/>_86 = &amp;(*_832)<br/>_85 = &amp;(*_86)<br/>_84 = move _85 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_85)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = &amp;_75<br/>_93 = &amp;(*_94)<br/></td></tr><tr><td align="left">_92 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _93)</td></tr></table>>];
    bb27__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>_91 = [move _92]<br/>StorageDead(_92)<br/>_90 = &amp;_91<br/>_89 = &amp;(*_90)<br/>_88 = move _89 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">_83 = Arguments::&lt;'_&gt;::new_v1(move _84, move _88)</td></tr></table>>];
    bb28__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">_82 = format(move _83)</td></tr></table>>];
    bb29__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_83)<br/>StorageDead(_94)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_86)<br/>_81 = move _82<br/>StorageDead(_82)<br/>_80 = &amp;_81<br/>_79 = &amp;(*_80)<br/></td></tr><tr><td align="left">_78 = &lt;String as Deref&gt;::deref(move _79)</td></tr></table>>];
    bb30__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_77 = &amp;(*_78)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">_76 = solana_program::log::sol_log(move _77)</td></tr></table>>];
    bb31__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/></td></tr><tr><td align="left">drop(_81)</td></tr></table>>];
    bb32__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_80)<br/>StorageDead(_78)<br/>StorageDead(_76)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>_97 = const &quot;Order not open&quot;<br/>_96 = &amp;(*_97)<br/></td></tr><tr><td align="left">_95 = solana_program::log::sol_log(move _96)</td></tr></table>>];
    bb33__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_96)<br/>StorageDead(_97)<br/>StorageDead(_95)<br/>StorageLive(_98)<br/>_98 = _75<br/>_69 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _98)<br/>StorageDead(_98)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/></td></tr><tr><td align="left">_68 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _69)</td></tr></table>>];
    bb35__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>_99 = discriminant(_68)<br/></td></tr><tr><td align="left">switchInt(move _99)</td></tr></table>>];
    bb36__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_103)<br/>_103 = ((_68 as Continue).0: ())<br/>_67 = _103<br/>StorageDead(_103)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>_110 = &amp;(*_15)<br/></td></tr><tr><td align="left">_109 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _110)</td></tr></table>>];
    bb37__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_100)<br/>_100 = ((_68 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_102)<br/>_102 = _100<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _102)</td></tr></table>>];
    bb38__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_100)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_110)<br/>StorageLive(_111)<br/>_111 = _27<br/>_112 = Len(((*_109).5: [state::user::Order; 32]))<br/>_113 = Lt(_111, _112)<br/></td></tr><tr><td align="left">assert(move _113, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _112, _111)</td></tr></table>>];
    bb40__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_108 = &amp;((*_109).5: [state::user::Order; 32])[_111]<br/></td></tr><tr><td align="left">_107 = Order::must_be_triggered(move _108)</td></tr></table>>];
    bb41__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left">switchInt(move _107)</td></tr></table>>];
    bb42__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/>StorageLive(_114)<br/>_114 = ()<br/>_106 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _114)<br/>StorageDead(_114)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_111)<br/>StorageDead(_109)<br/>StorageDead(_108)<br/>StorageLive(_115)<br/>_115 = error::ErrorCode::OrderNotTriggerable<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>_831 = const _<br/>_126 = &amp;(*_831)<br/>_125 = &amp;(*_126)<br/>_124 = move _125 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_125)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>StorageLive(_133)<br/>StorageLive(_134)<br/>_134 = &amp;_115<br/>_133 = &amp;(*_134)<br/></td></tr><tr><td align="left">_132 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _133)</td></tr></table>>];
    bb44__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_133)<br/>_131 = [move _132]<br/>StorageDead(_132)<br/>_130 = &amp;_131<br/>_129 = &amp;(*_130)<br/>_128 = move _129 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_129)<br/></td></tr><tr><td align="left">_123 = Arguments::&lt;'_&gt;::new_v1(move _124, move _128)</td></tr></table>>];
    bb45__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_128)<br/>StorageDead(_124)<br/></td></tr><tr><td align="left">_122 = format(move _123)</td></tr></table>>];
    bb46__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/>StorageDead(_134)<br/>StorageDead(_131)<br/>StorageDead(_130)<br/>StorageDead(_126)<br/>_121 = move _122<br/>StorageDead(_122)<br/>_120 = &amp;_121<br/>_119 = &amp;(*_120)<br/></td></tr><tr><td align="left">_118 = &lt;String as Deref&gt;::deref(move _119)</td></tr></table>>];
    bb47__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_117 = &amp;(*_118)<br/>StorageDead(_119)<br/></td></tr><tr><td align="left">_116 = solana_program::log::sol_log(move _117)</td></tr></table>>];
    bb48__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_117)<br/></td></tr><tr><td align="left">drop(_121)</td></tr></table>>];
    bb49__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageDead(_120)<br/>StorageDead(_118)<br/>StorageDead(_116)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>_137 = const &quot;Order is not triggerable&quot;<br/>_136 = &amp;(*_137)<br/></td></tr><tr><td align="left">_135 = solana_program::log::sol_log(move _136)</td></tr></table>>];
    bb50__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_136)<br/>StorageDead(_137)<br/>StorageDead(_135)<br/>StorageLive(_138)<br/>_138 = _115<br/>_106 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _138)<br/>StorageDead(_138)<br/>StorageDead(_115)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/></td></tr><tr><td align="left">_105 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _106)</td></tr></table>>];
    bb52__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>_139 = discriminant(_105)<br/></td></tr><tr><td align="left">switchInt(move _139)</td></tr></table>>];
    bb53__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_143)<br/>_143 = ((_105 as Continue).0: ())<br/>_104 = _143<br/>StorageDead(_143)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/>StorageLive(_144)<br/>StorageLive(_145)<br/>StorageLive(_146)<br/>StorageLive(_147)<br/>StorageLive(_148)<br/>StorageLive(_149)<br/>StorageLive(_150)<br/>_150 = &amp;(*_15)<br/></td></tr><tr><td align="left">_149 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _150)</td></tr></table>>];
    bb54__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_140)<br/>_140 = ((_105 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_142)<br/>_142 = _140<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _142)</td></tr></table>>];
    bb55__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_142)<br/>StorageDead(_140)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_150)<br/>StorageLive(_151)<br/>_151 = _27<br/>_152 = Len(((*_149).5: [state::user::Order; 32]))<br/>_153 = Lt(_151, _152)<br/></td></tr><tr><td align="left">assert(move _153, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _152, _151)</td></tr></table>>];
    bb57__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">_148 = &amp;((*_149).5: [state::user::Order; 32])[_151]<br/></td></tr><tr><td align="left">_147 = Order::triggered(move _148)</td></tr></table>>];
    bb58__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left">switchInt(move _147)</td></tr></table>>];
    bb59__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/>StorageDead(_151)<br/>StorageDead(_149)<br/>StorageLive(_155)<br/>_155 = error::ErrorCode::OrderNotTriggerable<br/>StorageLive(_156)<br/>StorageLive(_157)<br/>StorageLive(_158)<br/>StorageLive(_159)<br/>StorageLive(_160)<br/>StorageLive(_161)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>StorageLive(_166)<br/>_830 = const _<br/>_166 = &amp;(*_830)<br/>_165 = &amp;(*_166)<br/>_164 = move _165 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_165)<br/>StorageLive(_168)<br/>StorageLive(_169)<br/>StorageLive(_170)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>StorageLive(_174)<br/>_174 = &amp;_155<br/>_173 = &amp;(*_174)<br/></td></tr><tr><td align="left">_172 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _173)</td></tr></table>>];
    bb60__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/>StorageDead(_151)<br/>StorageDead(_149)<br/>StorageLive(_154)<br/>_154 = ()<br/>_146 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _154)<br/>StorageDead(_154)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/>_171 = [move _172]<br/>StorageDead(_172)<br/>_170 = &amp;_171<br/>_169 = &amp;(*_170)<br/>_168 = move _169 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_169)<br/></td></tr><tr><td align="left">_163 = Arguments::&lt;'_&gt;::new_v1(move _164, move _168)</td></tr></table>>];
    bb62__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_168)<br/>StorageDead(_164)<br/></td></tr><tr><td align="left">_162 = format(move _163)</td></tr></table>>];
    bb63__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_163)<br/>StorageDead(_174)<br/>StorageDead(_171)<br/>StorageDead(_170)<br/>StorageDead(_166)<br/>_161 = move _162<br/>StorageDead(_162)<br/>_160 = &amp;_161<br/>_159 = &amp;(*_160)<br/></td></tr><tr><td align="left">_158 = &lt;String as Deref&gt;::deref(move _159)</td></tr></table>>];
    bb64__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">_157 = &amp;(*_158)<br/>StorageDead(_159)<br/></td></tr><tr><td align="left">_156 = solana_program::log::sol_log(move _157)</td></tr></table>>];
    bb65__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_157)<br/></td></tr><tr><td align="left">drop(_161)</td></tr></table>>];
    bb66__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_161)<br/>StorageDead(_160)<br/>StorageDead(_158)<br/>StorageDead(_156)<br/>StorageLive(_175)<br/>StorageLive(_176)<br/>StorageLive(_177)<br/>_177 = const &quot;Order is already triggered&quot;<br/>_176 = &amp;(*_177)<br/></td></tr><tr><td align="left">_175 = solana_program::log::sol_log(move _176)</td></tr></table>>];
    bb67__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageDead(_176)<br/>StorageDead(_177)<br/>StorageDead(_175)<br/>StorageLive(_178)<br/>_178 = _155<br/>_146 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _178)<br/>StorageDead(_178)<br/>StorageDead(_155)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb68__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageDead(_147)<br/></td></tr><tr><td align="left">_145 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _146)</td></tr></table>>];
    bb69__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_146)<br/>_179 = discriminant(_145)<br/></td></tr><tr><td align="left">switchInt(move _179)</td></tr></table>>];
    bb70__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageLive(_183)<br/>_183 = ((_145 as Continue).0: ())<br/>_144 = _183<br/>StorageDead(_183)<br/>StorageDead(_145)<br/>StorageDead(_144)<br/>StorageLive(_184)<br/>StorageLive(_185)<br/>StorageLive(_186)<br/>StorageLive(_187)<br/>StorageLive(_188)<br/>_188 = &amp;_47<br/>StorageLive(_189)<br/>_829 = const _<br/>_189 = &amp;(*_829)<br/></td></tr><tr><td align="left">_187 = &lt;state::user::MarketType as PartialEq&gt;::eq(move _188, move _189)</td></tr></table>>];
    bb71__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageLive(_180)<br/>_180 = ((_145 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_182)<br/>_182 = _180<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _182)</td></tr></table>>];
    bb72__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageDead(_182)<br/>StorageDead(_180)<br/>StorageDead(_145)<br/>StorageDead(_144)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb73__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left">switchInt(move _187)</td></tr></table>>];
    bb74__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_189)<br/>StorageDead(_188)<br/>StorageLive(_191)<br/>_191 = ()<br/>_186 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _191)<br/>StorageDead(_191)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_189)<br/>StorageDead(_188)<br/>StorageLive(_192)<br/>_192 = error::ErrorCode::InvalidOrderMarketType<br/>StorageLive(_193)<br/>StorageLive(_194)<br/>StorageLive(_195)<br/>StorageLive(_196)<br/>StorageLive(_197)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>StorageLive(_201)<br/>StorageLive(_202)<br/>StorageLive(_203)<br/>_828 = const _<br/>_203 = &amp;(*_828)<br/>_202 = &amp;(*_203)<br/>_201 = move _202 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_202)<br/>StorageLive(_205)<br/>StorageLive(_206)<br/>StorageLive(_207)<br/>StorageLive(_208)<br/>StorageLive(_209)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>_211 = &amp;_192<br/>_210 = &amp;(*_211)<br/></td></tr><tr><td align="left">_209 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _210)</td></tr></table>>];
    bb76__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_210)<br/>_208 = [move _209]<br/>StorageDead(_209)<br/>_207 = &amp;_208<br/>_206 = &amp;(*_207)<br/>_205 = move _206 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_206)<br/></td></tr><tr><td align="left">_200 = Arguments::&lt;'_&gt;::new_v1(move _201, move _205)</td></tr></table>>];
    bb77__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_205)<br/>StorageDead(_201)<br/></td></tr><tr><td align="left">_199 = format(move _200)</td></tr></table>>];
    bb78__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_200)<br/>StorageDead(_211)<br/>StorageDead(_208)<br/>StorageDead(_207)<br/>StorageDead(_203)<br/>_198 = move _199<br/>StorageDead(_199)<br/>_197 = &amp;_198<br/>_196 = &amp;(*_197)<br/></td></tr><tr><td align="left">_195 = &lt;String as Deref&gt;::deref(move _196)</td></tr></table>>];
    bb79__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">_194 = &amp;(*_195)<br/>StorageDead(_196)<br/></td></tr><tr><td align="left">_193 = solana_program::log::sol_log(move _194)</td></tr></table>>];
    bb80__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageDead(_194)<br/></td></tr><tr><td align="left">drop(_198)</td></tr></table>>];
    bb81__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_198)<br/>StorageDead(_197)<br/>StorageDead(_195)<br/>StorageDead(_193)<br/>StorageLive(_212)<br/>StorageLive(_213)<br/>StorageLive(_214)<br/>_214 = const &quot;Order must be a spot order&quot;<br/>_213 = &amp;(*_214)<br/></td></tr><tr><td align="left">_212 = solana_program::log::sol_log(move _213)</td></tr></table>>];
    bb82__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_213)<br/>StorageDead(_214)<br/>StorageDead(_212)<br/>StorageLive(_215)<br/>_215 = _192<br/>_186 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _215)<br/>StorageDead(_215)<br/>StorageDead(_192)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb83__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_187)<br/></td></tr><tr><td align="left">_185 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _186)</td></tr></table>>];
    bb84__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageDead(_186)<br/>_216 = discriminant(_185)<br/></td></tr><tr><td align="left">switchInt(move _216)</td></tr></table>>];
    bb85__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageLive(_220)<br/>_220 = ((_185 as Continue).0: ())<br/>_184 = _220<br/>StorageDead(_220)<br/>StorageDead(_185)<br/>StorageDead(_184)<br/>StorageLive(_221)<br/>StorageLive(_222)<br/>StorageLive(_223)<br/>StorageLive(_224)<br/>StorageLive(_225)<br/>StorageLive(_226)<br/>_226 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_225 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _226)</td></tr></table>>];
    bb86__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageLive(_217)<br/>_217 = ((_185 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_219)<br/>_219 = _217<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _219)</td></tr></table>>];
    bb87__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_219)<br/>StorageDead(_217)<br/>StorageDead(_185)<br/>StorageDead(_184)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb88__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">_224 = &amp;mut (*_225)<br/>StorageDead(_226)<br/>StorageLive(_227)<br/>_227 = &amp;(*_5)<br/>StorageLive(_228)<br/>_228 = &amp;(*_4)<br/>StorageLive(_229)<br/>_229 = &amp;mut (*_6)<br/>StorageLive(_230)<br/>_230 = ((*_2).11: u32)<br/></td></tr><tr><td align="left">_223 = validate_user_not_being_liquidated(move _224, move _227, move _228, move _229, move _230)</td></tr></table>>];
    bb89__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_230)<br/>StorageDead(_229)<br/>StorageDead(_228)<br/>StorageDead(_227)<br/>StorageDead(_224)<br/></td></tr><tr><td align="left">_222 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _223)</td></tr></table>>];
    bb90__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageDead(_223)<br/>_231 = discriminant(_222)<br/></td></tr><tr><td align="left">switchInt(move _231)</td></tr></table>>];
    bb91__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageLive(_235)<br/>_235 = ((_222 as Continue).0: ())<br/>_221 = _235<br/>StorageDead(_235)<br/>StorageDead(_225)<br/>StorageDead(_222)<br/>StorageDead(_221)<br/>StorageLive(_236)<br/>StorageLive(_237)<br/>StorageLive(_238)<br/>StorageLive(_239)<br/>StorageLive(_240)<br/>StorageLive(_241)<br/>StorageLive(_242)<br/>_242 = &amp;(*_15)<br/></td></tr><tr><td align="left">_241 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _242)</td></tr></table>>];
    bb92__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageLive(_232)<br/>_232 = ((_222 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_234)<br/>_234 = _232<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _234)</td></tr></table>>];
    bb93__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_234)<br/>StorageDead(_232)<br/>StorageDead(_225)<br/>StorageDead(_222)<br/>StorageDead(_221)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb94__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">_240 = &amp;(*_241)<br/>StorageDead(_242)<br/></td></tr><tr><td align="left">_239 = User::is_bankrupt(move _240)</td></tr></table>>];
    bb95__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left">switchInt(move _239)</td></tr></table>>];
    bb96__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageDead(_240)<br/>StorageDead(_241)<br/>StorageLive(_244)<br/>_244 = error::ErrorCode::UserBankrupt<br/>StorageLive(_245)<br/>StorageLive(_246)<br/>StorageLive(_247)<br/>StorageLive(_248)<br/>StorageLive(_249)<br/>StorageLive(_250)<br/>StorageLive(_251)<br/>StorageLive(_252)<br/>StorageLive(_253)<br/>StorageLive(_254)<br/>StorageLive(_255)<br/>_827 = const _<br/>_255 = &amp;(*_827)<br/>_254 = &amp;(*_255)<br/>_253 = move _254 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_254)<br/>StorageLive(_257)<br/>StorageLive(_258)<br/>StorageLive(_259)<br/>StorageLive(_260)<br/>StorageLive(_261)<br/>StorageLive(_262)<br/>StorageLive(_263)<br/>_263 = &amp;_244<br/>_262 = &amp;(*_263)<br/></td></tr><tr><td align="left">_261 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _262)</td></tr></table>>];
    bb97__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_240)<br/>StorageDead(_241)<br/>StorageLive(_243)<br/>_243 = ()<br/>_238 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _243)<br/>StorageDead(_243)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb98__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_262)<br/>_260 = [move _261]<br/>StorageDead(_261)<br/>_259 = &amp;_260<br/>_258 = &amp;(*_259)<br/>_257 = move _258 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_258)<br/></td></tr><tr><td align="left">_252 = Arguments::&lt;'_&gt;::new_v1(move _253, move _257)</td></tr></table>>];
    bb99__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_257)<br/>StorageDead(_253)<br/></td></tr><tr><td align="left">_251 = format(move _252)</td></tr></table>>];
    bb100__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageDead(_252)<br/>StorageDead(_263)<br/>StorageDead(_260)<br/>StorageDead(_259)<br/>StorageDead(_255)<br/>_250 = move _251<br/>StorageDead(_251)<br/>_249 = &amp;_250<br/>_248 = &amp;(*_249)<br/></td></tr><tr><td align="left">_247 = &lt;String as Deref&gt;::deref(move _248)</td></tr></table>>];
    bb101__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">_246 = &amp;(*_247)<br/>StorageDead(_248)<br/></td></tr><tr><td align="left">_245 = solana_program::log::sol_log(move _246)</td></tr></table>>];
    bb102__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_246)<br/></td></tr><tr><td align="left">drop(_250)</td></tr></table>>];
    bb103__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_250)<br/>StorageDead(_249)<br/>StorageDead(_247)<br/>StorageDead(_245)<br/>StorageLive(_264)<br/>_264 = _244<br/>_238 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _264)<br/>StorageDead(_264)<br/>StorageDead(_244)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb104__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_239)<br/></td></tr><tr><td align="left">_237 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _238)</td></tr></table>>];
    bb105__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_238)<br/>_265 = discriminant(_237)<br/></td></tr><tr><td align="left">switchInt(move _265)</td></tr></table>>];
    bb106__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageLive(_269)<br/>_269 = ((_237 as Continue).0: ())<br/>_236 = _269<br/>StorageDead(_269)<br/>StorageDead(_237)<br/>StorageDead(_236)<br/>StorageLive(_270)<br/>StorageLive(_271)<br/>StorageLive(_272)<br/>StorageLive(_273)<br/>_273 = &amp;(*_4)<br/>StorageLive(_274)<br/>StorageLive(_275)<br/>_275 = &amp;_46<br/>_274 = &amp;(*_275)<br/></td></tr><tr><td align="left">_272 = SpotMarketMap::&lt;'_&gt;::get_ref(move _273, move _274)</td></tr></table>>];
    bb107__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageLive(_266)<br/>_266 = ((_237 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_268)<br/>_268 = _266<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _268)</td></tr></table>>];
    bb108__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_268)<br/>StorageDead(_266)<br/>StorageDead(_237)<br/>StorageDead(_236)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb109__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_274)<br/>StorageDead(_273)<br/></td></tr><tr><td align="left">_271 = &lt;std::result::Result&lt;Ref&lt;'_, SpotMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _272)</td></tr></table>>];
    bb110__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_272)<br/>_276 = discriminant(_271)<br/></td></tr><tr><td align="left">switchInt(move _276)</td></tr></table>>];
    bb111__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageLive(_280)<br/>_280 = move ((_271 as Continue).0: std::cell::Ref&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_835 = const true<br/>_270 = move _280<br/>StorageDead(_280)<br/>_842 = discriminant(_271)<br/>StorageDead(_275)<br/>StorageDead(_271)<br/>StorageLive(_283)<br/>StorageLive(_284)<br/>StorageLive(_285)<br/>StorageLive(_286)<br/>_286 = &amp;mut (*_6)<br/>StorageLive(_287)<br/>_287 = state::user::MarketType::Spot<br/>StorageLive(_288)<br/>StorageLive(_289)<br/>StorageLive(_290)<br/>_290 = &amp;_270<br/></td></tr><tr><td align="left">_289 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _290)</td></tr></table>>];
    bb112__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageLive(_277)<br/>_277 = ((_271 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_279)<br/>_279 = _277<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _279)</td></tr></table>>];
    bb113__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_279)<br/>StorageDead(_277)<br/>_840 = discriminant(_271)<br/>StorageDead(_275)<br/>StorageDead(_271)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb114__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_290)<br/>_288 = ((*_289).42: u16)<br/>StorageLive(_291)<br/>StorageLive(_292)<br/>StorageLive(_293)<br/>StorageLive(_294)<br/>StorageLive(_295)<br/>StorageLive(_296)<br/>_296 = &amp;_270<br/></td></tr><tr><td align="left">_295 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _296)</td></tr></table>>];
    bb115__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">_294 = &amp;(*_295)<br/>StorageDead(_296)<br/></td></tr><tr><td align="left">_293 = SpotMarket::oracle_id(move _294)</td></tr></table>>];
    bb116__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left" balign="left">StorageDead(_294)<br/>_292 = &amp;_293<br/>_291 = &amp;(*_292)<br/>StorageLive(_297)<br/>StorageLive(_298)<br/>StorageLive(_299)<br/>_299 = &amp;_270<br/></td></tr><tr><td align="left">_298 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _299)</td></tr></table>>];
    bb117__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">117</td></tr><tr><td align="left" balign="left">StorageDead(_299)<br/>_297 = (((*_298).5: state::oracle::HistoricalOracleData).3: i64)<br/>StorageLive(_300)<br/>StorageLive(_301)<br/>StorageLive(_302)<br/>StorageLive(_303)<br/>StorageLive(_304)<br/>StorageLive(_305)<br/>_305 = &amp;_270<br/></td></tr><tr><td align="left">_304 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _305)</td></tr></table>>];
    bb118__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">118</td></tr><tr><td align="left" balign="left">_303 = &amp;(*_304)<br/>StorageDead(_305)<br/></td></tr><tr><td align="left">_302 = SpotMarket::get_max_confidence_interval_multiplier(move _303)</td></tr></table>>];
    bb119__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">119</td></tr><tr><td align="left" balign="left">StorageDead(_303)<br/></td></tr><tr><td align="left">_301 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _302)</td></tr></table>>];
    bb120__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">120</td></tr><tr><td align="left" balign="left">StorageDead(_302)<br/>_306 = discriminant(_301)<br/></td></tr><tr><td align="left">switchInt(move _306)</td></tr></table>>];
    bb121__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">StorageLive(_310)<br/>_310 = ((_301 as Continue).0: u64)<br/>_300 = _310<br/>StorageDead(_310)<br/></td></tr><tr><td align="left">_285 = OracleMap::&lt;'_&gt;::get_price_data_and_validity(move _286, move _287, move _288, move _291, move _297, move _300, const 0_i8)</td></tr></table>>];
    bb122__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">StorageLive(_307)<br/>_307 = ((_301 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_309)<br/>_309 = _307<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _309)</td></tr></table>>];
    bb123__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">StorageDead(_309)<br/>StorageDead(_307)<br/>StorageDead(_300)<br/>StorageDead(_297)<br/>StorageDead(_291)<br/>StorageDead(_288)<br/>StorageDead(_287)<br/>StorageDead(_286)<br/>StorageDead(_285)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb124__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">StorageDead(_300)<br/>StorageDead(_297)<br/>StorageDead(_291)<br/>StorageDead(_288)<br/>StorageDead(_287)<br/>StorageDead(_286)<br/></td></tr><tr><td align="left">_284 = &lt;std::result::Result&lt;(&amp;OraclePriceData, OracleValidity), error::ErrorCode&gt; as Try&gt;::branch(move _285)</td></tr></table>>];
    bb125__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">125</td></tr><tr><td align="left" balign="left">StorageDead(_285)<br/>_311 = discriminant(_284)<br/></td></tr><tr><td align="left">switchInt(move _311)</td></tr></table>>];
    bb126__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">126</td></tr><tr><td align="left" balign="left">StorageLive(_315)<br/>_315 = ((_284 as Continue).0: (&amp;state::oracle::OraclePriceData, math::oracle::OracleValidity))<br/>_283 = _315<br/>StorageDead(_315)<br/>StorageLive(_281)<br/>_281 = (_283.0: &amp;state::oracle::OraclePriceData)<br/>StorageLive(_282)<br/>_282 = (_283.1: math::oracle::OracleValidity)<br/>StorageDead(_304)<br/>StorageDead(_301)<br/>StorageDead(_298)<br/>StorageDead(_295)<br/>StorageDead(_293)<br/>StorageDead(_292)<br/>StorageDead(_289)<br/>StorageDead(_284)<br/>StorageDead(_283)<br/>StorageLive(_316)<br/>StorageLive(_317)<br/>_317 = ((*_281).0: i64)<br/>StorageLive(_318)<br/>StorageLive(_319)<br/>StorageLive(_320)<br/>StorageLive(_321)<br/>_321 = &amp;_270<br/></td></tr><tr><td align="left">_320 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _321)</td></tr></table>>];
    bb127__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">127</td></tr><tr><td align="left" balign="left">StorageLive(_312)<br/>_312 = ((_284 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_314)<br/>_314 = _312<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _314)</td></tr></table>>];
    bb128__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">128</td></tr><tr><td align="left" balign="left">StorageDead(_314)<br/>StorageDead(_312)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb129__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">129</td></tr><tr><td align="left" balign="left">StorageDead(_321)<br/>_319 = (((*_320).5: state::oracle::HistoricalOracleData).4: i64)<br/>_318 = Option::&lt;i64&gt;::Some(move _319)<br/>StorageDead(_319)<br/>_316 = StrictOraclePrice { current: move _317, twap_5min: move _318 }<br/>StorageDead(_318)<br/>StorageDead(_317)<br/>StorageDead(_320)<br/>StorageLive(_322)<br/>StorageLive(_323)<br/>StorageLive(_324)<br/>StorageLive(_325)<br/>StorageLive(_326)<br/>StorageLive(_327)<br/>StorageLive(_328)<br/>_328 = _282<br/>StorageLive(_329)<br/>StorageLive(_330)<br/>_330 = DriftAction::TriggerOrder<br/>_329 = Option::&lt;DriftAction&gt;::Some(move _330)<br/>StorageDead(_330)<br/></td></tr><tr><td align="left">_327 = is_oracle_valid_for_action(move _328, move _329)</td></tr></table>>];
    bb130__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">130</td></tr><tr><td align="left" balign="left">StorageDead(_329)<br/>StorageDead(_328)<br/></td></tr><tr><td align="left">_326 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _327)</td></tr></table>>];
    bb131__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">131</td></tr><tr><td align="left" balign="left">StorageDead(_327)<br/>_331 = discriminant(_326)<br/></td></tr><tr><td align="left">switchInt(move _331)</td></tr></table>>];
    bb132__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">132</td></tr><tr><td align="left" balign="left">StorageLive(_335)<br/>_335 = ((_326 as Continue).0: bool)<br/>_325 = _335<br/>StorageDead(_335)<br/></td></tr><tr><td align="left">switchInt(move _325)</td></tr></table>>];
    bb133__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">133</td></tr><tr><td align="left" balign="left">StorageLive(_332)<br/>_332 = ((_326 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_334)<br/>_334 = _332<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _334)</td></tr></table>>];
    bb134__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">134</td></tr><tr><td align="left" balign="left">StorageDead(_334)<br/>StorageDead(_332)<br/>StorageDead(_326)<br/>StorageDead(_325)<br/>StorageDead(_324)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb135__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">135</td></tr><tr><td align="left" balign="left">StorageDead(_326)<br/>StorageLive(_336)<br/>_336 = ()<br/>_324 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _336)<br/>StorageDead(_336)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb136__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">136</td></tr><tr><td align="left" balign="left">StorageDead(_326)<br/>StorageLive(_337)<br/>_337 = error::ErrorCode::InvalidOracle<br/>StorageLive(_338)<br/>StorageLive(_339)<br/>StorageLive(_340)<br/>StorageLive(_341)<br/>StorageLive(_342)<br/>StorageLive(_343)<br/>StorageLive(_344)<br/>StorageLive(_345)<br/>StorageLive(_346)<br/>StorageLive(_347)<br/>StorageLive(_348)<br/>_826 = const _<br/>_348 = &amp;(*_826)<br/>_347 = &amp;(*_348)<br/>_346 = move _347 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_347)<br/>StorageLive(_350)<br/>StorageLive(_351)<br/>StorageLive(_352)<br/>StorageLive(_353)<br/>StorageLive(_354)<br/>StorageLive(_355)<br/>StorageLive(_356)<br/>_356 = &amp;_337<br/>_355 = &amp;(*_356)<br/></td></tr><tr><td align="left">_354 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _355)</td></tr></table>>];
    bb137__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">137</td></tr><tr><td align="left" balign="left">StorageDead(_355)<br/>_353 = [move _354]<br/>StorageDead(_354)<br/>_352 = &amp;_353<br/>_351 = &amp;(*_352)<br/>_350 = move _351 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_351)<br/></td></tr><tr><td align="left">_345 = Arguments::&lt;'_&gt;::new_v1(move _346, move _350)</td></tr></table>>];
    bb138__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">138</td></tr><tr><td align="left" balign="left">StorageDead(_350)<br/>StorageDead(_346)<br/></td></tr><tr><td align="left">_344 = format(move _345)</td></tr></table>>];
    bb139__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">139</td></tr><tr><td align="left" balign="left">StorageDead(_345)<br/>StorageDead(_356)<br/>StorageDead(_353)<br/>StorageDead(_352)<br/>StorageDead(_348)<br/>_343 = move _344<br/>StorageDead(_344)<br/>_342 = &amp;_343<br/>_341 = &amp;(*_342)<br/></td></tr><tr><td align="left">_340 = &lt;String as Deref&gt;::deref(move _341)</td></tr></table>>];
    bb140__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">140</td></tr><tr><td align="left" balign="left">_339 = &amp;(*_340)<br/>StorageDead(_341)<br/></td></tr><tr><td align="left">_338 = solana_program::log::sol_log(move _339)</td></tr></table>>];
    bb141__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">141</td></tr><tr><td align="left" balign="left">StorageDead(_339)<br/></td></tr><tr><td align="left">drop(_343)</td></tr></table>>];
    bb142__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">142</td></tr><tr><td align="left" balign="left">StorageDead(_343)<br/>StorageDead(_342)<br/>StorageDead(_340)<br/>StorageDead(_338)<br/>StorageLive(_357)<br/>StorageLive(_358)<br/>StorageLive(_359)<br/>StorageLive(_360)<br/>StorageLive(_361)<br/>StorageLive(_362)<br/>StorageLive(_363)<br/>StorageLive(_364)<br/>StorageLive(_365)<br/>StorageLive(_366)<br/>StorageLive(_367)<br/>_825 = const _<br/>_367 = &amp;(*_825)<br/>_366 = &amp;(*_367)<br/>_365 = move _366 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_366)<br/>StorageLive(_369)<br/>StorageLive(_370)<br/>StorageLive(_371)<br/>StorageLive(_372)<br/>StorageLive(_373)<br/>StorageLive(_374)<br/>StorageLive(_375)<br/>StorageLive(_376)<br/>StorageLive(_377)<br/>_377 = &amp;_270<br/></td></tr><tr><td align="left">_376 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _377)</td></tr></table>>];
    bb143__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">143</td></tr><tr><td align="left" balign="left">StorageDead(_377)<br/>_375 = &amp;((*_376).42: u16)<br/>_374 = &amp;(*_375)<br/></td></tr><tr><td align="left">_373 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _374)</td></tr></table>>];
    bb144__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">144</td></tr><tr><td align="left" balign="left">StorageDead(_374)<br/>_372 = [move _373]<br/>StorageDead(_373)<br/>_371 = &amp;_372<br/>_370 = &amp;(*_371)<br/>_369 = move _370 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_370)<br/></td></tr><tr><td align="left">_364 = Arguments::&lt;'_&gt;::new_v1(move _365, move _369)</td></tr></table>>];
    bb145__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">145</td></tr><tr><td align="left" balign="left">StorageDead(_369)<br/>StorageDead(_365)<br/></td></tr><tr><td align="left">_363 = format(move _364)</td></tr></table>>];
    bb146__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">146</td></tr><tr><td align="left" balign="left">StorageDead(_364)<br/>StorageDead(_376)<br/>StorageDead(_375)<br/>StorageDead(_372)<br/>StorageDead(_371)<br/>StorageDead(_367)<br/>_362 = move _363<br/>StorageDead(_363)<br/>_361 = &amp;_362<br/>_360 = &amp;(*_361)<br/></td></tr><tr><td align="left">_359 = &lt;String as Deref&gt;::deref(move _360)</td></tr></table>>];
    bb147__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">147</td></tr><tr><td align="left" balign="left">_358 = &amp;(*_359)<br/>StorageDead(_360)<br/></td></tr><tr><td align="left">_357 = solana_program::log::sol_log(move _358)</td></tr></table>>];
    bb148__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">148</td></tr><tr><td align="left" balign="left">StorageDead(_358)<br/></td></tr><tr><td align="left">drop(_362)</td></tr></table>>];
    bb149__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">149</td></tr><tr><td align="left" balign="left">StorageDead(_362)<br/>StorageDead(_361)<br/>StorageDead(_359)<br/>StorageDead(_357)<br/>StorageLive(_378)<br/>_378 = _337<br/>_324 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _378)<br/>StorageDead(_378)<br/>StorageDead(_337)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb150__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">150</td></tr><tr><td align="left" balign="left">StorageDead(_325)<br/></td></tr><tr><td align="left">_323 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _324)</td></tr></table>>];
    bb151__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">151</td></tr><tr><td align="left" balign="left">StorageDead(_324)<br/>_379 = discriminant(_323)<br/></td></tr><tr><td align="left">switchInt(move _379)</td></tr></table>>];
    bb152__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">152</td></tr><tr><td align="left" balign="left">StorageLive(_383)<br/>_383 = ((_323 as Continue).0: ())<br/>_322 = _383<br/>StorageDead(_383)<br/>StorageDead(_323)<br/>StorageDead(_322)<br/>StorageLive(_384)<br/>_384 = ((*_281).0: i64)<br/>StorageLive(_385)<br/>StorageLive(_386)<br/>StorageLive(_387)<br/>StorageLive(_388)<br/>_388 = ((*_281).0: i64)<br/>StorageLive(_389)<br/>StorageLive(_390)<br/>StorageLive(_391)<br/>_391 = &amp;_270<br/></td></tr><tr><td align="left">_390 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _391)</td></tr></table>>];
    bb153__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">153</td></tr><tr><td align="left" balign="left">StorageLive(_380)<br/>_380 = ((_323 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_382)<br/>_382 = _380<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _382)</td></tr></table>>];
    bb154__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">154</td></tr><tr><td align="left" balign="left">StorageDead(_382)<br/>StorageDead(_380)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb155__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">155</td></tr><tr><td align="left" balign="left">StorageDead(_391)<br/>_389 = (((*_390).5: state::oracle::HistoricalOracleData).4: i64)<br/>StorageLive(_392)<br/>StorageLive(_393)<br/>StorageLive(_394)<br/>StorageLive(_395)<br/>StorageLive(_396)<br/>_396 = &amp;((*_2).7: state::state::OracleGuardRails)<br/></td></tr><tr><td align="left">_395 = state::state::OracleGuardRails::max_oracle_twap_5min_percent_divergence(move _396)</td></tr></table>>];
    bb156__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">156</td></tr><tr><td align="left" balign="left">StorageDead(_396)<br/></td></tr><tr><td align="left">_394 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _395)</td></tr></table>>];
    bb157__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">157</td></tr><tr><td align="left" balign="left">StorageDead(_395)<br/></td></tr><tr><td align="left">_393 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _394)</td></tr></table>>];
    bb158__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">158</td></tr><tr><td align="left" balign="left">StorageDead(_394)<br/>_397 = discriminant(_393)<br/></td></tr><tr><td align="left">switchInt(move _397)</td></tr></table>>];
    bb159__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">159</td></tr><tr><td align="left" balign="left">StorageLive(_401)<br/>_401 = ((_393 as Continue).0: i64)<br/>_392 = _401<br/>StorageDead(_401)<br/></td></tr><tr><td align="left">_387 = math::orders::is_oracle_too_divergent_with_twap_5min(move _388, move _389, move _392)</td></tr></table>>];
    bb160__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">160</td></tr><tr><td align="left" balign="left">StorageLive(_398)<br/>_398 = ((_393 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_400)<br/>_400 = _398<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _400)</td></tr></table>>];
    bb161__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">161</td></tr><tr><td align="left" balign="left">StorageDead(_400)<br/>StorageDead(_398)<br/>StorageDead(_392)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/>StorageDead(_387)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb162__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">162</td></tr><tr><td align="left" balign="left">StorageDead(_392)<br/>StorageDead(_389)<br/>StorageDead(_388)<br/></td></tr><tr><td align="left">_386 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _387)</td></tr></table>>];
    bb163__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">163</td></tr><tr><td align="left" balign="left">StorageDead(_387)<br/>_402 = discriminant(_386)<br/></td></tr><tr><td align="left">switchInt(move _402)</td></tr></table>>];
    bb164__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">164</td></tr><tr><td align="left" balign="left">StorageLive(_406)<br/>_406 = ((_386 as Continue).0: bool)<br/>_385 = _406<br/>StorageDead(_406)<br/>StorageDead(_393)<br/>StorageDead(_390)<br/>StorageDead(_386)<br/>StorageLive(_407)<br/>StorageLive(_408)<br/>StorageLive(_409)<br/>StorageLive(_410)<br/>_410 = _385<br/></td></tr><tr><td align="left">switchInt(move _410)</td></tr></table>>];
    bb165__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">165</td></tr><tr><td align="left" balign="left">StorageLive(_403)<br/>_403 = ((_386 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_405)<br/>_405 = _403<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _405)</td></tr></table>>];
    bb166__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">166</td></tr><tr><td align="left" balign="left">StorageDead(_405)<br/>StorageDead(_403)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb167__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">167</td></tr><tr><td align="left" balign="left">StorageLive(_412)<br/>_412 = error::ErrorCode::OrderBreachesOraclePriceLimits<br/>StorageLive(_413)<br/>StorageLive(_414)<br/>StorageLive(_415)<br/>StorageLive(_416)<br/>StorageLive(_417)<br/>StorageLive(_418)<br/>StorageLive(_419)<br/>StorageLive(_420)<br/>StorageLive(_421)<br/>StorageLive(_422)<br/>StorageLive(_423)<br/>_824 = const _<br/>_423 = &amp;(*_824)<br/>_422 = &amp;(*_423)<br/>_421 = move _422 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_422)<br/>StorageLive(_425)<br/>StorageLive(_426)<br/>StorageLive(_427)<br/>StorageLive(_428)<br/>StorageLive(_429)<br/>StorageLive(_430)<br/>StorageLive(_431)<br/>_431 = &amp;_412<br/>_430 = &amp;(*_431)<br/></td></tr><tr><td align="left">_429 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _430)</td></tr></table>>];
    bb168__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">168</td></tr><tr><td align="left" balign="left">StorageLive(_411)<br/>_411 = ()<br/>_409 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _411)<br/>StorageDead(_411)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb169__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">169</td></tr><tr><td align="left" balign="left">StorageDead(_430)<br/>_428 = [move _429]<br/>StorageDead(_429)<br/>_427 = &amp;_428<br/>_426 = &amp;(*_427)<br/>_425 = move _426 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_426)<br/></td></tr><tr><td align="left">_420 = Arguments::&lt;'_&gt;::new_v1(move _421, move _425)</td></tr></table>>];
    bb170__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">170</td></tr><tr><td align="left" balign="left">StorageDead(_425)<br/>StorageDead(_421)<br/></td></tr><tr><td align="left">_419 = format(move _420)</td></tr></table>>];
    bb171__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">171</td></tr><tr><td align="left" balign="left">StorageDead(_420)<br/>StorageDead(_431)<br/>StorageDead(_428)<br/>StorageDead(_427)<br/>StorageDead(_423)<br/>_418 = move _419<br/>StorageDead(_419)<br/>_417 = &amp;_418<br/>_416 = &amp;(*_417)<br/></td></tr><tr><td align="left">_415 = &lt;String as Deref&gt;::deref(move _416)</td></tr></table>>];
    bb172__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">172</td></tr><tr><td align="left" balign="left">_414 = &amp;(*_415)<br/>StorageDead(_416)<br/></td></tr><tr><td align="left">_413 = solana_program::log::sol_log(move _414)</td></tr></table>>];
    bb173__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">173</td></tr><tr><td align="left" balign="left">StorageDead(_414)<br/></td></tr><tr><td align="left">drop(_418)</td></tr></table>>];
    bb174__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">174</td></tr><tr><td align="left" balign="left">StorageDead(_418)<br/>StorageDead(_417)<br/>StorageDead(_415)<br/>StorageDead(_413)<br/>StorageLive(_432)<br/>StorageLive(_433)<br/>StorageLive(_434)<br/>_434 = const &quot;oracle price vs twap too divergent&quot;<br/>_433 = &amp;(*_434)<br/></td></tr><tr><td align="left">_432 = solana_program::log::sol_log(move _433)</td></tr></table>>];
    bb175__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">175</td></tr><tr><td align="left" balign="left">StorageDead(_433)<br/>StorageDead(_434)<br/>StorageDead(_432)<br/>StorageLive(_435)<br/>_435 = _412<br/>_409 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _435)<br/>StorageDead(_435)<br/>StorageDead(_412)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb176__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">176</td></tr><tr><td align="left" balign="left">StorageDead(_410)<br/></td></tr><tr><td align="left">_408 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _409)</td></tr></table>>];
    bb177__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">177</td></tr><tr><td align="left" balign="left">StorageDead(_409)<br/>_436 = discriminant(_408)<br/></td></tr><tr><td align="left">switchInt(move _436)</td></tr></table>>];
    bb178__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">178</td></tr><tr><td align="left" balign="left">StorageLive(_440)<br/>_440 = ((_408 as Continue).0: ())<br/>_407 = _440<br/>StorageDead(_440)<br/>StorageDead(_408)<br/>StorageDead(_407)<br/>StorageLive(_441)<br/>StorageLive(_442)<br/>StorageLive(_443)<br/>StorageLive(_444)<br/>StorageLive(_445)<br/>StorageLive(_446)<br/>StorageLive(_447)<br/>_447 = &amp;(*_15)<br/></td></tr><tr><td align="left">_446 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _447)</td></tr></table>>];
    bb179__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">179</td></tr><tr><td align="left" balign="left">StorageLive(_437)<br/>_437 = ((_408 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_439)<br/>_439 = _437<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _439)</td></tr></table>>];
    bb180__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">180</td></tr><tr><td align="left" balign="left">StorageDead(_439)<br/>StorageDead(_437)<br/>StorageDead(_408)<br/>StorageDead(_407)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb181__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">181</td></tr><tr><td align="left" balign="left">StorageDead(_447)<br/>StorageLive(_448)<br/>_448 = _27<br/>_449 = Len(((*_446).5: [state::user::Order; 32]))<br/>_450 = Lt(_448, _449)<br/></td></tr><tr><td align="left">assert(move _450, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _449, _448)</td></tr></table>>];
    bb182__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">182</td></tr><tr><td align="left" balign="left">_445 = &amp;((*_446).5: [state::user::Order; 32])[_448]<br/>_444 = &amp;(*_445)<br/>StorageLive(_451)<br/>StorageLive(_452)<br/>StorageLive(_453)<br/>StorageLive(_454)<br/>StorageLive(_455)<br/>_455 = _384<br/></td></tr><tr><td align="left">_454 = core::num::&lt;impl i64&gt;::unsigned_abs(move _455)</td></tr></table>>];
    bb183__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">183</td></tr><tr><td align="left" balign="left">StorageDead(_455)<br/></td></tr><tr><td align="left">_453 = &lt;u64 as Cast&gt;::cast::&lt;u64&gt;(move _454)</td></tr></table>>];
    bb184__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">184</td></tr><tr><td align="left" balign="left">StorageDead(_454)<br/></td></tr><tr><td align="left">_452 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _453)</td></tr></table>>];
    bb185__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">185</td></tr><tr><td align="left" balign="left">StorageDead(_453)<br/>_456 = discriminant(_452)<br/></td></tr><tr><td align="left">switchInt(move _456)</td></tr></table>>];
    bb186__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">186</td></tr><tr><td align="left" balign="left">StorageLive(_460)<br/>_460 = ((_452 as Continue).0: u64)<br/>_451 = _460<br/>StorageDead(_460)<br/></td></tr><tr><td align="left">_443 = math::orders::order_satisfies_trigger_condition(move _444, move _451)</td></tr></table>>];
    bb187__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">187</td></tr><tr><td align="left" balign="left">StorageLive(_457)<br/>_457 = ((_452 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_459)<br/>_459 = _457<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _459)</td></tr></table>>];
    bb188__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">188</td></tr><tr><td align="left" balign="left">StorageDead(_459)<br/>StorageDead(_457)<br/>StorageDead(_451)<br/>StorageDead(_444)<br/>StorageDead(_443)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb189__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">189</td></tr><tr><td align="left" balign="left">StorageDead(_451)<br/>StorageDead(_444)<br/></td></tr><tr><td align="left">_442 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _443)</td></tr></table>>];
    bb190__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">190</td></tr><tr><td align="left" balign="left">StorageDead(_443)<br/>_461 = discriminant(_442)<br/></td></tr><tr><td align="left">switchInt(move _461)</td></tr></table>>];
    bb191__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">191</td></tr><tr><td align="left" balign="left">StorageLive(_465)<br/>_465 = ((_442 as Continue).0: bool)<br/>_441 = _465<br/>StorageDead(_465)<br/>StorageDead(_452)<br/>StorageDead(_448)<br/>StorageDead(_446)<br/>StorageDead(_445)<br/>StorageDead(_442)<br/>StorageLive(_466)<br/>StorageLive(_467)<br/>StorageLive(_468)<br/>StorageLive(_469)<br/>_469 = _441<br/></td></tr><tr><td align="left">switchInt(move _469)</td></tr></table>>];
    bb192__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">192</td></tr><tr><td align="left" balign="left">StorageLive(_462)<br/>_462 = ((_442 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_464)<br/>_464 = _462<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _464)</td></tr></table>>];
    bb193__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">193</td></tr><tr><td align="left" balign="left">StorageDead(_464)<br/>StorageDead(_462)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb194__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">194</td></tr><tr><td align="left" balign="left">StorageLive(_470)<br/>_470 = ()<br/>_468 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _470)<br/>StorageDead(_470)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb195__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">195</td></tr><tr><td align="left" balign="left">StorageLive(_471)<br/>_471 = error::ErrorCode::OrderDidNotSatisfyTriggerCondition<br/>StorageLive(_472)<br/>StorageLive(_473)<br/>StorageLive(_474)<br/>StorageLive(_475)<br/>StorageLive(_476)<br/>StorageLive(_477)<br/>StorageLive(_478)<br/>StorageLive(_479)<br/>StorageLive(_480)<br/>StorageLive(_481)<br/>StorageLive(_482)<br/>_823 = const _<br/>_482 = &amp;(*_823)<br/>_481 = &amp;(*_482)<br/>_480 = move _481 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_481)<br/>StorageLive(_484)<br/>StorageLive(_485)<br/>StorageLive(_486)<br/>StorageLive(_487)<br/>StorageLive(_488)<br/>StorageLive(_489)<br/>StorageLive(_490)<br/>_490 = &amp;_471<br/>_489 = &amp;(*_490)<br/></td></tr><tr><td align="left">_488 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _489)</td></tr></table>>];
    bb196__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">196</td></tr><tr><td align="left" balign="left">StorageDead(_489)<br/>_487 = [move _488]<br/>StorageDead(_488)<br/>_486 = &amp;_487<br/>_485 = &amp;(*_486)<br/>_484 = move _485 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_485)<br/></td></tr><tr><td align="left">_479 = Arguments::&lt;'_&gt;::new_v1(move _480, move _484)</td></tr></table>>];
    bb197__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">197</td></tr><tr><td align="left" balign="left">StorageDead(_484)<br/>StorageDead(_480)<br/></td></tr><tr><td align="left">_478 = format(move _479)</td></tr></table>>];
    bb198__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">198</td></tr><tr><td align="left" balign="left">StorageDead(_479)<br/>StorageDead(_490)<br/>StorageDead(_487)<br/>StorageDead(_486)<br/>StorageDead(_482)<br/>_477 = move _478<br/>StorageDead(_478)<br/>_476 = &amp;_477<br/>_475 = &amp;(*_476)<br/></td></tr><tr><td align="left">_474 = &lt;String as Deref&gt;::deref(move _475)</td></tr></table>>];
    bb199__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">199</td></tr><tr><td align="left" balign="left">_473 = &amp;(*_474)<br/>StorageDead(_475)<br/></td></tr><tr><td align="left">_472 = solana_program::log::sol_log(move _473)</td></tr></table>>];
    bb200__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">200</td></tr><tr><td align="left" balign="left">StorageDead(_473)<br/></td></tr><tr><td align="left">drop(_477)</td></tr></table>>];
    bb201__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">201</td></tr><tr><td align="left" balign="left">StorageDead(_477)<br/>StorageDead(_476)<br/>StorageDead(_474)<br/>StorageDead(_472)<br/>StorageLive(_491)<br/>_491 = _471<br/>_468 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _491)<br/>StorageDead(_491)<br/>StorageDead(_471)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb202__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">202</td></tr><tr><td align="left" balign="left">StorageDead(_469)<br/></td></tr><tr><td align="left">_467 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _468)</td></tr></table>>];
    bb203__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">203</td></tr><tr><td align="left" balign="left">StorageDead(_468)<br/>_492 = discriminant(_467)<br/></td></tr><tr><td align="left">switchInt(move _492)</td></tr></table>>];
    bb204__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">204</td></tr><tr><td align="left" balign="left">StorageLive(_496)<br/>_496 = ((_467 as Continue).0: ())<br/>_466 = _496<br/>StorageDead(_496)<br/>StorageDead(_467)<br/>StorageDead(_466)<br/>StorageLive(_497)<br/>StorageLive(_498)<br/>StorageLive(_499)<br/>StorageLive(_500)<br/>StorageLive(_501)<br/>StorageLive(_502)<br/>_502 = &amp;(*_15)<br/></td></tr><tr><td align="left">_501 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _502)</td></tr></table>>];
    bb205__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">205</td></tr><tr><td align="left" balign="left">StorageLive(_493)<br/>_493 = ((_467 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_495)<br/>_495 = _493<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _495)</td></tr></table>>];
    bb206__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">206</td></tr><tr><td align="left" balign="left">StorageDead(_495)<br/>StorageDead(_493)<br/>StorageDead(_467)<br/>StorageDead(_466)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb207__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">207</td></tr><tr><td align="left" balign="left">_500 = &amp;(*_501)<br/>StorageDead(_502)<br/>StorageLive(_503)<br/>_503 = _46<br/></td></tr><tr><td align="left">_499 = User::get_spot_position_index(move _500, move _503)</td></tr></table>>];
    bb208__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">208</td></tr><tr><td align="left" balign="left">StorageDead(_503)<br/>StorageDead(_500)<br/></td></tr><tr><td align="left">_498 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _499)</td></tr></table>>];
    bb209__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">209</td></tr><tr><td align="left" balign="left">StorageDead(_499)<br/>_504 = discriminant(_498)<br/></td></tr><tr><td align="left">switchInt(move _504)</td></tr></table>>];
    bb210__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">210</td></tr><tr><td align="left" balign="left">StorageLive(_508)<br/>_508 = ((_498 as Continue).0: usize)<br/>_497 = _508<br/>StorageDead(_508)<br/>StorageDead(_501)<br/>StorageDead(_498)<br/>StorageLive(_509)<br/>StorageLive(_510)<br/>StorageLive(_511)<br/>StorageLive(_512)<br/>StorageLive(_513)<br/>StorageLive(_514)<br/>_514 = &amp;(*_15)<br/></td></tr><tr><td align="left">_513 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _514)</td></tr></table>>];
    bb211__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">211</td></tr><tr><td align="left" balign="left">StorageLive(_505)<br/>_505 = ((_498 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_507)<br/>_507 = _505<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _507)</td></tr></table>>];
    bb212__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">212</td></tr><tr><td align="left" balign="left">StorageDead(_507)<br/>StorageDead(_505)<br/>StorageDead(_501)<br/>StorageDead(_498)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb213__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">213</td></tr><tr><td align="left" balign="left">StorageDead(_514)<br/>StorageLive(_515)<br/>_515 = _497<br/>_516 = Len(((*_513).3: [state::user::SpotPosition; 8]))<br/>_517 = Lt(_515, _516)<br/></td></tr><tr><td align="left">assert(move _517, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _516, _515)</td></tr></table>>];
    bb214__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">214</td></tr><tr><td align="left" balign="left">_512 = &amp;((*_513).3: [state::user::SpotPosition; 8])[_515]<br/>StorageLive(_518)<br/>StorageLive(_519)<br/>StorageLive(_520)<br/>StorageLive(_521)<br/>_521 = &amp;_270<br/>_520 = &amp;(*_521)<br/></td></tr><tr><td align="left">_519 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _520)</td></tr></table>>];
    bb215__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">215</td></tr><tr><td align="left" balign="left">_518 = &amp;(*_519)<br/>StorageDead(_520)<br/></td></tr><tr><td align="left">_511 = SpotPosition::get_signed_token_amount(move _512, move _518)</td></tr></table>>];
    bb216__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">216</td></tr><tr><td align="left" balign="left">StorageDead(_518)<br/>StorageDead(_512)<br/></td></tr><tr><td align="left">_510 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _511)</td></tr></table>>];
    bb217__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">217</td></tr><tr><td align="left" balign="left">StorageDead(_511)<br/>_522 = discriminant(_510)<br/></td></tr><tr><td align="left">switchInt(move _522)</td></tr></table>>];
    bb218__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">218</td></tr><tr><td align="left" balign="left">StorageLive(_526)<br/>_526 = ((_510 as Continue).0: i128)<br/>_509 = _526<br/>StorageDead(_526)<br/>StorageDead(_521)<br/>StorageDead(_519)<br/>StorageDead(_515)<br/>StorageDead(_513)<br/>StorageDead(_510)<br/>StorageLive(_527)<br/>StorageLive(_528)<br/>StorageLive(_529)<br/>StorageLive(_530)<br/>StorageLive(_531)<br/>StorageLive(_532)<br/>_532 = &amp;(*_15)<br/></td></tr><tr><td align="left">_531 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _532)</td></tr></table>>];
    bb219__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">219</td></tr><tr><td align="left" balign="left">StorageLive(_523)<br/>_523 = ((_510 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_525)<br/>_525 = _523<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _525)</td></tr></table>>];
    bb220__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">220</td></tr><tr><td align="left" balign="left">StorageDead(_525)<br/>StorageDead(_523)<br/>StorageDead(_521)<br/>StorageDead(_519)<br/>StorageDead(_515)<br/>StorageDead(_513)<br/>StorageDead(_510)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb221__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">221</td></tr><tr><td align="left" balign="left">StorageDead(_532)<br/>StorageLive(_533)<br/>_533 = _497<br/>_534 = Len(((*_531).3: [state::user::SpotPosition; 8]))<br/>_535 = Lt(_533, _534)<br/></td></tr><tr><td align="left">assert(move _535, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _534, _533)</td></tr></table>>];
    bb222__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">222</td></tr><tr><td align="left" balign="left">_530 = &amp;((*_531).3: [state::user::SpotPosition; 8])[_533]<br/>StorageLive(_536)<br/>StorageLive(_537)<br/>StorageLive(_538)<br/>StorageLive(_539)<br/>_539 = &amp;_270<br/>_538 = &amp;(*_539)<br/></td></tr><tr><td align="left">_537 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _538)</td></tr></table>>];
    bb223__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">223</td></tr><tr><td align="left" balign="left">_536 = &amp;(*_537)<br/>StorageDead(_538)<br/>StorageLive(_540)<br/>StorageLive(_541)<br/>_541 = &amp;_316<br/>_540 = &amp;(*_541)<br/>StorageLive(_542)<br/>StorageLive(_543)<br/>_543 = _509<br/>_542 = Option::&lt;i128&gt;::Some(move _543)<br/>StorageDead(_543)<br/>StorageLive(_544)<br/>_544 = math::margin::MarginRequirementType::Initial<br/></td></tr><tr><td align="left">_529 = SpotPosition::get_worst_case_fill_simulation(move _530, move _536, move _540, move _542, move _544)</td></tr></table>>];
    bb224__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">224</td></tr><tr><td align="left" balign="left">StorageDead(_544)<br/>StorageDead(_542)<br/>StorageDead(_540)<br/>StorageDead(_536)<br/>StorageDead(_530)<br/></td></tr><tr><td align="left">_528 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as Try&gt;::branch(move _529)</td></tr></table>>];
    bb225__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">225</td></tr><tr><td align="left" balign="left">StorageDead(_529)<br/>_545 = discriminant(_528)<br/></td></tr><tr><td align="left">switchInt(move _545)</td></tr></table>>];
    bb226__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">226</td></tr><tr><td align="left" balign="left">StorageLive(_549)<br/>_549 = ((_528 as Continue).0: state::user::OrderFillSimulation)<br/>_527 = _549<br/>StorageDead(_549)<br/>StorageDead(_541)<br/>StorageDead(_539)<br/>StorageDead(_537)<br/>StorageDead(_533)<br/>StorageDead(_531)<br/>StorageDead(_528)<br/>StorageLive(_550)<br/>StorageLive(_551)<br/>StorageLive(_552)<br/>StorageLive(_553)<br/>StorageLive(_554)<br/>StorageLive(_555)<br/>StorageLive(_556)<br/>StorageLive(_557)<br/>_557 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_556 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _557)</td></tr></table>>];
    bb227__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">227</td></tr><tr><td align="left" balign="left">StorageLive(_546)<br/>_546 = ((_528 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_548)<br/>_548 = _546<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _548)</td></tr></table>>];
    bb228__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">228</td></tr><tr><td align="left" balign="left">StorageDead(_548)<br/>StorageDead(_546)<br/>StorageDead(_541)<br/>StorageDead(_539)<br/>StorageDead(_537)<br/>StorageDead(_533)<br/>StorageDead(_531)<br/>StorageDead(_528)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb229__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">229</td></tr><tr><td align="left" balign="left">StorageDead(_557)<br/>StorageLive(_558)<br/>_558 = _27<br/>_559 = Len(((*_556).5: [state::user::Order; 32]))<br/>_560 = Lt(_558, _559)<br/></td></tr><tr><td align="left">assert(move _560, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _559, _558)</td></tr></table>>];
    bb230__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">230</td></tr><tr><td align="left" balign="left">_555 = &amp;mut ((*_556).5: [state::user::Order; 32])[_558]<br/>_554 = &amp;mut (*_555)<br/>StorageLive(_561)<br/>_561 = &amp;(*_281)<br/>StorageLive(_562)<br/>_562 = _10<br/>StorageLive(_563)<br/>_563 = Option::&lt;&amp;PerpMarket&gt;::None<br/></td></tr><tr><td align="left">_553 = update_trigger_order_params(move _554, move _561, move _562, const 20_u8, move _563)</td></tr></table>>];
    bb231__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">231</td></tr><tr><td align="left" balign="left">StorageDead(_563)<br/>StorageDead(_562)<br/>StorageDead(_561)<br/>StorageDead(_554)<br/></td></tr><tr><td align="left">_552 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _553)</td></tr></table>>];
    bb232__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">232</td></tr><tr><td align="left" balign="left">StorageDead(_553)<br/>_564 = discriminant(_552)<br/></td></tr><tr><td align="left">switchInt(move _564)</td></tr></table>>];
    bb233__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">233</td></tr><tr><td align="left" balign="left">StorageLive(_568)<br/>_568 = ((_552 as Continue).0: ())<br/>_551 = _568<br/>StorageDead(_568)<br/>StorageDead(_558)<br/>StorageDead(_556)<br/>StorageDead(_555)<br/>StorageDead(_552)<br/>StorageDead(_551)<br/>StorageLive(_569)<br/>StorageLive(_570)<br/>StorageLive(_571)<br/>StorageLive(_572)<br/>StorageLive(_573)<br/>_573 = &amp;(*_15)<br/></td></tr><tr><td align="left">_572 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _573)</td></tr></table>>];
    bb234__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">234</td></tr><tr><td align="left" balign="left">StorageLive(_565)<br/>_565 = ((_552 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_567)<br/>_567 = _565<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _567)</td></tr></table>>];
    bb235__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">235</td></tr><tr><td align="left" balign="left">StorageDead(_567)<br/>StorageDead(_565)<br/>StorageDead(_558)<br/>StorageDead(_556)<br/>StorageDead(_555)<br/>StorageDead(_552)<br/>StorageDead(_551)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb236__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">236</td></tr><tr><td align="left" balign="left">StorageDead(_573)<br/>StorageLive(_574)<br/>_574 = _27<br/>_575 = Len(((*_572).5: [state::user::Order; 32]))<br/>_576 = Lt(_574, _575)<br/></td></tr><tr><td align="left">assert(move _576, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _575, _574)</td></tr></table>>];
    bb237__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">237</td></tr><tr><td align="left" balign="left">_571 = &amp;((*_572).5: [state::user::Order; 32])[_574]<br/></td></tr><tr><td align="left">_570 = Order::has_auction(move _571)</td></tr></table>>];
    bb238__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">238</td></tr><tr><td align="left">switchInt(move _570)</td></tr></table>>];
    bb239__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">239</td></tr><tr><td align="left" balign="left">StorageDead(_574)<br/>StorageDead(_572)<br/>StorageDead(_571)<br/>StorageLive(_577)<br/>StorageLive(_578)<br/>StorageLive(_579)<br/>StorageLive(_580)<br/>_580 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_579 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _580)</td></tr></table>>];
    bb240__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">240</td></tr><tr><td align="left" balign="left">_578 = &amp;mut (*_579)<br/>StorageDead(_580)<br/></td></tr><tr><td align="left">_577 = User::increment_open_auctions(move _578)</td></tr></table>>];
    bb241__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">241</td></tr><tr><td align="left" balign="left">StorageDead(_578)<br/>StorageDead(_579)<br/>StorageDead(_577)<br/>_569 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb242__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">242</td></tr><tr><td align="left" balign="left">StorageDead(_574)<br/>StorageDead(_572)<br/>StorageDead(_571)<br/>_569 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb243__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">243</td></tr><tr><td align="left" balign="left">StorageDead(_570)<br/>StorageDead(_569)<br/>StorageLive(_581)<br/>StorageLive(_582)<br/>StorageLive(_583)<br/>_583 = &amp;(*_15)<br/></td></tr><tr><td align="left">_582 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _583)</td></tr></table>>];
    bb244__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">244</td></tr><tr><td align="left" balign="left">StorageDead(_583)<br/>StorageLive(_584)<br/>_584 = _27<br/>_585 = Len(((*_582).5: [state::user::Order; 32]))<br/>_586 = Lt(_584, _585)<br/></td></tr><tr><td align="left">assert(move _586, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _585, _584)</td></tr></table>>];
    bb245__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">245</td></tr><tr><td align="left" balign="left">_581 = (((*_582).5: [state::user::Order; 32])[_584].17: controller::position::PositionDirection)<br/>StorageDead(_584)<br/>StorageDead(_582)<br/>StorageLive(_587)<br/>StorageLive(_588)<br/>StorageLive(_589)<br/>_589 = &amp;(*_15)<br/></td></tr><tr><td align="left">_588 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _589)</td></tr></table>>];
    bb246__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">246</td></tr><tr><td align="left" balign="left">StorageDead(_589)<br/>StorageLive(_590)<br/>_590 = _27<br/>_591 = Len(((*_588).5: [state::user::Order; 32]))<br/>_592 = Lt(_590, _591)<br/></td></tr><tr><td align="left">assert(move _592, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _591, _590)</td></tr></table>>];
    bb247__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">247</td></tr><tr><td align="left" balign="left">_587 = (((*_588).5: [state::user::Order; 32])[_590].2: u64)<br/>StorageDead(_590)<br/>StorageDead(_588)<br/>StorageLive(_593)<br/>StorageLive(_594)<br/>StorageLive(_595)<br/>StorageLive(_596)<br/>_596 = &amp;(*_15)<br/></td></tr><tr><td align="left">_595 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _596)</td></tr></table>>];
    bb248__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">248</td></tr><tr><td align="left" balign="left">StorageDead(_596)<br/>StorageLive(_597)<br/>_597 = _27<br/>_598 = Len(((*_595).5: [state::user::Order; 32]))<br/>_599 = Lt(_597, _598)<br/></td></tr><tr><td align="left">assert(move _599, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _598, _597)</td></tr></table>>];
    bb249__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">249</td></tr><tr><td align="left" balign="left">_594 = &amp;((*_595).5: [state::user::Order; 32])[_597]<br/></td></tr><tr><td align="left">_593 = Order::update_open_bids_and_asks(move _594)</td></tr></table>>];
    bb250__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">250</td></tr><tr><td align="left" balign="left">StorageDead(_594)<br/>StorageDead(_597)<br/>StorageDead(_595)<br/>StorageLive(_600)<br/>StorageLive(_601)<br/>StorageLive(_602)<br/>StorageLive(_603)<br/>StorageLive(_604)<br/>StorageLive(_605)<br/>_605 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_604 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _605)</td></tr></table>>];
    bb251__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">251</td></tr><tr><td align="left" balign="left">_603 = &amp;mut (*_604)<br/>StorageDead(_605)<br/>StorageLive(_606)<br/>_606 = _46<br/></td></tr><tr><td align="left">_602 = User::force_get_spot_position_mut(move _603, move _606)</td></tr></table>>];
    bb252__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">252</td></tr><tr><td align="left" balign="left">StorageDead(_606)<br/>StorageDead(_603)<br/></td></tr><tr><td align="left">_601 = &lt;std::result::Result&lt;&amp;mut SpotPosition, error::ErrorCode&gt; as Try&gt;::branch(move _602)</td></tr></table>>];
    bb253__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">253</td></tr><tr><td align="left" balign="left">StorageDead(_602)<br/>_607 = discriminant(_601)<br/></td></tr><tr><td align="left">switchInt(move _607)</td></tr></table>>];
    bb254__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">254</td></tr><tr><td align="left" balign="left">StorageLive(_611)<br/>_611 = move ((_601 as Continue).0: &amp;mut state::user::SpotPosition)<br/>_600 = move _611<br/>StorageDead(_611)<br/>StorageDead(_604)<br/>StorageDead(_601)<br/>StorageLive(_612)<br/>StorageLive(_613)<br/>StorageLive(_614)<br/>StorageLive(_615)<br/>_615 = &amp;mut (*_600)<br/>StorageLive(_616)<br/>StorageLive(_617)<br/>_617 = &amp;_581<br/>_616 = &amp;(*_617)<br/>StorageLive(_618)<br/>StorageLive(_619)<br/>StorageLive(_620)<br/>StorageLive(_621)<br/>_621 = _587<br/></td></tr><tr><td align="left">_620 = &lt;u64 as Cast&gt;::cast::&lt;u64&gt;(move _621)</td></tr></table>>];
    bb255__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">255</td></tr><tr><td align="left" balign="left">StorageLive(_608)<br/>_608 = ((_601 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_610)<br/>_610 = _608<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _610)</td></tr></table>>];
    bb256__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">256</td></tr><tr><td align="left" balign="left">StorageDead(_610)<br/>StorageDead(_608)<br/>StorageDead(_604)<br/>StorageDead(_601)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb257__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">257</td></tr><tr><td align="left" balign="left">StorageDead(_621)<br/></td></tr><tr><td align="left">_619 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _620)</td></tr></table>>];
    bb258__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">258</td></tr><tr><td align="left" balign="left">StorageDead(_620)<br/>_622 = discriminant(_619)<br/></td></tr><tr><td align="left">switchInt(move _622)</td></tr></table>>];
    bb259__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">259</td></tr><tr><td align="left" balign="left">StorageLive(_626)<br/>_626 = ((_619 as Continue).0: u64)<br/>_618 = _626<br/>StorageDead(_626)<br/>StorageLive(_627)<br/>_627 = _593<br/></td></tr><tr><td align="left">_614 = increase_spot_open_bids_and_asks(move _615, move _616, move _618, move _627)</td></tr></table>>];
    bb260__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">260</td></tr><tr><td align="left" balign="left">StorageLive(_623)<br/>_623 = ((_619 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_625)<br/>_625 = _623<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _625)</td></tr></table>>];
    bb261__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">261</td></tr><tr><td align="left" balign="left">StorageDead(_625)<br/>StorageDead(_623)<br/>StorageDead(_618)<br/>StorageDead(_616)<br/>StorageDead(_615)<br/>StorageDead(_614)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb262__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">262</td></tr><tr><td align="left" balign="left">StorageDead(_627)<br/>StorageDead(_618)<br/>StorageDead(_616)<br/>StorageDead(_615)<br/></td></tr><tr><td align="left">_613 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _614)</td></tr></table>>];
    bb263__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">263</td></tr><tr><td align="left" balign="left">StorageDead(_614)<br/>_628 = discriminant(_613)<br/></td></tr><tr><td align="left">switchInt(move _628)</td></tr></table>>];
    bb264__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">264</td></tr><tr><td align="left" balign="left">StorageLive(_632)<br/>_632 = ((_613 as Continue).0: ())<br/>_612 = _632<br/>StorageDead(_632)<br/>StorageDead(_619)<br/>StorageDead(_617)<br/>StorageDead(_613)<br/>StorageDead(_612)<br/>_550 = const ()<br/>StorageDead(_600)<br/>StorageDead(_593)<br/>StorageDead(_587)<br/>StorageDead(_581)<br/>StorageDead(_550)<br/>StorageLive(_633)<br/>StorageLive(_634)<br/>_634 = &amp;_13<br/>StorageLive(_635)<br/>_635 = &amp;_11<br/></td></tr><tr><td align="left">_633 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _634, move _635)</td></tr></table>>];
    bb265__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">265</td></tr><tr><td align="left" balign="left">StorageLive(_629)<br/>_629 = ((_613 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_631)<br/>_631 = _629<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _631)</td></tr></table>>];
    bb266__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">266</td></tr><tr><td align="left" balign="left">StorageDead(_631)<br/>StorageDead(_629)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb267__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">267</td></tr><tr><td align="left" balign="left">StorageDead(_635)<br/>StorageDead(_634)<br/>StorageLive(_636)<br/>StorageLive(_637)<br/>_637 = _633<br/></td></tr><tr><td align="left">switchInt(move _637)</td></tr></table>>];
    bb268__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">268</td></tr><tr><td align="left" balign="left">StorageLive(_638)<br/>StorageLive(_639)<br/>StorageLive(_640)<br/>StorageLive(_641)<br/>StorageLive(_642)<br/>_642 = &amp;(*_7)<br/></td></tr><tr><td align="left">_641 = anchor_lang::prelude::AccountLoader::&lt;'_, User&gt;::load_mut(move _642)</td></tr></table>>];
    bb269__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">269</td></tr><tr><td align="left" balign="left">StorageDead(_642)<br/>StorageLive(_643)<br/>_643 = {closure@programs/drift/src/macros.rs:58:44: 58:47}<br/></td></tr><tr><td align="left">_640 = std::result::Result::&lt;RefMut&lt;'_, User&gt;, anchor_lang::error::Error&gt;::map_err::&lt;error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}&gt;(move _641, move _643)</td></tr></table>>];
    bb270__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">270</td></tr><tr><td align="left" balign="left">StorageDead(_643)<br/>StorageDead(_641)<br/></td></tr><tr><td align="left">_639 = &lt;std::result::Result&lt;RefMut&lt;'_, User&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _640)</td></tr></table>>];
    bb271__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">271</td></tr><tr><td align="left" balign="left">StorageDead(_640)<br/>_644 = discriminant(_639)<br/></td></tr><tr><td align="left">switchInt(move _644)</td></tr></table>>];
    bb272__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">272</td></tr><tr><td align="left" balign="left">StorageLive(_648)<br/>_648 = move ((_639 as Continue).0: std::cell::RefMut&lt;'_, state::user::User&gt;)<br/>_638 = move _648<br/>StorageDead(_648)<br/>_636 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::Some(move _638)<br/>StorageDead(_638)<br/>_846 = discriminant(_639)<br/>StorageDead(_639)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb273__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">273</td></tr><tr><td align="left" balign="left">StorageLive(_645)<br/>_645 = ((_639 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_647)<br/>_647 = _645<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _647)</td></tr></table>>];
    bb274__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">274</td></tr><tr><td align="left" balign="left">StorageDead(_647)<br/>StorageDead(_645)<br/>StorageDead(_638)<br/>_844 = discriminant(_639)<br/>StorageDead(_639)<br/>StorageDead(_637)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb275__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">275</td></tr><tr><td align="left" balign="left">_636 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::None<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb276__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">276</td></tr><tr><td align="left" balign="left">StorageDead(_637)<br/>StorageLive(_649)<br/>StorageLive(_650)<br/>StorageLive(_651)<br/>StorageLive(_652)<br/>_652 = &amp;(*_4)<br/></td></tr><tr><td align="left">_651 = SpotMarketMap::&lt;'_&gt;::get_quote_spot_market_mut(move _652)</td></tr></table>>];
    bb277__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">277</td></tr><tr><td align="left" balign="left">StorageDead(_652)<br/></td></tr><tr><td align="left">_650 = &lt;std::result::Result&lt;RefMut&lt;'_, SpotMarket&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _651)</td></tr></table>>];
    bb278__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">278</td></tr><tr><td align="left" balign="left">StorageDead(_651)<br/>_653 = discriminant(_650)<br/></td></tr><tr><td align="left">switchInt(move _653)</td></tr></table>>];
    bb279__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">279</td></tr><tr><td align="left" balign="left">StorageLive(_657)<br/>_657 = move ((_650 as Continue).0: std::cell::RefMut&lt;'_, state::spot_market::SpotMarket&gt;)<br/>_834 = const true<br/>_649 = move _657<br/>StorageDead(_657)<br/>_850 = discriminant(_650)<br/>StorageDead(_650)<br/>StorageLive(_658)<br/>StorageLive(_659)<br/>StorageLive(_660)<br/>StorageLive(_661)<br/>StorageLive(_662)<br/>StorageLive(_663)<br/>_663 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_662 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _663)</td></tr></table>>];
    bb280__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">280</td></tr><tr><td align="left" balign="left">StorageLive(_654)<br/>_654 = ((_650 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_656)<br/>_656 = _654<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _656)</td></tr></table>>];
    bb281__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">281</td></tr><tr><td align="left" balign="left">StorageDead(_656)<br/>StorageDead(_654)<br/>_848 = discriminant(_650)<br/>StorageDead(_650)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb282__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">282</td></tr><tr><td align="left" balign="left">_661 = &amp;mut (*_662)<br/>StorageDead(_663)<br/>StorageLive(_664)<br/>StorageLive(_665)<br/>_665 = &amp;mut _636<br/></td></tr><tr><td align="left">_664 = Option::&lt;RefMut&lt;'_, User&gt;&gt;::as_deref_mut(move _665)</td></tr></table>>];
    bb283__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">283</td></tr><tr><td align="left" balign="left">StorageDead(_665)<br/>StorageLive(_666)<br/>StorageLive(_667)<br/>StorageLive(_668)<br/>StorageLive(_669)<br/>_669 = &amp;mut _649<br/>_668 = &amp;mut (*_669)<br/></td></tr><tr><td align="left">_667 = &lt;RefMut&lt;'_, SpotMarket&gt; as DerefMut&gt;::deref_mut(move _668)</td></tr></table>>];
    bb284__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">284</td></tr><tr><td align="left" balign="left">_666 = &amp;mut (*_667)<br/>StorageDead(_668)<br/>StorageLive(_670)<br/>_670 = (((*_2).6: state::state::FeeStructure).3: u64)<br/>StorageLive(_671)<br/>_671 = _10<br/></td></tr><tr><td align="left">_660 = pay_keeper_flat_reward_for_spot(move _661, move _664, move _666, move _670, move _671)</td></tr></table>>];
    bb285__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">285</td></tr><tr><td align="left" balign="left">StorageDead(_671)<br/>StorageDead(_670)<br/>StorageDead(_666)<br/>StorageDead(_664)<br/>StorageDead(_661)<br/></td></tr><tr><td align="left">_659 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _660)</td></tr></table>>];
    bb286__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">286</td></tr><tr><td align="left" balign="left">StorageDead(_660)<br/>_672 = discriminant(_659)<br/></td></tr><tr><td align="left">switchInt(move _672)</td></tr></table>>];
    bb287__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">287</td></tr><tr><td align="left" balign="left">StorageLive(_676)<br/>_676 = ((_659 as Continue).0: u64)<br/>_658 = _676<br/>StorageDead(_676)<br/>StorageDead(_669)<br/>StorageDead(_667)<br/>StorageDead(_662)<br/>StorageDead(_659)<br/>StorageLive(_677)<br/>StorageLive(_678)<br/>StorageLive(_679)<br/>StorageLive(_680)<br/>_680 = _9<br/>StorageLive(_681)<br/>_681 = OrderAction::Trigger<br/>StorageLive(_682)<br/>_682 = OrderActionExplanation::None<br/>StorageLive(_683)<br/>_683 = _46<br/>StorageLive(_684)<br/>StorageLive(_685)<br/>_685 = _11<br/>_684 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _685)<br/>StorageDead(_685)<br/>StorageLive(_686)<br/>_686 = Option::&lt;u64&gt;::None<br/>StorageLive(_687)<br/>StorageLive(_688)<br/>_688 = _658<br/>_687 = Option::&lt;u64&gt;::Some(move _688)<br/>StorageDead(_688)<br/>StorageLive(_689)<br/>_689 = Option::&lt;u64&gt;::None<br/>StorageLive(_690)<br/>_690 = Option::&lt;u64&gt;::None<br/>StorageLive(_691)<br/>StorageLive(_692)<br/>_692 = _658<br/>_691 = Option::&lt;u64&gt;::Some(move _692)<br/>StorageDead(_692)<br/>StorageLive(_693)<br/>_693 = Option::&lt;u64&gt;::None<br/>StorageLive(_694)<br/>_694 = Option::&lt;u64&gt;::None<br/>StorageLive(_695)<br/>_695 = Option::&lt;i64&gt;::None<br/>StorageLive(_696)<br/>_696 = Option::&lt;u64&gt;::None<br/>StorageLive(_697)<br/>StorageLive(_698)<br/>_698 = _13<br/>_697 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::Some(move _698)<br/>StorageDead(_698)<br/>StorageLive(_699)<br/>StorageLive(_700)<br/>StorageLive(_701)<br/>StorageLive(_702)<br/>_702 = &amp;(*_15)<br/></td></tr><tr><td align="left">_701 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _702)</td></tr></table>>];
    bb288__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">288</td></tr><tr><td align="left" balign="left">StorageLive(_673)<br/>_673 = ((_659 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_675)<br/>_675 = _673<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _675)</td></tr></table>>];
    bb289__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">289</td></tr><tr><td align="left" balign="left">StorageDead(_675)<br/>StorageDead(_673)<br/>StorageDead(_669)<br/>StorageDead(_667)<br/>StorageDead(_662)<br/>StorageDead(_659)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb290__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">290</td></tr><tr><td align="left" balign="left">StorageDead(_702)<br/>StorageLive(_703)<br/>_703 = _27<br/>_704 = Len(((*_701).5: [state::user::Order; 32]))<br/>_705 = Lt(_703, _704)<br/></td></tr><tr><td align="left">assert(move _705, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _704, _703)</td></tr></table>>];
    bb291__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">291</td></tr><tr><td align="left" balign="left">_700 = ((*_701).5: [state::user::Order; 32])[_703]<br/>_699 = Option::&lt;Order&gt;::Some(move _700)<br/>StorageDead(_700)<br/>StorageLive(_706)<br/>_706 = Option::&lt;anchor_lang::prelude::Pubkey&gt;::None<br/>StorageLive(_707)<br/>_707 = Option::&lt;Order&gt;::None<br/>StorageLive(_708)<br/>_708 = _384<br/>StorageLive(_709)<br/>_709 = Option::&lt;u64&gt;::None<br/>StorageLive(_710)<br/>_710 = Option::&lt;u64&gt;::None<br/>StorageLive(_711)<br/>_711 = Option::&lt;u64&gt;::None<br/>StorageLive(_712)<br/>_712 = Option::&lt;u64&gt;::None<br/>StorageLive(_713)<br/>StorageLive(_714)<br/>StorageLive(_715)<br/>_715 = _384<br/></td></tr><tr><td align="left">_714 = core::num::&lt;impl i64&gt;::unsigned_abs(move _715)</td></tr></table>>];
    bb292__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">292</td></tr><tr><td align="left" balign="left">StorageDead(_715)<br/>_713 = Option::&lt;u64&gt;::Some(move _714)<br/>StorageDead(_714)<br/></td></tr><tr><td align="left">_679 = get_order_action_record(move _680, move _681, move _682, move _683, move _684, move _686, move _687, move _689, move _690, move _691, move _693, move _694, move _695, move _696, move _697, move _699, move _706, move _707, move _708, const 0_u8, move _709, move _710, move _711, move _712, move _713)</td></tr></table>>];
    bb293__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">293</td></tr><tr><td align="left" balign="left">StorageDead(_713)<br/>StorageDead(_712)<br/>StorageDead(_711)<br/>StorageDead(_710)<br/>StorageDead(_709)<br/>StorageDead(_708)<br/>StorageDead(_707)<br/>StorageDead(_706)<br/>StorageDead(_699)<br/>StorageDead(_697)<br/>StorageDead(_696)<br/>StorageDead(_695)<br/>StorageDead(_694)<br/>StorageDead(_693)<br/>StorageDead(_691)<br/>StorageDead(_690)<br/>StorageDead(_689)<br/>StorageDead(_687)<br/>StorageDead(_686)<br/>StorageDead(_684)<br/>StorageDead(_683)<br/>StorageDead(_682)<br/>StorageDead(_681)<br/>StorageDead(_680)<br/></td></tr><tr><td align="left">_678 = &lt;std::result::Result&lt;OrderActionRecord, error::ErrorCode&gt; as Try&gt;::branch(move _679)</td></tr></table>>];
    bb294__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">294</td></tr><tr><td align="left" balign="left">StorageDead(_679)<br/>_716 = discriminant(_678)<br/></td></tr><tr><td align="left">switchInt(move _716)</td></tr></table>>];
    bb295__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">295</td></tr><tr><td align="left" balign="left">StorageLive(_720)<br/>_720 = move ((_678 as Continue).0: state::events::OrderActionRecord)<br/>_677 = move _720<br/>StorageDead(_720)<br/>StorageDead(_703)<br/>StorageDead(_701)<br/>StorageDead(_678)<br/>StorageLive(_721)<br/>StorageLive(_722)<br/>StorageLive(_723)<br/>StorageLive(_724)<br/>StorageLive(_725)<br/>StorageLive(_726)<br/>StorageLive(_727)<br/>StorageLive(_728)<br/>StorageLive(_729)<br/>StorageLive(_730)<br/>StorageLive(_731)<br/>StorageLive(_732)<br/>StorageLive(_733)<br/>_733 = &amp;_677<br/>_732 = &amp;(*_733)<br/></td></tr><tr><td align="left">_731 = &lt;OrderActionRecord as anchor_lang::Event&gt;::data(move _732)</td></tr></table>>];
    bb296__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">296</td></tr><tr><td align="left" balign="left">StorageLive(_717)<br/>_717 = ((_678 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_719)<br/>_719 = _717<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _719)</td></tr></table>>];
    bb297__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">297</td></tr><tr><td align="left" balign="left">StorageDead(_719)<br/>StorageDead(_717)<br/>StorageDead(_703)<br/>StorageDead(_701)<br/>StorageDead(_678)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb298__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">298</td></tr><tr><td align="left" balign="left">StorageDead(_732)<br/>_730 = &amp;_731<br/>_729 = &amp;(*_730)<br/></td></tr><tr><td align="left">_728 = &lt;Vec&lt;u8&gt; as Deref&gt;::deref(move _729)</td></tr></table>>];
    bb299__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">299</td></tr><tr><td align="left" balign="left">_727 = &amp;(*_728)<br/>StorageDead(_729)<br/>_726 = [move _727]<br/>StorageDead(_727)<br/>_725 = &amp;_726<br/>_724 = &amp;(*_725)<br/>_723 = move _724 as &amp;[&amp;[u8]] (PointerCoercion(Unsize))<br/>StorageDead(_724)<br/></td></tr><tr><td align="left">_722 = solana_program::log::sol_log_data(move _723)</td></tr></table>>];
    bb300__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">300</td></tr><tr><td align="left" balign="left">StorageDead(_723)<br/></td></tr><tr><td align="left">drop(_731)</td></tr></table>>];
    bb301__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">301</td></tr><tr><td align="left" balign="left">StorageDead(_733)<br/>StorageDead(_731)<br/>StorageDead(_730)<br/>StorageDead(_728)<br/>StorageDead(_726)<br/>StorageDead(_725)<br/>StorageDead(_722)<br/>_721 = const ()<br/>StorageDead(_721)<br/>StorageLive(_734)<br/>StorageLive(_735)<br/>StorageLive(_736)<br/>StorageLive(_737)<br/>StorageLive(_738)<br/>StorageLive(_739)<br/>StorageLive(_740)<br/>StorageLive(_741)<br/>StorageLive(_742)<br/>StorageLive(_743)<br/>_743 = &amp;(*_15)<br/></td></tr><tr><td align="left">_742 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _743)</td></tr></table>>];
    bb302__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">302</td></tr><tr><td align="left" balign="left">_741 = &amp;(*_742)<br/>StorageDead(_743)<br/>StorageLive(_744)<br/>_744 = _46<br/></td></tr><tr><td align="left">_740 = User::get_spot_position(move _741, move _744)</td></tr></table>>];
    bb303__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">303</td></tr><tr><td align="left" balign="left">StorageDead(_744)<br/>StorageDead(_741)<br/></td></tr><tr><td align="left">_739 = &lt;std::result::Result&lt;&amp;SpotPosition, error::ErrorCode&gt; as Try&gt;::branch(move _740)</td></tr></table>>];
    bb304__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">304</td></tr><tr><td align="left" balign="left">StorageDead(_740)<br/>_745 = discriminant(_739)<br/></td></tr><tr><td align="left">switchInt(move _745)</td></tr></table>>];
    bb305__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">305</td></tr><tr><td align="left" balign="left">StorageLive(_749)<br/>_749 = ((_739 as Continue).0: &amp;state::user::SpotPosition)<br/>_738 = _749<br/>StorageDead(_749)<br/>_737 = &amp;(*_738)<br/>StorageLive(_750)<br/>StorageLive(_751)<br/>StorageLive(_752)<br/>StorageLive(_753)<br/>_753 = &amp;_270<br/>_752 = &amp;(*_753)<br/></td></tr><tr><td align="left">_751 = &lt;Ref&lt;'_, SpotMarket&gt; as Deref&gt;::deref(move _752)</td></tr></table>>];
    bb306__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">306</td></tr><tr><td align="left" balign="left">StorageLive(_746)<br/>_746 = ((_739 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_748)<br/>_748 = _746<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _748)</td></tr></table>>];
    bb307__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">307</td></tr><tr><td align="left" balign="left">StorageDead(_748)<br/>StorageDead(_746)<br/>StorageDead(_737)<br/>StorageDead(_736)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb308__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">308</td></tr><tr><td align="left" balign="left">_750 = &amp;(*_751)<br/>StorageDead(_752)<br/>StorageLive(_754)<br/>StorageLive(_755)<br/>_755 = &amp;_316<br/>_754 = &amp;(*_755)<br/>StorageLive(_756)<br/>StorageLive(_757)<br/>_757 = _509<br/>_756 = Option::&lt;i128&gt;::Some(move _757)<br/>StorageDead(_757)<br/>StorageLive(_758)<br/>_758 = math::margin::MarginRequirementType::Initial<br/></td></tr><tr><td align="left">_736 = SpotPosition::get_worst_case_fill_simulation(move _737, move _750, move _754, move _756, move _758)</td></tr></table>>];
    bb309__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">309</td></tr><tr><td align="left" balign="left">StorageDead(_758)<br/>StorageDead(_756)<br/>StorageDead(_754)<br/>StorageDead(_750)<br/>StorageDead(_737)<br/></td></tr><tr><td align="left">_735 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as Try&gt;::branch(move _736)</td></tr></table>>];
    bb310__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">310</td></tr><tr><td align="left" balign="left">StorageDead(_736)<br/>_759 = discriminant(_735)<br/></td></tr><tr><td align="left">switchInt(move _759)</td></tr></table>>];
    bb311__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">311</td></tr><tr><td align="left" balign="left">StorageLive(_763)<br/>_763 = ((_735 as Continue).0: state::user::OrderFillSimulation)<br/>_734 = _763<br/>StorageDead(_763)<br/>StorageDead(_755)<br/>StorageDead(_753)<br/>StorageDead(_751)<br/>StorageDead(_742)<br/>StorageDead(_739)<br/>StorageDead(_738)<br/>StorageDead(_735)<br/>StorageLive(_764)<br/>StorageLive(_765)<br/>_835 = const false<br/>_765 = move _270<br/></td></tr><tr><td align="left">_764 = std::mem::drop::&lt;Ref&lt;'_, SpotMarket&gt;&gt;(move _765)</td></tr></table>>];
    bb312__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">312</td></tr><tr><td align="left" balign="left">StorageLive(_760)<br/>_760 = ((_735 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_762)<br/>_762 = _760<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _762)</td></tr></table>>];
    bb313__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">313</td></tr><tr><td align="left" balign="left">StorageDead(_762)<br/>StorageDead(_760)<br/>StorageDead(_755)<br/>StorageDead(_753)<br/>StorageDead(_751)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb314__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">314</td></tr><tr><td align="left" balign="left">StorageDead(_765)<br/>StorageDead(_764)<br/>StorageLive(_766)<br/>StorageLive(_767)<br/>_834 = const false<br/>_767 = move _649<br/></td></tr><tr><td align="left">_766 = std::mem::drop::&lt;RefMut&lt;'_, SpotMarket&gt;&gt;(move _767)</td></tr></table>>];
    bb315__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">315</td></tr><tr><td align="left" balign="left">StorageDead(_767)<br/>StorageDead(_766)<br/>StorageLive(_768)<br/>StorageLive(_769)<br/>_769 = &amp;_527<br/>StorageLive(_770)<br/>_770 = _734<br/></td></tr><tr><td align="left">_768 = OrderFillSimulation::risk_increasing(move _769, move _770)</td></tr></table>>];
    bb316__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">316</td></tr><tr><td align="left" balign="left">StorageDead(_770)<br/>StorageDead(_769)<br/>StorageLive(_771)<br/>StorageLive(_772)<br/>_772 = _768<br/></td></tr><tr><td align="left">switchInt(move _772)</td></tr></table>>];
    bb317__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">317</td></tr><tr><td align="left" balign="left">StorageLive(_773)<br/>StorageLive(_774)<br/>StorageLive(_775)<br/>_775 = &amp;(*_15)<br/></td></tr><tr><td align="left">_774 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _775)</td></tr></table>>];
    bb318__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">318</td></tr><tr><td align="left" balign="left">StorageDead(_775)<br/>StorageLive(_776)<br/>_776 = _27<br/>_777 = Len(((*_774).5: [state::user::Order; 32]))<br/>_778 = Lt(_776, _777)<br/></td></tr><tr><td align="left">assert(move _778, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _777, _776)</td></tr></table>>];
    bb319__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">319</td></tr><tr><td align="left" balign="left">_773 = (((*_774).5: [state::user::Order; 32])[_776].18: bool)<br/></td></tr><tr><td align="left">switchInt(move _773)</td></tr></table>>];
    bb320__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">320</td></tr><tr><td align="left" balign="left">StorageDead(_776)<br/>StorageDead(_774)<br/>StorageLive(_779)<br/>StorageLive(_780)<br/>StorageLive(_781)<br/>StorageLive(_782)<br/>StorageLive(_783)<br/>StorageLive(_784)<br/>_784 = &amp;(*_15)<br/></td></tr><tr><td align="left">_783 = &lt;RefMut&lt;'_, User&gt; as Deref&gt;::deref(move _784)</td></tr></table>>];
    bb321__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">321</td></tr><tr><td align="left" balign="left">_782 = &amp;(*_783)<br/>StorageDead(_784)<br/>StorageLive(_785)<br/>_785 = &amp;(*_5)<br/>StorageLive(_786)<br/>_786 = &amp;(*_4)<br/>StorageLive(_787)<br/>_787 = &amp;mut (*_6)<br/></td></tr><tr><td align="left">_781 = math::margin::meets_initial_margin_requirement(move _782, move _785, move _786, move _787)</td></tr></table>>];
    bb322__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">322</td></tr><tr><td align="left" balign="left">StorageDead(_787)<br/>StorageDead(_786)<br/>StorageDead(_785)<br/>StorageDead(_782)<br/></td></tr><tr><td align="left">_780 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _781)</td></tr></table>>];
    bb323__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">323</td></tr><tr><td align="left" balign="left">StorageDead(_781)<br/>_788 = discriminant(_780)<br/></td></tr><tr><td align="left">switchInt(move _788)</td></tr></table>>];
    bb324__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">324</td></tr><tr><td align="left" balign="left">StorageLive(_792)<br/>_792 = ((_780 as Continue).0: bool)<br/>_779 = _792<br/>StorageDead(_792)<br/>StorageDead(_783)<br/>StorageDead(_780)<br/>StorageLive(_793)<br/>_793 = _779<br/></td></tr><tr><td align="left">switchInt(move _793)</td></tr></table>>];
    bb325__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">325</td></tr><tr><td align="left" balign="left">StorageLive(_789)<br/>_789 = ((_780 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_791)<br/>_791 = _789<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _791)</td></tr></table>>];
    bb326__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">326</td></tr><tr><td align="left" balign="left">StorageDead(_791)<br/>StorageDead(_789)<br/>StorageDead(_783)<br/>StorageDead(_780)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb327__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">327</td></tr><tr><td align="left" balign="left">_771 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb328__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">328</td></tr><tr><td align="left" balign="left">StorageLive(_794)<br/>StorageLive(_795)<br/>StorageLive(_796)<br/>StorageLive(_797)<br/>_797 = _27<br/>StorageLive(_798)<br/>StorageLive(_799)<br/>StorageLive(_800)<br/>_800 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_799 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _800)</td></tr></table>>];
    bb329__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">329</td></tr><tr><td align="left" balign="left">_798 = &amp;mut (*_799)<br/>StorageDead(_800)<br/>StorageLive(_801)<br/>StorageLive(_802)<br/>_802 = &amp;_13<br/>_801 = &amp;(*_802)<br/>StorageLive(_803)<br/>_803 = &amp;(*_5)<br/>StorageLive(_804)<br/>_804 = &amp;(*_4)<br/>StorageLive(_805)<br/>_805 = &amp;mut (*_6)<br/>StorageLive(_806)<br/>_806 = _9<br/>StorageLive(_807)<br/>_807 = _10<br/>StorageLive(_808)<br/>_808 = OrderActionExplanation::InsufficientFreeCollateral<br/>StorageLive(_809)<br/>StorageLive(_810)<br/>StorageLive(_811)<br/>_811 = &amp;_11<br/>_810 = &amp;(*_811)<br/>_809 = Option::&lt;&amp;anchor_lang::prelude::Pubkey&gt;::Some(move _810)<br/>StorageDead(_810)<br/></td></tr><tr><td align="left">_796 = controller::orders::cancel_order(move _797, move _798, move _801, move _803, move _804, move _805, move _806, move _807, move _808, move _809, const 0_u64, const false)</td></tr></table>>];
    bb330__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">330</td></tr><tr><td align="left" balign="left">StorageDead(_809)<br/>StorageDead(_808)<br/>StorageDead(_807)<br/>StorageDead(_806)<br/>StorageDead(_805)<br/>StorageDead(_804)<br/>StorageDead(_803)<br/>StorageDead(_801)<br/>StorageDead(_798)<br/>StorageDead(_797)<br/></td></tr><tr><td align="left">_795 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _796)</td></tr></table>>];
    bb331__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">331</td></tr><tr><td align="left" balign="left">StorageDead(_796)<br/>_812 = discriminant(_795)<br/></td></tr><tr><td align="left">switchInt(move _812)</td></tr></table>>];
    bb332__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">332</td></tr><tr><td align="left" balign="left">StorageLive(_816)<br/>_816 = ((_795 as Continue).0: ())<br/>_794 = _816<br/>StorageDead(_816)<br/>StorageDead(_811)<br/>StorageDead(_802)<br/>StorageDead(_799)<br/>StorageDead(_795)<br/>StorageDead(_794)<br/>_771 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb333__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">333</td></tr><tr><td align="left" balign="left">StorageLive(_813)<br/>_813 = ((_795 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_815)<br/>_815 = _813<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _815)</td></tr></table>>];
    bb334__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">334</td></tr><tr><td align="left" balign="left">StorageDead(_815)<br/>StorageDead(_813)<br/>StorageDead(_811)<br/>StorageDead(_802)<br/>StorageDead(_799)<br/>StorageDead(_795)<br/>StorageDead(_794)<br/>StorageDead(_793)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb335__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">335</td></tr><tr><td align="left" balign="left">StorageDead(_793)<br/>StorageDead(_779)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb336__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">336</td></tr><tr><td align="left" balign="left">StorageDead(_776)<br/>StorageDead(_774)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb337__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">337</td></tr><tr><td align="left" balign="left">_771 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb338__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">338</td></tr><tr><td align="left" balign="left">StorageDead(_773)<br/>StorageDead(_772)<br/>StorageDead(_771)<br/>StorageLive(_817)<br/>StorageLive(_818)<br/>StorageLive(_819)<br/>StorageLive(_820)<br/>_820 = &amp;mut (*_15)<br/></td></tr><tr><td align="left">_819 = &lt;RefMut&lt;'_, User&gt; as DerefMut&gt;::deref_mut(move _820)</td></tr></table>>];
    bb339__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">339</td></tr><tr><td align="left" balign="left">_818 = &amp;mut (*_819)<br/>StorageDead(_820)<br/>StorageLive(_821)<br/>_821 = _10<br/></td></tr><tr><td align="left">_817 = User::update_last_active_slot(move _818, move _821)</td></tr></table>>];
    bb340__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">340</td></tr><tr><td align="left" balign="left">StorageDead(_821)<br/>StorageDead(_818)<br/>StorageDead(_819)<br/>StorageDead(_817)<br/>StorageLive(_822)<br/>_822 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _822)<br/>StorageDead(_822)<br/>StorageDead(_768)<br/>StorageDead(_734)<br/>StorageDead(_677)<br/>StorageDead(_658)<br/>_834 = const false<br/>StorageDead(_649)<br/></td></tr><tr><td align="left">drop(_636)</td></tr></table>>];
    bb341__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">341</td></tr><tr><td align="left" balign="left">StorageDead(_636)<br/>StorageDead(_633)<br/>StorageDead(_527)<br/>StorageDead(_509)<br/>StorageDead(_497)<br/>StorageDead(_441)<br/>StorageDead(_385)<br/>StorageDead(_384)<br/>StorageDead(_316)<br/>StorageDead(_282)<br/>StorageDead(_281)<br/>_835 = const false<br/>StorageDead(_270)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">drop(_16)</td></tr></table>>];
    bb342__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">342</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb343__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">343</td></tr><tr><td align="left" balign="left">StorageDead(_779)<br/>StorageDead(_773)<br/>StorageDead(_772)<br/>StorageDead(_771)<br/>StorageDead(_768)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb344__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">344</td></tr><tr><td align="left" balign="left">StorageDead(_742)<br/>StorageDead(_739)<br/>StorageDead(_738)<br/>StorageDead(_735)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb345__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">345</td></tr><tr><td align="left" balign="left">StorageDead(_734)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb346__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">346</td></tr><tr><td align="left" balign="left">StorageDead(_677)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb347__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">347</td></tr><tr><td align="left" balign="left">StorageDead(_658)<br/></td></tr><tr><td align="left">switchInt(_834)</td></tr></table>>];
    bb348__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">348</td></tr><tr><td align="left" balign="left">_834 = const false<br/>StorageDead(_649)<br/></td></tr><tr><td align="left">drop(_636)</td></tr></table>>];
    bb349__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">349</td></tr><tr><td align="left" balign="left">StorageDead(_636)<br/>StorageDead(_633)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb350__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">350</td></tr><tr><td align="left" balign="left">StorageDead(_619)<br/>StorageDead(_617)<br/>StorageDead(_613)<br/>StorageDead(_612)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb351__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">351</td></tr><tr><td align="left" balign="left">StorageDead(_600)<br/>StorageDead(_593)<br/>StorageDead(_587)<br/>StorageDead(_581)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb352__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">352</td></tr><tr><td align="left" balign="left">StorageDead(_550)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb353__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">353</td></tr><tr><td align="left" balign="left">StorageDead(_527)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb354__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">354</td></tr><tr><td align="left" balign="left">StorageDead(_509)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb355__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">355</td></tr><tr><td align="left" balign="left">StorageDead(_497)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb356__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">356</td></tr><tr><td align="left" balign="left">StorageDead(_452)<br/>StorageDead(_448)<br/>StorageDead(_446)<br/>StorageDead(_445)<br/>StorageDead(_442)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb357__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">357</td></tr><tr><td align="left" balign="left">StorageDead(_441)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb358__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">358</td></tr><tr><td align="left" balign="left">StorageDead(_393)<br/>StorageDead(_390)<br/>StorageDead(_386)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb359__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">359</td></tr><tr><td align="left" balign="left">StorageDead(_385)<br/>StorageDead(_384)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb360__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">360</td></tr><tr><td align="left" balign="left">StorageDead(_323)<br/>StorageDead(_322)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb361__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">361</td></tr><tr><td align="left" balign="left">StorageDead(_316)<br/>StorageDead(_282)<br/>StorageDead(_281)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb362__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">362</td></tr><tr><td align="left" balign="left">StorageDead(_304)<br/>StorageDead(_301)<br/>StorageDead(_298)<br/>StorageDead(_295)<br/>StorageDead(_293)<br/>StorageDead(_292)<br/>StorageDead(_289)<br/>StorageDead(_284)<br/>StorageDead(_283)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb363__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">363</td></tr><tr><td align="left" balign="left">_835 = const false<br/>StorageDead(_270)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb364__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">364</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb365__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">365</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/></td></tr><tr><td align="left">drop(_16)</td></tr></table>>];
    bb366__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">366</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb367__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">367</td></tr><tr><td align="left">return</td></tr></table>>];
    bb368__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">368 (cleanup)</td></tr><tr><td align="left">drop(_731)</td></tr></table>>];
    bb369__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">369 (cleanup)</td></tr><tr><td align="left">drop(_636)</td></tr></table>>];
    bb370__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">370 (cleanup)</td></tr><tr><td align="left">drop(_477)</td></tr></table>>];
    bb371__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">371 (cleanup)</td></tr><tr><td align="left">drop(_418)</td></tr></table>>];
    bb372__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">372 (cleanup)</td></tr><tr><td align="left">drop(_362)</td></tr></table>>];
    bb373__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">373 (cleanup)</td></tr><tr><td align="left">drop(_343)</td></tr></table>>];
    bb374__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">374 (cleanup)</td></tr><tr><td align="left">drop(_250)</td></tr></table>>];
    bb375__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">375 (cleanup)</td></tr><tr><td align="left">drop(_198)</td></tr></table>>];
    bb376__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">376 (cleanup)</td></tr><tr><td align="left">drop(_161)</td></tr></table>>];
    bb377__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">377 (cleanup)</td></tr><tr><td align="left">drop(_121)</td></tr></table>>];
    bb378__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">378 (cleanup)</td></tr><tr><td align="left">drop(_81)</td></tr></table>>];
    bb379__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">379 (cleanup)</td></tr><tr><td align="left">drop(_16)</td></tr></table>>];
    bb380__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">380 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb381__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">381</td></tr><tr><td align="left">drop(_649)</td></tr></table>>];
    bb382__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">382</td></tr><tr><td align="left">drop(_270)</td></tr></table>>];
    bb383__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">383</td></tr><tr><td align="left">switchInt(_835)</td></tr></table>>];
    bb384__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">384 (cleanup)</td></tr><tr><td align="left">drop(_649)</td></tr></table>>];
    bb385__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">385 (cleanup)</td></tr><tr><td align="left">switchInt(_834)</td></tr></table>>];
    bb386__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">386 (cleanup)</td></tr><tr><td align="left" balign="left">_852 = discriminant(_650)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb387__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">387 (cleanup)</td></tr><tr><td align="left" balign="left">_853 = discriminant(_639)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb388__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">388 (cleanup)</td></tr><tr><td align="left">drop(_270)</td></tr></table>>];
    bb389__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">389 (cleanup)</td></tr><tr><td align="left">switchInt(_835)</td></tr></table>>];
    bb390__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">390 (cleanup)</td></tr><tr><td align="left" balign="left">_854 = discriminant(_271)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb391__0_567 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">391 (cleanup)</td></tr><tr><td align="left" balign="left">_855 = discriminant(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_567 -> bb1__0_567 [label="return"];
    bb1__0_567 -> bb2__0_567 [label="return"];
    bb2__0_567 -> bb3__0_567 [label="return"];
    bb3__0_567 -> bb4__0_567 [label="return"];
    bb3__0_567 -> bb380__0_567 [label="unwind"];
    bb4__0_567 -> bb5__0_567 [label="return"];
    bb4__0_567 -> bb380__0_567 [label="unwind"];
    bb5__0_567 -> bb6__0_567 [label="0"];
    bb5__0_567 -> bb8__0_567 [label="1"];
    bb5__0_567 -> bb7__0_567 [label="otherwise"];
    bb6__0_567 -> bb10__0_567 [label="return"];
    bb6__0_567 -> bb379__0_567 [label="unwind"];
    bb8__0_567 -> bb9__0_567 [label="return"];
    bb8__0_567 -> bb391__0_567 [label="unwind"];
    bb9__0_567 -> bb366__0_567 [label=""];
    bb10__0_567 -> bb11__0_567 [label="return"];
    bb10__0_567 -> bb379__0_567 [label="unwind"];
    bb11__0_567 -> bb12__0_567 [label="return"];
    bb11__0_567 -> bb379__0_567 [label="unwind"];
    bb12__0_567 -> bb13__0_567 [label="return"];
    bb12__0_567 -> bb379__0_567 [label="unwind"];
    bb13__0_567 -> bb14__0_567 [label="return"];
    bb13__0_567 -> bb379__0_567 [label="unwind"];
    bb14__0_567 -> bb15__0_567 [label="0"];
    bb14__0_567 -> bb16__0_567 [label="1"];
    bb14__0_567 -> bb7__0_567 [label="otherwise"];
    bb15__0_567 -> bb18__0_567 [label="return"];
    bb15__0_567 -> bb379__0_567 [label="unwind"];
    bb16__0_567 -> bb17__0_567 [label="return"];
    bb16__0_567 -> bb379__0_567 [label="unwind"];
    bb17__0_567 -> bb365__0_567 [label=""];
    bb18__0_567 -> bb19__0_567 [label="success"];
    bb18__0_567 -> bb379__0_567 [label="unwind"];
    bb19__0_567 -> bb20__0_567 [label="return"];
    bb19__0_567 -> bb379__0_567 [label="unwind"];
    bb20__0_567 -> bb21__0_567 [label="success"];
    bb20__0_567 -> bb379__0_567 [label="unwind"];
    bb21__0_567 -> bb22__0_567 [label="return"];
    bb21__0_567 -> bb379__0_567 [label="unwind"];
    bb22__0_567 -> bb23__0_567 [label="success"];
    bb22__0_567 -> bb379__0_567 [label="unwind"];
    bb23__0_567 -> bb24__0_567 [label="return"];
    bb23__0_567 -> bb379__0_567 [label="unwind"];
    bb24__0_567 -> bb26__0_567 [label="0"];
    bb24__0_567 -> bb25__0_567 [label="otherwise"];
    bb25__0_567 -> bb34__0_567 [label=""];
    bb26__0_567 -> bb27__0_567 [label="return"];
    bb26__0_567 -> bb379__0_567 [label="unwind"];
    bb27__0_567 -> bb28__0_567 [label="return"];
    bb27__0_567 -> bb379__0_567 [label="unwind"];
    bb28__0_567 -> bb29__0_567 [label="return"];
    bb28__0_567 -> bb379__0_567 [label="unwind"];
    bb29__0_567 -> bb30__0_567 [label="return"];
    bb29__0_567 -> bb378__0_567 [label="unwind"];
    bb30__0_567 -> bb31__0_567 [label="return"];
    bb30__0_567 -> bb378__0_567 [label="unwind"];
    bb31__0_567 -> bb32__0_567 [label="return"];
    bb31__0_567 -> bb379__0_567 [label="unwind"];
    bb32__0_567 -> bb33__0_567 [label="return"];
    bb32__0_567 -> bb379__0_567 [label="unwind"];
    bb33__0_567 -> bb34__0_567 [label=""];
    bb34__0_567 -> bb35__0_567 [label="return"];
    bb34__0_567 -> bb379__0_567 [label="unwind"];
    bb35__0_567 -> bb36__0_567 [label="0"];
    bb35__0_567 -> bb37__0_567 [label="1"];
    bb35__0_567 -> bb7__0_567 [label="otherwise"];
    bb36__0_567 -> bb39__0_567 [label="return"];
    bb36__0_567 -> bb379__0_567 [label="unwind"];
    bb37__0_567 -> bb38__0_567 [label="return"];
    bb37__0_567 -> bb379__0_567 [label="unwind"];
    bb38__0_567 -> bb364__0_567 [label=""];
    bb39__0_567 -> bb40__0_567 [label="success"];
    bb39__0_567 -> bb379__0_567 [label="unwind"];
    bb40__0_567 -> bb41__0_567 [label="return"];
    bb40__0_567 -> bb379__0_567 [label="unwind"];
    bb41__0_567 -> bb43__0_567 [label="0"];
    bb41__0_567 -> bb42__0_567 [label="otherwise"];
    bb42__0_567 -> bb51__0_567 [label=""];
    bb43__0_567 -> bb44__0_567 [label="return"];
    bb43__0_567 -> bb379__0_567 [label="unwind"];
    bb44__0_567 -> bb45__0_567 [label="return"];
    bb44__0_567 -> bb379__0_567 [label="unwind"];
    bb45__0_567 -> bb46__0_567 [label="return"];
    bb45__0_567 -> bb379__0_567 [label="unwind"];
    bb46__0_567 -> bb47__0_567 [label="return"];
    bb46__0_567 -> bb377__0_567 [label="unwind"];
    bb47__0_567 -> bb48__0_567 [label="return"];
    bb47__0_567 -> bb377__0_567 [label="unwind"];
    bb48__0_567 -> bb49__0_567 [label="return"];
    bb48__0_567 -> bb379__0_567 [label="unwind"];
    bb49__0_567 -> bb50__0_567 [label="return"];
    bb49__0_567 -> bb379__0_567 [label="unwind"];
    bb50__0_567 -> bb51__0_567 [label=""];
    bb51__0_567 -> bb52__0_567 [label="return"];
    bb51__0_567 -> bb379__0_567 [label="unwind"];
    bb52__0_567 -> bb53__0_567 [label="0"];
    bb52__0_567 -> bb54__0_567 [label="1"];
    bb52__0_567 -> bb7__0_567 [label="otherwise"];
    bb53__0_567 -> bb56__0_567 [label="return"];
    bb53__0_567 -> bb379__0_567 [label="unwind"];
    bb54__0_567 -> bb55__0_567 [label="return"];
    bb54__0_567 -> bb379__0_567 [label="unwind"];
    bb55__0_567 -> bb364__0_567 [label=""];
    bb56__0_567 -> bb57__0_567 [label="success"];
    bb56__0_567 -> bb379__0_567 [label="unwind"];
    bb57__0_567 -> bb58__0_567 [label="return"];
    bb57__0_567 -> bb379__0_567 [label="unwind"];
    bb58__0_567 -> bb60__0_567 [label="0"];
    bb58__0_567 -> bb59__0_567 [label="otherwise"];
    bb59__0_567 -> bb61__0_567 [label="return"];
    bb59__0_567 -> bb379__0_567 [label="unwind"];
    bb60__0_567 -> bb68__0_567 [label=""];
    bb61__0_567 -> bb62__0_567 [label="return"];
    bb61__0_567 -> bb379__0_567 [label="unwind"];
    bb62__0_567 -> bb63__0_567 [label="return"];
    bb62__0_567 -> bb379__0_567 [label="unwind"];
    bb63__0_567 -> bb64__0_567 [label="return"];
    bb63__0_567 -> bb376__0_567 [label="unwind"];
    bb64__0_567 -> bb65__0_567 [label="return"];
    bb64__0_567 -> bb376__0_567 [label="unwind"];
    bb65__0_567 -> bb66__0_567 [label="return"];
    bb65__0_567 -> bb379__0_567 [label="unwind"];
    bb66__0_567 -> bb67__0_567 [label="return"];
    bb66__0_567 -> bb379__0_567 [label="unwind"];
    bb67__0_567 -> bb68__0_567 [label=""];
    bb68__0_567 -> bb69__0_567 [label="return"];
    bb68__0_567 -> bb379__0_567 [label="unwind"];
    bb69__0_567 -> bb70__0_567 [label="0"];
    bb69__0_567 -> bb71__0_567 [label="1"];
    bb69__0_567 -> bb7__0_567 [label="otherwise"];
    bb70__0_567 -> bb73__0_567 [label="return"];
    bb70__0_567 -> bb379__0_567 [label="unwind"];
    bb71__0_567 -> bb72__0_567 [label="return"];
    bb71__0_567 -> bb379__0_567 [label="unwind"];
    bb72__0_567 -> bb364__0_567 [label=""];
    bb73__0_567 -> bb75__0_567 [label="0"];
    bb73__0_567 -> bb74__0_567 [label="otherwise"];
    bb74__0_567 -> bb83__0_567 [label=""];
    bb75__0_567 -> bb76__0_567 [label="return"];
    bb75__0_567 -> bb379__0_567 [label="unwind"];
    bb76__0_567 -> bb77__0_567 [label="return"];
    bb76__0_567 -> bb379__0_567 [label="unwind"];
    bb77__0_567 -> bb78__0_567 [label="return"];
    bb77__0_567 -> bb379__0_567 [label="unwind"];
    bb78__0_567 -> bb79__0_567 [label="return"];
    bb78__0_567 -> bb375__0_567 [label="unwind"];
    bb79__0_567 -> bb80__0_567 [label="return"];
    bb79__0_567 -> bb375__0_567 [label="unwind"];
    bb80__0_567 -> bb81__0_567 [label="return"];
    bb80__0_567 -> bb379__0_567 [label="unwind"];
    bb81__0_567 -> bb82__0_567 [label="return"];
    bb81__0_567 -> bb379__0_567 [label="unwind"];
    bb82__0_567 -> bb83__0_567 [label=""];
    bb83__0_567 -> bb84__0_567 [label="return"];
    bb83__0_567 -> bb379__0_567 [label="unwind"];
    bb84__0_567 -> bb85__0_567 [label="0"];
    bb84__0_567 -> bb86__0_567 [label="1"];
    bb84__0_567 -> bb7__0_567 [label="otherwise"];
    bb85__0_567 -> bb88__0_567 [label="return"];
    bb85__0_567 -> bb379__0_567 [label="unwind"];
    bb86__0_567 -> bb87__0_567 [label="return"];
    bb86__0_567 -> bb379__0_567 [label="unwind"];
    bb87__0_567 -> bb364__0_567 [label=""];
    bb88__0_567 -> bb89__0_567 [label="return"];
    bb88__0_567 -> bb379__0_567 [label="unwind"];
    bb89__0_567 -> bb90__0_567 [label="return"];
    bb89__0_567 -> bb379__0_567 [label="unwind"];
    bb90__0_567 -> bb91__0_567 [label="0"];
    bb90__0_567 -> bb92__0_567 [label="1"];
    bb90__0_567 -> bb7__0_567 [label="otherwise"];
    bb91__0_567 -> bb94__0_567 [label="return"];
    bb91__0_567 -> bb379__0_567 [label="unwind"];
    bb92__0_567 -> bb93__0_567 [label="return"];
    bb92__0_567 -> bb379__0_567 [label="unwind"];
    bb93__0_567 -> bb364__0_567 [label=""];
    bb94__0_567 -> bb95__0_567 [label="return"];
    bb94__0_567 -> bb379__0_567 [label="unwind"];
    bb95__0_567 -> bb97__0_567 [label="0"];
    bb95__0_567 -> bb96__0_567 [label="otherwise"];
    bb96__0_567 -> bb98__0_567 [label="return"];
    bb96__0_567 -> bb379__0_567 [label="unwind"];
    bb97__0_567 -> bb104__0_567 [label=""];
    bb98__0_567 -> bb99__0_567 [label="return"];
    bb98__0_567 -> bb379__0_567 [label="unwind"];
    bb99__0_567 -> bb100__0_567 [label="return"];
    bb99__0_567 -> bb379__0_567 [label="unwind"];
    bb100__0_567 -> bb101__0_567 [label="return"];
    bb100__0_567 -> bb374__0_567 [label="unwind"];
    bb101__0_567 -> bb102__0_567 [label="return"];
    bb101__0_567 -> bb374__0_567 [label="unwind"];
    bb102__0_567 -> bb103__0_567 [label="return"];
    bb102__0_567 -> bb379__0_567 [label="unwind"];
    bb103__0_567 -> bb104__0_567 [label=""];
    bb104__0_567 -> bb105__0_567 [label="return"];
    bb104__0_567 -> bb379__0_567 [label="unwind"];
    bb105__0_567 -> bb106__0_567 [label="0"];
    bb105__0_567 -> bb107__0_567 [label="1"];
    bb105__0_567 -> bb7__0_567 [label="otherwise"];
    bb106__0_567 -> bb109__0_567 [label="return"];
    bb106__0_567 -> bb379__0_567 [label="unwind"];
    bb107__0_567 -> bb108__0_567 [label="return"];
    bb107__0_567 -> bb379__0_567 [label="unwind"];
    bb108__0_567 -> bb364__0_567 [label=""];
    bb109__0_567 -> bb110__0_567 [label="return"];
    bb109__0_567 -> bb379__0_567 [label="unwind"];
    bb110__0_567 -> bb111__0_567 [label="0"];
    bb110__0_567 -> bb112__0_567 [label="1"];
    bb110__0_567 -> bb7__0_567 [label="otherwise"];
    bb111__0_567 -> bb114__0_567 [label="return"];
    bb111__0_567 -> bb389__0_567 [label="unwind"];
    bb112__0_567 -> bb113__0_567 [label="return"];
    bb112__0_567 -> bb390__0_567 [label="unwind"];
    bb113__0_567 -> bb363__0_567 [label=""];
    bb114__0_567 -> bb115__0_567 [label="return"];
    bb114__0_567 -> bb389__0_567 [label="unwind"];
    bb115__0_567 -> bb116__0_567 [label="return"];
    bb115__0_567 -> bb389__0_567 [label="unwind"];
    bb116__0_567 -> bb117__0_567 [label="return"];
    bb116__0_567 -> bb389__0_567 [label="unwind"];
    bb117__0_567 -> bb118__0_567 [label="return"];
    bb117__0_567 -> bb389__0_567 [label="unwind"];
    bb118__0_567 -> bb119__0_567 [label="return"];
    bb118__0_567 -> bb389__0_567 [label="unwind"];
    bb119__0_567 -> bb120__0_567 [label="return"];
    bb119__0_567 -> bb389__0_567 [label="unwind"];
    bb120__0_567 -> bb121__0_567 [label="0"];
    bb120__0_567 -> bb122__0_567 [label="1"];
    bb120__0_567 -> bb7__0_567 [label="otherwise"];
    bb121__0_567 -> bb124__0_567 [label="return"];
    bb121__0_567 -> bb389__0_567 [label="unwind"];
    bb122__0_567 -> bb123__0_567 [label="return"];
    bb122__0_567 -> bb389__0_567 [label="unwind"];
    bb123__0_567 -> bb362__0_567 [label=""];
    bb124__0_567 -> bb125__0_567 [label="return"];
    bb124__0_567 -> bb389__0_567 [label="unwind"];
    bb125__0_567 -> bb126__0_567 [label="0"];
    bb125__0_567 -> bb127__0_567 [label="1"];
    bb125__0_567 -> bb7__0_567 [label="otherwise"];
    bb126__0_567 -> bb129__0_567 [label="return"];
    bb126__0_567 -> bb389__0_567 [label="unwind"];
    bb127__0_567 -> bb128__0_567 [label="return"];
    bb127__0_567 -> bb389__0_567 [label="unwind"];
    bb128__0_567 -> bb362__0_567 [label=""];
    bb129__0_567 -> bb130__0_567 [label="return"];
    bb129__0_567 -> bb389__0_567 [label="unwind"];
    bb130__0_567 -> bb131__0_567 [label="return"];
    bb130__0_567 -> bb389__0_567 [label="unwind"];
    bb131__0_567 -> bb132__0_567 [label="0"];
    bb131__0_567 -> bb133__0_567 [label="1"];
    bb131__0_567 -> bb7__0_567 [label="otherwise"];
    bb132__0_567 -> bb136__0_567 [label="0"];
    bb132__0_567 -> bb135__0_567 [label="otherwise"];
    bb133__0_567 -> bb134__0_567 [label="return"];
    bb133__0_567 -> bb389__0_567 [label="unwind"];
    bb134__0_567 -> bb360__0_567 [label=""];
    bb135__0_567 -> bb150__0_567 [label=""];
    bb136__0_567 -> bb137__0_567 [label="return"];
    bb136__0_567 -> bb389__0_567 [label="unwind"];
    bb137__0_567 -> bb138__0_567 [label="return"];
    bb137__0_567 -> bb389__0_567 [label="unwind"];
    bb138__0_567 -> bb139__0_567 [label="return"];
    bb138__0_567 -> bb389__0_567 [label="unwind"];
    bb139__0_567 -> bb140__0_567 [label="return"];
    bb139__0_567 -> bb373__0_567 [label="unwind"];
    bb140__0_567 -> bb141__0_567 [label="return"];
    bb140__0_567 -> bb373__0_567 [label="unwind"];
    bb141__0_567 -> bb142__0_567 [label="return"];
    bb141__0_567 -> bb389__0_567 [label="unwind"];
    bb142__0_567 -> bb143__0_567 [label="return"];
    bb142__0_567 -> bb389__0_567 [label="unwind"];
    bb143__0_567 -> bb144__0_567 [label="return"];
    bb143__0_567 -> bb389__0_567 [label="unwind"];
    bb144__0_567 -> bb145__0_567 [label="return"];
    bb144__0_567 -> bb389__0_567 [label="unwind"];
    bb145__0_567 -> bb146__0_567 [label="return"];
    bb145__0_567 -> bb389__0_567 [label="unwind"];
    bb146__0_567 -> bb147__0_567 [label="return"];
    bb146__0_567 -> bb372__0_567 [label="unwind"];
    bb147__0_567 -> bb148__0_567 [label="return"];
    bb147__0_567 -> bb372__0_567 [label="unwind"];
    bb148__0_567 -> bb149__0_567 [label="return"];
    bb148__0_567 -> bb389__0_567 [label="unwind"];
    bb149__0_567 -> bb150__0_567 [label=""];
    bb150__0_567 -> bb151__0_567 [label="return"];
    bb150__0_567 -> bb389__0_567 [label="unwind"];
    bb151__0_567 -> bb152__0_567 [label="0"];
    bb151__0_567 -> bb153__0_567 [label="1"];
    bb151__0_567 -> bb7__0_567 [label="otherwise"];
    bb152__0_567 -> bb155__0_567 [label="return"];
    bb152__0_567 -> bb389__0_567 [label="unwind"];
    bb153__0_567 -> bb154__0_567 [label="return"];
    bb153__0_567 -> bb389__0_567 [label="unwind"];
    bb154__0_567 -> bb360__0_567 [label=""];
    bb155__0_567 -> bb156__0_567 [label="return"];
    bb155__0_567 -> bb389__0_567 [label="unwind"];
    bb156__0_567 -> bb157__0_567 [label="return"];
    bb156__0_567 -> bb389__0_567 [label="unwind"];
    bb157__0_567 -> bb158__0_567 [label="return"];
    bb157__0_567 -> bb389__0_567 [label="unwind"];
    bb158__0_567 -> bb159__0_567 [label="0"];
    bb158__0_567 -> bb160__0_567 [label="1"];
    bb158__0_567 -> bb7__0_567 [label="otherwise"];
    bb159__0_567 -> bb162__0_567 [label="return"];
    bb159__0_567 -> bb389__0_567 [label="unwind"];
    bb160__0_567 -> bb161__0_567 [label="return"];
    bb160__0_567 -> bb389__0_567 [label="unwind"];
    bb161__0_567 -> bb358__0_567 [label=""];
    bb162__0_567 -> bb163__0_567 [label="return"];
    bb162__0_567 -> bb389__0_567 [label="unwind"];
    bb163__0_567 -> bb164__0_567 [label="0"];
    bb163__0_567 -> bb165__0_567 [label="1"];
    bb163__0_567 -> bb7__0_567 [label="otherwise"];
    bb164__0_567 -> bb168__0_567 [label="0"];
    bb164__0_567 -> bb167__0_567 [label="otherwise"];
    bb165__0_567 -> bb166__0_567 [label="return"];
    bb165__0_567 -> bb389__0_567 [label="unwind"];
    bb166__0_567 -> bb358__0_567 [label=""];
    bb167__0_567 -> bb169__0_567 [label="return"];
    bb167__0_567 -> bb389__0_567 [label="unwind"];
    bb168__0_567 -> bb176__0_567 [label=""];
    bb169__0_567 -> bb170__0_567 [label="return"];
    bb169__0_567 -> bb389__0_567 [label="unwind"];
    bb170__0_567 -> bb171__0_567 [label="return"];
    bb170__0_567 -> bb389__0_567 [label="unwind"];
    bb171__0_567 -> bb172__0_567 [label="return"];
    bb171__0_567 -> bb371__0_567 [label="unwind"];
    bb172__0_567 -> bb173__0_567 [label="return"];
    bb172__0_567 -> bb371__0_567 [label="unwind"];
    bb173__0_567 -> bb174__0_567 [label="return"];
    bb173__0_567 -> bb389__0_567 [label="unwind"];
    bb174__0_567 -> bb175__0_567 [label="return"];
    bb174__0_567 -> bb389__0_567 [label="unwind"];
    bb175__0_567 -> bb176__0_567 [label=""];
    bb176__0_567 -> bb177__0_567 [label="return"];
    bb176__0_567 -> bb389__0_567 [label="unwind"];
    bb177__0_567 -> bb178__0_567 [label="0"];
    bb177__0_567 -> bb179__0_567 [label="1"];
    bb177__0_567 -> bb7__0_567 [label="otherwise"];
    bb178__0_567 -> bb181__0_567 [label="return"];
    bb178__0_567 -> bb389__0_567 [label="unwind"];
    bb179__0_567 -> bb180__0_567 [label="return"];
    bb179__0_567 -> bb389__0_567 [label="unwind"];
    bb180__0_567 -> bb359__0_567 [label=""];
    bb181__0_567 -> bb182__0_567 [label="success"];
    bb181__0_567 -> bb389__0_567 [label="unwind"];
    bb182__0_567 -> bb183__0_567 [label="return"];
    bb182__0_567 -> bb389__0_567 [label="unwind"];
    bb183__0_567 -> bb184__0_567 [label="return"];
    bb183__0_567 -> bb389__0_567 [label="unwind"];
    bb184__0_567 -> bb185__0_567 [label="return"];
    bb184__0_567 -> bb389__0_567 [label="unwind"];
    bb185__0_567 -> bb186__0_567 [label="0"];
    bb185__0_567 -> bb187__0_567 [label="1"];
    bb185__0_567 -> bb7__0_567 [label="otherwise"];
    bb186__0_567 -> bb189__0_567 [label="return"];
    bb186__0_567 -> bb389__0_567 [label="unwind"];
    bb187__0_567 -> bb188__0_567 [label="return"];
    bb187__0_567 -> bb389__0_567 [label="unwind"];
    bb188__0_567 -> bb356__0_567 [label=""];
    bb189__0_567 -> bb190__0_567 [label="return"];
    bb189__0_567 -> bb389__0_567 [label="unwind"];
    bb190__0_567 -> bb191__0_567 [label="0"];
    bb190__0_567 -> bb192__0_567 [label="1"];
    bb190__0_567 -> bb7__0_567 [label="otherwise"];
    bb191__0_567 -> bb195__0_567 [label="0"];
    bb191__0_567 -> bb194__0_567 [label="otherwise"];
    bb192__0_567 -> bb193__0_567 [label="return"];
    bb192__0_567 -> bb389__0_567 [label="unwind"];
    bb193__0_567 -> bb356__0_567 [label=""];
    bb194__0_567 -> bb202__0_567 [label=""];
    bb195__0_567 -> bb196__0_567 [label="return"];
    bb195__0_567 -> bb389__0_567 [label="unwind"];
    bb196__0_567 -> bb197__0_567 [label="return"];
    bb196__0_567 -> bb389__0_567 [label="unwind"];
    bb197__0_567 -> bb198__0_567 [label="return"];
    bb197__0_567 -> bb389__0_567 [label="unwind"];
    bb198__0_567 -> bb199__0_567 [label="return"];
    bb198__0_567 -> bb370__0_567 [label="unwind"];
    bb199__0_567 -> bb200__0_567 [label="return"];
    bb199__0_567 -> bb370__0_567 [label="unwind"];
    bb200__0_567 -> bb201__0_567 [label="return"];
    bb200__0_567 -> bb389__0_567 [label="unwind"];
    bb201__0_567 -> bb202__0_567 [label=""];
    bb202__0_567 -> bb203__0_567 [label="return"];
    bb202__0_567 -> bb389__0_567 [label="unwind"];
    bb203__0_567 -> bb204__0_567 [label="0"];
    bb203__0_567 -> bb205__0_567 [label="1"];
    bb203__0_567 -> bb7__0_567 [label="otherwise"];
    bb204__0_567 -> bb207__0_567 [label="return"];
    bb204__0_567 -> bb389__0_567 [label="unwind"];
    bb205__0_567 -> bb206__0_567 [label="return"];
    bb205__0_567 -> bb389__0_567 [label="unwind"];
    bb206__0_567 -> bb357__0_567 [label=""];
    bb207__0_567 -> bb208__0_567 [label="return"];
    bb207__0_567 -> bb389__0_567 [label="unwind"];
    bb208__0_567 -> bb209__0_567 [label="return"];
    bb208__0_567 -> bb389__0_567 [label="unwind"];
    bb209__0_567 -> bb210__0_567 [label="0"];
    bb209__0_567 -> bb211__0_567 [label="1"];
    bb209__0_567 -> bb7__0_567 [label="otherwise"];
    bb210__0_567 -> bb213__0_567 [label="return"];
    bb210__0_567 -> bb389__0_567 [label="unwind"];
    bb211__0_567 -> bb212__0_567 [label="return"];
    bb211__0_567 -> bb389__0_567 [label="unwind"];
    bb212__0_567 -> bb355__0_567 [label=""];
    bb213__0_567 -> bb214__0_567 [label="success"];
    bb213__0_567 -> bb389__0_567 [label="unwind"];
    bb214__0_567 -> bb215__0_567 [label="return"];
    bb214__0_567 -> bb389__0_567 [label="unwind"];
    bb215__0_567 -> bb216__0_567 [label="return"];
    bb215__0_567 -> bb389__0_567 [label="unwind"];
    bb216__0_567 -> bb217__0_567 [label="return"];
    bb216__0_567 -> bb389__0_567 [label="unwind"];
    bb217__0_567 -> bb218__0_567 [label="0"];
    bb217__0_567 -> bb219__0_567 [label="1"];
    bb217__0_567 -> bb7__0_567 [label="otherwise"];
    bb218__0_567 -> bb221__0_567 [label="return"];
    bb218__0_567 -> bb389__0_567 [label="unwind"];
    bb219__0_567 -> bb220__0_567 [label="return"];
    bb219__0_567 -> bb389__0_567 [label="unwind"];
    bb220__0_567 -> bb354__0_567 [label=""];
    bb221__0_567 -> bb222__0_567 [label="success"];
    bb221__0_567 -> bb389__0_567 [label="unwind"];
    bb222__0_567 -> bb223__0_567 [label="return"];
    bb222__0_567 -> bb389__0_567 [label="unwind"];
    bb223__0_567 -> bb224__0_567 [label="return"];
    bb223__0_567 -> bb389__0_567 [label="unwind"];
    bb224__0_567 -> bb225__0_567 [label="return"];
    bb224__0_567 -> bb389__0_567 [label="unwind"];
    bb225__0_567 -> bb226__0_567 [label="0"];
    bb225__0_567 -> bb227__0_567 [label="1"];
    bb225__0_567 -> bb7__0_567 [label="otherwise"];
    bb226__0_567 -> bb229__0_567 [label="return"];
    bb226__0_567 -> bb389__0_567 [label="unwind"];
    bb227__0_567 -> bb228__0_567 [label="return"];
    bb227__0_567 -> bb389__0_567 [label="unwind"];
    bb228__0_567 -> bb353__0_567 [label=""];
    bb229__0_567 -> bb230__0_567 [label="success"];
    bb229__0_567 -> bb389__0_567 [label="unwind"];
    bb230__0_567 -> bb231__0_567 [label="return"];
    bb230__0_567 -> bb389__0_567 [label="unwind"];
    bb231__0_567 -> bb232__0_567 [label="return"];
    bb231__0_567 -> bb389__0_567 [label="unwind"];
    bb232__0_567 -> bb233__0_567 [label="0"];
    bb232__0_567 -> bb234__0_567 [label="1"];
    bb232__0_567 -> bb7__0_567 [label="otherwise"];
    bb233__0_567 -> bb236__0_567 [label="return"];
    bb233__0_567 -> bb389__0_567 [label="unwind"];
    bb234__0_567 -> bb235__0_567 [label="return"];
    bb234__0_567 -> bb389__0_567 [label="unwind"];
    bb235__0_567 -> bb352__0_567 [label=""];
    bb236__0_567 -> bb237__0_567 [label="success"];
    bb236__0_567 -> bb389__0_567 [label="unwind"];
    bb237__0_567 -> bb238__0_567 [label="return"];
    bb237__0_567 -> bb389__0_567 [label="unwind"];
    bb238__0_567 -> bb242__0_567 [label="0"];
    bb238__0_567 -> bb239__0_567 [label="otherwise"];
    bb239__0_567 -> bb240__0_567 [label="return"];
    bb239__0_567 -> bb389__0_567 [label="unwind"];
    bb240__0_567 -> bb241__0_567 [label="return"];
    bb240__0_567 -> bb389__0_567 [label="unwind"];
    bb241__0_567 -> bb243__0_567 [label=""];
    bb242__0_567 -> bb243__0_567 [label=""];
    bb243__0_567 -> bb244__0_567 [label="return"];
    bb243__0_567 -> bb389__0_567 [label="unwind"];
    bb244__0_567 -> bb245__0_567 [label="success"];
    bb244__0_567 -> bb389__0_567 [label="unwind"];
    bb245__0_567 -> bb246__0_567 [label="return"];
    bb245__0_567 -> bb389__0_567 [label="unwind"];
    bb246__0_567 -> bb247__0_567 [label="success"];
    bb246__0_567 -> bb389__0_567 [label="unwind"];
    bb247__0_567 -> bb248__0_567 [label="return"];
    bb247__0_567 -> bb389__0_567 [label="unwind"];
    bb248__0_567 -> bb249__0_567 [label="success"];
    bb248__0_567 -> bb389__0_567 [label="unwind"];
    bb249__0_567 -> bb250__0_567 [label="return"];
    bb249__0_567 -> bb389__0_567 [label="unwind"];
    bb250__0_567 -> bb251__0_567 [label="return"];
    bb250__0_567 -> bb389__0_567 [label="unwind"];
    bb251__0_567 -> bb252__0_567 [label="return"];
    bb251__0_567 -> bb389__0_567 [label="unwind"];
    bb252__0_567 -> bb253__0_567 [label="return"];
    bb252__0_567 -> bb389__0_567 [label="unwind"];
    bb253__0_567 -> bb254__0_567 [label="0"];
    bb253__0_567 -> bb255__0_567 [label="1"];
    bb253__0_567 -> bb7__0_567 [label="otherwise"];
    bb254__0_567 -> bb257__0_567 [label="return"];
    bb254__0_567 -> bb389__0_567 [label="unwind"];
    bb255__0_567 -> bb256__0_567 [label="return"];
    bb255__0_567 -> bb389__0_567 [label="unwind"];
    bb256__0_567 -> bb351__0_567 [label=""];
    bb257__0_567 -> bb258__0_567 [label="return"];
    bb257__0_567 -> bb389__0_567 [label="unwind"];
    bb258__0_567 -> bb259__0_567 [label="0"];
    bb258__0_567 -> bb260__0_567 [label="1"];
    bb258__0_567 -> bb7__0_567 [label="otherwise"];
    bb259__0_567 -> bb262__0_567 [label="return"];
    bb259__0_567 -> bb389__0_567 [label="unwind"];
    bb260__0_567 -> bb261__0_567 [label="return"];
    bb260__0_567 -> bb389__0_567 [label="unwind"];
    bb261__0_567 -> bb350__0_567 [label=""];
    bb262__0_567 -> bb263__0_567 [label="return"];
    bb262__0_567 -> bb389__0_567 [label="unwind"];
    bb263__0_567 -> bb264__0_567 [label="0"];
    bb263__0_567 -> bb265__0_567 [label="1"];
    bb263__0_567 -> bb7__0_567 [label="otherwise"];
    bb264__0_567 -> bb267__0_567 [label="return"];
    bb264__0_567 -> bb389__0_567 [label="unwind"];
    bb265__0_567 -> bb266__0_567 [label="return"];
    bb265__0_567 -> bb389__0_567 [label="unwind"];
    bb266__0_567 -> bb350__0_567 [label=""];
    bb267__0_567 -> bb268__0_567 [label="0"];
    bb267__0_567 -> bb275__0_567 [label="otherwise"];
    bb268__0_567 -> bb269__0_567 [label="return"];
    bb268__0_567 -> bb389__0_567 [label="unwind"];
    bb269__0_567 -> bb270__0_567 [label="return"];
    bb269__0_567 -> bb389__0_567 [label="unwind"];
    bb270__0_567 -> bb271__0_567 [label="return"];
    bb270__0_567 -> bb389__0_567 [label="unwind"];
    bb271__0_567 -> bb272__0_567 [label="0"];
    bb271__0_567 -> bb273__0_567 [label="1"];
    bb271__0_567 -> bb7__0_567 [label="otherwise"];
    bb272__0_567 -> bb276__0_567 [label=""];
    bb273__0_567 -> bb274__0_567 [label="return"];
    bb273__0_567 -> bb387__0_567 [label="unwind"];
    bb274__0_567 -> bb349__0_567 [label=""];
    bb275__0_567 -> bb276__0_567 [label=""];
    bb276__0_567 -> bb277__0_567 [label="return"];
    bb276__0_567 -> bb369__0_567 [label="unwind"];
    bb277__0_567 -> bb278__0_567 [label="return"];
    bb277__0_567 -> bb369__0_567 [label="unwind"];
    bb278__0_567 -> bb279__0_567 [label="0"];
    bb278__0_567 -> bb280__0_567 [label="1"];
    bb278__0_567 -> bb7__0_567 [label="otherwise"];
    bb279__0_567 -> bb282__0_567 [label="return"];
    bb279__0_567 -> bb385__0_567 [label="unwind"];
    bb280__0_567 -> bb281__0_567 [label="return"];
    bb280__0_567 -> bb386__0_567 [label="unwind"];
    bb281__0_567 -> bb348__0_567 [label=""];
    bb282__0_567 -> bb283__0_567 [label="return"];
    bb282__0_567 -> bb385__0_567 [label="unwind"];
    bb283__0_567 -> bb284__0_567 [label="return"];
    bb283__0_567 -> bb385__0_567 [label="unwind"];
    bb284__0_567 -> bb285__0_567 [label="return"];
    bb284__0_567 -> bb385__0_567 [label="unwind"];
    bb285__0_567 -> bb286__0_567 [label="return"];
    bb285__0_567 -> bb385__0_567 [label="unwind"];
    bb286__0_567 -> bb287__0_567 [label="0"];
    bb286__0_567 -> bb288__0_567 [label="1"];
    bb286__0_567 -> bb7__0_567 [label="otherwise"];
    bb287__0_567 -> bb290__0_567 [label="return"];
    bb287__0_567 -> bb385__0_567 [label="unwind"];
    bb288__0_567 -> bb289__0_567 [label="return"];
    bb288__0_567 -> bb385__0_567 [label="unwind"];
    bb289__0_567 -> bb347__0_567 [label=""];
    bb290__0_567 -> bb291__0_567 [label="success"];
    bb290__0_567 -> bb385__0_567 [label="unwind"];
    bb291__0_567 -> bb292__0_567 [label="return"];
    bb291__0_567 -> bb385__0_567 [label="unwind"];
    bb292__0_567 -> bb293__0_567 [label="return"];
    bb292__0_567 -> bb385__0_567 [label="unwind"];
    bb293__0_567 -> bb294__0_567 [label="return"];
    bb293__0_567 -> bb385__0_567 [label="unwind"];
    bb294__0_567 -> bb295__0_567 [label="0"];
    bb294__0_567 -> bb296__0_567 [label="1"];
    bb294__0_567 -> bb7__0_567 [label="otherwise"];
    bb295__0_567 -> bb298__0_567 [label="return"];
    bb295__0_567 -> bb385__0_567 [label="unwind"];
    bb296__0_567 -> bb297__0_567 [label="return"];
    bb296__0_567 -> bb385__0_567 [label="unwind"];
    bb297__0_567 -> bb346__0_567 [label=""];
    bb298__0_567 -> bb299__0_567 [label="return"];
    bb298__0_567 -> bb368__0_567 [label="unwind"];
    bb299__0_567 -> bb300__0_567 [label="return"];
    bb299__0_567 -> bb368__0_567 [label="unwind"];
    bb300__0_567 -> bb301__0_567 [label="return"];
    bb300__0_567 -> bb385__0_567 [label="unwind"];
    bb301__0_567 -> bb302__0_567 [label="return"];
    bb301__0_567 -> bb385__0_567 [label="unwind"];
    bb302__0_567 -> bb303__0_567 [label="return"];
    bb302__0_567 -> bb385__0_567 [label="unwind"];
    bb303__0_567 -> bb304__0_567 [label="return"];
    bb303__0_567 -> bb385__0_567 [label="unwind"];
    bb304__0_567 -> bb305__0_567 [label="0"];
    bb304__0_567 -> bb306__0_567 [label="1"];
    bb304__0_567 -> bb7__0_567 [label="otherwise"];
    bb305__0_567 -> bb308__0_567 [label="return"];
    bb305__0_567 -> bb385__0_567 [label="unwind"];
    bb306__0_567 -> bb307__0_567 [label="return"];
    bb306__0_567 -> bb385__0_567 [label="unwind"];
    bb307__0_567 -> bb344__0_567 [label=""];
    bb308__0_567 -> bb309__0_567 [label="return"];
    bb308__0_567 -> bb385__0_567 [label="unwind"];
    bb309__0_567 -> bb310__0_567 [label="return"];
    bb309__0_567 -> bb385__0_567 [label="unwind"];
    bb310__0_567 -> bb311__0_567 [label="0"];
    bb310__0_567 -> bb312__0_567 [label="1"];
    bb310__0_567 -> bb7__0_567 [label="otherwise"];
    bb311__0_567 -> bb314__0_567 [label="return"];
    bb311__0_567 -> bb385__0_567 [label="unwind"];
    bb312__0_567 -> bb313__0_567 [label="return"];
    bb312__0_567 -> bb385__0_567 [label="unwind"];
    bb313__0_567 -> bb344__0_567 [label=""];
    bb314__0_567 -> bb315__0_567 [label="return"];
    bb314__0_567 -> bb385__0_567 [label="unwind"];
    bb315__0_567 -> bb316__0_567 [label="return"];
    bb315__0_567 -> bb385__0_567 [label="unwind"];
    bb316__0_567 -> bb337__0_567 [label="0"];
    bb316__0_567 -> bb317__0_567 [label="otherwise"];
    bb317__0_567 -> bb318__0_567 [label="return"];
    bb317__0_567 -> bb385__0_567 [label="unwind"];
    bb318__0_567 -> bb319__0_567 [label="success"];
    bb318__0_567 -> bb385__0_567 [label="unwind"];
    bb319__0_567 -> bb320__0_567 [label="0"];
    bb319__0_567 -> bb336__0_567 [label="otherwise"];
    bb320__0_567 -> bb321__0_567 [label="return"];
    bb320__0_567 -> bb385__0_567 [label="unwind"];
    bb321__0_567 -> bb322__0_567 [label="return"];
    bb321__0_567 -> bb385__0_567 [label="unwind"];
    bb322__0_567 -> bb323__0_567 [label="return"];
    bb322__0_567 -> bb385__0_567 [label="unwind"];
    bb323__0_567 -> bb324__0_567 [label="0"];
    bb323__0_567 -> bb325__0_567 [label="1"];
    bb323__0_567 -> bb7__0_567 [label="otherwise"];
    bb324__0_567 -> bb328__0_567 [label="0"];
    bb324__0_567 -> bb327__0_567 [label="otherwise"];
    bb325__0_567 -> bb326__0_567 [label="return"];
    bb325__0_567 -> bb385__0_567 [label="unwind"];
    bb326__0_567 -> bb343__0_567 [label=""];
    bb327__0_567 -> bb335__0_567 [label=""];
    bb328__0_567 -> bb329__0_567 [label="return"];
    bb328__0_567 -> bb385__0_567 [label="unwind"];
    bb329__0_567 -> bb330__0_567 [label="return"];
    bb329__0_567 -> bb385__0_567 [label="unwind"];
    bb330__0_567 -> bb331__0_567 [label="return"];
    bb330__0_567 -> bb385__0_567 [label="unwind"];
    bb331__0_567 -> bb332__0_567 [label="0"];
    bb331__0_567 -> bb333__0_567 [label="1"];
    bb331__0_567 -> bb7__0_567 [label="otherwise"];
    bb332__0_567 -> bb335__0_567 [label=""];
    bb333__0_567 -> bb334__0_567 [label="return"];
    bb333__0_567 -> bb385__0_567 [label="unwind"];
    bb334__0_567 -> bb343__0_567 [label=""];
    bb335__0_567 -> bb338__0_567 [label=""];
    bb336__0_567 -> bb337__0_567 [label=""];
    bb337__0_567 -> bb338__0_567 [label=""];
    bb338__0_567 -> bb339__0_567 [label="return"];
    bb338__0_567 -> bb385__0_567 [label="unwind"];
    bb339__0_567 -> bb340__0_567 [label="return"];
    bb339__0_567 -> bb385__0_567 [label="unwind"];
    bb340__0_567 -> bb341__0_567 [label="return"];
    bb340__0_567 -> bb389__0_567 [label="unwind"];
    bb341__0_567 -> bb342__0_567 [label="return"];
    bb341__0_567 -> bb380__0_567 [label="unwind"];
    bb342__0_567 -> bb367__0_567 [label=""];
    bb343__0_567 -> bb345__0_567 [label=""];
    bb344__0_567 -> bb345__0_567 [label=""];
    bb345__0_567 -> bb346__0_567 [label=""];
    bb346__0_567 -> bb347__0_567 [label=""];
    bb347__0_567 -> bb348__0_567 [label="0"];
    bb347__0_567 -> bb381__0_567 [label="otherwise"];
    bb348__0_567 -> bb349__0_567 [label="return"];
    bb348__0_567 -> bb389__0_567 [label="unwind"];
    bb349__0_567 -> bb353__0_567 [label=""];
    bb350__0_567 -> bb351__0_567 [label=""];
    bb351__0_567 -> bb352__0_567 [label=""];
    bb352__0_567 -> bb353__0_567 [label=""];
    bb353__0_567 -> bb354__0_567 [label=""];
    bb354__0_567 -> bb355__0_567 [label=""];
    bb355__0_567 -> bb357__0_567 [label=""];
    bb356__0_567 -> bb357__0_567 [label=""];
    bb357__0_567 -> bb359__0_567 [label=""];
    bb358__0_567 -> bb359__0_567 [label=""];
    bb359__0_567 -> bb361__0_567 [label=""];
    bb360__0_567 -> bb361__0_567 [label=""];
    bb361__0_567 -> bb383__0_567 [label=""];
    bb362__0_567 -> bb383__0_567 [label=""];
    bb363__0_567 -> bb364__0_567 [label=""];
    bb364__0_567 -> bb365__0_567 [label=""];
    bb365__0_567 -> bb366__0_567 [label="return"];
    bb365__0_567 -> bb380__0_567 [label="unwind"];
    bb366__0_567 -> bb367__0_567 [label=""];
    bb368__0_567 -> bb385__0_567 [label="return"];
    bb369__0_567 -> bb389__0_567 [label="return"];
    bb370__0_567 -> bb389__0_567 [label="return"];
    bb371__0_567 -> bb389__0_567 [label="return"];
    bb372__0_567 -> bb389__0_567 [label="return"];
    bb373__0_567 -> bb389__0_567 [label="return"];
    bb374__0_567 -> bb379__0_567 [label="return"];
    bb375__0_567 -> bb379__0_567 [label="return"];
    bb376__0_567 -> bb379__0_567 [label="return"];
    bb377__0_567 -> bb379__0_567 [label="return"];
    bb378__0_567 -> bb379__0_567 [label="return"];
    bb379__0_567 -> bb380__0_567 [label="return"];
    bb381__0_567 -> bb348__0_567 [label="return"];
    bb381__0_567 -> bb369__0_567 [label="unwind"];
    bb382__0_567 -> bb363__0_567 [label="return"];
    bb382__0_567 -> bb379__0_567 [label="unwind"];
    bb383__0_567 -> bb363__0_567 [label="0"];
    bb383__0_567 -> bb382__0_567 [label="otherwise"];
    bb384__0_567 -> bb369__0_567 [label="return"];
    bb385__0_567 -> bb369__0_567 [label="0"];
    bb385__0_567 -> bb384__0_567 [label="otherwise"];
    bb386__0_567 -> bb369__0_567 [label=""];
    bb387__0_567 -> bb389__0_567 [label=""];
    bb388__0_567 -> bb379__0_567 [label="return"];
    bb389__0_567 -> bb379__0_567 [label="0"];
    bb389__0_567 -> bb388__0_567 [label="otherwise"];
    bb390__0_567 -> bb379__0_567 [label=""];
    bb391__0_567 -> bb380__0_567 [label=""];
}
