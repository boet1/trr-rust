// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:3998:10: 3998:18>::try_accounts` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:3998:10: 3998:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut ResizeSignedMsgUserOrdersBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, instructions::user::ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, instructions::user::ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, instructions::user::ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, instructions::user::ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>>;
    let mut _22: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::user::ResizeSignedMsgUserOrdersBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::user::ResizeSignedMsgUserOrdersBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _52: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::user::ResizeSignedMsgUserOrdersBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::user::ResizeSignedMsgUserOrdersBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _82: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::user::ResizeSignedMsgUserOrdersBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _95: ();
    let mut _96: bool;
    let mut _97: &std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _98: &anchor_lang::prelude::Pubkey;
    let _99: &anchor_lang::prelude::Pubkey;
    let _100: anchor_lang::prelude::Pubkey;
    let mut _101: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _102: !;
    let mut _103: anchor_lang::error::Error;
    let mut _104: anchor_lang::error::Error;
    let mut _105: anchor_lang::error::ErrorCode;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _108: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _115: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _117: &anchor_lang::prelude::Rent;
    let mut _118: usize;
    let mut _119: usize;
    let mut _120: u16;
    let mut _122: std::option::Option<isize>;
    let mut _123: isize;
    let mut _124: std::result::Result<isize, std::num::TryFromIntError>;
    let mut _125: usize;
    let mut _126: usize;
    let mut _127: u16;
    let mut _128: isize;
    let mut _129: std::result::Result<isize, std::num::TryFromIntError>;
    let mut _130: usize;
    let mut _131: &anchor_lang::prelude::AccountInfo<'_>;
    let _132: ();
    let mut _133: bool;
    let mut _134: isize;
    let _135: ();
    let mut _136: bool;
    let mut _137: isize;
    let _138: ();
    let mut _139: bool;
    let mut _140: usize;
    let mut _141: std::result::Result<usize, std::num::TryFromIntError>;
    let mut _142: isize;
    let mut _143: !;
    let mut _144: anchor_lang::error::Error;
    let mut _145: anchor_lang::error::Error;
    let mut _146: anchor_lang::error::ErrorCode;
    let mut _147: bool;
    let mut _148: u64;
    let mut _149: u64;
    let mut _150: &anchor_lang::prelude::AccountInfo<'_>;
    let _151: ();
    let mut _152: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _153: std::result::Result<(), anchor_lang::error::Error>;
    let mut _154: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _155: anchor_lang::prelude::AccountInfo<'_>;
    let mut _156: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _157: anchor_lang::system_program::Transfer<'_>;
    let mut _158: anchor_lang::prelude::AccountInfo<'_>;
    let mut _159: &anchor_lang::prelude::Signer<'_>;
    let mut _160: anchor_lang::prelude::AccountInfo<'_>;
    let mut _161: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _162: u64;
    let mut _163: std::option::Option<u64>;
    let mut _164: u64;
    let mut _165: u64;
    let mut _166: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _167: isize;
    let mut _169: !;
    let mut _170: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _173: std::option::Option<u64>;
    let mut _174: u64;
    let mut _175: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _176: u64;
    let mut _177: u64;
    let mut _178: std::option::Option<u64>;
    let mut _179: u64;
    let mut _180: &anchor_lang::prelude::AccountInfo<'_>;
    let _181: anchor_lang::prelude::AccountInfo<'_>;
    let mut _182: &anchor_lang::prelude::Signer<'_>;
    let mut _183: u64;
    let mut _184: &mut &mut u64;
    let mut _185: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _186: std::cell::RefMut<'_, &mut u64>;
    let mut _187: &std::cell::RefCell<&mut u64>;
    let _188: &std::cell::RefCell<&mut u64>;
    let mut _189: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let _190: anchor_lang::prelude::AccountInfo<'_>;
    let mut _191: &anchor_lang::prelude::Signer<'_>;
    let mut _192: u64;
    let mut _193: std::option::Option<u64>;
    let mut _194: u64;
    let mut _195: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _196: u64;
    let mut _197: &mut &mut u64;
    let mut _198: &mut std::cell::RefMut<'_, &mut u64>;
    let mut _199: std::cell::RefMut<'_, &mut u64>;
    let mut _200: &std::cell::RefCell<&mut u64>;
    let _201: &std::cell::RefCell<&mut u64>;
    let mut _202: &std::rc::Rc<std::cell::RefCell<&mut u64>>;
    let _203: ();
    let mut _204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>>;
    let mut _205: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _206: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _207: usize;
    let mut _208: usize;
    let mut _209: u16;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _215: bool;
    let mut _216: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _217: anchor_lang::prelude::Pubkey;
    let mut _218: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _221: (anchor_lang::prelude::Pubkey, u8);
    let mut _222: &[&[u8]];
    let mut _223: &[&[u8]; 2];
    let _224: &[&[u8]; 2];
    let _225: [&[u8]; 2];
    let mut _226: &[u8];
    let _227: &[u8];
    let mut _228: &str;
    let _229: &str;
    let mut _230: &[u8];
    let _231: &[u8];
    let mut _232: &anchor_lang::prelude::Pubkey;
    let _233: anchor_lang::prelude::Pubkey;
    let mut _234: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _235: &anchor_lang::prelude::Pubkey;
    let _236: &&anchor_lang::prelude::Pubkey;
    let mut _237: u8;
    let _238: ();
    let mut _239: bool;
    let mut _240: &anchor_lang::prelude::Pubkey;
    let _241: anchor_lang::prelude::Pubkey;
    let mut _242: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _243: &anchor_lang::prelude::Pubkey;
    let mut _244: !;
    let mut _245: anchor_lang::error::Error;
    let mut _246: anchor_lang::error::Error;
    let mut _247: anchor_lang::error::Error;
    let mut _248: anchor_lang::error::ErrorCode;
    let mut _249: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _250: anchor_lang::prelude::Pubkey;
    let mut _251: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _252: anchor_lang::prelude::Pubkey;
    let _253: ();
    let mut _254: bool;
    let mut _255: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _256: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let _257: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _258: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _259: !;
    let mut _260: anchor_lang::error::Error;
    let mut _261: anchor_lang::error::Error;
    let mut _262: anchor_lang::error::ErrorCode;
    let _263: ();
    let mut _264: bool;
    let mut _265: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _266: &anchor_lang::prelude::Signer<'_>;
    let _267: &anchor_lang::prelude::Signer<'_>;
    let mut _268: !;
    let mut _269: anchor_lang::error::Error;
    let mut _270: anchor_lang::error::Error;
    let mut _271: anchor_lang::error::ErrorCode;
    let mut _272: instructions::user::ResizeSignedMsgUserOrders<'_>;
    let mut _273: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _274: anchor_lang::prelude::AccountInfo<'_>;
    let mut _275: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _276: anchor_lang::prelude::Signer<'_>;
    let mut _277: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _278: &mut u64;
    let mut _279: &mut u64;
    let mut _280: &anchor_lang::prelude::Pubkey;
    let mut _281: bool;
    let mut _282: bool;
    let mut _283: bool;
    let mut _284: bool;
    let mut _285: bool;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: isize;
    let mut _290: isize;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: isize;
    let mut _297: isize;
    let mut _298: isize;
    let mut _299: isize;
    let mut _300: isize;
    let mut _301: isize;
    let mut _302: isize;
    let mut _303: isize;
    let mut _304: isize;
    let mut _305: isize;
    let mut _306: isize;
    let mut _307: isize;
    let mut _308: isize;
    let mut _309: isize;
    let mut _310: isize;
    let mut _311: isize;
    let mut _312: isize;
    let mut _313: isize;
    let mut _314: isize;
    let mut _315: isize;
    let mut _316: isize;
    let mut _317: isize;
    let mut _318: isize;
    let mut _319: isize;
    let mut _320: isize;
    let mut _321: isize;
    let mut _322: isize;
    let mut _323: isize;
    let mut _324: isize;
    let mut _325: isize;
    let mut _326: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _327: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _328: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _329: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _330: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, instructions::user::ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args;
        scope 2 {
            debug num_orders => _7;
            let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
            scope 7 {
                debug signed_msg_user_orders => _20;
                let _35: anchor_lang::prelude::AccountInfo<'_>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug authority => _35;
                    let _50: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                    scope 17 {
                        debug user => _50;
                        let _65: anchor_lang::prelude::Signer<'_>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::Signer<'_>;
                        scope 22 {
                            debug payer => _65;
                            let _80: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            scope 27 {
                                debug system_program => _80;
                                let _106: anchor_lang::prelude::Rent;
                                let _110: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _113: anchor_lang::prelude::Rent;
                                scope 32 {
                                    debug __anchor_rent => _106;
                                    let _114: anchor_lang::prelude::AccountInfo<'_>;
                                    scope 37 {
                                        debug __field_info => _114;
                                        let _116: u64;
                                        scope 38 {
                                            debug __new_rent_minimum => _116;
                                            let _121: isize;
                                            scope 39 {
                                                debug __delta_space => _121;
                                                let _168: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _171: ();
                                                let _172: u64;
                                                let _211: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _214: ();
                                                let _219: anchor_lang::prelude::Pubkey;
                                                let _220: u8;
                                                scope 40 {
                                                    debug residual => _168;
                                                    scope 41 {
                                                    }
                                                }
                                                scope 42 {
                                                    debug val => _171;
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug __lamport_amt => _172;
                                                }
                                                scope 45 {
                                                    debug residual => _211;
                                                    scope 46 {
                                                    }
                                                }
                                                scope 47 {
                                                    debug val => _214;
                                                    scope 48 {
                                                    }
                                                }
                                                scope 49 {
                                                    debug __pda_address => _219;
                                                    debug __bump => _220;
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _110;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _113;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _91;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _94;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _285 = const false;
        _284 = const false;
        _282 = const false;
        _283 = const false;
        _281 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
        _10 = std::result::Result::<<instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18}>(move _11, move _14) -> [return: bb2, unwind: bb160];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::user::ResizeSignedMsgUserOrders<'info> as anchor_lang::Accounts<'info, instructions::user::ResizeSignedMsgUserOrdersBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <Box<anchor_lang::prelude::Account<'_, SignedMsgUserOrders>> as anchor_lang::Accounts<'_, ResizeSignedMsgUserOrdersBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb152;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
        _22 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, SignedMsgUserOrders>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18}>(move _23, move _29) -> [return: bb9, unwind: bb160];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, SignedMsgUserOrders>>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb160];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>);
        _285 = const true;
        _20 = move _34;
        StorageDead(_34);
        _286 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, ResizeSignedMsgUserOrdersBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind: bb177];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb178];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _316 = discriminant(_21);
        StorageDead(_21);
        goto -> bb151;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18}>(move _38, move _44) -> [return: bb15, unwind: bb177];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb177];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _284 = const true;
        _35 = move _49;
        StorageDead(_49);
        _288 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, ResizeSignedMsgUserOrdersBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind: bb174];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb175];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _314 = discriminant(_36);
        StorageDead(_36);
        goto -> bb150;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
        _52 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18}>(move _53, move _59) -> [return: bb21, unwind: bb174];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb174];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _50 = move _64;
        StorageDead(_64);
        _290 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, ResizeSignedMsgUserOrdersBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb174];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb172];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _312 = discriminant(_51);
        StorageDead(_51);
        goto -> bb149;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
        _67 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18}>(move _68, move _74) -> [return: bb27, unwind: bb174];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb174];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _65 = move _79;
        StorageDead(_79);
        _292 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, ResizeSignedMsgUserOrdersBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb174];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb171];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _310 = discriminant(_66);
        StorageDead(_66);
        goto -> bb148;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18};
        _82 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3998:10: 3998:18}>(move _83, move _89) -> [return: bb33, unwind: bb174];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb174];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _80 = move _94;
        StorageDead(_94);
        _294 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &(*_5);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _326 = (((_20.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _101 = &(*_326);
        _100 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as anchor_lang::Key>::key(move _101) -> [return: bb38, unwind: bb174];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb170];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _308 = discriminant(_81);
        StorageDead(_81);
        goto -> bb147;
    }

    bb38: {
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _96 = BTreeSet::<anchor_lang::prelude::Pubkey>::contains::<anchor_lang::prelude::Pubkey>(move _97, move _98) -> [return: bb39, unwind: bb174];
    }

    bb39: {
        switchInt(move _96) -> [0: bb43, otherwise: bb40];
    }

    bb40: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = AccountDuplicateReallocs;
        _104 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _105) -> [return: bb41, unwind: bb174];
    }

    bb41: {
        StorageDead(_105);
        _103 = anchor_lang::error::Error::with_account_name::<&str>(move _104, const "signed_msg_user_orders") -> [return: bb42, unwind: bb174];
    }

    bb42: {
        StorageDead(_104);
        _0 = std::result::Result::<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error>::Err(move _103);
        StorageDead(_103);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb147;
    }

    bb43: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        _95 = const ();
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb44, unwind: bb174];
    }

    bb44: {
        _107 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _108) -> [return: bb45, unwind: bb174];
    }

    bb45: {
        StorageDead(_108);
        _109 = discriminant(_107);
        switchInt(move _109) -> [0: bb46, 1: bb47, otherwise: bb5];
    }

    bb46: {
        StorageLive(_113);
        _113 = ((_107 as Continue).0: anchor_lang::prelude::Rent);
        _106 = _113;
        StorageDead(_113);
        _296 = discriminant(_107);
        StorageDead(_107);
        StorageLive(_114);
        StorageLive(_115);
        _327 = (((_20.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _115 = &(*_327);
        _114 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _115) -> [return: bb49, unwind: bb174];
    }

    bb47: {
        StorageLive(_110);
        _110 = move ((_107 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_112);
        _112 = move _110;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _112) -> [return: bb48, unwind: bb169];
    }

    bb48: {
        StorageDead(_112);
        StorageDead(_110);
        _306 = discriminant(_107);
        StorageDead(_107);
        goto -> bb146;
    }

    bb49: {
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_106;
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = _7;
        _119 = move _120 as usize (IntToInt);
        StorageDead(_120);
        _118 = SignedMsgUserOrders::space(move _119) -> [return: bb50, unwind: bb159];
    }

    bb50: {
        StorageDead(_119);
        _116 = anchor_lang::prelude::Rent::minimum_balance(move _117, move _118) -> [return: bb51, unwind: bb159];
    }

    bb51: {
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = _7;
        _126 = move _127 as usize (IntToInt);
        StorageDead(_127);
        _125 = SignedMsgUserOrders::space(move _126) -> [return: bb52, unwind: bb159];
    }

    bb52: {
        StorageDead(_126);
        _124 = <usize as TryInto<isize>>::try_into(move _125) -> [return: bb53, unwind: bb159];
    }

    bb53: {
        StorageDead(_125);
        _123 = std::result::Result::<isize, TryFromIntError>::unwrap(move _124) -> [return: bb54, unwind: bb159];
    }

    bb54: {
        StorageDead(_124);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_114;
        _130 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _131) -> [return: bb55, unwind: bb159];
    }

    bb55: {
        StorageDead(_131);
        _129 = <usize as TryInto<isize>>::try_into(move _130) -> [return: bb56, unwind: bb159];
    }

    bb56: {
        StorageDead(_130);
        _128 = std::result::Result::<isize, TryFromIntError>::unwrap(move _129) -> [return: bb57, unwind: bb159];
    }

    bb57: {
        StorageDead(_129);
        _122 = core::num::<impl isize>::checked_sub(move _123, move _128) -> [return: bb58, unwind: bb159];
    }

    bb58: {
        StorageDead(_128);
        StorageDead(_123);
        _121 = Option::<isize>::unwrap(move _122) -> [return: bb59, unwind: bb159];
    }

    bb59: {
        StorageDead(_122);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _121;
        _133 = Ne(move _134, const 0_isize);
        switchInt(move _133) -> [0: bb115, otherwise: bb60];
    }

    bb60: {
        StorageDead(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = _121;
        _136 = Gt(move _137, const 0_isize);
        switchInt(move _136) -> [0: bb84, otherwise: bb61];
    }

    bb61: {
        StorageDead(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = _121;
        _141 = <isize as TryInto<usize>>::try_into(move _142) -> [return: bb62, unwind: bb159];
    }

    bb62: {
        StorageDead(_142);
        _140 = std::result::Result::<usize, TryFromIntError>::unwrap(move _141) -> [return: bb63, unwind: bb159];
    }

    bb63: {
        StorageDead(_141);
        _139 = Gt(move _140, const _);
        switchInt(move _139) -> [0: bb67, otherwise: bb64];
    }

    bb64: {
        StorageDead(_140);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = AccountReallocExceedsLimit;
        _145 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _146) -> [return: bb65, unwind: bb159];
    }

    bb65: {
        StorageDead(_146);
        _144 = anchor_lang::error::Error::with_account_name::<&str>(move _145, const "signed_msg_user_orders") -> [return: bb66, unwind: bb159];
    }

    bb66: {
        StorageDead(_145);
        _0 = std::result::Result::<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error>::Err(move _144);
        StorageDead(_144);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb142;
    }

    bb67: {
        StorageDead(_140);
        _138 = const ();
        StorageDead(_139);
        StorageDead(_138);
        StorageLive(_147);
        StorageLive(_148);
        _148 = _116;
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_114;
        _149 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _150) -> [return: bb68, unwind: bb159];
    }

    bb68: {
        StorageDead(_150);
        _147 = Gt(move _148, move _149);
        switchInt(move _147) -> [0: bb82, otherwise: bb69];
    }

    bb69: {
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = &_80;
        _155 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _156) -> [return: bb70, unwind: bb159];
    }

    bb70: {
        _283 = const true;
        StorageDead(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = &_65;
        _158 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _159) -> [return: bb71, unwind: bb168];
    }

    bb71: {
        StorageDead(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_114;
        _160 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _161) -> [return: bb72, unwind: bb158];
    }

    bb72: {
        StorageDead(_161);
        _157 = anchor_lang::system_program::Transfer::<'_> { from: move _158, to: move _160 };
        StorageDead(_160);
        StorageDead(_158);
        _283 = const false;
        _154 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _155, move _157) -> [return: bb73, unwind: bb168];
    }

    bb73: {
        _282 = const true;
        StorageDead(_157);
        _283 = const false;
        StorageDead(_155);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = _116;
        StorageLive(_165);
        StorageLive(_166);
        _166 = &_114;
        _165 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _166) -> [return: bb74, unwind: bb166];
    }

    bb74: {
        StorageDead(_166);
        _163 = core::num::<impl u64>::checked_sub(move _164, move _165) -> [return: bb75, unwind: bb166];
    }

    bb75: {
        StorageDead(_165);
        StorageDead(_164);
        _162 = Option::<u64>::unwrap(move _163) -> [return: bb76, unwind: bb166];
    }

    bb76: {
        StorageDead(_163);
        _282 = const false;
        _153 = anchor_lang::system_program::transfer(move _154, move _162) -> [return: bb77, unwind: bb166];
    }

    bb77: {
        StorageDead(_162);
        _282 = const false;
        StorageDead(_154);
        _152 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _153) -> [return: bb78, unwind: bb159];
    }

    bb78: {
        StorageDead(_153);
        _167 = discriminant(_152);
        switchInt(move _167) -> [0: bb79, 1: bb80, otherwise: bb5];
    }

    bb79: {
        StorageLive(_171);
        _171 = ((_152 as Continue).0: ());
        _151 = _171;
        StorageDead(_171);
        _298 = discriminant(_152);
        StorageDead(_152);
        StorageDead(_151);
        _135 = const ();
        goto -> bb83;
    }

    bb80: {
        StorageLive(_168);
        _168 = move ((_152 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_170);
        _170 = move _168;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _170) -> [return: bb81, unwind: bb164];
    }

    bb81: {
        StorageDead(_170);
        StorageDead(_168);
        _304 = discriminant(_152);
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_147);
        goto -> bb142;
    }

    bb82: {
        StorageDead(_149);
        StorageDead(_148);
        _135 = const ();
        goto -> bb83;
    }

    bb83: {
        StorageDead(_147);
        goto -> bb106;
    }

    bb84: {
        StorageDead(_137);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &_114;
        _174 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _175) -> [return: bb85, unwind: bb159];
    }

    bb85: {
        StorageDead(_175);
        StorageLive(_176);
        _176 = _116;
        _173 = core::num::<impl u64>::checked_sub(move _174, move _176) -> [return: bb86, unwind: bb159];
    }

    bb86: {
        StorageDead(_176);
        StorageDead(_174);
        _172 = Option::<u64>::unwrap(move _173) -> [return: bb87, unwind: bb159];
    }

    bb87: {
        StorageDead(_173);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &_65;
        _181 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _182) -> [return: bb88, unwind: bb159];
    }

    bb88: {
        _180 = &_181;
        StorageDead(_182);
        _179 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _180) -> [return: bb89, unwind: bb157];
    }

    bb89: {
        StorageDead(_180);
        StorageLive(_183);
        _183 = _172;
        _178 = core::num::<impl u64>::checked_add(move _179, move _183) -> [return: bb90, unwind: bb157];
    }

    bb90: {
        StorageDead(_183);
        StorageDead(_179);
        _177 = Option::<u64>::unwrap(move _178) -> [return: bb91, unwind: bb157];
    }

    bb91: {
        StorageDead(_178);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_65;
        _190 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _191) -> [return: bb92, unwind: bb157];
    }

    bb92: {
        StorageDead(_191);
        _189 = &(_190.1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _188 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _189) -> [return: bb93, unwind: bb156];
    }

    bb93: {
        _187 = &(*_188);
        StorageDead(_189);
        _186 = RefCell::<&mut u64>::borrow_mut(move _187) -> [return: bb94, unwind: bb156];
    }

    bb94: {
        _185 = &mut _186;
        StorageDead(_187);
        _184 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _185) -> [return: bb95, unwind: bb155];
    }

    bb95: {
        StorageDead(_185);
        _278 = deref_copy (*_184);
        (*_278) = move _177;
        StorageDead(_177);
        drop(_186) -> [return: bb96, unwind: bb156];
    }

    bb96: {
        drop(_190) -> [return: bb97, unwind: bb157];
    }

    bb97: {
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        drop(_181) -> [return: bb98, unwind: bb159];
    }

    bb98: {
        StorageDead(_181);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &_114;
        _194 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _195) -> [return: bb99, unwind: bb159];
    }

    bb99: {
        StorageDead(_195);
        StorageLive(_196);
        _196 = _172;
        _193 = core::num::<impl u64>::checked_sub(move _194, move _196) -> [return: bb100, unwind: bb159];
    }

    bb100: {
        StorageDead(_196);
        StorageDead(_194);
        _192 = Option::<u64>::unwrap(move _193) -> [return: bb101, unwind: bb159];
    }

    bb101: {
        StorageDead(_193);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &(_114.1: std::rc::Rc<std::cell::RefCell<&mut u64>>);
        _201 = <Rc<RefCell<&mut u64>> as Deref>::deref(move _202) -> [return: bb102, unwind: bb159];
    }

    bb102: {
        _200 = &(*_201);
        StorageDead(_202);
        _199 = RefCell::<&mut u64>::borrow_mut(move _200) -> [return: bb103, unwind: bb159];
    }

    bb103: {
        _198 = &mut _199;
        StorageDead(_200);
        _197 = <RefMut<'_, &mut u64> as DerefMut>::deref_mut(move _198) -> [return: bb104, unwind: bb154];
    }

    bb104: {
        StorageDead(_198);
        _279 = deref_copy (*_197);
        (*_279) = move _192;
        StorageDead(_192);
        drop(_199) -> [return: bb105, unwind: bb159];
    }

    bb105: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_197);
        _135 = const ();
        StorageDead(_172);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_136);
        StorageDead(_135);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &_114;
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = _7;
        _208 = move _209 as usize (IntToInt);
        StorageDead(_209);
        _207 = SignedMsgUserOrders::space(move _208) -> [return: bb107, unwind: bb159];
    }

    bb107: {
        StorageDead(_208);
        _205 = anchor_lang::prelude::AccountInfo::<'_>::realloc(move _206, move _207, const false) -> [return: bb108, unwind: bb159];
    }

    bb108: {
        StorageDead(_207);
        StorageDead(_206);
        _204 = <std::result::Result<(), anchor_lang::prelude::ProgramError> as Try>::branch(move _205) -> [return: bb109, unwind: bb159];
    }

    bb109: {
        StorageDead(_205);
        _210 = discriminant(_204);
        switchInt(move _210) -> [0: bb110, 1: bb111, otherwise: bb5];
    }

    bb110: {
        StorageLive(_214);
        _214 = ((_204 as Continue).0: ());
        _203 = _214;
        StorageDead(_214);
        _300 = discriminant(_204);
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &mut (*_5);
        StorageLive(_217);
        StorageLive(_218);
        _328 = (((_20.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _218 = &(*_328);
        _217 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as anchor_lang::Key>::key(move _218) -> [return: bb113, unwind: bb159];
    }

    bb111: {
        StorageLive(_211);
        _211 = move ((_204 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_213);
        _213 = move _211;
        _0 = <std::result::Result<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _213) -> [return: bb112, unwind: bb163];
    }

    bb112: {
        StorageDead(_213);
        StorageDead(_211);
        _302 = discriminant(_204);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb143;
    }

    bb113: {
        StorageDead(_218);
        _215 = BTreeSet::<anchor_lang::prelude::Pubkey>::insert(move _216, move _217) -> [return: bb114, unwind: bb159];
    }

    bb114: {
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_215);
        _132 = const ();
        goto -> bb116;
    }

    bb115: {
        StorageDead(_134);
        _132 = const ();
        goto -> bb116;
    }

    bb116: {
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = const _;
        _228 = &(*_229);
        _227 = <str as AsRef<[u8]>>::as_ref(move _228) -> [return: bb117, unwind: bb159];
    }

    bb117: {
        _226 = &(*_227);
        StorageDead(_228);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &_35;
        _233 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _234) -> [return: bb118, unwind: bb159];
    }

    bb118: {
        _232 = &_233;
        StorageDead(_234);
        _231 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _232) -> [return: bb119, unwind: bb159];
    }

    bb119: {
        _230 = &(*_231);
        StorageDead(_232);
        _225 = [move _226, move _230];
        StorageDead(_230);
        StorageDead(_226);
        _224 = &_225;
        _223 = &(*_224);
        _222 = move _223 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_223);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &_1;
        _280 = deref_copy (*_236);
        _235 = &(*_280);
        _221 = anchor_lang::prelude::Pubkey::find_program_address(move _222, move _235) -> [return: bb120, unwind: bb159];
    }

    bb120: {
        StorageDead(_235);
        StorageDead(_222);
        StorageLive(_219);
        _219 = (_221.0: anchor_lang::prelude::Pubkey);
        StorageLive(_220);
        _220 = (_221.1: u8);
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_221);
        StorageLive(_237);
        _237 = _220;
        ((*_4).0: u8) = move _237;
        StorageDead(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _329 = (((_20.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _242 = &(*_329);
        _241 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as anchor_lang::Key>::key(move _242) -> [return: bb121, unwind: bb159];
    }

    bb121: {
        _240 = &_241;
        StorageDead(_242);
        StorageLive(_243);
        _243 = &_219;
        _239 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _240, move _243) -> [return: bb122, unwind: bb159];
    }

    bb122: {
        switchInt(move _239) -> [0: bb128, otherwise: bb123];
    }

    bb123: {
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = ConstraintSeeds;
        _247 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _248) -> [return: bb124, unwind: bb159];
    }

    bb124: {
        StorageDead(_248);
        _246 = anchor_lang::error::Error::with_account_name::<&str>(move _247, const "signed_msg_user_orders") -> [return: bb125, unwind: bb159];
    }

    bb125: {
        _281 = const true;
        StorageDead(_247);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _330 = (((_20.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _251 = &(*_330);
        _250 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as anchor_lang::Key>::key(move _251) -> [return: bb126, unwind: bb162];
    }

    bb126: {
        StorageDead(_251);
        StorageLive(_252);
        _252 = _219;
        _249 = (move _250, move _252);
        StorageDead(_252);
        StorageDead(_250);
        _281 = const false;
        _245 = anchor_lang::error::Error::with_pubkeys(move _246, move _249) -> [return: bb127, unwind: bb162];
    }

    bb127: {
        StorageDead(_249);
        _281 = const false;
        StorageDead(_246);
        _0 = std::result::Result::<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error>::Err(move _245);
        StorageDead(_245);
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb141;
    }

    bb128: {
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_240);
        _238 = const ();
        StorageDead(_239);
        StorageDead(_238);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &_20;
        _257 = <Box<anchor_lang::prelude::Account<'_, SignedMsgUserOrders>> as AsRef<anchor_lang::prelude::Account<'_, SignedMsgUserOrders>>>::as_ref(move _258) -> [return: bb129, unwind: bb159];
    }

    bb129: {
        _256 = &(*_257);
        StorageDead(_258);
        _255 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _256) -> [return: bb130, unwind: bb159];
    }

    bb130: {
        StorageDead(_256);
        _254 = ((*_255).6: bool);
        switchInt(move _254) -> [0: bb131, otherwise: bb134];
    }

    bb131: {
        StorageDead(_257);
        StorageDead(_255);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = ConstraintMut;
        _261 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _262) -> [return: bb132, unwind: bb159];
    }

    bb132: {
        StorageDead(_262);
        _260 = anchor_lang::error::Error::with_account_name::<&str>(move _261, const "signed_msg_user_orders") -> [return: bb133, unwind: bb159];
    }

    bb133: {
        StorageDead(_261);
        _0 = std::result::Result::<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error>::Err(move _260);
        StorageDead(_260);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb141;
    }

    bb134: {
        StorageDead(_257);
        StorageDead(_255);
        _253 = const ();
        StorageDead(_254);
        StorageDead(_253);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_65;
        _266 = &(*_267);
        _265 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _266) -> [return: bb135, unwind: bb159];
    }

    bb135: {
        StorageDead(_266);
        _264 = ((*_265).6: bool);
        switchInt(move _264) -> [0: bb136, otherwise: bb139];
    }

    bb136: {
        StorageDead(_267);
        StorageDead(_265);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = ConstraintMut;
        _270 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _271) -> [return: bb137, unwind: bb159];
    }

    bb137: {
        StorageDead(_271);
        _269 = anchor_lang::error::Error::with_account_name::<&str>(move _270, const "payer") -> [return: bb138, unwind: bb159];
    }

    bb138: {
        StorageDead(_270);
        _0 = std::result::Result::<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error>::Err(move _269);
        StorageDead(_269);
        StorageDead(_264);
        StorageDead(_263);
        goto -> bb141;
    }

    bb139: {
        StorageDead(_267);
        StorageDead(_265);
        _263 = const ();
        StorageDead(_264);
        StorageDead(_263);
        StorageLive(_272);
        StorageLive(_273);
        _285 = const false;
        _273 = move _20;
        StorageLive(_274);
        _284 = const false;
        _274 = move _35;
        StorageLive(_275);
        _275 = move _50;
        StorageLive(_276);
        _276 = move _65;
        StorageLive(_277);
        _277 = move _80;
        _272 = instructions::user::ResizeSignedMsgUserOrders::<'_> { signed_msg_user_orders: move _273, authority: move _274, user: move _275, payer: move _276, system_program: move _277 };
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_273);
        _0 = std::result::Result::<instructions::user::ResizeSignedMsgUserOrders<'_>, anchor_lang::error::Error>::Ok(move _272);
        StorageDead(_272);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_121);
        StorageDead(_116);
        drop(_114) -> [return: bb140, unwind: bb174];
    }

    bb140: {
        StorageDead(_114);
        StorageDead(_106);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        _284 = const false;
        StorageDead(_35);
        _285 = const false;
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb153;
    }

    bb141: {
        StorageDead(_220);
        StorageDead(_219);
        goto -> bb144;
    }

    bb142: {
        StorageDead(_136);
        StorageDead(_135);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_121);
        StorageDead(_116);
        drop(_114) -> [return: bb145, unwind: bb174];
    }

    bb145: {
        StorageDead(_114);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_106);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_80);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_65);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_50);
        drop(_35) -> [return: bb150, unwind: bb177];
    }

    bb150: {
        _284 = const false;
        StorageDead(_35);
        drop(_20) -> [return: bb151, unwind: bb160];
    }

    bb151: {
        _285 = const false;
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb152;
    }

    bb152: {
        StorageDead(_6);
        goto -> bb153;
    }

    bb153: {
        return;
    }

    bb154 (cleanup): {
        drop(_199) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_186) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_190) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        drop(_181) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb158 (cleanup): {
        drop(_158) -> [return: bb168, unwind terminate(cleanup)];
    }

    bb159 (cleanup): {
        drop(_114) -> [return: bb174, unwind terminate(cleanup)];
    }

    bb160 (cleanup): {
        resume;
    }

    bb161 (cleanup): {
        drop(_246) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb162 (cleanup): {
        switchInt(_281) -> [0: bb159, otherwise: bb161];
    }

    bb163 (cleanup): {
        _318 = discriminant(_204);
        goto -> bb159;
    }

    bb164 (cleanup): {
        _319 = discriminant(_152);
        goto -> bb159;
    }

    bb165 (cleanup): {
        drop(_154) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb166 (cleanup): {
        switchInt(_282) -> [0: bb159, otherwise: bb165];
    }

    bb167 (cleanup): {
        drop(_155) -> [return: bb159, unwind terminate(cleanup)];
    }

    bb168 (cleanup): {
        switchInt(_283) -> [0: bb159, otherwise: bb167];
    }

    bb169 (cleanup): {
        _320 = discriminant(_107);
        goto -> bb174;
    }

    bb170 (cleanup): {
        _321 = discriminant(_81);
        goto -> bb174;
    }

    bb171 (cleanup): {
        _322 = discriminant(_66);
        goto -> bb174;
    }

    bb172 (cleanup): {
        _323 = discriminant(_51);
        goto -> bb174;
    }

    bb173 (cleanup): {
        drop(_35) -> [return: bb177, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        switchInt(_284) -> [0: bb177, otherwise: bb173];
    }

    bb175 (cleanup): {
        _324 = discriminant(_36);
        goto -> bb177;
    }

    bb176 (cleanup): {
        drop(_20) -> [return: bb160, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        switchInt(_285) -> [0: bb160, otherwise: bb176];
    }

    bb178 (cleanup): {
        _325 = discriminant(_21);
        goto -> bb160;
    }
}
