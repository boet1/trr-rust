// MIR for `state::oracle::<impl at programs/drift/src/state/oracle.rs:91:1: 91:25>::default_with_current_oracle` before PreCodegen

fn state::oracle::<impl at programs/drift/src/state/oracle.rs:91:1: 91:25>::default_with_current_oracle(_1: OraclePriceData) -> std::result::Result<HistoricalIndexData, error::ErrorCode> {
    debug oracle_price_data => _1;
    let mut _0: std::result::Result<state::oracle::HistoricalIndexData, error::ErrorCode>;
    let _2: u64;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _4: std::result::Result<u64, error::ErrorCode>;
    let mut _5: std::result::Result<u64, error::ErrorCode>;
    let mut _6: i64;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: u64;
    let mut _12: state::oracle::HistoricalIndexData;
    let mut _13: u64;
    let mut _14: u64;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: state::oracle::HistoricalIndexData;
    scope 1 {
        debug price => _2;
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (_1.0: i64);
        _5 = <i64 as Cast>::cast::<u64>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u64, error::ErrorCode> as SafeUnwrap>::safe_unwrap(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _3 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: u64);
        _2 = _11;
        StorageDead(_11);
        StorageDead(_3);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        StorageLive(_14);
        _14 = _2;
        StorageLive(_15);
        _15 = _2;
        StorageLive(_16);
        _16 = _2;
        StorageLive(_17);
        _17 = <HistoricalIndexData as Default>::default() -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_8);
        _8 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<HistoricalIndexData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb9;
    }

    bb8: {
        _12 = HistoricalIndexData { last_index_bid_price: move _13, last_index_ask_price: move _14, last_index_price_twap: move _15, last_index_price_twap_5min: move _16, last_index_price_twap_ts: (_17.4: i64) };
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        _0 = std::result::Result::<HistoricalIndexData, error::ErrorCode>::Ok(move _12);
        StorageDead(_12);
        StorageDead(_2);
        StorageDead(_17);
        goto -> bb9;
    }

    bb9: {
        return;
    }
}
