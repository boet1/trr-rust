// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::div_mod_small` before PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::div_mod_small(_1: U256, _2: u64) -> (U256, U256) {
    debug self => _1;
    debug other => _2;
    let mut _0: (math::bn::U256, math::bn::U256);
    let mut _3: u64;
    let _4: ();
    let mut _5: std::iter::Rev<std::slice::IterMut<'_, u64>>;
    let mut _6: std::slice::IterMut<'_, u64>;
    let mut _7: &mut [u64];
    let mut _8: &mut [u64; 4];
    let mut _9: {closure@/home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:850:38: 850:41};
    let mut _10: &mut u64;
    let mut _11: &u64;
    let mut _12: math::bn::U256;
    let mut _13: math::bn::U256;
    let mut _14: u64;
    scope 1 {
        debug rem => _3;
    }

    bb0: {
        StorageLive(_3);
        _3 = const 0_u64;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &mut (_1.0: [u64; 4]);
        _7 = move _8 as &mut [u64] (PointerCoercion(Unsize));
        StorageDead(_8);
        _6 = core::slice::<impl [u64]>::iter_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::slice::IterMut<'_, u64> as Iterator>::rev(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut _3;
        StorageLive(_11);
        _11 = &_2;
        _9 = {closure@/home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:850:38: 850:41} { rem: move _10, other: move _11 };
        StorageDead(_11);
        StorageDead(_10);
        _4 = <Rev<std::slice::IterMut<'_, u64>> as Iterator>::for_each::<{closure@/home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:850:38: 850:41}>(move _5, move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_12);
        _12 = _1;
        StorageLive(_13);
        StorageLive(_14);
        _14 = _3;
        _13 = <u64 as Into<U256>>::into(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        _0 = (move _12, move _13);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_3);
        return;
    }
}
