// MIR for `state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::get_worst_case_fill_simulation` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:801:1: 801:18>::get_worst_case_fill_simulation(_1: &SpotPosition, _2: &SpotMarket, _3: &StrictOraclePrice, _4: Option<i128>, _5: math::margin::MarginRequirementType) -> std::result::Result<OrderFillSimulation, error::ErrorCode> {
    debug self => _1;
    debug spot_market => _2;
    debug strict_oracle_price => _3;
    debug token_amount => _4;
    debug margin_type => _5;
    let mut _0: std::result::Result<state::user::OrderFillSimulation, error::ErrorCode>;
    let _6: state::user::OrderFillSimulation;
    let _7: state::user::OrderFillSimulation;
    let mut _8: [state::user::OrderFillSimulation; 2];
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, [state::user::OrderFillSimulation; 2]>;
    let mut _10: std::result::Result<[state::user::OrderFillSimulation; 2], error::ErrorCode>;
    let mut _11: &state::user::SpotPosition;
    let mut _12: &state::spot_market::SpotMarket;
    let mut _13: &state::oracle::StrictOraclePrice;
    let mut _14: std::option::Option<i128>;
    let mut _15: math::margin::MarginRequirementType;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: [state::user::OrderFillSimulation; 2];
    let mut _21: state::user::OrderFillSimulation;
    let mut _22: state::user::OrderFillSimulation;
    let mut _23: state::user::OrderFillSimulation;
    scope 1 {
        debug bid_simulation => _6;
        debug ask_simulation => _7;
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        StorageLive(_12);
        _12 = &(*_2);
        StorageLive(_13);
        _13 = &(*_3);
        StorageLive(_14);
        _14 = _4;
        StorageLive(_15);
        _15 = _5;
        _10 = SpotPosition::simulate_fills_both_sides(move _11, move _12, move _13, move _14, move _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<[OrderFillSimulation; 2], error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _16 = discriminant(_9);
        switchInt(move _16) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_20);
        _20 = ((_9 as Continue).0: [state::user::OrderFillSimulation; 2]);
        _8 = _20;
        StorageDead(_20);
        StorageLive(_6);
        _6 = _8[0 of 2];
        StorageLive(_7);
        _7 = _8[1 of 2];
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _7;
        StorageLive(_23);
        _23 = _6;
        _21 = OrderFillSimulation::riskier_side(move _22, move _23) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_23);
        StorageDead(_22);
        _0 = std::result::Result::<OrderFillSimulation, error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
