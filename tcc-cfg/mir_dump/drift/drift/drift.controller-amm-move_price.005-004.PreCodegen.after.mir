// MIR for `move_price` after PreCodegen

fn move_price(_1: &mut PerpMarket, _2: u128, _3: u128, _4: u128) -> std::result::Result<(), error::ErrorCode> {
    debug market => _1;
    debug base_asset_reserve => _2;
    debug quote_asset_reserve => _3;
    debug sqrt_k => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _5: u128;
    let _6: math::bn::U256;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U256>;
    let mut _8: std::result::Result<math::bn::U256, error::ErrorCode>;
    let mut _9: math::bn::U256;
    let mut _10: u128;
    let mut _11: math::bn::U256;
    let mut _12: u128;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: math::bn::U256;
    let mut _18: u128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _20: std::result::Result<u128, error::ErrorCode>;
    let mut _21: math::bn::U256;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U256>;
    let mut _23: std::result::Result<math::bn::U256, error::ErrorCode>;
    let mut _24: math::bn::U256;
    let mut _25: math::bn::U256;
    let mut _26: u128;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: ();
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _39: std::result::Result<(), error::ErrorCode>;
    let mut _40: bool;
    let mut _41: i128;
    let mut _42: i128;
    let mut _43: i128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _45: std::result::Result<i128, error::ErrorCode>;
    let mut _46: u128;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: i128;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _54: std::result::Result<i128, error::ErrorCode>;
    let mut _55: u128;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: (i128, bool);
    let mut _62: ();
    let _64: ();
    let mut _65: &str;
    let _66: &str;
    let mut _67: &std::string::String;
    let _68: &std::string::String;
    let _69: std::string::String;
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[&str; 2];
    let _74: &[&str; 2];
    let _75: [&str; 2];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let mut _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: [core::fmt::rt::Argument<'_>; 1];
    let mut _80: core::fmt::rt::Argument<'_>;
    let mut _81: &error::ErrorCode;
    let _82: &error::ErrorCode;
    let _83: ();
    let mut _84: &str;
    let _85: &str;
    let mut _86: &std::string::String;
    let _87: &std::string::String;
    let _88: std::string::String;
    let mut _90: std::fmt::Arguments<'_>;
    let mut _91: &[&str];
    let mut _92: &[&str; 2];
    let _93: &[&str; 2];
    let _94: [&str; 2];
    let mut _95: &[core::fmt::rt::Argument<'_>];
    let mut _96: &[core::fmt::rt::Argument<'_>; 2];
    let _97: &[core::fmt::rt::Argument<'_>; 2];
    let _98: [core::fmt::rt::Argument<'_>; 2];
    let mut _99: core::fmt::rt::Argument<'_>;
    let mut _100: &i128;
    let _101: &i128;
    let _102: i128;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _104: std::result::Result<i128, error::ErrorCode>;
    let mut _105: u128;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &i128;
    let _113: &i128;
    let _114: i128;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _116: std::result::Result<i128, error::ErrorCode>;
    let mut _117: u128;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _123: error::ErrorCode;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _129: u128;
    let mut _132: (u64, u128, u128);
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u128, u128)>;
    let mut _134: std::result::Result<(u64, u128, u128), error::ErrorCode>;
    let mut _135: &state::perp_market::AMM;
    let _136: &state::perp_market::AMM;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: u128;
    let mut _145: (u128, u128);
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _147: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _148: u128;
    let mut _149: u128;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _155: u128;
    let mut _156: u128;
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _159: std::result::Result<u64, error::ErrorCode>;
    let mut _160: &state::perp_market::AMM;
    let mut _161: isize;
    let mut _163: !;
    let mut _164: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _166: (u32, u32);
    let mut _167: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u32, u32)>;
    let mut _168: std::result::Result<(u32, u32), error::ErrorCode>;
    let mut _169: &mut state::perp_market::PerpMarket;
    let mut _170: u64;
    let mut _171: std::option::Option<u64>;
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _177: ();
    scope 1 {
        debug k => _6;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: math::bn::U256;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: u128;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: i128;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: i128;
        let _63: error::ErrorCode;
        let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _128: ();
        let _130: u128;
        let _131: u128;
        let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _141: (u64, u128, u128);
        scope 6 {
            debug residual => _28;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _31;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _33;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _36;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _48;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _51;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _57;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _60;
            scope 21 {
            }
        }
        scope 22 {
            debug error_code => _63;
            let _70: std::string::String;
            let _89: std::string::String;
            let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _110: i128;
            let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _122: i128;
            let mut _178: &[&str; 2];
            let mut _179: &[&str; 2];
            scope 23 {
                debug res => _70;
            }
            scope 24 {
                debug res => _89;
            }
            scope 25 {
                debug residual => _107;
                scope 26 {
                }
            }
            scope 27 {
                debug val => _110;
                scope 28 {
                }
            }
            scope 29 {
                debug residual => _119;
                scope 30 {
                }
            }
            scope 31 {
                debug val => _122;
                scope 32 {
                }
            }
        }
        scope 33 {
            debug residual => _125;
            scope 34 {
            }
        }
        scope 35 {
            debug val => _128;
            scope 36 {
            }
        }
        scope 37 {
            debug terminal_quote_reserves => _130;
            debug terminal_base_reserves => _131;
            let _143: u128;
            let _144: u128;
            let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _154: (u128, u128);
            scope 42 {
                debug min_base_asset_reserve => _143;
                debug max_base_asset_reserve => _144;
                let _157: u64;
                let _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _165: u64;
                scope 47 {
                    debug reserve_price_after => _157;
                    let _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _176: (u32, u32);
                    scope 52 {
                        debug residual => _173;
                        scope 53 {
                        }
                    }
                    scope 54 {
                        debug val => _176;
                        scope 55 {
                        }
                    }
                }
                scope 48 {
                    debug residual => _162;
                    scope 49 {
                    }
                }
                scope 50 {
                    debug val => _165;
                    scope 51 {
                    }
                }
            }
            scope 43 {
                debug residual => _151;
                scope 44 {
                }
            }
            scope 45 {
                debug val => _154;
                scope 46 {
                }
            }
        }
        scope 38 {
            debug residual => _138;
            scope 39 {
            }
        }
        scope 40 {
            debug val => _141;
            scope 41 {
            }
        }
    }
    scope 2 {
        debug residual => _14;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _17;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        _5 = _2;
        (((*_1).1: state::perp_market::AMM).5: u128) = move _5;
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _4;
        _9 = <U256 as From<u128>>::from(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _4;
        _11 = <U256 as From<u128>>::from(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _8 = <U256 as SafeMath>::safe_mul(move _9, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_9);
        _7 = <std::result::Result<U256, error::ErrorCode> as Try>::branch(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        _13 = discriminant(_7);
        switchInt(move _13) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_17);
        _17 = ((_7 as Continue).0: math::bn::U256);
        _6 = _17;
        StorageDead(_17);
        StorageDead(_7);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _6;
        StorageLive(_25);
        StorageLive(_26);
        _26 = _2;
        _25 = <U256 as From<u128>>::from(move _26) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_14);
        _14 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_7);
        goto -> bb89;
    }

    bb9: {
        StorageDead(_26);
        _23 = <U256 as SafeMath>::safe_div(move _24, move _25) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<U256, error::ErrorCode> as Try>::branch(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        _27 = discriminant(_22);
        switchInt(move _27) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_22 as Continue).0: math::bn::U256);
        _21 = _31;
        StorageDead(_31);
        _20 = U256::try_to_u128(move _21) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_28);
        _28 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb88;
    }

    bb15: {
        StorageDead(_21);
        _19 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_20);
        _32 = discriminant(_19);
        switchInt(move _32) -> [0: bb17, 1: bb18, otherwise: bb6];
    }

    bb17: {
        StorageLive(_36);
        _36 = ((_19 as Continue).0: u128);
        _18 = _36;
        StorageDead(_36);
        (((*_1).1: state::perp_market::AMM).6: u128) = move _18;
        StorageDead(_18);
        StorageDead(_22);
        StorageDead(_19);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _3;
        _45 = <u128 as Cast>::cast::<i128>(move _46) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_33);
        _33 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb88;
    }

    bb20: {
        StorageDead(_46);
        _44 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb22, 1: bb23, otherwise: bb6];
    }

    bb22: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: i128);
        _43 = _51;
        StorageDead(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = (((*_1).1: state::perp_market::AMM).6: u128);
        _54 = <u128 as Cast>::cast::<i128>(move _55) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_48);
        _48 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb85;
    }

    bb25: {
        StorageDead(_55);
        _53 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _54) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_54);
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb27, 1: bb28, otherwise: bb6];
    }

    bb27: {
        StorageLive(_60);
        _60 = ((_53 as Continue).0: i128);
        _52 = _60;
        StorageDead(_60);
        _61 = CheckedSub(_43, _52);
        assert(!move (_61.1: bool), "attempt to compute `{} - {}`, which would overflow", move _43, move _52) -> [success: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_57);
        _57 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_53);
        goto -> bb85;
    }

    bb30: {
        _42 = move (_61.0: i128);
        StorageDead(_52);
        StorageDead(_43);
        _41 = core::num::<impl i128>::abs(move _42) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_42);
        _40 = Lt(move _41, const 100_i128);
        switchInt(move _40) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        StorageDead(_53);
        StorageDead(_44);
        StorageDead(_41);
        StorageLive(_62);
        _62 = ();
        _39 = std::result::Result::<(), error::ErrorCode>::Ok(move _62);
        StorageDead(_62);
        goto -> bb57;
    }

    bb33: {
        StorageDead(_53);
        StorageDead(_44);
        StorageDead(_41);
        StorageLive(_63);
        _63 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _179 = const _;
        _74 = &(*_179);
        _73 = &(*_74);
        _72 = move _73 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_63;
        _81 = &(*_82);
        _80 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _81) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_81);
        _79 = [move _80];
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = move _77 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_77);
        _71 = Arguments::<'_>::new_v1(move _72, move _76) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_76);
        StorageDead(_72);
        _70 = format(move _71) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_71);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_74);
        _69 = move _70;
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        _66 = <String as Deref>::deref(move _67) -> [return: bb37, unwind: bb92];
    }

    bb37: {
        _65 = &(*_66);
        StorageDead(_67);
        _64 = solana_program::log::sol_log(move _65) -> [return: bb38, unwind: bb92];
    }

    bb38: {
        StorageDead(_65);
        drop(_69) -> [return: bb39, unwind: bb93];
    }

    bb39: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _178 = const _;
        _93 = &(*_178);
        _92 = &(*_93);
        _91 = move _92 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_92);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _3;
        _104 = <u128 as Cast>::cast::<i128>(move _105) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_105);
        _103 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _104) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb42, 1: bb43, otherwise: bb6];
    }

    bb42: {
        StorageLive(_110);
        _110 = ((_103 as Continue).0: i128);
        _102 = _110;
        StorageDead(_110);
        _101 = &_102;
        _100 = &(*_101);
        _99 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _100) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_107);
        _107 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb84;
    }

    bb45: {
        StorageDead(_100);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = (((*_1).1: state::perp_market::AMM).6: u128);
        _116 = <u128 as Cast>::cast::<i128>(move _117) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_117);
        _115 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _116) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_116);
        _118 = discriminant(_115);
        switchInt(move _118) -> [0: bb48, 1: bb49, otherwise: bb6];
    }

    bb48: {
        StorageLive(_122);
        _122 = ((_115 as Continue).0: i128);
        _114 = _122;
        StorageDead(_122);
        _113 = &_114;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _112) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_119);
        _119 = ((_115 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb84;
    }

    bb51: {
        StorageDead(_112);
        _98 = [move _99, move _111];
        StorageDead(_111);
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = move _96 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_96);
        _90 = Arguments::<'_>::new_v1(move _91, move _95) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_95);
        StorageDead(_91);
        _89 = format(move _90) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_90);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_93);
        _88 = move _89;
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = <String as Deref>::deref(move _86) -> [return: bb54, unwind: bb91];
    }

    bb54: {
        _84 = &(*_85);
        StorageDead(_86);
        _83 = solana_program::log::sol_log(move _84) -> [return: bb55, unwind: bb91];
    }

    bb55: {
        StorageDead(_84);
        drop(_88) -> [return: bb56, unwind: bb93];
    }

    bb56: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_83);
        StorageLive(_123);
        _123 = _63;
        _39 = std::result::Result::<(), error::ErrorCode>::Err(move _123);
        StorageDead(_123);
        StorageDead(_63);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_40);
        _38 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _39) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_39);
        _124 = discriminant(_38);
        switchInt(move _124) -> [0: bb59, 1: bb60, otherwise: bb6];
    }

    bb59: {
        StorageLive(_128);
        _128 = ((_38 as Continue).0: ());
        _37 = _128;
        StorageDead(_128);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_129);
        _129 = _4;
        (((*_1).1: state::perp_market::AMM).10: u128) = move _129;
        StorageDead(_129);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &((*_1).1: state::perp_market::AMM);
        _135 = &(*_136);
        _134 = calculate_terminal_price_and_reserves(move _135) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_125);
        _125 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_127);
        StorageDead(_125);
        goto -> bb87;
    }

    bb62: {
        StorageDead(_135);
        _133 = <std::result::Result<(u64, u128, u128), error::ErrorCode> as Try>::branch(move _134) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_134);
        _137 = discriminant(_133);
        switchInt(move _137) -> [0: bb64, 1: bb65, otherwise: bb6];
    }

    bb64: {
        StorageLive(_141);
        _141 = ((_133 as Continue).0: (u64, u128, u128));
        _132 = _141;
        StorageDead(_141);
        StorageLive(_130);
        _130 = (_132.1: u128);
        StorageLive(_131);
        _131 = (_132.2: u128);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_142);
        _142 = _130;
        (((*_1).1: state::perp_market::AMM).12: u128) = move _142;
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = (((*_1).1: state::perp_market::AMM).7: u128);
        StorageLive(_149);
        _149 = _131;
        _147 = calculate_bid_ask_bounds(move _148, move _149) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_138);
        _138 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb89;
    }

    bb67: {
        StorageDead(_149);
        StorageDead(_148);
        _146 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _147) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_147);
        _150 = discriminant(_146);
        switchInt(move _150) -> [0: bb69, 1: bb70, otherwise: bb6];
    }

    bb69: {
        StorageLive(_154);
        _154 = ((_146 as Continue).0: (u128, u128));
        _145 = _154;
        StorageDead(_154);
        StorageLive(_143);
        _143 = (_145.0: u128);
        StorageLive(_144);
        _144 = (_145.1: u128);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_155);
        _155 = _144;
        (((*_1).1: state::perp_market::AMM).9: u128) = move _155;
        StorageDead(_155);
        StorageLive(_156);
        _156 = _143;
        (((*_1).1: state::perp_market::AMM).8: u128) = move _156;
        StorageDead(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &((*_1).1: state::perp_market::AMM);
        _159 = AMM::reserve_price(move _160) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_151);
        _151 = ((_146 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb83;
    }

    bb72: {
        StorageDead(_160);
        _158 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _159) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_159);
        _161 = discriminant(_158);
        switchInt(move _161) -> [0: bb74, 1: bb75, otherwise: bb6];
    }

    bb74: {
        StorageLive(_165);
        _165 = ((_158 as Continue).0: u64);
        _157 = _165;
        StorageDead(_165);
        StorageDead(_158);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &mut (*_1);
        StorageLive(_170);
        _170 = _157;
        StorageLive(_171);
        _171 = Option::<u64>::None;
        _168 = update_spreads(move _169, move _170, move _171) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_162);
        _162 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_164);
        _164 = _162;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _164) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_158);
        goto -> bb82;
    }

    bb77: {
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_169);
        _167 = <std::result::Result<(u32, u32), error::ErrorCode> as Try>::branch(move _168) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_168);
        _172 = discriminant(_167);
        switchInt(move _172) -> [0: bb79, 1: bb80, otherwise: bb6];
    }

    bb79: {
        StorageLive(_176);
        _176 = ((_167 as Continue).0: (u32, u32));
        _166 = _176;
        StorageDead(_176);
        StorageDead(_167);
        StorageDead(_166);
        StorageLive(_177);
        _177 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _177);
        StorageDead(_177);
        StorageDead(_157);
        StorageDead(_144);
        StorageDead(_143);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_6);
        goto -> bb90;
    }

    bb80: {
        StorageLive(_173);
        _173 = ((_167 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_175);
        _175 = _173;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _175) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_167);
        StorageDead(_166);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_157);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb89;
    }

    bb84: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_93);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_63);
        goto -> bb86;
    }

    bb85: {
        StorageDead(_44);
        StorageDead(_41);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_18);
        StorageDead(_22);
        StorageDead(_19);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_6);
        goto -> bb90;
    }

    bb90: {
        return;
    }

    bb91 (cleanup): {
        drop(_88) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb92 (cleanup): {
        drop(_69) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        resume;
    }
}
