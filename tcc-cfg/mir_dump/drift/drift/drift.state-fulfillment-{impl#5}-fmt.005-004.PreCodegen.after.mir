// MIR for `state::fulfillment::<impl at programs/drift/src/state/fulfillment.rs:9:10: 9:15>::fmt` after PreCodegen

fn state::fulfillment::<impl at programs/drift/src/state/fulfillment.rs:9:10: 9:15>::fmt(_1: &SpotFulfillmentMethod, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let mut _4: &mut std::fmt::Formatter<'_>;
    let mut _5: &str;
    let _6: &str;
    let _7: &anchor_lang::prelude::Pubkey;
    let _8: &u16;
    let mut _9: &mut std::fmt::Formatter<'_>;
    let mut _10: &str;
    let _11: &str;
    let mut _12: &dyn std::fmt::Debug;
    let mut _13: &anchor_lang::prelude::Pubkey;
    let mut _14: &dyn std::fmt::Debug;
    let mut _15: &&u16;
    let _16: &&u16;
    scope 1 {
        debug __self_0 => _7;
        debug __self_1 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_7);
        _7 = &(((*_1) as Match).0: anchor_lang::prelude::Pubkey);
        StorageLive(_8);
        _8 = &(((*_1) as Match).1: u16);
        StorageLive(_9);
        _9 = &mut (*_2);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const "Match";
        _10 = &(*_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_7);
        _12 = move _13 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &_8;
        _15 = &(*_16);
        _14 = move _15 as &dyn std::fmt::Debug (PointerCoercion(Unsize));
        StorageDead(_15);
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _9, move _10, move _12, move _14) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_4);
        _4 = &mut (*_2);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "ExternalMarket";
        _5 = &(*_6);
        _0 = Formatter::<'_>::write_str(move _4, move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb6;
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb6;
    }

    bb6: {
        return;
    }
}
