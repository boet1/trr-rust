digraph Mir_0_3793 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn PerpMarket::has_too_much_drawdown(_1: &amp;ReErased state::perp_market::PerpMarket) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _2: bool;<br align="left"/>let mut _3: isize;<br align="left"/>let mut _4: i64;<br align="left"/>let mut _5: i64;<br align="left"/>let mut _6: (i64, bool);<br align="left"/>let mut _7: i64;<br align="left"/>let mut _8: i64;<br align="left"/>let mut _9: (i64, bool);<br align="left"/>let _10: ();<br align="left"/>let mut _11: bool;<br align="left"/>let _12: i128;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _14: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _15: i128;<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _17: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _18: i128;<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _20: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _21: i64;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: i128;<br align="left"/>let mut _27: isize;<br align="left"/>let _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _29: !;<br align="left"/>let mut _30: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _31: i128;<br align="left"/>let mut _32: i128;<br align="left"/>let mut _33: i128;<br align="left"/>let mut _34: isize;<br align="left"/>let _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _38: i128;<br align="left"/>let _39: bool;<br align="left"/>let mut _40: isize;<br align="left"/>let mut _41: i128;<br align="left"/>let mut _42: i128;<br align="left"/>let mut _43: i128;<br align="left"/>let mut _44: bool;<br align="left"/>let mut _45: bool;<br align="left"/>let mut _46: bool;<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: bool;<br align="left"/>let mut _49: i128;<br align="left"/>let mut _50: i128;<br align="left"/>let mut _51: i128;<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: bool;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: bool;<br align="left"/>let mut _56: bool;<br align="left"/>let mut _57: i128;<br align="left"/>let mut _58: i128;<br align="left"/>let mut _59: i128;<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: bool;<br align="left"/>let mut _62: bool;<br align="left"/>let mut _63: bool;<br align="left"/>let mut _64: bool;<br align="left"/>let mut _65: i128;<br align="left"/>let mut _66: i128;<br align="left"/>let mut _67: i128;<br align="left"/>let mut _68: bool;<br align="left"/>let mut _69: bool;<br align="left"/>let mut _70: bool;<br align="left"/>let mut _71: bool;<br align="left"/>let mut _72: bool;<br align="left"/>let mut _73: bool;<br align="left"/>let mut _74: !;<br align="left"/>let _75: ();<br align="left"/>let mut _76: &amp;ReErased str;<br align="left"/>let _77: &amp;ReErased str;<br align="left"/>let mut _78: &amp;ReErased std::string::String;<br align="left"/>let _79: &amp;ReErased std::string::String;<br align="left"/>let _80: std::string::String;<br align="left"/>let _81: std::string::String;<br align="left"/>let mut _82: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _83: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _84: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _85: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>let _86: [&amp;ReErased str; 3_usize];<br align="left"/>let mut _87: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _88: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _89: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let _90: [core::fmt::rt::Argument&lt;ReErased&gt;; 2_usize];<br align="left"/>let mut _91: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _92: &amp;ReErased i128;<br align="left"/>let _93: &amp;ReErased i128;<br align="left"/>let mut _94: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _95: &amp;ReErased i64;<br align="left"/>let _96: &amp;ReErased i64;<br align="left"/>let mut _97: &amp;ReErased [&amp;ReErased str; 3_usize];<br align="left"/>debug self =&gt; _1;<br align="left"/>debug quote_drawdown_limit_breached =&gt; _2;<br align="left"/>debug percent_drawdown =&gt; _12;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>debug residual =&gt; _28;<br align="left"/>debug val =&gt; _31;<br align="left"/>debug residual =&gt; _35;<br align="left"/>debug val =&gt; _38;<br align="left"/>debug percent_drawdown_limit_breached =&gt; _39;<br align="left"/>debug res =&gt; _81;<br align="left"/>>;
    bb0__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_3 = discriminant(((*_1).24: state::perp_market::ContractTier))<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>_7 = (((*_1).1: state::perp_market::AMM).49: i64)<br/>StorageLive(_8)<br/>_9 = CheckedMul(const _, const 200_i64)<br/></td></tr><tr><td align="left">assert(!move (_9.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const _, const 200_i64)</td></tr></table>>];
    bb2__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>_4 = (((*_1).1: state::perp_market::AMM).49: i64)<br/>StorageLive(_5)<br/>_6 = CheckedMul(const _, const 400_i64)<br/></td></tr><tr><td align="left">assert(!move (_6.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const _, const 400_i64)</td></tr></table>>];
    bb3__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">_5 = move (_6.0: i64)<br/>_2 = Le(move _4, move _5)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_8 = move (_9.0: i64)<br/>_2 = Le(move _7, move _8)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _2<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb6__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = (((*_1).1: state::perp_market::AMM).49: i64)<br/></td></tr><tr><td align="left">_20 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _21)</td></tr></table>>];
    bb7__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb8__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_22 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb9__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_19 as Continue).0: i128)<br/>_18 = _26<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_17 = &lt;i128 as SafeMath&gt;::safe_mul(move _18, const _)</td></tr></table>>];
    bb10__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb12__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb14__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_27 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _27)</td></tr></table>>];
    bb15__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_16 as Continue).0: i128)<br/>_15 = _31<br/>StorageDead(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = (((*_1).1: state::perp_market::AMM).31: i128)<br/></td></tr><tr><td align="left">_32 = &lt;i128 as Ord&gt;::max(move _33, const 1_i128)</td></tr></table>>];
    bb16__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_30)<br/>_30 = _28<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _30)</td></tr></table>>];
    bb17__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">_14 = &lt;i128 as SafeMath&gt;::safe_div(move _15, move _32)</td></tr></table>>];
    bb19__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb20__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_34 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb21__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_13 as Continue).0: i128)<br/>_12 = _38<br/>StorageDead(_38)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageLive(_39)<br/>_40 = discriminant(((*_1).24: state::perp_market::ContractTier))<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb22__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_37)<br/>_37 = _35<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _37)</td></tr></table>>];
    bb23__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_65)<br/>_65 = _12<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>_68 = Eq(const _, const i128::MIN)<br/></td></tr><tr><td align="left">assert(!move _68, &quot;attempt to negate `{}`, which would overflow&quot;, const _)</td></tr></table>>];
    bb25__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = _12<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_44 = Eq(const _, const i128::MIN)<br/></td></tr><tr><td align="left">assert(!move _44, &quot;attempt to negate `{}`, which would overflow&quot;, const _)</td></tr></table>>];
    bb26__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">_43 = Neg(const _)<br/>_45 = Eq(const 50_i128, const 0_i128)<br/></td></tr><tr><td align="left">assert(!move _45, &quot;attempt to divide `{}` by zero&quot;, _43)</td></tr></table>>];
    bb27__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_46 = Eq(const 50_i128, const -1_i128)<br/>_47 = Eq(_43, const i128::MIN)<br/>_48 = BitAnd(move _46, move _47)<br/></td></tr><tr><td align="left">assert(!move _48, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _43, const 50_i128)</td></tr></table>>];
    bb28__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_42 = Div(move _43, const 50_i128)<br/>StorageDead(_43)<br/>_39 = Le(move _41, move _42)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = _12<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_52 = Eq(const _, const i128::MIN)<br/></td></tr><tr><td align="left">assert(!move _52, &quot;attempt to negate `{}`, which would overflow&quot;, const _)</td></tr></table>>];
    bb30__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_51 = Neg(const _)<br/>_53 = Eq(const 33_i128, const 0_i128)<br/></td></tr><tr><td align="left">assert(!move _53, &quot;attempt to divide `{}` by zero&quot;, _51)</td></tr></table>>];
    bb31__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_54 = Eq(const 33_i128, const -1_i128)<br/>_55 = Eq(_51, const i128::MIN)<br/>_56 = BitAnd(move _54, move _55)<br/></td></tr><tr><td align="left">assert(!move _56, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _51, const 33_i128)</td></tr></table>>];
    bb32__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_50 = Div(move _51, const 33_i128)<br/>StorageDead(_51)<br/>_39 = Le(move _49, move _50)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_57)<br/>_57 = _12<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>_60 = Eq(const _, const i128::MIN)<br/></td></tr><tr><td align="left">assert(!move _60, &quot;attempt to negate `{}`, which would overflow&quot;, const _)</td></tr></table>>];
    bb34__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_59 = Neg(const _)<br/>_61 = Eq(const 25_i128, const 0_i128)<br/></td></tr><tr><td align="left">assert(!move _61, &quot;attempt to divide `{}` by zero&quot;, _59)</td></tr></table>>];
    bb35__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_62 = Eq(const 25_i128, const -1_i128)<br/>_63 = Eq(_59, const i128::MIN)<br/>_64 = BitAnd(move _62, move _63)<br/></td></tr><tr><td align="left">assert(!move _64, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _59, const 25_i128)</td></tr></table>>];
    bb36__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_58 = Div(move _59, const 25_i128)<br/>StorageDead(_59)<br/>_39 = Le(move _57, move _58)<br/>StorageDead(_58)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_67 = Neg(const _)<br/>_69 = Eq(const 20_i128, const 0_i128)<br/></td></tr><tr><td align="left">assert(!move _69, &quot;attempt to divide `{}` by zero&quot;, _67)</td></tr></table>>];
    bb38__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">_70 = Eq(const 20_i128, const -1_i128)<br/>_71 = Eq(_67, const i128::MIN)<br/>_72 = BitAnd(move _70, move _71)<br/></td></tr><tr><td align="left">assert(!move _72, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _67, const 20_i128)</td></tr></table>>];
    bb39__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">_66 = Div(move _67, const 20_i128)<br/>StorageDead(_67)<br/>_39 = Le(move _65, move _66)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_73)<br/>_73 = _39<br/></td></tr><tr><td align="left">switchInt(move _73)</td></tr></table>>];
    bb41__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>_97 = const _<br/>_85 = &amp;(*_97)<br/>_84 = &amp;(*_85)<br/>_83 = move _84 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_84)<br/>StorageLive(_87)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_93 = &amp;_12<br/>_92 = &amp;(*_93)<br/></td></tr><tr><td align="left">_91 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i128&gt;(move _92)</td></tr></table>>];
    bb42__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = &amp;(((*_1).1: state::perp_market::AMM).49: i64)<br/>_95 = &amp;(*_96)<br/></td></tr><tr><td align="left">_94 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i64&gt;(move _95)</td></tr></table>>];
    bb43__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>_90 = [move _91, move _94]<br/>StorageDead(_94)<br/>StorageDead(_91)<br/>_89 = &amp;_90<br/>_88 = &amp;(*_89)<br/>_87 = move _88 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_88)<br/></td></tr><tr><td align="left">_82 = Arguments::&lt;'_&gt;::new_v1(move _83, move _87)</td></tr></table>>];
    bb44__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_87)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">_81 = format(move _82)</td></tr></table>>];
    bb45__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_96)<br/>StorageDead(_93)<br/>StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_85)<br/>_80 = move _81<br/>StorageDead(_81)<br/>_79 = &amp;_80<br/>_78 = &amp;(*_79)<br/></td></tr><tr><td align="left">_77 = &lt;String as Deref&gt;::deref(move _78)</td></tr></table>>];
    bb46__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">_76 = &amp;(*_77)<br/>StorageDead(_78)<br/></td></tr><tr><td align="left">_75 = solana_program::log::sol_log(move _76)</td></tr></table>>];
    bb47__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/></td></tr><tr><td align="left">drop(_80)</td></tr></table>>];
    bb48__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/>StorageDead(_79)<br/>StorageDead(_77)<br/>StorageDead(_75)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/>StorageDead(_73)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">_10 = const ()<br/>StorageDead(_73)<br/>StorageDead(_39)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">_10 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const false)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb53__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left">return</td></tr></table>>];
    bb56__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">56 (cleanup)</td></tr><tr><td align="left">drop(_80)</td></tr></table>>];
    bb57__0_3793 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">57 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_3793 -> bb2__0_3793 [label="0"];
    bb0__0_3793 -> bb2__0_3793 [label="1"];
    bb0__0_3793 -> bb1__0_3793 [label="otherwise"];
    bb1__0_3793 -> bb4__0_3793 [label="success"];
    bb2__0_3793 -> bb3__0_3793 [label="success"];
    bb3__0_3793 -> bb5__0_3793 [label=""];
    bb4__0_3793 -> bb5__0_3793 [label=""];
    bb5__0_3793 -> bb50__0_3793 [label="0"];
    bb5__0_3793 -> bb6__0_3793 [label="otherwise"];
    bb6__0_3793 -> bb7__0_3793 [label="return"];
    bb7__0_3793 -> bb8__0_3793 [label="return"];
    bb8__0_3793 -> bb9__0_3793 [label="0"];
    bb8__0_3793 -> bb11__0_3793 [label="1"];
    bb8__0_3793 -> bb10__0_3793 [label="otherwise"];
    bb9__0_3793 -> bb13__0_3793 [label="return"];
    bb11__0_3793 -> bb12__0_3793 [label="return"];
    bb12__0_3793 -> bb52__0_3793 [label=""];
    bb13__0_3793 -> bb14__0_3793 [label="return"];
    bb14__0_3793 -> bb15__0_3793 [label="0"];
    bb14__0_3793 -> bb16__0_3793 [label="1"];
    bb14__0_3793 -> bb10__0_3793 [label="otherwise"];
    bb15__0_3793 -> bb18__0_3793 [label="return"];
    bb16__0_3793 -> bb17__0_3793 [label="return"];
    bb17__0_3793 -> bb52__0_3793 [label=""];
    bb18__0_3793 -> bb19__0_3793 [label="return"];
    bb19__0_3793 -> bb20__0_3793 [label="return"];
    bb20__0_3793 -> bb21__0_3793 [label="0"];
    bb20__0_3793 -> bb22__0_3793 [label="1"];
    bb20__0_3793 -> bb10__0_3793 [label="otherwise"];
    bb21__0_3793 -> bb25__0_3793 [label="0"];
    bb21__0_3793 -> bb29__0_3793 [label="1"];
    bb21__0_3793 -> bb33__0_3793 [label="2"];
    bb21__0_3793 -> bb24__0_3793 [label="otherwise"];
    bb22__0_3793 -> bb23__0_3793 [label="return"];
    bb23__0_3793 -> bb53__0_3793 [label=""];
    bb24__0_3793 -> bb37__0_3793 [label="success"];
    bb25__0_3793 -> bb26__0_3793 [label="success"];
    bb26__0_3793 -> bb27__0_3793 [label="success"];
    bb27__0_3793 -> bb28__0_3793 [label="success"];
    bb28__0_3793 -> bb40__0_3793 [label=""];
    bb29__0_3793 -> bb30__0_3793 [label="success"];
    bb30__0_3793 -> bb31__0_3793 [label="success"];
    bb31__0_3793 -> bb32__0_3793 [label="success"];
    bb32__0_3793 -> bb40__0_3793 [label=""];
    bb33__0_3793 -> bb34__0_3793 [label="success"];
    bb34__0_3793 -> bb35__0_3793 [label="success"];
    bb35__0_3793 -> bb36__0_3793 [label="success"];
    bb36__0_3793 -> bb40__0_3793 [label=""];
    bb37__0_3793 -> bb38__0_3793 [label="success"];
    bb38__0_3793 -> bb39__0_3793 [label="success"];
    bb39__0_3793 -> bb40__0_3793 [label=""];
    bb40__0_3793 -> bb49__0_3793 [label="0"];
    bb40__0_3793 -> bb41__0_3793 [label="otherwise"];
    bb41__0_3793 -> bb42__0_3793 [label="return"];
    bb42__0_3793 -> bb43__0_3793 [label="return"];
    bb43__0_3793 -> bb44__0_3793 [label="return"];
    bb44__0_3793 -> bb45__0_3793 [label="return"];
    bb45__0_3793 -> bb46__0_3793 [label="return"];
    bb45__0_3793 -> bb56__0_3793 [label="unwind"];
    bb46__0_3793 -> bb47__0_3793 [label="return"];
    bb46__0_3793 -> bb56__0_3793 [label="unwind"];
    bb47__0_3793 -> bb48__0_3793 [label="return"];
    bb47__0_3793 -> bb57__0_3793 [label="unwind"];
    bb48__0_3793 -> bb54__0_3793 [label=""];
    bb49__0_3793 -> bb51__0_3793 [label=""];
    bb50__0_3793 -> bb51__0_3793 [label=""];
    bb51__0_3793 -> bb55__0_3793 [label=""];
    bb52__0_3793 -> bb53__0_3793 [label=""];
    bb53__0_3793 -> bb54__0_3793 [label=""];
    bb54__0_3793 -> bb55__0_3793 [label=""];
    bb56__0_3793 -> bb57__0_3793 [label="return"];
}
