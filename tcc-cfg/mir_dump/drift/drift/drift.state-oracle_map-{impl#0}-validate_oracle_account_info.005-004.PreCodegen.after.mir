// MIR for `oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::validate_oracle_account_info` after PreCodegen

fn oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::validate_oracle_account_info(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<(), error::ErrorCode> {
    debug account_info => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let _6: anchor_lang::prelude::Pubkey;
    let mut _7: !;
    let mut _8: ();
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let _12: state::oracle_map::OracleMap<'_>;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle_map::OracleMap<'_>>;
    let mut _14: std::result::Result<state::oracle_map::OracleMap<'_>, error::ErrorCode>;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: std::option::Option<state::state::OracleGuardRails>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: state::oracle_map::OracleMap<'_>;
    let mut _22: ();
    let _23: error::ErrorCode;
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[&str; 2];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let mut _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: &error::ErrorCode;
    let _42: &error::ErrorCode;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let mut _46: error::ErrorCode;
    let mut _48: &anchor_lang::prelude::Pubkey;
    let mut _49: bool;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    scope 1 {
        debug residual => _18;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _21;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _23;
        let _30: std::string::String;
        let mut _47: &[&str; 2];
        scope 6 {
            debug res => _30;
        }
    }

    bb0: {
        _49 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _48 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _4 = &(*_48);
        StorageLive(_5);
        StorageLive(_6);
        _6 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        _8 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb22;
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_1);
        StorageLive(_16);
        _16 = Option::<state::state::OracleGuardRails>::None;
        _14 = OracleMap::<'_>::load_one(move _15, const 0_u64, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as Try>::branch(move _14) -> [return: bb6, unwind: bb25];
    }

    bb6: {
        _49 = const true;
        StorageDead(_14);
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_21);
        _21 = move ((_13 as Continue).0: state::oracle_map::OracleMap<'_>);
        _12 = move _21;
        StorageDead(_21);
        _11 = &(_12.0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>);
        _10 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::len(move _11) -> [return: bb11, unwind: bb24];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_18);
        _18 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb10, unwind: bb28];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_11);
        _50 = discriminant(_13);
        _49 = const false;
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb22;
    }

    bb11: {
        StorageDead(_11);
        _9 = Eq(move _10, const 1_usize);
        switchInt(move _9) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        drop(_12) -> [return: bb26, unwind: bb28];
    }

    bb13: {
        drop(_12) -> [return: bb27, unwind: bb28];
    }

    bb14: {
        StorageDead(_41);
        _39 = [move _40];
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_37);
        _31 = Arguments::<'_>::new_v1(move _32, move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = format(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_31);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        _29 = move _30;
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = <String as Deref>::deref(move _27) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _25 = &(*_26);
        StorageDead(_27);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        StorageDead(_25);
        drop(_29) -> [return: bb19, unwind: bb25];
    }

    bb19: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = const "oracle owner not recognizable";
        _44 = &(*_45);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_45);
        StorageDead(_43);
        StorageLive(_46);
        _46 = _23;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _46);
        StorageDead(_46);
        StorageDead(_23);
        goto -> bb21;
    }

    bb21: {
        StorageDead(_9);
        goto -> bb22;
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_29) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_12) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        _52 = discriminant(_13);
        _49 = const false;
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_22);
        _22 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        goto -> bb21;
    }

    bb27: {
        _54 = discriminant(_13);
        _49 = const false;
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_23);
        _23 = error::ErrorCode::InvalidOracle;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _47 = const _;
        _34 = &(*_47);
        _33 = &(*_34);
        _32 = move _33 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_23;
        _41 = &(*_42);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _41) -> [return: bb14, unwind continue];
    }

    bb28 (cleanup): {
        _56 = discriminant(_13);
        goto -> bb25;
    }
}
