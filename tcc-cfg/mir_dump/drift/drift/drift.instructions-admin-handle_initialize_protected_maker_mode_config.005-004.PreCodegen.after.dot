digraph Mir_0_1123 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn admin::handle_initialize_protected_maker_mode_config(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::admin::InitializeProtectedMakerModeConfig&lt;ReErased&gt;&gt;, _2: u32) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let mut _3: std::cell::RefMut&lt;ReErased, state::protected_maker_mode_config::ProtectedMakerModeConfig&gt;;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;, std::cell::RefMut&lt;ReErased, state::protected_maker_mode_config::ProtectedMakerModeConfig&gt;&gt;;<br align="left"/>let mut _5: std::result::Result&lt;std::cell::RefMut&lt;ReErased, state::protected_maker_mode_config::ProtectedMakerModeConfig&gt;, anchor_lang::error::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased anchor_lang::prelude::AccountLoader&lt;ReErased, state::protected_maker_mode_config::ProtectedMakerModeConfig&gt;;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;;<br align="left"/>let _11: std::cell::RefMut&lt;ReErased, state::protected_maker_mode_config::ProtectedMakerModeConfig&gt;;<br align="left"/>let mut _12: u32;<br align="left"/>let mut _13: &amp;ReErased mut state::protected_maker_mode_config::ProtectedMakerModeConfig;<br align="left"/>let mut _14: &amp;ReErased mut std::cell::RefMut&lt;ReErased, state::protected_maker_mode_config::ProtectedMakerModeConfig&gt;;<br align="left"/>let mut _15: ();<br align="left"/>let mut _16: &amp;ReErased mut instructions::admin::InitializeProtectedMakerModeConfig&lt;ReErased&gt;;<br align="left"/>let mut _17: isize;<br align="left"/>let mut _18: isize;<br align="left"/>let mut _19: isize;<br align="left"/>let mut _20: isize;<br align="left"/>let mut _21: isize;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug max_users =&gt; _2;<br align="left"/>debug config =&gt; _3;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>>;
    bb0__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_16 = deref_copy (_1.1: &amp;mut instructions::admin::InitializeProtectedMakerModeConfig&lt;'_&gt;)<br/>_6 = &amp;((*_16).1: anchor_lang::prelude::AccountLoader&lt;'_, state::protected_maker_mode_config::ProtectedMakerModeConfig&gt;)<br/></td></tr><tr><td align="left">_5 = anchor_lang::prelude::AccountLoader::&lt;'_, ProtectedMakerModeConfig&gt;::load_init(move _6)</td></tr></table>>];
    bb1__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;RefMut&lt;'_, ProtectedMakerModeConfig&gt;, anchor_lang::error::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = move ((_4 as Continue).0: std::cell::RefMut&lt;'_, state::protected_maker_mode_config::ProtectedMakerModeConfig&gt;)<br/>_3 = move _11<br/>StorageDead(_11)<br/>_17 = discriminant(_4)<br/>StorageDead(_4)<br/>StorageLive(_12)<br/>_12 = _2<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>_14 = &amp;mut _3<br/></td></tr><tr><td align="left">_13 = &lt;RefMut&lt;'_, ProtectedMakerModeConfig&gt; as DerefMut&gt;::deref_mut(move _14)</td></tr></table>>];
    bb4__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, anchor_lang::error::Error&gt;)<br/>StorageLive(_10)<br/>_10 = move _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, anchor_lang::error::Error&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>_19 = discriminant(_4)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>((*_13).0: u32) = move _12<br/>StorageDead(_12)<br/>StorageDead(_13)<br/>StorageLive(_15)<br/>_15 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _15)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb8__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left">return</td></tr></table>>];
    bb10__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">drop(_3)</td></tr></table>>];
    bb11__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb12__0_1123 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">12 (cleanup)</td></tr><tr><td align="left" balign="left">_21 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_1123 -> bb1__0_1123 [label="return"];
    bb1__0_1123 -> bb2__0_1123 [label="return"];
    bb1__0_1123 -> bb11__0_1123 [label="unwind"];
    bb2__0_1123 -> bb3__0_1123 [label="0"];
    bb2__0_1123 -> bb5__0_1123 [label="1"];
    bb2__0_1123 -> bb4__0_1123 [label="otherwise"];
    bb3__0_1123 -> bb7__0_1123 [label="return"];
    bb3__0_1123 -> bb10__0_1123 [label="unwind"];
    bb5__0_1123 -> bb6__0_1123 [label="return"];
    bb5__0_1123 -> bb12__0_1123 [label="unwind"];
    bb6__0_1123 -> bb9__0_1123 [label=""];
    bb7__0_1123 -> bb8__0_1123 [label="return"];
    bb7__0_1123 -> bb11__0_1123 [label="unwind"];
    bb8__0_1123 -> bb9__0_1123 [label=""];
    bb10__0_1123 -> bb11__0_1123 [label="return"];
    bb12__0_1123 -> bb11__0_1123 [label=""];
}
