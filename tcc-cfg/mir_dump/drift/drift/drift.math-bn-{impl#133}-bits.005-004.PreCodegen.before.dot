digraph Mir_0_14479 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U192::bits(_1: &amp;ReErased math::bn::U192) -&gt; usize<br align="left"/>let _2: &amp;ReErased [u64; 3_usize];<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _5: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _6: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _7: ();<br align="left"/>let _8: ();<br align="left"/>let mut _9: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _10: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _11: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: isize;<br align="left"/>let mut _13: !;<br align="left"/>let _14: usize;<br align="left"/>let mut _15: bool;<br align="left"/>let mut _16: u64;<br align="left"/>let _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: (usize, bool);<br align="left"/>let mut _20: usize;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: usize;<br align="left"/>let mut _24: usize;<br align="left"/>let mut _25: usize;<br align="left"/>let mut _26: usize;<br align="left"/>let mut _27: (usize, bool);<br align="left"/>let mut _28: (usize, bool);<br align="left"/>let mut _29: (usize, bool);<br align="left"/>let mut _30: usize;<br align="left"/>let mut _31: u32;<br align="left"/>let mut _32: u64;<br align="left"/>let _33: usize;<br align="left"/>let mut _34: usize;<br align="left"/>let mut _35: (usize, bool);<br align="left"/>let mut _36: usize;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: (usize, bool);<br align="left"/>let mut _39: usize;<br align="left"/>let mut _40: u32;<br align="left"/>let mut _41: u64;<br align="left"/>let _42: usize;<br align="left"/>let mut _43: usize;<br align="left"/>let mut _44: bool;<br align="left"/>let mut _45: (usize, bool);<br align="left"/>debug self =&gt; _1;<br align="left"/>debug arr =&gt; _2;<br align="left"/>debug iter =&gt; _6;<br align="left"/>debug i =&gt; _14;<br align="left"/>>;
    bb0__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = &amp;((*_1).0: [u64; 3])<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = std::ops::Range::&lt;usize&gt; { start: const 1_usize, end: const 3_usize }<br/></td></tr><tr><td align="left">_4 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _5)</td></tr></table>>];
    bb1__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>_6 = move _4<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;mut _6<br/>_10 = &amp;mut (*_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _10)</td></tr></table>>];
    bb3__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_12 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_9 as Some).0: usize)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _14<br/>_19 = CheckedSub(const 3_usize, _18)<br/></td></tr><tr><td align="left">assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 3_usize, move _18)</td></tr></table>>];
    bb5__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_3 = const ()<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = const 0_usize<br/>_43 = Len((*_2))<br/>_44 = Lt(_42, _43)<br/></td></tr><tr><td align="left">assert(move _44, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _43, _42)</td></tr></table>>];
    bb7__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = move (_19.0: usize)<br/>StorageDead(_18)<br/>_20 = Len((*_2))<br/>_21 = Lt(_17, _20)<br/></td></tr><tr><td align="left">assert(move _21, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _20, _17)</td></tr></table>>];
    bb8__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_16 = (*_2)[_17]<br/>_15 = Gt(move _16, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb9__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _14<br/>_27 = CheckedSub(const 3_usize, _26)<br/></td></tr><tr><td align="left">assert(!move (_27.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 3_usize, move _26)</td></tr></table>>];
    bb10__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_25 = move (_27.0: usize)<br/>StorageDead(_26)<br/>_28 = CheckedAdd(_25, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_28.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, move _25, const 1_usize)</td></tr></table>>];
    bb11__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_24 = move (_28.0: usize)<br/>StorageDead(_25)<br/>_29 = CheckedMul(const 64_usize, _24)<br/></td></tr><tr><td align="left">assert(!move (_29.1: bool), &quot;attempt to compute `{} * {}`, which would overflow&quot;, const 64_usize, move _24)</td></tr></table>>];
    bb12__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_23 = move (_29.0: usize)<br/>StorageDead(_24)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _14<br/>_35 = CheckedSub(const 3_usize, _34)<br/></td></tr><tr><td align="left">assert(!move (_35.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 3_usize, move _34)</td></tr></table>>];
    bb13__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_33 = move (_35.0: usize)<br/>StorageDead(_34)<br/>_36 = Len((*_2))<br/>_37 = Lt(_33, _36)<br/></td></tr><tr><td align="left">assert(move _37, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _36, _33)</td></tr></table>>];
    bb14__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_32 = (*_2)[_33]<br/></td></tr><tr><td align="left">_31 = core::num::&lt;impl u64&gt;::leading_zeros(move _32)</td></tr></table>>];
    bb15__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_30 = move _31 as usize (IntToInt)<br/>StorageDead(_31)<br/>_38 = CheckedSub(_23, _30)<br/></td></tr><tr><td align="left">assert(!move (_38.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _23, move _30)</td></tr></table>>];
    bb16__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_0 = move (_38.0: usize)<br/>StorageDead(_30)<br/>StorageDead(_23)<br/>StorageDead(_33)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_16)<br/>_8 = const ()<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>_7 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">_41 = (*_2)[_42]<br/></td></tr><tr><td align="left">_40 = core::num::&lt;impl u64&gt;::leading_zeros(move _41)</td></tr></table>>];
    bb19__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_39 = move _40 as usize (IntToInt)<br/>StorageDead(_40)<br/>_45 = CheckedSub(const 64_usize, _39)<br/></td></tr><tr><td align="left">assert(!move (_45.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 64_usize, move _39)</td></tr></table>>];
    bb20__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_0 = move (_45.0: usize)<br/>StorageDead(_39)<br/>StorageDead(_2)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_14479 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_14479 -> bb1__0_14479 [label="return"];
    bb1__0_14479 -> bb2__0_14479 [label=""];
    bb2__0_14479 -> bb3__0_14479 [label="return"];
    bb3__0_14479 -> bb6__0_14479 [label="0"];
    bb3__0_14479 -> bb4__0_14479 [label="1"];
    bb3__0_14479 -> bb5__0_14479 [label="otherwise"];
    bb4__0_14479 -> bb7__0_14479 [label="success"];
    bb6__0_14479 -> bb18__0_14479 [label="success"];
    bb7__0_14479 -> bb8__0_14479 [label="success"];
    bb8__0_14479 -> bb17__0_14479 [label="0"];
    bb8__0_14479 -> bb9__0_14479 [label="otherwise"];
    bb9__0_14479 -> bb10__0_14479 [label="success"];
    bb10__0_14479 -> bb11__0_14479 [label="success"];
    bb11__0_14479 -> bb12__0_14479 [label="success"];
    bb12__0_14479 -> bb13__0_14479 [label="success"];
    bb13__0_14479 -> bb14__0_14479 [label="success"];
    bb14__0_14479 -> bb15__0_14479 [label="return"];
    bb15__0_14479 -> bb16__0_14479 [label="success"];
    bb16__0_14479 -> bb21__0_14479 [label=""];
    bb17__0_14479 -> bb2__0_14479 [label=""];
    bb18__0_14479 -> bb19__0_14479 [label="return"];
    bb19__0_14479 -> bb20__0_14479 [label="success"];
    bb20__0_14479 -> bb21__0_14479 [label=""];
}
