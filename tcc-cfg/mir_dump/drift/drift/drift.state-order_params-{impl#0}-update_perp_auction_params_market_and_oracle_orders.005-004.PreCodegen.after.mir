// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::update_perp_auction_params_market_and_oracle_orders` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::update_perp_auction_params_market_and_oracle_orders(_1: &mut order_params::OrderParams, _2: &PerpMarket, _3: i64, _4: bool, _5: bool) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug perp_market => _2;
    debug oracle_price => _3;
    debug is_market_order => _4;
    debug is_signed_msg => _5;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let mut _6: !;
    let _7: std::option::Option<u8>;
    let _10: ();
    let mut _11: bool;
    let mut _12: &std::option::Option<u8>;
    let mut _13: bool;
    let mut _14: &std::option::Option<i64>;
    let mut _15: bool;
    let mut _16: &std::option::Option<i64>;
    let mut _17: !;
    let mut _21: (i64, i64, u8);
    let mut _22: bool;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64, u8)>;
    let mut _24: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let mut _25: &state::perp_market::PerpMarket;
    let mut _26: controller::position::PositionDirection;
    let mut _27: i64;
    let mut _28: u64;
    let mut _29: i64;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64, u8)>;
    let mut _40: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let mut _41: &state::perp_market::PerpMarket;
    let mut _42: controller::position::PositionDirection;
    let mut _43: i64;
    let mut _44: std::option::Option<i32>;
    let mut _45: i64;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: std::option::Option<i64>;
    let mut _56: i64;
    let mut _57: std::option::Option<i64>;
    let mut _58: i64;
    let mut _59: std::option::Option<u8>;
    let mut _60: u8;
    let _61: ();
    let mut _62: &str;
    let _63: &str;
    let mut _64: &std::string::String;
    let _65: &std::string::String;
    let _66: std::string::String;
    let mut _68: std::fmt::Arguments<'_>;
    let mut _69: &[&str];
    let mut _70: &[&str; 1];
    let _71: &[&str; 1];
    let _72: [&str; 1];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let mut _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: [core::fmt::rt::Argument<'_>; 1];
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &i64;
    let _79: &i64;
    let _80: i64;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _82: std::result::Result<i64, error::ErrorCode>;
    let mut _83: std::option::Option<i64>;
    let mut _84: isize;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _89: ();
    let mut _90: &str;
    let _91: &str;
    let mut _92: &std::string::String;
    let _93: &std::string::String;
    let _94: std::string::String;
    let mut _96: std::fmt::Arguments<'_>;
    let mut _97: &[&str];
    let mut _98: &[&str; 1];
    let _99: &[&str; 1];
    let _100: [&str; 1];
    let mut _101: &[core::fmt::rt::Argument<'_>];
    let mut _102: &[core::fmt::rt::Argument<'_>; 1];
    let _103: &[core::fmt::rt::Argument<'_>; 1];
    let _104: [core::fmt::rt::Argument<'_>; 1];
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &i64;
    let _107: &i64;
    let _108: i64;
    let mut _109: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _110: std::result::Result<i64, error::ErrorCode>;
    let mut _111: std::option::Option<i64>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _117: ();
    let mut _118: &str;
    let _119: &str;
    let mut _120: &std::string::String;
    let _121: &std::string::String;
    let _122: std::string::String;
    let mut _124: std::fmt::Arguments<'_>;
    let mut _125: &[&str];
    let mut _126: &[&str; 1];
    let _127: &[&str; 1];
    let _128: [&str; 1];
    let mut _129: &[core::fmt::rt::Argument<'_>];
    let mut _130: &[core::fmt::rt::Argument<'_>; 1];
    let _131: &[core::fmt::rt::Argument<'_>; 1];
    let _132: [core::fmt::rt::Argument<'_>; 1];
    let mut _133: core::fmt::rt::Argument<'_>;
    let mut _134: &u8;
    let _135: &u8;
    let _136: u8;
    let mut _137: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _138: std::result::Result<u8, error::ErrorCode>;
    let mut _139: std::option::Option<u8>;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _145: ();
    let mut _146: bool;
    let mut _147: &state::perp_market::PerpMarket;
    let mut _150: (i64, i64);
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _152: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _153: &state::perp_market::PerpMarket;
    let mut _154: controller::position::PositionDirection;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _162: std::result::Result<i64, error::ErrorCode>;
    let mut _163: state::order_params::OrderParams;
    let mut _164: i64;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _172: std::result::Result<i64, error::ErrorCode>;
    let mut _173: state::order_params::OrderParams;
    let mut _174: i64;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _181: bool;
    let mut _182: &state::perp_market::ContractTier;
    let mut _183: &state::perp_market::ContractTier;
    let _184: &state::perp_market::ContractTier;
    let _185: state::perp_market::ContractTier;
    let mut _186: isize;
    let mut _188: bool;
    let mut _189: bool;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _191: std::result::Result<i64, error::ErrorCode>;
    let mut _192: i64;
    let mut _193: i64;
    let mut _194: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _195: std::result::Result<i64, error::ErrorCode>;
    let mut _196: i64;
    let mut _197: i64;
    let mut _198: isize;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _203: isize;
    let mut _205: !;
    let mut _206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _212: std::result::Result<i64, error::ErrorCode>;
    let mut _213: i64;
    let mut _214: i64;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _216: std::result::Result<i64, error::ErrorCode>;
    let mut _217: i64;
    let mut _218: i64;
    let mut _219: isize;
    let mut _221: !;
    let mut _222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _224: isize;
    let mut _226: !;
    let mut _227: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _229: ();
    let mut _230: bool;
    let mut _231: i64;
    let mut _232: i64;
    let mut _233: std::option::Option<i64>;
    let mut _234: bool;
    let mut _235: i64;
    let mut _236: i64;
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _238: std::result::Result<i64, error::ErrorCode>;
    let mut _239: i64;
    let mut _240: i64;
    let mut _241: isize;
    let mut _243: !;
    let mut _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _246: ();
    let mut _247: &str;
    let _248: &str;
    let mut _249: &std::string::String;
    let _250: &std::string::String;
    let _251: std::string::String;
    let mut _253: std::fmt::Arguments<'_>;
    let mut _254: &[&str];
    let mut _255: &[&str; 1];
    let _256: &[&str; 1];
    let _257: [&str; 1];
    let mut _258: &[core::fmt::rt::Argument<'_>];
    let mut _259: &[core::fmt::rt::Argument<'_>; 1];
    let _260: &[core::fmt::rt::Argument<'_>; 1];
    let _261: [core::fmt::rt::Argument<'_>; 1];
    let mut _262: core::fmt::rt::Argument<'_>;
    let mut _263: &i64;
    let _264: &i64;
    let _265: i64;
    let mut _266: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _267: std::result::Result<i64, error::ErrorCode>;
    let mut _268: std::option::Option<i64>;
    let mut _269: isize;
    let mut _271: !;
    let mut _272: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _274: bool;
    let mut _275: i64;
    let mut _276: i64;
    let mut _277: std::option::Option<i64>;
    let mut _278: bool;
    let mut _279: i64;
    let mut _280: i64;
    let mut _281: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _282: std::result::Result<i64, error::ErrorCode>;
    let mut _283: i64;
    let mut _284: i64;
    let mut _285: isize;
    let mut _287: !;
    let mut _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _290: ();
    let mut _291: &str;
    let _292: &str;
    let mut _293: &std::string::String;
    let _294: &std::string::String;
    let _295: std::string::String;
    let mut _297: std::fmt::Arguments<'_>;
    let mut _298: &[&str];
    let mut _299: &[&str; 1];
    let _300: &[&str; 1];
    let _301: [&str; 1];
    let mut _302: &[core::fmt::rt::Argument<'_>];
    let mut _303: &[core::fmt::rt::Argument<'_>; 1];
    let _304: &[core::fmt::rt::Argument<'_>; 1];
    let _305: [core::fmt::rt::Argument<'_>; 1];
    let mut _306: core::fmt::rt::Argument<'_>;
    let mut _307: &i64;
    let _308: &i64;
    let _309: i64;
    let mut _310: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _311: std::result::Result<i64, error::ErrorCode>;
    let mut _312: std::option::Option<i64>;
    let mut _313: isize;
    let mut _315: !;
    let mut _316: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _319: bool;
    let mut _320: bool;
    let mut _321: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _322: std::result::Result<i64, error::ErrorCode>;
    let mut _323: i64;
    let mut _324: i64;
    let mut _325: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _326: std::result::Result<i64, error::ErrorCode>;
    let mut _327: i64;
    let mut _328: i64;
    let mut _329: isize;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _334: isize;
    let mut _336: !;
    let mut _337: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _340: bool;
    let mut _341: bool;
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _343: std::result::Result<i64, error::ErrorCode>;
    let mut _344: i64;
    let mut _345: i64;
    let mut _346: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _347: std::result::Result<i64, error::ErrorCode>;
    let mut _348: i64;
    let mut _349: i64;
    let mut _350: isize;
    let mut _352: !;
    let mut _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _355: isize;
    let mut _357: !;
    let mut _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _360: ();
    let mut _361: bool;
    let mut _362: i64;
    let mut _363: i64;
    let mut _364: std::option::Option<i64>;
    let mut _365: bool;
    let mut _366: i64;
    let mut _367: i64;
    let mut _368: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _369: std::result::Result<i64, error::ErrorCode>;
    let mut _370: i64;
    let mut _371: i64;
    let mut _372: isize;
    let mut _374: !;
    let mut _375: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _377: ();
    let mut _378: &str;
    let _379: &str;
    let mut _380: &std::string::String;
    let _381: &std::string::String;
    let _382: std::string::String;
    let mut _384: std::fmt::Arguments<'_>;
    let mut _385: &[&str];
    let mut _386: &[&str; 1];
    let _387: &[&str; 1];
    let _388: [&str; 1];
    let mut _389: &[core::fmt::rt::Argument<'_>];
    let mut _390: &[core::fmt::rt::Argument<'_>; 1];
    let _391: &[core::fmt::rt::Argument<'_>; 1];
    let _392: [core::fmt::rt::Argument<'_>; 1];
    let mut _393: core::fmt::rt::Argument<'_>;
    let mut _394: &i64;
    let _395: &i64;
    let _396: i64;
    let mut _397: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _398: std::result::Result<i64, error::ErrorCode>;
    let mut _399: std::option::Option<i64>;
    let mut _400: isize;
    let mut _402: !;
    let mut _403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _405: bool;
    let mut _406: i64;
    let mut _407: i64;
    let mut _408: std::option::Option<i64>;
    let mut _409: bool;
    let mut _410: i64;
    let mut _411: i64;
    let mut _412: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _413: std::result::Result<i64, error::ErrorCode>;
    let mut _414: i64;
    let mut _415: i64;
    let mut _416: isize;
    let mut _418: !;
    let mut _419: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _421: ();
    let mut _422: &str;
    let _423: &str;
    let mut _424: &std::string::String;
    let _425: &std::string::String;
    let _426: std::string::String;
    let mut _428: std::fmt::Arguments<'_>;
    let mut _429: &[&str];
    let mut _430: &[&str; 1];
    let _431: &[&str; 1];
    let _432: [&str; 1];
    let mut _433: &[core::fmt::rt::Argument<'_>];
    let mut _434: &[core::fmt::rt::Argument<'_>; 1];
    let _435: &[core::fmt::rt::Argument<'_>; 1];
    let _436: [core::fmt::rt::Argument<'_>; 1];
    let mut _437: core::fmt::rt::Argument<'_>;
    let mut _438: &i64;
    let _439: &i64;
    let _440: i64;
    let mut _441: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _442: std::result::Result<i64, error::ErrorCode>;
    let mut _443: std::option::Option<i64>;
    let mut _444: isize;
    let mut _446: !;
    let mut _447: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _451: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _452: std::result::Result<u8, error::ErrorCode>;
    let mut _453: u64;
    let mut _454: i64;
    let mut _455: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _456: std::result::Result<i64, error::ErrorCode>;
    let mut _457: i64;
    let mut _458: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _459: std::result::Result<i64, error::ErrorCode>;
    let mut _460: std::option::Option<i64>;
    let mut _461: isize;
    let mut _463: !;
    let mut _464: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _466: i64;
    let mut _467: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _468: std::result::Result<i64, error::ErrorCode>;
    let mut _469: std::option::Option<i64>;
    let mut _470: isize;
    let mut _472: !;
    let mut _473: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _475: isize;
    let mut _477: !;
    let mut _478: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _480: u64;
    let mut _481: i64;
    let mut _482: state::perp_market::ContractTier;
    let mut _483: isize;
    let mut _485: !;
    let mut _486: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _488: ();
    let mut _489: bool;
    let mut _490: u8;
    let mut _491: u8;
    let mut _492: std::option::Option<u8>;
    let mut _493: u8;
    let mut _494: bool;
    let mut _495: std::option::Option<u8>;
    let mut _496: u8;
    let mut _497: u8;
    let mut _498: std::option::Option<u8>;
    let mut _499: u8;
    let _500: ();
    let mut _501: &str;
    let _502: &str;
    let mut _503: &std::string::String;
    let _504: &std::string::String;
    let _505: std::string::String;
    let mut _507: std::fmt::Arguments<'_>;
    let mut _508: &[&str];
    let mut _509: &[&str; 1];
    let _510: &[&str; 1];
    let _511: [&str; 1];
    let mut _512: &[core::fmt::rt::Argument<'_>];
    let mut _513: &[core::fmt::rt::Argument<'_>; 1];
    let _514: &[core::fmt::rt::Argument<'_>; 1];
    let _515: [core::fmt::rt::Argument<'_>; 1];
    let mut _516: core::fmt::rt::Argument<'_>;
    let mut _517: &u8;
    let _518: &u8;
    let _519: u8;
    let mut _520: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _521: std::result::Result<u8, error::ErrorCode>;
    let mut _522: std::option::Option<u8>;
    let mut _523: isize;
    let mut _525: !;
    let mut _526: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _528: bool;
    let mut _529: bool;
    let mut _530: &std::option::Option<u8>;
    let mut _531: &std::option::Option<u8>;
    let mut _532: bool;
    let mut _533: &std::option::Option<i64>;
    let mut _534: &std::option::Option<i64>;
    let mut _535: &std::option::Option<i64>;
    let mut _536: &std::option::Option<i64>;
    scope 1 {
        debug auction_duration => _7;
        let _8: std::option::Option<i64>;
        scope 2 {
            debug auction_start_price => _8;
            let _9: std::option::Option<i64>;
            scope 3 {
                debug auction_end_price => _9;
                let _18: i64;
                let _19: i64;
                let _20: u8;
                let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _38: (i64, i64, u8);
                let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _54: (i64, i64, u8);
                let _148: i64;
                let _149: i64;
                let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _159: (i64, i64);
                let _449: std::option::Option<u8>;
                scope 4 {
                    debug auction_start_price => _18;
                    debug auction_end_price => _19;
                    debug auction_duration => _20;
                    let _67: std::string::String;
                    let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _88: i64;
                    let _95: std::string::String;
                    let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _116: i64;
                    let _123: std::string::String;
                    let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _144: u8;
                    let mut _537: &[&str; 1];
                    let mut _538: &[&str; 1];
                    let mut _539: &[&str; 1];
                    scope 13 {
                        debug res => _67;
                    }
                    scope 14 {
                        debug residual => _85;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _88;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug res => _95;
                    }
                    scope 19 {
                        debug residual => _113;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _116;
                        scope 22 {
                        }
                    }
                    scope 23 {
                        debug res => _123;
                    }
                    scope 24 {
                        debug residual => _141;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _144;
                        scope 27 {
                        }
                    }
                }
                scope 5 {
                    debug residual => _35;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _38;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug residual => _51;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _54;
                    scope 12 {
                    }
                }
                scope 28 {
                    debug new_start_price_offset => _148;
                    debug new_end_price_offset => _149;
                    let _160: i64;
                    let _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _169: i64;
                    scope 33 {
                        debug current_start_price_offset => _160;
                        let _170: i64;
                        let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _179: i64;
                        scope 38 {
                            debug current_end_price_offset => _170;
                            let _180: bool;
                            let mut _545: &state::perp_market::ContractTier;
                            scope 43 {
                                debug is_tail_mkt => _180;
                                let _187: i64;
                                let _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _202: i64;
                                let _204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _207: i64;
                                let _318: i64;
                                let _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _333: i64;
                                let _335: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _338: i64;
                                scope 44 {
                                    debug long_start_threshold => _187;
                                    let _208: i64;
                                    let _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _223: i64;
                                    let _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _228: i64;
                                    scope 53 {
                                        debug long_end_threshold => _208;
                                        let _242: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _245: i64;
                                        let _252: std::string::String;
                                        let _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _273: i64;
                                        let _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _289: i64;
                                        let _296: std::string::String;
                                        let _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _317: i64;
                                        let mut _543: &[&str; 1];
                                        let mut _544: &[&str; 1];
                                        scope 62 {
                                            debug residual => _242;
                                            scope 63 {
                                            }
                                        }
                                        scope 64 {
                                            debug val => _245;
                                            scope 65 {
                                            }
                                        }
                                        scope 66 {
                                            debug res => _252;
                                        }
                                        scope 67 {
                                            debug residual => _270;
                                            scope 68 {
                                            }
                                        }
                                        scope 69 {
                                            debug val => _273;
                                            scope 70 {
                                            }
                                        }
                                        scope 71 {
                                            debug residual => _286;
                                            scope 72 {
                                            }
                                        }
                                        scope 73 {
                                            debug val => _289;
                                            scope 74 {
                                            }
                                        }
                                        scope 75 {
                                            debug res => _296;
                                        }
                                        scope 76 {
                                            debug residual => _314;
                                            scope 77 {
                                            }
                                        }
                                        scope 78 {
                                            debug val => _317;
                                            scope 79 {
                                            }
                                        }
                                    }
                                    scope 54 {
                                        debug residual => _220;
                                        scope 55 {
                                        }
                                    }
                                    scope 56 {
                                        debug val => _223;
                                        scope 57 {
                                        }
                                    }
                                    scope 58 {
                                        debug residual => _225;
                                        scope 59 {
                                        }
                                    }
                                    scope 60 {
                                        debug val => _228;
                                        scope 61 {
                                        }
                                    }
                                }
                                scope 45 {
                                    debug residual => _199;
                                    scope 46 {
                                    }
                                }
                                scope 47 {
                                    debug val => _202;
                                    scope 48 {
                                    }
                                }
                                scope 49 {
                                    debug residual => _204;
                                    scope 50 {
                                    }
                                }
                                scope 51 {
                                    debug val => _207;
                                    scope 52 {
                                    }
                                }
                                scope 80 {
                                    debug short_start_threshold => _318;
                                    let _339: i64;
                                    let _351: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _354: i64;
                                    let _356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _359: i64;
                                    scope 89 {
                                        debug short_end_threshold => _339;
                                        let _373: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _376: i64;
                                        let _383: std::string::String;
                                        let _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _404: i64;
                                        let _417: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _420: i64;
                                        let _427: std::string::String;
                                        let _445: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _448: i64;
                                        let mut _541: &[&str; 1];
                                        let mut _542: &[&str; 1];
                                        scope 98 {
                                            debug residual => _373;
                                            scope 99 {
                                            }
                                        }
                                        scope 100 {
                                            debug val => _376;
                                            scope 101 {
                                            }
                                        }
                                        scope 102 {
                                            debug res => _383;
                                        }
                                        scope 103 {
                                            debug residual => _401;
                                            scope 104 {
                                            }
                                        }
                                        scope 105 {
                                            debug val => _404;
                                            scope 106 {
                                            }
                                        }
                                        scope 107 {
                                            debug residual => _417;
                                            scope 108 {
                                            }
                                        }
                                        scope 109 {
                                            debug val => _420;
                                            scope 110 {
                                            }
                                        }
                                        scope 111 {
                                            debug res => _427;
                                        }
                                        scope 112 {
                                            debug residual => _445;
                                            scope 113 {
                                            }
                                        }
                                        scope 114 {
                                            debug val => _448;
                                            scope 115 {
                                            }
                                        }
                                    }
                                    scope 90 {
                                        debug residual => _351;
                                        scope 91 {
                                        }
                                    }
                                    scope 92 {
                                        debug val => _354;
                                        scope 93 {
                                        }
                                    }
                                    scope 94 {
                                        debug residual => _356;
                                        scope 95 {
                                        }
                                    }
                                    scope 96 {
                                        debug val => _359;
                                        scope 97 {
                                        }
                                    }
                                }
                                scope 81 {
                                    debug residual => _330;
                                    scope 82 {
                                    }
                                }
                                scope 83 {
                                    debug val => _333;
                                    scope 84 {
                                    }
                                }
                                scope 85 {
                                    debug residual => _335;
                                    scope 86 {
                                    }
                                }
                                scope 87 {
                                    debug val => _338;
                                    scope 88 {
                                    }
                                }
                            }
                        }
                        scope 39 {
                            debug residual => _176;
                            scope 40 {
                            }
                        }
                        scope 41 {
                            debug val => _179;
                            scope 42 {
                            }
                        }
                    }
                    scope 34 {
                        debug residual => _166;
                        scope 35 {
                        }
                    }
                    scope 36 {
                        debug val => _169;
                        scope 37 {
                        }
                    }
                }
                scope 29 {
                    debug residual => _156;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _159;
                    scope 32 {
                    }
                }
                scope 116 {
                    debug auction_duration_before => _449;
                    let _450: u8;
                    let _462: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _465: i64;
                    let _471: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _474: i64;
                    let _476: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _479: i64;
                    let _484: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _487: u8;
                    scope 117 {
                        debug new_auction_duration => _450;
                        let _506: std::string::String;
                        let _524: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _527: u8;
                        let mut _540: &[&str; 1];
                        scope 134 {
                            debug res => _506;
                        }
                        scope 135 {
                            debug residual => _524;
                            scope 136 {
                            }
                        }
                        scope 137 {
                            debug val => _527;
                            scope 138 {
                            }
                        }
                    }
                    scope 118 {
                        debug residual => _462;
                        scope 119 {
                        }
                    }
                    scope 120 {
                        debug val => _465;
                        scope 121 {
                        }
                    }
                    scope 122 {
                        debug residual => _471;
                        scope 123 {
                        }
                    }
                    scope 124 {
                        debug val => _474;
                        scope 125 {
                        }
                    }
                    scope 126 {
                        debug residual => _476;
                        scope 127 {
                        }
                    }
                    scope 128 {
                        debug val => _479;
                        scope 129 {
                        }
                    }
                    scope 130 {
                        debug residual => _484;
                        scope 131 {
                        }
                    }
                    scope 132 {
                        debug val => _487;
                        scope 133 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_7);
        _7 = ((*_1).14: std::option::Option<u8>);
        StorageLive(_8);
        _8 = ((*_1).15: std::option::Option<i64>);
        StorageLive(_9);
        _9 = ((*_1).16: std::option::Option<i64>);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).14: std::option::Option<u8>);
        _11 = Option::<u8>::is_none(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_12);
        goto -> bb5;
    }

    bb3: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &((*_1).15: std::option::Option<i64>);
        _13 = Option::<i64>::is_none(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_14);
        goto -> bb8;
    }

    bb6: {
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &((*_1).16: std::option::Option<i64>);
        _15 = Option::<i64>::is_none(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _15) -> [0: bb60, otherwise: bb8];
    }

    bb8: {
        StorageDead(_16);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _4;
        switchInt(move _22) -> [0: bb18, otherwise: bb9];
    }

    bb9: {
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_2);
        StorageLive(_26);
        _26 = ((*_1).2: controller::position::PositionDirection);
        StorageLive(_27);
        _27 = _3;
        StorageLive(_28);
        _28 = ((*_1).5: u64);
        StorageLive(_29);
        _30 = Eq(const 400_i64, const 0_i64);
        assert(!move _30, "attempt to divide `{}` by zero", const _) -> [success: bb10, unwind continue];
    }

    bb10: {
        _31 = Eq(const 400_i64, const -1_i64);
        _32 = Eq(const _, const i64::MIN);
        _33 = BitAnd(move _31, move _32);
        assert(!move _33, "attempt to compute `{} / {}`, which would overflow", const _, const 400_i64) -> [success: bb11, unwind continue];
    }

    bb11: {
        _29 = Div(const _, const 400_i64);
        _24 = order_params::OrderParams::derive_market_order_auction_params(move _25, move _26, move _27, move _28, move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        _23 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as Try>::branch(move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        _34 = discriminant(_23);
        switchInt(move _34) -> [0: bb14, 1: bb16, otherwise: bb15];
    }

    bb14: {
        StorageLive(_38);
        _38 = ((_23 as Continue).0: (i64, i64, u8));
        _21 = _38;
        StorageDead(_38);
        StorageDead(_23);
        goto -> bb26;
    }

    bb15: {
        unreachable;
    }

    bb16: {
        StorageLive(_35);
        _35 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_23);
        goto -> bb303;
    }

    bb18: {
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &(*_2);
        StorageLive(_42);
        _42 = ((*_1).2: controller::position::PositionDirection);
        StorageLive(_43);
        _43 = _3;
        StorageLive(_44);
        _44 = ((*_1).13: std::option::Option<i32>);
        StorageLive(_45);
        _46 = Eq(const 400_i64, const 0_i64);
        assert(!move _46, "attempt to divide `{}` by zero", const _) -> [success: bb19, unwind continue];
    }

    bb19: {
        _47 = Eq(const 400_i64, const -1_i64);
        _48 = Eq(const _, const i64::MIN);
        _49 = BitAnd(move _47, move _48);
        assert(!move _49, "attempt to compute `{} / {}`, which would overflow", const _, const 400_i64) -> [success: bb20, unwind continue];
    }

    bb20: {
        _45 = Div(const _, const 400_i64);
        _40 = order_params::OrderParams::derive_oracle_order_auction_params(move _41, move _42, move _43, move _44, move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as Try>::branch(move _40) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_40);
        _50 = discriminant(_39);
        switchInt(move _50) -> [0: bb23, 1: bb24, otherwise: bb15];
    }

    bb23: {
        StorageLive(_54);
        _54 = ((_39 as Continue).0: (i64, i64, u8));
        _21 = _54;
        StorageDead(_54);
        StorageDead(_39);
        goto -> bb26;
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_39);
        goto -> bb303;
    }

    bb26: {
        StorageDead(_22);
        StorageLive(_18);
        _18 = (_21.0: i64);
        StorageLive(_19);
        _19 = (_21.1: i64);
        StorageLive(_20);
        _20 = (_21.2: u8);
        StorageDead(_21);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _18;
        _55 = Option::<i64>::Some(move _56);
        StorageDead(_56);
        ((*_1).15: std::option::Option<i64>) = move _55;
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _19;
        _57 = Option::<i64>::Some(move _58);
        StorageDead(_58);
        ((*_1).16: std::option::Option<i64>) = move _57;
        StorageDead(_57);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _20;
        _59 = Option::<u8>::Some(move _60);
        StorageDead(_60);
        ((*_1).14: std::option::Option<u8>) = move _59;
        StorageDead(_59);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _539 = const _;
        _71 = &(*_539);
        _70 = &(*_71);
        _69 = move _70 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = ((*_1).15: std::option::Option<i64>);
        _82 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _83) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_83);
        _81 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _82) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_82);
        _84 = discriminant(_81);
        switchInt(move _84) -> [0: bb29, 1: bb30, otherwise: bb15];
    }

    bb29: {
        StorageLive(_88);
        _88 = ((_81 as Continue).0: i64);
        _80 = _88;
        StorageDead(_88);
        _79 = &_80;
        _78 = &(*_79);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _78) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_85);
        _85 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_71);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb302;
    }

    bb32: {
        StorageDead(_78);
        _76 = [move _77];
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = move _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_74);
        _68 = Arguments::<'_>::new_v1(move _69, move _73) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_73);
        StorageDead(_69);
        _67 = format(move _68) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_68);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_71);
        _66 = move _67;
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = <String as Deref>::deref(move _64) -> [return: bb35, unwind: bb313];
    }

    bb35: {
        _62 = &(*_63);
        StorageDead(_64);
        _61 = solana_program::log::sol_log(move _62) -> [return: bb36, unwind: bb313];
    }

    bb36: {
        StorageDead(_62);
        drop(_66) -> [return: bb37, unwind: bb314];
    }

    bb37: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _538 = const _;
        _99 = &(*_538);
        _98 = &(*_99);
        _97 = move _98 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_98);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = ((*_1).16: std::option::Option<i64>);
        _110 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _111) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_111);
        _109 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _110) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_110);
        _112 = discriminant(_109);
        switchInt(move _112) -> [0: bb40, 1: bb41, otherwise: bb15];
    }

    bb40: {
        StorageLive(_116);
        _116 = ((_109 as Continue).0: i64);
        _108 = _116;
        StorageDead(_116);
        _107 = &_108;
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _106) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_113);
        _113 = ((_109 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        goto -> bb302;
    }

    bb43: {
        StorageDead(_106);
        _104 = [move _105];
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = move _102 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_102);
        _96 = Arguments::<'_>::new_v1(move _97, move _101) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_101);
        StorageDead(_97);
        _95 = format(move _96) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_96);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_99);
        _94 = move _95;
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        _91 = <String as Deref>::deref(move _92) -> [return: bb46, unwind: bb312];
    }

    bb46: {
        _90 = &(*_91);
        StorageDead(_92);
        _89 = solana_program::log::sol_log(move _90) -> [return: bb47, unwind: bb312];
    }

    bb47: {
        StorageDead(_90);
        drop(_94) -> [return: bb48, unwind: bb314];
    }

    bb48: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _537 = const _;
        _127 = &(*_537);
        _126 = &(*_127);
        _125 = move _126 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_126);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = ((*_1).14: std::option::Option<u8>);
        _138 = <Option<u8> as SafeUnwrap>::safe_unwrap(move _139) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_139);
        _137 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _138) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_138);
        _140 = discriminant(_137);
        switchInt(move _140) -> [0: bb51, 1: bb52, otherwise: bb15];
    }

    bb51: {
        StorageLive(_144);
        _144 = ((_137 as Continue).0: u8);
        _136 = _144;
        StorageDead(_144);
        _135 = &_136;
        _134 = &(*_135);
        _133 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _134) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_141);
        _141 = ((_137 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_124);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_127);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        goto -> bb302;
    }

    bb54: {
        StorageDead(_134);
        _132 = [move _133];
        StorageDead(_133);
        _131 = &_132;
        _130 = &(*_131);
        _129 = move _130 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_130);
        _124 = Arguments::<'_>::new_v1(move _125, move _129) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_129);
        StorageDead(_125);
        _123 = format(move _124) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_124);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_127);
        _122 = move _123;
        StorageDead(_123);
        _121 = &_122;
        _120 = &(*_121);
        _119 = <String as Deref>::deref(move _120) -> [return: bb57, unwind: bb311];
    }

    bb57: {
        _118 = &(*_119);
        StorageDead(_120);
        _117 = solana_program::log::sol_log(move _118) -> [return: bb58, unwind: bb311];
    }

    bb58: {
        StorageDead(_118);
        drop(_122) -> [return: bb59, unwind: bb314];
    }

    bb59: {
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        goto -> bb302;
    }

    bb60: {
        StorageDead(_16);
        _10 = const ();
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &(*_2);
        _146 = PerpMarket::can_sanitize_market_order_auctions(move _147) -> [return: bb61, unwind continue];
    }

    bb61: {
        switchInt(move _146) -> [0: bb230, otherwise: bb62];
    }

    bb62: {
        StorageDead(_147);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &(*_2);
        StorageLive(_154);
        _154 = ((*_1).2: controller::position::PositionDirection);
        _152 = order_params::OrderParams::get_perp_baseline_start_end_price_offset(move _153, move _154, const 2_u64) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_154);
        StorageDead(_153);
        _151 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _152) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_152);
        _155 = discriminant(_151);
        switchInt(move _155) -> [0: bb65, 1: bb66, otherwise: bb15];
    }

    bb65: {
        StorageLive(_159);
        _159 = ((_151 as Continue).0: (i64, i64));
        _150 = _159;
        StorageDead(_159);
        StorageLive(_148);
        _148 = (_150.0: i64);
        StorageLive(_149);
        _149 = (_150.1: i64);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = (*_1);
        StorageLive(_164);
        _164 = _3;
        _162 = order_params::OrderParams::get_auction_start_price_offset(move _163, move _164) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_156);
        _156 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb301;
    }

    bb68: {
        StorageDead(_164);
        StorageDead(_163);
        _161 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _162) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_162);
        _165 = discriminant(_161);
        switchInt(move _165) -> [0: bb70, 1: bb71, otherwise: bb15];
    }

    bb70: {
        StorageLive(_169);
        _169 = ((_161 as Continue).0: i64);
        _160 = _169;
        StorageDead(_169);
        StorageDead(_161);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = (*_1);
        StorageLive(_174);
        _174 = _3;
        _172 = order_params::OrderParams::get_auction_end_price_offset(move _173, move _174) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_166);
        _166 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_168);
        _168 = _166;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _168) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_161);
        goto -> bb300;
    }

    bb73: {
        StorageDead(_174);
        StorageDead(_173);
        _171 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _172) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_172);
        _175 = discriminant(_171);
        switchInt(move _175) -> [0: bb75, 1: bb76, otherwise: bb15];
    }

    bb75: {
        StorageLive(_179);
        _179 = ((_171 as Continue).0: i64);
        _170 = _179;
        StorageDead(_179);
        StorageDead(_171);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = &((*_2).24: state::perp_market::ContractTier);
        StorageLive(_183);
        StorageLive(_184);
        _545 = const _;
        _184 = &(*_545);
        _183 = &(*_184);
        _181 = state::perp_market::ContractTier::is_as_safe_as_contract(move _182, move _183) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_176);
        _176 = ((_171 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_171);
        goto -> bb299;
    }

    bb78: {
        StorageDead(_183);
        StorageDead(_182);
        _180 = Not(move _181);
        StorageDead(_181);
        StorageDead(_184);
        _186 = discriminant(((*_1).2: controller::position::PositionDirection));
        switchInt(move _186) -> [0: bb80, 1: bb79, otherwise: bb15];
    }

    bb79: {
        StorageLive(_318);
        StorageLive(_319);
        _319 = _5;
        switchInt(move _319) -> [0: bb155, otherwise: bb156];
    }

    bb80: {
        StorageLive(_187);
        StorageLive(_188);
        _188 = _5;
        switchInt(move _188) -> [0: bb81, otherwise: bb82];
    }

    bb81: {
        StorageLive(_189);
        _189 = _180;
        switchInt(move _189) -> [0: bb94, otherwise: bb82];
    }

    bb82: {
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = _148;
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = _3;
        _196 = core::num::<impl i64>::abs(move _197) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_197);
        _195 = <i64 as SafeMath>::safe_div(move _196, const 1000_i64) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_196);
        _194 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _195) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_195);
        _198 = discriminant(_194);
        switchInt(move _198) -> [0: bb86, 1: bb87, otherwise: bb15];
    }

    bb86: {
        StorageLive(_202);
        _202 = ((_194 as Continue).0: i64);
        _193 = _202;
        StorageDead(_202);
        _191 = <i64 as SafeMath>::safe_add(move _192, move _193) -> [return: bb89, unwind continue];
    }

    bb87: {
        StorageLive(_199);
        _199 = ((_194 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_201);
        _201 = _199;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _201) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb296;
    }

    bb89: {
        StorageDead(_193);
        StorageDead(_192);
        _190 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _191) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_191);
        _203 = discriminant(_190);
        switchInt(move _203) -> [0: bb91, 1: bb92, otherwise: bb15];
    }

    bb91: {
        StorageLive(_207);
        _207 = ((_190 as Continue).0: i64);
        _187 = _207;
        StorageDead(_207);
        StorageDead(_194);
        StorageDead(_190);
        goto -> bb95;
    }

    bb92: {
        StorageLive(_204);
        _204 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_206);
        _206 = _204;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _206) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_206);
        StorageDead(_204);
        goto -> bb296;
    }

    bb94: {
        _187 = _148;
        goto -> bb95;
    }

    bb95: {
        StorageDead(_189);
        StorageDead(_188);
        StorageLive(_208);
        StorageLive(_209);
        _209 = _5;
        switchInt(move _209) -> [0: bb96, otherwise: bb97];
    }

    bb96: {
        StorageLive(_210);
        _210 = _180;
        switchInt(move _210) -> [0: bb109, otherwise: bb97];
    }

    bb97: {
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = _149;
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = _3;
        _217 = core::num::<impl i64>::abs(move _218) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_218);
        _216 = <i64 as SafeMath>::safe_div(move _217, const 1000_i64) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_217);
        _215 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _216) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_216);
        _219 = discriminant(_215);
        switchInt(move _219) -> [0: bb101, 1: bb102, otherwise: bb15];
    }

    bb101: {
        StorageLive(_223);
        _223 = ((_215 as Continue).0: i64);
        _214 = _223;
        StorageDead(_223);
        _212 = <i64 as SafeMath>::safe_add(move _213, move _214) -> [return: bb104, unwind continue];
    }

    bb102: {
        StorageLive(_220);
        _220 = ((_215 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_222);
        _222 = _220;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _222) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb294;
    }

    bb104: {
        StorageDead(_214);
        StorageDead(_213);
        _211 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _212) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_212);
        _224 = discriminant(_211);
        switchInt(move _224) -> [0: bb106, 1: bb107, otherwise: bb15];
    }

    bb106: {
        StorageLive(_228);
        _228 = ((_211 as Continue).0: i64);
        _208 = _228;
        StorageDead(_228);
        StorageDead(_215);
        StorageDead(_211);
        goto -> bb110;
    }

    bb107: {
        StorageLive(_225);
        _225 = ((_211 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_227);
        _227 = _225;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _227) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_227);
        StorageDead(_225);
        goto -> bb294;
    }

    bb109: {
        _208 = _149;
        goto -> bb110;
    }

    bb110: {
        StorageDead(_210);
        StorageDead(_209);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = _160;
        StorageLive(_232);
        _232 = _187;
        _230 = Gt(move _231, move _232);
        switchInt(move _230) -> [0: bb131, otherwise: bb111];
    }

    bb111: {
        StorageDead(_232);
        StorageDead(_231);
        StorageLive(_233);
        StorageLive(_234);
        _234 = _4;
        switchInt(move _234) -> [0: bb112, otherwise: bb113];
    }

    bb112: {
        StorageLive(_235);
        _235 = _148;
        _233 = Option::<i64>::Some(move _235);
        StorageDead(_235);
        goto -> bb119;
    }

    bb113: {
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = _148;
        StorageLive(_240);
        _240 = _3;
        _238 = <i64 as SafeMath>::safe_add(move _239, move _240) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_240);
        StorageDead(_239);
        _237 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _238) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_238);
        _241 = discriminant(_237);
        switchInt(move _241) -> [0: bb116, 1: bb117, otherwise: bb15];
    }

    bb116: {
        StorageLive(_245);
        _245 = ((_237 as Continue).0: i64);
        _236 = _245;
        StorageDead(_245);
        _233 = Option::<i64>::Some(move _236);
        StorageDead(_236);
        StorageDead(_237);
        goto -> bb119;
    }

    bb117: {
        StorageLive(_242);
        _242 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_244);
        _244 = _242;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _244) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_236);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_233);
        goto -> bb293;
    }

    bb119: {
        StorageDead(_234);
        ((*_1).15: std::option::Option<i64>) = move _233;
        StorageDead(_233);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _544 = const _;
        _256 = &(*_544);
        _255 = &(*_256);
        _254 = move _255 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_255);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = ((*_1).15: std::option::Option<i64>);
        _267 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _268) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_268);
        _266 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _267) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_267);
        _269 = discriminant(_266);
        switchInt(move _269) -> [0: bb122, 1: bb123, otherwise: bb15];
    }

    bb122: {
        StorageLive(_273);
        _273 = ((_266 as Continue).0: i64);
        _265 = _273;
        StorageDead(_273);
        _264 = &_265;
        _263 = &(*_264);
        _262 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _263) -> [return: bb125, unwind continue];
    }

    bb123: {
        StorageLive(_270);
        _270 = ((_266 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_272);
        _272 = _270;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _272) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_256);
        StorageDead(_252);
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_246);
        goto -> bb293;
    }

    bb125: {
        StorageDead(_263);
        _261 = [move _262];
        StorageDead(_262);
        _260 = &_261;
        _259 = &(*_260);
        _258 = move _259 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_259);
        _253 = Arguments::<'_>::new_v1(move _254, move _258) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_258);
        StorageDead(_254);
        _252 = format(move _253) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_253);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_256);
        _251 = move _252;
        StorageDead(_252);
        _250 = &_251;
        _249 = &(*_250);
        _248 = <String as Deref>::deref(move _249) -> [return: bb128, unwind: bb310];
    }

    bb128: {
        _247 = &(*_248);
        StorageDead(_249);
        _246 = solana_program::log::sol_log(move _247) -> [return: bb129, unwind: bb310];
    }

    bb129: {
        StorageDead(_247);
        drop(_251) -> [return: bb130, unwind: bb314];
    }

    bb130: {
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_246);
        _229 = const ();
        goto -> bb132;
    }

    bb131: {
        StorageDead(_232);
        StorageDead(_231);
        _229 = const ();
        goto -> bb132;
    }

    bb132: {
        StorageDead(_230);
        StorageDead(_229);
        StorageLive(_274);
        StorageLive(_275);
        _275 = _170;
        StorageLive(_276);
        _276 = _208;
        _274 = Gt(move _275, move _276);
        switchInt(move _274) -> [0: bb153, otherwise: bb133];
    }

    bb133: {
        StorageDead(_276);
        StorageDead(_275);
        StorageLive(_277);
        StorageLive(_278);
        _278 = _4;
        switchInt(move _278) -> [0: bb134, otherwise: bb135];
    }

    bb134: {
        StorageLive(_279);
        _279 = _149;
        _277 = Option::<i64>::Some(move _279);
        StorageDead(_279);
        goto -> bb141;
    }

    bb135: {
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        _283 = _149;
        StorageLive(_284);
        _284 = _3;
        _282 = <i64 as SafeMath>::safe_add(move _283, move _284) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_284);
        StorageDead(_283);
        _281 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _282) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_282);
        _285 = discriminant(_281);
        switchInt(move _285) -> [0: bb138, 1: bb139, otherwise: bb15];
    }

    bb138: {
        StorageLive(_289);
        _289 = ((_281 as Continue).0: i64);
        _280 = _289;
        StorageDead(_289);
        _277 = Option::<i64>::Some(move _280);
        StorageDead(_280);
        StorageDead(_281);
        goto -> bb141;
    }

    bb139: {
        StorageLive(_286);
        _286 = ((_281 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_288);
        _288 = _286;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _288) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_280);
        StorageDead(_281);
        StorageDead(_278);
        StorageDead(_277);
        goto -> bb292;
    }

    bb141: {
        StorageDead(_278);
        ((*_1).16: std::option::Option<i64>) = move _277;
        StorageDead(_277);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _543 = const _;
        _300 = &(*_543);
        _299 = &(*_300);
        _298 = move _299 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_299);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = ((*_1).16: std::option::Option<i64>);
        _311 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _312) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_312);
        _310 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _311) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_311);
        _313 = discriminant(_310);
        switchInt(move _313) -> [0: bb144, 1: bb145, otherwise: bb15];
    }

    bb144: {
        StorageLive(_317);
        _317 = ((_310 as Continue).0: i64);
        _309 = _317;
        StorageDead(_317);
        _308 = &_309;
        _307 = &(*_308);
        _306 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _307) -> [return: bb147, unwind continue];
    }

    bb145: {
        StorageLive(_314);
        _314 = ((_310 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_316);
        _316 = _314;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _316) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_303);
        StorageDead(_302);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_300);
        StorageDead(_296);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_290);
        goto -> bb292;
    }

    bb147: {
        StorageDead(_307);
        _305 = [move _306];
        StorageDead(_306);
        _304 = &_305;
        _303 = &(*_304);
        _302 = move _303 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_303);
        _297 = Arguments::<'_>::new_v1(move _298, move _302) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_302);
        StorageDead(_298);
        _296 = format(move _297) -> [return: bb149, unwind continue];
    }

    bb149: {
        StorageDead(_297);
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_300);
        _295 = move _296;
        StorageDead(_296);
        _294 = &_295;
        _293 = &(*_294);
        _292 = <String as Deref>::deref(move _293) -> [return: bb150, unwind: bb309];
    }

    bb150: {
        _291 = &(*_292);
        StorageDead(_293);
        _290 = solana_program::log::sol_log(move _291) -> [return: bb151, unwind: bb309];
    }

    bb151: {
        StorageDead(_291);
        drop(_295) -> [return: bb152, unwind: bb314];
    }

    bb152: {
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_290);
        _145 = const ();
        goto -> bb154;
    }

    bb153: {
        StorageDead(_276);
        StorageDead(_275);
        _145 = const ();
        goto -> bb154;
    }

    bb154: {
        StorageDead(_274);
        StorageDead(_208);
        StorageDead(_187);
        goto -> bb229;
    }

    bb155: {
        StorageLive(_320);
        _320 = _180;
        switchInt(move _320) -> [0: bb168, otherwise: bb156];
    }

    bb156: {
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _323 = _148;
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = _3;
        _327 = core::num::<impl i64>::abs(move _328) -> [return: bb157, unwind continue];
    }

    bb157: {
        StorageDead(_328);
        _326 = <i64 as SafeMath>::safe_div(move _327, const 1000_i64) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_327);
        _325 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _326) -> [return: bb159, unwind continue];
    }

    bb159: {
        StorageDead(_326);
        _329 = discriminant(_325);
        switchInt(move _329) -> [0: bb160, 1: bb161, otherwise: bb15];
    }

    bb160: {
        StorageLive(_333);
        _333 = ((_325 as Continue).0: i64);
        _324 = _333;
        StorageDead(_333);
        _322 = <i64 as SafeMath>::safe_sub(move _323, move _324) -> [return: bb163, unwind continue];
    }

    bb161: {
        StorageLive(_330);
        _330 = ((_325 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_332);
        _332 = _330;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _332) -> [return: bb162, unwind continue];
    }

    bb162: {
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_324);
        StorageDead(_323);
        StorageDead(_322);
        goto -> bb290;
    }

    bb163: {
        StorageDead(_324);
        StorageDead(_323);
        _321 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _322) -> [return: bb164, unwind continue];
    }

    bb164: {
        StorageDead(_322);
        _334 = discriminant(_321);
        switchInt(move _334) -> [0: bb165, 1: bb166, otherwise: bb15];
    }

    bb165: {
        StorageLive(_338);
        _338 = ((_321 as Continue).0: i64);
        _318 = _338;
        StorageDead(_338);
        StorageDead(_325);
        StorageDead(_321);
        goto -> bb169;
    }

    bb166: {
        StorageLive(_335);
        _335 = ((_321 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_337);
        _337 = _335;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _337) -> [return: bb167, unwind continue];
    }

    bb167: {
        StorageDead(_337);
        StorageDead(_335);
        goto -> bb290;
    }

    bb168: {
        _318 = _148;
        goto -> bb169;
    }

    bb169: {
        StorageDead(_320);
        StorageDead(_319);
        StorageLive(_339);
        StorageLive(_340);
        _340 = _5;
        switchInt(move _340) -> [0: bb170, otherwise: bb171];
    }

    bb170: {
        StorageLive(_341);
        _341 = _180;
        switchInt(move _341) -> [0: bb183, otherwise: bb171];
    }

    bb171: {
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = _149;
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = _3;
        _348 = core::num::<impl i64>::abs(move _349) -> [return: bb172, unwind continue];
    }

    bb172: {
        StorageDead(_349);
        _347 = <i64 as SafeMath>::safe_div(move _348, const 1000_i64) -> [return: bb173, unwind continue];
    }

    bb173: {
        StorageDead(_348);
        _346 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _347) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_347);
        _350 = discriminant(_346);
        switchInt(move _350) -> [0: bb175, 1: bb176, otherwise: bb15];
    }

    bb175: {
        StorageLive(_354);
        _354 = ((_346 as Continue).0: i64);
        _345 = _354;
        StorageDead(_354);
        _343 = <i64 as SafeMath>::safe_sub(move _344, move _345) -> [return: bb178, unwind continue];
    }

    bb176: {
        StorageLive(_351);
        _351 = ((_346 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_353);
        _353 = _351;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _353) -> [return: bb177, unwind continue];
    }

    bb177: {
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_345);
        StorageDead(_344);
        StorageDead(_343);
        goto -> bb288;
    }

    bb178: {
        StorageDead(_345);
        StorageDead(_344);
        _342 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _343) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_343);
        _355 = discriminant(_342);
        switchInt(move _355) -> [0: bb180, 1: bb181, otherwise: bb15];
    }

    bb180: {
        StorageLive(_359);
        _359 = ((_342 as Continue).0: i64);
        _339 = _359;
        StorageDead(_359);
        StorageDead(_346);
        StorageDead(_342);
        goto -> bb184;
    }

    bb181: {
        StorageLive(_356);
        _356 = ((_342 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_358);
        _358 = _356;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _358) -> [return: bb182, unwind continue];
    }

    bb182: {
        StorageDead(_358);
        StorageDead(_356);
        goto -> bb288;
    }

    bb183: {
        _339 = _149;
        goto -> bb184;
    }

    bb184: {
        StorageDead(_341);
        StorageDead(_340);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = _160;
        StorageLive(_363);
        _363 = _318;
        _361 = Lt(move _362, move _363);
        switchInt(move _361) -> [0: bb205, otherwise: bb185];
    }

    bb185: {
        StorageDead(_363);
        StorageDead(_362);
        StorageLive(_364);
        StorageLive(_365);
        _365 = _4;
        switchInt(move _365) -> [0: bb186, otherwise: bb187];
    }

    bb186: {
        StorageLive(_366);
        _366 = _148;
        _364 = Option::<i64>::Some(move _366);
        StorageDead(_366);
        goto -> bb193;
    }

    bb187: {
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = _148;
        StorageLive(_371);
        _371 = _3;
        _369 = <i64 as SafeMath>::safe_add(move _370, move _371) -> [return: bb188, unwind continue];
    }

    bb188: {
        StorageDead(_371);
        StorageDead(_370);
        _368 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _369) -> [return: bb189, unwind continue];
    }

    bb189: {
        StorageDead(_369);
        _372 = discriminant(_368);
        switchInt(move _372) -> [0: bb190, 1: bb191, otherwise: bb15];
    }

    bb190: {
        StorageLive(_376);
        _376 = ((_368 as Continue).0: i64);
        _367 = _376;
        StorageDead(_376);
        _364 = Option::<i64>::Some(move _367);
        StorageDead(_367);
        StorageDead(_368);
        goto -> bb193;
    }

    bb191: {
        StorageLive(_373);
        _373 = ((_368 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_375);
        _375 = _373;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _375) -> [return: bb192, unwind continue];
    }

    bb192: {
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_367);
        StorageDead(_368);
        StorageDead(_365);
        StorageDead(_364);
        goto -> bb287;
    }

    bb193: {
        StorageDead(_365);
        ((*_1).15: std::option::Option<i64>) = move _364;
        StorageDead(_364);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _542 = const _;
        _387 = &(*_542);
        _386 = &(*_387);
        _385 = move _386 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_386);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = ((*_1).15: std::option::Option<i64>);
        _398 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _399) -> [return: bb194, unwind continue];
    }

    bb194: {
        StorageDead(_399);
        _397 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _398) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_398);
        _400 = discriminant(_397);
        switchInt(move _400) -> [0: bb196, 1: bb197, otherwise: bb15];
    }

    bb196: {
        StorageLive(_404);
        _404 = ((_397 as Continue).0: i64);
        _396 = _404;
        StorageDead(_404);
        _395 = &_396;
        _394 = &(*_395);
        _393 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _394) -> [return: bb199, unwind continue];
    }

    bb197: {
        StorageLive(_401);
        _401 = ((_397 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_403);
        _403 = _401;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _403) -> [return: bb198, unwind continue];
    }

    bb198: {
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_387);
        StorageDead(_383);
        StorageDead(_380);
        StorageDead(_378);
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_377);
        goto -> bb287;
    }

    bb199: {
        StorageDead(_394);
        _392 = [move _393];
        StorageDead(_393);
        _391 = &_392;
        _390 = &(*_391);
        _389 = move _390 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_390);
        _384 = Arguments::<'_>::new_v1(move _385, move _389) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_389);
        StorageDead(_385);
        _383 = format(move _384) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_384);
        StorageDead(_397);
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_387);
        _382 = move _383;
        StorageDead(_383);
        _381 = &_382;
        _380 = &(*_381);
        _379 = <String as Deref>::deref(move _380) -> [return: bb202, unwind: bb308];
    }

    bb202: {
        _378 = &(*_379);
        StorageDead(_380);
        _377 = solana_program::log::sol_log(move _378) -> [return: bb203, unwind: bb308];
    }

    bb203: {
        StorageDead(_378);
        drop(_382) -> [return: bb204, unwind: bb314];
    }

    bb204: {
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_377);
        _360 = const ();
        goto -> bb206;
    }

    bb205: {
        StorageDead(_363);
        StorageDead(_362);
        _360 = const ();
        goto -> bb206;
    }

    bb206: {
        StorageDead(_361);
        StorageDead(_360);
        StorageLive(_405);
        StorageLive(_406);
        _406 = _170;
        StorageLive(_407);
        _407 = _339;
        _405 = Lt(move _406, move _407);
        switchInt(move _405) -> [0: bb227, otherwise: bb207];
    }

    bb207: {
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_408);
        StorageLive(_409);
        _409 = _4;
        switchInt(move _409) -> [0: bb208, otherwise: bb209];
    }

    bb208: {
        StorageLive(_410);
        _410 = _149;
        _408 = Option::<i64>::Some(move _410);
        StorageDead(_410);
        goto -> bb215;
    }

    bb209: {
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = _149;
        StorageLive(_415);
        _415 = _3;
        _413 = <i64 as SafeMath>::safe_add(move _414, move _415) -> [return: bb210, unwind continue];
    }

    bb210: {
        StorageDead(_415);
        StorageDead(_414);
        _412 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _413) -> [return: bb211, unwind continue];
    }

    bb211: {
        StorageDead(_413);
        _416 = discriminant(_412);
        switchInt(move _416) -> [0: bb212, 1: bb213, otherwise: bb15];
    }

    bb212: {
        StorageLive(_420);
        _420 = ((_412 as Continue).0: i64);
        _411 = _420;
        StorageDead(_420);
        _408 = Option::<i64>::Some(move _411);
        StorageDead(_411);
        StorageDead(_412);
        goto -> bb215;
    }

    bb213: {
        StorageLive(_417);
        _417 = ((_412 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_419);
        _419 = _417;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _419) -> [return: bb214, unwind continue];
    }

    bb214: {
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_411);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_408);
        goto -> bb286;
    }

    bb215: {
        StorageDead(_409);
        ((*_1).16: std::option::Option<i64>) = move _408;
        StorageDead(_408);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _541 = const _;
        _431 = &(*_541);
        _430 = &(*_431);
        _429 = move _430 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_430);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = ((*_1).16: std::option::Option<i64>);
        _442 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _443) -> [return: bb216, unwind continue];
    }

    bb216: {
        StorageDead(_443);
        _441 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _442) -> [return: bb217, unwind continue];
    }

    bb217: {
        StorageDead(_442);
        _444 = discriminant(_441);
        switchInt(move _444) -> [0: bb218, 1: bb219, otherwise: bb15];
    }

    bb218: {
        StorageLive(_448);
        _448 = ((_441 as Continue).0: i64);
        _440 = _448;
        StorageDead(_448);
        _439 = &_440;
        _438 = &(*_439);
        _437 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _438) -> [return: bb221, unwind continue];
    }

    bb219: {
        StorageLive(_445);
        _445 = ((_441 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_447);
        _447 = _445;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _447) -> [return: bb220, unwind continue];
    }

    bb220: {
        StorageDead(_447);
        StorageDead(_445);
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_434);
        StorageDead(_433);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_436);
        StorageDead(_435);
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_421);
        goto -> bb286;
    }

    bb221: {
        StorageDead(_438);
        _436 = [move _437];
        StorageDead(_437);
        _435 = &_436;
        _434 = &(*_435);
        _433 = move _434 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_434);
        _428 = Arguments::<'_>::new_v1(move _429, move _433) -> [return: bb222, unwind continue];
    }

    bb222: {
        StorageDead(_433);
        StorageDead(_429);
        _427 = format(move _428) -> [return: bb223, unwind continue];
    }

    bb223: {
        StorageDead(_428);
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_436);
        StorageDead(_435);
        StorageDead(_431);
        _426 = move _427;
        StorageDead(_427);
        _425 = &_426;
        _424 = &(*_425);
        _423 = <String as Deref>::deref(move _424) -> [return: bb224, unwind: bb307];
    }

    bb224: {
        _422 = &(*_423);
        StorageDead(_424);
        _421 = solana_program::log::sol_log(move _422) -> [return: bb225, unwind: bb307];
    }

    bb225: {
        StorageDead(_422);
        drop(_426) -> [return: bb226, unwind: bb314];
    }

    bb226: {
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_421);
        _145 = const ();
        goto -> bb228;
    }

    bb227: {
        StorageDead(_407);
        StorageDead(_406);
        _145 = const ();
        goto -> bb228;
    }

    bb228: {
        StorageDead(_405);
        StorageDead(_339);
        StorageDead(_318);
        goto -> bb229;
    }

    bb229: {
        StorageDead(_180);
        StorageDead(_170);
        StorageDead(_160);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb231;
    }

    bb230: {
        StorageDead(_147);
        _145 = const ();
        goto -> bb231;
    }

    bb231: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_449);
        _449 = ((*_1).14: std::option::Option<u8>);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = ((*_1).16: std::option::Option<i64>);
        _459 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _460) -> [return: bb232, unwind continue];
    }

    bb232: {
        StorageDead(_460);
        _458 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _459) -> [return: bb233, unwind continue];
    }

    bb233: {
        StorageDead(_459);
        _461 = discriminant(_458);
        switchInt(move _461) -> [0: bb234, 1: bb235, otherwise: bb15];
    }

    bb234: {
        StorageLive(_465);
        _465 = ((_458 as Continue).0: i64);
        _457 = _465;
        StorageDead(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = ((*_1).15: std::option::Option<i64>);
        _468 = <Option<i64> as SafeUnwrap>::safe_unwrap(move _469) -> [return: bb237, unwind continue];
    }

    bb235: {
        StorageLive(_462);
        _462 = ((_458 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_464);
        _464 = _462;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _464) -> [return: bb236, unwind continue];
    }

    bb236: {
        StorageDead(_464);
        StorageDead(_462);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb284;
    }

    bb237: {
        StorageDead(_469);
        _467 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _468) -> [return: bb238, unwind continue];
    }

    bb238: {
        StorageDead(_468);
        _470 = discriminant(_467);
        switchInt(move _470) -> [0: bb239, 1: bb240, otherwise: bb15];
    }

    bb239: {
        StorageLive(_474);
        _474 = ((_467 as Continue).0: i64);
        _466 = _474;
        StorageDead(_474);
        _456 = <i64 as SafeMath>::safe_sub(move _457, move _466) -> [return: bb242, unwind continue];
    }

    bb240: {
        StorageLive(_471);
        _471 = ((_467 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_473);
        _473 = _471;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _473) -> [return: bb241, unwind continue];
    }

    bb241: {
        StorageDead(_473);
        StorageDead(_471);
        StorageDead(_466);
        StorageDead(_457);
        StorageDead(_456);
        goto -> bb282;
    }

    bb242: {
        StorageDead(_466);
        StorageDead(_457);
        _455 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _456) -> [return: bb243, unwind continue];
    }

    bb243: {
        StorageDead(_456);
        _475 = discriminant(_455);
        switchInt(move _475) -> [0: bb244, 1: bb245, otherwise: bb15];
    }

    bb244: {
        StorageLive(_479);
        _479 = ((_455 as Continue).0: i64);
        _454 = _479;
        StorageDead(_479);
        _453 = core::num::<impl i64>::unsigned_abs(move _454) -> [return: bb247, unwind continue];
    }

    bb245: {
        StorageLive(_476);
        _476 = ((_455 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_478);
        _478 = _476;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _478) -> [return: bb246, unwind continue];
    }

    bb246: {
        StorageDead(_478);
        StorageDead(_476);
        goto -> bb282;
    }

    bb247: {
        StorageDead(_454);
        StorageLive(_480);
        StorageLive(_481);
        _481 = _3;
        _480 = core::num::<impl i64>::unsigned_abs(move _481) -> [return: bb248, unwind continue];
    }

    bb248: {
        StorageDead(_481);
        StorageLive(_482);
        _482 = ((*_2).24: state::perp_market::ContractTier);
        _452 = get_auction_duration(move _453, move _480, move _482) -> [return: bb249, unwind continue];
    }

    bb249: {
        StorageDead(_482);
        StorageDead(_480);
        StorageDead(_453);
        _451 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _452) -> [return: bb250, unwind continue];
    }

    bb250: {
        StorageDead(_452);
        _483 = discriminant(_451);
        switchInt(move _483) -> [0: bb251, 1: bb252, otherwise: bb15];
    }

    bb251: {
        StorageLive(_487);
        _487 = ((_451 as Continue).0: u8);
        _450 = _487;
        StorageDead(_487);
        StorageDead(_467);
        StorageDead(_458);
        StorageDead(_455);
        StorageDead(_451);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = _449;
        _491 = Option::<u8>::unwrap_or(move _492, const 0_u8) -> [return: bb254, unwind continue];
    }

    bb252: {
        StorageLive(_484);
        _484 = ((_451 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_486);
        _486 = _484;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _486) -> [return: bb253, unwind continue];
    }

    bb253: {
        StorageDead(_486);
        StorageDead(_484);
        goto -> bb283;
    }

    bb254: {
        StorageDead(_492);
        StorageLive(_493);
        _493 = _450;
        _490 = core::num::<impl u8>::abs_diff(move _491, move _493) -> [return: bb255, unwind continue];
    }

    bb255: {
        StorageDead(_493);
        StorageDead(_491);
        _489 = Gt(move _490, const 10_u8);
        switchInt(move _489) -> [0: bb257, otherwise: bb256];
    }

    bb256: {
        StorageDead(_490);
        goto -> bb258;
    }

    bb257: {
        StorageDead(_490);
        StorageLive(_494);
        _494 = _5;
        switchInt(move _494) -> [0: bb258, otherwise: bb272];
    }

    bb258: {
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _498 = _449;
        _497 = Option::<u8>::unwrap_or(move _498, const 0_u8) -> [return: bb259, unwind continue];
    }

    bb259: {
        StorageDead(_498);
        StorageLive(_499);
        _499 = _450;
        _496 = <u8 as Ord>::max(move _497, move _499) -> [return: bb260, unwind continue];
    }

    bb260: {
        StorageDead(_499);
        StorageDead(_497);
        _495 = Option::<u8>::Some(move _496);
        StorageDead(_496);
        ((*_1).14: std::option::Option<u8>) = move _495;
        StorageDead(_495);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        _540 = const _;
        _510 = &(*_540);
        _509 = &(*_510);
        _508 = move _509 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_509);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        _522 = ((*_1).14: std::option::Option<u8>);
        _521 = <Option<u8> as SafeUnwrap>::safe_unwrap(move _522) -> [return: bb261, unwind continue];
    }

    bb261: {
        StorageDead(_522);
        _520 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _521) -> [return: bb262, unwind continue];
    }

    bb262: {
        StorageDead(_521);
        _523 = discriminant(_520);
        switchInt(move _523) -> [0: bb263, 1: bb264, otherwise: bb15];
    }

    bb263: {
        StorageLive(_527);
        _527 = ((_520 as Continue).0: u8);
        _519 = _527;
        StorageDead(_527);
        _518 = &_519;
        _517 = &(*_518);
        _516 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _517) -> [return: bb266, unwind continue];
    }

    bb264: {
        StorageLive(_524);
        _524 = ((_520 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_526);
        _526 = _524;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _526) -> [return: bb265, unwind continue];
    }

    bb265: {
        StorageDead(_526);
        StorageDead(_524);
        StorageDead(_517);
        StorageDead(_516);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_520);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_515);
        StorageDead(_514);
        StorageDead(_510);
        StorageDead(_506);
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_502);
        StorageDead(_500);
        StorageDead(_494);
        StorageDead(_489);
        StorageDead(_488);
        goto -> bb285;
    }

    bb266: {
        StorageDead(_517);
        _515 = [move _516];
        StorageDead(_516);
        _514 = &_515;
        _513 = &(*_514);
        _512 = move _513 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_513);
        _507 = Arguments::<'_>::new_v1(move _508, move _512) -> [return: bb267, unwind continue];
    }

    bb267: {
        StorageDead(_512);
        StorageDead(_508);
        _506 = format(move _507) -> [return: bb268, unwind continue];
    }

    bb268: {
        StorageDead(_507);
        StorageDead(_520);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_515);
        StorageDead(_514);
        StorageDead(_510);
        _505 = move _506;
        StorageDead(_506);
        _504 = &_505;
        _503 = &(*_504);
        _502 = <String as Deref>::deref(move _503) -> [return: bb269, unwind: bb306];
    }

    bb269: {
        _501 = &(*_502);
        StorageDead(_503);
        _500 = solana_program::log::sol_log(move _501) -> [return: bb270, unwind: bb306];
    }

    bb270: {
        StorageDead(_501);
        drop(_505) -> [return: bb271, unwind: bb314];
    }

    bb271: {
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_502);
        StorageDead(_500);
        _488 = const ();
        goto -> bb273;
    }

    bb272: {
        _488 = const ();
        goto -> bb273;
    }

    bb273: {
        StorageDead(_494);
        StorageDead(_489);
        StorageDead(_488);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = &_7;
        StorageLive(_531);
        _531 = &((*_1).14: std::option::Option<u8>);
        _529 = <Option<u8> as PartialEq>::ne(move _530, move _531) -> [return: bb274, unwind continue];
    }

    bb274: {
        switchInt(move _529) -> [0: bb276, otherwise: bb275];
    }

    bb275: {
        StorageDead(_531);
        StorageDead(_530);
        goto -> bb278;
    }

    bb276: {
        StorageDead(_531);
        StorageDead(_530);
        StorageLive(_532);
        StorageLive(_533);
        _533 = &_8;
        StorageLive(_534);
        _534 = &((*_1).15: std::option::Option<i64>);
        _532 = <Option<i64> as PartialEq>::ne(move _533, move _534) -> [return: bb277, unwind continue];
    }

    bb277: {
        switchInt(move _532) -> [0: bb279, otherwise: bb278];
    }

    bb278: {
        StorageDead(_534);
        StorageDead(_533);
        _528 = const true;
        goto -> bb281;
    }

    bb279: {
        StorageDead(_534);
        StorageDead(_533);
        StorageLive(_535);
        _535 = &_9;
        StorageLive(_536);
        _536 = &((*_1).16: std::option::Option<i64>);
        _528 = <Option<i64> as PartialEq>::ne(move _535, move _536) -> [return: bb280, unwind continue];
    }

    bb280: {
        StorageDead(_536);
        StorageDead(_535);
        goto -> bb281;
    }

    bb281: {
        StorageDead(_532);
        StorageDead(_529);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _528);
        StorageDead(_528);
        goto -> bb285;
    }

    bb282: {
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb283;
    }

    bb283: {
        StorageDead(_467);
        goto -> bb284;
    }

    bb284: {
        StorageDead(_458);
        StorageDead(_455);
        StorageDead(_451);
        goto -> bb285;
    }

    bb285: {
        StorageDead(_450);
        StorageDead(_449);
        goto -> bb305;
    }

    bb286: {
        StorageDead(_405);
        goto -> bb289;
    }

    bb287: {
        StorageDead(_361);
        StorageDead(_360);
        goto -> bb289;
    }

    bb288: {
        StorageDead(_346);
        StorageDead(_342);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb289;
    }

    bb289: {
        StorageDead(_339);
        goto -> bb291;
    }

    bb290: {
        StorageDead(_325);
        StorageDead(_321);
        StorageDead(_320);
        StorageDead(_319);
        goto -> bb291;
    }

    bb291: {
        StorageDead(_318);
        goto -> bb298;
    }

    bb292: {
        StorageDead(_274);
        goto -> bb295;
    }

    bb293: {
        StorageDead(_230);
        StorageDead(_229);
        goto -> bb295;
    }

    bb294: {
        StorageDead(_215);
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_209);
        goto -> bb295;
    }

    bb295: {
        StorageDead(_208);
        goto -> bb297;
    }

    bb296: {
        StorageDead(_194);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb297;
    }

    bb297: {
        StorageDead(_187);
        goto -> bb298;
    }

    bb298: {
        StorageDead(_180);
        goto -> bb299;
    }

    bb299: {
        StorageDead(_170);
        goto -> bb300;
    }

    bb300: {
        StorageDead(_160);
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb301;
    }

    bb301: {
        StorageDead(_146);
        StorageDead(_145);
        goto -> bb305;
    }

    bb302: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb304;
    }

    bb303: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb304;
    }

    bb304: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb305;
    }

    bb305: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        return;
    }

    bb306 (cleanup): {
        drop(_505) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb307 (cleanup): {
        drop(_426) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb308 (cleanup): {
        drop(_382) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb309 (cleanup): {
        drop(_295) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb310 (cleanup): {
        drop(_251) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb311 (cleanup): {
        drop(_122) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb312 (cleanup): {
        drop(_94) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb313 (cleanup): {
        drop(_66) -> [return: bb314, unwind terminate(cleanup)];
    }

    bb314 (cleanup): {
        resume;
    }
}
