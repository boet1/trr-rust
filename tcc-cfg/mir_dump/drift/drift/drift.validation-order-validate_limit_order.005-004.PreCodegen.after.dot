digraph Mir_0_4559 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn validate_limit_order(_1: &amp;ReErased state::user::Order, _2: &amp;ReErased state::perp_market::PerpMarket, _3: std::option::Option&lt;i64&gt;, _4: u64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _5: ();<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _7: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _8: &amp;ReErased state::user::Order;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: u64;<br align="left"/>let mut _11: bool;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: &amp;ReErased state::user::Order;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _18: ();<br align="left"/>let _19: ();<br align="left"/>let mut _20: bool;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: state::user::Order;<br align="left"/>let mut _24: !;<br align="left"/>let _25: ();<br align="left"/>let mut _26: &amp;ReErased str;<br align="left"/>let _27: &amp;ReErased str;<br align="left"/>let mut _28: error::ErrorCode;<br align="left"/>let _29: ();<br align="left"/>let mut _30: bool;<br align="left"/>let mut _31: state::user::Order;<br align="left"/>let mut _32: bool;<br align="left"/>let mut _33: u64;<br align="left"/>let mut _34: !;<br align="left"/>let _35: ();<br align="left"/>let mut _36: &amp;ReErased str;<br align="left"/>let _37: &amp;ReErased str;<br align="left"/>let mut _38: error::ErrorCode;<br align="left"/>let _39: ();<br align="left"/>let mut _40: bool;<br align="left"/>let mut _41: u64;<br align="left"/>let mut _42: !;<br align="left"/>let _43: ();<br align="left"/>let mut _44: &amp;ReErased str;<br align="left"/>let _45: &amp;ReErased str;<br align="left"/>let mut _46: error::ErrorCode;<br align="left"/>let _47: ();<br align="left"/>let mut _48: bool;<br align="left"/>let _49: ();<br align="left"/>let mut _50: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _51: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _52: bool;<br align="left"/>let mut _53: &amp;ReErased state::user::Order;<br align="left"/>let mut _54: ();<br align="left"/>let _55: error::ErrorCode;<br align="left"/>let _56: ();<br align="left"/>let mut _57: &amp;ReErased str;<br align="left"/>let _58: &amp;ReErased str;<br align="left"/>let mut _59: &amp;ReErased std::string::String;<br align="left"/>let _60: &amp;ReErased std::string::String;<br align="left"/>let _61: std::string::String;<br align="left"/>let _62: std::string::String;<br align="left"/>let mut _63: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _64: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _65: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _66: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _67: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _68: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _69: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _70: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _71: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _72: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _73: &amp;ReErased error::ErrorCode;<br align="left"/>let _74: &amp;ReErased error::ErrorCode;<br align="left"/>let _75: ();<br align="left"/>let mut _76: &amp;ReErased str;<br align="left"/>let _77: &amp;ReErased str;<br align="left"/>let mut _78: error::ErrorCode;<br align="left"/>let mut _79: isize;<br align="left"/>let _80: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _81: !;<br align="left"/>let mut _82: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _83: ();<br align="left"/>let _84: ();<br align="left"/>let mut _85: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _86: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _87: &amp;ReErased state::user::Order;<br align="left"/>let mut _88: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _89: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _90: u64;<br align="left"/>let mut _91: isize;<br align="left"/>let _92: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _93: !;<br align="left"/>let mut _94: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _95: ();<br align="left"/>let _96: ();<br align="left"/>let mut _97: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _98: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _99: &amp;ReErased state::user::Order;<br align="left"/>let mut _100: isize;<br align="left"/>let _101: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _102: !;<br align="left"/>let mut _103: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _104: ();<br align="left"/>let mut _105: ();<br align="left"/>let mut _106: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>debug order =&gt; _1;<br align="left"/>debug market =&gt; _2;<br align="left"/>debug valid_oracle_price =&gt; _3;<br align="left"/>debug slot =&gt; _4;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>debug error_code =&gt; _55;<br align="left"/>debug res =&gt; _62;<br align="left"/>debug residual =&gt; _80;<br align="left"/>debug val =&gt; _83;<br align="left"/>debug residual =&gt; _92;<br align="left"/>debug val =&gt; _95;<br align="left"/>debug residual =&gt; _101;<br align="left"/>debug val =&gt; _104;<br align="left"/>>;
    bb0__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = &amp;(*_1)<br/>StorageLive(_9)<br/>_9 = (((*_2).1: state::perp_market::AMM).52: u64)<br/>StorageLive(_10)<br/>_10 = (((*_2).1: state::perp_market::AMM).54: u64)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = ((*_1).18: bool)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb1__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_11 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = &amp;(*_1)<br/></td></tr><tr><td align="left">_11 = Order::is_jit_maker(move _13)</td></tr></table>>];
    bb3__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">_7 = validate_base_asset_amount(move _8, move _9, move _10, move _11)</td></tr></table>>];
    bb5__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb6__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_14 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb7__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_6 as Continue).0: ())<br/>_5 = _18<br/>StorageDead(_18)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = ((*_1).1: u64)<br/>_20 = Eq(move _21, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb8__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_17)<br/>_17 = _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb10__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = (*_1)<br/></td></tr><tr><td align="left">_22 = Order::has_oracle_price_offset(move _23)</td></tr></table>>];
    bb12__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb14__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = const &quot;Limit order price == 0&quot;<br/>_26 = &amp;(*_27)<br/></td></tr><tr><td align="left">_25 = solana_program::log::sol_log(move _26)</td></tr></table>>];
    bb16__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_27)<br/>StorageDead(_25)<br/>StorageLive(_28)<br/>_28 = error::ErrorCode::InvalidOrderLimitPrice<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _28)<br/>StorageDead(_28)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">_19 = const ()<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>_31 = (*_1)<br/></td></tr><tr><td align="left">_30 = Order::has_oracle_price_offset(move _31)</td></tr></table>>];
    bb18__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb19__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = ((*_1).1: u64)<br/>_32 = Ne(move _33, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb20__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = const &quot;Limit order price must be 0 for taker oracle offset order&quot;<br/>_36 = &amp;(*_37)<br/></td></tr><tr><td align="left">_35 = solana_program::log::sol_log(move _36)</td></tr></table>>];
    bb21__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_37)<br/>StorageDead(_35)<br/>StorageLive(_38)<br/>_38 = error::ErrorCode::InvalidOrderLimitPrice<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _38)<br/>StorageDead(_38)<br/>StorageDead(_32)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_29 = const ()<br/>StorageDead(_32)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>_41 = ((*_1).5: u64)<br/>_40 = Gt(move _41, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb25__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = const &quot;Limit order should not have trigger price&quot;<br/>_44 = &amp;(*_45)<br/></td></tr><tr><td align="left">_43 = solana_program::log::sol_log(move _44)</td></tr></table>>];
    bb26__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_39 = const ()<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>_48 = ((*_1).19: bool)<br/></td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb27__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_45)<br/>StorageDead(_43)<br/>StorageLive(_46)<br/>_46 = error::ErrorCode::InvalidOrderTrigger<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _46)<br/>StorageDead(_46)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_53 = &amp;(*_1)<br/></td></tr><tr><td align="left">_52 = Order::has_auction(move _53)</td></tr></table>>];
    bb29__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_47 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb31__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageLive(_55)<br/>_55 = error::ErrorCode::InvalidOrder<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_106 = const _<br/>_66 = &amp;(*_106)<br/>_65 = &amp;(*_66)<br/>_64 = move _65 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_65)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = &amp;_55<br/>_73 = &amp;(*_74)<br/></td></tr><tr><td align="left">_72 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _73)</td></tr></table>>];
    bb32__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageLive(_54)<br/>_54 = ()<br/>_51 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _54)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>_71 = [move _72]<br/>StorageDead(_72)<br/>_70 = &amp;_71<br/>_69 = &amp;(*_70)<br/>_68 = move _69 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_69)<br/></td></tr><tr><td align="left">_63 = Arguments::&lt;'_&gt;::new_v1(move _64, move _68)</td></tr></table>>];
    bb34__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_68)<br/>StorageDead(_64)<br/></td></tr><tr><td align="left">_62 = format(move _63)</td></tr></table>>];
    bb35__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_74)<br/>StorageDead(_71)<br/>StorageDead(_70)<br/>StorageDead(_66)<br/>_61 = move _62<br/>StorageDead(_62)<br/>_60 = &amp;_61<br/>_59 = &amp;(*_60)<br/></td></tr><tr><td align="left">_58 = &lt;String as Deref&gt;::deref(move _59)</td></tr></table>>];
    bb36__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">_57 = &amp;(*_58)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">_56 = solana_program::log::sol_log(move _57)</td></tr></table>>];
    bb37__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/></td></tr><tr><td align="left">drop(_61)</td></tr></table>>];
    bb38__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_60)<br/>StorageDead(_58)<br/>StorageDead(_56)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>_77 = const &quot;post only limit order cant have auction&quot;<br/>_76 = &amp;(*_77)<br/></td></tr><tr><td align="left">_75 = solana_program::log::sol_log(move _76)</td></tr></table>>];
    bb39__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_77)<br/>StorageDead(_75)<br/>StorageLive(_78)<br/>_78 = _55<br/>_51 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _78)<br/>StorageDead(_78)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/></td></tr><tr><td align="left">_50 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _51)</td></tr></table>>];
    bb41__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>_79 = discriminant(_50)<br/></td></tr><tr><td align="left">switchInt(move _79)</td></tr></table>>];
    bb42__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_83)<br/>_83 = ((_50 as Continue).0: ())<br/>_49 = _83<br/>StorageDead(_83)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>_87 = &amp;(*_1)<br/>StorageLive(_88)<br/>_88 = &amp;(*_2)<br/>StorageLive(_89)<br/>_89 = _3<br/>StorageLive(_90)<br/>_90 = _4<br/></td></tr><tr><td align="left">_86 = validate_post_only_order(move _87, move _88, move _89, move _90)</td></tr></table>>];
    bb43__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_80)<br/>_80 = ((_50 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_82)<br/>_82 = _80<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _82)</td></tr></table>>];
    bb44__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_80)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/></td></tr><tr><td align="left">_85 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _86)</td></tr></table>>];
    bb46__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>_91 = discriminant(_85)<br/></td></tr><tr><td align="left">switchInt(move _91)</td></tr></table>>];
    bb47__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageLive(_95)<br/>_95 = ((_85 as Continue).0: ())<br/>_84 = _95<br/>StorageDead(_95)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/>_47 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_92)<br/>_92 = ((_85 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_94)<br/>_94 = _92<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _94)</td></tr></table>>];
    bb49__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/>StorageDead(_92)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_47)<br/>StorageLive(_96)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>_99 = &amp;(*_1)<br/></td></tr><tr><td align="left">_98 = validate_limit_order_auction_params(move _99)</td></tr></table>>];
    bb51__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_99)<br/></td></tr><tr><td align="left">_97 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _98)</td></tr></table>>];
    bb52__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>_100 = discriminant(_97)<br/></td></tr><tr><td align="left">switchInt(move _100)</td></tr></table>>];
    bb53__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_104)<br/>_104 = ((_97 as Continue).0: ())<br/>_96 = _104<br/>StorageDead(_104)<br/>StorageDead(_97)<br/>StorageDead(_96)<br/>StorageLive(_105)<br/>_105 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _105)<br/>StorageDead(_105)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb54__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_101)<br/>_101 = ((_97 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_103)<br/>_103 = _101<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _103)</td></tr></table>>];
    bb55__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageDead(_101)<br/>StorageDead(_97)<br/>StorageDead(_96)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb56__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left">return</td></tr></table>>];
    bb58__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">58 (cleanup)</td></tr><tr><td align="left">drop(_61)</td></tr></table>>];
    bb59__0_4559 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">59 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_4559 -> bb2__0_4559 [label="0"];
    bb0__0_4559 -> bb1__0_4559 [label="otherwise"];
    bb1__0_4559 -> bb4__0_4559 [label=""];
    bb2__0_4559 -> bb3__0_4559 [label="return"];
    bb3__0_4559 -> bb4__0_4559 [label=""];
    bb4__0_4559 -> bb5__0_4559 [label="return"];
    bb5__0_4559 -> bb6__0_4559 [label="return"];
    bb6__0_4559 -> bb7__0_4559 [label="0"];
    bb6__0_4559 -> bb9__0_4559 [label="1"];
    bb6__0_4559 -> bb8__0_4559 [label="otherwise"];
    bb7__0_4559 -> bb12__0_4559 [label="0"];
    bb7__0_4559 -> bb11__0_4559 [label="otherwise"];
    bb9__0_4559 -> bb10__0_4559 [label="return"];
    bb10__0_4559 -> bb57__0_4559 [label=""];
    bb11__0_4559 -> bb13__0_4559 [label="return"];
    bb12__0_4559 -> bb17__0_4559 [label=""];
    bb13__0_4559 -> bb15__0_4559 [label="0"];
    bb13__0_4559 -> bb14__0_4559 [label="otherwise"];
    bb14__0_4559 -> bb17__0_4559 [label=""];
    bb15__0_4559 -> bb16__0_4559 [label="return"];
    bb16__0_4559 -> bb57__0_4559 [label=""];
    bb17__0_4559 -> bb18__0_4559 [label="return"];
    bb18__0_4559 -> bb23__0_4559 [label="0"];
    bb18__0_4559 -> bb19__0_4559 [label="otherwise"];
    bb19__0_4559 -> bb22__0_4559 [label="0"];
    bb19__0_4559 -> bb20__0_4559 [label="otherwise"];
    bb20__0_4559 -> bb21__0_4559 [label="return"];
    bb21__0_4559 -> bb57__0_4559 [label=""];
    bb22__0_4559 -> bb24__0_4559 [label=""];
    bb23__0_4559 -> bb24__0_4559 [label=""];
    bb24__0_4559 -> bb26__0_4559 [label="0"];
    bb24__0_4559 -> bb25__0_4559 [label="otherwise"];
    bb25__0_4559 -> bb27__0_4559 [label="return"];
    bb26__0_4559 -> bb29__0_4559 [label="0"];
    bb26__0_4559 -> bb28__0_4559 [label="otherwise"];
    bb27__0_4559 -> bb57__0_4559 [label=""];
    bb28__0_4559 -> bb30__0_4559 [label="return"];
    bb29__0_4559 -> bb50__0_4559 [label=""];
    bb30__0_4559 -> bb32__0_4559 [label="0"];
    bb30__0_4559 -> bb31__0_4559 [label="otherwise"];
    bb31__0_4559 -> bb33__0_4559 [label="return"];
    bb32__0_4559 -> bb40__0_4559 [label=""];
    bb33__0_4559 -> bb34__0_4559 [label="return"];
    bb34__0_4559 -> bb35__0_4559 [label="return"];
    bb35__0_4559 -> bb36__0_4559 [label="return"];
    bb35__0_4559 -> bb58__0_4559 [label="unwind"];
    bb36__0_4559 -> bb37__0_4559 [label="return"];
    bb36__0_4559 -> bb58__0_4559 [label="unwind"];
    bb37__0_4559 -> bb38__0_4559 [label="return"];
    bb37__0_4559 -> bb59__0_4559 [label="unwind"];
    bb38__0_4559 -> bb39__0_4559 [label="return"];
    bb39__0_4559 -> bb40__0_4559 [label=""];
    bb40__0_4559 -> bb41__0_4559 [label="return"];
    bb41__0_4559 -> bb42__0_4559 [label="0"];
    bb41__0_4559 -> bb43__0_4559 [label="1"];
    bb41__0_4559 -> bb8__0_4559 [label="otherwise"];
    bb42__0_4559 -> bb45__0_4559 [label="return"];
    bb43__0_4559 -> bb44__0_4559 [label="return"];
    bb44__0_4559 -> bb56__0_4559 [label=""];
    bb45__0_4559 -> bb46__0_4559 [label="return"];
    bb46__0_4559 -> bb47__0_4559 [label="0"];
    bb46__0_4559 -> bb48__0_4559 [label="1"];
    bb46__0_4559 -> bb8__0_4559 [label="otherwise"];
    bb47__0_4559 -> bb50__0_4559 [label=""];
    bb48__0_4559 -> bb49__0_4559 [label="return"];
    bb49__0_4559 -> bb56__0_4559 [label=""];
    bb50__0_4559 -> bb51__0_4559 [label="return"];
    bb51__0_4559 -> bb52__0_4559 [label="return"];
    bb52__0_4559 -> bb53__0_4559 [label="0"];
    bb52__0_4559 -> bb54__0_4559 [label="1"];
    bb52__0_4559 -> bb8__0_4559 [label="otherwise"];
    bb53__0_4559 -> bb57__0_4559 [label=""];
    bb54__0_4559 -> bb55__0_4559 [label="return"];
    bb55__0_4559 -> bb57__0_4559 [label=""];
    bb56__0_4559 -> bb57__0_4559 [label=""];
    bb58__0_4559 -> bb59__0_4559 [label="return"];
}
