// MIR for `decrease_spot_open_bids_and_asks` after PreCodegen

fn decrease_spot_open_bids_and_asks(_1: &mut SpotPosition, _2: &controller::position::PositionDirection, _3: u64, _4: bool) -> std::result::Result<(), error::ErrorCode> {
    debug spot_position => _1;
    debug direction => _2;
    debug base_asset_amount_unfilled => _3;
    debug update => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: !;
    let mut _8: ();
    let _9: ();
    let mut _10: isize;
    let mut _11: i64;
    let mut _12: i64;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _14: std::result::Result<i64, error::ErrorCode>;
    let mut _15: i64;
    let mut _16: i64;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _18: std::result::Result<i64, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: i64;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: i64;
    let mut _30: i64;
    let mut _31: i64;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _33: std::result::Result<i64, error::ErrorCode>;
    let mut _34: i64;
    let mut _35: i64;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _37: std::result::Result<i64, error::ErrorCode>;
    let mut _38: u64;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: i64;
    let mut _44: isize;
    let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: i64;
    let mut _49: ();
    scope 1 {
        debug residual => _21;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _24;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _26;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _29;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _40;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _43;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _45;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _48;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _4;
        switchInt(move _6) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_8);
        _8 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb32;
    }

    bb2: {
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        _10 = discriminant((*_2));
        switchInt(move _10) -> [0: bb5, 1: bb3, otherwise: bb4];
    }

    bb3: {
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = ((*_1).2: i64);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _3;
        _37 = <u64 as Cast>::cast::<i64>(move _38) -> [return: bb17, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).1: i64);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _3;
        _18 = <u64 as Cast>::cast::<i64>(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        _17 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: i64);
        _16 = _24;
        StorageDead(_24);
        _14 = <i64 as SafeMath>::safe_sub(move _15, move _16) -> [return: bb11, unwind continue];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb30;
    }

    bb11: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _14) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_14);
        _25 = discriminant(_13);
        switchInt(move _25) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_29);
        _29 = ((_13 as Continue).0: i64);
        _12 = _29;
        StorageDead(_29);
        _11 = <i64 as Ord>::max(move _12, const 0_i64) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_26);
        _26 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb30;
    }

    bb16: {
        StorageDead(_12);
        ((*_1).1: i64) = move _11;
        StorageDead(_11);
        StorageDead(_17);
        StorageDead(_13);
        _9 = const ();
        goto -> bb28;
    }

    bb17: {
        StorageDead(_38);
        _36 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_43);
        _43 = ((_36 as Continue).0: i64);
        _35 = _43;
        StorageDead(_43);
        _33 = <i64 as SafeMath>::safe_add(move _34, move _35) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_40);
        _40 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb29;
    }

    bb22: {
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_33);
        _44 = discriminant(_32);
        switchInt(move _44) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_48);
        _48 = ((_32 as Continue).0: i64);
        _31 = _48;
        StorageDead(_48);
        _30 = <i64 as Ord>::min(move _31, const 0_i64) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_45);
        _45 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb29;
    }

    bb27: {
        StorageDead(_31);
        ((*_1).2: i64) = move _30;
        StorageDead(_30);
        StorageDead(_36);
        StorageDead(_32);
        _9 = const ();
        goto -> bb28;
    }

    bb28: {
        StorageDead(_9);
        StorageLive(_49);
        _49 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _49);
        StorageDead(_49);
        goto -> bb32;
    }

    bb29: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_36);
        StorageDead(_32);
        goto -> bb31;
    }

    bb30: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_17);
        StorageDead(_13);
        goto -> bb31;
    }

    bb31: {
        StorageDead(_9);
        goto -> bb32;
    }

    bb32: {
        return;
    }
}
