// MIR for `safe_unwrap::<impl at programs/drift/src/math/safe_unwrap.rs:28:1: 28:39>::safe_unwrap` before PreCodegen

fn safe_unwrap::<impl at programs/drift/src/math/safe_unwrap.rs:28:1: 28:39>::safe_unwrap(_1: std::result::Result<T, U>) -> std::result::Result<T, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<T, error::ErrorCode>;
    let mut _2: isize;
    let _3: T;
    let mut _4: T;
    let _5: &std::panic::Location<'_>;
    let _6: ();
    let mut _7: &str;
    let _8: &str;
    let mut _9: &std::string::String;
    let _10: &std::string::String;
    let _11: std::string::String;
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[&str; 2];
    let _16: &[&str; 2];
    let _17: [&str; 2];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let mut _19: &[core::fmt::rt::Argument<'_>; 2];
    let _20: &[core::fmt::rt::Argument<'_>; 2];
    let _21: [core::fmt::rt::Argument<'_>; 2];
    let mut _22: core::fmt::rt::Argument<'_>;
    let mut _23: &&str;
    let _24: &&str;
    let _25: &str;
    let mut _26: &std::panic::Location<'_>;
    let mut _27: core::fmt::rt::Argument<'_>;
    let mut _28: &u32;
    let _29: &u32;
    let _30: u32;
    let mut _31: &std::panic::Location<'_>;
    let mut _32: error::ErrorCode;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let mut _37: isize;
    scope 1 {
        debug v => _3;
    }
    scope 2 {
        debug caller => _5;
        let _12: std::string::String;
        let mut _33: &[&str; 2];
        scope 3 {
            debug res => _12;
        }
    }

    bb0: {
        _34 = const false;
        _34 = const true;
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_5);
        _5 = Location::<'_>::caller() -> [return: bb4, unwind: bb20];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_3);
        _3 = move ((_1 as Ok).0: T);
        StorageLive(_4);
        _4 = move _3;
        _0 = std::result::Result::<T, error::ErrorCode>::Ok(move _4);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb18;
    }

    bb4: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _33 = const _;
        _16 = &(*_33);
        _15 = &(*_16);
        _14 = move _15 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &(*_5);
        _25 = Location::<'_>::file(move _26) -> [return: bb5, unwind: bb20];
    }

    bb5: {
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _23) -> [return: bb6, unwind: bb20];
    }

    bb6: {
        StorageDead(_23);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &(*_5);
        _30 = Location::<'_>::line(move _31) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _28) -> [return: bb8, unwind: bb20];
    }

    bb8: {
        StorageDead(_28);
        _21 = [move _22, move _27];
        StorageDead(_27);
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = move _19 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_19);
        _13 = Arguments::<'_>::new_v1(move _14, move _18) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_14);
        _12 = format(move _13) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        StorageDead(_13);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_16);
        _11 = move _12;
        StorageDead(_12);
        _10 = &_11;
        _9 = &(*_10);
        _8 = <String as Deref>::deref(move _9) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = solana_program::log::sol_log(move _7) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        StorageDead(_7);
        drop(_11) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_32);
        _32 = error::ErrorCode::FailedUnwrap;
        _0 = std::result::Result::<T, error::ErrorCode>::Err(move _32);
        StorageDead(_32);
        StorageDead(_5);
        goto -> bb18;
    }

    bb14 (cleanup): {
        drop(_11) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        return;
    }

    bb17: {
        drop(_1) -> [return: bb16, unwind: bb15];
    }

    bb18: {
        _35 = discriminant(_1);
        switchInt(move _35) -> [0: bb16, otherwise: bb17];
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        _37 = discriminant(_1);
        switchInt(move _37) -> [0: bb15, otherwise: bb19];
    }
}
