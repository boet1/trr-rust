digraph Mir_0_2596 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn apply_protected_maker_limit_price_offset(_1: u64, _2: controller::position::PositionDirection, _3: state::protected_maker_mode_config::ProtectedMakerParams, _4: bool) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _5: u64;<br align="left"/>let mut _6: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _7: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _8: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _9: u64;<br align="left"/>let mut _10: error::ErrorCode;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: u64;<br align="left"/>let _16: u64;<br align="left"/>let mut _17: bool;<br align="left"/>let mut _18: u8;<br align="left"/>let mut _19: u64;<br align="left"/>let mut _20: u8;<br align="left"/>let mut _21: bool;<br align="left"/>let _22: u64;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: u64;<br align="left"/>let mut _26: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _27: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: u64;<br align="left"/>let mut _35: u64;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: u64;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: bool;<br align="left"/>let _40: u64;<br align="left"/>let mut _41: isize;<br align="left"/>let mut _42: u64;<br align="left"/>let mut _43: u64;<br align="left"/>let mut _44: u64;<br align="left"/>let mut _45: u64;<br align="left"/>let mut _46: u64;<br align="left"/>let mut _47: u64;<br align="left"/>let mut _48: bool;<br align="left"/>let mut _49: u64;<br align="left"/>let mut _50: u64;<br align="left"/>let mut _51: controller::position::PositionDirection;<br align="left"/>let mut _52: u64;<br align="left"/>debug price =&gt; _1;<br align="left"/>debug direction =&gt; _2;<br align="left"/>debug params =&gt; _3;<br align="left"/>debug standardize =&gt; _4;<br align="left"/>debug min_offset =&gt; _5;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug limit_price_bps_divisor =&gt; _16;<br align="left"/>debug price_offset =&gt; _22;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug price =&gt; _40;<br align="left"/>>;
    bb0__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = (_3.2: u64)<br/></td></tr><tr><td align="left">_8 = core::num::&lt;impl u64&gt;::checked_shl(move _9, const 3_u32)</td></tr></table>>];
    bb1__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>_10 = error::ErrorCode::MathError<br/></td></tr><tr><td align="left">_7 = Option::&lt;u64&gt;::ok_or::&lt;error::ErrorCode&gt;(move _8, move _10)</td></tr></table>>];
    bb2__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_6 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _7)</td></tr></table>>];
    bb3__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>_11 = discriminant(_6)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb4__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_6 as Continue).0: u64)<br/>_5 = _15<br/>StorageDead(_15)<br/>StorageDead(_6)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = (_3.0: u8)<br/>_17 = Gt(move _18, const 0_u8)<br/></td></tr><tr><td align="left">switchInt(move _17)</td></tr></table>>];
    bb5__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_6 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb7__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = (_3.0: u8)<br/>_19 = move _20 as u64 (IntToInt)<br/>StorageDead(_20)<br/>_21 = Eq(_19, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _21, &quot;attempt to divide `{}` by zero&quot;, const 10000_u64)</td></tr></table>>];
    bb9__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_16 = const 1000_u64<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_16 = Div(const 10000_u64, move _19)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _1<br/>StorageLive(_29)<br/>_29 = _16<br/></td></tr><tr><td align="left">_27 = &lt;u64 as SafeMath&gt;::safe_div(move _28, move _29)</td></tr></table>>];
    bb12__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">_26 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _27)</td></tr></table>>];
    bb13__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>_30 = discriminant(_26)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb14__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_26 as Continue).0: u64)<br/>_25 = _34<br/>StorageDead(_34)<br/>StorageLive(_35)<br/>_35 = _5<br/></td></tr><tr><td align="left">_24 = &lt;u64 as Ord&gt;::max(move _25, move _35)</td></tr></table>>];
    bb15__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_26 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb16__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_26)<br/>StorageDead(_22)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_25)<br/>StorageLive(_36)<br/>_36 = (_3.1: u64)<br/></td></tr><tr><td align="left">_23 = &lt;u64 as Ord&gt;::max(move _24, move _36)</td></tr></table>>];
    bb18__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>StorageDead(_24)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = _1<br/>_39 = Eq(const 20_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _39, &quot;attempt to divide `{}` by zero&quot;, _38)</td></tr></table>>];
    bb19__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_37 = Div(move _38, const 20_u64)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_22 = &lt;u64 as Ord&gt;::min(move _23, move _37)</td></tr></table>>];
    bb20__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_23)<br/>StorageDead(_26)<br/>StorageLive(_40)<br/>_41 = discriminant(_2)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb21__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = _1<br/>StorageLive(_47)<br/>_47 = _22<br/></td></tr><tr><td align="left">_40 = core::num::&lt;impl u64&gt;::saturating_add(move _46, move _47)</td></tr></table>>];
    bb22__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = _1<br/>StorageLive(_44)<br/>_44 = _22<br/></td></tr><tr><td align="left">_42 = core::num::&lt;impl u64&gt;::saturating_sub(move _43, move _44)</td></tr></table>>];
    bb23__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_43)<br/>StorageLive(_45)<br/>_45 = (_3.2: u64)<br/></td></tr><tr><td align="left">_40 = &lt;u64 as Ord&gt;::max(move _42, move _45)</td></tr></table>>];
    bb24__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = _4<br/></td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb27__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = _40<br/>StorageLive(_50)<br/>_50 = (_3.2: u64)<br/>StorageLive(_51)<br/>_51 = _2<br/></td></tr><tr><td align="left">_0 = math::orders::standardize_price(move _49, move _50, move _51)</td></tr></table>>];
    bb28__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = _40<br/>_0 = std::result::Result::&lt;u64, error::ErrorCode&gt;::Ok(move _52)<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_40)<br/>StorageDead(_22)<br/>StorageDead(_16)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_2596 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2596 -> bb1__0_2596 [label="return"];
    bb1__0_2596 -> bb2__0_2596 [label="return"];
    bb2__0_2596 -> bb3__0_2596 [label="return"];
    bb3__0_2596 -> bb4__0_2596 [label="0"];
    bb3__0_2596 -> bb6__0_2596 [label="1"];
    bb3__0_2596 -> bb5__0_2596 [label="otherwise"];
    bb4__0_2596 -> bb9__0_2596 [label="0"];
    bb4__0_2596 -> bb8__0_2596 [label="otherwise"];
    bb6__0_2596 -> bb7__0_2596 [label="return"];
    bb7__0_2596 -> bb31__0_2596 [label=""];
    bb8__0_2596 -> bb10__0_2596 [label="success"];
    bb9__0_2596 -> bb11__0_2596 [label=""];
    bb10__0_2596 -> bb11__0_2596 [label=""];
    bb11__0_2596 -> bb12__0_2596 [label="return"];
    bb12__0_2596 -> bb13__0_2596 [label="return"];
    bb13__0_2596 -> bb14__0_2596 [label="0"];
    bb13__0_2596 -> bb15__0_2596 [label="1"];
    bb13__0_2596 -> bb5__0_2596 [label="otherwise"];
    bb14__0_2596 -> bb17__0_2596 [label="return"];
    bb15__0_2596 -> bb16__0_2596 [label="return"];
    bb16__0_2596 -> bb31__0_2596 [label=""];
    bb17__0_2596 -> bb18__0_2596 [label="return"];
    bb18__0_2596 -> bb19__0_2596 [label="success"];
    bb19__0_2596 -> bb20__0_2596 [label="return"];
    bb20__0_2596 -> bb22__0_2596 [label="0"];
    bb20__0_2596 -> bb21__0_2596 [label="1"];
    bb20__0_2596 -> bb5__0_2596 [label="otherwise"];
    bb21__0_2596 -> bb25__0_2596 [label="return"];
    bb22__0_2596 -> bb23__0_2596 [label="return"];
    bb23__0_2596 -> bb24__0_2596 [label="return"];
    bb24__0_2596 -> bb26__0_2596 [label=""];
    bb25__0_2596 -> bb26__0_2596 [label=""];
    bb26__0_2596 -> bb29__0_2596 [label="0"];
    bb26__0_2596 -> bb27__0_2596 [label="otherwise"];
    bb27__0_2596 -> bb28__0_2596 [label="return"];
    bb28__0_2596 -> bb30__0_2596 [label=""];
    bb29__0_2596 -> bb30__0_2596 [label=""];
    bb30__0_2596 -> bb32__0_2596 [label=""];
    bb31__0_2596 -> bb32__0_2596 [label=""];
}
