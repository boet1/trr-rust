// MIR for `calculate_max_target_spread` after PreCodegen

fn calculate_max_target_spread(_1: u64, _2: i64, _3: u64, _4: u64, _5: u64, _6: u32) -> std::result::Result<u64, error::ErrorCode> {
    debug reserve_price => _1;
    debug last_oracle_reserve_price_spread_pct => _2;
    debug last_oracle_conf_pct => _3;
    debug mark_std => _4;
    debug oracle_std => _5;
    debug max_spread => _6;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _7: u64;
    let mut _8: u64;
    let mut _9: i64;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: u64;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _14: std::result::Result<u64, error::ErrorCode>;
    let mut _15: u64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: u64;
    let mut _21: u64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _23: std::result::Result<u64, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _26: std::result::Result<u64, error::ErrorCode>;
    let mut _27: u64;
    let mut _28: u64;
    let mut _29: u64;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: u64;
    let mut _35: u64;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: u64;
    let mut _42: u64;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _44: std::result::Result<u64, error::ErrorCode>;
    let mut _45: u32;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: u64;
    let mut _52: u64;
    scope 1 {
        debug max_spread_baseline => _7;
        let _41: u64;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: u64;
        scope 14 {
            debug max_target_spread => _41;
        }
        scope 15 {
            debug residual => _47;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _50;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _31;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _34;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _37;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _40;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = core::num::<impl i64>::unsigned_abs(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _3;
        _14 = <u64 as SafeMath>::safe_mul(move _15, const 2_u64) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        _13 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _14) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: u64);
        _12 = _20;
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = _4;
        StorageLive(_29);
        _29 = _5;
        _27 = <u64 as Ord>::max(move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        goto -> bb29;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = <u64 as SafeMath>::safe_mul(move _27, const _) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_27);
        _25 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_26);
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = ((_25 as Continue).0: u64);
        _24 = _34;
        StorageDead(_34);
        StorageLive(_35);
        _35 = _1;
        _23 = <u64 as SafeMath>::safe_div(move _24, move _35) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb28;
    }

    bb14: {
        StorageDead(_35);
        StorageDead(_24);
        _22 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_23);
        _36 = discriminant(_22);
        switchInt(move _36) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_40);
        _40 = ((_22 as Continue).0: u64);
        _21 = _40;
        StorageDead(_40);
        _11 = <u64 as Ord>::max(move _12, move _21) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_37);
        _37 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb28;
    }

    bb19: {
        StorageDead(_21);
        StorageDead(_12);
        _10 = <u64 as Ord>::min(move _11, const _) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_11);
        _7 = <u64 as Ord>::max(move _8, move _10) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_13);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _6;
        _44 = <u32 as Cast>::cast::<u64>(move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        _43 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_44);
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb5];
    }

    bb24: {
        StorageLive(_50);
        _50 = ((_43 as Continue).0: u64);
        _42 = _50;
        StorageDead(_50);
        StorageLive(_51);
        _51 = _7;
        _41 = <u64 as Ord>::max(move _42, move _51) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_43);
        StorageDead(_41);
        goto -> bb30;
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_42);
        StorageDead(_43);
        StorageLive(_52);
        _52 = _41;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _52);
        StorageDead(_52);
        StorageDead(_41);
        StorageDead(_7);
        goto -> bb31;
    }

    bb28: {
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_25);
        StorageDead(_22);
        goto -> bb29;
    }

    bb29: {
        StorageDead(_13);
        goto -> bb30;
    }

    bb30: {
        StorageDead(_7);
        goto -> bb31;
    }

    bb31: {
        return;
    }
}
