// MIR for `keeper::handle_update_prelaunch_oracle` before PreCodegen

fn keeper::handle_update_prelaunch_oracle(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdatePrelaunchOracle<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle_map::OracleMap<'_>>;
    let mut _25: std::result::Result<state::oracle_map::OracleMap<'_>, error::ErrorCode>;
    let mut _26: &anchor_lang::prelude::AccountInfo<'_>;
    let _27: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _28: u64;
    let mut _29: std::option::Option<state::state::OracleGuardRails>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _38: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _39: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _41: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _47: ();
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _49: std::result::Result<(), error::ErrorCode>;
    let mut _50: bool;
    let mut _51: &state::oracle::OracleSource;
    let _52: &state::perp_market::PerpMarket;
    let mut _53: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _54: &state::oracle::OracleSource;
    let _55: state::oracle::OracleSource;
    let mut _56: ();
    let _58: ();
    let mut _59: &str;
    let _60: &str;
    let mut _61: &std::string::String;
    let _62: &std::string::String;
    let _63: std::string::String;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[&str; 2];
    let _68: &[&str; 2];
    let _69: [&str; 2];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let mut _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: [core::fmt::rt::Argument<'_>; 1];
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &error::ErrorCode;
    let _76: &error::ErrorCode;
    let _77: ();
    let mut _78: &str;
    let _79: &str;
    let mut _80: error::ErrorCode;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _88: std::result::Result<(), error::ErrorCode>;
    let mut _89: &state::perp_market::PerpMarket;
    let _90: &state::perp_market::PerpMarket;
    let mut _91: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _92: &state::oracle_map::OracleMap<'_>;
    let _93: &state::oracle_map::OracleMap<'_>;
    let mut _94: u64;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: ();
    let mut _103: &mut instructions::keeper::UpdatePrelaunchOracle<'_>;
    let mut _104: &mut instructions::keeper::UpdatePrelaunchOracle<'_>;
    let mut _105: &mut instructions::keeper::UpdatePrelaunchOracle<'_>;
    let mut _106: &mut instructions::keeper::UpdatePrelaunchOracle<'_>;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    let mut _113: isize;
    let mut _114: isize;
    let mut _115: isize;
    let mut _116: isize;
    let mut _117: isize;
    let mut _118: isize;
    let mut _119: isize;
    let mut _120: isize;
    let mut _121: isize;
    let mut _122: isize;
    let mut _123: isize;
    let mut _124: isize;
    let mut _125: isize;
    let mut _126: isize;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _14;
        let _22: u64;
        scope 10 {
            debug clock_slot => _22;
            let _23: state::oracle_map::OracleMap<'_>;
            let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _34: state::oracle_map::OracleMap<'_>;
            scope 11 {
                debug oracle_map => _23;
                let _35: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
                let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _46: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                scope 16 {
                    debug perp_market => _35;
                    let _57: error::ErrorCode;
                    let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _85: ();
                    let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _99: ();
                    let mut _102: &state::oracle::OracleSource;
                    scope 21 {
                        debug error_code => _57;
                        let _64: std::string::String;
                        let mut _101: &[&str; 2];
                        scope 22 {
                            debug res => _64;
                        }
                    }
                    scope 23 {
                        debug residual => _82;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _85;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug residual => _96;
                        scope 28 {
                        }
                    }
                    scope 29 {
                        debug val => _99;
                        scope 30 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _43;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _46;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _31;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _34;
                scope 15 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _103 = deref_copy (_1.1: &mut instructions::keeper::UpdatePrelaunchOracle<'_>);
        _6 = &((*_103).2: anchor_lang::prelude::AccountInfo<'_>);
        _5 = &(*_6);
        StorageLive(_7);
        StorageLive(_8);
        _104 = deref_copy (_1.1: &mut instructions::keeper::UpdatePrelaunchOracle<'_>);
        _8 = &((*_104).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _7 = &(*_8);
        _4 = constraints::valid_oracle_for_perp_market(move _5, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb55];
    }

    bb2: {
        StorageDead(_4);
        _9 = discriminant(_3);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_3 as Continue).0: ());
        _2 = _13;
        StorageDead(_13);
        _107 = discriminant(_3);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb59];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _121 = discriminant(_3);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb51;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb55];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _109 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _22 = (_14.0: u64);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _105 = deref_copy (_1.1: &mut instructions::keeper::UpdatePrelaunchOracle<'_>);
        _27 = &((*_105).2: anchor_lang::prelude::AccountInfo<'_>);
        _26 = &(*_27);
        StorageLive(_28);
        _28 = _22;
        StorageLive(_29);
        _29 = Option::<state::state::OracleGuardRails>::None;
        _25 = OracleMap::<'_>::load_one(move _26, move _28, move _29) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb58];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _119 = discriminant(_15);
        StorageDead(_15);
        goto -> bb50;
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        _24 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as Try>::branch(move _25) -> [return: bb13, unwind: bb55];
    }

    bb13: {
        StorageDead(_25);
        _30 = discriminant(_24);
        switchInt(move _30) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_34);
        _34 = move ((_24 as Continue).0: state::oracle_map::OracleMap<'_>);
        _23 = move _34;
        StorageDead(_34);
        _113 = discriminant(_24);
        StorageDead(_27);
        StorageDead(_24);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _106 = deref_copy (_1.1: &mut instructions::keeper::UpdatePrelaunchOracle<'_>);
        _40 = &((*_106).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _39 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load(move _40) -> [return: bb17, unwind: bb54];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb16, unwind: bb57];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        _111 = discriminant(_24);
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb49;
    }

    bb17: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _38 = std::result::Result::<Ref<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _39, move _41) -> [return: bb18, unwind: bb54];
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _38) -> [return: bb19, unwind: bb54];
    }

    bb19: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_46);
        _46 = move ((_37 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _36 = move _46;
        StorageDead(_46);
        _35 = &_36;
        _117 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_35);
        _52 = <Ref<'_, PerpMarket> as Deref>::deref(move _53) -> [return: bb23, unwind: bb53];
    }

    bb21: {
        StorageLive(_43);
        _43 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb22, unwind: bb56];
    }

    bb22: {
        StorageDead(_45);
        StorageDead(_43);
        _115 = discriminant(_37);
        StorageDead(_37);
        goto -> bb48;
    }

    bb23: {
        StorageDead(_53);
        _51 = &(((*_52).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        StorageLive(_54);
        _102 = const _;
        _54 = &(*_102);
        _50 = <state::oracle::OracleSource as PartialEq>::eq(move _51, move _54) -> [return: bb24, unwind: bb53];
    }

    bb24: {
        switchInt(move _50) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_56);
        _56 = ();
        _49 = std::result::Result::<(), error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_57);
        _57 = error::ErrorCode::DefaultError;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _101 = const _;
        _68 = &(*_101);
        _67 = &(*_68);
        _66 = move _67 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_57;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _75) -> [return: bb27, unwind: bb53];
    }

    bb27: {
        StorageDead(_75);
        _73 = [move _74];
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = move _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_71);
        _65 = Arguments::<'_>::new_v1(move _66, move _70) -> [return: bb28, unwind: bb53];
    }

    bb28: {
        StorageDead(_70);
        StorageDead(_66);
        _64 = format(move _65) -> [return: bb29, unwind: bb53];
    }

    bb29: {
        StorageDead(_65);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        _63 = move _64;
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = <String as Deref>::deref(move _61) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = solana_program::log::sol_log(move _59) -> [return: bb31, unwind: bb52];
    }

    bb31: {
        StorageDead(_59);
        drop(_63) -> [return: bb32, unwind: bb53];
    }

    bb32: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = const "wrong oracle source";
        _78 = &(*_79);
        _77 = solana_program::log::sol_log(move _78) -> [return: bb33, unwind: bb53];
    }

    bb33: {
        StorageDead(_78);
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_80);
        _80 = _57;
        _49 = std::result::Result::<(), error::ErrorCode>::Err(move _80);
        StorageDead(_80);
        StorageDead(_57);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_50);
        _48 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _49) -> [return: bb35, unwind: bb53];
    }

    bb35: {
        StorageDead(_49);
        _81 = discriminant(_48);
        switchInt(move _81) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_85);
        _85 = ((_48 as Continue).0: ());
        _47 = _85;
        StorageDead(_85);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_35);
        _90 = <Ref<'_, PerpMarket> as Deref>::deref(move _91) -> [return: bb39, unwind: bb53];
    }

    bb37: {
        StorageLive(_82);
        _82 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb38, unwind: bb53];
    }

    bb38: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb47;
    }

    bb39: {
        _89 = &(*_90);
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_23;
        _92 = &(*_93);
        StorageLive(_94);
        _94 = _22;
        _88 = instructions::optional_accounts::update_prelaunch_oracle(move _89, move _92, move _94) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_89);
        _87 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _88) -> [return: bb41, unwind: bb53];
    }

    bb41: {
        StorageDead(_88);
        _95 = discriminant(_87);
        switchInt(move _95) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_99);
        _99 = ((_87 as Continue).0: ());
        _86 = _99;
        StorageDead(_99);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_100);
        _100 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _100);
        StorageDead(_100);
        drop(_36) -> [return: bb45, unwind: bb54];
    }

    bb43: {
        StorageLive(_96);
        _96 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb44, unwind: bb53];
    }

    bb44: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb47;
    }

    bb45: {
        StorageDead(_36);
        StorageDead(_35);
        drop(_23) -> [return: bb46, unwind: bb55];
    }

    bb46: {
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        goto -> bb51;
    }

    bb47: {
        drop(_36) -> [return: bb48, unwind: bb54];
    }

    bb48: {
        StorageDead(_36);
        StorageDead(_35);
        drop(_23) -> [return: bb49, unwind: bb55];
    }

    bb49: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_14);
        goto -> bb51;
    }

    bb51: {
        return;
    }

    bb52 (cleanup): {
        drop(_63) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        drop(_36) -> [return: bb54, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_23) -> [return: bb55, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        resume;
    }

    bb56 (cleanup): {
        _123 = discriminant(_37);
        goto -> bb54;
    }

    bb57 (cleanup): {
        _124 = discriminant(_24);
        goto -> bb55;
    }

    bb58 (cleanup): {
        _125 = discriminant(_15);
        goto -> bb55;
    }

    bb59 (cleanup): {
        _126 = discriminant(_3);
        goto -> bb55;
    }
}
