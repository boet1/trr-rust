// MIR for `calculate_liability_transfer_implied_by_asset_amount` after PreCodegen

fn calculate_liability_transfer_implied_by_asset_amount(_1: u128, _2: u32, _3: u32, _4: i64, _5: u32, _6: u32, _7: i64) -> std::result::Result<u128, error::ErrorCode> {
    debug asset_amount => _1;
    debug asset_liquidation_multiplier => _2;
    debug asset_decimals => _3;
    debug asset_price => _4;
    debug liability_liquidation_multiplier => _5;
    debug liability_decimals => _6;
    debug liability_price => _7;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _8: u128;
    let _9: u128;
    let mut _10: (u128, u128);
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: u128;
    let mut _15: u32;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: (u32, bool);
    let mut _19: u128;
    let mut _20: u32;
    let mut _21: u32;
    let mut _22: u32;
    let mut _23: (u32, bool);
    let mut _24: u128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _26: std::result::Result<u128, error::ErrorCode>;
    let mut _27: u128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _29: std::result::Result<u128, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: u128;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _35: std::result::Result<u128, error::ErrorCode>;
    let mut _36: u128;
    let mut _37: u128;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: i64;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: u128;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _59: std::result::Result<u128, error::ErrorCode>;
    let mut _60: u32;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _66: isize;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: u128;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _73: std::result::Result<u128, error::ErrorCode>;
    let mut _74: u128;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _76: std::result::Result<u128, error::ErrorCode>;
    let mut _77: i64;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: u128;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _85: std::result::Result<u128, error::ErrorCode>;
    let mut _86: u32;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: u128;
    scope 1 {
        debug numerator_scale => _8;
        debug denominator_scale => _9;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: u128;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: u128;
        let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _56: u128;
        let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _65: u128;
        let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _70: u128;
        let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _82: u128;
        let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _91: u128;
        let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _96: u128;
        let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _101: u128;
        scope 2 {
            debug residual => _39;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _42;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _48;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _51;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _53;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _56;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _62;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _65;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _67;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _70;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _79;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _82;
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _88;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _91;
            scope 29 {
            }
        }
        scope 30 {
            debug residual => _93;
            scope 31 {
            }
        }
        scope 32 {
            debug val => _96;
            scope 33 {
            }
        }
        scope 34 {
            debug residual => _98;
            scope 35 {
            }
        }
        scope 36 {
            debug val => _101;
            scope 37 {
            }
        }
    }

    bb0: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _6;
        StorageLive(_13);
        _13 = _3;
        _11 = Gt(move _12, move _13);
        switchInt(move _11) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _6;
        StorageLive(_17);
        _17 = _3;
        _18 = CheckedSub(_16, _17);
        assert(!move (_18.1: bool), "attempt to compute `{} - {}`, which would overflow", move _16, move _17) -> [success: bb2, unwind continue];
    }

    bb2: {
        _15 = move (_18.0: u32);
        StorageDead(_17);
        StorageDead(_16);
        _14 = core::num::<impl u128>::pow(const 10_u128, move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        _10 = (move _14, const 1_u128);
        StorageDead(_14);
        goto -> bb7;
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _3;
        StorageLive(_22);
        _22 = _6;
        _23 = CheckedSub(_21, _22);
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", move _21, move _22) -> [success: bb5, unwind continue];
    }

    bb5: {
        _20 = move (_23.0: u32);
        StorageDead(_22);
        StorageDead(_21);
        _19 = core::num::<impl u128>::pow(const 10_u128, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        _10 = (const 1_u128, move _19);
        StorageDead(_19);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_11);
        StorageLive(_8);
        _8 = (_10.0: u128);
        StorageLive(_9);
        _9 = (_10.1: u128);
        StorageDead(_10);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _1;
        StorageLive(_37);
        _37 = _8;
        _35 = <u128 as SafeMath>::safe_mul(move _36, move _37) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_35);
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_42);
        _42 = ((_34 as Continue).0: u128);
        _33 = _42;
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _4;
        _45 = <i64 as Cast>::cast::<u128>(move _46) -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_39);
        _39 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb62;
    }

    bb14: {
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: u128);
        _43 = _51;
        StorageDead(_51);
        _32 = <u128 as SafeMath>::safe_mul(move _33, move _43) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_48);
        _48 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb60;
    }

    bb19: {
        StorageDead(_43);
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_32);
        _52 = discriminant(_31);
        switchInt(move _52) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_56);
        _56 = ((_31 as Continue).0: u128);
        _30 = _56;
        StorageDead(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _5;
        _59 = <u32 as Cast>::cast::<u128>(move _60) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_53);
        _53 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb60;
    }

    bb24: {
        StorageDead(_60);
        _58 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_59);
        _61 = discriminant(_58);
        switchInt(move _61) -> [0: bb26, 1: bb27, otherwise: bb11];
    }

    bb26: {
        StorageLive(_65);
        _65 = ((_58 as Continue).0: u128);
        _57 = _65;
        StorageDead(_65);
        _29 = <u128 as SafeMath>::safe_mul(move _30, move _57) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_62);
        _62 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_57);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb58;
    }

    bb29: {
        StorageDead(_57);
        StorageDead(_30);
        _28 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_29);
        _66 = discriminant(_28);
        switchInt(move _66) -> [0: bb31, 1: bb32, otherwise: bb11];
    }

    bb31: {
        StorageLive(_70);
        _70 = ((_28 as Continue).0: u128);
        _27 = _70;
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _7;
        _76 = <i64 as Cast>::cast::<u128>(move _77) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_67);
        _67 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_69);
        StorageDead(_67);
        goto -> bb58;
    }

    bb34: {
        StorageDead(_77);
        _75 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _76) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_76);
        _78 = discriminant(_75);
        switchInt(move _78) -> [0: bb36, 1: bb37, otherwise: bb11];
    }

    bb36: {
        StorageLive(_82);
        _82 = ((_75 as Continue).0: u128);
        _74 = _82;
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _2;
        _85 = <u32 as Cast>::cast::<u128>(move _86) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_79);
        _79 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb57;
    }

    bb39: {
        StorageDead(_86);
        _84 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _85) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_85);
        _87 = discriminant(_84);
        switchInt(move _87) -> [0: bb41, 1: bb42, otherwise: bb11];
    }

    bb41: {
        StorageLive(_91);
        _91 = ((_84 as Continue).0: u128);
        _83 = _91;
        StorageDead(_91);
        _73 = <u128 as SafeMath>::safe_mul(move _74, move _83) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_88);
        _88 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_83);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb55;
    }

    bb44: {
        StorageDead(_83);
        StorageDead(_74);
        _72 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _73) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_73);
        _92 = discriminant(_72);
        switchInt(move _92) -> [0: bb46, 1: bb47, otherwise: bb11];
    }

    bb46: {
        StorageLive(_96);
        _96 = ((_72 as Continue).0: u128);
        _71 = _96;
        StorageDead(_96);
        _26 = <u128 as SafeMath>::safe_div_ceil(move _27, move _71) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_93);
        _93 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_95);
        StorageDead(_93);
        goto -> bb55;
    }

    bb49: {
        StorageDead(_71);
        StorageDead(_27);
        _25 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_26);
        _97 = discriminant(_25);
        switchInt(move _97) -> [0: bb51, 1: bb52, otherwise: bb11];
    }

    bb51: {
        StorageLive(_101);
        _101 = ((_25 as Continue).0: u128);
        _24 = _101;
        StorageDead(_101);
        StorageLive(_102);
        _102 = _9;
        _0 = <u128 as SafeMath>::safe_div_ceil(move _24, move _102) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_98);
        _98 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_100);
        StorageDead(_98);
        goto -> bb56;
    }

    bb54: {
        StorageDead(_102);
        StorageDead(_24);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_84);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_58);
        StorageDead(_44);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        goto -> bb63;
    }

    bb55: {
        StorageDead(_71);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_24);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_84);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_75);
        StorageDead(_72);
        goto -> bb59;
    }

    bb58: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_58);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_44);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        goto -> bb63;
    }

    bb63: {
        return;
    }
}
