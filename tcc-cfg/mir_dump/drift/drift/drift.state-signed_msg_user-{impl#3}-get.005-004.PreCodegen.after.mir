// MIR for `signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:91:1: 91:41>::get` after PreCodegen

fn signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:91:1: 91:41>::get(_1: &SignedMsgUserOrdersZeroCopy<'_>, _2: u32) -> &SignedMsgOrderId {
    debug self => _1;
    debug index => _2;
    let mut _0: &state::signed_msg_user::SignedMsgOrderId;
    let _3: usize;
    let mut _5: usize;
    let mut _6: u32;
    let mut _7: usize;
    let mut _8: (usize, bool);
    let _9: &state::signed_msg_user::SignedMsgOrderId;
    let mut _10: &[u8];
    let _11: &[u8];
    let _12: &[u8];
    let mut _13: &[u8];
    let _14: &[u8];
    let mut _15: &std::cell::Ref<'_, [u8]>;
    let mut _16: std::ops::Range<usize>;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: (usize, bool);
    scope 1 {
        debug size => _3;
        let _4: usize;
        scope 2 {
            debug start => _4;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = std::mem::size_of::<SignedMsgOrderId>() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _2;
        _5 = move _6 as usize (IntToInt);
        StorageDead(_6);
        StorageLive(_7);
        _7 = _3;
        _8 = CheckedMul(_5, _7);
        assert(!move (_8.1: bool), "attempt to compute `{} * {}`, which would overflow", move _5, move _7) -> [success: bb2, unwind continue];
    }

    bb2: {
        _4 = move (_8.0: usize);
        StorageDead(_7);
        StorageDead(_5);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &((*_1).1: std::cell::Ref<'_, [u8]>);
        _14 = <Ref<'_, [u8]> as Deref>::deref(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = &(*_14);
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _4;
        StorageLive(_18);
        StorageLive(_19);
        _19 = _4;
        StorageLive(_20);
        _20 = _3;
        _21 = CheckedAdd(_19, _20);
        assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _19, move _20) -> [success: bb4, unwind continue];
    }

    bb4: {
        _18 = move (_21.0: usize);
        StorageDead(_20);
        StorageDead(_19);
        _16 = std::ops::Range::<usize> { start: move _17, end: move _18 };
        StorageDead(_18);
        StorageDead(_17);
        _12 = <[u8] as Index<std::ops::Range<usize>>>::index(move _13, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_13);
        _11 = &(*_12);
        _10 = &(*_11);
        _9 = bytemuck::from_bytes::<SignedMsgOrderId>(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = &(*_9);
        StorageDead(_10);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        return;
    }
}
