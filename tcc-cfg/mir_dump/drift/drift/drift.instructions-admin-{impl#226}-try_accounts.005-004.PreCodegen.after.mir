// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5514:10: 5514:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5514:10: 5514:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut DeletePrelaunchOracleBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::DeletePrelaunchOracleBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::DeletePrelaunchOracleBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::DeletePrelaunchOracleBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::DeletePrelaunchOracleBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _22: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::admin::DeletePrelaunchOracleBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::admin::DeletePrelaunchOracleBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _52: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::admin::DeletePrelaunchOracleBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _67: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::admin::DeletePrelaunchOracleBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _80: ();
    let mut _81: bool;
    let mut _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: &anchor_lang::prelude::Signer<'_>;
    let _84: &anchor_lang::prelude::Signer<'_>;
    let mut _85: !;
    let mut _86: anchor_lang::error::Error;
    let mut _87: anchor_lang::error::Error;
    let mut _88: anchor_lang::error::ErrorCode;
    let mut _91: (anchor_lang::prelude::Pubkey, u8);
    let mut _92: &[&[u8]];
    let mut _93: &[&[u8]; 2];
    let _94: &[&[u8]; 2];
    let _95: [&[u8]; 2];
    let mut _96: &[u8];
    let _97: &[u8];
    let mut _98: &[u8; 16];
    let _99: &[u8; 16];
    let mut _100: &[u8];
    let _101: &[u8];
    let mut _102: &[u8; 2];
    let _103: [u8; 2];
    let mut _104: u16;
    let mut _105: &anchor_lang::prelude::Pubkey;
    let _106: &&anchor_lang::prelude::Pubkey;
    let mut _107: u8;
    let _108: ();
    let mut _109: bool;
    let mut _110: &anchor_lang::prelude::Pubkey;
    let _111: anchor_lang::prelude::Pubkey;
    let mut _112: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _113: &anchor_lang::prelude::Pubkey;
    let mut _114: !;
    let mut _115: anchor_lang::error::Error;
    let mut _116: anchor_lang::error::Error;
    let mut _117: anchor_lang::error::Error;
    let mut _118: anchor_lang::error::ErrorCode;
    let mut _119: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _120: anchor_lang::prelude::Pubkey;
    let mut _121: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _122: anchor_lang::prelude::Pubkey;
    let _123: ();
    let mut _124: bool;
    let mut _125: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _126: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let _127: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _128: !;
    let mut _129: anchor_lang::error::Error;
    let mut _130: anchor_lang::error::Error;
    let mut _131: anchor_lang::error::ErrorCode;
    let _132: ();
    let mut _133: bool;
    let mut _134: &anchor_lang::prelude::Pubkey;
    let _135: anchor_lang::prelude::Pubkey;
    let mut _136: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _137: &anchor_lang::prelude::Pubkey;
    let _138: anchor_lang::prelude::Pubkey;
    let mut _139: &anchor_lang::prelude::Signer<'_>;
    let mut _140: !;
    let mut _141: anchor_lang::error::Error;
    let mut _142: anchor_lang::error::Error;
    let mut _143: anchor_lang::error::ErrorCode;
    let _144: ();
    let mut _145: bool;
    let mut _146: u16;
    let mut _147: &state::perp_market::PerpMarket;
    let mut _148: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _149: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _151: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _152: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _158: u16;
    let mut _159: !;
    let mut _160: anchor_lang::error::Error;
    let mut _161: anchor_lang::error::Error;
    let mut _162: anchor_lang::error::ErrorCode;
    let _163: ();
    let mut _165: &state::state::State;
    let mut _166: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _168: &anchor_lang::prelude::Signer<'_>;
    let mut _169: bool;
    let mut _170: &anchor_lang::prelude::Pubkey;
    let mut _171: &anchor_lang::prelude::Pubkey;
    let mut _172: !;
    let mut _173: anchor_lang::error::Error;
    let mut _174: anchor_lang::error::Error;
    let mut _175: anchor_lang::error::Error;
    let mut _176: anchor_lang::error::ErrorCode;
    let mut _177: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _178: anchor_lang::prelude::Pubkey;
    let mut _179: anchor_lang::prelude::Pubkey;
    let mut _180: instructions::admin::DeletePrelaunchOracle<'_>;
    let mut _181: anchor_lang::prelude::Signer<'_>;
    let mut _182: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _183: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _184: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _185: &anchor_lang::prelude::Pubkey;
    let mut _186: bool;
    let mut _187: bool;
    let mut _188: bool;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    let mut _197: isize;
    let mut _198: isize;
    let mut _199: isize;
    let mut _200: isize;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::DeletePrelaunchOracleBumps>>::try_accounts::__Args;
        scope 2 {
            debug perp_market_index => _7;
            let _20: anchor_lang::prelude::Signer<'_>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug admin => _20;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
                scope 12 {
                    debug prelaunch_oracle => _35;
                    let _50: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                    scope 17 {
                        debug perp_market => _50;
                        let _65: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        scope 22 {
                            debug state => _65;
                            let _89: anchor_lang::prelude::Pubkey;
                            let _90: u8;
                            scope 27 {
                                debug __pda_address => _89;
                                debug __bump => _90;
                                let _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _157: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                let _164: anchor_lang::prelude::Pubkey;
                                scope 28 {
                                    debug residual => _154;
                                    scope 29 {
                                    }
                                }
                                scope 30 {
                                    debug val => _157;
                                    scope 31 {
                                    }
                                }
                                scope 32 {
                                    debug my_key => _164;
                                    let _167: anchor_lang::prelude::Pubkey;
                                    scope 33 {
                                        debug target_key => _167;
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _188 = const false;
        _187 = const false;
        _186 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, DeletePrelaunchOracleBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
        _10 = std::result::Result::<<admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, DeletePrelaunchOracleBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18}>(move _11, move _14) -> [return: bb2, unwind: bb90];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, DeletePrelaunchOracleBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::admin::DeletePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::DeletePrelaunchOracleBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, DeletePrelaunchOracleBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb86;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
        _22 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18}>(move _23, move _29) -> [return: bb9, unwind: bb90];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb90];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _20 = move _34;
        StorageDead(_34);
        _189 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as anchor_lang::Accounts<'_, DeletePrelaunchOracleBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb99];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _209 = discriminant(_21);
        StorageDead(_21);
        goto -> bb85;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18}>(move _38, move _44) -> [return: bb15, unwind: bb90];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb90];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>);
        _35 = move _49;
        StorageDead(_49);
        _191 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as anchor_lang::Accounts<'_, DeletePrelaunchOracleBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb98];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _207 = discriminant(_36);
        StorageDead(_36);
        goto -> bb84;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
        _52 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18}>(move _53, move _59) -> [return: bb21, unwind: bb90];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb90];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _50 = move _64;
        StorageDead(_64);
        _193 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, DeletePrelaunchOracleBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb97];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _205 = discriminant(_51);
        StorageDead(_51);
        goto -> bb83;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18};
        _67 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5514:10: 5514:18}>(move _68, move _74) -> [return: bb27, unwind: bb90];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb90];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _65 = move _79;
        StorageDead(_79);
        _195 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &_20;
        _83 = &(*_84);
        _82 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _83) -> [return: bb32, unwind: bb89];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb96];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _203 = discriminant(_66);
        StorageDead(_66);
        goto -> bb82;
    }

    bb32: {
        StorageDead(_83);
        _81 = ((*_82).6: bool);
        switchInt(move _81) -> [0: bb33, otherwise: bb36];
    }

    bb33: {
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = ConstraintMut;
        _87 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _88) -> [return: bb34, unwind: bb89];
    }

    bb34: {
        StorageDead(_88);
        _86 = anchor_lang::error::Error::with_account_name::<&str>(move _87, const "admin") -> [return: bb35, unwind: bb89];
    }

    bb35: {
        StorageDead(_87);
        _0 = std::result::Result::<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _86);
        StorageDead(_86);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb81;
    }

    bb36: {
        StorageDead(_84);
        StorageDead(_82);
        _80 = const ();
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = const b"prelaunch_oracle";
        _98 = &(*_99);
        _97 = <[u8; 16] as AsRef<[u8]>>::as_ref(move _98) -> [return: bb37, unwind: bb89];
    }

    bb37: {
        _96 = &(*_97);
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _7;
        _103 = core::num::<impl u16>::to_le_bytes(move _104) -> [return: bb38, unwind: bb89];
    }

    bb38: {
        _102 = &_103;
        StorageDead(_104);
        _101 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _102) -> [return: bb39, unwind: bb89];
    }

    bb39: {
        _100 = &(*_101);
        StorageDead(_102);
        _95 = [move _96, move _100];
        StorageDead(_100);
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = move _93 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &_1;
        _185 = deref_copy (*_106);
        _105 = &(*_185);
        _91 = anchor_lang::prelude::Pubkey::find_program_address(move _92, move _105) -> [return: bb40, unwind: bb89];
    }

    bb40: {
        StorageDead(_105);
        StorageDead(_92);
        StorageLive(_89);
        _89 = (_91.0: anchor_lang::prelude::Pubkey);
        StorageLive(_90);
        _90 = (_91.1: u8);
        StorageDead(_106);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_91);
        StorageLive(_107);
        _107 = _90;
        ((*_4).0: u8) = move _107;
        StorageDead(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = &_35;
        _111 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as anchor_lang::Key>::key(move _112) -> [return: bb41, unwind: bb89];
    }

    bb41: {
        _110 = &_111;
        StorageDead(_112);
        StorageLive(_113);
        _113 = &_89;
        _109 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _110, move _113) -> [return: bb42, unwind: bb89];
    }

    bb42: {
        switchInt(move _109) -> [0: bb48, otherwise: bb43];
    }

    bb43: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = ConstraintSeeds;
        _117 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _118) -> [return: bb44, unwind: bb89];
    }

    bb44: {
        StorageDead(_118);
        _116 = anchor_lang::error::Error::with_account_name::<&str>(move _117, const "prelaunch_oracle") -> [return: bb45, unwind: bb89];
    }

    bb45: {
        _188 = const true;
        StorageDead(_117);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_35;
        _120 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as anchor_lang::Key>::key(move _121) -> [return: bb46, unwind: bb95];
    }

    bb46: {
        StorageDead(_121);
        StorageLive(_122);
        _122 = _89;
        _119 = (move _120, move _122);
        StorageDead(_122);
        StorageDead(_120);
        _188 = const false;
        _115 = anchor_lang::error::Error::with_pubkeys(move _116, move _119) -> [return: bb47, unwind: bb95];
    }

    bb47: {
        StorageDead(_119);
        _188 = const false;
        StorageDead(_116);
        _0 = std::result::Result::<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _115);
        StorageDead(_115);
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb80;
    }

    bb48: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_110);
        _108 = const ();
        StorageDead(_109);
        StorageDead(_108);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_35;
        _126 = &(*_127);
        _125 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _126) -> [return: bb49, unwind: bb89];
    }

    bb49: {
        StorageDead(_126);
        _124 = ((*_125).6: bool);
        switchInt(move _124) -> [0: bb50, otherwise: bb53];
    }

    bb50: {
        StorageDead(_127);
        StorageDead(_125);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = ConstraintMut;
        _130 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _131) -> [return: bb51, unwind: bb89];
    }

    bb51: {
        StorageDead(_131);
        _129 = anchor_lang::error::Error::with_account_name::<&str>(move _130, const "prelaunch_oracle") -> [return: bb52, unwind: bb89];
    }

    bb52: {
        StorageDead(_130);
        _0 = std::result::Result::<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _129);
        StorageDead(_129);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb80;
    }

    bb53: {
        StorageDead(_127);
        StorageDead(_125);
        _123 = const ();
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_35;
        _135 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as anchor_lang::Key>::key(move _136) -> [return: bb54, unwind: bb89];
    }

    bb54: {
        _134 = &_135;
        StorageDead(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_20;
        _138 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _139) -> [return: bb55, unwind: bb89];
    }

    bb55: {
        _137 = &_138;
        StorageDead(_139);
        _133 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _134, move _137) -> [return: bb56, unwind: bb89];
    }

    bb56: {
        switchInt(move _133) -> [0: bb60, otherwise: bb57];
    }

    bb57: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = ConstraintClose;
        _142 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _143) -> [return: bb58, unwind: bb89];
    }

    bb58: {
        StorageDead(_143);
        _141 = anchor_lang::error::Error::with_account_name::<&str>(move _142, const "prelaunch_oracle") -> [return: bb59, unwind: bb89];
    }

    bb59: {
        StorageDead(_142);
        _0 = std::result::Result::<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _141);
        StorageDead(_141);
        StorageDead(_133);
        StorageDead(_132);
        goto -> bb80;
    }

    bb60: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_134);
        _132 = const ();
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_50;
        _151 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load(move _152) -> [return: bb61, unwind: bb89];
    }

    bb61: {
        StorageDead(_152);
        _150 = <std::result::Result<Ref<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _151) -> [return: bb62, unwind: bb89];
    }

    bb62: {
        _186 = const true;
        _187 = const true;
        StorageDead(_151);
        _153 = discriminant(_150);
        switchInt(move _153) -> [0: bb63, 1: bb64, otherwise: bb5];
    }

    bb63: {
        StorageLive(_157);
        _157 = move ((_150 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _149 = move _157;
        StorageDead(_157);
        _148 = &_149;
        _147 = <Ref<'_, PerpMarket> as Deref>::deref(move _148) -> [return: bb66, unwind: bb88];
    }

    bb64: {
        StorageLive(_154);
        _154 = move ((_150 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_156);
        _156 = move _154;
        _0 = <std::result::Result<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _156) -> [return: bb65, unwind: bb93];
    }

    bb65: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_148);
        StorageDead(_146);
        _201 = discriminant(_150);
        _186 = const false;
        _187 = const false;
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_147);
        goto -> bb79;
    }

    bb66: {
        StorageDead(_148);
        _146 = ((*_147).21: u16);
        StorageLive(_158);
        _158 = _7;
        _145 = Eq(move _146, move _158);
        switchInt(move _145) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        StorageDead(_158);
        StorageDead(_146);
        drop(_149) -> [return: bb92, unwind: bb93];
    }

    bb68: {
        StorageDead(_158);
        StorageDead(_146);
        drop(_149) -> [return: bb91, unwind: bb93];
    }

    bb69: {
        StorageDead(_162);
        _160 = anchor_lang::error::Error::with_account_name::<&str>(move _161, const "perp_market") -> [return: bb70, unwind: bb89];
    }

    bb70: {
        StorageDead(_161);
        _0 = std::result::Result::<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _160);
        StorageDead(_160);
        goto -> bb79;
    }

    bb71: {
        StorageDead(_166);
        _164 = ((*_165).0: anchor_lang::prelude::Pubkey);
        StorageDead(_165);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_20;
        _167 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _168) -> [return: bb72, unwind: bb89];
    }

    bb72: {
        StorageDead(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &_164;
        StorageLive(_171);
        _171 = &_167;
        _169 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _170, move _171) -> [return: bb73, unwind: bb89];
    }

    bb73: {
        switchInt(move _169) -> [0: bb78, otherwise: bb74];
    }

    bb74: {
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = ConstraintHasOne;
        _175 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _176) -> [return: bb75, unwind: bb89];
    }

    bb75: {
        StorageDead(_176);
        _174 = anchor_lang::error::Error::with_account_name::<&str>(move _175, const "state") -> [return: bb76, unwind: bb89];
    }

    bb76: {
        StorageDead(_175);
        StorageLive(_177);
        StorageLive(_178);
        _178 = _164;
        StorageLive(_179);
        _179 = _167;
        _177 = (move _178, move _179);
        StorageDead(_179);
        StorageDead(_178);
        _173 = anchor_lang::error::Error::with_pubkeys(move _174, move _177) -> [return: bb77, unwind: bb89];
    }

    bb77: {
        StorageDead(_177);
        StorageDead(_174);
        _0 = std::result::Result::<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _173);
        StorageDead(_173);
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_163);
        goto -> bb80;
    }

    bb78: {
        StorageDead(_171);
        StorageDead(_170);
        _163 = const ();
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_164);
        StorageDead(_163);
        StorageLive(_180);
        StorageLive(_181);
        _181 = move _20;
        StorageLive(_182);
        _182 = move _35;
        StorageLive(_183);
        _183 = move _50;
        StorageLive(_184);
        _184 = move _65;
        _180 = admin::DeletePrelaunchOracle::<'_> { admin: move _181, prelaunch_oracle: move _182, perp_market: move _183, state: move _184 };
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_181);
        _0 = std::result::Result::<admin::DeletePrelaunchOracle<'_>, anchor_lang::error::Error>::Ok(move _180);
        StorageDead(_180);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb87;
    }

    bb79: {
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb81;
    }

    bb81: {
        drop(_65) -> [return: bb82, unwind: bb90];
    }

    bb82: {
        StorageDead(_65);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_50);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_35);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb86;
    }

    bb86: {
        StorageDead(_6);
        goto -> bb87;
    }

    bb87: {
        return;
    }

    bb88 (cleanup): {
        drop(_149) -> [return: bb93, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        drop(_65) -> [return: bb90, unwind terminate(cleanup)];
    }

    bb90 (cleanup): {
        resume;
    }

    bb91: {
        _197 = discriminant(_150);
        _186 = const false;
        _187 = const false;
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_147);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = ConstraintRaw;
        _161 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _162) -> [return: bb69, unwind: bb89];
    }

    bb92: {
        _199 = discriminant(_150);
        _186 = const false;
        _187 = const false;
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_147);
        _144 = const ();
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _216 = (((_65.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _166 = &(*_216);
        _165 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _166) -> [return: bb71, unwind: bb89];
    }

    bb93 (cleanup): {
        _211 = discriminant(_150);
        goto -> bb89;
    }

    bb94 (cleanup): {
        drop(_116) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb95 (cleanup): {
        switchInt(_188) -> [0: bb89, otherwise: bb94];
    }

    bb96 (cleanup): {
        _212 = discriminant(_66);
        goto -> bb90;
    }

    bb97 (cleanup): {
        _213 = discriminant(_51);
        goto -> bb90;
    }

    bb98 (cleanup): {
        _214 = discriminant(_36);
        goto -> bb90;
    }

    bb99 (cleanup): {
        _215 = discriminant(_21);
        goto -> bb90;
    }
}

alloc224 (size: 16, align: 1) {
    70 72 65 6c 61 75 6e 63 68 5f 6f 72 61 63 6c 65 │ prelaunch_oracle
}
