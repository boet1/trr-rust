// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5233:10: 5233:18>::try_accounts` before PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5233:10: 5233:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut UpdatePerpMarketPnlPoolBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error>;
    let _6: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _8: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _9: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let mut _11: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _12: &[u8];
    let mut _13: &mut instructions::admin::UpdatePerpMarketPnlPoolBumps;
    let mut _14: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _15: {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _20: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::admin::UpdatePerpMarketPnlPoolBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::admin::UpdatePerpMarketPnlPoolBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::admin::UpdatePerpMarketPnlPoolBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::admin::UpdatePerpMarketPnlPoolBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _81: ();
    let mut _83: &state::state::State;
    let mut _84: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _86: &anchor_lang::prelude::Signer<'_>;
    let mut _87: bool;
    let mut _88: &anchor_lang::prelude::Pubkey;
    let mut _89: &anchor_lang::prelude::Pubkey;
    let mut _90: !;
    let mut _91: anchor_lang::error::Error;
    let mut _92: anchor_lang::error::Error;
    let mut _93: anchor_lang::error::Error;
    let mut _94: anchor_lang::error::ErrorCode;
    let mut _95: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _96: anchor_lang::prelude::Pubkey;
    let mut _97: anchor_lang::prelude::Pubkey;
    let mut _100: (anchor_lang::prelude::Pubkey, u8);
    let mut _101: &[&[u8]];
    let mut _102: &[&[u8]; 2];
    let _103: &[&[u8]; 2];
    let _104: [&[u8]; 2];
    let mut _105: &[u8];
    let mut _106: &[u8; 11];
    let _107: &[u8; 11];
    let mut _108: &[u8];
    let _109: &[u8];
    let mut _110: &[u8; 2];
    let _111: [u8; 2];
    let mut _112: &anchor_lang::prelude::Pubkey;
    let _113: &&anchor_lang::prelude::Pubkey;
    let mut _114: u8;
    let _115: ();
    let mut _116: bool;
    let mut _117: &anchor_lang::prelude::Pubkey;
    let _118: anchor_lang::prelude::Pubkey;
    let mut _119: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _120: &anchor_lang::prelude::Pubkey;
    let mut _121: !;
    let mut _122: anchor_lang::error::Error;
    let mut _123: anchor_lang::error::Error;
    let mut _124: anchor_lang::error::Error;
    let mut _125: anchor_lang::error::ErrorCode;
    let mut _126: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _127: anchor_lang::prelude::Pubkey;
    let mut _128: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _129: anchor_lang::prelude::Pubkey;
    let _130: ();
    let mut _131: bool;
    let mut _132: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _133: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _134: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _135: !;
    let mut _136: anchor_lang::error::Error;
    let mut _137: anchor_lang::error::Error;
    let mut _138: anchor_lang::error::ErrorCode;
    let mut _141: (anchor_lang::prelude::Pubkey, u8);
    let mut _142: &[&[u8]];
    let mut _143: &[&[u8]; 2];
    let _144: &[&[u8]; 2];
    let _145: [&[u8]; 2];
    let mut _146: &[u8];
    let _147: &[u8];
    let mut _148: &[u8; 17];
    let _149: &[u8; 17];
    let mut _150: &[u8];
    let _151: &[u8];
    let mut _152: &[u8; 2];
    let _153: [u8; 2];
    let mut _154: &anchor_lang::prelude::Pubkey;
    let _155: &&anchor_lang::prelude::Pubkey;
    let mut _156: u8;
    let _157: ();
    let mut _158: bool;
    let mut _159: &anchor_lang::prelude::Pubkey;
    let _160: anchor_lang::prelude::Pubkey;
    let mut _161: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _162: &anchor_lang::prelude::Pubkey;
    let mut _163: !;
    let mut _164: anchor_lang::error::Error;
    let mut _165: anchor_lang::error::Error;
    let mut _166: anchor_lang::error::Error;
    let mut _167: anchor_lang::error::ErrorCode;
    let mut _168: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _169: anchor_lang::prelude::Pubkey;
    let mut _170: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _171: anchor_lang::prelude::Pubkey;
    let _172: ();
    let mut _173: bool;
    let mut _174: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _175: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _176: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _177: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _178: !;
    let mut _179: anchor_lang::error::Error;
    let mut _180: anchor_lang::error::Error;
    let mut _181: anchor_lang::error::ErrorCode;
    let _182: ();
    let mut _183: bool;
    let mut _184: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _185: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _186: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _187: !;
    let mut _188: anchor_lang::error::Error;
    let mut _189: anchor_lang::error::Error;
    let mut _190: anchor_lang::error::ErrorCode;
    let mut _191: instructions::admin::UpdatePerpMarketPnlPool<'_>;
    let mut _192: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _193: anchor_lang::prelude::Signer<'_>;
    let mut _194: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _195: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _196: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _197: &anchor_lang::prelude::Pubkey;
    let mut _198: &anchor_lang::prelude::Pubkey;
    let mut _199: bool;
    let mut _200: bool;
    let mut _201: isize;
    let mut _202: isize;
    let mut _203: isize;
    let mut _204: isize;
    let mut _205: isize;
    let mut _206: isize;
    let mut _207: isize;
    let mut _208: isize;
    let mut _209: isize;
    let mut _210: isize;
    let mut _211: isize;
    let mut _212: isize;
    let mut _213: isize;
    let mut _214: isize;
    let mut _215: isize;
    let mut _216: isize;
    let mut _217: isize;
    let mut _218: isize;
    let mut _219: isize;
    let mut _220: isize;
    let mut _221: isize;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _227: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _228: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug state => _6;
        let _21: anchor_lang::prelude::Signer<'_>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: anchor_lang::prelude::Signer<'_>;
        scope 6 {
            debug admin => _21;
            let _36: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            scope 11 {
                debug spot_market => _36;
                let _51: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                scope 16 {
                    debug spot_market_vault => _51;
                    let _66: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
                    scope 21 {
                        debug perp_market => _66;
                        let _82: anchor_lang::prelude::Pubkey;
                        let _98: anchor_lang::prelude::Pubkey;
                        let _99: u8;
                        scope 26 {
                            debug my_key => _82;
                            let _85: anchor_lang::prelude::Pubkey;
                            scope 27 {
                                debug target_key => _85;
                            }
                        }
                        scope 28 {
                            debug __pda_address => _98;
                            debug __bump => _99;
                            let _139: anchor_lang::prelude::Pubkey;
                            let _140: u8;
                            scope 29 {
                                debug __pda_address => _139;
                                debug __bump => _140;
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _77;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _80;
                        scope 25 {
                        }
                    }
                }
                scope 17 {
                    debug residual => _62;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _65;
                    scope 20 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _17;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _20;
        scope 5 {
        }
    }

    bb0: {
        _200 = const false;
        _199 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        StorageLive(_11);
        _11 = &mut (*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = &mut (*_4);
        StorageLive(_14);
        _14 = &mut (*_5);
        _9 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, UpdatePerpMarketPnlPoolBumps>>::try_accounts(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
        _8 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18}>(move _9, move _15) -> [return: bb2, unwind: bb89];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_9);
        _7 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb3, unwind: bb89];
    }

    bb3: {
        StorageDead(_8);
        _16 = discriminant(_7);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_7 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _6 = move _20;
        StorageDead(_20);
        _201 = discriminant(_7);
        StorageDead(_7);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, UpdatePerpMarketPnlPoolBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind: bb88];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _19) -> [return: bb7, unwind: bb98];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        _219 = discriminant(_7);
        StorageDead(_7);
        goto -> bb85;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
        _23 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18}>(move _24, move _30) -> [return: bb9, unwind: bb88];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb88];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _21 = move _35;
        StorageDead(_35);
        _203 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, UpdatePerpMarketPnlPoolBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb88];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb97];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _217 = discriminant(_22);
        StorageDead(_22);
        goto -> bb84;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18}>(move _39, move _45) -> [return: bb15, unwind: bb88];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb88];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _36 = move _50;
        StorageDead(_50);
        _205 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, UpdatePerpMarketPnlPoolBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb88];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb96];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _215 = discriminant(_37);
        StorageDead(_37);
        goto -> bb83;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
        _53 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18}>(move _54, move _60) -> [return: bb21, unwind: bb88];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb88];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _51 = move _65;
        StorageDead(_65);
        _207 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as anchor_lang::Accounts<'_, UpdatePerpMarketPnlPoolBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb87];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb95];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _213 = discriminant(_52);
        StorageDead(_52);
        goto -> bb82;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5233:10: 5233:18}>(move _69, move _75) -> [return: bb27, unwind: bb87];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb87];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _66 = move _80;
        StorageDead(_80);
        _209 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _226 = (((_6.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _84 = &(*_226);
        _83 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _84) -> [return: bb32, unwind: bb87];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb94];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _211 = discriminant(_67);
        StorageDead(_67);
        goto -> bb81;
    }

    bb32: {
        StorageDead(_84);
        _82 = ((*_83).0: anchor_lang::prelude::Pubkey);
        StorageDead(_83);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_21;
        _85 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _86) -> [return: bb33, unwind: bb87];
    }

    bb33: {
        StorageDead(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_82;
        StorageLive(_89);
        _89 = &_85;
        _87 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _88, move _89) -> [return: bb34, unwind: bb87];
    }

    bb34: {
        switchInt(move _87) -> [0: bb39, otherwise: bb35];
    }

    bb35: {
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = ConstraintHasOne;
        _93 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _94) -> [return: bb36, unwind: bb87];
    }

    bb36: {
        StorageDead(_94);
        _92 = anchor_lang::error::Error::with_account_name::<&str>(move _93, const "state") -> [return: bb37, unwind: bb87];
    }

    bb37: {
        StorageDead(_93);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _82;
        StorageLive(_97);
        _97 = _85;
        _95 = (move _96, move _97);
        StorageDead(_97);
        StorageDead(_96);
        _91 = anchor_lang::error::Error::with_pubkeys(move _92, move _95) -> [return: bb38, unwind: bb87];
    }

    bb38: {
        StorageDead(_95);
        StorageDead(_92);
        _0 = std::result::Result::<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error>::Err(move _91);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb81;
    }

    bb39: {
        StorageDead(_89);
        StorageDead(_88);
        _81 = const ();
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = const b"spot_market";
        _106 = &(*_107);
        _105 = move _106 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_106);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = core::num::<impl u16>::to_le_bytes(const 0_u16) -> [return: bb40, unwind: bb87];
    }

    bb40: {
        _110 = &_111;
        _109 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _110) -> [return: bb41, unwind: bb87];
    }

    bb41: {
        _108 = &(*_109);
        StorageDead(_110);
        _104 = [move _105, move _108];
        StorageDead(_108);
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = move _102 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_102);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_1;
        _197 = deref_copy (*_113);
        _112 = &(*_197);
        _100 = anchor_lang::prelude::Pubkey::find_program_address(move _101, move _112) -> [return: bb42, unwind: bb87];
    }

    bb42: {
        StorageDead(_112);
        StorageDead(_101);
        StorageLive(_98);
        _98 = (_100.0: anchor_lang::prelude::Pubkey);
        StorageLive(_99);
        _99 = (_100.1: u8);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_100);
        StorageLive(_114);
        _114 = _99;
        ((*_4).0: u8) = move _114;
        StorageDead(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &_36;
        _118 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _119) -> [return: bb43, unwind: bb87];
    }

    bb43: {
        _117 = &_118;
        StorageDead(_119);
        StorageLive(_120);
        _120 = &_98;
        _116 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _117, move _120) -> [return: bb44, unwind: bb87];
    }

    bb44: {
        switchInt(move _116) -> [0: bb50, otherwise: bb45];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = ConstraintSeeds;
        _124 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _125) -> [return: bb46, unwind: bb87];
    }

    bb46: {
        StorageDead(_125);
        _123 = anchor_lang::error::Error::with_account_name::<&str>(move _124, const "spot_market") -> [return: bb47, unwind: bb87];
    }

    bb47: {
        _200 = const true;
        StorageDead(_124);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_36;
        _127 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _128) -> [return: bb48, unwind: bb93];
    }

    bb48: {
        StorageDead(_128);
        StorageLive(_129);
        _129 = _98;
        _126 = (move _127, move _129);
        StorageDead(_129);
        StorageDead(_127);
        _200 = const false;
        _122 = anchor_lang::error::Error::with_pubkeys(move _123, move _126) -> [return: bb49, unwind: bb93];
    }

    bb49: {
        StorageDead(_126);
        _200 = const false;
        StorageDead(_123);
        _0 = std::result::Result::<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error>::Err(move _122);
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb80;
    }

    bb50: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_117);
        _115 = const ();
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &_36;
        _133 = &(*_134);
        _132 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _133) -> [return: bb51, unwind: bb87];
    }

    bb51: {
        StorageDead(_133);
        _131 = ((*_132).6: bool);
        switchInt(move _131) -> [0: bb52, otherwise: bb55];
    }

    bb52: {
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = ConstraintMut;
        _137 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _138) -> [return: bb53, unwind: bb87];
    }

    bb53: {
        StorageDead(_138);
        _136 = anchor_lang::error::Error::with_account_name::<&str>(move _137, const "spot_market") -> [return: bb54, unwind: bb87];
    }

    bb54: {
        StorageDead(_137);
        _0 = std::result::Result::<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error>::Err(move _136);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_130);
        goto -> bb80;
    }

    bb55: {
        StorageDead(_134);
        StorageDead(_132);
        _130 = const ();
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = const b"spot_market_vault";
        _148 = &(*_149);
        _147 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _148) -> [return: bb56, unwind: bb87];
    }

    bb56: {
        _146 = &(*_147);
        StorageDead(_148);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = core::num::<impl u16>::to_le_bytes(const 0_u16) -> [return: bb57, unwind: bb87];
    }

    bb57: {
        _152 = &_153;
        _151 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _152) -> [return: bb58, unwind: bb87];
    }

    bb58: {
        _150 = &(*_151);
        StorageDead(_152);
        _145 = [move _146, move _150];
        StorageDead(_150);
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = move _143 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_143);
        StorageLive(_154);
        StorageLive(_155);
        _155 = &_1;
        _198 = deref_copy (*_155);
        _154 = &(*_198);
        _141 = anchor_lang::prelude::Pubkey::find_program_address(move _142, move _154) -> [return: bb59, unwind: bb87];
    }

    bb59: {
        StorageDead(_154);
        StorageDead(_142);
        StorageLive(_139);
        _139 = (_141.0: anchor_lang::prelude::Pubkey);
        StorageLive(_140);
        _140 = (_141.1: u8);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_141);
        StorageLive(_156);
        _156 = _140;
        ((*_4).1: u8) = move _156;
        StorageDead(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _227 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _161 = &(*_227);
        _160 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _161) -> [return: bb60, unwind: bb87];
    }

    bb60: {
        _159 = &_160;
        StorageDead(_161);
        StorageLive(_162);
        _162 = &_139;
        _158 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _159, move _162) -> [return: bb61, unwind: bb87];
    }

    bb61: {
        switchInt(move _158) -> [0: bb67, otherwise: bb62];
    }

    bb62: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = ConstraintSeeds;
        _166 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _167) -> [return: bb63, unwind: bb87];
    }

    bb63: {
        StorageDead(_167);
        _165 = anchor_lang::error::Error::with_account_name::<&str>(move _166, const "spot_market_vault") -> [return: bb64, unwind: bb87];
    }

    bb64: {
        _199 = const true;
        StorageDead(_166);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _228 = (((_51.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _170 = &(*_228);
        _169 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _170) -> [return: bb65, unwind: bb91];
    }

    bb65: {
        StorageDead(_170);
        StorageLive(_171);
        _171 = _139;
        _168 = (move _169, move _171);
        StorageDead(_171);
        StorageDead(_169);
        _199 = const false;
        _164 = anchor_lang::error::Error::with_pubkeys(move _165, move _168) -> [return: bb66, unwind: bb91];
    }

    bb66: {
        StorageDead(_168);
        _199 = const false;
        StorageDead(_165);
        _0 = std::result::Result::<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error>::Err(move _164);
        StorageDead(_164);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb79;
    }

    bb67: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_159);
        _157 = const ();
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = &_51;
        _176 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _177) -> [return: bb68, unwind: bb87];
    }

    bb68: {
        _175 = &(*_176);
        StorageDead(_177);
        _174 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _175) -> [return: bb69, unwind: bb87];
    }

    bb69: {
        StorageDead(_175);
        _173 = ((*_174).6: bool);
        switchInt(move _173) -> [0: bb70, otherwise: bb73];
    }

    bb70: {
        StorageDead(_176);
        StorageDead(_174);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = ConstraintMut;
        _180 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _181) -> [return: bb71, unwind: bb87];
    }

    bb71: {
        StorageDead(_181);
        _179 = anchor_lang::error::Error::with_account_name::<&str>(move _180, const "spot_market_vault") -> [return: bb72, unwind: bb87];
    }

    bb72: {
        StorageDead(_180);
        _0 = std::result::Result::<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error>::Err(move _179);
        StorageDead(_179);
        StorageDead(_173);
        StorageDead(_172);
        goto -> bb79;
    }

    bb73: {
        StorageDead(_176);
        StorageDead(_174);
        _172 = const ();
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_66;
        _185 = &(*_186);
        _184 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _185) -> [return: bb74, unwind: bb87];
    }

    bb74: {
        StorageDead(_185);
        _183 = ((*_184).6: bool);
        switchInt(move _183) -> [0: bb75, otherwise: bb78];
    }

    bb75: {
        StorageDead(_186);
        StorageDead(_184);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = ConstraintMut;
        _189 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _190) -> [return: bb76, unwind: bb87];
    }

    bb76: {
        StorageDead(_190);
        _188 = anchor_lang::error::Error::with_account_name::<&str>(move _189, const "perp_market") -> [return: bb77, unwind: bb87];
    }

    bb77: {
        StorageDead(_189);
        _0 = std::result::Result::<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error>::Err(move _188);
        StorageDead(_188);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb79;
    }

    bb78: {
        StorageDead(_186);
        StorageDead(_184);
        _182 = const ();
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_191);
        StorageLive(_192);
        _192 = move _6;
        StorageLive(_193);
        _193 = move _21;
        StorageLive(_194);
        _194 = move _36;
        StorageLive(_195);
        _195 = move _51;
        StorageLive(_196);
        _196 = move _66;
        _191 = admin::UpdatePerpMarketPnlPool::<'_> { state: move _192, admin: move _193, spot_market: move _194, spot_market_vault: move _195, perp_market: move _196 };
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        _0 = std::result::Result::<admin::UpdatePerpMarketPnlPool<'_>, anchor_lang::error::Error>::Ok(move _191);
        StorageDead(_191);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_6);
        goto -> bb86;
    }

    bb79: {
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_66);
        drop(_51) -> [return: bb82, unwind: bb88];
    }

    bb82: {
        StorageDead(_51);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_36);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_21);
        drop(_6) -> [return: bb85, unwind: bb89];
    }

    bb85: {
        StorageDead(_6);
        goto -> bb86;
    }

    bb86: {
        return;
    }

    bb87 (cleanup): {
        drop(_51) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        drop(_6) -> [return: bb89, unwind terminate(cleanup)];
    }

    bb89 (cleanup): {
        resume;
    }

    bb90 (cleanup): {
        drop(_165) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb91 (cleanup): {
        switchInt(_199) -> [0: bb87, otherwise: bb90];
    }

    bb92 (cleanup): {
        drop(_123) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb93 (cleanup): {
        switchInt(_200) -> [0: bb87, otherwise: bb92];
    }

    bb94 (cleanup): {
        _221 = discriminant(_67);
        goto -> bb87;
    }

    bb95 (cleanup): {
        _222 = discriminant(_52);
        goto -> bb88;
    }

    bb96 (cleanup): {
        _223 = discriminant(_37);
        goto -> bb88;
    }

    bb97 (cleanup): {
        _224 = discriminant(_22);
        goto -> bb88;
    }

    bb98 (cleanup): {
        _225 = discriminant(_7);
        goto -> bb89;
    }
}

alloc211 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc210 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}
