// MIR for `admin::handle_update_protocol_if_shares_transfer_config` before PreCodegen

fn admin::handle_update_protocol_if_shares_transfer_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::UpdateProtocolIfSharesTransferConfig<'_>>, _2: Option<[anchor_lang::prelude::Pubkey; 4]>, _3: Option<u128>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug whitelisted_signers => _2;
    debug max_transfer_per_epoch => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _4: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let _13: ();
    let mut _14: isize;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 2];
    let _26: &[&str; 2];
    let _27: [&str; 2];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 2];
    let _30: &[core::fmt::rt::Argument<'_>; 2];
    let _31: [core::fmt::rt::Argument<'_>; 2];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &[anchor_lang::prelude::Pubkey; 4];
    let _34: &[anchor_lang::prelude::Pubkey; 4];
    let _35: &state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _36: &std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _37: core::fmt::rt::Argument<'_>;
    let mut _38: &[anchor_lang::prelude::Pubkey; 4];
    let _39: &[anchor_lang::prelude::Pubkey; 4];
    let mut _40: [anchor_lang::prelude::Pubkey; 4];
    let mut _41: &mut state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _42: &mut std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let _43: ();
    let mut _44: &str;
    let _45: &str;
    let _46: ();
    let mut _47: isize;
    let _49: ();
    let mut _50: &str;
    let _51: &str;
    let mut _52: &std::string::String;
    let _53: &std::string::String;
    let _54: std::string::String;
    let mut _56: std::fmt::Arguments<'_>;
    let mut _57: &[&str];
    let mut _58: &[&str; 2];
    let _59: &[&str; 2];
    let _60: [&str; 2];
    let mut _61: &[core::fmt::rt::Argument<'_>];
    let mut _62: &[core::fmt::rt::Argument<'_>; 2];
    let _63: &[core::fmt::rt::Argument<'_>; 2];
    let _64: [core::fmt::rt::Argument<'_>; 2];
    let mut _65: core::fmt::rt::Argument<'_>;
    let mut _66: &u128;
    let _67: &u128;
    let _68: &state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _69: &std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _70: core::fmt::rt::Argument<'_>;
    let mut _71: &u128;
    let _72: &u128;
    let mut _73: u128;
    let mut _74: &mut state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _75: &mut std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let _76: ();
    let mut _77: &str;
    let _78: &str;
    let mut _79: ();
    let mut _82: &mut instructions::admin::UpdateProtocolIfSharesTransferConfig<'_>;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    scope 1 {
        debug config => _4;
        scope 6 {
            debug whitelisted_signers => _15;
            let _15: [anchor_lang::prelude::Pubkey; 4];
            let _22: std::string::String;
            let mut _81: &[&str; 2];
            scope 7 {
                debug res => _22;
            }
        }
        scope 8 {
            debug max_transfer_per_epoch => _48;
            let _48: u128;
            let _55: std::string::String;
            let mut _80: &[&str; 2];
            scope 9 {
                debug res => _55;
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _82 = deref_copy (_1.1: &mut instructions::admin::UpdateProtocolIfSharesTransferConfig<'_>);
        _7 = &((*_82).1: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, ProtocolIfSharesTransferConfig>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<RefMut<'_, ProtocolIfSharesTransferConfig>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb38];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>);
        _4 = move _12;
        StorageDead(_12);
        _83 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        _14 = discriminant(_2);
        switchInt(move _14) -> [1: bb7, otherwise: bb17];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _85 = discriminant(_5);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb34;
    }

    bb7: {
        StorageLive(_15);
        _15 = ((_2 as Some).0: [anchor_lang::prelude::Pubkey; 4]);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _81 = const _;
        _26 = &(*_81);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_4;
        _35 = <RefMut<'_, ProtocolIfSharesTransferConfig> as Deref>::deref(move _36) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        StorageDead(_36);
        _34 = &((*_35).0: [anchor_lang::prelude::Pubkey; 4]);
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_debug::<[anchor_lang::prelude::Pubkey; 4]>(move _33) -> [return: bb9, unwind: bb37];
    }

    bb9: {
        StorageDead(_33);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_15;
        _38 = &(*_39);
        _37 = core::fmt::rt::Argument::<'_>::new_debug::<[anchor_lang::prelude::Pubkey; 4]>(move _38) -> [return: bb10, unwind: bb37];
    }

    bb10: {
        StorageDead(_38);
        _31 = [move _32, move _37];
        StorageDead(_37);
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        _23 = Arguments::<'_>::new_v1(move _24, move _28) -> [return: bb11, unwind: bb37];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_39);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <String as Deref>::deref(move _19) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        StorageDead(_17);
        drop(_21) -> [return: bb15, unwind: bb37];
    }

    bb15: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_40);
        _40 = _15;
        StorageLive(_41);
        StorageLive(_42);
        _42 = &mut _4;
        _41 = <RefMut<'_, ProtocolIfSharesTransferConfig> as DerefMut>::deref_mut(move _42) -> [return: bb16, unwind: bb37];
    }

    bb16: {
        StorageDead(_42);
        ((*_41).0: [anchor_lang::prelude::Pubkey; 4]) = move _40;
        StorageDead(_40);
        StorageDead(_41);
        _13 = const ();
        StorageDead(_15);
        goto -> bb19;
    }

    bb17: {
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = const "whitelisted_signers: unchanged";
        _44 = &(*_45);
        _43 = solana_program::log::sol_log(move _44) -> [return: bb18, unwind: bb37];
    }

    bb18: {
        StorageDead(_44);
        StorageDead(_45);
        StorageDead(_43);
        _13 = const ();
        goto -> bb19;
    }

    bb19: {
        StorageDead(_13);
        StorageLive(_46);
        _47 = discriminant(_3);
        switchInt(move _47) -> [1: bb20, otherwise: bb30];
    }

    bb20: {
        StorageLive(_48);
        _48 = ((_3 as Some).0: u128);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _80 = const _;
        _59 = &(*_80);
        _58 = &(*_59);
        _57 = move _58 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_58);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_4;
        _68 = <RefMut<'_, ProtocolIfSharesTransferConfig> as Deref>::deref(move _69) -> [return: bb21, unwind: bb37];
    }

    bb21: {
        StorageDead(_69);
        _67 = &((*_68).1: u128);
        _66 = &(*_67);
        _65 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _66) -> [return: bb22, unwind: bb37];
    }

    bb22: {
        StorageDead(_66);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_48;
        _71 = &(*_72);
        _70 = core::fmt::rt::Argument::<'_>::new_debug::<u128>(move _71) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        StorageDead(_71);
        _64 = [move _65, move _70];
        StorageDead(_70);
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = move _62 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_62);
        _56 = Arguments::<'_>::new_v1(move _57, move _61) -> [return: bb24, unwind: bb37];
    }

    bb24: {
        StorageDead(_61);
        StorageDead(_57);
        _55 = format(move _56) -> [return: bb25, unwind: bb37];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_72);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_59);
        _54 = move _55;
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = <String as Deref>::deref(move _52) -> [return: bb26, unwind: bb35];
    }

    bb26: {
        _50 = &(*_51);
        StorageDead(_52);
        _49 = solana_program::log::sol_log(move _50) -> [return: bb27, unwind: bb35];
    }

    bb27: {
        StorageDead(_50);
        drop(_54) -> [return: bb28, unwind: bb37];
    }

    bb28: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_73);
        _73 = _48;
        StorageLive(_74);
        StorageLive(_75);
        _75 = &mut _4;
        _74 = <RefMut<'_, ProtocolIfSharesTransferConfig> as DerefMut>::deref_mut(move _75) -> [return: bb29, unwind: bb37];
    }

    bb29: {
        StorageDead(_75);
        ((*_74).1: u128) = move _73;
        StorageDead(_73);
        StorageDead(_74);
        _46 = const ();
        StorageDead(_48);
        goto -> bb32;
    }

    bb30: {
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = const "max_transfer_per_epoch: unchanged";
        _77 = &(*_78);
        _76 = solana_program::log::sol_log(move _77) -> [return: bb31, unwind: bb37];
    }

    bb31: {
        StorageDead(_77);
        StorageDead(_78);
        StorageDead(_76);
        _46 = const ();
        goto -> bb32;
    }

    bb32: {
        StorageDead(_46);
        StorageLive(_79);
        _79 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _79);
        StorageDead(_79);
        drop(_4) -> [return: bb33, unwind: bb38];
    }

    bb33: {
        StorageDead(_4);
        goto -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_54) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_21) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        drop(_4) -> [return: bb38, unwind terminate(cleanup)];
    }

    bb38 (cleanup): {
        resume;
    }

    bb39 (cleanup): {
        _87 = discriminant(_5);
        goto -> bb38;
    }
}
