// MIR for `update_position_with_base_asset_amount` before PreCodegen

fn update_position_with_base_asset_amount(_1: u64, _2: controller::position::PositionDirection, _3: &mut PerpMarket, _4: &mut User, _5: usize, _6: Option<u64>) -> std::result::Result<(u64, i64, i64), error::ErrorCode> {
    debug base_asset_amount => _1;
    debug direction => _2;
    debug market => _3;
    debug user => _4;
    debug position_index => _5;
    debug fill_price => _6;
    let mut _0: std::result::Result<(u64, i64, i64), error::ErrorCode>;
    let _7: controller::amm::SwapDirection;
    let mut _8: isize;
    let mut _11: (u64, i64);
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, i64)>;
    let mut _13: std::result::Result<(u64, i64), error::ErrorCode>;
    let mut _14: &mut state::perp_market::PerpMarket;
    let mut _15: u64;
    let mut _16: controller::amm::SwapDirection;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: (u64, i64);
    let mut _25: isize;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, i64)>;
    let mut _28: std::result::Result<(u64, i64), error::ErrorCode>;
    let mut _29: controller::position::PositionDirection;
    let mut _30: u64;
    let mut _31: u64;
    let mut _32: u64;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: u64;
    let mut _39: i64;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _42: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _43: u64;
    let mut _44: u64;
    let mut _45: controller::position::PositionDirection;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _53: std::result::Result<i64, error::ErrorCode>;
    let mut _54: &mut state::user::PerpPosition;
    let mut _55: &mut state::user::PerpPosition;
    let _56: usize;
    let mut _57: usize;
    let mut _58: bool;
    let mut _59: &mut state::perp_market::PerpMarket;
    let mut _60: &controller::position::PositionDelta;
    let _61: &controller::position::PositionDelta;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: i128;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _69: std::result::Result<i128, error::ErrorCode>;
    let mut _70: i128;
    let mut _71: i128;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _73: std::result::Result<i128, error::ErrorCode>;
    let mut _74: i64;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _85: ();
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _87: std::result::Result<(), error::ErrorCode>;
    let mut _88: bool;
    let mut _89: u128;
    let mut _90: i128;
    let mut _91: ();
    let _93: ();
    let mut _94: &str;
    let _95: &str;
    let mut _96: &std::string::String;
    let _97: &std::string::String;
    let _98: std::string::String;
    let mut _100: std::fmt::Arguments<'_>;
    let mut _101: &[&str];
    let mut _102: &[&str; 2];
    let _103: &[&str; 2];
    let _104: [&str; 2];
    let mut _105: &[core::fmt::rt::Argument<'_>];
    let mut _106: &[core::fmt::rt::Argument<'_>; 1];
    let _107: &[core::fmt::rt::Argument<'_>; 1];
    let _108: [core::fmt::rt::Argument<'_>; 1];
    let mut _109: core::fmt::rt::Argument<'_>;
    let mut _110: &error::ErrorCode;
    let _111: &error::ErrorCode;
    let _112: ();
    let mut _113: &str;
    let _114: &str;
    let mut _115: &std::string::String;
    let _116: &std::string::String;
    let _117: std::string::String;
    let mut _119: std::fmt::Arguments<'_>;
    let mut _120: &[&str];
    let mut _121: &[&str; 2];
    let _122: &[&str; 2];
    let _123: [&str; 2];
    let mut _124: &[core::fmt::rt::Argument<'_>];
    let mut _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: &[core::fmt::rt::Argument<'_>; 1];
    let _127: [core::fmt::rt::Argument<'_>; 1];
    let mut _128: core::fmt::rt::Argument<'_>;
    let mut _129: &i128;
    let _130: &i128;
    let mut _131: error::ErrorCode;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _137: ();
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _139: std::result::Result<(), error::ErrorCode>;
    let mut _140: &mut state::perp_market::PerpMarket;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: (u64, i64, i64);
    let mut _147: u64;
    let mut _148: i64;
    let mut _149: i64;
    scope 1 {
        debug swap_direction => _7;
        let _9: u64;
        let _10: i64;
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: (u64, i64);
        scope 2 {
            debug quote_asset_swapped => _9;
            debug quote_asset_amount_surplus => _10;
            let _22: u64;
            let _23: i64;
            let _26: u64;
            scope 7 {
                debug quote_asset_amount => _22;
                debug quote_asset_amount_surplus => _23;
                let _40: controller::position::PositionDelta;
                let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _50: controller::position::PositionDelta;
                scope 13 {
                    debug position_delta => _40;
                    let _51: i64;
                    let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _66: i64;
                    scope 18 {
                        debug pnl => _51;
                        let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _79: i128;
                        let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _84: i128;
                        let _92: error::ErrorCode;
                        let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _136: ();
                        let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _145: ();
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug residual => _81;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _84;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug error_code => _92;
                            let _99: std::string::String;
                            let _118: std::string::String;
                            let mut _150: &[&str; 2];
                            let mut _151: &[&str; 2];
                            scope 32 {
                                debug res => _99;
                            }
                            scope 33 {
                                debug res => _118;
                            }
                        }
                        scope 34 {
                            debug residual => _133;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _136;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug residual => _142;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _145;
                            scope 41 {
                            }
                        }
                    }
                    scope 19 {
                        debug residual => _63;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug val => _66;
                        scope 22 {
                        }
                    }
                }
                scope 14 {
                    debug residual => _47;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _50;
                    scope 17 {
                    }
                }
            }
            scope 8 {
                debug fill_price => _26;
                let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _37: (u64, i64);
                scope 9 {
                    debug residual => _34;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _37;
                    scope 12 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        _8 = discriminant(_2);
        switchInt(move _8) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = SwapDirection::Add;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _7 = SwapDirection::Remove;
        goto -> bb4;
    }

    bb4: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut (*_3);
        StorageLive(_15);
        _15 = _1;
        StorageLive(_16);
        _16 = _7;
        _13 = swap_base_asset(move _14, move _15, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<(u64, i64), error::ErrorCode> as Try>::branch(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        _17 = discriminant(_12);
        switchInt(move _17) -> [0: bb7, 1: bb8, otherwise: bb2];
    }

    bb7: {
        StorageLive(_21);
        _21 = ((_12 as Continue).0: (u64, i64));
        _11 = _21;
        StorageDead(_21);
        StorageLive(_9);
        _9 = (_11.0: u64);
        StorageLive(_10);
        _10 = (_11.1: i64);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_24);
        _25 = discriminant(_6);
        switchInt(move _25) -> [0: bb10, 1: bb11, otherwise: bb2];
    }

    bb8: {
        StorageLive(_18);
        _18 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb68;
    }

    bb10: {
        StorageLive(_38);
        _38 = _9;
        StorageLive(_39);
        _39 = _10;
        _24 = (move _38, move _39);
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb17;
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_6 as Some).0: u64);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _2;
        StorageLive(_30);
        _30 = _9;
        StorageLive(_31);
        _31 = _1;
        StorageLive(_32);
        _32 = _26;
        _28 = controller::position::calculate_quote_asset_amount_surplus(move _29, move _30, move _31, move _32) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<(u64, i64), error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _33 = discriminant(_27);
        switchInt(move _33) -> [0: bb14, 1: bb15, otherwise: bb2];
    }

    bb14: {
        StorageLive(_37);
        _37 = ((_27 as Continue).0: (u64, i64));
        _24 = _37;
        StorageDead(_37);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb17;
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        goto -> bb67;
    }

    bb17: {
        StorageLive(_22);
        _22 = (_24.0: u64);
        StorageLive(_23);
        _23 = (_24.1: i64);
        StorageDead(_24);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _1;
        StorageLive(_44);
        _44 = _22;
        StorageLive(_45);
        _45 = _2;
        _42 = math::orders::get_position_delta_for_fill(move _43, move _44, move _45) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _42) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_42);
        _46 = discriminant(_41);
        switchInt(move _46) -> [0: bb20, 1: bb21, otherwise: bb2];
    }

    bb20: {
        StorageLive(_50);
        _50 = move ((_41 as Continue).0: controller::position::PositionDelta);
        _40 = move _50;
        StorageDead(_50);
        StorageDead(_41);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _5;
        _57 = Len(((*_4).4: [state::user::PerpPosition; 8]));
        _58 = Lt(_56, _57);
        assert(move _58, "index out of bounds: the length is {} but the index is {}", move _57, _56) -> [success: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_47);
        _47 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_41);
        goto -> bb66;
    }

    bb23: {
        _55 = &mut ((*_4).4: [state::user::PerpPosition; 8])[_56];
        _54 = &mut (*_55);
        StorageLive(_59);
        _59 = &mut (*_3);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &_40;
        _60 = &(*_61);
        _53 = update_position_and_market(move _54, move _59, move _60) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_54);
        _52 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _53) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_53);
        _62 = discriminant(_52);
        switchInt(move _62) -> [0: bb26, 1: bb27, otherwise: bb2];
    }

    bb26: {
        StorageLive(_66);
        _66 = ((_52 as Continue).0: i64);
        _51 = _66;
        StorageDead(_66);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = (((*_3).1: state::perp_market::AMM).15: i128);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = (_40.1: i64);
        _73 = <i64 as Cast>::cast::<i128>(move _74) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_63);
        _63 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb65;
    }

    bb29: {
        StorageDead(_74);
        _72 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _73) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_73);
        _75 = discriminant(_72);
        switchInt(move _75) -> [0: bb31, 1: bb32, otherwise: bb2];
    }

    bb31: {
        StorageLive(_79);
        _79 = ((_72 as Continue).0: i128);
        _71 = _79;
        StorageDead(_79);
        _69 = <i128 as SafeMath>::safe_add(move _70, move _71) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_76);
        _76 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb64;
    }

    bb34: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _69) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_69);
        _80 = discriminant(_68);
        switchInt(move _80) -> [0: bb36, 1: bb37, otherwise: bb2];
    }

    bb36: {
        StorageLive(_84);
        _84 = ((_68 as Continue).0: i128);
        _67 = _84;
        StorageDead(_84);
        (((*_3).1: state::perp_market::AMM).15: i128) = move _67;
        StorageDead(_67);
        StorageDead(_72);
        StorageDead(_68);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = (((*_3).1: state::perp_market::AMM).15: i128);
        _89 = core::num::<impl i128>::unsigned_abs(move _90) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_81);
        _81 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_83);
        StorageDead(_81);
        goto -> bb64;
    }

    bb39: {
        StorageDead(_90);
        _88 = Le(move _89, const _);
        switchInt(move _88) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        StorageDead(_89);
        StorageLive(_91);
        _91 = ();
        _87 = std::result::Result::<(), error::ErrorCode>::Ok(move _91);
        StorageDead(_91);
        goto -> bb54;
    }

    bb41: {
        StorageDead(_89);
        StorageLive(_92);
        _92 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _151 = const _;
        _103 = &(*_151);
        _102 = &(*_103);
        _101 = move _102 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_102);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &_92;
        _110 = &(*_111);
        _109 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _110) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_110);
        _108 = [move _109];
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = move _106 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_106);
        _100 = Arguments::<'_>::new_v1(move _101, move _105) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_105);
        StorageDead(_101);
        _99 = format(move _100) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_100);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_103);
        _98 = move _99;
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = <String as Deref>::deref(move _96) -> [return: bb45, unwind: bb71];
    }

    bb45: {
        _94 = &(*_95);
        StorageDead(_96);
        _93 = solana_program::log::sol_log(move _94) -> [return: bb46, unwind: bb71];
    }

    bb46: {
        StorageDead(_94);
        drop(_98) -> [return: bb47, unwind: bb72];
    }

    bb47: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _150 = const _;
        _122 = &(*_150);
        _121 = &(*_122);
        _120 = move _121 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_121);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(((*_3).1: state::perp_market::AMM).15: i128);
        _129 = &(*_130);
        _128 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _129) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_129);
        _127 = [move _128];
        StorageDead(_128);
        _126 = &_127;
        _125 = &(*_126);
        _124 = move _125 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_125);
        _119 = Arguments::<'_>::new_v1(move _120, move _124) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_120);
        _118 = format(move _119) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_119);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_122);
        _117 = move _118;
        StorageDead(_118);
        _116 = &_117;
        _115 = &(*_116);
        _114 = <String as Deref>::deref(move _115) -> [return: bb51, unwind: bb70];
    }

    bb51: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = solana_program::log::sol_log(move _113) -> [return: bb52, unwind: bb70];
    }

    bb52: {
        StorageDead(_113);
        drop(_117) -> [return: bb53, unwind: bb72];
    }

    bb53: {
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_112);
        StorageLive(_131);
        _131 = _92;
        _87 = std::result::Result::<(), error::ErrorCode>::Err(move _131);
        StorageDead(_131);
        StorageDead(_92);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_88);
        _86 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _87) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_87);
        _132 = discriminant(_86);
        switchInt(move _132) -> [0: bb56, 1: bb57, otherwise: bb2];
    }

    bb56: {
        StorageLive(_136);
        _136 = ((_86 as Continue).0: ());
        _85 = _136;
        StorageDead(_136);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &mut (*_3);
        _139 = update_spread_reserves(move _140) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_133);
        _133 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb65;
    }

    bb59: {
        StorageDead(_140);
        _138 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _139) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_139);
        _141 = discriminant(_138);
        switchInt(move _141) -> [0: bb61, 1: bb62, otherwise: bb2];
    }

    bb61: {
        StorageLive(_145);
        _145 = ((_138 as Continue).0: ());
        _137 = _145;
        StorageDead(_145);
        StorageDead(_138);
        StorageDead(_137);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _22;
        StorageLive(_148);
        _148 = _23;
        StorageLive(_149);
        _149 = _51;
        _146 = (move _147, move _148, move _149);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        _0 = std::result::Result::<(u64, i64, i64), error::ErrorCode>::Ok(move _146);
        StorageDead(_146);
        StorageDead(_51);
        StorageDead(_40);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb69;
    }

    bb62: {
        StorageLive(_142);
        _142 = ((_138 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_137);
        goto -> bb65;
    }

    bb64: {
        StorageDead(_67);
        StorageDead(_72);
        StorageDead(_68);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_51);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_40);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_7);
        goto -> bb69;
    }

    bb69: {
        return;
    }

    bb70 (cleanup): {
        drop(_117) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_98) -> [return: bb72, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        resume;
    }
}
