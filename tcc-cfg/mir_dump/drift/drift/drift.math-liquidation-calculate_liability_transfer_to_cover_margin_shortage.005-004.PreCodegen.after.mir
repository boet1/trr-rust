// MIR for `calculate_liability_transfer_to_cover_margin_shortage` after PreCodegen

fn calculate_liability_transfer_to_cover_margin_shortage(_1: u128, _2: u32, _3: u32, _4: u32, _5: u32, _6: u32, _7: i64, _8: u32) -> std::result::Result<u128, error::ErrorCode> {
    debug margin_shortage => _1;
    debug asset_weight => _2;
    debug asset_liquidation_multiplier => _3;
    debug liability_weight => _4;
    debug liability_liquidation_multiplier => _5;
    debug liability_decimals => _6;
    debug liability_price => _7;
    debug if_liquidation_fee => _8;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _9: ();
    let mut _10: bool;
    let mut _11: u32;
    let mut _12: u32;
    let mut _13: !;
    let _14: u128;
    let _15: u128;
    let mut _16: (u128, u128);
    let mut _17: bool;
    let mut _18: u32;
    let mut _19: u128;
    let mut _20: u32;
    let mut _21: u32;
    let mut _22: (u32, bool);
    let mut _23: u128;
    let mut _24: u32;
    let mut _25: u32;
    let mut _26: (u32, bool);
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _29: std::result::Result<u128, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: u32;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u128;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _49: std::result::Result<u128, error::ErrorCode>;
    let mut _50: u128;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _52: std::result::Result<u128, error::ErrorCode>;
    let mut _53: u128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _55: std::result::Result<u128, error::ErrorCode>;
    let mut _56: u32;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: u128;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _69: std::result::Result<u128, error::ErrorCode>;
    let mut _70: u32;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _81: u128;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _83: std::result::Result<u128, error::ErrorCode>;
    let mut _84: u32;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _95: ();
    let mut _96: bool;
    let mut _97: u128;
    let mut _98: u128;
    let mut _99: !;
    let mut _100: std::result::Result<u128, error::ErrorCode>;
    let mut _101: u128;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _103: std::result::Result<u128, error::ErrorCode>;
    let mut _104: u128;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _106: std::result::Result<u128, error::ErrorCode>;
    let mut _107: u128;
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _109: std::result::Result<u128, error::ErrorCode>;
    let mut _110: u128;
    let mut _111: u128;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: u128;
    let mut _118: u128;
    let mut _119: (u128, bool);
    let mut _120: (u128, bool);
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: u128;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _128: std::result::Result<u128, error::ErrorCode>;
    let mut _129: u128;
    let mut _130: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _131: std::result::Result<u128, error::ErrorCode>;
    let mut _132: u128;
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _134: std::result::Result<u128, error::ErrorCode>;
    let mut _135: i64;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: u128;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _143: std::result::Result<u128, error::ErrorCode>;
    let mut _144: u128;
    let mut _145: u128;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _156: u128;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _158: std::result::Result<u128, error::ErrorCode>;
    let mut _159: u128;
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _161: std::result::Result<u128, error::ErrorCode>;
    let mut _162: u128;
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _164: std::result::Result<u128, error::ErrorCode>;
    let mut _165: u128;
    let mut _166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _167: std::result::Result<u128, error::ErrorCode>;
    let mut _168: u128;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _170: std::result::Result<u128, error::ErrorCode>;
    let mut _171: i64;
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _177: u128;
    let mut _178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _179: std::result::Result<u128, error::ErrorCode>;
    let mut _180: u32;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _186: isize;
    let mut _188: !;
    let mut _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _191: isize;
    let mut _193: !;
    let mut _194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _196: u128;
    let mut _197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _198: std::result::Result<u128, error::ErrorCode>;
    let mut _199: u32;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _205: isize;
    let mut _207: !;
    let mut _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _220: isize;
    let mut _222: !;
    let mut _223: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _225: u128;
    let mut _226: {closure@programs/drift/src/math/liquidation.rs:117:14: 117:17};
    scope 1 {
        debug numerator_scale => _14;
        debug denominator_scale => _15;
        let _27: u128;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: u128;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: u128;
        scope 2 {
            debug liability_weight_component => _27;
            let _44: u128;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: u128;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: u128;
            let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _75: u128;
            let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _80: u128;
            let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _89: u128;
            let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _94: u128;
            scope 11 {
                debug asset_weight_component => _44;
                let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _116: u128;
                let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _125: u128;
                let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _140: u128;
                let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _150: u128;
                let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _155: u128;
                let _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _176: u128;
                let _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _185: u128;
                let _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _190: u128;
                let _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _195: u128;
                let _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _204: u128;
                let _206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _209: u128;
                let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _214: u128;
                let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _219: u128;
                let _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _224: u128;
                scope 36 {
                    debug residual => _113;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug val => _116;
                    scope 39 {
                    }
                }
                scope 40 {
                    debug residual => _122;
                    scope 41 {
                    }
                }
                scope 42 {
                    debug val => _125;
                    scope 43 {
                    }
                }
                scope 44 {
                    debug residual => _137;
                    scope 45 {
                    }
                }
                scope 46 {
                    debug val => _140;
                    scope 47 {
                    }
                }
                scope 48 {
                    debug residual => _147;
                    scope 49 {
                    }
                }
                scope 50 {
                    debug val => _150;
                    scope 51 {
                    }
                }
                scope 52 {
                    debug residual => _152;
                    scope 53 {
                    }
                }
                scope 54 {
                    debug val => _155;
                    scope 55 {
                    }
                }
                scope 56 {
                    debug residual => _173;
                    scope 57 {
                    }
                }
                scope 58 {
                    debug val => _176;
                    scope 59 {
                    }
                }
                scope 60 {
                    debug residual => _182;
                    scope 61 {
                    }
                }
                scope 62 {
                    debug val => _185;
                    scope 63 {
                    }
                }
                scope 64 {
                    debug residual => _187;
                    scope 65 {
                    }
                }
                scope 66 {
                    debug val => _190;
                    scope 67 {
                    }
                }
                scope 68 {
                    debug residual => _192;
                    scope 69 {
                    }
                }
                scope 70 {
                    debug val => _195;
                    scope 71 {
                    }
                }
                scope 72 {
                    debug residual => _201;
                    scope 73 {
                    }
                }
                scope 74 {
                    debug val => _204;
                    scope 75 {
                    }
                }
                scope 76 {
                    debug residual => _206;
                    scope 77 {
                    }
                }
                scope 78 {
                    debug val => _209;
                    scope 79 {
                    }
                }
                scope 80 {
                    debug residual => _211;
                    scope 81 {
                    }
                }
                scope 82 {
                    debug val => _214;
                    scope 83 {
                    }
                }
                scope 84 {
                    debug residual => _216;
                    scope 85 {
                    }
                }
                scope 86 {
                    debug val => _219;
                    scope 87 {
                    }
                }
                scope 88 {
                    debug residual => _221;
                    scope 89 {
                    }
                }
                scope 90 {
                    debug val => _224;
                    scope 91 {
                    }
                }
            }
            scope 12 {
                debug residual => _58;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _61;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _63;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _66;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _72;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _75;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _77;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _80;
                scope 27 {
                }
            }
            scope 28 {
                debug residual => _86;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _89;
                scope 31 {
                }
            }
            scope 32 {
                debug residual => _91;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _94;
                scope 35 {
                }
            }
        }
        scope 3 {
            debug residual => _35;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _38;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _40;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _43;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _2;
        StorageLive(_12);
        _12 = _4;
        _10 = Ge(move _11, move _12);
        switchInt(move _10) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_12);
        StorageDead(_11);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(const _);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb148;
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = const ();
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _6;
        _17 = Gt(move _18, const 6_u32);
        switchInt(move _17) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _6;
        _22 = CheckedSub(_21, const 6_u32);
        assert(!move (_22.1: bool), "attempt to compute `{} - {}`, which would overflow", move _21, const 6_u32) -> [success: bb5, unwind continue];
    }

    bb4: {
        StorageDead(_18);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _6;
        _26 = CheckedSub(const 6_u32, _25);
        assert(!move (_26.1: bool), "attempt to compute `{} - {}`, which would overflow", const 6_u32, move _25) -> [success: bb7, unwind continue];
    }

    bb5: {
        _20 = move (_22.0: u32);
        StorageDead(_21);
        _19 = core::num::<impl u128>::pow(const 10_u128, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        _16 = (move _19, const 1_u128);
        StorageDead(_19);
        goto -> bb9;
    }

    bb7: {
        _24 = move (_26.0: u32);
        StorageDead(_25);
        _23 = core::num::<impl u128>::pow(const 10_u128, move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        _16 = (const 1_u128, move _23);
        StorageDead(_23);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_17);
        StorageLive(_14);
        _14 = (_16.0: u128);
        StorageLive(_15);
        _15 = (_16.1: u128);
        StorageDead(_16);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _4;
        _32 = <u32 as Cast>::cast::<u128>(move _33) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_38);
        _38 = ((_31 as Continue).0: u128);
        _30 = _38;
        StorageDead(_38);
        _29 = <u128 as SafeMath>::safe_mul(move _30, const 10_u128) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_35);
        _35 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb146;
    }

    bb16: {
        StorageDead(_30);
        _28 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_29);
        _39 = discriminant(_28);
        switchInt(move _39) -> [0: bb18, 1: bb19, otherwise: bb13];
    }

    bb18: {
        StorageLive(_43);
        _43 = ((_28 as Continue).0: u128);
        _27 = _43;
        StorageDead(_43);
        StorageDead(_31);
        StorageDead(_28);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _2;
        _55 = <u32 as Cast>::cast::<u128>(move _56) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_40);
        _40 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb146;
    }

    bb21: {
        StorageDead(_56);
        _54 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb23, 1: bb24, otherwise: bb13];
    }

    bb23: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: u128);
        _53 = _61;
        StorageDead(_61);
        _52 = <u128 as SafeMath>::safe_mul(move _53, const 10_u128) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb143;
    }

    bb26: {
        StorageDead(_53);
        _51 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_52);
        _62 = discriminant(_51);
        switchInt(move _62) -> [0: bb28, 1: bb29, otherwise: bb13];
    }

    bb28: {
        StorageLive(_66);
        _66 = ((_51 as Continue).0: u128);
        _50 = _66;
        StorageDead(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _3;
        _69 = <u32 as Cast>::cast::<u128>(move _70) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_63);
        _63 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb143;
    }

    bb31: {
        StorageDead(_70);
        _68 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _69) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_69);
        _71 = discriminant(_68);
        switchInt(move _71) -> [0: bb33, 1: bb34, otherwise: bb13];
    }

    bb33: {
        StorageLive(_75);
        _75 = ((_68 as Continue).0: u128);
        _67 = _75;
        StorageDead(_75);
        _49 = <u128 as SafeMath>::safe_mul(move _50, move _67) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_72);
        _72 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_67);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb141;
    }

    bb36: {
        StorageDead(_67);
        StorageDead(_50);
        _48 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_49);
        _76 = discriminant(_48);
        switchInt(move _76) -> [0: bb38, 1: bb39, otherwise: bb13];
    }

    bb38: {
        StorageLive(_80);
        _80 = ((_48 as Continue).0: u128);
        _47 = _80;
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = _5;
        _83 = <u32 as Cast>::cast::<u128>(move _84) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_77);
        _77 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_79);
        StorageDead(_77);
        goto -> bb141;
    }

    bb41: {
        StorageDead(_84);
        _82 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _83) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_83);
        _85 = discriminant(_82);
        switchInt(move _85) -> [0: bb43, 1: bb44, otherwise: bb13];
    }

    bb43: {
        StorageLive(_89);
        _89 = ((_82 as Continue).0: u128);
        _81 = _89;
        StorageDead(_89);
        _46 = <u128 as SafeMath>::safe_div(move _47, move _81) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_86);
        _86 = ((_82 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_81);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb140;
    }

    bb46: {
        StorageDead(_81);
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_46);
        _90 = discriminant(_45);
        switchInt(move _90) -> [0: bb48, 1: bb49, otherwise: bb13];
    }

    bb48: {
        StorageLive(_94);
        _94 = ((_45 as Continue).0: u128);
        _44 = _94;
        StorageDead(_94);
        StorageDead(_82);
        StorageDead(_68);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _44;
        StorageLive(_98);
        _98 = _27;
        _96 = Ge(move _97, move _98);
        switchInt(move _96) -> [0: bb52, otherwise: bb51];
    }

    bb49: {
        StorageLive(_91);
        _91 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_93);
        StorageDead(_91);
        goto -> bb140;
    }

    bb51: {
        StorageDead(_98);
        StorageDead(_97);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(const _);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb145;
    }

    bb52: {
        StorageDead(_98);
        StorageDead(_97);
        _95 = const ();
        StorageDead(_96);
        StorageDead(_95);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = _1;
        StorageLive(_111);
        _111 = _14;
        _109 = <u128 as SafeMath>::safe_mul(move _110, move _111) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_111);
        StorageDead(_110);
        _108 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _109) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_109);
        _112 = discriminant(_108);
        switchInt(move _112) -> [0: bb55, 1: bb56, otherwise: bb13];
    }

    bb55: {
        StorageLive(_116);
        _116 = ((_108 as Continue).0: u128);
        _107 = _116;
        StorageDead(_116);
        StorageLive(_117);
        StorageLive(_118);
        _119 = CheckedMul(const _, const _);
        assert(!move (_119.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const _) -> [success: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_113);
        _113 = ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb138;
    }

    bb58: {
        _118 = move (_119.0: u128);
        _120 = CheckedMul(_118, const 10_u128);
        assert(!move (_120.1: bool), "attempt to compute `{} * {}`, which would overflow", move _118, const 10_u128) -> [success: bb59, unwind continue];
    }

    bb59: {
        _117 = move (_120.0: u128);
        StorageDead(_118);
        _106 = <u128 as SafeMath>::safe_mul(move _107, move _117) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_117);
        StorageDead(_107);
        _105 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _106) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_106);
        _121 = discriminant(_105);
        switchInt(move _121) -> [0: bb62, 1: bb63, otherwise: bb13];
    }

    bb62: {
        StorageLive(_125);
        _125 = ((_105 as Continue).0: u128);
        _104 = _125;
        StorageDead(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = _7;
        _134 = <i64 as Cast>::cast::<u128>(move _135) -> [return: bb65, unwind continue];
    }

    bb63: {
        StorageLive(_122);
        _122 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_124);
        StorageDead(_122);
        goto -> bb138;
    }

    bb65: {
        StorageDead(_135);
        _133 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _134) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_134);
        _136 = discriminant(_133);
        switchInt(move _136) -> [0: bb67, 1: bb68, otherwise: bb13];
    }

    bb67: {
        StorageLive(_140);
        _140 = ((_133 as Continue).0: u128);
        _132 = _140;
        StorageDead(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _27;
        StorageLive(_145);
        _145 = _44;
        _143 = <u128 as SafeMath>::safe_sub(move _144, move _145) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_137);
        _137 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_44);
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb137;
    }

    bb70: {
        StorageDead(_145);
        StorageDead(_144);
        _142 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _143) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_143);
        _146 = discriminant(_142);
        switchInt(move _146) -> [0: bb72, 1: bb73, otherwise: bb13];
    }

    bb72: {
        StorageLive(_150);
        _150 = ((_142 as Continue).0: u128);
        _141 = _150;
        StorageDead(_150);
        _131 = <u128 as SafeMath>::safe_mul(move _132, move _141) -> [return: bb75, unwind continue];
    }

    bb73: {
        StorageLive(_147);
        _147 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_141);
        StorageDead(_132);
        StorageDead(_131);
        goto -> bb135;
    }

    bb75: {
        StorageDead(_141);
        StorageDead(_132);
        _130 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _131) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_131);
        _151 = discriminant(_130);
        switchInt(move _151) -> [0: bb77, 1: bb78, otherwise: bb13];
    }

    bb77: {
        StorageLive(_155);
        _155 = ((_130 as Continue).0: u128);
        _129 = _155;
        StorageDead(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = _7;
        _170 = <i64 as Cast>::cast::<u128>(move _171) -> [return: bb80, unwind continue];
    }

    bb78: {
        StorageLive(_152);
        _152 = ((_130 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_154);
        StorageDead(_152);
        goto -> bb135;
    }

    bb80: {
        StorageDead(_171);
        _169 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _170) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_170);
        _172 = discriminant(_169);
        switchInt(move _172) -> [0: bb82, 1: bb83, otherwise: bb13];
    }

    bb82: {
        StorageLive(_176);
        _176 = ((_169 as Continue).0: u128);
        _168 = _176;
        StorageDead(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = _8;
        _179 = <u32 as Cast>::cast::<u128>(move _180) -> [return: bb85, unwind continue];
    }

    bb83: {
        StorageLive(_173);
        _173 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_175);
        _175 = _173;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _175) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_44);
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb134;
    }

    bb85: {
        StorageDead(_180);
        _178 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _179) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_179);
        _181 = discriminant(_178);
        switchInt(move _181) -> [0: bb87, 1: bb88, otherwise: bb13];
    }

    bb87: {
        StorageLive(_185);
        _185 = ((_178 as Continue).0: u128);
        _177 = _185;
        StorageDead(_185);
        _167 = <u128 as SafeMath>::safe_mul(move _168, move _177) -> [return: bb90, unwind continue];
    }

    bb88: {
        StorageLive(_182);
        _182 = ((_178 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_184);
        _184 = _182;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _184) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_177);
        StorageDead(_168);
        StorageDead(_167);
        goto -> bb131;
    }

    bb90: {
        StorageDead(_177);
        StorageDead(_168);
        _166 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _167) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_167);
        _186 = discriminant(_166);
        switchInt(move _186) -> [0: bb92, 1: bb93, otherwise: bb13];
    }

    bb92: {
        StorageLive(_190);
        _190 = ((_166 as Continue).0: u128);
        _165 = _190;
        StorageDead(_190);
        _164 = <u128 as SafeMath>::safe_div(move _165, const _) -> [return: bb95, unwind continue];
    }

    bb93: {
        StorageLive(_187);
        _187 = ((_166 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_189);
        _189 = _187;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _189) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_189);
        StorageDead(_187);
        goto -> bb131;
    }

    bb95: {
        StorageDead(_165);
        _163 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _164) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_164);
        _191 = discriminant(_163);
        switchInt(move _191) -> [0: bb97, 1: bb98, otherwise: bb13];
    }

    bb97: {
        StorageLive(_195);
        _195 = ((_163 as Continue).0: u128);
        _162 = _195;
        StorageDead(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _199 = _4;
        _198 = <u32 as Cast>::cast::<u128>(move _199) -> [return: bb100, unwind continue];
    }

    bb98: {
        StorageLive(_192);
        _192 = ((_163 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_194);
        _194 = _192;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _194) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_194);
        StorageDead(_192);
        goto -> bb132;
    }

    bb100: {
        StorageDead(_199);
        _197 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _198) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_198);
        _200 = discriminant(_197);
        switchInt(move _200) -> [0: bb102, 1: bb103, otherwise: bb13];
    }

    bb102: {
        StorageLive(_204);
        _204 = ((_197 as Continue).0: u128);
        _196 = _204;
        StorageDead(_204);
        _161 = <u128 as SafeMath>::safe_mul(move _162, move _196) -> [return: bb105, unwind continue];
    }

    bb103: {
        StorageLive(_201);
        _201 = ((_197 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_203);
        _203 = _201;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _203) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_196);
        StorageDead(_162);
        StorageDead(_161);
        goto -> bb127;
    }

    bb105: {
        StorageDead(_196);
        StorageDead(_162);
        _160 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _161) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_161);
        _205 = discriminant(_160);
        switchInt(move _205) -> [0: bb107, 1: bb108, otherwise: bb13];
    }

    bb107: {
        StorageLive(_209);
        _209 = ((_160 as Continue).0: u128);
        _159 = _209;
        StorageDead(_209);
        _158 = <u128 as SafeMath>::safe_mul(move _159, const 10_u128) -> [return: bb110, unwind continue];
    }

    bb108: {
        StorageLive(_206);
        _206 = ((_160 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_208);
        _208 = _206;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _208) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_208);
        StorageDead(_206);
        goto -> bb127;
    }

    bb110: {
        StorageDead(_159);
        _157 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _158) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_158);
        _210 = discriminant(_157);
        switchInt(move _210) -> [0: bb112, 1: bb113, otherwise: bb13];
    }

    bb112: {
        StorageLive(_214);
        _214 = ((_157 as Continue).0: u128);
        _156 = _214;
        StorageDead(_214);
        _128 = <u128 as SafeMath>::safe_sub(move _129, move _156) -> [return: bb115, unwind continue];
    }

    bb113: {
        StorageLive(_211);
        _211 = ((_157 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_213);
        StorageDead(_211);
        goto -> bb128;
    }

    bb115: {
        StorageDead(_156);
        StorageDead(_129);
        _127 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _128) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_128);
        _215 = discriminant(_127);
        switchInt(move _215) -> [0: bb117, 1: bb118, otherwise: bb13];
    }

    bb117: {
        StorageLive(_219);
        _219 = ((_127 as Continue).0: u128);
        _126 = _219;
        StorageDead(_219);
        _103 = <u128 as SafeMath>::safe_div(move _104, move _126) -> [return: bb120, unwind continue];
    }

    bb118: {
        StorageLive(_216);
        _216 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_218);
        StorageDead(_216);
        goto -> bb129;
    }

    bb120: {
        StorageDead(_126);
        StorageDead(_104);
        _102 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _103) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_103);
        _220 = discriminant(_102);
        switchInt(move _220) -> [0: bb122, 1: bb123, otherwise: bb13];
    }

    bb122: {
        StorageLive(_224);
        _224 = ((_102 as Continue).0: u128);
        _101 = _224;
        StorageDead(_224);
        StorageLive(_225);
        _225 = _15;
        _100 = <u128 as SafeMath>::safe_div(move _101, move _225) -> [return: bb125, unwind continue];
    }

    bb123: {
        StorageLive(_221);
        _221 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_223);
        _223 = _221;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _223) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_223);
        StorageDead(_221);
        goto -> bb130;
    }

    bb125: {
        StorageDead(_225);
        StorageDead(_101);
        StorageLive(_226);
        _226 = {closure@programs/drift/src/math/liquidation.rs:117:14: 117:17};
        _0 = std::result::Result::<u128, error::ErrorCode>::map::<u128, {closure@programs/drift/src/math/liquidation.rs:117:14: 117:17}>(move _100, move _226) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_226);
        StorageDead(_100);
        StorageDead(_44);
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_197);
        StorageDead(_178);
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_142);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_102);
        goto -> bb148;
    }

    bb127: {
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb128;
    }

    bb128: {
        StorageDead(_156);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb129;
    }

    bb129: {
        StorageDead(_126);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_44);
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_197);
        goto -> bb133;
    }

    bb131: {
        StorageDead(_165);
        StorageDead(_164);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_44);
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_178);
        goto -> bb134;
    }

    bb134: {
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_163);
        StorageDead(_160);
        StorageDead(_157);
        goto -> bb136;
    }

    bb135: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_44);
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb136;
    }

    bb136: {
        StorageDead(_142);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_127);
        goto -> bb139;
    }

    bb138: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_44);
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_102);
        goto -> bb148;
    }

    bb140: {
        StorageDead(_82);
        goto -> bb142;
    }

    bb141: {
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb142;
    }

    bb142: {
        StorageDead(_68);
        goto -> bb144;
    }

    bb143: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_44);
        goto -> bb147;
    }

    bb146: {
        StorageDead(_31);
        StorageDead(_28);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_27);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb148;
    }

    bb148: {
        return;
    }
}
