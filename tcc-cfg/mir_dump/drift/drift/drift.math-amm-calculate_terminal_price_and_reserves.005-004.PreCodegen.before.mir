// MIR for `calculate_terminal_price_and_reserves` before PreCodegen

fn calculate_terminal_price_and_reserves(_1: &AMM) -> std::result::Result<(u64, u128, u128), error::ErrorCode> {
    debug amm => _1;
    let mut _0: std::result::Result<(u64, u128, u128), error::ErrorCode>;
    let _2: u128;
    let _3: u128;
    let mut _4: (u128, u128);
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _6: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _7: &state::perp_market::AMM;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: (u128, u128);
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _15: std::result::Result<u64, error::ErrorCode>;
    let mut _16: u128;
    let mut _17: u128;
    let mut _18: u128;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: (u64, u128, u128);
    let mut _25: u64;
    let mut _26: u128;
    let mut _27: u128;
    scope 1 {
        debug new_quote_asset_amount => _2;
        debug new_base_asset_amount => _3;
        let _13: u64;
        let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _23: u64;
        scope 6 {
            debug terminal_price => _13;
        }
        scope 7 {
            debug residual => _20;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _23;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = calculate_terminal_reserves(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: (u128, u128));
        _4 = _12;
        StorageDead(_12);
        StorageLive(_2);
        _2 = (_4.0: u128);
        StorageLive(_3);
        _3 = (_4.1: u128);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _2;
        StorageLive(_17);
        _17 = _3;
        StorageLive(_18);
        _18 = ((*_1).11: u128);
        _15 = calculate_price(move _16, move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(u64, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_14 as Continue).0: u64);
        _13 = _23;
        StorageDead(_23);
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _13;
        StorageLive(_26);
        _26 = _2;
        StorageLive(_27);
        _27 = _3;
        _24 = (move _25, move _26, move _27);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        _0 = std::result::Result::<(u64, u128, u128), error::ErrorCode>::Ok(move _24);
        StorageDead(_24);
        StorageDead(_13);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb12;
    }

    bb10: {
        StorageLive(_20);
        _20 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(u64, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}
