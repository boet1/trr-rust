// MIR for `if_staker::<impl at programs/drift/src/instructions/if_staker.rs:975:10: 975:18>::try_accounts` after PreCodegen

fn if_staker::<impl at programs/drift/src/instructions/if_staker.rs:975:10: 975:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut TransferProtocolIfSharesBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, instructions::if_staker::TransferProtocolIfSharesBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, instructions::if_staker::TransferProtocolIfSharesBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, instructions::if_staker::TransferProtocolIfSharesBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, instructions::if_staker::TransferProtocolIfSharesBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _22: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::if_staker::TransferProtocolIfSharesBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>>;
    let mut _37: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::if_staker::TransferProtocolIfSharesBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _52: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::if_staker::TransferProtocolIfSharesBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _67: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::if_staker::TransferProtocolIfSharesBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _82: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::if_staker::TransferProtocolIfSharesBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _97: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::if_staker::TransferProtocolIfSharesBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _112: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _113: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &mut instructions::if_staker::TransferProtocolIfSharesBumps;
    let mut _118: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _119: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _127: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _128: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _129: &anchor_lang::prelude::Pubkey;
    let mut _130: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _131: &[u8];
    let mut _132: &mut instructions::if_staker::TransferProtocolIfSharesBumps;
    let mut _133: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _134: {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _140: ();
    let mut _141: bool;
    let mut _142: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let _144: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _145: !;
    let mut _146: anchor_lang::error::Error;
    let mut _147: anchor_lang::error::Error;
    let mut _148: anchor_lang::error::ErrorCode;
    let mut _151: (anchor_lang::prelude::Pubkey, u8);
    let mut _152: &[&[u8]];
    let mut _153: &[&[u8]; 2];
    let _154: &[&[u8]; 2];
    let _155: [&[u8]; 2];
    let mut _156: &[u8];
    let mut _157: &[u8; 11];
    let _158: &[u8; 11];
    let mut _159: &[u8];
    let _160: &[u8];
    let mut _161: &[u8; 2];
    let _162: [u8; 2];
    let mut _163: u16;
    let mut _164: &anchor_lang::prelude::Pubkey;
    let _165: &&anchor_lang::prelude::Pubkey;
    let mut _166: u8;
    let _167: ();
    let mut _168: bool;
    let mut _169: &anchor_lang::prelude::Pubkey;
    let _170: anchor_lang::prelude::Pubkey;
    let mut _171: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _172: &anchor_lang::prelude::Pubkey;
    let mut _173: !;
    let mut _174: anchor_lang::error::Error;
    let mut _175: anchor_lang::error::Error;
    let mut _176: anchor_lang::error::Error;
    let mut _177: anchor_lang::error::ErrorCode;
    let mut _178: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _179: anchor_lang::prelude::Pubkey;
    let mut _180: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _181: anchor_lang::prelude::Pubkey;
    let _182: ();
    let mut _183: bool;
    let mut _184: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _185: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _186: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _187: !;
    let mut _188: anchor_lang::error::Error;
    let mut _189: anchor_lang::error::Error;
    let mut _190: anchor_lang::error::ErrorCode;
    let mut _193: (anchor_lang::prelude::Pubkey, u8);
    let mut _194: &[&[u8]];
    let mut _195: &[&[u8]; 3];
    let _196: &[&[u8]; 3];
    let _197: [&[u8]; 3];
    let mut _198: &[u8];
    let mut _199: &[u8; 20];
    let _200: &[u8; 20];
    let mut _201: &[u8];
    let _202: &[u8];
    let mut _203: &anchor_lang::prelude::Pubkey;
    let _204: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _205: &anchor_lang::prelude::Signer<'_>;
    let mut _206: &[u8];
    let _207: &[u8];
    let mut _208: &[u8; 2];
    let _209: [u8; 2];
    let mut _210: u16;
    let mut _211: &anchor_lang::prelude::Pubkey;
    let _212: &&anchor_lang::prelude::Pubkey;
    let mut _213: u8;
    let _214: ();
    let mut _215: bool;
    let mut _216: &anchor_lang::prelude::Pubkey;
    let _217: anchor_lang::prelude::Pubkey;
    let mut _218: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _219: &anchor_lang::prelude::Pubkey;
    let mut _220: !;
    let mut _221: anchor_lang::error::Error;
    let mut _222: anchor_lang::error::Error;
    let mut _223: anchor_lang::error::Error;
    let mut _224: anchor_lang::error::ErrorCode;
    let mut _225: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _226: anchor_lang::prelude::Pubkey;
    let mut _227: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _228: anchor_lang::prelude::Pubkey;
    let _229: ();
    let mut _230: bool;
    let mut _231: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _232: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let _233: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _234: !;
    let mut _235: anchor_lang::error::Error;
    let mut _236: anchor_lang::error::Error;
    let mut _237: anchor_lang::error::ErrorCode;
    let _238: ();
    let mut _240: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _241: &std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let _242: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _243: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _244: std::result::Result<std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _245: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _246: isize;
    let mut _248: !;
    let mut _249: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _252: &anchor_lang::prelude::Signer<'_>;
    let mut _253: bool;
    let mut _254: &anchor_lang::prelude::Pubkey;
    let mut _255: &anchor_lang::prelude::Pubkey;
    let mut _256: !;
    let mut _257: anchor_lang::error::Error;
    let mut _258: anchor_lang::error::Error;
    let mut _259: anchor_lang::error::Error;
    let mut _260: anchor_lang::error::ErrorCode;
    let mut _261: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _262: anchor_lang::prelude::Pubkey;
    let mut _263: anchor_lang::prelude::Pubkey;
    let _264: ();
    let mut _265: bool;
    let mut _266: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _267: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _268: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _269: !;
    let mut _270: anchor_lang::error::Error;
    let mut _271: anchor_lang::error::Error;
    let mut _272: anchor_lang::error::ErrorCode;
    let _273: ();
    let mut _275: &state::user::UserStats;
    let mut _276: &std::cell::Ref<'_, state::user::UserStats>;
    let _277: std::cell::Ref<'_, state::user::UserStats>;
    let mut _278: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _279: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _280: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _281: isize;
    let mut _283: !;
    let mut _284: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _287: &anchor_lang::prelude::Signer<'_>;
    let mut _288: bool;
    let mut _289: &anchor_lang::prelude::Pubkey;
    let mut _290: &anchor_lang::prelude::Pubkey;
    let mut _291: !;
    let mut _292: anchor_lang::error::Error;
    let mut _293: anchor_lang::error::Error;
    let mut _294: anchor_lang::error::Error;
    let mut _295: anchor_lang::error::ErrorCode;
    let mut _296: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _297: anchor_lang::prelude::Pubkey;
    let mut _298: anchor_lang::prelude::Pubkey;
    let mut _301: (anchor_lang::prelude::Pubkey, u8);
    let mut _302: &[&[u8]];
    let mut _303: &[&[u8]; 2];
    let _304: &[&[u8]; 2];
    let _305: [&[u8]; 2];
    let mut _306: &[u8];
    let _307: &[u8];
    let mut _308: &[u8; 20];
    let _309: &[u8; 20];
    let mut _310: &[u8];
    let _311: &[u8];
    let mut _312: &[u8; 2];
    let _313: [u8; 2];
    let mut _314: u16;
    let mut _315: &anchor_lang::prelude::Pubkey;
    let _316: &&anchor_lang::prelude::Pubkey;
    let mut _317: u8;
    let _318: ();
    let mut _319: bool;
    let mut _320: &anchor_lang::prelude::Pubkey;
    let _321: anchor_lang::prelude::Pubkey;
    let mut _322: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _323: &anchor_lang::prelude::Pubkey;
    let mut _324: !;
    let mut _325: anchor_lang::error::Error;
    let mut _326: anchor_lang::error::Error;
    let mut _327: anchor_lang::error::Error;
    let mut _328: anchor_lang::error::ErrorCode;
    let mut _329: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _330: anchor_lang::prelude::Pubkey;
    let mut _331: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _332: anchor_lang::prelude::Pubkey;
    let mut _333: instructions::if_staker::TransferProtocolIfShares<'_>;
    let mut _334: anchor_lang::prelude::Signer<'_>;
    let mut _335: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _336: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _337: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _338: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _339: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _340: anchor_lang::prelude::Signer<'_>;
    let mut _341: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _342: &anchor_lang::prelude::Pubkey;
    let mut _343: &anchor_lang::prelude::Pubkey;
    let mut _344: &anchor_lang::prelude::Pubkey;
    let mut _345: &anchor_lang::prelude::Pubkey;
    let mut _346: bool;
    let mut _347: bool;
    let mut _348: bool;
    let mut _349: bool;
    let mut _350: bool;
    let mut _351: bool;
    let mut _352: bool;
    let mut _353: isize;
    let mut _354: isize;
    let mut _355: isize;
    let mut _356: isize;
    let mut _357: isize;
    let mut _358: isize;
    let mut _359: isize;
    let mut _360: isize;
    let mut _361: isize;
    let mut _362: isize;
    let mut _363: isize;
    let mut _364: isize;
    let mut _365: isize;
    let mut _366: isize;
    let mut _367: isize;
    let mut _368: isize;
    let mut _369: isize;
    let mut _370: isize;
    let mut _371: isize;
    let mut _372: isize;
    let mut _373: isize;
    let mut _374: isize;
    let mut _375: isize;
    let mut _376: isize;
    let mut _377: isize;
    let mut _378: isize;
    let mut _379: isize;
    let mut _380: isize;
    let mut _381: isize;
    let mut _382: isize;
    let mut _383: isize;
    let mut _384: isize;
    let mut _385: isize;
    let mut _386: isize;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _404: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, instructions::if_staker::TransferProtocolIfSharesBumps>>::try_accounts::__Args;
        scope 2 {
            debug market_index => _7;
            let _20: anchor_lang::prelude::Signer<'_>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug signer => _20;
                let _35: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
                scope 12 {
                    debug transfer_config => _35;
                    let _50: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 17 {
                        debug state => _50;
                        let _65: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                        scope 22 {
                            debug spot_market => _65;
                            let _80: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
                            scope 27 {
                                debug insurance_fund_stake => _80;
                                let _95: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                scope 32 {
                                    debug user_stats => _95;
                                    let _110: anchor_lang::prelude::Signer<'_>;
                                    let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _124: anchor_lang::prelude::Signer<'_>;
                                    scope 37 {
                                        debug authority => _110;
                                        let _125: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        let _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _139: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        scope 42 {
                                            debug insurance_fund_vault => _125;
                                            let _149: anchor_lang::prelude::Pubkey;
                                            let _150: u8;
                                            scope 47 {
                                                debug __pda_address => _149;
                                                debug __bump => _150;
                                                let _191: anchor_lang::prelude::Pubkey;
                                                let _192: u8;
                                                scope 48 {
                                                    debug __pda_address => _191;
                                                    debug __bump => _192;
                                                    let _239: anchor_lang::prelude::Pubkey;
                                                    let _247: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _250: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>;
                                                    let _274: anchor_lang::prelude::Pubkey;
                                                    let _282: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _285: std::cell::Ref<'_, state::user::UserStats>;
                                                    let _299: anchor_lang::prelude::Pubkey;
                                                    let _300: u8;
                                                    scope 49 {
                                                        debug my_key => _239;
                                                        let _251: anchor_lang::prelude::Pubkey;
                                                        scope 54 {
                                                            debug target_key => _251;
                                                        }
                                                    }
                                                    scope 50 {
                                                        debug residual => _247;
                                                        scope 51 {
                                                        }
                                                    }
                                                    scope 52 {
                                                        debug val => _250;
                                                        scope 53 {
                                                        }
                                                    }
                                                    scope 55 {
                                                        debug my_key => _274;
                                                        let _286: anchor_lang::prelude::Pubkey;
                                                        scope 60 {
                                                            debug target_key => _286;
                                                        }
                                                    }
                                                    scope 56 {
                                                        debug residual => _282;
                                                        scope 57 {
                                                        }
                                                    }
                                                    scope 58 {
                                                        debug val => _285;
                                                        scope 59 {
                                                        }
                                                    }
                                                    scope 61 {
                                                        debug __pda_address => _299;
                                                        debug __bump => _300;
                                                    }
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _136;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _139;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _121;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _124;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _106;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _109;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _91;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _94;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _76;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _79;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _61;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _64;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _352 = const false;
        _351 = const false;
        _346 = const false;
        _350 = const false;
        _349 = const false;
        _348 = const false;
        _347 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, TransferProtocolIfSharesBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _10 = std::result::Result::<<if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, TransferProtocolIfSharesBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _11, move _14) -> [return: bb2, unwind: bb157];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, TransferProtocolIfSharesBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::if_staker::TransferProtocolIfShares<'info> as anchor_lang::Accounts<'info, instructions::if_staker::TransferProtocolIfSharesBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, TransferProtocolIfSharesBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb151;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _22 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _23, move _29) -> [return: bb9, unwind: bb157];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb157];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _20 = move _34;
        StorageDead(_34);
        _353 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::AccountLoader<'_, ProtocolIfSharesTransferConfig> as anchor_lang::Accounts<'_, TransferProtocolIfSharesBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb175];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _391 = discriminant(_21);
        StorageDead(_21);
        goto -> bb150;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _37 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, ProtocolIfSharesTransferConfig>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _38, move _44) -> [return: bb15, unwind: bb157];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, ProtocolIfSharesTransferConfig>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb157];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>);
        _35 = move _49;
        StorageDead(_49);
        _355 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, TransferProtocolIfSharesBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb174];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _389 = discriminant(_36);
        StorageDead(_36);
        goto -> bb149;
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _52 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _53, move _59) -> [return: bb21, unwind: bb157];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb157];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _50 = move _64;
        StorageDead(_64);
        _357 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, TransferProtocolIfSharesBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb156];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb173];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _387 = discriminant(_51);
        StorageDead(_51);
        goto -> bb148;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _67 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _68, move _74) -> [return: bb27, unwind: bb156];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb156];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _65 = move _79;
        StorageDead(_79);
        _359 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::Accounts<'_, TransferProtocolIfSharesBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb156];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb172];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _385 = discriminant(_66);
        StorageDead(_66);
        goto -> bb147;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _82 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _83, move _89) -> [return: bb33, unwind: bb156];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb156];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _80 = move _94;
        StorageDead(_94);
        _361 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, TransferProtocolIfSharesBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb156];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb171];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _383 = discriminant(_81);
        StorageDead(_81);
        goto -> bb146;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _97 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _98, move _104) -> [return: bb39, unwind: bb156];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb156];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _95 = move _109;
        StorageDead(_109);
        _363 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_1);
        StorageLive(_115);
        _115 = &mut (*_2);
        StorageLive(_116);
        _116 = &(*_6);
        StorageLive(_117);
        _117 = &mut (*_4);
        StorageLive(_118);
        _118 = &mut (*_5);
        _113 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, TransferProtocolIfSharesBumps>>::try_accounts(move _114, move _115, move _116, move _117, move _118) -> [return: bb44, unwind: bb156];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb170];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _381 = discriminant(_96);
        StorageDead(_96);
        goto -> bb145;
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_119);
        _119 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _112 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _113, move _119) -> [return: bb45, unwind: bb156];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_113);
        _111 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb46, unwind: bb156];
    }

    bb46: {
        StorageDead(_112);
        _120 = discriminant(_111);
        switchInt(move _120) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_124);
        _124 = move ((_111 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _110 = move _124;
        StorageDead(_124);
        _365 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_1);
        StorageLive(_130);
        _130 = &mut (*_2);
        StorageLive(_131);
        _131 = &(*_6);
        StorageLive(_132);
        _132 = &mut (*_4);
        StorageLive(_133);
        _133 = &mut (*_5);
        _128 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, TransferProtocolIfSharesBumps>>::try_accounts(move _129, move _130, move _131, move _132, move _133) -> [return: bb50, unwind: bb156];
    }

    bb48: {
        StorageLive(_121);
        _121 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb49, unwind: bb169];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_121);
        _379 = discriminant(_111);
        StorageDead(_111);
        goto -> bb144;
    }

    bb50: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_134);
        _134 = {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18};
        _127 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:975:10: 975:18}>(move _128, move _134) -> [return: bb51, unwind: bb156];
    }

    bb51: {
        StorageDead(_134);
        StorageDead(_128);
        _126 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _127) -> [return: bb52, unwind: bb156];
    }

    bb52: {
        StorageDead(_127);
        _135 = discriminant(_126);
        switchInt(move _135) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_139);
        _139 = move ((_126 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _125 = move _139;
        StorageDead(_139);
        _367 = discriminant(_126);
        StorageDead(_126);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = &_35;
        _143 = &(*_144);
        _142 = <anchor_lang::prelude::AccountLoader<'_, ProtocolIfSharesTransferConfig> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _143) -> [return: bb56, unwind: bb155];
    }

    bb54: {
        StorageLive(_136);
        _136 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_138);
        _138 = move _136;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _138) -> [return: bb55, unwind: bb168];
    }

    bb55: {
        StorageDead(_138);
        StorageDead(_136);
        _377 = discriminant(_126);
        StorageDead(_126);
        goto -> bb143;
    }

    bb56: {
        StorageDead(_143);
        _141 = ((*_142).6: bool);
        switchInt(move _141) -> [0: bb57, otherwise: bb60];
    }

    bb57: {
        StorageDead(_144);
        StorageDead(_142);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = ConstraintMut;
        _147 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _148) -> [return: bb58, unwind: bb155];
    }

    bb58: {
        StorageDead(_148);
        _146 = anchor_lang::error::Error::with_account_name::<&str>(move _147, const "transfer_config") -> [return: bb59, unwind: bb155];
    }

    bb59: {
        StorageDead(_147);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _146);
        StorageDead(_146);
        StorageDead(_141);
        StorageDead(_140);
        goto -> bb142;
    }

    bb60: {
        StorageDead(_144);
        StorageDead(_142);
        _140 = const ();
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = const b"spot_market";
        _157 = &(*_158);
        _156 = move _157 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_157);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _7;
        _162 = core::num::<impl u16>::to_le_bytes(move _163) -> [return: bb61, unwind: bb155];
    }

    bb61: {
        _161 = &_162;
        StorageDead(_163);
        _160 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _161) -> [return: bb62, unwind: bb155];
    }

    bb62: {
        _159 = &(*_160);
        StorageDead(_161);
        _155 = [move _156, move _159];
        StorageDead(_159);
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = move _153 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_153);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_1;
        _342 = deref_copy (*_165);
        _164 = &(*_342);
        _151 = anchor_lang::prelude::Pubkey::find_program_address(move _152, move _164) -> [return: bb63, unwind: bb155];
    }

    bb63: {
        StorageDead(_164);
        StorageDead(_152);
        StorageLive(_149);
        _149 = (_151.0: anchor_lang::prelude::Pubkey);
        StorageLive(_150);
        _150 = (_151.1: u8);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_151);
        StorageLive(_166);
        _166 = _150;
        ((*_4).0: u8) = move _166;
        StorageDead(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &_65;
        _170 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _171) -> [return: bb64, unwind: bb155];
    }

    bb64: {
        _169 = &_170;
        StorageDead(_171);
        StorageLive(_172);
        _172 = &_149;
        _168 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _169, move _172) -> [return: bb65, unwind: bb155];
    }

    bb65: {
        switchInt(move _168) -> [0: bb71, otherwise: bb66];
    }

    bb66: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = ConstraintSeeds;
        _176 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _177) -> [return: bb67, unwind: bb155];
    }

    bb67: {
        StorageDead(_177);
        _175 = anchor_lang::error::Error::with_account_name::<&str>(move _176, const "spot_market") -> [return: bb68, unwind: bb155];
    }

    bb68: {
        _352 = const true;
        StorageDead(_176);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_65;
        _179 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _180) -> [return: bb69, unwind: bb167];
    }

    bb69: {
        StorageDead(_180);
        StorageLive(_181);
        _181 = _149;
        _178 = (move _179, move _181);
        StorageDead(_181);
        StorageDead(_179);
        _352 = const false;
        _174 = anchor_lang::error::Error::with_pubkeys(move _175, move _178) -> [return: bb70, unwind: bb167];
    }

    bb70: {
        StorageDead(_178);
        _352 = const false;
        StorageDead(_175);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _174);
        StorageDead(_174);
        StorageDead(_168);
        StorageDead(_167);
        goto -> bb141;
    }

    bb71: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_169);
        _167 = const ();
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = &_65;
        _185 = &(*_186);
        _184 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _185) -> [return: bb72, unwind: bb155];
    }

    bb72: {
        StorageDead(_185);
        _183 = ((*_184).6: bool);
        switchInt(move _183) -> [0: bb73, otherwise: bb76];
    }

    bb73: {
        StorageDead(_186);
        StorageDead(_184);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = ConstraintMut;
        _189 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _190) -> [return: bb74, unwind: bb155];
    }

    bb74: {
        StorageDead(_190);
        _188 = anchor_lang::error::Error::with_account_name::<&str>(move _189, const "spot_market") -> [return: bb75, unwind: bb155];
    }

    bb75: {
        StorageDead(_189);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _188);
        StorageDead(_188);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb141;
    }

    bb76: {
        StorageDead(_186);
        StorageDead(_184);
        _182 = const ();
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = const b"insurance_fund_stake";
        _199 = &(*_200);
        _198 = move _199 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_199);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_110;
        _204 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _205) -> [return: bb77, unwind: bb155];
    }

    bb77: {
        StorageDead(_205);
        _343 = deref_copy ((*_204).0: &anchor_lang::prelude::Pubkey);
        _203 = &(*_343);
        _202 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _203) -> [return: bb78, unwind: bb155];
    }

    bb78: {
        _201 = &(*_202);
        StorageDead(_203);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = _7;
        _209 = core::num::<impl u16>::to_le_bytes(move _210) -> [return: bb79, unwind: bb155];
    }

    bb79: {
        _208 = &_209;
        StorageDead(_210);
        _207 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _208) -> [return: bb80, unwind: bb155];
    }

    bb80: {
        _206 = &(*_207);
        StorageDead(_208);
        _197 = [move _198, move _201, move _206];
        StorageDead(_206);
        StorageDead(_201);
        StorageDead(_198);
        _196 = &_197;
        _195 = &(*_196);
        _194 = move _195 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_195);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_1;
        _344 = deref_copy (*_212);
        _211 = &(*_344);
        _193 = anchor_lang::prelude::Pubkey::find_program_address(move _194, move _211) -> [return: bb81, unwind: bb155];
    }

    bb81: {
        StorageDead(_211);
        StorageDead(_194);
        StorageLive(_191);
        _191 = (_193.0: anchor_lang::prelude::Pubkey);
        StorageLive(_192);
        _192 = (_193.1: u8);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_193);
        StorageLive(_213);
        _213 = _192;
        ((*_4).1: u8) = move _213;
        StorageDead(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = &_80;
        _217 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::Key>::key(move _218) -> [return: bb82, unwind: bb155];
    }

    bb82: {
        _216 = &_217;
        StorageDead(_218);
        StorageLive(_219);
        _219 = &_191;
        _215 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _216, move _219) -> [return: bb83, unwind: bb155];
    }

    bb83: {
        switchInt(move _215) -> [0: bb89, otherwise: bb84];
    }

    bb84: {
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = ConstraintSeeds;
        _223 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _224) -> [return: bb85, unwind: bb155];
    }

    bb85: {
        StorageDead(_224);
        _222 = anchor_lang::error::Error::with_account_name::<&str>(move _223, const "insurance_fund_stake") -> [return: bb86, unwind: bb155];
    }

    bb86: {
        _351 = const true;
        StorageDead(_223);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_80;
        _226 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::Key>::key(move _227) -> [return: bb87, unwind: bb165];
    }

    bb87: {
        StorageDead(_227);
        StorageLive(_228);
        _228 = _191;
        _225 = (move _226, move _228);
        StorageDead(_228);
        StorageDead(_226);
        _351 = const false;
        _221 = anchor_lang::error::Error::with_pubkeys(move _222, move _225) -> [return: bb88, unwind: bb165];
    }

    bb88: {
        StorageDead(_225);
        _351 = const false;
        StorageDead(_222);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _221);
        StorageDead(_221);
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb140;
    }

    bb89: {
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_216);
        _214 = const ();
        StorageDead(_215);
        StorageDead(_214);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_80;
        _232 = &(*_233);
        _231 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _232) -> [return: bb90, unwind: bb155];
    }

    bb90: {
        StorageDead(_232);
        _230 = ((*_231).6: bool);
        switchInt(move _230) -> [0: bb91, otherwise: bb94];
    }

    bb91: {
        StorageDead(_233);
        StorageDead(_231);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = ConstraintMut;
        _236 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _237) -> [return: bb92, unwind: bb155];
    }

    bb92: {
        StorageDead(_237);
        _235 = anchor_lang::error::Error::with_account_name::<&str>(move _236, const "insurance_fund_stake") -> [return: bb93, unwind: bb155];
    }

    bb93: {
        StorageDead(_236);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _235);
        StorageDead(_235);
        StorageDead(_230);
        StorageDead(_229);
        goto -> bb140;
    }

    bb94: {
        StorageDead(_233);
        StorageDead(_231);
        _229 = const ();
        StorageDead(_230);
        StorageDead(_229);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &_80;
        _244 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load(move _245) -> [return: bb95, unwind: bb155];
    }

    bb95: {
        StorageDead(_245);
        _243 = <std::result::Result<Ref<'_, InsuranceFundStake>, anchor_lang::error::Error> as Try>::branch(move _244) -> [return: bb96, unwind: bb155];
    }

    bb96: {
        _349 = const true;
        _350 = const true;
        StorageDead(_244);
        _246 = discriminant(_243);
        switchInt(move _246) -> [0: bb97, 1: bb98, otherwise: bb5];
    }

    bb97: {
        StorageLive(_250);
        _250 = move ((_243 as Continue).0: std::cell::Ref<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _242 = move _250;
        StorageDead(_250);
        _241 = &_242;
        _240 = <Ref<'_, InsuranceFundStake> as Deref>::deref(move _241) -> [return: bb100, unwind: bb154];
    }

    bb98: {
        StorageLive(_247);
        _247 = move ((_243 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_249);
        _249 = move _247;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _249) -> [return: bb99, unwind: bb163];
    }

    bb99: {
        StorageDead(_249);
        StorageDead(_247);
        StorageDead(_241);
        _375 = discriminant(_243);
        _349 = const false;
        _350 = const false;
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_240);
        goto -> bb139;
    }

    bb100: {
        StorageDead(_241);
        _239 = ((*_240).0: anchor_lang::prelude::Pubkey);
        drop(_242) -> [return: bb158, unwind: bb163];
    }

    bb101: {
        StorageDead(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = &_239;
        StorageLive(_255);
        _255 = &_251;
        _253 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _254, move _255) -> [return: bb102, unwind: bb155];
    }

    bb102: {
        switchInt(move _253) -> [0: bb107, otherwise: bb103];
    }

    bb103: {
        StorageDead(_255);
        StorageDead(_254);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = ConstraintHasOne;
        _259 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _260) -> [return: bb104, unwind: bb155];
    }

    bb104: {
        StorageDead(_260);
        _258 = anchor_lang::error::Error::with_account_name::<&str>(move _259, const "insurance_fund_stake") -> [return: bb105, unwind: bb155];
    }

    bb105: {
        StorageDead(_259);
        StorageLive(_261);
        StorageLive(_262);
        _262 = _239;
        StorageLive(_263);
        _263 = _251;
        _261 = (move _262, move _263);
        StorageDead(_263);
        StorageDead(_262);
        _257 = anchor_lang::error::Error::with_pubkeys(move _258, move _261) -> [return: bb106, unwind: bb155];
    }

    bb106: {
        StorageDead(_261);
        StorageDead(_258);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _257);
        StorageDead(_257);
        StorageDead(_253);
        StorageDead(_251);
        goto -> bb139;
    }

    bb107: {
        StorageDead(_255);
        StorageDead(_254);
        _238 = const ();
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_239);
        StorageDead(_238);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_95;
        _267 = &(*_268);
        _266 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _267) -> [return: bb108, unwind: bb155];
    }

    bb108: {
        StorageDead(_267);
        _265 = ((*_266).6: bool);
        switchInt(move _265) -> [0: bb109, otherwise: bb112];
    }

    bb109: {
        StorageDead(_268);
        StorageDead(_266);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = ConstraintMut;
        _271 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _272) -> [return: bb110, unwind: bb155];
    }

    bb110: {
        StorageDead(_272);
        _270 = anchor_lang::error::Error::with_account_name::<&str>(move _271, const "user_stats") -> [return: bb111, unwind: bb155];
    }

    bb111: {
        StorageDead(_271);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _270);
        StorageDead(_270);
        StorageDead(_265);
        StorageDead(_264);
        goto -> bb140;
    }

    bb112: {
        StorageDead(_268);
        StorageDead(_266);
        _264 = const ();
        StorageDead(_265);
        StorageDead(_264);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = &_95;
        _279 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _280) -> [return: bb113, unwind: bb155];
    }

    bb113: {
        StorageDead(_280);
        _278 = <std::result::Result<Ref<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _279) -> [return: bb114, unwind: bb155];
    }

    bb114: {
        _347 = const true;
        _348 = const true;
        StorageDead(_279);
        _281 = discriminant(_278);
        switchInt(move _281) -> [0: bb115, 1: bb116, otherwise: bb5];
    }

    bb115: {
        StorageLive(_285);
        _285 = move ((_278 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _277 = move _285;
        StorageDead(_285);
        _276 = &_277;
        _275 = <Ref<'_, UserStats> as Deref>::deref(move _276) -> [return: bb118, unwind: bb153];
    }

    bb116: {
        StorageLive(_282);
        _282 = move ((_278 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_284);
        _284 = move _282;
        _0 = <std::result::Result<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _284) -> [return: bb117, unwind: bb162];
    }

    bb117: {
        StorageDead(_284);
        StorageDead(_282);
        StorageDead(_276);
        _373 = discriminant(_278);
        _347 = const false;
        _348 = const false;
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_275);
        goto -> bb138;
    }

    bb118: {
        StorageDead(_276);
        _274 = ((*_275).0: anchor_lang::prelude::Pubkey);
        drop(_277) -> [return: bb159, unwind: bb162];
    }

    bb119: {
        StorageDead(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &_274;
        StorageLive(_290);
        _290 = &_286;
        _288 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _289, move _290) -> [return: bb120, unwind: bb155];
    }

    bb120: {
        switchInt(move _288) -> [0: bb125, otherwise: bb121];
    }

    bb121: {
        StorageDead(_290);
        StorageDead(_289);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = ConstraintHasOne;
        _294 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _295) -> [return: bb122, unwind: bb155];
    }

    bb122: {
        StorageDead(_295);
        _293 = anchor_lang::error::Error::with_account_name::<&str>(move _294, const "user_stats") -> [return: bb123, unwind: bb155];
    }

    bb123: {
        StorageDead(_294);
        StorageLive(_296);
        StorageLive(_297);
        _297 = _274;
        StorageLive(_298);
        _298 = _286;
        _296 = (move _297, move _298);
        StorageDead(_298);
        StorageDead(_297);
        _292 = anchor_lang::error::Error::with_pubkeys(move _293, move _296) -> [return: bb124, unwind: bb155];
    }

    bb124: {
        StorageDead(_296);
        StorageDead(_293);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _292);
        StorageDead(_292);
        StorageDead(_288);
        StorageDead(_286);
        goto -> bb138;
    }

    bb125: {
        StorageDead(_290);
        StorageDead(_289);
        _273 = const ();
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_274);
        StorageDead(_273);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = const b"insurance_fund_vault";
        _308 = &(*_309);
        _307 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _308) -> [return: bb126, unwind: bb155];
    }

    bb126: {
        _306 = &(*_307);
        StorageDead(_308);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = _7;
        _313 = core::num::<impl u16>::to_le_bytes(move _314) -> [return: bb127, unwind: bb155];
    }

    bb127: {
        _312 = &_313;
        StorageDead(_314);
        _311 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _312) -> [return: bb128, unwind: bb155];
    }

    bb128: {
        _310 = &(*_311);
        StorageDead(_312);
        _305 = [move _306, move _310];
        StorageDead(_310);
        StorageDead(_306);
        _304 = &_305;
        _303 = &(*_304);
        _302 = move _303 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_303);
        StorageLive(_315);
        StorageLive(_316);
        _316 = &_1;
        _345 = deref_copy (*_316);
        _315 = &(*_345);
        _301 = anchor_lang::prelude::Pubkey::find_program_address(move _302, move _315) -> [return: bb129, unwind: bb155];
    }

    bb129: {
        StorageDead(_315);
        StorageDead(_302);
        StorageLive(_299);
        _299 = (_301.0: anchor_lang::prelude::Pubkey);
        StorageLive(_300);
        _300 = (_301.1: u8);
        StorageDead(_316);
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_301);
        StorageLive(_317);
        _317 = _300;
        ((*_4).2: u8) = move _317;
        StorageDead(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        _403 = (((_125.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _322 = &(*_403);
        _321 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _322) -> [return: bb130, unwind: bb155];
    }

    bb130: {
        _320 = &_321;
        StorageDead(_322);
        StorageLive(_323);
        _323 = &_299;
        _319 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _320, move _323) -> [return: bb131, unwind: bb155];
    }

    bb131: {
        switchInt(move _319) -> [0: bb137, otherwise: bb132];
    }

    bb132: {
        StorageDead(_323);
        StorageDead(_321);
        StorageDead(_320);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = ConstraintSeeds;
        _327 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _328) -> [return: bb133, unwind: bb155];
    }

    bb133: {
        StorageDead(_328);
        _326 = anchor_lang::error::Error::with_account_name::<&str>(move _327, const "insurance_fund_vault") -> [return: bb134, unwind: bb155];
    }

    bb134: {
        _346 = const true;
        StorageDead(_327);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _404 = (((_125.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _331 = &(*_404);
        _330 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _331) -> [return: bb135, unwind: bb161];
    }

    bb135: {
        StorageDead(_331);
        StorageLive(_332);
        _332 = _299;
        _329 = (move _330, move _332);
        StorageDead(_332);
        StorageDead(_330);
        _346 = const false;
        _325 = anchor_lang::error::Error::with_pubkeys(move _326, move _329) -> [return: bb136, unwind: bb161];
    }

    bb136: {
        StorageDead(_329);
        _346 = const false;
        StorageDead(_326);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Err(move _325);
        StorageDead(_325);
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_300);
        StorageDead(_299);
        goto -> bb140;
    }

    bb137: {
        StorageDead(_323);
        StorageDead(_321);
        StorageDead(_320);
        _318 = const ();
        StorageDead(_319);
        StorageDead(_318);
        StorageLive(_333);
        StorageLive(_334);
        _334 = move _20;
        StorageLive(_335);
        _335 = move _35;
        StorageLive(_336);
        _336 = move _50;
        StorageLive(_337);
        _337 = move _65;
        StorageLive(_338);
        _338 = move _80;
        StorageLive(_339);
        _339 = move _95;
        StorageLive(_340);
        _340 = move _110;
        StorageLive(_341);
        _341 = move _125;
        _333 = if_staker::TransferProtocolIfShares::<'_> { signer: move _334, transfer_config: move _335, state: move _336, spot_market: move _337, insurance_fund_stake: move _338, user_stats: move _339, authority: move _340, insurance_fund_vault: move _341 };
        StorageDead(_341);
        StorageDead(_340);
        StorageDead(_339);
        StorageDead(_338);
        StorageDead(_337);
        StorageDead(_336);
        StorageDead(_335);
        StorageDead(_334);
        _0 = std::result::Result::<if_staker::TransferProtocolIfShares<'_>, anchor_lang::error::Error>::Ok(move _333);
        StorageDead(_333);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_125);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb152;
    }

    bb138: {
        StorageDead(_274);
        StorageDead(_273);
        goto -> bb140;
    }

    bb139: {
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_150);
        StorageDead(_149);
        goto -> bb142;
    }

    bb142: {
        drop(_125) -> [return: bb143, unwind: bb156];
    }

    bb143: {
        StorageDead(_125);
        goto -> bb144;
    }

    bb144: {
        StorageDead(_110);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_95);
        goto -> bb146;
    }

    bb146: {
        StorageDead(_80);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_65);
        drop(_50) -> [return: bb148, unwind: bb157];
    }

    bb148: {
        StorageDead(_50);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_35);
        goto -> bb150;
    }

    bb150: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb151;
    }

    bb151: {
        StorageDead(_6);
        goto -> bb152;
    }

    bb152: {
        return;
    }

    bb153 (cleanup): {
        drop(_277) -> [return: bb162, unwind terminate(cleanup)];
    }

    bb154 (cleanup): {
        drop(_242) -> [return: bb163, unwind terminate(cleanup)];
    }

    bb155 (cleanup): {
        drop(_125) -> [return: bb156, unwind terminate(cleanup)];
    }

    bb156 (cleanup): {
        drop(_50) -> [return: bb157, unwind terminate(cleanup)];
    }

    bb157 (cleanup): {
        resume;
    }

    bb158: {
        _369 = discriminant(_243);
        _349 = const false;
        _350 = const false;
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_240);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &_110;
        _251 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _252) -> [return: bb101, unwind: bb155];
    }

    bb159: {
        _371 = discriminant(_278);
        _347 = const false;
        _348 = const false;
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_275);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_110;
        _286 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _287) -> [return: bb119, unwind: bb155];
    }

    bb160 (cleanup): {
        drop(_326) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb161 (cleanup): {
        switchInt(_346) -> [0: bb155, otherwise: bb160];
    }

    bb162 (cleanup): {
        _393 = discriminant(_278);
        goto -> bb155;
    }

    bb163 (cleanup): {
        _394 = discriminant(_243);
        goto -> bb155;
    }

    bb164 (cleanup): {
        drop(_222) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb165 (cleanup): {
        switchInt(_351) -> [0: bb155, otherwise: bb164];
    }

    bb166 (cleanup): {
        drop(_175) -> [return: bb155, unwind terminate(cleanup)];
    }

    bb167 (cleanup): {
        switchInt(_352) -> [0: bb155, otherwise: bb166];
    }

    bb168 (cleanup): {
        _395 = discriminant(_126);
        goto -> bb156;
    }

    bb169 (cleanup): {
        _396 = discriminant(_111);
        goto -> bb156;
    }

    bb170 (cleanup): {
        _397 = discriminant(_96);
        goto -> bb156;
    }

    bb171 (cleanup): {
        _398 = discriminant(_81);
        goto -> bb156;
    }

    bb172 (cleanup): {
        _399 = discriminant(_66);
        goto -> bb156;
    }

    bb173 (cleanup): {
        _400 = discriminant(_51);
        goto -> bb157;
    }

    bb174 (cleanup): {
        _401 = discriminant(_36);
        goto -> bb157;
    }

    bb175 (cleanup): {
        _402 = discriminant(_21);
        goto -> bb157;
    }
}

alloc261 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc260 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 73 │ insurance_fund_s
    0x10 │ 74 61 6b 65                                     │ take
}

alloc259 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}
