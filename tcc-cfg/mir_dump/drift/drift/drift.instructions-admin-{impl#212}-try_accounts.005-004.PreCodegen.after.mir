// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:5471:10: 5471:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:5471:10: 5471:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializePrelaunchOracleBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializePrelaunchOracleBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializePrelaunchOracleBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializePrelaunchOracleBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializePrelaunchOracleBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _22: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::admin::InitializePrelaunchOracleBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _35: ();
    let mut _36: bool;
    let mut _37: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _38: !;
    let mut _39: anchor_lang::error::Error;
    let mut _40: anchor_lang::error::ErrorCode;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: &[anchor_lang::prelude::AccountInfo<'_>];
    let _46: &[anchor_lang::prelude::AccountInfo<'_>];
    let _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: std::ops::RangeFrom<usize>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _52: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::admin::InitializePrelaunchOracleBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _67: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::admin::InitializePrelaunchOracleBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _82: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::admin::InitializePrelaunchOracleBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _97: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _105: (anchor_lang::prelude::Pubkey, u8);
    let mut _106: &[&[u8]];
    let mut _107: &[&[u8]; 2];
    let _108: &[&[u8]; 2];
    let _109: [&[u8]; 2];
    let mut _110: &[u8];
    let _111: &[u8];
    let mut _112: &[u8; 16];
    let _113: &[u8; 16];
    let mut _114: &[u8];
    let _115: &[u8];
    let mut _116: &[u8; 2];
    let _117: [u8; 2];
    let mut _118: u16;
    let mut _119: &anchor_lang::prelude::Pubkey;
    let mut _120: u8;
    let _121: ();
    let mut _122: bool;
    let mut _123: &anchor_lang::prelude::Pubkey;
    let _124: anchor_lang::prelude::Pubkey;
    let mut _125: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _126: &anchor_lang::prelude::Pubkey;
    let mut _127: !;
    let mut _128: anchor_lang::error::Error;
    let mut _129: anchor_lang::error::Error;
    let mut _130: anchor_lang::error::Error;
    let mut _131: anchor_lang::error::ErrorCode;
    let mut _132: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _133: anchor_lang::prelude::Pubkey;
    let mut _134: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _135: anchor_lang::prelude::Pubkey;
    let mut _138: &&anchor_lang::prelude::AccountInfo<'_>;
    let _139: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: &&anchor_lang::prelude::Pubkey;
    let mut _146: &&anchor_lang::prelude::Pubkey;
    let _147: &anchor_lang::prelude::Pubkey;
    let _148: anchor_lang::prelude::Pubkey;
    let mut _150: &anchor_lang::prelude::AccountInfo<'_>;
    let _151: ();
    let mut _152: bool;
    let mut _153: u64;
    let mut _156: &anchor_lang::prelude::Rent;
    let mut _157: usize;
    let mut _159: anchor_lang::prelude::AccountInfo<'_>;
    let mut _160: &anchor_lang::prelude::Signer<'_>;
    let mut _161: anchor_lang::prelude::AccountInfo<'_>;
    let mut _162: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _164: anchor_lang::prelude::AccountInfo<'_>;
    let mut _165: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _166: anchor_lang::system_program::CreateAccount<'_>;
    let _167: ();
    let mut _168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _169: std::result::Result<(), anchor_lang::error::Error>;
    let mut _170: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _171: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _172: &[&[&[u8]]];
    let mut _173: &[&[&[u8]]; 1];
    let _174: &[&[&[u8]]; 1];
    let _175: [&[&[u8]]; 1];
    let mut _176: &[&[u8]];
    let _177: &[&[u8]];
    let _178: &[&[u8]];
    let mut _179: &[&[u8]; 3];
    let _180: [&[u8]; 3];
    let mut _181: &[u8];
    let mut _182: &[u8; 16];
    let _183: &[u8; 16];
    let mut _184: &[u8];
    let _185: &[u8];
    let mut _186: &[u8; 2];
    let _187: [u8; 2];
    let mut _188: u16;
    let mut _189: &[u8];
    let _190: &[u8];
    let _191: &[u8];
    let mut _192: &[u8; 1];
    let _193: [u8; 1];
    let mut _194: u8;
    let mut _195: std::ops::RangeFull;
    let mut _196: std::ops::RangeFull;
    let mut _197: u64;
    let mut _198: u64;
    let mut _199: usize;
    let mut _200: &anchor_lang::prelude::Pubkey;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _206: ();
    let mut _207: bool;
    let mut _208: &anchor_lang::prelude::Pubkey;
    let _209: anchor_lang::prelude::Pubkey;
    let mut _210: &anchor_lang::prelude::Signer<'_>;
    let mut _211: &anchor_lang::prelude::Pubkey;
    let _212: anchor_lang::prelude::Pubkey;
    let mut _213: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _214: !;
    let mut _215: anchor_lang::error::Error;
    let mut _216: anchor_lang::error::Error;
    let mut _217: anchor_lang::error::AnchorError;
    let mut _218: std::string::String;
    let mut _219: &anchor_lang::error::ErrorCode;
    let _220: anchor_lang::error::ErrorCode;
    let mut _221: u32;
    let mut _222: anchor_lang::error::ErrorCode;
    let mut _223: std::string::String;
    let mut _224: &anchor_lang::error::ErrorCode;
    let _225: anchor_lang::error::ErrorCode;
    let mut _226: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _227: anchor_lang::error::ErrorOrigin;
    let mut _228: anchor_lang::error::Source;
    let mut _229: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _230: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _231: anchor_lang::prelude::Pubkey;
    let mut _232: &anchor_lang::prelude::Signer<'_>;
    let mut _233: anchor_lang::prelude::Pubkey;
    let mut _234: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _236: u64;
    let mut _237: u64;
    let mut _238: &anchor_lang::prelude::Rent;
    let mut _239: usize;
    let mut _240: u64;
    let _241: ();
    let mut _242: bool;
    let mut _243: u64;
    let mut _245: anchor_lang::prelude::AccountInfo<'_>;
    let mut _246: &anchor_lang::prelude::Signer<'_>;
    let mut _247: anchor_lang::prelude::AccountInfo<'_>;
    let mut _248: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _250: anchor_lang::prelude::AccountInfo<'_>;
    let mut _251: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _252: anchor_lang::system_program::Transfer<'_>;
    let _253: ();
    let mut _254: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _255: std::result::Result<(), anchor_lang::error::Error>;
    let mut _256: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _257: u64;
    let mut _258: isize;
    let mut _260: !;
    let mut _261: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _264: anchor_lang::prelude::AccountInfo<'_>;
    let mut _265: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _267: anchor_lang::prelude::AccountInfo<'_>;
    let mut _268: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _269: anchor_lang::system_program::Allocate<'_>;
    let _270: ();
    let mut _271: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _272: std::result::Result<(), anchor_lang::error::Error>;
    let mut _273: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _274: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _275: &[&[&[u8]]];
    let mut _276: &[&[&[u8]]; 1];
    let _277: &[&[&[u8]]; 1];
    let _278: [&[&[u8]]; 1];
    let mut _279: &[&[u8]];
    let _280: &[&[u8]];
    let _281: &[&[u8]];
    let mut _282: &[&[u8]; 3];
    let _283: [&[u8]; 3];
    let mut _284: &[u8];
    let mut _285: &[u8; 16];
    let _286: &[u8; 16];
    let mut _287: &[u8];
    let _288: &[u8];
    let mut _289: &[u8; 2];
    let _290: [u8; 2];
    let mut _291: u16;
    let mut _292: &[u8];
    let _293: &[u8];
    let _294: &[u8];
    let mut _295: &[u8; 1];
    let _296: [u8; 1];
    let mut _297: u8;
    let mut _298: std::ops::RangeFull;
    let mut _299: std::ops::RangeFull;
    let mut _300: u64;
    let mut _301: usize;
    let mut _302: isize;
    let mut _304: !;
    let mut _305: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _308: anchor_lang::prelude::AccountInfo<'_>;
    let mut _309: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _311: anchor_lang::prelude::AccountInfo<'_>;
    let mut _312: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _313: anchor_lang::system_program::Assign<'_>;
    let _314: ();
    let mut _315: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _316: std::result::Result<(), anchor_lang::error::Error>;
    let mut _317: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _318: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _319: &[&[&[u8]]];
    let mut _320: &[&[&[u8]]; 1];
    let _321: &[&[&[u8]]; 1];
    let _322: [&[&[u8]]; 1];
    let mut _323: &[&[u8]];
    let _324: &[&[u8]];
    let _325: &[&[u8]];
    let mut _326: &[&[u8]; 3];
    let _327: [&[u8]; 3];
    let mut _328: &[u8];
    let mut _329: &[u8; 16];
    let _330: &[u8; 16];
    let mut _331: &[u8];
    let _332: &[u8];
    let mut _333: &[u8; 2];
    let _334: [u8; 2];
    let mut _335: u16;
    let mut _336: &[u8];
    let _337: &[u8];
    let _338: &[u8];
    let mut _339: &[u8; 1];
    let _340: [u8; 1];
    let mut _341: u8;
    let mut _342: std::ops::RangeFull;
    let mut _343: std::ops::RangeFull;
    let mut _344: &anchor_lang::prelude::Pubkey;
    let mut _345: isize;
    let mut _347: !;
    let mut _348: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _350: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>, anchor_lang::error::Error>;
    let mut _351: &anchor_lang::prelude::Pubkey;
    let mut _352: &anchor_lang::prelude::AccountInfo<'_>;
    let _353: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _354: isize;
    let mut _357: !;
    let mut _358: anchor_lang::error::Error;
    let mut _359: anchor_lang::error::Error;
    let mut _360: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>, anchor_lang::error::Error>;
    let mut _361: &anchor_lang::prelude::AccountInfo<'_>;
    let _362: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _363: isize;
    let mut _366: !;
    let mut _367: anchor_lang::error::Error;
    let mut _368: anchor_lang::error::Error;
    let _369: ();
    let mut _370: bool;
    let _371: ();
    let mut _372: bool;
    let mut _373: usize;
    let mut _374: usize;
    let mut _375: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _376: !;
    let mut _377: anchor_lang::error::Error;
    let mut _378: anchor_lang::error::Error;
    let mut _379: anchor_lang::error::Error;
    let mut _380: anchor_lang::error::ErrorCode;
    let mut _381: (usize, usize);
    let mut _382: usize;
    let mut _383: usize;
    let mut _384: &anchor_lang::prelude::AccountInfo<'_>;
    let _385: ();
    let mut _386: bool;
    let mut _387: &&anchor_lang::prelude::Pubkey;
    let mut _388: &&anchor_lang::prelude::Pubkey;
    let mut _389: !;
    let mut _390: anchor_lang::error::Error;
    let mut _391: anchor_lang::error::Error;
    let mut _392: anchor_lang::error::Error;
    let mut _393: anchor_lang::error::ErrorCode;
    let mut _394: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _395: anchor_lang::prelude::Pubkey;
    let mut _396: anchor_lang::prelude::Pubkey;
    let mut _398: &anchor_lang::prelude::Rent;
    let mut _399: usize;
    let mut _400: bool;
    let mut _401: u64;
    let mut _402: &anchor_lang::prelude::AccountInfo<'_>;
    let _403: anchor_lang::prelude::AccountInfo<'_>;
    let mut _404: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _405: u64;
    let mut _406: !;
    let mut _407: anchor_lang::error::Error;
    let mut _408: anchor_lang::error::Error;
    let mut _409: anchor_lang::error::ErrorCode;
    let _410: ();
    let mut _411: bool;
    let mut _412: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _413: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let _414: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _415: !;
    let mut _416: anchor_lang::error::Error;
    let mut _417: anchor_lang::error::Error;
    let mut _418: anchor_lang::error::ErrorCode;
    let _419: ();
    let mut _420: bool;
    let mut _421: &anchor_lang::prelude::Rent;
    let mut _422: u64;
    let mut _423: &anchor_lang::prelude::AccountInfo<'_>;
    let _424: anchor_lang::prelude::AccountInfo<'_>;
    let mut _425: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _426: usize;
    let mut _427: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _428: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _429: &anchor_lang::prelude::AccountInfo<'_>;
    let _430: anchor_lang::prelude::AccountInfo<'_>;
    let mut _431: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _432: isize;
    let mut _434: !;
    let mut _435: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _437: !;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::Error;
    let mut _440: anchor_lang::error::ErrorCode;
    let _441: ();
    let mut _442: bool;
    let mut _443: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _444: &anchor_lang::prelude::Signer<'_>;
    let _445: &anchor_lang::prelude::Signer<'_>;
    let mut _446: !;
    let mut _447: anchor_lang::error::Error;
    let mut _448: anchor_lang::error::Error;
    let mut _449: anchor_lang::error::ErrorCode;
    let _450: ();
    let mut _452: &state::state::State;
    let mut _453: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _455: &anchor_lang::prelude::Signer<'_>;
    let mut _456: bool;
    let mut _457: &anchor_lang::prelude::Pubkey;
    let mut _458: &anchor_lang::prelude::Pubkey;
    let mut _459: !;
    let mut _460: anchor_lang::error::Error;
    let mut _461: anchor_lang::error::Error;
    let mut _462: anchor_lang::error::Error;
    let mut _463: anchor_lang::error::ErrorCode;
    let mut _464: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _465: anchor_lang::prelude::Pubkey;
    let mut _466: anchor_lang::prelude::Pubkey;
    let mut _467: instructions::admin::InitializePrelaunchOracle<'_>;
    let mut _468: anchor_lang::prelude::Signer<'_>;
    let mut _469: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _470: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _471: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _472: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _476: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _477: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _478: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _479: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _480: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _481: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _482: bool;
    let mut _483: bool;
    let mut _484: bool;
    let mut _485: bool;
    let mut _486: bool;
    let mut _487: bool;
    let mut _488: bool;
    let mut _489: bool;
    let mut _490: bool;
    let mut _491: bool;
    let mut _492: bool;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: state::oracle::PrelaunchOracleParams;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializePrelaunchOracleBumps>>::try_accounts::__Args;
        scope 2 {
            debug params => _7;
            let _20: anchor_lang::prelude::Signer<'_>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug admin => _20;
                let _41: &anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug prelaunch_oracle => _41;
                    let _50: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 13 {
                        debug state => _50;
                        let _65: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                        scope 18 {
                            debug rent => _65;
                            let _80: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                            scope 23 {
                                debug system_program => _80;
                                let _95: anchor_lang::prelude::Rent;
                                let _99: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                let _102: anchor_lang::prelude::Rent;
                                scope 28 {
                                    debug __anchor_rent => _95;
                                    let _103: anchor_lang::prelude::Pubkey;
                                    let _104: u8;
                                    scope 33 {
                                        debug __pda_address => _103;
                                        debug __bump => _104;
                                        let _136: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
                                        let _137: &anchor_lang::prelude::AccountInfo<'_>;
                                        scope 34 {
                                            debug prelaunch_oracle => _136;
                                            let _433: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _436: usize;
                                            let _451: anchor_lang::prelude::Pubkey;
                                            scope 72 {
                                                debug residual => _433;
                                                scope 73 {
                                                }
                                            }
                                            scope 74 {
                                                debug val => _436;
                                                scope 75 {
                                                }
                                            }
                                            scope 76 {
                                                debug my_key => _451;
                                                let _454: anchor_lang::prelude::Pubkey;
                                                scope 77 {
                                                    debug target_key => _454;
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug actual_field => _137;
                                            let _140: &anchor_lang::prelude::Pubkey;
                                            scope 36 {
                                                debug actual_owner => _140;
                                                let _141: usize;
                                                scope 37 {
                                                    debug space => _141;
                                                    let _142: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
                                                    let _149: u64;
                                                    let _364: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
                                                    let _365: anchor_lang::error::Error;
                                                    let mut _475: &&anchor_lang::prelude::Pubkey;
                                                    scope 38 {
                                                        debug pa => _142;
                                                        let _397: u64;
                                                        scope 71 {
                                                            debug required_lamports => _397;
                                                        }
                                                    }
                                                    scope 39 {
                                                        debug __current_lamports => _149;
                                                        let _154: usize;
                                                        let _235: u64;
                                                        let _355: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
                                                        let _356: anchor_lang::error::Error;
                                                        let mut _473: &anchor_lang::error::ErrorCode;
                                                        let mut _474: &anchor_lang::error::ErrorCode;
                                                        scope 40 {
                                                            debug space => _154;
                                                            let _155: u64;
                                                            scope 41 {
                                                                debug lamports => _155;
                                                                let _158: anchor_lang::system_program::CreateAccount<'_>;
                                                                scope 42 {
                                                                    debug cpi_accounts => _158;
                                                                    let _163: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                    scope 43 {
                                                                        debug cpi_context => _163;
                                                                        let _202: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _205: ();
                                                                        scope 44 {
                                                                            debug residual => _202;
                                                                            scope 45 {
                                                                            }
                                                                        }
                                                                        scope 46 {
                                                                            debug val => _205;
                                                                            scope 47 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 48 {
                                                            debug required_lamports => _235;
                                                            let _244: anchor_lang::system_program::Transfer<'_>;
                                                            let _263: anchor_lang::system_program::Allocate<'_>;
                                                            scope 49 {
                                                                debug cpi_accounts => _244;
                                                                let _249: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                scope 50 {
                                                                    debug cpi_context => _249;
                                                                    let _259: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _262: ();
                                                                    scope 51 {
                                                                        debug residual => _259;
                                                                        scope 52 {
                                                                        }
                                                                    }
                                                                    scope 53 {
                                                                        debug val => _262;
                                                                        scope 54 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug cpi_accounts => _263;
                                                                let _266: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                scope 56 {
                                                                    debug cpi_context => _266;
                                                                    let _303: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _306: ();
                                                                    let _307: anchor_lang::system_program::Assign<'_>;
                                                                    scope 57 {
                                                                        debug residual => _303;
                                                                        scope 58 {
                                                                        }
                                                                    }
                                                                    scope 59 {
                                                                        debug val => _306;
                                                                        scope 60 {
                                                                        }
                                                                    }
                                                                    scope 61 {
                                                                        debug cpi_accounts => _307;
                                                                        let _310: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                        scope 62 {
                                                                            debug cpi_context => _310;
                                                                            let _346: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                            let _349: ();
                                                                            scope 63 {
                                                                                debug residual => _346;
                                                                                scope 64 {
                                                                                }
                                                                            }
                                                                            scope 65 {
                                                                                debug val => _349;
                                                                                scope 66 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug val => _355;
                                                        }
                                                        scope 68 {
                                                            debug e => _356;
                                                        }
                                                    }
                                                    scope 69 {
                                                        debug val => _364;
                                                    }
                                                    scope 70 {
                                                        debug e => _365;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _99;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _102;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _91;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _94;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _76;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _79;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _61;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _64;
                        scope 17 {
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _492 = const false;
        _491 = const false;
        _490 = const false;
        _489 = const false;
        _488 = const false;
        _487 = const false;
        _486 = const false;
        _485 = const false;
        _484 = const false;
        _483 = const false;
        _482 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, InitializePrelaunchOracleBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
        _10 = std::result::Result::<<admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, InitializePrelaunchOracleBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18}>(move _11, move _14) -> [return: bb2, unwind: bb229];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, InitializePrelaunchOracleBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::admin::InitializePrelaunchOracle<'info> as anchor_lang::Accounts<'info, instructions::admin::InitializePrelaunchOracleBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: state::oracle::PrelaunchOracleParams);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializePrelaunchOracleBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb220;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
        _22 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18}>(move _23, move _29) -> [return: bb9, unwind: bb229];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb229];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _20 = move _34;
        StorageDead(_34);
        _493 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _476 = deref_copy (*_2);
        _37 = &(*_476);
        _36 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _37) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb261];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _541 = discriminant(_21);
        StorageDead(_21);
        goto -> bb219;
    }

    bb14: {
        switchInt(move _36) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = AccountNotEnoughKeys;
        _39 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _39);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb219;
    }

    bb17: {
        StorageDead(_37);
        _35 = const ();
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        _477 = deref_copy (*_2);
        _43 = Len((*_477));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb18, unwind continue];
    }

    bb18: {
        _478 = deref_copy (*_2);
        _41 = &(*_478)[_42];
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _479 = deref_copy (*_2);
        _48 = &(*_479);
        StorageLive(_49);
        _49 = RangeFrom::<usize> { start: const 1_usize };
        _47 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _48, move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = &(*_47);
        _45 = &(*_46);
        (*_2) = move _45;
        StorageDead(_45);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializePrelaunchOracleBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
        _52 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18}>(move _53, move _59) -> [return: bb21, unwind: bb229];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb229];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _50 = move _64;
        StorageDead(_64);
        _495 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializePrelaunchOracleBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind: bb228];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb260];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _539 = discriminant(_51);
        StorageDead(_51);
        goto -> bb218;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
        _67 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18}>(move _68, move _74) -> [return: bb27, unwind: bb228];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb228];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _65 = move _79;
        StorageDead(_79);
        _497 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializePrelaunchOracleBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb228];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb259];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _537 = discriminant(_66);
        StorageDead(_66);
        goto -> bb217;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18};
        _82 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:5471:10: 5471:18}>(move _83, move _89) -> [return: bb33, unwind: bb228];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb228];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _80 = move _94;
        StorageDead(_94);
        _499 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind: bb228];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb258];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _535 = discriminant(_81);
        StorageDead(_81);
        goto -> bb216;
    }

    bb38: {
        _96 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _97) -> [return: bb39, unwind: bb228];
    }

    bb39: {
        StorageDead(_97);
        _98 = discriminant(_96);
        switchInt(move _98) -> [0: bb40, 1: bb41, otherwise: bb5];
    }

    bb40: {
        StorageLive(_102);
        _102 = ((_96 as Continue).0: anchor_lang::prelude::Rent);
        _95 = _102;
        StorageDead(_102);
        _501 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = const b"prelaunch_oracle";
        _112 = &(*_113);
        _111 = <[u8; 16] as AsRef<[u8]>>::as_ref(move _112) -> [return: bb43, unwind: bb228];
    }

    bb41: {
        StorageLive(_99);
        _99 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_101);
        _101 = move _99;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _101) -> [return: bb42, unwind: bb257];
    }

    bb42: {
        StorageDead(_101);
        StorageDead(_99);
        _533 = discriminant(_96);
        StorageDead(_96);
        goto -> bb215;
    }

    bb43: {
        _110 = &(*_111);
        StorageDead(_112);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = (_7.0: u16);
        _117 = core::num::<impl u16>::to_le_bytes(move _118) -> [return: bb44, unwind: bb228];
    }

    bb44: {
        _116 = &_117;
        StorageDead(_118);
        _115 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _116) -> [return: bb45, unwind: bb228];
    }

    bb45: {
        _114 = &(*_115);
        StorageDead(_116);
        _109 = [move _110, move _114];
        StorageDead(_114);
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = move _107 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_107);
        StorageLive(_119);
        _119 = &(*_1);
        _105 = anchor_lang::prelude::Pubkey::find_program_address(move _106, move _119) -> [return: bb46, unwind: bb228];
    }

    bb46: {
        StorageDead(_119);
        StorageDead(_106);
        StorageLive(_103);
        _103 = (_105.0: anchor_lang::prelude::Pubkey);
        StorageLive(_104);
        _104 = (_105.1: u8);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_105);
        StorageLive(_120);
        _120 = _104;
        ((*_4).0: u8) = move _120;
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &(*_41);
        _124 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _125) -> [return: bb47, unwind: bb228];
    }

    bb47: {
        _123 = &_124;
        StorageDead(_125);
        StorageLive(_126);
        _126 = &_103;
        _122 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _123, move _126) -> [return: bb48, unwind: bb228];
    }

    bb48: {
        switchInt(move _122) -> [0: bb54, otherwise: bb49];
    }

    bb49: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = ConstraintSeeds;
        _130 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _131) -> [return: bb50, unwind: bb228];
    }

    bb50: {
        StorageDead(_131);
        _129 = anchor_lang::error::Error::with_account_name::<&str>(move _130, const "prelaunch_oracle") -> [return: bb51, unwind: bb228];
    }

    bb51: {
        _492 = const true;
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &(*_41);
        _133 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _134) -> [return: bb52, unwind: bb256];
    }

    bb52: {
        StorageDead(_134);
        StorageLive(_135);
        _135 = _103;
        _132 = (move _133, move _135);
        StorageDead(_135);
        StorageDead(_133);
        _492 = const false;
        _128 = anchor_lang::error::Error::with_pubkeys(move _129, move _132) -> [return: bb53, unwind: bb256];
    }

    bb53: {
        StorageDead(_132);
        _492 = const false;
        StorageDead(_129);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _128);
        StorageDead(_128);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb214;
    }

    bb54: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_123);
        _121 = const ();
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_41;
        _138 = &(*_139);
        _137 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _138) -> [return: bb55, unwind: bb228];
    }

    bb55: {
        StorageDead(_138);
        StorageDead(_139);
        StorageLive(_140);
        _140 = ((*_137).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_141);
        _141 = const _;
        StorageLive(_142);
        StorageLive(_143);
        _143 = const false;
        switchInt(move _143) -> [0: bb58, otherwise: bb56];
    }

    bb56: {
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_140;
        StorageLive(_146);
        _475 = const _;
        _146 = &(*_475);
        _144 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _145, move _146) -> [return: bb57, unwind: bb228];
    }

    bb57: {
        switchInt(move _144) -> [0: bb138, otherwise: bb58];
    }

    bb58: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(*_41);
        _149 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _150) -> [return: bb59, unwind: bb228];
    }

    bb59: {
        StorageDead(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = _149;
        _152 = Eq(move _153, const 0_u64);
        switchInt(move _152) -> [0: bb77, otherwise: bb60];
    }

    bb60: {
        StorageDead(_153);
        StorageLive(_154);
        _154 = _141;
        StorageLive(_155);
        StorageLive(_156);
        _156 = &_95;
        StorageLive(_157);
        _157 = _154;
        _155 = anchor_lang::prelude::Rent::minimum_balance(move _156, move _157) -> [return: bb61, unwind: bb228];
    }

    bb61: {
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_20;
        _159 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _160) -> [return: bb62, unwind: bb228];
    }

    bb62: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &(*_41);
        _161 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _162) -> [return: bb63, unwind: bb227];
    }

    bb63: {
        StorageDead(_162);
        _491 = const true;
        _158 = anchor_lang::system_program::CreateAccount::<'_> { from: move _159, to: move _161 };
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_80;
        _164 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _165) -> [return: bb64, unwind: bb254];
    }

    bb64: {
        StorageDead(_165);
        StorageLive(_166);
        _491 = const false;
        _166 = move _158;
        _163 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _164, move _166) -> [return: bb65, unwind: bb254];
    }

    bb65: {
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _490 = const true;
        _171 = move _163;
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = const b"prelaunch_oracle";
        _182 = &(*_183);
        _181 = <[u8; 16] as AsRef<[u8]>>::as_ref(move _182) -> [return: bb66, unwind: bb252];
    }

    bb66: {
        StorageDead(_182);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = (_7.0: u16);
        _187 = core::num::<impl u16>::to_le_bytes(move _188) -> [return: bb67, unwind: bb252];
    }

    bb67: {
        _186 = &_187;
        StorageDead(_188);
        _185 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _186) -> [return: bb68, unwind: bb252];
    }

    bb68: {
        _184 = &(*_185);
        StorageDead(_186);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = _104;
        _193 = [move _194];
        _192 = &_193;
        StorageDead(_194);
        StorageLive(_195);
        _195 = RangeFull;
        _191 = <[u8; 1] as Index<RangeFull>>::index(move _192, move _195) -> [return: bb69, unwind: bb252];
    }

    bb69: {
        StorageDead(_195);
        StorageDead(_192);
        _190 = &(*_191);
        _189 = &(*_190);
        _180 = [move _181, move _184, move _189];
        _179 = &_180;
        StorageDead(_189);
        StorageDead(_184);
        StorageDead(_181);
        StorageLive(_196);
        _196 = RangeFull;
        _178 = <[&[u8]; 3] as Index<RangeFull>>::index(move _179, move _196) -> [return: bb70, unwind: bb252];
    }

    bb70: {
        StorageDead(_196);
        StorageDead(_179);
        _177 = &(*_178);
        _176 = &(*_177);
        _175 = [move _176];
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = move _173 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_173);
        _490 = const false;
        _170 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _171, move _172) -> [return: bb71, unwind: bb252];
    }

    bb71: {
        StorageDead(_172);
        _490 = const false;
        StorageDead(_171);
        StorageLive(_197);
        _197 = _155;
        StorageLive(_198);
        StorageLive(_199);
        _199 = _154;
        _198 = move _199 as u64 (IntToInt);
        StorageDead(_199);
        StorageLive(_200);
        _200 = &(*_1);
        _169 = anchor_lang::system_program::create_account(move _170, move _197, move _198, move _200) -> [return: bb72, unwind: bb254];
    }

    bb72: {
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_197);
        StorageDead(_170);
        _168 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _169) -> [return: bb73, unwind: bb254];
    }

    bb73: {
        StorageDead(_169);
        _201 = discriminant(_168);
        switchInt(move _201) -> [0: bb74, 1: bb75, otherwise: bb5];
    }

    bb74: {
        StorageLive(_205);
        _205 = ((_168 as Continue).0: ());
        _167 = _205;
        StorageDead(_205);
        _503 = discriminant(_168);
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_168);
        StorageDead(_167);
        _151 = const ();
        StorageDead(_163);
        _491 = const false;
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb133;
    }

    bb75: {
        StorageLive(_202);
        _202 = move ((_168 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_204);
        _204 = move _202;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _204) -> [return: bb76, unwind: bb250];
    }

    bb76: {
        StorageDead(_204);
        StorageDead(_202);
        _531 = discriminant(_168);
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_163);
        _491 = const false;
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb210;
    }

    bb77: {
        StorageDead(_153);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_20;
        _209 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _210) -> [return: bb78, unwind: bb228];
    }

    bb78: {
        _208 = &_209;
        StorageDead(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &(*_41);
        _212 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _213) -> [return: bb79, unwind: bb228];
    }

    bb79: {
        _211 = &_212;
        StorageDead(_213);
        _207 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _208, move _211) -> [return: bb80, unwind: bb228];
    }

    bb80: {
        switchInt(move _207) -> [0: bb89, otherwise: bb81];
    }

    bb81: {
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _474 = const _;
        _219 = &(*_474);
        _218 = anchor_lang::error::ErrorCode::name(move _219) -> [return: bb82, unwind: bb228];
    }

    bb82: {
        StorageDead(_219);
        StorageLive(_221);
        StorageLive(_222);
        _222 = TryingToInitPayerAsProgramAccount;
        _221 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _222) -> [return: bb83, unwind: bb226];
    }

    bb83: {
        StorageDead(_222);
        StorageLive(_223);
        StorageLive(_224);
        _473 = const _;
        _224 = &(*_473);
        _223 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _224) -> [return: bb84, unwind: bb226];
    }

    bb84: {
        StorageDead(_224);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 5471_u32 };
        _227 = anchor_lang::error::ErrorOrigin::Source(move _228);
        StorageDead(_228);
        _226 = Option::<ErrorOrigin>::Some(move _227);
        StorageDead(_227);
        StorageLive(_229);
        _229 = Option::<ComparedValues>::None;
        _217 = anchor_lang::error::AnchorError { error_name: move _218, error_code_number: move _221, error_msg: move _223, error_origin: move _226, compared_values: move _229 };
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_218);
        _216 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _217) -> [return: bb85, unwind: bb228];
    }

    bb85: {
        _489 = const true;
        StorageDead(_217);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &_20;
        _231 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _232) -> [return: bb86, unwind: bb249];
    }

    bb86: {
        StorageDead(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = &(*_41);
        _233 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _234) -> [return: bb87, unwind: bb249];
    }

    bb87: {
        StorageDead(_234);
        _230 = (move _231, move _233);
        StorageDead(_233);
        StorageDead(_231);
        _489 = const false;
        _215 = anchor_lang::error::Error::with_pubkeys(move _216, move _230) -> [return: bb88, unwind: bb249];
    }

    bb88: {
        StorageDead(_230);
        _489 = const false;
        StorageDead(_216);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _215);
        StorageDead(_215);
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb210;
    }

    bb89: {
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_208);
        _206 = const ();
        StorageDead(_207);
        StorageDead(_206);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &_95;
        StorageLive(_239);
        _239 = _141;
        _237 = anchor_lang::prelude::Rent::minimum_balance(move _238, move _239) -> [return: bb90, unwind: bb228];
    }

    bb90: {
        StorageDead(_239);
        StorageDead(_238);
        _236 = <u64 as Ord>::max(move _237, const 1_u64) -> [return: bb91, unwind: bb228];
    }

    bb91: {
        StorageDead(_237);
        StorageLive(_240);
        _240 = _149;
        _235 = core::num::<impl u64>::saturating_sub(move _236, move _240) -> [return: bb92, unwind: bb228];
    }

    bb92: {
        StorageDead(_240);
        StorageDead(_236);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = _235;
        _242 = Gt(move _243, const 0_u64);
        switchInt(move _242) -> [0: bb103, otherwise: bb93];
    }

    bb93: {
        StorageDead(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_20;
        _245 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _246) -> [return: bb94, unwind: bb228];
    }

    bb94: {
        StorageDead(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &(*_41);
        _247 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _248) -> [return: bb95, unwind: bb225];
    }

    bb95: {
        StorageDead(_248);
        _488 = const true;
        _244 = anchor_lang::system_program::Transfer::<'_> { from: move _245, to: move _247 };
        StorageDead(_247);
        StorageDead(_245);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &_80;
        _250 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _251) -> [return: bb96, unwind: bb247];
    }

    bb96: {
        StorageDead(_251);
        StorageLive(_252);
        _488 = const false;
        _252 = move _244;
        _249 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _250, move _252) -> [return: bb97, unwind: bb247];
    }

    bb97: {
        StorageDead(_252);
        StorageDead(_250);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = move _249;
        StorageLive(_257);
        _257 = _235;
        _255 = anchor_lang::system_program::transfer(move _256, move _257) -> [return: bb98, unwind: bb247];
    }

    bb98: {
        StorageDead(_257);
        StorageDead(_256);
        _254 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _255) -> [return: bb99, unwind: bb247];
    }

    bb99: {
        StorageDead(_255);
        _258 = discriminant(_254);
        switchInt(move _258) -> [0: bb100, 1: bb101, otherwise: bb5];
    }

    bb100: {
        StorageLive(_262);
        _262 = ((_254 as Continue).0: ());
        _253 = _262;
        StorageDead(_262);
        _505 = discriminant(_254);
        StorageDead(_254);
        StorageDead(_253);
        _241 = const ();
        StorageDead(_249);
        _488 = const false;
        StorageDead(_244);
        goto -> bb104;
    }

    bb101: {
        StorageLive(_259);
        _259 = move ((_254 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_261);
        _261 = move _259;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _261) -> [return: bb102, unwind: bb245];
    }

    bb102: {
        StorageDead(_261);
        StorageDead(_259);
        _529 = discriminant(_254);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_249);
        _488 = const false;
        StorageDead(_244);
        StorageDead(_242);
        StorageDead(_241);
        goto -> bb209;
    }

    bb103: {
        StorageDead(_243);
        _241 = const ();
        goto -> bb104;
    }

    bb104: {
        StorageDead(_242);
        StorageDead(_241);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _265 = &(*_41);
        _264 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _265) -> [return: bb105, unwind: bb228];
    }

    bb105: {
        StorageDead(_265);
        _487 = const true;
        _263 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _264 };
        StorageDead(_264);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &_80;
        _267 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _268) -> [return: bb106, unwind: bb244];
    }

    bb106: {
        StorageDead(_268);
        StorageLive(_269);
        _487 = const false;
        _269 = move _263;
        _266 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _267, move _269) -> [return: bb107, unwind: bb244];
    }

    bb107: {
        StorageDead(_269);
        StorageDead(_267);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        _486 = const true;
        _274 = move _266;
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = const b"prelaunch_oracle";
        _285 = &(*_286);
        _284 = <[u8; 16] as AsRef<[u8]>>::as_ref(move _285) -> [return: bb108, unwind: bb242];
    }

    bb108: {
        StorageDead(_285);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = (_7.0: u16);
        _290 = core::num::<impl u16>::to_le_bytes(move _291) -> [return: bb109, unwind: bb242];
    }

    bb109: {
        _289 = &_290;
        StorageDead(_291);
        _288 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _289) -> [return: bb110, unwind: bb242];
    }

    bb110: {
        _287 = &(*_288);
        StorageDead(_289);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = _104;
        _296 = [move _297];
        _295 = &_296;
        StorageDead(_297);
        StorageLive(_298);
        _298 = RangeFull;
        _294 = <[u8; 1] as Index<RangeFull>>::index(move _295, move _298) -> [return: bb111, unwind: bb242];
    }

    bb111: {
        StorageDead(_298);
        StorageDead(_295);
        _293 = &(*_294);
        _292 = &(*_293);
        _283 = [move _284, move _287, move _292];
        _282 = &_283;
        StorageDead(_292);
        StorageDead(_287);
        StorageDead(_284);
        StorageLive(_299);
        _299 = RangeFull;
        _281 = <[&[u8]; 3] as Index<RangeFull>>::index(move _282, move _299) -> [return: bb112, unwind: bb242];
    }

    bb112: {
        StorageDead(_299);
        StorageDead(_282);
        _280 = &(*_281);
        _279 = &(*_280);
        _278 = [move _279];
        StorageDead(_279);
        _277 = &_278;
        _276 = &(*_277);
        _275 = move _276 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_276);
        _486 = const false;
        _273 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _274, move _275) -> [return: bb113, unwind: bb242];
    }

    bb113: {
        StorageDead(_275);
        _486 = const false;
        StorageDead(_274);
        StorageLive(_300);
        StorageLive(_301);
        _301 = _141;
        _300 = move _301 as u64 (IntToInt);
        StorageDead(_301);
        _272 = anchor_lang::system_program::allocate(move _273, move _300) -> [return: bb114, unwind: bb244];
    }

    bb114: {
        StorageDead(_300);
        StorageDead(_273);
        _271 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _272) -> [return: bb115, unwind: bb244];
    }

    bb115: {
        StorageDead(_272);
        _302 = discriminant(_271);
        switchInt(move _302) -> [0: bb116, 1: bb117, otherwise: bb5];
    }

    bb116: {
        StorageLive(_306);
        _306 = ((_271 as Continue).0: ());
        _270 = _306;
        StorageDead(_306);
        _507 = discriminant(_271);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_271);
        StorageDead(_270);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = &(*_41);
        _308 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _309) -> [return: bb119, unwind: bb244];
    }

    bb117: {
        StorageLive(_303);
        _303 = move ((_271 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_305);
        _305 = move _303;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _305) -> [return: bb118, unwind: bb240];
    }

    bb118: {
        StorageDead(_305);
        StorageDead(_303);
        _527 = discriminant(_271);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_293);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_283);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_271);
        StorageDead(_270);
        goto -> bb208;
    }

    bb119: {
        StorageDead(_309);
        _485 = const true;
        _307 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _308 };
        StorageDead(_308);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &_80;
        _311 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _312) -> [return: bb120, unwind: bb239];
    }

    bb120: {
        StorageDead(_312);
        StorageLive(_313);
        _485 = const false;
        _313 = move _307;
        _310 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _311, move _313) -> [return: bb121, unwind: bb239];
    }

    bb121: {
        StorageDead(_313);
        StorageDead(_311);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _484 = const true;
        _318 = move _310;
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        _330 = const b"prelaunch_oracle";
        _329 = &(*_330);
        _328 = <[u8; 16] as AsRef<[u8]>>::as_ref(move _329) -> [return: bb122, unwind: bb237];
    }

    bb122: {
        StorageDead(_329);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = (_7.0: u16);
        _334 = core::num::<impl u16>::to_le_bytes(move _335) -> [return: bb123, unwind: bb237];
    }

    bb123: {
        _333 = &_334;
        StorageDead(_335);
        _332 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _333) -> [return: bb124, unwind: bb237];
    }

    bb124: {
        _331 = &(*_332);
        StorageDead(_333);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = _104;
        _340 = [move _341];
        _339 = &_340;
        StorageDead(_341);
        StorageLive(_342);
        _342 = RangeFull;
        _338 = <[u8; 1] as Index<RangeFull>>::index(move _339, move _342) -> [return: bb125, unwind: bb237];
    }

    bb125: {
        StorageDead(_342);
        StorageDead(_339);
        _337 = &(*_338);
        _336 = &(*_337);
        _327 = [move _328, move _331, move _336];
        _326 = &_327;
        StorageDead(_336);
        StorageDead(_331);
        StorageDead(_328);
        StorageLive(_343);
        _343 = RangeFull;
        _325 = <[&[u8]; 3] as Index<RangeFull>>::index(move _326, move _343) -> [return: bb126, unwind: bb237];
    }

    bb126: {
        StorageDead(_343);
        StorageDead(_326);
        _324 = &(*_325);
        _323 = &(*_324);
        _322 = [move _323];
        StorageDead(_323);
        _321 = &_322;
        _320 = &(*_321);
        _319 = move _320 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_320);
        _484 = const false;
        _317 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _318, move _319) -> [return: bb127, unwind: bb237];
    }

    bb127: {
        StorageDead(_319);
        _484 = const false;
        StorageDead(_318);
        StorageLive(_344);
        _344 = &(*_1);
        _316 = anchor_lang::system_program::assign(move _317, move _344) -> [return: bb128, unwind: bb239];
    }

    bb128: {
        StorageDead(_344);
        StorageDead(_317);
        _315 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _316) -> [return: bb129, unwind: bb239];
    }

    bb129: {
        StorageDead(_316);
        _345 = discriminant(_315);
        switchInt(move _345) -> [0: bb130, 1: bb131, otherwise: bb5];
    }

    bb130: {
        StorageLive(_349);
        _349 = ((_315 as Continue).0: ());
        _314 = _349;
        StorageDead(_349);
        _509 = discriminant(_315);
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_315);
        StorageDead(_314);
        _151 = const ();
        StorageDead(_310);
        _485 = const false;
        StorageDead(_307);
        StorageDead(_266);
        _487 = const false;
        StorageDead(_263);
        StorageDead(_235);
        goto -> bb133;
    }

    bb131: {
        StorageLive(_346);
        _346 = move ((_315 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_348);
        _348 = move _346;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _348) -> [return: bb132, unwind: bb235];
    }

    bb132: {
        StorageDead(_348);
        StorageDead(_346);
        _525 = discriminant(_315);
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_337);
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_324);
        StorageDead(_322);
        StorageDead(_321);
        StorageDead(_315);
        StorageDead(_314);
        StorageDead(_310);
        _485 = const false;
        StorageDead(_307);
        goto -> bb208;
    }

    bb133: {
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_1);
        StorageLive(_352);
        StorageLive(_353);
        _353 = &_41;
        _480 = deref_copy (*_353);
        _352 = &(*_480);
        _350 = anchor_lang::prelude::AccountLoader::<'_, PrelaunchOracle>::try_from_unchecked(move _351, move _352) -> [return: bb134, unwind: bb228];
    }

    bb134: {
        StorageDead(_352);
        StorageDead(_351);
        _354 = discriminant(_350);
        switchInt(move _354) -> [0: bb136, 1: bb135, otherwise: bb5];
    }

    bb135: {
        StorageLive(_356);
        _356 = move ((_350 as Err).0: anchor_lang::error::Error);
        StorageLive(_358);
        StorageLive(_359);
        _359 = move _356;
        _358 = anchor_lang::error::Error::with_account_name::<&str>(move _359, const "prelaunch_oracle") -> [return: bb137, unwind: bb234];
    }

    bb136: {
        StorageLive(_355);
        _355 = move ((_350 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>);
        _142 = move _355;
        StorageDead(_355);
        StorageDead(_149);
        _511 = discriminant(_350);
        StorageDead(_353);
        StorageDead(_350);
        goto -> bb143;
    }

    bb137: {
        StorageDead(_359);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _358);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_149);
        _523 = discriminant(_350);
        StorageDead(_353);
        StorageDead(_350);
        goto -> bb211;
    }

    bb138: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &_41;
        _481 = deref_copy (*_362);
        _361 = &(*_481);
        _360 = anchor_lang::prelude::AccountLoader::<'_, PrelaunchOracle>::try_from(move _361) -> [return: bb139, unwind: bb228];
    }

    bb139: {
        StorageDead(_361);
        _363 = discriminant(_360);
        switchInt(move _363) -> [0: bb141, 1: bb140, otherwise: bb5];
    }

    bb140: {
        StorageLive(_365);
        _365 = move ((_360 as Err).0: anchor_lang::error::Error);
        StorageLive(_367);
        StorageLive(_368);
        _368 = move _365;
        _367 = anchor_lang::error::Error::with_account_name::<&str>(move _368, const "prelaunch_oracle") -> [return: bb142, unwind: bb233];
    }

    bb141: {
        StorageLive(_364);
        _364 = move ((_360 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>);
        _142 = move _364;
        StorageDead(_364);
        _513 = discriminant(_360);
        StorageDead(_362);
        StorageDead(_360);
        goto -> bb143;
    }

    bb142: {
        StorageDead(_368);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _367);
        StorageDead(_367);
        StorageDead(_365);
        _521 = discriminant(_360);
        StorageDead(_362);
        StorageDead(_360);
        goto -> bb211;
    }

    bb143: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_369);
        StorageLive(_370);
        _370 = const false;
        switchInt(move _370) -> [0: bb167, otherwise: bb144];
    }

    bb144: {
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        _373 = _141;
        StorageLive(_374);
        StorageLive(_375);
        _375 = &(*_137);
        _374 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _375) -> [return: bb145, unwind: bb228];
    }

    bb145: {
        StorageDead(_375);
        _372 = Ne(move _373, move _374);
        switchInt(move _372) -> [0: bb151, otherwise: bb146];
    }

    bb146: {
        StorageDead(_374);
        StorageDead(_373);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        _380 = ConstraintSpace;
        _379 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _380) -> [return: bb147, unwind: bb228];
    }

    bb147: {
        StorageDead(_380);
        _378 = anchor_lang::error::Error::with_account_name::<&str>(move _379, const "prelaunch_oracle") -> [return: bb148, unwind: bb228];
    }

    bb148: {
        _483 = const true;
        StorageDead(_379);
        StorageLive(_381);
        StorageLive(_382);
        _382 = _141;
        StorageLive(_383);
        StorageLive(_384);
        _384 = &(*_137);
        _383 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _384) -> [return: bb149, unwind: bb232];
    }

    bb149: {
        StorageDead(_384);
        _381 = (move _382, move _383);
        StorageDead(_383);
        StorageDead(_382);
        _483 = const false;
        _377 = anchor_lang::error::Error::with_values::<usize, usize>(move _378, move _381) -> [return: bb150, unwind: bb232];
    }

    bb150: {
        StorageDead(_381);
        _483 = const false;
        StorageDead(_378);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _377);
        StorageDead(_377);
        StorageDead(_372);
        StorageDead(_371);
        goto -> bb207;
    }

    bb151: {
        StorageDead(_374);
        StorageDead(_373);
        _371 = const ();
        StorageDead(_372);
        StorageDead(_371);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = &_140;
        StorageLive(_388);
        _388 = &_1;
        _386 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _387, move _388) -> [return: bb152, unwind: bb228];
    }

    bb152: {
        switchInt(move _386) -> [0: bb157, otherwise: bb153];
    }

    bb153: {
        StorageDead(_388);
        StorageDead(_387);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = ConstraintOwner;
        _392 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _393) -> [return: bb154, unwind: bb228];
    }

    bb154: {
        StorageDead(_393);
        _391 = anchor_lang::error::Error::with_account_name::<&str>(move _392, const "prelaunch_oracle") -> [return: bb155, unwind: bb228];
    }

    bb155: {
        StorageDead(_392);
        StorageLive(_394);
        StorageLive(_395);
        _395 = (*_140);
        StorageLive(_396);
        _396 = (*_1);
        _394 = (move _395, move _396);
        StorageDead(_396);
        StorageDead(_395);
        _390 = anchor_lang::error::Error::with_pubkeys(move _391, move _394) -> [return: bb156, unwind: bb228];
    }

    bb156: {
        StorageDead(_394);
        StorageDead(_391);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _390);
        StorageDead(_390);
        StorageDead(_386);
        StorageDead(_385);
        goto -> bb207;
    }

    bb157: {
        StorageDead(_388);
        StorageDead(_387);
        _385 = const ();
        StorageDead(_386);
        StorageDead(_385);
        StorageLive(_397);
        StorageLive(_398);
        _398 = &_95;
        StorageLive(_399);
        _399 = _141;
        _397 = anchor_lang::prelude::Rent::minimum_balance(move _398, move _399) -> [return: bb158, unwind: bb228];
    }

    bb158: {
        StorageDead(_399);
        StorageDead(_398);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        _404 = &_142;
        _403 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _404) -> [return: bb159, unwind: bb228];
    }

    bb159: {
        _402 = &_403;
        StorageDead(_404);
        _401 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _402) -> [return: bb160, unwind: bb224];
    }

    bb160: {
        StorageDead(_402);
        StorageLive(_405);
        _405 = _397;
        _400 = Lt(move _401, move _405);
        switchInt(move _400) -> [0: bb165, otherwise: bb161];
    }

    bb161: {
        StorageDead(_405);
        drop(_403) -> [return: bb162, unwind: bb228];
    }

    bb162: {
        StorageDead(_403);
        StorageDead(_401);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = ConstraintRentExempt;
        _408 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _409) -> [return: bb163, unwind: bb228];
    }

    bb163: {
        StorageDead(_409);
        _407 = anchor_lang::error::Error::with_account_name::<&str>(move _408, const "prelaunch_oracle") -> [return: bb164, unwind: bb228];
    }

    bb164: {
        StorageDead(_408);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _407);
        StorageDead(_407);
        StorageDead(_400);
        StorageDead(_397);
        goto -> bb207;
    }

    bb165: {
        StorageDead(_405);
        drop(_403) -> [return: bb166, unwind: bb228];
    }

    bb166: {
        StorageDead(_403);
        StorageDead(_401);
        _369 = const ();
        StorageDead(_400);
        StorageDead(_397);
        goto -> bb168;
    }

    bb167: {
        _369 = const ();
        goto -> bb168;
    }

    bb168: {
        StorageDead(_370);
        StorageDead(_369);
        _136 = move _142;
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_137);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_136;
        _413 = &(*_414);
        _412 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _413) -> [return: bb169, unwind: bb228];
    }

    bb169: {
        StorageDead(_413);
        _411 = ((*_412).6: bool);
        switchInt(move _411) -> [0: bb170, otherwise: bb173];
    }

    bb170: {
        StorageDead(_414);
        StorageDead(_412);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = ConstraintMut;
        _417 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _418) -> [return: bb171, unwind: bb228];
    }

    bb171: {
        StorageDead(_418);
        _416 = anchor_lang::error::Error::with_account_name::<&str>(move _417, const "prelaunch_oracle") -> [return: bb172, unwind: bb228];
    }

    bb172: {
        StorageDead(_417);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _416);
        StorageDead(_416);
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb213;
    }

    bb173: {
        StorageDead(_414);
        StorageDead(_412);
        _410 = const ();
        StorageDead(_411);
        StorageDead(_410);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_95;
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &_136;
        _424 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _425) -> [return: bb174, unwind: bb228];
    }

    bb174: {
        _423 = &_424;
        StorageDead(_425);
        _422 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _423) -> [return: bb175, unwind: bb223];
    }

    bb175: {
        StorageDead(_423);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &_136;
        _430 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _431) -> [return: bb176, unwind: bb223];
    }

    bb176: {
        _429 = &_430;
        StorageDead(_431);
        _428 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _429) -> [return: bb177, unwind: bb222];
    }

    bb177: {
        StorageDead(_429);
        _427 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _428) -> [return: bb178, unwind: bb222];
    }

    bb178: {
        _482 = const true;
        StorageDead(_428);
        _432 = discriminant(_427);
        switchInt(move _432) -> [0: bb179, 1: bb180, otherwise: bb5];
    }

    bb179: {
        StorageLive(_436);
        _436 = ((_427 as Continue).0: usize);
        _426 = _436;
        StorageDead(_436);
        _420 = anchor_lang::prelude::Rent::is_exempt(move _421, move _422, move _426) -> [return: bb182, unwind: bb230];
    }

    bb180: {
        StorageLive(_433);
        _433 = move ((_427 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_435);
        _435 = move _433;
        _0 = <std::result::Result<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _435) -> [return: bb181, unwind: bb230];
    }

    bb181: {
        StorageDead(_435);
        StorageDead(_433);
        StorageDead(_426);
        StorageDead(_422);
        StorageDead(_421);
        _519 = discriminant(_427);
        drop(_430) -> [return: bb204, unwind: bb223];
    }

    bb182: {
        switchInt(move _420) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        StorageDead(_426);
        StorageDead(_422);
        StorageDead(_421);
        _515 = discriminant(_427);
        drop(_430) -> [return: bb189, unwind: bb223];
    }

    bb184: {
        StorageDead(_426);
        StorageDead(_422);
        StorageDead(_421);
        _517 = discriminant(_427);
        drop(_430) -> [return: bb185, unwind: bb223];
    }

    bb185: {
        StorageDead(_430);
        _482 = const false;
        StorageDead(_427);
        drop(_424) -> [return: bb186, unwind: bb228];
    }

    bb186: {
        StorageDead(_424);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        _440 = ConstraintRentExempt;
        _439 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _440) -> [return: bb187, unwind: bb228];
    }

    bb187: {
        StorageDead(_440);
        _438 = anchor_lang::error::Error::with_account_name::<&str>(move _439, const "prelaunch_oracle") -> [return: bb188, unwind: bb228];
    }

    bb188: {
        StorageDead(_439);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _438);
        StorageDead(_438);
        goto -> bb206;
    }

    bb189: {
        StorageDead(_430);
        _482 = const false;
        StorageDead(_427);
        drop(_424) -> [return: bb190, unwind: bb228];
    }

    bb190: {
        StorageDead(_424);
        _419 = const ();
        StorageDead(_420);
        StorageDead(_419);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = &_20;
        _444 = &(*_445);
        _443 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _444) -> [return: bb191, unwind: bb228];
    }

    bb191: {
        StorageDead(_444);
        _442 = ((*_443).6: bool);
        switchInt(move _442) -> [0: bb192, otherwise: bb195];
    }

    bb192: {
        StorageDead(_445);
        StorageDead(_443);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = ConstraintMut;
        _448 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _449) -> [return: bb193, unwind: bb228];
    }

    bb193: {
        StorageDead(_449);
        _447 = anchor_lang::error::Error::with_account_name::<&str>(move _448, const "admin") -> [return: bb194, unwind: bb228];
    }

    bb194: {
        StorageDead(_448);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _447);
        StorageDead(_447);
        StorageDead(_442);
        StorageDead(_441);
        goto -> bb213;
    }

    bb195: {
        StorageDead(_445);
        StorageDead(_443);
        _441 = const ();
        StorageDead(_442);
        StorageDead(_441);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _555 = (((_50.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _453 = &(*_555);
        _452 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _453) -> [return: bb196, unwind: bb228];
    }

    bb196: {
        StorageDead(_453);
        _451 = ((*_452).0: anchor_lang::prelude::Pubkey);
        StorageDead(_452);
        StorageLive(_454);
        StorageLive(_455);
        _455 = &_20;
        _454 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _455) -> [return: bb197, unwind: bb228];
    }

    bb197: {
        StorageDead(_455);
        StorageLive(_456);
        StorageLive(_457);
        _457 = &_451;
        StorageLive(_458);
        _458 = &_454;
        _456 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _457, move _458) -> [return: bb198, unwind: bb228];
    }

    bb198: {
        switchInt(move _456) -> [0: bb203, otherwise: bb199];
    }

    bb199: {
        StorageDead(_458);
        StorageDead(_457);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        _463 = ConstraintHasOne;
        _462 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _463) -> [return: bb200, unwind: bb228];
    }

    bb200: {
        StorageDead(_463);
        _461 = anchor_lang::error::Error::with_account_name::<&str>(move _462, const "state") -> [return: bb201, unwind: bb228];
    }

    bb201: {
        StorageDead(_462);
        StorageLive(_464);
        StorageLive(_465);
        _465 = _451;
        StorageLive(_466);
        _466 = _454;
        _464 = (move _465, move _466);
        StorageDead(_466);
        StorageDead(_465);
        _460 = anchor_lang::error::Error::with_pubkeys(move _461, move _464) -> [return: bb202, unwind: bb228];
    }

    bb202: {
        StorageDead(_464);
        StorageDead(_461);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Err(move _460);
        StorageDead(_460);
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_450);
        goto -> bb213;
    }

    bb203: {
        StorageDead(_458);
        StorageDead(_457);
        _450 = const ();
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_450);
        StorageLive(_467);
        StorageLive(_468);
        _468 = move _20;
        StorageLive(_469);
        _469 = move _136;
        StorageLive(_470);
        _470 = move _50;
        StorageLive(_471);
        _471 = move _65;
        StorageLive(_472);
        _472 = move _80;
        _467 = admin::InitializePrelaunchOracle::<'_> { admin: move _468, prelaunch_oracle: move _469, state: move _470, rent: move _471, system_program: move _472 };
        StorageDead(_472);
        StorageDead(_471);
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_468);
        _0 = std::result::Result::<admin::InitializePrelaunchOracle<'_>, anchor_lang::error::Error>::Ok(move _467);
        StorageDead(_467);
        StorageDead(_136);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb221;
    }

    bb204: {
        StorageDead(_430);
        _482 = const false;
        StorageDead(_427);
        drop(_424) -> [return: bb205, unwind: bb228];
    }

    bb205: {
        StorageDead(_424);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_420);
        StorageDead(_419);
        goto -> bb213;
    }

    bb207: {
        StorageDead(_370);
        StorageDead(_369);
        goto -> bb212;
    }

    bb208: {
        StorageDead(_266);
        _487 = const false;
        StorageDead(_263);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_235);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_137);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_136);
        goto -> bb214;
    }

    bb214: {
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb215;
    }

    bb215: {
        StorageDead(_95);
        goto -> bb216;
    }

    bb216: {
        StorageDead(_80);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_65);
        drop(_50) -> [return: bb218, unwind: bb229];
    }

    bb218: {
        StorageDead(_50);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_6);
        goto -> bb221;
    }

    bb221: {
        return;
    }

    bb222 (cleanup): {
        drop(_430) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_424) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        drop(_403) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        drop(_245) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        drop(_218) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb227 (cleanup): {
        drop(_159) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb228 (cleanup): {
        drop(_50) -> [return: bb229, unwind terminate(cleanup)];
    }

    bb229 (cleanup): {
        resume;
    }

    bb230 (cleanup): {
        _543 = discriminant(_427);
        goto -> bb222;
    }

    bb231 (cleanup): {
        drop(_378) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb232 (cleanup): {
        switchInt(_483) -> [0: bb228, otherwise: bb231];
    }

    bb233 (cleanup): {
        _544 = discriminant(_360);
        goto -> bb228;
    }

    bb234 (cleanup): {
        _545 = discriminant(_350);
        goto -> bb228;
    }

    bb235 (cleanup): {
        _546 = discriminant(_315);
        goto -> bb239;
    }

    bb236 (cleanup): {
        drop(_318) -> [return: bb239, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        switchInt(_484) -> [0: bb239, otherwise: bb236];
    }

    bb238 (cleanup): {
        drop(_307) -> [return: bb244, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        switchInt(_485) -> [0: bb244, otherwise: bb238];
    }

    bb240 (cleanup): {
        _547 = discriminant(_271);
        goto -> bb244;
    }

    bb241 (cleanup): {
        drop(_274) -> [return: bb244, unwind terminate(cleanup)];
    }

    bb242 (cleanup): {
        switchInt(_486) -> [0: bb244, otherwise: bb241];
    }

    bb243 (cleanup): {
        drop(_263) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        switchInt(_487) -> [0: bb228, otherwise: bb243];
    }

    bb245 (cleanup): {
        _548 = discriminant(_254);
        goto -> bb247;
    }

    bb246 (cleanup): {
        drop(_244) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb247 (cleanup): {
        switchInt(_488) -> [0: bb228, otherwise: bb246];
    }

    bb248 (cleanup): {
        drop(_216) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        switchInt(_489) -> [0: bb228, otherwise: bb248];
    }

    bb250 (cleanup): {
        _549 = discriminant(_168);
        goto -> bb254;
    }

    bb251 (cleanup): {
        drop(_171) -> [return: bb254, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        switchInt(_490) -> [0: bb254, otherwise: bb251];
    }

    bb253 (cleanup): {
        drop(_158) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb254 (cleanup): {
        switchInt(_491) -> [0: bb228, otherwise: bb253];
    }

    bb255 (cleanup): {
        drop(_129) -> [return: bb228, unwind terminate(cleanup)];
    }

    bb256 (cleanup): {
        switchInt(_492) -> [0: bb228, otherwise: bb255];
    }

    bb257 (cleanup): {
        _550 = discriminant(_96);
        goto -> bb228;
    }

    bb258 (cleanup): {
        _551 = discriminant(_81);
        goto -> bb228;
    }

    bb259 (cleanup): {
        _552 = discriminant(_66);
        goto -> bb228;
    }

    bb260 (cleanup): {
        _553 = discriminant(_51);
        goto -> bb229;
    }

    bb261 (cleanup): {
        _554 = discriminant(_21);
        goto -> bb229;
    }
}

alloc222 (size: 16, align: 1) {
    70 72 65 6c 61 75 6e 63 68 5f 6f 72 61 63 6c 65 │ prelaunch_oracle
}

alloc221 (size: 16, align: 1) {
    70 72 65 6c 61 75 6e 63 68 5f 6f 72 61 63 6c 65 │ prelaunch_oracle
}

alloc220 (size: 16, align: 1) {
    70 72 65 6c 61 75 6e 63 68 5f 6f 72 61 63 6c 65 │ prelaunch_oracle
}

alloc219 (size: 16, align: 1) {
    70 72 65 6c 61 75 6e 63 68 5f 6f 72 61 63 6c 65 │ prelaunch_oracle
}
