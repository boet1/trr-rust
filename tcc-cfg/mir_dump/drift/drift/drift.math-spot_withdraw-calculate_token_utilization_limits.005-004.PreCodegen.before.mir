// MIR for `calculate_token_utilization_limits` before PreCodegen

fn calculate_token_utilization_limits(_1: u128, _2: u128, _3: &SpotMarket) -> std::result::Result<(u128, u128), error::ErrorCode> {
    debug deposit_token_amount => _1;
    debug borrow_token_amount => _2;
    debug spot_market => _3;
    let mut _0: std::result::Result<(u128, u128), error::ErrorCode>;
    let _4: u128;
    let mut _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u32;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u128;
    let mut _14: u128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u64;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: u128;
    let mut _26: u128;
    let mut _27: u128;
    let mut _28: u128;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _30: std::result::Result<u128, error::ErrorCode>;
    let mut _31: u64;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: u128;
    let mut _37: bool;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: u128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: u128;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _48: std::result::Result<u128, error::ErrorCode>;
    let mut _49: u128;
    let mut _50: isize;
    let mut _52: !;
    let mut _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: u128;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: u128;
    let mut _62: u128;
    let mut _63: u128;
    let mut _64: u128;
    let mut _65: u128;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _67: std::result::Result<u128, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _76: std::result::Result<u128, error::ErrorCode>;
    let mut _77: u128;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _79: std::result::Result<u128, error::ErrorCode>;
    let mut _80: u128;
    let mut _81: u128;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: u128;
    let mut _93: u128;
    let mut _94: u128;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _96: std::result::Result<u128, error::ErrorCode>;
    let mut _97: u64;
    let mut _98: isize;
    let mut _100: !;
    let mut _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _103: (u128, u128);
    let mut _104: u128;
    let mut _105: u128;
    scope 1 {
        debug max_withdraw_utilization => _4;
        let mut _43: u128;
        let _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _54: u128;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: u128;
        scope 18 {
            debug min_deposit_tokens_for_utilization => _43;
            let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _73: u128;
            let mut _74: u128;
            let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _86: u128;
            let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _91: u128;
            scope 27 {
                debug residual => _70;
                scope 28 {
                }
            }
            scope 29 {
                debug val => _73;
                scope 30 {
                }
            }
            scope 31 {
                debug max_borrow_tokens_for_utilization => _74;
                let _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _102: u128;
                scope 40 {
                    debug residual => _99;
                    scope 41 {
                    }
                }
                scope 42 {
                    debug val => _102;
                    scope 43 {
                    }
                }
            }
            scope 32 {
                debug residual => _83;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _86;
                scope 35 {
                }
            }
            scope 36 {
                debug residual => _88;
                scope 37 {
                }
            }
            scope 38 {
                debug val => _91;
                scope 39 {
                }
            }
        }
        scope 19 {
            debug residual => _51;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _54;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _57;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _60;
            scope 26 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _22;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _25;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _33;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _36;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _39;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _42;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_3).38: u32);
        _7 = <u32 as Cast>::cast::<u128>(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: u128);
        _5 = _13;
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_3).21: u64);
        _19 = <u64 as Cast>::cast::<u128>(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb64;
    }

    bb7: {
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_18 as Continue).0: u128);
        _17 = _25;
        StorageDead(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = ((*_3).21: u64);
        _30 = <u64 as Cast>::cast::<u128>(move _31) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_5);
        goto -> bb63;
    }

    bb12: {
        StorageDead(_31);
        _29 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_36);
        _36 = ((_29 as Continue).0: u128);
        _28 = _36;
        StorageDead(_36);
        _27 = core::num::<impl u128>::saturating_sub(const _, move _28) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb62;
    }

    bb17: {
        StorageDead(_28);
        _37 = Eq(const 2_u128, const 0_u128);
        assert(!move _37, "attempt to divide `{}` by zero", _27) -> [success: bb18, unwind continue];
    }

    bb18: {
        _26 = Div(move _27, const 2_u128);
        StorageDead(_27);
        _16 = <u128 as SafeMath>::safe_add(move _17, move _26) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_26);
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_16);
        _38 = discriminant(_15);
        switchInt(move _38) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_15 as Continue).0: u128);
        _14 = _42;
        StorageDead(_42);
        _4 = <u128 as Ord>::max(move _5, move _14) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_39);
        _39 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb62;
    }

    bb24: {
        StorageDead(_14);
        StorageDead(_5);
        StorageDead(_29);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_6);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _2;
        _48 = <u128 as SafeMath>::safe_mul(move _49, const _) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_49);
        _47 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _48) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_48);
        _50 = discriminant(_47);
        switchInt(move _50) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_54);
        _54 = ((_47 as Continue).0: u128);
        _46 = _54;
        StorageDead(_54);
        StorageLive(_55);
        _55 = _4;
        _45 = <u128 as SafeMath>::safe_div(move _46, move _55) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_51);
        _51 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_53);
        _53 = _51;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _53) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb60;
    }

    bb30: {
        StorageDead(_55);
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_45);
        _56 = discriminant(_44);
        switchInt(move _56) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_60);
        _60 = ((_44 as Continue).0: u128);
        _43 = _60;
        StorageDead(_60);
        StorageDead(_47);
        StorageDead(_44);
        StorageLive(_61);
        StorageLive(_62);
        _62 = _43;
        StorageLive(_63);
        StorageLive(_64);
        _64 = _1;
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = ((*_3).17: u64);
        _67 = <u64 as Cast>::cast::<u128>(move _68) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_57);
        _57 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb60;
    }

    bb35: {
        StorageDead(_68);
        _66 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _67) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        _69 = discriminant(_66);
        switchInt(move _69) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_73);
        _73 = ((_66 as Continue).0: u128);
        _65 = _73;
        StorageDead(_73);
        _63 = core::num::<impl u128>::saturating_sub(move _64, move _65) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_70);
        _70 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_66);
        goto -> bb61;
    }

    bb40: {
        StorageDead(_65);
        StorageDead(_64);
        _61 = <u128 as Ord>::min(move _62, move _63) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_63);
        StorageDead(_62);
        _43 = move _61;
        StorageDead(_61);
        StorageDead(_66);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = _4;
        StorageLive(_81);
        _81 = _1;
        _79 = <u128 as SafeMath>::safe_mul(move _80, move _81) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_81);
        StorageDead(_80);
        _78 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _79) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_79);
        _82 = discriminant(_78);
        switchInt(move _82) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_86);
        _86 = ((_78 as Continue).0: u128);
        _77 = _86;
        StorageDead(_86);
        _76 = <u128 as SafeMath>::safe_div(move _77, const _) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_83);
        _83 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb58;
    }

    bb47: {
        StorageDead(_77);
        _75 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _76) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_76);
        _87 = discriminant(_75);
        switchInt(move _87) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_91);
        _91 = ((_75 as Continue).0: u128);
        _74 = _91;
        StorageDead(_91);
        StorageDead(_78);
        StorageDead(_75);
        StorageLive(_92);
        StorageLive(_93);
        _93 = _74;
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = ((*_3).17: u64);
        _96 = <u64 as Cast>::cast::<u128>(move _97) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_88);
        _88 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_90);
        StorageDead(_88);
        goto -> bb58;
    }

    bb52: {
        StorageDead(_97);
        _95 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _96) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_96);
        _98 = discriminant(_95);
        switchInt(move _98) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_102);
        _102 = ((_95 as Continue).0: u128);
        _94 = _102;
        StorageDead(_102);
        _92 = <u128 as Ord>::max(move _93, move _94) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_99);
        _99 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_101);
        _101 = _99;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _101) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_101);
        StorageDead(_99);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_95);
        goto -> bb59;
    }

    bb57: {
        StorageDead(_94);
        StorageDead(_93);
        _74 = move _92;
        StorageDead(_92);
        StorageDead(_95);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _43;
        StorageLive(_105);
        _105 = _74;
        _103 = (move _104, move _105);
        StorageDead(_105);
        StorageDead(_104);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _103);
        StorageDead(_103);
        StorageDead(_74);
        StorageDead(_43);
        StorageDead(_4);
        goto -> bb66;
    }

    bb58: {
        StorageDead(_78);
        StorageDead(_75);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_74);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_47);
        StorageDead(_44);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_43);
        goto -> bb65;
    }

    bb62: {
        StorageDead(_14);
        StorageDead(_5);
        StorageDead(_29);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_18);
        StorageDead(_15);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_6);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_4);
        goto -> bb66;
    }

    bb66: {
        return;
    }
}
