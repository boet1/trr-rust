// MIR for `keeper::handle_settle_multiple_pnls` after PreCodegen

fn keeper::handle_settle_multiple_pnls(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::SettlePNL<'_>>, _2: Vec<u16>, _3: settle_pnl_mode::SettlePnlMode) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_indexes => _2;
    debug mode => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _26: std::cell::RefMut<'_, state::user::User>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _29: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _30: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _31: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: instructions::optional_accounts::AccountMaps<'_>;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _42: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _43: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _44: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _45: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _46: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _48: &std::collections::BTreeSet<u16>;
    let _49: &std::collections::BTreeSet<u16>;
    let _50: std::collections::BTreeSet<u16>;
    let mut _51: &[u16];
    let _52: &[u16];
    let mut _53: &std::vec::Vec<u16>;
    let _54: &std::vec::Vec<u16>;
    let mut _55: &std::collections::BTreeSet<u16>;
    let _56: &std::collections::BTreeSet<u16>;
    let _57: std::collections::BTreeSet<u16>;
    let mut _58: u64;
    let mut _59: std::option::Option<state::state::OracleGuardRails>;
    let mut _60: state::state::OracleGuardRails;
    let mut _61: &state::state::State;
    let mut _62: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _70: std::result::Result<bool, error::ErrorCode>;
    let mut _71: &state::user::User;
    let _72: &state::user::User;
    let mut _73: &std::cell::RefMut<'_, state::user::User>;
    let mut _74: &state::perp_market_map::PerpMarketMap<'_>;
    let _75: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _76: &state::spot_market_map::SpotMarketMap<'_>;
    let _77: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _78: &mut state::oracle_map::OracleMap<'_>;
    let mut _79: &mut state::oracle_map::OracleMap<'_>;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _85: ();
    let mut _86: std::slice::Iter<'_, u16>;
    let mut _87: std::slice::Iter<'_, u16>;
    let mut _88: &[u16];
    let _89: &[u16];
    let mut _90: &std::vec::Vec<u16>;
    let mut _92: ();
    let _93: ();
    let mut _94: std::option::Option<&u16>;
    let mut _95: &mut std::slice::Iter<'_, u16>;
    let mut _96: &mut std::slice::Iter<'_, u16>;
    let mut _97: isize;
    let mut _98: !;
    let mut _101: &state::perp_market::MarketStatus;
    let _102: &state::perp_market::PerpMarket;
    let mut _103: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _104: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _106: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _107: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _108: &u16;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _114: &state::perp_market::MarketStatus;
    let _115: state::perp_market::MarketStatus;
    let mut _116: bool;
    let _117: ();
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _119: std::result::Result<(), anchor_lang::error::Error>;
    let mut _120: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _126: ();
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _128: std::result::Result<(), error::ErrorCode>;
    let mut _129: u16;
    let mut _130: &mut state::user::User;
    let mut _131: &mut state::user::User;
    let mut _132: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _133: &anchor_lang::prelude::Pubkey;
    let _134: &anchor_lang::prelude::Pubkey;
    let mut _135: &state::perp_market_map::PerpMarketMap<'_>;
    let _136: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _137: &state::spot_market_map::SpotMarketMap<'_>;
    let _138: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _139: &mut state::oracle_map::OracleMap<'_>;
    let mut _140: &mut state::oracle_map::OracleMap<'_>;
    let mut _141: &anchor_lang::prelude::Clock;
    let _142: &anchor_lang::prelude::Clock;
    let mut _143: &state::state::State;
    let _144: &state::state::State;
    let mut _145: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _151: ();
    let mut _152: &mut state::user::User;
    let mut _153: &mut state::user::User;
    let mut _154: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _155: u64;
    let _156: error::ErrorCode;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, error::ErrorCode>;
    let mut _158: std::result::Result<error::ErrorCode, error::ErrorCode>;
    let mut _159: std::result::Result<i128, error::ErrorCode>;
    let mut _160: u16;
    let mut _161: &state::perp_market_map::PerpMarketMap<'_>;
    let _162: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _163: &mut state::oracle_map::OracleMap<'_>;
    let mut _164: &mut state::oracle_map::OracleMap<'_>;
    let mut _165: &state::state::State;
    let _166: &state::state::State;
    let mut _167: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _168: &anchor_lang::prelude::Clock;
    let _169: &anchor_lang::prelude::Clock;
    let mut _170: {closure@programs/drift/src/instructions/keeper.rs:1026:18: 1026:21};
    let mut _171: isize;
    let mut _173: !;
    let mut _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _176: error::ErrorCode;
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, error::ErrorCode>;
    let mut _178: std::result::Result<error::ErrorCode, error::ErrorCode>;
    let mut _179: std::result::Result<(), error::ErrorCode>;
    let mut _180: u16;
    let mut _181: &mut state::user::User;
    let mut _182: &mut state::user::User;
    let mut _183: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _184: &anchor_lang::prelude::Pubkey;
    let _185: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _186: &anchor_lang::prelude::Signer<'_>;
    let mut _187: &anchor_lang::prelude::Pubkey;
    let _188: &anchor_lang::prelude::Pubkey;
    let mut _189: &state::perp_market_map::PerpMarketMap<'_>;
    let _190: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _191: &state::spot_market_map::SpotMarketMap<'_>;
    let _192: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _193: &mut state::oracle_map::OracleMap<'_>;
    let mut _194: &mut state::oracle_map::OracleMap<'_>;
    let mut _195: &anchor_lang::prelude::Clock;
    let _196: &anchor_lang::prelude::Clock;
    let mut _197: &state::state::State;
    let _198: &state::state::State;
    let mut _199: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _200: std::option::Option<bool>;
    let mut _201: bool;
    let mut _202: state::settle_pnl_mode::SettlePnlMode;
    let mut _203: {closure@programs/drift/src/instructions/keeper.rs:1041:18: 1041:21};
    let mut _204: isize;
    let mut _206: !;
    let mut _207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _210: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _211: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _212: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _213: isize;
    let mut _215: !;
    let mut _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _218: i64;
    let mut _219: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _220: std::result::Result<i64, error::ErrorCode>;
    let mut _221: &state::spot_market::SpotMarket;
    let _222: &state::spot_market::SpotMarket;
    let mut _223: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _224: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _225: u64;
    let mut _226: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _227: &anchor_spl::token_interface::TokenAccount;
    let _228: &anchor_spl::token_interface::TokenAccount;
    let mut _229: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _235: ();
    let mut _237: &mut instructions::keeper::SettlePNL<'_>;
    let mut _238: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _239: &mut instructions::keeper::SettlePNL<'_>;
    let mut _240: &mut instructions::keeper::SettlePNL<'_>;
    let mut _241: &mut instructions::keeper::SettlePNL<'_>;
    let mut _242: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _243: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _244: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _245: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _246: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _247: &mut instructions::keeper::SettlePNL<'_>;
    let mut _248: &anchor_lang::prelude::Pubkey;
    let mut _249: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _250: &mut instructions::keeper::SettlePNL<'_>;
    let mut _251: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _252: bool;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: isize;
    let mut _269: isize;
    let mut _270: isize;
    let mut _271: isize;
    let mut _272: isize;
    let mut _273: isize;
    let mut _274: isize;
    let mut _275: isize;
    let mut _276: isize;
    let mut _277: isize;
    let mut _278: isize;
    let mut _279: isize;
    let mut _280: isize;
    let mut _281: isize;
    let mut _282: isize;
    let mut _283: isize;
    let mut _284: isize;
    let mut _285: isize;
    let mut _286: isize;
    let mut _287: isize;
    let mut _288: isize;
    let mut _289: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _290: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _291: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _292: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _293: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _294: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _295: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _14;
        let _22: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _22;
            let _23: anchor_lang::prelude::Pubkey;
            scope 11 {
                debug user_key => _23;
                let _25: &mut std::cell::RefMut<'_, state::user::User>;
                let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _36: std::cell::RefMut<'_, state::user::User>;
                scope 12 {
                    debug user => _25;
                    let _37: state::perp_market_map::PerpMarketMap<'_>;
                    let _38: state::spot_market_map::SpotMarketMap<'_>;
                    let mut _39: state::oracle_map::OracleMap<'_>;
                    let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _67: instructions::optional_accounts::AccountMaps<'_>;
                    scope 17 {
                        debug perp_market_map => _37;
                        debug spot_market_map => _38;
                        debug oracle_map => _39;
                        let _68: bool;
                        let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _84: bool;
                        scope 22 {
                            debug meets_margin_requirement => _68;
                            let mut _91: std::slice::Iter<'_, u16>;
                            let _209: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            let _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _217: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            scope 27 {
                                debug iter => _91;
                                let _99: &u16;
                                scope 28 {
                                    debug market_index => _99;
                                    let _100: bool;
                                    let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _113: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                                    let mut _236: &state::perp_market::MarketStatus;
                                    scope 29 {
                                        debug market_in_settlement => _100;
                                        let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _125: ();
                                        let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _150: ();
                                        let _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _175: error::ErrorCode;
                                        let _205: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _208: error::ErrorCode;
                                        scope 34 {
                                            debug residual => _122;
                                            scope 35 {
                                            }
                                        }
                                        scope 36 {
                                            debug val => _125;
                                            scope 37 {
                                            }
                                        }
                                        scope 38 {
                                            debug residual => _147;
                                            scope 39 {
                                            }
                                        }
                                        scope 40 {
                                            debug val => _150;
                                            scope 41 {
                                            }
                                        }
                                        scope 42 {
                                            debug residual => _172;
                                            scope 43 {
                                            }
                                        }
                                        scope 44 {
                                            debug val => _175;
                                            scope 45 {
                                            }
                                        }
                                        scope 46 {
                                            debug residual => _205;
                                            scope 47 {
                                            }
                                        }
                                        scope 48 {
                                            debug val => _208;
                                            scope 49 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _110;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _113;
                                        scope 33 {
                                        }
                                    }
                                }
                            }
                            scope 50 {
                                debug spot_market => _209;
                                let _231: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _234: i64;
                                scope 55 {
                                    debug residual => _231;
                                    scope 56 {
                                    }
                                }
                                scope 57 {
                                    debug val => _234;
                                    scope 58 {
                                    }
                                }
                            }
                            scope 51 {
                                debug residual => _214;
                                scope 52 {
                                }
                            }
                            scope 53 {
                                debug val => _217;
                                scope 54 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _81;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _84;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _64;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _67;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _33;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _36;
                    scope 16 {
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        _252 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _237 = deref_copy (_1.1: &mut instructions::keeper::SettlePNL<'_>);
        _8 = &((*_237).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _238 = deref_copy (*_8);
        _289 = (((_238.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_289);
        _6 = constraints::settle_pnl_not_paused(move _7) -> [return: bb1, unwind: bb126];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb126];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _253 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind: bb126];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb135];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _279 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb115;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb126];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _255 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _239 = deref_copy (_1.1: &mut instructions::keeper::SettlePNL<'_>);
        _22 = &((*_239).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_23);
        StorageLive(_24);
        _240 = deref_copy (_1.1: &mut instructions::keeper::SettlePNL<'_>);
        _24 = &((*_240).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _23 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _24) -> [return: bb12, unwind: bb126];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb134];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _277 = discriminant(_15);
        StorageDead(_15);
        goto -> bb114;
    }

    bb12: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _241 = deref_copy (_1.1: &mut instructions::keeper::SettlePNL<'_>);
        _30 = &((*_241).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _29 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _30) -> [return: bb13, unwind: bb126];
    }

    bb13: {
        StorageDead(_30);
        StorageLive(_31);
        _31 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _28 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _29, move _31) -> [return: bb14, unwind: bb126];
    }

    bb14: {
        StorageDead(_31);
        StorageDead(_29);
        _27 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _28) -> [return: bb15, unwind: bb126];
    }

    bb15: {
        StorageDead(_28);
        _32 = discriminant(_27);
        switchInt(move _32) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_36);
        _36 = move ((_27 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _26 = move _36;
        StorageDead(_36);
        _25 = &mut _26;
        _259 = discriminant(_27);
        StorageDead(_27);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _242 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _47 = &(*_242);
        _46 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _47) -> [return: bb19, unwind: bb125];
    }

    bb17: {
        StorageLive(_33);
        _33 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb18, unwind: bb133];
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_33);
        _257 = discriminant(_27);
        StorageDead(_27);
        goto -> bb113;
    }

    bb19: {
        StorageDead(_47);
        _45 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _46) -> [return: bb20, unwind: bb125];
    }

    bb20: {
        StorageDead(_46);
        _44 = &mut _45;
        _43 = &mut (*_44);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &_2;
        _53 = &(*_54);
        _52 = <Vec<u16> as Deref>::deref(move _53) -> [return: bb21, unwind: bb125];
    }

    bb21: {
        _51 = &(*_52);
        StorageDead(_53);
        _50 = get_writable_perp_market_set_from_vec(move _51) -> [return: bb22, unwind: bb125];
    }

    bb22: {
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = get_writable_spot_market_set(const _) -> [return: bb23, unwind: bb124];
    }

    bb23: {
        _56 = &_57;
        _55 = &(*_56);
        StorageLive(_58);
        _58 = (_14.0: u64);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _243 = deref_copy (*_22);
        _290 = (((_243.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _62 = &(*_290);
        _61 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _62) -> [return: bb24, unwind: bb123];
    }

    bb24: {
        StorageDead(_62);
        _60 = ((*_61).7: state::state::OracleGuardRails);
        _59 = Option::<state::state::OracleGuardRails>::Some(move _60);
        StorageDead(_60);
        _42 = load_maps(move _43, move _48, move _55, move _58, move _59) -> [return: bb25, unwind: bb123];
    }

    bb25: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_48);
        StorageDead(_43);
        _41 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _42) -> [return: bb26, unwind: bb123];
    }

    bb26: {
        StorageDead(_42);
        _63 = discriminant(_41);
        switchInt(move _63) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_67);
        _67 = move ((_41 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _40 = move _67;
        StorageDead(_67);
        StorageLive(_37);
        _37 = move (_40.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_38);
        _38 = move (_40.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_39);
        _39 = move (_40.2: state::oracle_map::OracleMap<'_>);
        _263 = discriminant(_41);
        StorageDead(_61);
        drop(_57) -> [return: bb30, unwind: bb119];
    }

    bb28: {
        StorageLive(_64);
        _64 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb29, unwind: bb132];
    }

    bb29: {
        StorageDead(_66);
        StorageDead(_64);
        _261 = discriminant(_41);
        StorageDead(_61);
        drop(_57) -> [return: bb110, unwind: bb124];
    }

    bb30: {
        StorageDead(_57);
        StorageDead(_56);
        drop(_50) -> [return: bb31, unwind: bb120];
    }

    bb31: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = &(*_25);
        _72 = <RefMut<'_, User> as Deref>::deref(move _73) -> [return: bb32, unwind: bb120];
    }

    bb32: {
        _71 = &(*_72);
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_37;
        _74 = &(*_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_38;
        _76 = &(*_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &mut _39;
        _78 = &mut (*_79);
        _70 = meets_settle_pnl_maintenance_margin_requirement(move _71, move _74, move _76, move _78) -> [return: bb33, unwind: bb120];
    }

    bb33: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_71);
        _69 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _70) -> [return: bb34, unwind: bb120];
    }

    bb34: {
        StorageDead(_70);
        _80 = discriminant(_69);
        switchInt(move _80) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_84);
        _84 = ((_69 as Continue).0: bool);
        _68 = _84;
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_69);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_2;
        _89 = <Vec<u16> as Deref>::deref(move _90) -> [return: bb38, unwind: bb120];
    }

    bb36: {
        StorageLive(_81);
        _81 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb37, unwind: bb120];
    }

    bb37: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_69);
        goto -> bb106;
    }

    bb38: {
        _88 = &(*_89);
        StorageDead(_90);
        _87 = core::slice::<impl [u16]>::iter(move _88) -> [return: bb39, unwind: bb120];
    }

    bb39: {
        StorageDead(_88);
        _86 = <std::slice::Iter<'_, u16> as IntoIterator>::into_iter(move _87) -> [return: bb40, unwind: bb120];
    }

    bb40: {
        StorageDead(_87);
        StorageLive(_91);
        _91 = move _86;
        goto -> bb41;
    }

    bb41: {
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &mut _91;
        _95 = &mut (*_96);
        _94 = <std::slice::Iter<'_, u16> as Iterator>::next(move _95) -> [return: bb42, unwind: bb120];
    }

    bb42: {
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb44, 1: bb43, otherwise: bb4];
    }

    bb43: {
        StorageLive(_99);
        _99 = ((_94 as Some).0: &u16);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_37;
        StorageLive(_108);
        _108 = &(*_99);
        _106 = PerpMarketMap::<'_>::get_ref(move _107, move _108) -> [return: bb45, unwind: bb120];
    }

    bb44: {
        _85 = const ();
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_38;
        _211 = SpotMarketMap::<'_>::get_quote_spot_market(move _212) -> [return: bb85, unwind: bb120];
    }

    bb45: {
        StorageDead(_108);
        StorageDead(_107);
        _105 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _106) -> [return: bb46, unwind: bb120];
    }

    bb46: {
        _252 = const true;
        StorageDead(_106);
        _109 = discriminant(_105);
        switchInt(move _109) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_113);
        _113 = move ((_105 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _104 = move _113;
        StorageDead(_113);
        _103 = &_104;
        _102 = <Ref<'_, PerpMarket> as Deref>::deref(move _103) -> [return: bb50, unwind: bb118];
    }

    bb48: {
        StorageLive(_110);
        _110 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb49, unwind: bb131];
    }

    bb49: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_103);
        StorageDead(_101);
        _265 = discriminant(_105);
        _252 = const false;
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb105;
    }

    bb50: {
        StorageDead(_103);
        _101 = &((*_102).22: state::perp_market::MarketStatus);
        StorageLive(_114);
        _236 = const _;
        _114 = &(*_236);
        _100 = <state::perp_market::MarketStatus as PartialEq>::eq(move _101, move _114) -> [return: bb51, unwind: bb118];
    }

    bb51: {
        StorageDead(_114);
        StorageDead(_101);
        drop(_104) -> [return: bb128, unwind: bb131];
    }

    bb52: {
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _244 = deref_copy (*_22);
        _291 = (((_244.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _120 = &(*_291);
        _119 = constraints::amm_not_paused(move _120) -> [return: bb53, unwind: bb120];
    }

    bb53: {
        StorageDead(_120);
        _118 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _119) -> [return: bb54, unwind: bb120];
    }

    bb54: {
        StorageDead(_119);
        _121 = discriminant(_118);
        switchInt(move _121) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_125);
        _125 = ((_118 as Continue).0: ());
        _117 = _125;
        StorageDead(_125);
        _269 = discriminant(_118);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = (*_99);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &mut (*_25);
        _131 = <RefMut<'_, User> as DerefMut>::deref_mut(move _132) -> [return: bb58, unwind: bb120];
    }

    bb56: {
        StorageLive(_122);
        _122 = move ((_118 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb57, unwind: bb130];
    }

    bb57: {
        StorageDead(_124);
        StorageDead(_122);
        _275 = discriminant(_118);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb104;
    }

    bb58: {
        _130 = &mut (*_131);
        StorageDead(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &_23;
        _133 = &(*_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &_37;
        _135 = &(*_136);
        StorageLive(_137);
        StorageLive(_138);
        _138 = &_38;
        _137 = &(*_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &mut _39;
        _139 = &mut (*_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = &_14;
        _141 = &(*_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _245 = deref_copy (*_22);
        _292 = (((_245.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _145 = &(*_292);
        _144 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _145) -> [return: bb59, unwind: bb120];
    }

    bb59: {
        _143 = &(*_144);
        StorageDead(_145);
        _128 = settle_expired_position(move _129, move _130, move _133, move _135, move _137, move _139, move _141, move _143) -> [return: bb60, unwind: bb120];
    }

    bb60: {
        StorageDead(_143);
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_130);
        StorageDead(_129);
        _127 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _128) -> [return: bb61, unwind: bb120];
    }

    bb61: {
        StorageDead(_128);
        _146 = discriminant(_127);
        switchInt(move _146) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_150);
        _150 = ((_127 as Continue).0: ());
        _126 = _150;
        StorageDead(_150);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &mut (*_25);
        _153 = <RefMut<'_, User> as DerefMut>::deref_mut(move _154) -> [return: bb65, unwind: bb120];
    }

    bb63: {
        StorageLive(_147);
        _147 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb64, unwind: bb120];
    }

    bb64: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb104;
    }

    bb65: {
        _152 = &mut (*_153);
        StorageDead(_154);
        StorageLive(_155);
        _155 = (_14.0: u64);
        _151 = User::update_last_active_slot(move _152, move _155) -> [return: bb66, unwind: bb120];
    }

    bb66: {
        StorageDead(_155);
        StorageDead(_152);
        StorageDead(_153);
        StorageDead(_151);
        _93 = const ();
        goto -> bb84;
    }

    bb67: {
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = (*_99);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_37;
        _161 = &(*_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &mut _39;
        _163 = &mut (*_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _246 = deref_copy (*_22);
        _293 = (((_246.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _167 = &(*_293);
        _166 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _167) -> [return: bb68, unwind: bb120];
    }

    bb68: {
        _165 = &(*_166);
        StorageDead(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = &_14;
        _168 = &(*_169);
        _159 = update_amm(move _160, move _161, move _163, move _165, move _168) -> [return: bb69, unwind: bb120];
    }

    bb69: {
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_170);
        _170 = {closure@programs/drift/src/instructions/keeper.rs:1026:18: 1026:21};
        _158 = std::result::Result::<i128, error::ErrorCode>::map::<error::ErrorCode, {closure@programs/drift/src/instructions/keeper.rs:1026:18: 1026:21}>(move _159, move _170) -> [return: bb70, unwind: bb120];
    }

    bb70: {
        StorageDead(_170);
        StorageDead(_159);
        _157 = <std::result::Result<error::ErrorCode, error::ErrorCode> as Try>::branch(move _158) -> [return: bb71, unwind: bb120];
    }

    bb71: {
        StorageDead(_158);
        _171 = discriminant(_157);
        switchInt(move _171) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_175);
        _175 = ((_157 as Continue).0: error::ErrorCode);
        _156 = _175;
        StorageDead(_175);
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = (*_99);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &mut (*_25);
        _182 = <RefMut<'_, User> as DerefMut>::deref_mut(move _183) -> [return: bb75, unwind: bb120];
    }

    bb73: {
        StorageLive(_172);
        _172 = ((_157 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_174);
        _174 = _172;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _174) -> [return: bb74, unwind: bb120];
    }

    bb74: {
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_169);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_162);
        StorageDead(_157);
        StorageDead(_156);
        goto -> bb104;
    }

    bb75: {
        _181 = &mut (*_182);
        StorageDead(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _247 = deref_copy (_1.1: &mut instructions::keeper::SettlePNL<'_>);
        _186 = &((*_247).2: anchor_lang::prelude::Signer<'_>);
        _185 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _186) -> [return: bb76, unwind: bb120];
    }

    bb76: {
        StorageDead(_186);
        _248 = deref_copy ((*_185).0: &anchor_lang::prelude::Pubkey);
        _184 = &(*_248);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_23;
        _187 = &(*_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_37;
        _189 = &(*_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &_38;
        _191 = &(*_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &mut _39;
        _193 = &mut (*_194);
        StorageLive(_195);
        StorageLive(_196);
        _196 = &_14;
        _195 = &(*_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        _249 = deref_copy (*_22);
        _294 = (((_249.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _199 = &(*_294);
        _198 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _199) -> [return: bb77, unwind: bb120];
    }

    bb77: {
        _197 = &(*_198);
        StorageDead(_199);
        StorageLive(_200);
        StorageLive(_201);
        _201 = _68;
        _200 = Option::<bool>::Some(move _201);
        StorageDead(_201);
        StorageLive(_202);
        _202 = _3;
        _179 = controller::pnl::settle_pnl(move _180, move _181, move _184, move _187, move _189, move _191, move _193, move _195, move _197, move _200, move _202) -> [return: bb78, unwind: bb120];
    }

    bb78: {
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_181);
        StorageDead(_180);
        StorageLive(_203);
        _203 = {closure@programs/drift/src/instructions/keeper.rs:1041:18: 1041:21};
        _178 = std::result::Result::<(), error::ErrorCode>::map::<error::ErrorCode, {closure@programs/drift/src/instructions/keeper.rs:1041:18: 1041:21}>(move _179, move _203) -> [return: bb79, unwind: bb120];
    }

    bb79: {
        StorageDead(_203);
        StorageDead(_179);
        _177 = <std::result::Result<error::ErrorCode, error::ErrorCode> as Try>::branch(move _178) -> [return: bb80, unwind: bb120];
    }

    bb80: {
        StorageDead(_178);
        _204 = discriminant(_177);
        switchInt(move _204) -> [0: bb81, 1: bb82, otherwise: bb4];
    }

    bb81: {
        StorageLive(_208);
        _208 = ((_177 as Continue).0: error::ErrorCode);
        _176 = _208;
        StorageDead(_208);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_177);
        StorageDead(_176);
        _93 = const ();
        goto -> bb84;
    }

    bb82: {
        StorageLive(_205);
        _205 = ((_177 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_207);
        _207 = _205;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _207) -> [return: bb83, unwind: bb120];
    }

    bb83: {
        StorageDead(_207);
        StorageDead(_205);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_177);
        StorageDead(_176);
        goto -> bb104;
    }

    bb84: {
        StorageDead(_116);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        _92 = const ();
        goto -> bb41;
    }

    bb85: {
        StorageDead(_212);
        _210 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _211) -> [return: bb86, unwind: bb120];
    }

    bb86: {
        StorageDead(_211);
        _213 = discriminant(_210);
        switchInt(move _213) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_217);
        _217 = move ((_210 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _209 = move _217;
        StorageDead(_217);
        _273 = discriminant(_210);
        StorageDead(_210);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &_209;
        _223 = &(*_224);
        _222 = <Ref<'_, SpotMarket> as Deref>::deref(move _223) -> [return: bb90, unwind: bb117];
    }

    bb88: {
        StorageLive(_214);
        _214 = ((_210 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_216);
        _216 = _214;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _216) -> [return: bb89, unwind: bb129];
    }

    bb89: {
        StorageDead(_216);
        StorageDead(_214);
        _271 = discriminant(_210);
        StorageDead(_210);
        goto -> bb103;
    }

    bb90: {
        _221 = &(*_222);
        StorageDead(_223);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _250 = deref_copy (_1.1: &mut instructions::keeper::SettlePNL<'_>);
        _251 = deref_copy ((*_250).3: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _295 = (((_251.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _229 = &(*_295);
        _228 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _229) -> [return: bb91, unwind: bb117];
    }

    bb91: {
        _227 = &(*_228);
        _226 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _227) -> [return: bb92, unwind: bb117];
    }

    bb92: {
        StorageDead(_229);
        StorageDead(_227);
        _225 = ((*_226).2: u64);
        _220 = validate_spot_market_vault_amount(move _221, move _225) -> [return: bb93, unwind: bb117];
    }

    bb93: {
        StorageDead(_225);
        StorageDead(_221);
        _219 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _220) -> [return: bb94, unwind: bb117];
    }

    bb94: {
        StorageDead(_220);
        _230 = discriminant(_219);
        switchInt(move _230) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        StorageLive(_234);
        _234 = ((_219 as Continue).0: i64);
        _218 = _234;
        StorageDead(_234);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_218);
        StorageLive(_235);
        _235 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _235);
        StorageDead(_235);
        drop(_209) -> [return: bb98, unwind: bb120];
    }

    bb96: {
        StorageLive(_231);
        _231 = ((_219 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_233);
        _233 = _231;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _233) -> [return: bb97, unwind: bb117];
    }

    bb97: {
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_219);
        StorageDead(_218);
        drop(_209) -> [return: bb103, unwind: bb120];
    }

    bb98: {
        StorageDead(_209);
        StorageDead(_68);
        drop(_39) -> [return: bb99, unwind: bb121];
    }

    bb99: {
        StorageDead(_39);
        drop(_38) -> [return: bb100, unwind: bb122];
    }

    bb100: {
        StorageDead(_38);
        drop(_37) -> [return: bb101, unwind: bb125];
    }

    bb101: {
        StorageDead(_37);
        drop(_26) -> [return: bb102, unwind: bb126];
    }

    bb102: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        drop(_2) -> [return: bb116, unwind: bb127];
    }

    bb103: {
        StorageDead(_209);
        goto -> bb106;
    }

    bb104: {
        StorageDead(_116);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_68);
        drop(_39) -> [return: bb107, unwind: bb121];
    }

    bb107: {
        StorageDead(_39);
        drop(_38) -> [return: bb108, unwind: bb122];
    }

    bb108: {
        StorageDead(_38);
        drop(_37) -> [return: bb109, unwind: bb125];
    }

    bb109: {
        StorageDead(_37);
        goto -> bb112;
    }

    bb110: {
        StorageDead(_57);
        StorageDead(_56);
        drop(_50) -> [return: bb111, unwind: bb125];
    }

    bb111: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb112;
    }

    bb112: {
        drop(_26) -> [return: bb113, unwind: bb126];
    }

    bb113: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_14);
        goto -> bb115;
    }

    bb115: {
        drop(_2) -> [return: bb116, unwind: bb127];
    }

    bb116: {
        return;
    }

    bb117 (cleanup): {
        drop(_209) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_104) -> [return: bb131, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_50) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_39) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_38) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        drop(_37) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_57) -> [return: bb124, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_50) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_26) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_2) -> [return: bb127, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        resume;
    }

    bb128: {
        _267 = discriminant(_105);
        _252 = const false;
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_102);
        StorageLive(_116);
        _116 = _100;
        switchInt(move _116) -> [0: bb67, otherwise: bb52];
    }

    bb129 (cleanup): {
        _281 = discriminant(_210);
        goto -> bb120;
    }

    bb130 (cleanup): {
        _282 = discriminant(_118);
        goto -> bb120;
    }

    bb131 (cleanup): {
        _283 = discriminant(_105);
        goto -> bb120;
    }

    bb132 (cleanup): {
        _285 = discriminant(_41);
        goto -> bb123;
    }

    bb133 (cleanup): {
        _286 = discriminant(_27);
        goto -> bb126;
    }

    bb134 (cleanup): {
        _287 = discriminant(_15);
        goto -> bb126;
    }

    bb135 (cleanup): {
        _288 = discriminant(_5);
        goto -> bb126;
    }
}
