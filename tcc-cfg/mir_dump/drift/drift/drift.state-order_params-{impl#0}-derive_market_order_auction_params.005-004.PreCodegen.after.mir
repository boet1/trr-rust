// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::derive_market_order_auction_params` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::derive_market_order_auction_params(_1: &PerpMarket, _2: controller::position::PositionDirection, _3: i64, _4: u64, _5: i64) -> std::result::Result<(i64, i64, u8), error::ErrorCode> {
    debug perp_market => _1;
    debug direction => _2;
    debug oracle_price => _3;
    debug limit_price => _4;
    debug start_buffer => _5;
    let mut _0: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let mut _6: i64;
    let mut _7: i64;
    let mut _8: (i64, i64);
    let mut _9: bool;
    let mut _10: u64;
    let _11: i64;
    let _12: i64;
    let mut _13: (i64, i64);
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _15: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _16: &state::perp_market::PerpMarket;
    let mut _17: controller::position::PositionDirection;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _22: (i64, i64);
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _25: std::result::Result<i64, error::ErrorCode>;
    let mut _26: i64;
    let mut _27: i64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _35: std::result::Result<i64, error::ErrorCode>;
    let mut _36: i64;
    let mut _37: i64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: i64;
    let mut _44: i64;
    let _45: i64;
    let _46: i64;
    let mut _47: (i64, i64);
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _49: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _50: &state::perp_market::PerpMarket;
    let mut _51: controller::position::PositionDirection;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: (i64, i64);
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _59: std::result::Result<i64, error::ErrorCode>;
    let mut _60: i64;
    let mut _61: i64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _69: std::result::Result<i64, error::ErrorCode>;
    let mut _70: i64;
    let mut _71: i64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: i64;
    let mut _78: i64;
    let _79: ();
    let mut _80: bool;
    let mut _81: i64;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _84: std::result::Result<i64, error::ErrorCode>;
    let mut _85: i64;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _87: std::result::Result<i64, error::ErrorCode>;
    let mut _88: i64;
    let mut _89: i64;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _100: ();
    let mut _101: bool;
    let mut _102: &controller::position::PositionDirection;
    let mut _103: &controller::position::PositionDirection;
    let _104: controller::position::PositionDirection;
    let mut _105: i64;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _107: std::result::Result<i64, error::ErrorCode>;
    let mut _108: i64;
    let mut _109: i64;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: i64;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _117: std::result::Result<i64, error::ErrorCode>;
    let mut _118: i64;
    let mut _119: i64;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _125: bool;
    let mut _126: i64;
    let mut _127: bool;
    let mut _128: &controller::position::PositionDirection;
    let mut _129: &controller::position::PositionDirection;
    let _130: controller::position::PositionDirection;
    let mut _131: i64;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _133: std::result::Result<i64, error::ErrorCode>;
    let mut _134: i64;
    let mut _135: i64;
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _141: i64;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _143: std::result::Result<i64, error::ErrorCode>;
    let mut _144: i64;
    let mut _145: i64;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _151: ();
    let mut _152: bool;
    let mut _153: &state::perp_market::PerpMarket;
    let mut _154: i64;
    let mut _155: i64;
    let mut _156: i64;
    let mut _157: i64;
    let _158: ();
    let mut _159: bool;
    let mut _160: u64;
    let mut _162: u64;
    let mut _163: bool;
    let mut _164: &controller::position::PositionDirection;
    let mut _165: &controller::position::PositionDirection;
    let _166: controller::position::PositionDirection;
    let mut _167: i64;
    let mut _168: i64;
    let mut _169: i64;
    let mut _170: i64;
    let mut _171: i64;
    let mut _172: i64;
    let mut _173: i64;
    let mut _174: i64;
    let mut _175: i64;
    let mut _176: i64;
    let mut _177: i64;
    let mut _178: i64;
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u8>;
    let mut _181: std::result::Result<u8, error::ErrorCode>;
    let mut _182: u64;
    let mut _183: i64;
    let mut _184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _185: std::result::Result<i64, error::ErrorCode>;
    let mut _186: i64;
    let mut _187: i64;
    let mut _188: isize;
    let mut _190: !;
    let mut _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _193: u64;
    let mut _194: i64;
    let mut _195: state::perp_market::ContractTier;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _201: (i64, i64, u8);
    let mut _202: i64;
    let mut _203: i64;
    let mut _204: u8;
    scope 1 {
        debug auction_start_price => _6;
        debug auction_end_price => _7;
        let _82: i64;
        let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _94: i64;
        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _99: i64;
        let _161: i64;
        let _179: u8;
        let _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _192: i64;
        let _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _200: u8;
        scope 32 {
            debug start_buffer_price => _82;
            let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _114: i64;
            let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _124: i64;
            let _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _140: i64;
            let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _150: i64;
            let mut _206: &controller::position::PositionDirection;
            let mut _207: &controller::position::PositionDirection;
            scope 41 {
                debug residual => _111;
                scope 42 {
                }
            }
            scope 43 {
                debug val => _114;
                scope 44 {
                }
            }
            scope 45 {
                debug residual => _121;
                scope 46 {
                }
            }
            scope 47 {
                debug val => _124;
                scope 48 {
                }
            }
            scope 49 {
                debug residual => _137;
                scope 50 {
                }
            }
            scope 51 {
                debug val => _140;
                scope 52 {
                }
            }
            scope 53 {
                debug residual => _147;
                scope 54 {
                }
            }
            scope 55 {
                debug val => _150;
                scope 56 {
                }
            }
        }
        scope 33 {
            debug residual => _91;
            scope 34 {
            }
        }
        scope 35 {
            debug val => _94;
            scope 36 {
            }
        }
        scope 37 {
            debug residual => _96;
            scope 38 {
            }
        }
        scope 39 {
            debug val => _99;
            scope 40 {
            }
        }
        scope 57 {
            debug limit_price => _161;
            let mut _205: &controller::position::PositionDirection;
        }
        scope 58 {
            debug auction_duration => _179;
        }
        scope 59 {
            debug residual => _189;
            scope 60 {
            }
        }
        scope 61 {
            debug val => _192;
            scope 62 {
            }
        }
        scope 63 {
            debug residual => _197;
            scope 64 {
            }
        }
        scope 65 {
            debug val => _200;
            scope 66 {
            }
        }
    }
    scope 2 {
        debug auction_start_price_offset => _11;
        debug auction_end_price_offset => _12;
        let _23: i64;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: i64;
        scope 7 {
            debug auction_start_price => _23;
            let _33: i64;
            let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _42: i64;
            scope 12 {
                debug auction_end_price => _33;
            }
            scope 13 {
                debug residual => _39;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _42;
                scope 16 {
                }
            }
        }
        scope 8 {
            debug residual => _29;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _32;
            scope 11 {
            }
        }
    }
    scope 3 {
        debug residual => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _22;
        scope 6 {
        }
    }
    scope 17 {
        debug auction_start_price_offset => _45;
        debug auction_end_price_offset => _46;
        let _57: i64;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: i64;
        scope 22 {
            debug auction_start_price => _57;
            let _67: i64;
            let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _76: i64;
            scope 27 {
                debug auction_end_price => _67;
            }
            scope 28 {
                debug residual => _73;
                scope 29 {
                }
            }
            scope 30 {
                debug val => _76;
                scope 31 {
                }
            }
        }
        scope 23 {
            debug residual => _63;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _66;
            scope 26 {
            }
        }
    }
    scope 18 {
        debug residual => _53;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _56;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _4;
        _9 = Ne(move _10, const 0_u64);
        switchInt(move _9) -> [0: bb18, otherwise: bb1];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        StorageLive(_17);
        _17 = _2;
        _15 = order_params::OrderParams::get_perp_baseline_start_end_price_offset(move _16, move _17, const 2_u64) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        _18 = discriminant(_14);
        switchInt(move _18) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_22);
        _22 = ((_14 as Continue).0: (i64, i64));
        _13 = _22;
        StorageDead(_22);
        StorageLive(_11);
        _11 = (_13.0: i64);
        StorageLive(_12);
        _12 = (_13.1: i64);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _3;
        StorageLive(_27);
        _27 = _11;
        _25 = <i64 as SafeMath>::safe_add(move _26, move _27) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_19);
        _19 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb116;
    }

    bb8: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        _28 = discriminant(_24);
        switchInt(move _28) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_32);
        _32 = ((_24 as Continue).0: i64);
        _23 = _32;
        StorageDead(_32);
        StorageDead(_24);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _3;
        StorageLive(_37);
        _37 = _12;
        _35 = <i64 as SafeMath>::safe_add(move _36, move _37) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_29);
        _29 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        goto -> bb115;
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb15, 1: bb16, otherwise: bb5];
    }

    bb15: {
        StorageLive(_42);
        _42 = ((_34 as Continue).0: i64);
        _33 = _42;
        StorageDead(_42);
        StorageDead(_34);
        StorageLive(_43);
        _43 = _23;
        StorageLive(_44);
        _44 = _33;
        _8 = (move _43, move _44);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_33);
        StorageDead(_23);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb34;
    }

    bb16: {
        StorageLive(_39);
        _39 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_34);
        StorageDead(_33);
        goto -> bb115;
    }

    bb18: {
        StorageDead(_10);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_1);
        StorageLive(_51);
        _51 = _2;
        _49 = order_params::OrderParams::get_perp_baseline_start_end_price_offset(move _50, move _51, const 1_u64) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_51);
        StorageDead(_50);
        _48 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _49) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_49);
        _52 = discriminant(_48);
        switchInt(move _52) -> [0: bb21, 1: bb22, otherwise: bb5];
    }

    bb21: {
        StorageLive(_56);
        _56 = ((_48 as Continue).0: (i64, i64));
        _47 = _56;
        StorageDead(_56);
        StorageLive(_45);
        _45 = (_47.0: i64);
        StorageLive(_46);
        _46 = (_47.1: i64);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _3;
        StorageLive(_61);
        _61 = _45;
        _59 = <i64 as SafeMath>::safe_add(move _60, move _61) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_53);
        _53 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb116;
    }

    bb24: {
        StorageDead(_61);
        StorageDead(_60);
        _58 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _59) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_59);
        _62 = discriminant(_58);
        switchInt(move _62) -> [0: bb26, 1: bb27, otherwise: bb5];
    }

    bb26: {
        StorageLive(_66);
        _66 = ((_58 as Continue).0: i64);
        _57 = _66;
        StorageDead(_66);
        StorageDead(_58);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _3;
        StorageLive(_71);
        _71 = _46;
        _69 = <i64 as SafeMath>::safe_add(move _70, move _71) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_63);
        _63 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        goto -> bb114;
    }

    bb29: {
        StorageDead(_71);
        StorageDead(_70);
        _68 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _69) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_69);
        _72 = discriminant(_68);
        switchInt(move _72) -> [0: bb31, 1: bb32, otherwise: bb5];
    }

    bb31: {
        StorageLive(_76);
        _76 = ((_68 as Continue).0: i64);
        _67 = _76;
        StorageDead(_76);
        StorageDead(_68);
        StorageLive(_77);
        _77 = _57;
        StorageLive(_78);
        _78 = _67;
        _8 = (move _77, move _78);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_67);
        StorageDead(_57);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb34;
    }

    bb32: {
        StorageLive(_73);
        _73 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb114;
    }

    bb34: {
        StorageDead(_9);
        StorageLive(_6);
        _6 = (_8.0: i64);
        StorageLive(_7);
        _7 = (_8.1: i64);
        StorageDead(_8);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _5;
        _80 = Ne(move _81, const 0_i64);
        switchInt(move _80) -> [0: bb77, otherwise: bb35];
    }

    bb35: {
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _3;
        StorageLive(_89);
        _89 = _5;
        _87 = <i64 as SafeMath>::safe_mul(move _88, move _89) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_89);
        StorageDead(_88);
        _86 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _87) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_87);
        _90 = discriminant(_86);
        switchInt(move _90) -> [0: bb38, 1: bb39, otherwise: bb5];
    }

    bb38: {
        StorageLive(_94);
        _94 = ((_86 as Continue).0: i64);
        _85 = _94;
        StorageDead(_94);
        _84 = <i64 as SafeMath>::safe_div(move _85, const _) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_91);
        _91 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb111;
    }

    bb41: {
        StorageDead(_85);
        _83 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _84) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_84);
        _95 = discriminant(_83);
        switchInt(move _95) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_99);
        _99 = ((_83 as Continue).0: i64);
        _82 = _99;
        StorageDead(_99);
        StorageDead(_86);
        StorageDead(_83);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_2;
        StorageLive(_103);
        _207 = const _;
        _103 = &(*_207);
        _101 = <controller::position::PositionDirection as PartialEq>::eq(move _102, move _103) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_96);
        _96 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_98);
        StorageDead(_96);
        goto -> bb111;
    }

    bb46: {
        switchInt(move _101) -> [0: bb53, otherwise: bb47];
    }

    bb47: {
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = _6;
        StorageLive(_109);
        _109 = _82;
        _107 = <i64 as SafeMath>::safe_sub(move _108, move _109) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_109);
        StorageDead(_108);
        _106 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _107) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_107);
        _110 = discriminant(_106);
        switchInt(move _110) -> [0: bb50, 1: bb51, otherwise: bb5];
    }

    bb50: {
        StorageLive(_114);
        _114 = ((_106 as Continue).0: i64);
        _105 = _114;
        StorageDead(_114);
        _6 = move _105;
        StorageDead(_105);
        StorageDead(_106);
        _100 = const ();
        goto -> bb59;
    }

    bb51: {
        StorageLive(_111);
        _111 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_105);
        StorageDead(_106);
        goto -> bb110;
    }

    bb53: {
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = _6;
        StorageLive(_119);
        _119 = _82;
        _117 = <i64 as SafeMath>::safe_add(move _118, move _119) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_119);
        StorageDead(_118);
        _116 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _117) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_117);
        _120 = discriminant(_116);
        switchInt(move _120) -> [0: bb56, 1: bb57, otherwise: bb5];
    }

    bb56: {
        StorageLive(_124);
        _124 = ((_116 as Continue).0: i64);
        _115 = _124;
        StorageDead(_124);
        _6 = move _115;
        StorageDead(_115);
        StorageDead(_116);
        _100 = const ();
        goto -> bb59;
    }

    bb57: {
        StorageLive(_121);
        _121 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_115);
        StorageDead(_116);
        goto -> bb110;
    }

    bb59: {
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _5;
        _125 = Lt(move _126, const 0_i64);
        switchInt(move _125) -> [0: bb75, otherwise: bb60];
    }

    bb60: {
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_2;
        StorageLive(_129);
        _206 = const _;
        _129 = &(*_206);
        _127 = <controller::position::PositionDirection as PartialEq>::eq(move _128, move _129) -> [return: bb61, unwind continue];
    }

    bb61: {
        switchInt(move _127) -> [0: bb68, otherwise: bb62];
    }

    bb62: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = _7;
        StorageLive(_135);
        _135 = _82;
        _133 = <i64 as SafeMath>::safe_sub(move _134, move _135) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_135);
        StorageDead(_134);
        _132 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _133) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_133);
        _136 = discriminant(_132);
        switchInt(move _136) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_140);
        _140 = ((_132 as Continue).0: i64);
        _131 = _140;
        StorageDead(_140);
        _7 = move _131;
        StorageDead(_131);
        StorageDead(_132);
        _79 = const ();
        goto -> bb74;
    }

    bb66: {
        StorageLive(_137);
        _137 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_139);
        _139 = _137;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _139) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_131);
        StorageDead(_132);
        goto -> bb109;
    }

    bb68: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _7;
        StorageLive(_145);
        _145 = _82;
        _143 = <i64 as SafeMath>::safe_add(move _144, move _145) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_145);
        StorageDead(_144);
        _142 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _143) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_143);
        _146 = discriminant(_142);
        switchInt(move _146) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_150);
        _150 = ((_142 as Continue).0: i64);
        _141 = _150;
        StorageDead(_150);
        _7 = move _141;
        StorageDead(_141);
        StorageDead(_142);
        _79 = const ();
        goto -> bb74;
    }

    bb72: {
        StorageLive(_147);
        _147 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_141);
        StorageDead(_142);
        goto -> bb109;
    }

    bb74: {
        StorageDead(_127);
        goto -> bb76;
    }

    bb75: {
        StorageDead(_126);
        _79 = const ();
        goto -> bb76;
    }

    bb76: {
        StorageDead(_125);
        StorageDead(_82);
        goto -> bb78;
    }

    bb77: {
        StorageDead(_81);
        _79 = const ();
        goto -> bb78;
    }

    bb78: {
        StorageDead(_80);
        StorageDead(_79);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &(*_1);
        _152 = PerpMarket::is_prediction_market(move _153) -> [return: bb79, unwind continue];
    }

    bb79: {
        switchInt(move _152) -> [0: bb83, otherwise: bb80];
    }

    bb80: {
        StorageDead(_153);
        StorageLive(_154);
        StorageLive(_155);
        _155 = _6;
        _154 = <i64 as Ord>::min(move _155, const _) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_155);
        _6 = move _154;
        StorageDead(_154);
        StorageLive(_156);
        StorageLive(_157);
        _157 = _7;
        _156 = <i64 as Ord>::min(move _157, const _) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_157);
        _7 = move _156;
        StorageDead(_156);
        _151 = const ();
        goto -> bb84;
    }

    bb83: {
        StorageDead(_153);
        _151 = const ();
        goto -> bb84;
    }

    bb84: {
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = _4;
        _159 = Ne(move _160, const 0_u64);
        switchInt(move _159) -> [0: bb94, otherwise: bb85];
    }

    bb85: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = _4;
        _161 = move _162 as i64 (IntToInt);
        StorageDead(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &_2;
        StorageLive(_165);
        _205 = const _;
        _165 = &(*_205);
        _163 = <controller::position::PositionDirection as PartialEq>::eq(move _164, move _165) -> [return: bb86, unwind continue];
    }

    bb86: {
        switchInt(move _163) -> [0: bb90, otherwise: bb87];
    }

    bb87: {
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_167);
        StorageLive(_168);
        _168 = _6;
        StorageLive(_169);
        _169 = _161;
        _167 = <i64 as Ord>::min(move _168, move _169) -> [return: bb88, unwind continue];
    }

    bb88: {
        StorageDead(_169);
        StorageDead(_168);
        _6 = move _167;
        StorageDead(_167);
        StorageLive(_170);
        StorageLive(_171);
        _171 = _7;
        StorageLive(_172);
        _172 = _161;
        _170 = <i64 as Ord>::min(move _171, move _172) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_172);
        StorageDead(_171);
        _7 = move _170;
        StorageDead(_170);
        _158 = const ();
        goto -> bb93;
    }

    bb90: {
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_173);
        StorageLive(_174);
        _174 = _6;
        StorageLive(_175);
        _175 = _161;
        _173 = <i64 as Ord>::max(move _174, move _175) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_175);
        StorageDead(_174);
        _6 = move _173;
        StorageDead(_173);
        StorageLive(_176);
        StorageLive(_177);
        _177 = _7;
        StorageLive(_178);
        _178 = _161;
        _176 = <i64 as Ord>::max(move _177, move _178) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_178);
        StorageDead(_177);
        _7 = move _176;
        StorageDead(_176);
        _158 = const ();
        goto -> bb93;
    }

    bb93: {
        StorageDead(_163);
        StorageDead(_161);
        goto -> bb95;
    }

    bb94: {
        StorageDead(_160);
        _158 = const ();
        goto -> bb95;
    }

    bb95: {
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        _186 = _7;
        StorageLive(_187);
        _187 = _6;
        _185 = <i64 as SafeMath>::safe_sub(move _186, move _187) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_187);
        StorageDead(_186);
        _184 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _185) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_185);
        _188 = discriminant(_184);
        switchInt(move _188) -> [0: bb98, 1: bb99, otherwise: bb5];
    }

    bb98: {
        StorageLive(_192);
        _192 = ((_184 as Continue).0: i64);
        _183 = _192;
        StorageDead(_192);
        _182 = core::num::<impl i64>::unsigned_abs(move _183) -> [return: bb101, unwind continue];
    }

    bb99: {
        StorageLive(_189);
        _189 = ((_184 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_191);
        _191 = _189;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _191) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb108;
    }

    bb101: {
        StorageDead(_183);
        StorageLive(_193);
        StorageLive(_194);
        _194 = _3;
        _193 = core::num::<impl i64>::unsigned_abs(move _194) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_194);
        StorageLive(_195);
        _195 = ((*_1).24: state::perp_market::ContractTier);
        _181 = get_auction_duration(move _182, move _193, move _195) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_182);
        _180 = <std::result::Result<u8, error::ErrorCode> as Try>::branch(move _181) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_181);
        _196 = discriminant(_180);
        switchInt(move _196) -> [0: bb105, 1: bb106, otherwise: bb5];
    }

    bb105: {
        StorageLive(_200);
        _200 = ((_180 as Continue).0: u8);
        _179 = _200;
        StorageDead(_200);
        StorageDead(_184);
        StorageDead(_180);
        StorageLive(_201);
        StorageLive(_202);
        _202 = _6;
        StorageLive(_203);
        _203 = _7;
        StorageLive(_204);
        _204 = _179;
        _201 = (move _202, move _203, move _204);
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_202);
        _0 = std::result::Result::<(i64, i64, u8), error::ErrorCode>::Ok(move _201);
        StorageDead(_201);
        StorageDead(_179);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb117;
    }

    bb106: {
        StorageLive(_197);
        _197 = ((_180 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_199);
        _199 = _197;
        _0 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _199) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_199);
        StorageDead(_197);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_184);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb113;
    }

    bb109: {
        StorageDead(_127);
        StorageDead(_125);
        goto -> bb112;
    }

    bb110: {
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb112;
    }

    bb111: {
        StorageDead(_86);
        StorageDead(_83);
        goto -> bb112;
    }

    bb112: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb113;
    }

    bb113: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb117;
    }

    bb114: {
        StorageDead(_57);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb116;
    }

    bb115: {
        StorageDead(_23);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb117;
    }

    bb117: {
        return;
    }
}
