// MIR for `update_pnl_pool_and_user_balance` before PreCodegen

fn update_pnl_pool_and_user_balance(_1: &mut PerpMarket, _2: &mut SpotMarket, _3: &mut User, _4: i128) -> std::result::Result<i128, error::ErrorCode> {
    debug market => _1;
    debug bank => _2;
    debug user => _3;
    debug unrealized_pnl_with_fee => _4;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _5: i128;
    let mut _6: bool;
    let mut _7: i128;
    let mut _8: i128;
    let mut _9: i128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _11: std::result::Result<i128, error::ErrorCode>;
    let mut _12: u128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _14: std::result::Result<u128, error::ErrorCode>;
    let mut _15: u128;
    let mut _16: &state::spot_market::SpotMarket;
    let mut _17: &state::spot_market::SpotBalanceType;
    let _18: &state::spot_market::SpotBalanceType;
    let mut _19: &state::perp_market::PoolBalance;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: u128;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: i128;
    let _30: ();
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _32: std::result::Result<(), error::ErrorCode>;
    let mut _33: bool;
    let mut _34: i128;
    let mut _35: i128;
    let mut _36: ();
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let mut _41: &std::string::String;
    let _42: &std::string::String;
    let _43: std::string::String;
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[&str; 2];
    let _48: &[&str; 2];
    let _49: [&str; 2];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let mut _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: &error::ErrorCode;
    let _56: &error::ErrorCode;
    let _57: ();
    let mut _58: &str;
    let _59: &str;
    let mut _60: &std::string::String;
    let _61: &std::string::String;
    let _62: std::string::String;
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[&str; 3];
    let _67: &[&str; 3];
    let _68: [&str; 3];
    let mut _69: &[core::fmt::rt::Argument<'_>];
    let mut _70: &[core::fmt::rt::Argument<'_>; 2];
    let _71: &[core::fmt::rt::Argument<'_>; 2];
    let _72: [core::fmt::rt::Argument<'_>; 2];
    let mut _73: core::fmt::rt::Argument<'_>;
    let mut _74: &i128;
    let _75: &i128;
    let mut _76: core::fmt::rt::Argument<'_>;
    let mut _77: &i128;
    let _78: &i128;
    let mut _79: error::ErrorCode;
    let mut _80: isize;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _85: ();
    let mut _86: bool;
    let mut _87: i128;
    let mut _88: !;
    let _89: ();
    let mut _90: &str;
    let _91: &str;
    let mut _92: &std::string::String;
    let _93: &std::string::String;
    let _94: std::string::String;
    let mut _96: std::fmt::Arguments<'_>;
    let mut _97: &[&str];
    let mut _98: &[&str; 1];
    let _99: &[&str; 1];
    let _100: [&str; 1];
    let mut _101: &[core::fmt::rt::Argument<'_>];
    let mut _102: &[core::fmt::rt::Argument<'_>; 1];
    let _103: &[core::fmt::rt::Argument<'_>; 1];
    let _104: [core::fmt::rt::Argument<'_>; 1];
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &u16;
    let _107: &u16;
    let mut _108: bool;
    let mut _109: i128;
    let mut _110: !;
    let _111: ();
    let mut _112: &str;
    let _113: &str;
    let mut _114: &std::string::String;
    let _115: &std::string::String;
    let _116: std::string::String;
    let mut _118: std::fmt::Arguments<'_>;
    let mut _119: &[&str];
    let mut _120: &[&str; 1];
    let _121: &[&str; 1];
    let _122: [&str; 1];
    let mut _123: &[core::fmt::rt::Argument<'_>];
    let mut _124: &[core::fmt::rt::Argument<'_>; 1];
    let _125: &[core::fmt::rt::Argument<'_>; 1];
    let _126: [core::fmt::rt::Argument<'_>; 1];
    let mut _127: core::fmt::rt::Argument<'_>;
    let mut _128: &u16;
    let _129: &u16;
    let mut _131: &mut state::user::User;
    let _132: ();
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _134: std::result::Result<(), error::ErrorCode>;
    let mut _135: i128;
    let mut _136: &mut state::spot_market::SpotMarket;
    let mut _137: &mut dyn state::spot_market::SpotBalance;
    let mut _138: &mut state::perp_market::PoolBalance;
    let mut _139: &mut state::perp_market::PoolBalance;
    let mut _140: &mut dyn state::spot_market::SpotBalance;
    let mut _141: &mut state::user::SpotPosition;
    let mut _142: isize;
    let mut _144: !;
    let mut _145: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _147: i128;
    scope 1 {
        debug pnl_to_settle_with_user => _5;
        let _37: error::ErrorCode;
        let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _84: ();
        let _95: std::string::String;
        let _117: std::string::String;
        let _130: &mut state::user::SpotPosition;
        let mut _148: &[&str; 1];
        let mut _149: &[&str; 1];
        scope 10 {
            debug error_code => _37;
            let _44: std::string::String;
            let _63: std::string::String;
            let mut _150: &[&str; 3];
            let mut _151: &[&str; 2];
            scope 11 {
                debug res => _44;
            }
            scope 12 {
                debug res => _63;
            }
        }
        scope 13 {
            debug residual => _81;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _84;
            scope 16 {
            }
        }
        scope 17 {
            debug res => _95;
        }
        scope 18 {
            debug res => _117;
        }
        scope 19 {
            debug user_spot_position => _130;
            let _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _146: ();
            scope 20 {
                debug residual => _143;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _146;
                scope 23 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _21;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _24;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _26;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _29;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _4;
        _6 = Gt(move _7, const 0_i128);
        switchInt(move _6) -> [0: bb15, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = _4;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = (((*_1).2: state::perp_market::PoolBalance).0: u128);
        StorageLive(_16);
        _16 = &(*_2);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &((*_1).2: state::perp_market::PoolBalance);
        _18 = <PoolBalance as SpotBalance>::balance_type(move _19) -> [return: bb2, unwind continue];
    }

    bb2: {
        _17 = &(*_18);
        StorageDead(_19);
        _14 = get_token_amount(move _15, move _16, move _17) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        _13 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        _20 = discriminant(_13);
        switchInt(move _20) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_24);
        _24 = ((_13 as Continue).0: u128);
        _12 = _24;
        StorageDead(_24);
        _11 = <u128 as Cast>::cast::<i128>(move _12) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_21);
        _21 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb60;
    }

    bb9: {
        StorageDead(_12);
        _10 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_11);
        _25 = discriminant(_10);
        switchInt(move _25) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_29);
        _29 = ((_10 as Continue).0: i128);
        _9 = _29;
        StorageDead(_29);
        _5 = <i128 as Ord>::min(move _8, move _9) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_26);
        _26 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb60;
    }

    bb14: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_10);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_7);
        _5 = _4;
        goto -> bb16;
    }

    bb16: {
        StorageDead(_6);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _4;
        StorageLive(_35);
        _35 = _5;
        _33 = Eq(move _34, move _35);
        switchInt(move _33) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_36);
        _36 = ();
        _32 = std::result::Result::<(), error::ErrorCode>::Ok(move _36);
        StorageDead(_36);
        goto -> bb32;
    }

    bb18: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_37);
        _37 = error::ErrorCode::InsufficientPerpPnlPool;
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _151 = const _;
        _48 = &(*_151);
        _47 = &(*_48);
        _46 = move _47 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_37;
        _55 = &(*_56);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _55) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_55);
        _53 = [move _54];
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = move _51 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_51);
        _45 = Arguments::<'_>::new_v1(move _46, move _50) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_50);
        StorageDead(_46);
        _44 = format(move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        _43 = move _44;
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = <String as Deref>::deref(move _41) -> [return: bb22, unwind: bb66];
    }

    bb22: {
        _39 = &(*_40);
        StorageDead(_41);
        _38 = solana_program::log::sol_log(move _39) -> [return: bb23, unwind: bb66];
    }

    bb23: {
        StorageDead(_39);
        drop(_43) -> [return: bb24, unwind: bb67];
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _150 = const _;
        _67 = &(*_150);
        _66 = &(*_67);
        _65 = move _66 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = &_5;
        _74 = &(*_75);
        _73 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _74) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_74);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = &_4;
        _77 = &(*_78);
        _76 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _77) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_77);
        _72 = [move _73, move _76];
        StorageDead(_76);
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = move _70 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_70);
        _64 = Arguments::<'_>::new_v1(move _65, move _69) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_69);
        StorageDead(_65);
        _63 = format(move _64) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_64);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_67);
        _62 = move _63;
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = <String as Deref>::deref(move _60) -> [return: bb29, unwind: bb65];
    }

    bb29: {
        _58 = &(*_59);
        StorageDead(_60);
        _57 = solana_program::log::sol_log(move _58) -> [return: bb30, unwind: bb65];
    }

    bb30: {
        StorageDead(_58);
        drop(_62) -> [return: bb31, unwind: bb67];
    }

    bb31: {
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageLive(_79);
        _79 = _37;
        _32 = std::result::Result::<(), error::ErrorCode>::Err(move _79);
        StorageDead(_79);
        StorageDead(_37);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_33);
        _31 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _32) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_32);
        _80 = discriminant(_31);
        switchInt(move _80) -> [0: bb34, 1: bb35, otherwise: bb6];
    }

    bb34: {
        StorageLive(_84);
        _84 = ((_31 as Continue).0: ());
        _30 = _84;
        StorageDead(_84);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = _4;
        _86 = Eq(move _87, const 0_i128);
        switchInt(move _86) -> [0: bb38, otherwise: bb37];
    }

    bb35: {
        StorageLive(_81);
        _81 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb61;
    }

    bb37: {
        StorageDead(_87);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _148 = const _;
        _99 = &(*_148);
        _98 = &(*_99);
        _97 = move _98 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_98);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &((*_1).21: u16);
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _106) -> [return: bb39, unwind continue];
    }

    bb38: {
        StorageDead(_87);
        StorageLive(_108);
        StorageLive(_109);
        _109 = _5;
        _108 = Eq(move _109, const 0_i128);
        switchInt(move _108) -> [0: bb46, otherwise: bb45];
    }

    bb39: {
        StorageDead(_106);
        _104 = [move _105];
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = move _102 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_102);
        _96 = Arguments::<'_>::new_v1(move _97, move _101) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_101);
        StorageDead(_97);
        _95 = format(move _96) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_96);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_99);
        _94 = move _95;
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        _91 = <String as Deref>::deref(move _92) -> [return: bb42, unwind: bb64];
    }

    bb42: {
        _90 = &(*_91);
        StorageDead(_92);
        _89 = solana_program::log::sol_log(move _90) -> [return: bb43, unwind: bb64];
    }

    bb43: {
        StorageDead(_90);
        drop(_94) -> [return: bb44, unwind: bb67];
    }

    bb44: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(const 0_i128);
        goto -> bb59;
    }

    bb45: {
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _149 = const _;
        _121 = &(*_149);
        _120 = &(*_121);
        _119 = move _120 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_120);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &((*_1).21: u16);
        _128 = &(*_129);
        _127 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _128) -> [return: bb47, unwind continue];
    }

    bb46: {
        StorageDead(_109);
        _85 = const ();
        StorageDead(_108);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &mut (*_3);
        _130 = User::get_quote_spot_position_mut(move _131) -> [return: bb53, unwind continue];
    }

    bb47: {
        StorageDead(_128);
        _126 = [move _127];
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = move _124 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_124);
        _118 = Arguments::<'_>::new_v1(move _119, move _123) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_123);
        StorageDead(_119);
        _117 = format(move _118) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_118);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_121);
        _116 = move _117;
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = <String as Deref>::deref(move _114) -> [return: bb50, unwind: bb63];
    }

    bb50: {
        _112 = &(*_113);
        StorageDead(_114);
        _111 = solana_program::log::sol_log(move _112) -> [return: bb51, unwind: bb63];
    }

    bb51: {
        StorageDead(_112);
        drop(_116) -> [return: bb52, unwind: bb67];
    }

    bb52: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_111);
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(const 0_i128);
        StorageDead(_108);
        goto -> bb59;
    }

    bb53: {
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = _5;
        StorageLive(_136);
        _136 = &mut (*_2);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &mut ((*_1).2: state::perp_market::PoolBalance);
        _138 = &mut (*_139);
        _137 = move _138 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_138);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &mut (*_130);
        _140 = move _141 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_141);
        _134 = transfer_spot_balances(move _135, move _136, move _137, move _140) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_135);
        _133 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _134) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_134);
        _142 = discriminant(_133);
        switchInt(move _142) -> [0: bb56, 1: bb57, otherwise: bb6];
    }

    bb56: {
        StorageLive(_146);
        _146 = ((_133 as Continue).0: ());
        _132 = _146;
        StorageDead(_146);
        StorageDead(_139);
        StorageDead(_133);
        StorageDead(_132);
        StorageLive(_147);
        _147 = _5;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _147);
        StorageDead(_147);
        StorageDead(_130);
        StorageDead(_5);
        goto -> bb62;
    }

    bb57: {
        StorageLive(_143);
        _143 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_145);
        _145 = _143;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _145) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_145);
        StorageDead(_143);
        StorageDead(_139);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_130);
        goto -> bb61;
    }

    bb59: {
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_6);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_5);
        goto -> bb62;
    }

    bb62: {
        return;
    }

    bb63 (cleanup): {
        drop(_116) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        drop(_94) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb65 (cleanup): {
        drop(_62) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_43) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        resume;
    }
}
