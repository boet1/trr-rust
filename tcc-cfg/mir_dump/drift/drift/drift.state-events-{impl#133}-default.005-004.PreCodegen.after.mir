// MIR for `state::events::<impl at programs/drift/src/state/events.rs:495:60: 495:67>::default` after PreCodegen

fn state::events::<impl at programs/drift/src/state/events.rs:495:60: 495:67>::default() -> PerpBankruptcyRecord {
    let mut _0: state::events::PerpBankruptcyRecord;
    let mut _1: u16;
    let mut _2: i128;
    let mut _3: u128;
    let mut _4: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _5: std::option::Option<u128>;
    let mut _6: i128;

    bb0: {
        StorageLive(_1);
        _1 = <u16 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <i128 as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <u128 as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <Option<anchor_lang::prelude::Pubkey> as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <Option<u128> as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <i128 as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = PerpBankruptcyRecord { market_index: move _1, pnl: move _2, if_payment: move _3, clawback_user: move _4, clawback_user_payment: move _5, cumulative_funding_rate_delta: move _6 };
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
