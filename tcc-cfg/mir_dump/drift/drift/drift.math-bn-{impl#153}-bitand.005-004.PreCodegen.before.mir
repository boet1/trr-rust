// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:1498:3: 1498:51>::bitand` before PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:1498:3: 1498:51>::bitand(_1: U192, _2: U192) -> U192 {
    debug self => _1;
    debug other => _2;
    let mut _0: math::bn::U192;
    let _3: &[u64; 3];
    let _6: ();
    let mut _7: std::ops::Range<usize>;
    let mut _8: std::ops::Range<usize>;
    let mut _10: ();
    let _11: ();
    let mut _12: std::option::Option<usize>;
    let mut _13: &mut std::ops::Range<usize>;
    let mut _14: &mut std::ops::Range<usize>;
    let mut _15: isize;
    let mut _16: !;
    let mut _18: u64;
    let _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: u64;
    let _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    let mut _29: [u64; 3];
    scope 1 {
        debug arr1 => _3;
        let _4: &[u64; 3];
        scope 2 {
            debug arr2 => _4;
            let mut _5: [u64; 3];
            scope 3 {
                debug ret => _5;
                let mut _9: std::ops::Range<usize>;
                scope 4 {
                    debug iter => _9;
                    let _17: usize;
                    scope 5 {
                        debug i => _17;
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &(_1.0: [u64; 3]);
        StorageLive(_4);
        _4 = &(_2.0: [u64; 3]);
        StorageLive(_5);
        _5 = [const 0_u64; 3];
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = std::ops::Range::<usize> { start: const 0_usize, end: const 3_usize };
        _7 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = move _7;
        goto -> bb2;
    }

    bb2: {
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _9;
        _13 = &mut (*_14);
        _12 = <std::ops::Range<usize> as Iterator>::next(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_17);
        _17 = ((_12 as Some).0: usize);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _17;
        _20 = Len((*_3));
        _21 = Lt(_19, _20);
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _6 = const ();
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_29);
        _29 = _5;
        _0 = U192(move _29);
        StorageDead(_29);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }

    bb7: {
        _18 = (*_3)[_19];
        StorageLive(_22);
        StorageLive(_23);
        _23 = _17;
        _24 = Len((*_4));
        _25 = Lt(_23, _24);
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb8, unwind continue];
    }

    bb8: {
        _22 = (*_4)[_23];
        StorageLive(_26);
        _26 = _17;
        _27 = Len(_5);
        _28 = Lt(_26, _27);
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> [success: bb9, unwind continue];
    }

    bb9: {
        _5[_26] = BitAnd(move _18, move _22);
        StorageDead(_22);
        StorageDead(_18);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_19);
        _11 = const ();
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        _10 = const ();
        goto -> bb2;
    }
}
