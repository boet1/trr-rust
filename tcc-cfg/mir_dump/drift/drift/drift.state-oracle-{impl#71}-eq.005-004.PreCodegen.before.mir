// MIR for `state::oracle::<impl at programs/drift/src/state/oracle.rs:736:66: 736:75>::eq` before PreCodegen

fn state::oracle::<impl at programs/drift/src/state/oracle.rs:736:66: 736:75>::eq(_1: &state::oracle::PrelaunchOracleParams, _2: &state::oracle::PrelaunchOracleParams) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: u16;
    let mut _5: u16;
    let mut _6: bool;
    let mut _7: &std::option::Option<i64>;
    let mut _8: &std::option::Option<i64>;
    let mut _9: &std::option::Option<i64>;
    let mut _10: &std::option::Option<i64>;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).0: u16);
        StorageLive(_5);
        _5 = ((*_2).0: u16);
        _3 = Eq(move _4, move _5);
        switchInt(move _3) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &((*_1).1: std::option::Option<i64>);
        StorageLive(_8);
        _8 = &((*_2).1: std::option::Option<i64>);
        _6 = <Option<i64> as PartialEq>::eq(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        _9 = &((*_1).2: std::option::Option<i64>);
        StorageLive(_10);
        _10 = &((*_2).2: std::option::Option<i64>);
        _0 = <Option<i64> as PartialEq>::eq(move _9, move _10) -> [return: bb7, unwind continue];
    }

    bb4: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb6;
    }

    bb5: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb6;
    }

    bb6: {
        _0 = const false;
        goto -> bb8;
    }

    bb7: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
