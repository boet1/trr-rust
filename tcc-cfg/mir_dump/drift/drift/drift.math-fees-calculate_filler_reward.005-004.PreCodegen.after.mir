// MIR for `calculate_filler_reward` after PreCodegen

fn calculate_filler_reward(_1: u64, _2: u64, _3: u64, _4: u64, _5: &OrderFillerRewardStructure) -> std::result::Result<u64, error::ErrorCode> {
    debug fee => _1;
    debug order_slot => _2;
    debug clock_slot => _3;
    debug multiplier => _4;
    debug filler_reward_structure => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: u64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _8: std::result::Result<u64, error::ErrorCode>;
    let mut _9: u64;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _11: std::result::Result<u64, error::ErrorCode>;
    let mut _12: u64;
    let mut _13: u64;
    let mut _14: u32;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: u64;
    let mut _20: u64;
    let mut _21: u32;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u64;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _29: std::result::Result<u128, error::ErrorCode>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _37: std::result::Result<u128, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: u128;
    let mut _43: u128;
    let mut _44: u128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: u128;
    let mut _54: u128;
    let mut _55: u128;
    let mut _56: (u128, bool);
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: u128;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: u128;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _71: std::result::Result<u128, error::ErrorCode>;
    let mut _72: u64;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _74: std::result::Result<u64, error::ErrorCode>;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _89: std::result::Result<u64, error::ErrorCode>;
    let mut _90: u128;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _92: std::result::Result<u128, error::ErrorCode>;
    let mut _93: u128;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _95: std::result::Result<u128, error::ErrorCode>;
    let mut _96: u128;
    let mut _97: &u128;
    let _98: u128;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _100: std::result::Result<u128, error::ErrorCode>;
    let mut _101: u128;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: u128;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: u64;
    let mut _125: u64;
    let mut _126: u64;
    scope 1 {
        debug size_filler_reward => _6;
        let _27: u128;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: u128;
        scope 10 {
            debug multiplier_precision => _27;
            let _35: u128;
            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _52: u128;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: u128;
            let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _67: u128;
            scope 15 {
                debug min_time_filler_reward => _35;
                let _68: u128;
                let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _81: u64;
                let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _86: u128;
                scope 28 {
                    debug slots_since_order => _68;
                    let _87: u64;
                    let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _106: u128;
                    let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _112: u128;
                    let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _117: u128;
                    let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _122: u64;
                    scope 37 {
                        debug time_filler_reward => _87;
                        let _123: u64;
                        scope 54 {
                            debug fee => _123;
                        }
                    }
                    scope 38 {
                        debug residual => _103;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug val => _106;
                        scope 41 {
                        }
                    }
                    scope 42 {
                        debug residual => _109;
                        scope 43 {
                        }
                    }
                    scope 44 {
                        debug val => _112;
                        scope 45 {
                        }
                    }
                    scope 46 {
                        debug residual => _114;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug val => _117;
                        scope 49 {
                        }
                    }
                    scope 50 {
                        debug residual => _119;
                        scope 51 {
                        }
                    }
                    scope 52 {
                        debug val => _122;
                        scope 53 {
                        }
                    }
                }
                scope 29 {
                    debug residual => _78;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _81;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug residual => _83;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _86;
                    scope 36 {
                    }
                }
            }
            scope 16 {
                debug residual => _49;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _52;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _58;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _61;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _64;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _67;
                scope 27 {
                }
            }
        }
        scope 11 {
            debug residual => _31;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _34;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _1;
        StorageLive(_13);
        StorageLive(_14);
        _14 = ((*_5).0: u32);
        _13 = move _14 as u64 (IntToInt);
        StorageDead(_14);
        _11 = <u64 as SafeMath>::safe_mul(move _12, move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _15 = discriminant(_10);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = ((_10 as Continue).0: u64);
        _9 = _19;
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_5).1: u32);
        _20 = move _21 as u64 (IntToInt);
        StorageDead(_21);
        _8 = <u64 as SafeMath>::safe_div(move _9, move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb77;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_9);
        _7 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_8);
        _22 = discriminant(_7);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_7 as Continue).0: u64);
        _6 = _26;
        StorageDead(_26);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = <i128 as Cast>::cast::<u128>(const _) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        goto -> bb77;
    }

    bb12: {
        _28 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        _30 = discriminant(_28);
        switchInt(move _30) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_28 as Continue).0: u128);
        _27 = _34;
        StorageDead(_34);
        StorageDead(_28);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = ((*_5).2: u128);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _4;
        _46 = <u64 as Cast>::cast::<u128>(move _47) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_28);
        goto -> bb76;
    }

    bb17: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: u128);
        _44 = _52;
        StorageDead(_52);
        StorageLive(_53);
        _53 = _27;
        _43 = <u128 as Ord>::max(move _44, move _53) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb73;
    }

    bb22: {
        StorageDead(_53);
        StorageDead(_44);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _27;
        _56 = CheckedMul(_55, const 100_u128);
        assert(!move (_56.1: bool), "attempt to compute `{} * {}`, which would overflow", move _55, const 100_u128) -> [success: bb23, unwind continue];
    }

    bb23: {
        _54 = move (_56.0: u128);
        StorageDead(_55);
        _42 = <u128 as Ord>::min(move _43, move _54) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_54);
        StorageDead(_43);
        _40 = <u128 as SafeMath>::safe_mul(move _41, move _42) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_40);
        _57 = discriminant(_39);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_39 as Continue).0: u128);
        _38 = _61;
        StorageDead(_61);
        StorageLive(_62);
        _62 = _27;
        _37 = <u128 as SafeMath>::safe_div(move _38, move _62) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb73;
    }

    bb30: {
        StorageDead(_62);
        StorageDead(_38);
        _36 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_37);
        _63 = discriminant(_36);
        switchInt(move _63) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_67);
        _67 = ((_36 as Continue).0: u128);
        _35 = _67;
        StorageDead(_67);
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_36);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _3;
        StorageLive(_76);
        _76 = _2;
        _74 = <u64 as SafeMath>::safe_sub(move _75, move _76) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_64);
        _64 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_66);
        StorageDead(_64);
        goto -> bb74;
    }

    bb35: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _74) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_74);
        _77 = discriminant(_73);
        switchInt(move _77) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_81);
        _81 = ((_73 as Continue).0: u64);
        _72 = _81;
        StorageDead(_81);
        _71 = <u64 as Cast>::cast::<u128>(move _72) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_78);
        _78 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb71;
    }

    bb40: {
        StorageDead(_72);
        _70 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_71);
        _82 = discriminant(_70);
        switchInt(move _82) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_86);
        _86 = ((_70 as Continue).0: u128);
        _69 = _86;
        StorageDead(_86);
        _68 = std::cmp::max::<u128>(const 1_u128, move _69) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_83);
        _83 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_85);
        StorageDead(_83);
        goto -> bb71;
    }

    bb45: {
        StorageDead(_69);
        StorageDead(_73);
        StorageDead(_70);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _68;
        _100 = <u128 as SafeMath>::safe_mul(move _101, const 100000000_u128) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_101);
        _99 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _100) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_100);
        _102 = discriminant(_99);
        switchInt(move _102) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_106);
        _106 = ((_99 as Continue).0: u128);
        _98 = _106;
        StorageDead(_106);
        _97 = &_98;
        _96 = <u128 as Roots>::nth_root(move _97, const 4_u32) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_103);
        _103 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb68;
    }

    bb51: {
        StorageDead(_97);
        StorageLive(_107);
        _107 = _35;
        _95 = <u128 as SafeMath>::safe_mul(move _96, move _107) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_107);
        StorageDead(_96);
        _94 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _95) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_95);
        _108 = discriminant(_94);
        switchInt(move _108) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_112);
        _112 = ((_94 as Continue).0: u128);
        _93 = _112;
        StorageDead(_112);
        _92 = <u128 as SafeMath>::safe_div(move _93, const 100_u128) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_109);
        _109 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_111);
        StorageDead(_109);
        goto -> bb68;
    }

    bb57: {
        StorageDead(_93);
        _91 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _92) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_92);
        _113 = discriminant(_91);
        switchInt(move _113) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_117);
        _117 = ((_91 as Continue).0: u128);
        _90 = _117;
        StorageDead(_117);
        _89 = <u128 as Cast>::cast::<u64>(move _90) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_114);
        _114 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_116);
        StorageDead(_114);
        goto -> bb69;
    }

    bb62: {
        StorageDead(_90);
        _88 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _89) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_89);
        _118 = discriminant(_88);
        switchInt(move _118) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_122);
        _122 = ((_88 as Continue).0: u64);
        _87 = _122;
        StorageDead(_122);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageLive(_123);
        StorageLive(_124);
        _124 = _6;
        StorageLive(_125);
        _125 = _87;
        _123 = std::cmp::min::<u64>(move _124, move _125) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_119);
        _119 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_121);
        StorageDead(_119);
        goto -> bb70;
    }

    bb67: {
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_126);
        _126 = _123;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _126);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_87);
        StorageDead(_68);
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_6);
        goto -> bb79;
    }

    bb68: {
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb72;
    }

    bb71: {
        StorageDead(_69);
        StorageDead(_73);
        StorageDead(_70);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_68);
        goto -> bb75;
    }

    bb73: {
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_45);
        StorageDead(_39);
        StorageDead(_36);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_35);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_27);
        goto -> bb78;
    }

    bb77: {
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_6);
        goto -> bb79;
    }

    bb79: {
        return;
    }
}
