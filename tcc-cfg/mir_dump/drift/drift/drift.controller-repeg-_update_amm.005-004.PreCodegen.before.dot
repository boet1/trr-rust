digraph Mir_0_745 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn _update_amm(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: &amp;ReErased state::oracle::MMOraclePriceData, _3: &amp;ReErased state::state::State, _4: i64, _5: u64) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let _6: ();<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: isize;<br align="left"/>let mut _9: !;<br align="left"/>let _10: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let _11: state::oracle::OraclePriceData;<br align="left"/>let mut _12: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let _13: math::oracle::OracleValidity;<br align="left"/>let mut _14: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, math::oracle::OracleValidity&gt;;<br align="left"/>let mut _15: std::result::Result&lt;math::oracle::OracleValidity, error::ErrorCode&gt;;<br align="left"/>let mut _16: state::user::MarketType;<br align="left"/>let mut _17: u16;<br align="left"/>let mut _18: i64;<br align="left"/>let mut _19: &amp;ReErased state::oracle::OraclePriceData;<br align="left"/>let mut _20: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let _21: &amp;ReErased state::state::ValidityGuardRails;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _24: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _25: state::perp_market::PerpMarket;<br align="left"/>let mut _26: isize;<br align="left"/>let _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _28: !;<br align="left"/>let mut _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _30: u64;<br align="left"/>let mut _31: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let _32: &amp;ReErased state::oracle::OracleSource;<br align="left"/>let mut _33: math::oracle::LogMode;<br align="left"/>let mut _34: isize;<br align="left"/>let _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _38: math::oracle::OracleValidity;<br align="left"/>let mut _39: i128;<br align="left"/>let mut _40: bool;<br align="left"/>let _41: ();<br align="left"/>let mut _42: bool;<br align="left"/>let mut _43: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _44: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _45: math::oracle::OracleValidity;<br align="left"/>let mut _46: std::option::Option&lt;math::oracle::DriftAction&gt;;<br align="left"/>let mut _47: math::oracle::DriftAction;<br align="left"/>let mut _48: isize;<br align="left"/>let _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _50: !;<br align="left"/>let mut _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _52: bool;<br align="left"/>let _53: i128;<br align="left"/>let mut _54: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _55: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _56: u8;<br align="left"/>let mut _57: u8;<br align="left"/>let mut _58: isize;<br align="left"/>let _59: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _60: !;<br align="left"/>let mut _61: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _62: i128;<br align="left"/>let mut _63: bool;<br align="left"/>let mut _64: i128;<br align="left"/>let _65: u128;<br align="left"/>let _66: u128;<br align="left"/>let _67: bool;<br align="left"/>let mut _68: (u128, u128, bool);<br align="left"/>let mut _69: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128, bool)&gt;;<br align="left"/>let mut _70: std::result::Result&lt;(u128, u128, bool), error::ErrorCode&gt;;<br align="left"/>let mut _71: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _72: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _73: isize;<br align="left"/>let _74: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _75: !;<br align="left"/>let mut _76: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _77: (u128, u128, bool);<br align="left"/>let _78: std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;;<br align="left"/>let _79: i128;<br align="left"/>let mut _80: (std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;, i128);<br align="left"/>let mut _81: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;, i128)&gt;;<br align="left"/>let mut _82: std::result::Result&lt;(std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;, i128), error::ErrorCode&gt;;<br align="left"/>let mut _83: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _84: u128;<br align="left"/>let mut _85: u128;<br align="left"/>let mut _86: bool;<br align="left"/>let mut _87: i128;<br align="left"/>let mut _88: isize;<br align="left"/>let _89: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _90: !;<br align="left"/>let mut _91: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _92: (std::boxed::Box&lt;state::perp_market::PerpMarket, std::alloc::Global&gt;, i128);<br align="left"/>let _93: bool;<br align="left"/>let mut _94: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _95: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _96: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _97: i128;<br align="left"/>let mut _98: bool;<br align="left"/>let mut _99: isize;<br align="left"/>let _100: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _101: !;<br align="left"/>let mut _102: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _103: bool;<br align="left"/>let mut _104: bool;<br align="left"/>let _105: ();<br align="left"/>let mut _106: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _107: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _108: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _109: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let _110: &amp;ReErased math::cp_curve::UpdateKResult;<br align="left"/>let _111: math::cp_curve::UpdateKResult;<br align="left"/>let mut _112: u128;<br align="left"/>let mut _113: u128;<br align="left"/>let mut _114: u128;<br align="left"/>let mut _115: isize;<br align="left"/>let _116: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _117: !;<br align="left"/>let mut _118: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _119: ();<br align="left"/>let mut _120: u128;<br align="left"/>let mut _121: i128;<br align="left"/>let _122: ();<br align="left"/>let mut _123: &amp;ReErased str;<br align="left"/>let _124: &amp;ReErased str;<br align="left"/>let mut _125: &amp;ReErased std::string::String;<br align="left"/>let _126: &amp;ReErased std::string::String;<br align="left"/>let _127: std::string::String;<br align="left"/>let _128: std::string::String;<br align="left"/>let mut _129: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _130: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _131: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _132: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _133: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _134: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _135: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _136: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _137: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _138: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _139: &amp;ReErased bool;<br align="left"/>let _140: &amp;ReErased bool;<br align="left"/>let _141: u64;<br align="left"/>let mut _142: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _143: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _144: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _145: isize;<br align="left"/>let _146: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _147: !;<br align="left"/>let mut _148: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _149: u64;<br align="left"/>let _150: ();<br align="left"/>let mut _151: bool;<br align="left"/>let mut _152: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _153: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _154: math::oracle::OracleValidity;<br align="left"/>let mut _155: std::option::Option&lt;math::oracle::DriftAction&gt;;<br align="left"/>let mut _156: math::oracle::DriftAction;<br align="left"/>let mut _157: isize;<br align="left"/>let _158: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _159: !;<br align="left"/>let mut _160: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _161: bool;<br align="left"/>let _162: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _163: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, std::option::Option&lt;i64&gt;&gt;;<br align="left"/>let mut _164: std::result::Result&lt;std::option::Option&lt;i64&gt;, error::ErrorCode&gt;;<br align="left"/>let mut _165: state::perp_market::PerpMarket;<br align="left"/>let mut _166: isize;<br align="left"/>let _167: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _168: !;<br align="left"/>let mut _169: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _170: std::option::Option&lt;i64&gt;;<br align="left"/>let _171: i64;<br align="left"/>let mut _172: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _173: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _174: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _175: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _176: i64;<br align="left"/>let mut _177: &amp;ReErased state::oracle::MMOraclePriceData;<br align="left"/>let mut _178: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _179: u64;<br align="left"/>let mut _180: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _181: isize;<br align="left"/>let _182: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _183: !;<br align="left"/>let mut _184: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _185: i64;<br align="left"/>let _186: (u32, u32);<br align="left"/>let mut _187: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u32, u32)&gt;;<br align="left"/>let mut _188: std::result::Result&lt;(u32, u32), error::ErrorCode&gt;;<br align="left"/>let mut _189: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _190: u64;<br align="left"/>let mut _191: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _192: u64;<br align="left"/>let mut _193: isize;<br align="left"/>let _194: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _195: !;<br align="left"/>let mut _196: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _197: (u32, u32);<br align="left"/>let _198: ();<br align="left"/>let mut _199: bool;<br align="left"/>let mut _200: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _201: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _202: math::oracle::OracleValidity;<br align="left"/>let mut _203: std::option::Option&lt;math::oracle::DriftAction&gt;;<br align="left"/>let mut _204: math::oracle::DriftAction;<br align="left"/>let mut _205: isize;<br align="left"/>let _206: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _207: !;<br align="left"/>let mut _208: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _209: bool;<br align="left"/>let _210: ();<br align="left"/>let mut _211: bool;<br align="left"/>let mut _212: u64;<br align="left"/>let mut _213: i128;<br align="left"/>let mut _214: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _215: isize;<br align="left"/>let mut _216: isize;<br align="left"/>let mut _217: isize;<br align="left"/>let mut _218: isize;<br align="left"/>let mut _219: isize;<br align="left"/>let mut _220: isize;<br align="left"/>let mut _221: *const state::perp_market::PerpMarket;<br align="left"/>let mut _222: *const state::perp_market::PerpMarket;<br align="left"/>let mut _223: *const state::perp_market::PerpMarket;<br align="left"/>let mut _224: *const state::perp_market::PerpMarket;<br align="left"/>let mut _225: *const ();<br align="left"/>let mut _226: usize;<br align="left"/>let mut _227: usize;<br align="left"/>let mut _228: usize;<br align="left"/>let mut _229: usize;<br align="left"/>let mut _230: bool;<br align="left"/>let mut _231: *const ();<br align="left"/>let mut _232: usize;<br align="left"/>let mut _233: usize;<br align="left"/>let mut _234: usize;<br align="left"/>let mut _235: usize;<br align="left"/>let mut _236: bool;<br align="left"/>let mut _237: *const ();<br align="left"/>let mut _238: usize;<br align="left"/>let mut _239: usize;<br align="left"/>let mut _240: usize;<br align="left"/>let mut _241: usize;<br align="left"/>let mut _242: bool;<br align="left"/>let mut _243: *const ();<br align="left"/>let mut _244: usize;<br align="left"/>let mut _245: usize;<br align="left"/>let mut _246: usize;<br align="left"/>let mut _247: usize;<br align="left"/>let mut _248: bool;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug mm_oracle_price_data =&gt; _2;<br align="left"/>debug state =&gt; _3;<br align="left"/>debug now =&gt; _4;<br align="left"/>debug clock_slot =&gt; _5;<br align="left"/>debug oracle_data =&gt; _10;<br align="left"/>debug oracle_validity =&gt; _13;<br align="left"/>debug residual =&gt; _27;<br align="left"/>debug val =&gt; _30;<br align="left"/>debug residual =&gt; _35;<br align="left"/>debug val =&gt; _38;<br align="left"/>debug amm_update_cost =&gt; _39;<br align="left"/>debug amm_not_successfully_updated =&gt; _40;<br align="left"/>debug residual =&gt; _49;<br align="left"/>debug val =&gt; _52;<br align="left"/>debug curve_update_intensity =&gt; _53;<br align="left"/>debug residual =&gt; _59;<br align="left"/>debug val =&gt; _62;<br align="left"/>debug optimal_peg =&gt; _65;<br align="left"/>debug fee_budget =&gt; _66;<br align="left"/>debug check_lower_bound =&gt; _67;<br align="left"/>debug residual =&gt; _74;<br align="left"/>debug val =&gt; _77;<br align="left"/>debug repegged_market =&gt; _78;<br align="left"/>debug repegged_cost =&gt; _79;<br align="left"/>debug residual =&gt; _89;<br align="left"/>debug val =&gt; _92;<br align="left"/>debug cost_applied =&gt; _93;<br align="left"/>debug residual =&gt; _100;<br align="left"/>debug val =&gt; _103;<br align="left"/>debug residual =&gt; _116;<br align="left"/>debug val =&gt; _119;<br align="left"/>debug res =&gt; _128;<br align="left"/>debug reserve_price_after =&gt; _141;<br align="left"/>debug residual =&gt; _146;<br align="left"/>debug val =&gt; _149;<br align="left"/>debug residual =&gt; _158;<br align="left"/>debug val =&gt; _161;<br align="left"/>debug sanitize_clamp_denominator =&gt; _162;<br align="left"/>debug residual =&gt; _167;<br align="left"/>debug val =&gt; _170;<br align="left"/>debug residual =&gt; _182;<br align="left"/>debug val =&gt; _185;<br align="left"/>debug residual =&gt; _194;<br align="left"/>debug val =&gt; _197;<br align="left"/>debug residual =&gt; _206;<br align="left"/>debug val =&gt; _209;<br align="left"/>>;
    bb0__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>_8 = discriminant(((*_1).22: state::perp_market::MarketStatus))<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb1__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_7 = const false<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_7 = const true<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb4__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Ok(const 0_i128)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_6 = const ()<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;(*_2)<br/></td></tr><tr><td align="left">_11 = MMOraclePriceData::get_safe_oracle_price_data(move _12)</td></tr></table>>];
    bb6__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_10 = &amp;_11<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_16 = state::user::MarketType::Perp<br/>StorageLive(_17)<br/>_17 = ((*_1).21: u16)<br/>StorageLive(_18)<br/>_18 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64)<br/>StorageLive(_19)<br/>_19 = &amp;(*_10)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;(((*_3).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails)<br/>_20 = &amp;(*_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = (*_1)<br/></td></tr><tr><td align="left">_24 = PerpMarket::get_max_confidence_interval_multiplier(move _25)</td></tr></table>>];
    bb7__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/></td></tr><tr><td align="left">_23 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _24)</td></tr></table>>];
    bb8__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_26 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb9__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_23 as Continue).0: u64)<br/>_22 = _30<br/>StorageDead(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource)<br/>_31 = &amp;(*_32)<br/>StorageLive(_33)<br/>_33 = LogMode::SafeMMOracle<br/></td></tr><tr><td align="left">_15 = oracle_validity(move _16, move _17, move _18, move _19, move _20, move _22, move _31, move _33, const 0_i8)</td></tr></table>>];
    bb10__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb11__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_23 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_29)<br/>_29 = _27<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _29)</td></tr></table>>];
    bb12__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>StorageDead(_27)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">_14 = &lt;std::result::Result&lt;OracleValidity, error::ErrorCode&gt; as Try&gt;::branch(move _15)</td></tr></table>>];
    bb14__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>_34 = discriminant(_14)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb15__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_14 as Continue).0: math::oracle::OracleValidity)<br/>_13 = _38<br/>StorageDead(_38)<br/>StorageDead(_32)<br/>StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_14)<br/>StorageLive(_39)<br/>_39 = const 0_i128<br/>StorageLive(_40)<br/>_40 = const false<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _13<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = DriftAction::UpdateAMMCurve<br/>_46 = Option::&lt;DriftAction&gt;::Some(move _47)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">_44 = is_oracle_valid_for_action(move _45, move _46)</td></tr></table>>];
    bb16__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_14 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_37)<br/>_37 = _35<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _37)</td></tr></table>>];
    bb17__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">_43 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _44)</td></tr></table>>];
    bb19__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>_48 = discriminant(_43)<br/></td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb20__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_43 as Continue).0: bool)<br/>_42 = _52<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb21__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_43 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_51)<br/>_51 = _49<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _51)</td></tr></table>>];
    bb22__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_49)<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = (((*_1).1: state::perp_market::AMM).70: u8)<br/></td></tr><tr><td align="left">_56 = std::cmp::min::&lt;u8&gt;(move _57, const 100_u8)</td></tr></table>>];
    bb24__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>_41 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/></td></tr><tr><td align="left">_55 = &lt;u8 as Cast&gt;::cast::&lt;i128&gt;(move _56)</td></tr></table>>];
    bb26__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/></td></tr><tr><td align="left">_54 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _55)</td></tr></table>>];
    bb27__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>_58 = discriminant(_54)<br/></td></tr><tr><td align="left">switchInt(move _58)</td></tr></table>>];
    bb28__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = ((_54 as Continue).0: i128)<br/>_53 = _62<br/>StorageDead(_62)<br/>StorageDead(_54)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _53<br/>_63 = Gt(move _64, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _63)</td></tr></table>>];
    bb29__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = ((_54 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_61)<br/>_61 = _59<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _61)</td></tr></table>>];
    bb30__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_59)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>_71 = &amp;(*_1)<br/>StorageLive(_72)<br/>_72 = &amp;(*_2)<br/></td></tr><tr><td align="left">_70 = calculate_optimal_peg_and_budget(move _71, move _72)</td></tr></table>>];
    bb32__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>_41 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>StorageDead(_71)<br/></td></tr><tr><td align="left">_69 = &lt;std::result::Result&lt;(u128, u128, bool), error::ErrorCode&gt; as Try&gt;::branch(move _70)</td></tr></table>>];
    bb34__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>_73 = discriminant(_69)<br/></td></tr><tr><td align="left">switchInt(move _73)</td></tr></table>>];
    bb35__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = ((_69 as Continue).0: (u128, u128, bool))<br/>_68 = _77<br/>StorageDead(_77)<br/>StorageLive(_65)<br/>_65 = (_68.0: u128)<br/>StorageLive(_66)<br/>_66 = (_68.1: u128)<br/>StorageLive(_67)<br/>_67 = (_68.2: bool)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = &amp;(*_1)<br/>StorageLive(_84)<br/>_84 = _65<br/>StorageLive(_85)<br/>_85 = _66<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>_87 = _53<br/>_86 = Ge(move _87, const 100_i128)<br/>StorageDead(_87)<br/></td></tr><tr><td align="left">_82 = adjust_amm(move _83, move _84, move _85, move _86)</td></tr></table>>];
    bb36__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_74)<br/>_74 = ((_69 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_76)<br/>_76 = _74<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _76)</td></tr></table>>];
    bb37__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageDead(_74)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">_81 = &lt;std::result::Result&lt;(Box&lt;PerpMarket&gt;, i128), error::ErrorCode&gt; as Try&gt;::branch(move _82)</td></tr></table>>];
    bb39__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>_88 = discriminant(_81)<br/></td></tr><tr><td align="left">switchInt(move _88)</td></tr></table>>];
    bb40__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_92)<br/>_92 = move ((_81 as Continue).0: (std::boxed::Box&lt;state::perp_market::PerpMarket&gt;, i128))<br/>_80 = move _92<br/>StorageDead(_92)<br/>StorageLive(_78)<br/>_78 = move (_80.0: std::boxed::Box&lt;state::perp_market::PerpMarket&gt;)<br/>StorageLive(_79)<br/>_79 = (_80.1: i128)<br/>_217 = discriminant(_81)<br/>StorageDead(_81)<br/>StorageDead(_80)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = &amp;mut (*_1)<br/>StorageLive(_97)<br/>_97 = _79<br/>StorageLive(_98)<br/>_98 = _67<br/></td></tr><tr><td align="left">_95 = apply_cost_to_market(move _96, move _97, move _98)</td></tr></table>>];
    bb41__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>_89 = ((_81 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_91)<br/>_91 = _89<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _91)</td></tr></table>>];
    bb42__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_89)<br/>_215 = discriminant(_81)<br/>StorageDead(_81)<br/>StorageDead(_80)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_97)<br/>StorageDead(_96)<br/></td></tr><tr><td align="left">_94 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _95)</td></tr></table>>];
    bb44__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_95)<br/>_99 = discriminant(_94)<br/></td></tr><tr><td align="left">switchInt(move _99)</td></tr></table>>];
    bb45__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_103)<br/>_103 = ((_94 as Continue).0: bool)<br/>_93 = _103<br/>StorageDead(_103)<br/>StorageDead(_94)<br/>StorageLive(_104)<br/>_104 = _93<br/></td></tr><tr><td align="left">switchInt(move _104)</td></tr></table>>];
    bb46__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageLive(_100)<br/>_100 = ((_94 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_102)<br/>_102 = _100<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _102)</td></tr></table>>];
    bb47__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/>StorageDead(_100)<br/>StorageDead(_94)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>_108 = &amp;mut (*_1)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>StorageLive(_112)<br/>_221 = (((_78.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_243 = _221 as *const () (PtrToPtr)<br/>_244 = _243 as usize (Transmute)<br/>_245 = AlignOf(state::perp_market::PerpMarket)<br/>_246 = Sub(_245, const 1_usize)<br/>_247 = BitAnd(_244, _246)<br/>_248 = Eq(_247, const 0_usize)<br/></td></tr><tr><td align="left">assert(_248, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _245, _244)</td></tr></table>>];
    bb49__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageLive(_122)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>StorageLive(_129)<br/>StorageLive(_130)<br/>StorageLive(_131)<br/>StorageLive(_132)<br/>_214 = const _<br/>_132 = &amp;(*_214)<br/>_131 = &amp;(*_132)<br/>_130 = move _131 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_131)<br/>StorageLive(_134)<br/>StorageLive(_135)<br/>StorageLive(_136)<br/>StorageLive(_137)<br/>StorageLive(_138)<br/>StorageLive(_139)<br/>StorageLive(_140)<br/>_140 = &amp;_67<br/>_139 = &amp;(*_140)<br/></td></tr><tr><td align="left">_138 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;bool&gt;(move _139)</td></tr></table>>];
    bb50__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/>StorageDead(_108)<br/></td></tr><tr><td align="left">_106 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _107)</td></tr></table>>];
    bb51__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_107)<br/>_115 = discriminant(_106)<br/></td></tr><tr><td align="left">switchInt(move _115)</td></tr></table>>];
    bb52__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageLive(_119)<br/>_119 = ((_106 as Continue).0: ())<br/>_105 = _119<br/>StorageDead(_119)<br/>StorageDead(_111)<br/>StorageDead(_110)<br/>StorageDead(_106)<br/>StorageDead(_105)<br/>StorageLive(_120)<br/>_224 = (((_78.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_225 = _224 as *const () (PtrToPtr)<br/>_226 = _225 as usize (Transmute)<br/>_227 = AlignOf(state::perp_market::PerpMarket)<br/>_228 = Sub(_227, const 1_usize)<br/>_229 = BitAnd(_226, _228)<br/>_230 = Eq(_229, const 0_usize)<br/></td></tr><tr><td align="left">assert(_230, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _227, _226)</td></tr></table>>];
    bb53__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageLive(_116)<br/>_116 = ((_106 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_118)<br/>_118 = _116<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _118)</td></tr></table>>];
    bb54__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageDead(_116)<br/>StorageDead(_111)<br/>StorageDead(_110)<br/>StorageDead(_106)<br/>StorageDead(_105)<br/>StorageDead(_104)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_139)<br/>_137 = [move _138]<br/>StorageDead(_138)<br/>_136 = &amp;_137<br/>_135 = &amp;(*_136)<br/>_134 = move _135 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_135)<br/></td></tr><tr><td align="left">_129 = Arguments::&lt;'_&gt;::new_v1(move _130, move _134)</td></tr></table>>];
    bb56__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_134)<br/>StorageDead(_130)<br/></td></tr><tr><td align="left">_128 = format(move _129)</td></tr></table>>];
    bb57__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_129)<br/>StorageDead(_140)<br/>StorageDead(_137)<br/>StorageDead(_136)<br/>StorageDead(_132)<br/>_127 = move _128<br/>StorageDead(_128)<br/>_126 = &amp;_127<br/>_125 = &amp;(*_126)<br/></td></tr><tr><td align="left">_124 = &lt;String as Deref&gt;::deref(move _125)</td></tr></table>>];
    bb58__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">_123 = &amp;(*_124)<br/>StorageDead(_125)<br/></td></tr><tr><td align="left">_122 = solana_program::log::sol_log(move _123)</td></tr></table>>];
    bb59__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_123)<br/></td></tr><tr><td align="left">drop(_127)</td></tr></table>>];
    bb60__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_127)<br/>StorageDead(_126)<br/>StorageDead(_124)<br/>StorageDead(_122)<br/>_40 = const true<br/>_41 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_104)<br/>StorageDead(_93)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">drop(_78)</td></tr></table>>];
    bb62__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/>StorageLive(_141)<br/>StorageLive(_142)<br/>StorageLive(_143)<br/>StorageLive(_144)<br/>_144 = &amp;((*_1).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_143 = AMM::reserve_price(move _144)</td></tr></table>>];
    bb65__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">65</td></tr><tr><td align="left" balign="left">StorageDead(_144)<br/></td></tr><tr><td align="left">_142 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _143)</td></tr></table>>];
    bb66__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">66</td></tr><tr><td align="left" balign="left">StorageDead(_143)<br/>_145 = discriminant(_142)<br/></td></tr><tr><td align="left">switchInt(move _145)</td></tr></table>>];
    bb67__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">67</td></tr><tr><td align="left" balign="left">StorageLive(_149)<br/>_149 = ((_142 as Continue).0: u64)<br/>_141 = _149<br/>StorageDead(_149)<br/>StorageDead(_142)<br/>StorageLive(_150)<br/>StorageLive(_151)<br/>StorageLive(_152)<br/>StorageLive(_153)<br/>StorageLive(_154)<br/>_154 = _13<br/>StorageLive(_155)<br/>StorageLive(_156)<br/>_156 = DriftAction::UpdateTwap<br/>_155 = Option::&lt;DriftAction&gt;::Some(move _156)<br/>StorageDead(_156)<br/></td></tr><tr><td align="left">_153 = is_oracle_valid_for_action(move _154, move _155)</td></tr></table>>];
    bb68__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">68</td></tr><tr><td align="left" balign="left">StorageLive(_146)<br/>_146 = ((_142 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_148)<br/>_148 = _146<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _148)</td></tr></table>>];
    bb69__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">69</td></tr><tr><td align="left" balign="left">StorageDead(_148)<br/>StorageDead(_146)<br/>StorageDead(_142)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb70__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">70</td></tr><tr><td align="left" balign="left">StorageDead(_155)<br/>StorageDead(_154)<br/></td></tr><tr><td align="left">_152 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _153)</td></tr></table>>];
    bb71__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">71</td></tr><tr><td align="left" balign="left">StorageDead(_153)<br/>_157 = discriminant(_152)<br/></td></tr><tr><td align="left">switchInt(move _157)</td></tr></table>>];
    bb72__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">72</td></tr><tr><td align="left" balign="left">StorageLive(_161)<br/>_161 = ((_152 as Continue).0: bool)<br/>_151 = _161<br/>StorageDead(_161)<br/></td></tr><tr><td align="left">switchInt(move _151)</td></tr></table>>];
    bb73__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">73</td></tr><tr><td align="left" balign="left">StorageLive(_158)<br/>_158 = ((_152 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_160)<br/>_160 = _158<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _160)</td></tr></table>>];
    bb74__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">74</td></tr><tr><td align="left" balign="left">StorageDead(_160)<br/>StorageDead(_158)<br/>StorageDead(_152)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb75__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">75</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>StorageLive(_162)<br/>StorageLive(_163)<br/>StorageLive(_164)<br/>StorageLive(_165)<br/>_165 = (*_1)<br/></td></tr><tr><td align="left">_164 = PerpMarket::get_sanitize_clamp_denominator(move _165)</td></tr></table>>];
    bb76__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">76</td></tr><tr><td align="left" balign="left">StorageDead(_152)<br/>_150 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb77__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">77</td></tr><tr><td align="left" balign="left">StorageDead(_165)<br/></td></tr><tr><td align="left">_163 = &lt;std::result::Result&lt;Option&lt;i64&gt;, error::ErrorCode&gt; as Try&gt;::branch(move _164)</td></tr></table>>];
    bb78__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">78</td></tr><tr><td align="left" balign="left">StorageDead(_164)<br/>_166 = discriminant(_163)<br/></td></tr><tr><td align="left">switchInt(move _166)</td></tr></table>>];
    bb79__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">79</td></tr><tr><td align="left" balign="left">StorageLive(_170)<br/>_170 = ((_163 as Continue).0: std::option::Option&lt;i64&gt;)<br/>_162 = _170<br/>StorageDead(_170)<br/>StorageDead(_163)<br/>StorageLive(_171)<br/>StorageLive(_172)<br/>StorageLive(_173)<br/>StorageLive(_174)<br/>StorageLive(_175)<br/>_175 = &amp;mut ((*_1).1: state::perp_market::AMM)<br/>_174 = &amp;mut (*_175)<br/>StorageLive(_176)<br/>_176 = _4<br/>StorageLive(_177)<br/>_177 = &amp;(*_2)<br/>StorageLive(_178)<br/>StorageLive(_179)<br/>_179 = _141<br/>_178 = Option::&lt;u64&gt;::Some(move _179)<br/>StorageDead(_179)<br/>StorageLive(_180)<br/>_180 = _162<br/></td></tr><tr><td align="left">_173 = update_oracle_price_twap(move _174, move _176, move _177, move _178, move _180)</td></tr></table>>];
    bb80__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">80</td></tr><tr><td align="left" balign="left">StorageLive(_167)<br/>_167 = ((_163 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_169)<br/>_169 = _167<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _169)</td></tr></table>>];
    bb81__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">81</td></tr><tr><td align="left" balign="left">StorageDead(_169)<br/>StorageDead(_167)<br/>StorageDead(_163)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb82__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">82</td></tr><tr><td align="left" balign="left">StorageDead(_180)<br/>StorageDead(_178)<br/>StorageDead(_177)<br/>StorageDead(_176)<br/>StorageDead(_174)<br/></td></tr><tr><td align="left">_172 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _173)</td></tr></table>>];
    bb83__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">83</td></tr><tr><td align="left" balign="left">StorageDead(_173)<br/>_181 = discriminant(_172)<br/></td></tr><tr><td align="left">switchInt(move _181)</td></tr></table>>];
    bb84__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">84</td></tr><tr><td align="left" balign="left">StorageLive(_185)<br/>_185 = ((_172 as Continue).0: i64)<br/>_171 = _185<br/>StorageDead(_185)<br/>StorageDead(_175)<br/>StorageDead(_172)<br/>StorageDead(_171)<br/>_150 = const ()<br/>StorageDead(_162)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb85__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">85</td></tr><tr><td align="left" balign="left">StorageLive(_182)<br/>_182 = ((_172 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_184)<br/>_184 = _182<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _184)</td></tr></table>>];
    bb86__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">86</td></tr><tr><td align="left" balign="left">StorageDead(_184)<br/>StorageDead(_182)<br/>StorageDead(_175)<br/>StorageDead(_172)<br/>StorageDead(_171)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb87__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">87</td></tr><tr><td align="left" balign="left">StorageDead(_151)<br/>StorageDead(_150)<br/>StorageLive(_186)<br/>StorageLive(_187)<br/>StorageLive(_188)<br/>StorageLive(_189)<br/>_189 = &amp;mut (*_1)<br/>StorageLive(_190)<br/>_190 = _141<br/>StorageLive(_191)<br/>StorageLive(_192)<br/>_192 = _5<br/>_191 = Option::&lt;u64&gt;::Some(move _192)<br/>StorageDead(_192)<br/></td></tr><tr><td align="left">_188 = update_spreads(move _189, move _190, move _191)</td></tr></table>>];
    bb88__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">88</td></tr><tr><td align="left" balign="left">StorageDead(_191)<br/>StorageDead(_190)<br/>StorageDead(_189)<br/></td></tr><tr><td align="left">_187 = &lt;std::result::Result&lt;(u32, u32), error::ErrorCode&gt; as Try&gt;::branch(move _188)</td></tr></table>>];
    bb89__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">89</td></tr><tr><td align="left" balign="left">StorageDead(_188)<br/>_193 = discriminant(_187)<br/></td></tr><tr><td align="left">switchInt(move _193)</td></tr></table>>];
    bb90__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">90</td></tr><tr><td align="left" balign="left">StorageLive(_197)<br/>_197 = ((_187 as Continue).0: (u32, u32))<br/>_186 = _197<br/>StorageDead(_197)<br/>StorageDead(_187)<br/>StorageDead(_186)<br/>StorageLive(_198)<br/>StorageLive(_199)<br/>StorageLive(_200)<br/>StorageLive(_201)<br/>StorageLive(_202)<br/>_202 = _13<br/>StorageLive(_203)<br/>StorageLive(_204)<br/>_204 = DriftAction::FillOrderAmm<br/>_203 = Option::&lt;DriftAction&gt;::Some(move _204)<br/>StorageDead(_204)<br/></td></tr><tr><td align="left">_201 = is_oracle_valid_for_action(move _202, move _203)</td></tr></table>>];
    bb91__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">91</td></tr><tr><td align="left" balign="left">StorageLive(_194)<br/>_194 = ((_187 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_196)<br/>_196 = _194<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _196)</td></tr></table>>];
    bb92__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">92</td></tr><tr><td align="left" balign="left">StorageDead(_196)<br/>StorageDead(_194)<br/>StorageDead(_187)<br/>StorageDead(_186)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb93__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">93</td></tr><tr><td align="left" balign="left">StorageDead(_203)<br/>StorageDead(_202)<br/></td></tr><tr><td align="left">_200 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _201)</td></tr></table>>];
    bb94__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">94</td></tr><tr><td align="left" balign="left">StorageDead(_201)<br/>_205 = discriminant(_200)<br/></td></tr><tr><td align="left">switchInt(move _205)</td></tr></table>>];
    bb95__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">95</td></tr><tr><td align="left" balign="left">StorageLive(_209)<br/>_209 = ((_200 as Continue).0: bool)<br/>_199 = _209<br/>StorageDead(_209)<br/></td></tr><tr><td align="left">switchInt(move _199)</td></tr></table>>];
    bb96__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">96</td></tr><tr><td align="left" balign="left">StorageLive(_206)<br/>_206 = ((_200 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_208)<br/>_208 = _206<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _208)</td></tr></table>>];
    bb97__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">97</td></tr><tr><td align="left" balign="left">StorageDead(_208)<br/>StorageDead(_206)<br/>StorageDead(_200)<br/>StorageDead(_199)<br/>StorageDead(_198)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb98__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">98</td></tr><tr><td align="left" balign="left">StorageDead(_200)<br/>StorageLive(_210)<br/>StorageLive(_211)<br/>_211 = _40<br/></td></tr><tr><td align="left">switchInt(move _211)</td></tr></table>>];
    bb99__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">99</td></tr><tr><td align="left" balign="left">StorageDead(_200)<br/>(((*_1).1: state::perp_market::AMM).73: bool) = const false<br/>_198 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb100__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">100</td></tr><tr><td align="left" balign="left">StorageLive(_212)<br/>_212 = _5<br/>(((*_1).1: state::perp_market::AMM).47: u64) = move _212<br/>StorageDead(_212)<br/>_210 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb101__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">101</td></tr><tr><td align="left" balign="left">_210 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb102__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">102</td></tr><tr><td align="left" balign="left">StorageDead(_211)<br/>StorageDead(_210)<br/>(((*_1).1: state::perp_market::AMM).73: bool) = const true<br/>_198 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb103__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">103</td></tr><tr><td align="left" balign="left">StorageDead(_199)<br/>StorageDead(_198)<br/>StorageLive(_213)<br/>_213 = _39<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Ok(move _213)<br/>StorageDead(_213)<br/>StorageDead(_141)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb104__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">104</td></tr><tr><td align="left" balign="left">StorageDead(_162)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb105__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">105</td></tr><tr><td align="left" balign="left">StorageDead(_151)<br/>StorageDead(_150)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb106__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">106</td></tr><tr><td align="left" balign="left">StorageDead(_141)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb107__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">107</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">drop(_78)</td></tr></table>>];
    bb108__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">108</td></tr><tr><td align="left" balign="left">StorageDead(_78)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb109__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">109</td></tr><tr><td align="left" balign="left">StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb110__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">110</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb111__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">111</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb112__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">112</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb113__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">113</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb114__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">114</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb115__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">115</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb116__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">116</td></tr><tr><td align="left">return</td></tr></table>>];
    bb117__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">117 (cleanup)</td></tr><tr><td align="left">drop(_127)</td></tr></table>>];
    bb118__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">118 (cleanup)</td></tr><tr><td align="left">drop(_78)</td></tr></table>>];
    bb119__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">119 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb120__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">120 (cleanup)</td></tr><tr><td align="left" balign="left">_220 = discriminant(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb121__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">121</td></tr><tr><td align="left" balign="left">_120 = (((*_224).1: state::perp_market::AMM).11: u128)<br/>(((*_1).1: state::perp_market::AMM).11: u128) = move _120<br/>StorageDead(_120)<br/>StorageLive(_121)<br/>_121 = _79<br/>_39 = move _121<br/>StorageDead(_121)<br/>_41 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb122__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">122</td></tr><tr><td align="left" balign="left">_114 = (((*_223).1: state::perp_market::AMM).6: u128)<br/>_111 = UpdateKResult { sqrt_k: move _112, base_asset_reserve: move _113, quote_asset_reserve: move _114 }<br/>StorageDead(_114)<br/>StorageDead(_113)<br/>StorageDead(_112)<br/>_110 = &amp;_111<br/>_109 = &amp;(*_110)<br/></td></tr><tr><td align="left">_107 = cp_curve::update_k(move _108, move _109)</td></tr></table>>];
    bb123__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">123</td></tr><tr><td align="left" balign="left">_113 = (((*_222).1: state::perp_market::AMM).5: u128)<br/>StorageLive(_114)<br/>_223 = (((_78.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_231 = _223 as *const () (PtrToPtr)<br/>_232 = _231 as usize (Transmute)<br/>_233 = AlignOf(state::perp_market::PerpMarket)<br/>_234 = Sub(_233, const 1_usize)<br/>_235 = BitAnd(_232, _234)<br/>_236 = Eq(_235, const 0_usize)<br/></td></tr><tr><td align="left">assert(_236, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _233, _232)</td></tr></table>>];
    bb124__0_745 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">124</td></tr><tr><td align="left" balign="left">_112 = (((*_221).1: state::perp_market::AMM).10: u128)<br/>StorageLive(_113)<br/>_222 = (((_78.0: std::ptr::Unique&lt;state::perp_market::PerpMarket&gt;).0: std::ptr::NonNull&lt;state::perp_market::PerpMarket&gt;).0: *const state::perp_market::PerpMarket)<br/>_237 = _222 as *const () (PtrToPtr)<br/>_238 = _237 as usize (Transmute)<br/>_239 = AlignOf(state::perp_market::PerpMarket)<br/>_240 = Sub(_239, const 1_usize)<br/>_241 = BitAnd(_238, _240)<br/>_242 = Eq(_241, const 0_usize)<br/></td></tr><tr><td align="left">assert(_242, &quot;misaligned pointer dereference: address must be a multiple of {} but is {}&quot;, _239, _238)</td></tr></table>>];
    bb0__0_745 -> bb2__0_745 [label="7"];
    bb0__0_745 -> bb2__0_745 [label="8"];
    bb0__0_745 -> bb1__0_745 [label="otherwise"];
    bb1__0_745 -> bb3__0_745 [label=""];
    bb2__0_745 -> bb3__0_745 [label=""];
    bb3__0_745 -> bb5__0_745 [label="0"];
    bb3__0_745 -> bb4__0_745 [label="otherwise"];
    bb4__0_745 -> bb116__0_745 [label=""];
    bb5__0_745 -> bb6__0_745 [label="return"];
    bb6__0_745 -> bb7__0_745 [label="return"];
    bb7__0_745 -> bb8__0_745 [label="return"];
    bb8__0_745 -> bb9__0_745 [label="0"];
    bb8__0_745 -> bb11__0_745 [label="1"];
    bb8__0_745 -> bb10__0_745 [label="otherwise"];
    bb9__0_745 -> bb13__0_745 [label="return"];
    bb11__0_745 -> bb12__0_745 [label="return"];
    bb12__0_745 -> bb114__0_745 [label=""];
    bb13__0_745 -> bb14__0_745 [label="return"];
    bb14__0_745 -> bb15__0_745 [label="0"];
    bb14__0_745 -> bb16__0_745 [label="1"];
    bb14__0_745 -> bb10__0_745 [label="otherwise"];
    bb15__0_745 -> bb18__0_745 [label="return"];
    bb16__0_745 -> bb17__0_745 [label="return"];
    bb17__0_745 -> bb114__0_745 [label=""];
    bb18__0_745 -> bb19__0_745 [label="return"];
    bb19__0_745 -> bb20__0_745 [label="0"];
    bb19__0_745 -> bb21__0_745 [label="1"];
    bb19__0_745 -> bb10__0_745 [label="otherwise"];
    bb20__0_745 -> bb24__0_745 [label="0"];
    bb20__0_745 -> bb23__0_745 [label="otherwise"];
    bb21__0_745 -> bb22__0_745 [label="return"];
    bb22__0_745 -> bb112__0_745 [label=""];
    bb23__0_745 -> bb25__0_745 [label="return"];
    bb24__0_745 -> bb64__0_745 [label=""];
    bb25__0_745 -> bb26__0_745 [label="return"];
    bb26__0_745 -> bb27__0_745 [label="return"];
    bb27__0_745 -> bb28__0_745 [label="0"];
    bb27__0_745 -> bb29__0_745 [label="1"];
    bb27__0_745 -> bb10__0_745 [label="otherwise"];
    bb28__0_745 -> bb32__0_745 [label="0"];
    bb28__0_745 -> bb31__0_745 [label="otherwise"];
    bb29__0_745 -> bb30__0_745 [label="return"];
    bb30__0_745 -> bb111__0_745 [label=""];
    bb31__0_745 -> bb33__0_745 [label="return"];
    bb32__0_745 -> bb63__0_745 [label=""];
    bb33__0_745 -> bb34__0_745 [label="return"];
    bb34__0_745 -> bb35__0_745 [label="0"];
    bb34__0_745 -> bb36__0_745 [label="1"];
    bb34__0_745 -> bb10__0_745 [label="otherwise"];
    bb35__0_745 -> bb38__0_745 [label="return"];
    bb36__0_745 -> bb37__0_745 [label="return"];
    bb37__0_745 -> bb110__0_745 [label=""];
    bb38__0_745 -> bb39__0_745 [label="return"];
    bb38__0_745 -> bb119__0_745 [label="unwind"];
    bb39__0_745 -> bb40__0_745 [label="0"];
    bb39__0_745 -> bb41__0_745 [label="1"];
    bb39__0_745 -> bb10__0_745 [label="otherwise"];
    bb40__0_745 -> bb43__0_745 [label="return"];
    bb40__0_745 -> bb118__0_745 [label="unwind"];
    bb41__0_745 -> bb42__0_745 [label="return"];
    bb41__0_745 -> bb120__0_745 [label="unwind"];
    bb42__0_745 -> bb109__0_745 [label=""];
    bb43__0_745 -> bb44__0_745 [label="return"];
    bb43__0_745 -> bb118__0_745 [label="unwind"];
    bb44__0_745 -> bb45__0_745 [label="0"];
    bb44__0_745 -> bb46__0_745 [label="1"];
    bb44__0_745 -> bb10__0_745 [label="otherwise"];
    bb45__0_745 -> bb49__0_745 [label="0"];
    bb45__0_745 -> bb48__0_745 [label="otherwise"];
    bb46__0_745 -> bb47__0_745 [label="return"];
    bb46__0_745 -> bb118__0_745 [label="unwind"];
    bb47__0_745 -> bb107__0_745 [label=""];
    bb48__0_745 -> bb124__0_745 [label="success"];
    bb49__0_745 -> bb55__0_745 [label="return"];
    bb49__0_745 -> bb118__0_745 [label="unwind"];
    bb50__0_745 -> bb51__0_745 [label="return"];
    bb50__0_745 -> bb118__0_745 [label="unwind"];
    bb51__0_745 -> bb52__0_745 [label="0"];
    bb51__0_745 -> bb53__0_745 [label="1"];
    bb51__0_745 -> bb10__0_745 [label="otherwise"];
    bb52__0_745 -> bb121__0_745 [label="success"];
    bb53__0_745 -> bb54__0_745 [label="return"];
    bb53__0_745 -> bb118__0_745 [label="unwind"];
    bb54__0_745 -> bb107__0_745 [label=""];
    bb55__0_745 -> bb56__0_745 [label="return"];
    bb55__0_745 -> bb118__0_745 [label="unwind"];
    bb56__0_745 -> bb57__0_745 [label="return"];
    bb56__0_745 -> bb118__0_745 [label="unwind"];
    bb57__0_745 -> bb58__0_745 [label="return"];
    bb57__0_745 -> bb117__0_745 [label="unwind"];
    bb58__0_745 -> bb59__0_745 [label="return"];
    bb58__0_745 -> bb117__0_745 [label="unwind"];
    bb59__0_745 -> bb60__0_745 [label="return"];
    bb59__0_745 -> bb118__0_745 [label="unwind"];
    bb60__0_745 -> bb61__0_745 [label=""];
    bb61__0_745 -> bb62__0_745 [label="return"];
    bb61__0_745 -> bb119__0_745 [label="unwind"];
    bb62__0_745 -> bb63__0_745 [label=""];
    bb63__0_745 -> bb64__0_745 [label=""];
    bb64__0_745 -> bb65__0_745 [label="return"];
    bb65__0_745 -> bb66__0_745 [label="return"];
    bb66__0_745 -> bb67__0_745 [label="0"];
    bb66__0_745 -> bb68__0_745 [label="1"];
    bb66__0_745 -> bb10__0_745 [label="otherwise"];
    bb67__0_745 -> bb70__0_745 [label="return"];
    bb68__0_745 -> bb69__0_745 [label="return"];
    bb69__0_745 -> bb106__0_745 [label=""];
    bb70__0_745 -> bb71__0_745 [label="return"];
    bb71__0_745 -> bb72__0_745 [label="0"];
    bb71__0_745 -> bb73__0_745 [label="1"];
    bb71__0_745 -> bb10__0_745 [label="otherwise"];
    bb72__0_745 -> bb76__0_745 [label="0"];
    bb72__0_745 -> bb75__0_745 [label="otherwise"];
    bb73__0_745 -> bb74__0_745 [label="return"];
    bb74__0_745 -> bb105__0_745 [label=""];
    bb75__0_745 -> bb77__0_745 [label="return"];
    bb76__0_745 -> bb87__0_745 [label=""];
    bb77__0_745 -> bb78__0_745 [label="return"];
    bb78__0_745 -> bb79__0_745 [label="0"];
    bb78__0_745 -> bb80__0_745 [label="1"];
    bb78__0_745 -> bb10__0_745 [label="otherwise"];
    bb79__0_745 -> bb82__0_745 [label="return"];
    bb80__0_745 -> bb81__0_745 [label="return"];
    bb81__0_745 -> bb104__0_745 [label=""];
    bb82__0_745 -> bb83__0_745 [label="return"];
    bb83__0_745 -> bb84__0_745 [label="0"];
    bb83__0_745 -> bb85__0_745 [label="1"];
    bb83__0_745 -> bb10__0_745 [label="otherwise"];
    bb84__0_745 -> bb87__0_745 [label=""];
    bb85__0_745 -> bb86__0_745 [label="return"];
    bb86__0_745 -> bb104__0_745 [label=""];
    bb87__0_745 -> bb88__0_745 [label="return"];
    bb88__0_745 -> bb89__0_745 [label="return"];
    bb89__0_745 -> bb90__0_745 [label="0"];
    bb89__0_745 -> bb91__0_745 [label="1"];
    bb89__0_745 -> bb10__0_745 [label="otherwise"];
    bb90__0_745 -> bb93__0_745 [label="return"];
    bb91__0_745 -> bb92__0_745 [label="return"];
    bb92__0_745 -> bb106__0_745 [label=""];
    bb93__0_745 -> bb94__0_745 [label="return"];
    bb94__0_745 -> bb95__0_745 [label="0"];
    bb94__0_745 -> bb96__0_745 [label="1"];
    bb94__0_745 -> bb10__0_745 [label="otherwise"];
    bb95__0_745 -> bb99__0_745 [label="0"];
    bb95__0_745 -> bb98__0_745 [label="otherwise"];
    bb96__0_745 -> bb97__0_745 [label="return"];
    bb97__0_745 -> bb106__0_745 [label=""];
    bb98__0_745 -> bb100__0_745 [label="0"];
    bb98__0_745 -> bb101__0_745 [label="otherwise"];
    bb99__0_745 -> bb103__0_745 [label=""];
    bb100__0_745 -> bb102__0_745 [label=""];
    bb101__0_745 -> bb102__0_745 [label=""];
    bb102__0_745 -> bb103__0_745 [label=""];
    bb103__0_745 -> bb116__0_745 [label=""];
    bb104__0_745 -> bb105__0_745 [label=""];
    bb105__0_745 -> bb106__0_745 [label=""];
    bb106__0_745 -> bb113__0_745 [label=""];
    bb107__0_745 -> bb108__0_745 [label="return"];
    bb107__0_745 -> bb119__0_745 [label="unwind"];
    bb108__0_745 -> bb109__0_745 [label=""];
    bb109__0_745 -> bb110__0_745 [label=""];
    bb110__0_745 -> bb111__0_745 [label=""];
    bb111__0_745 -> bb112__0_745 [label=""];
    bb112__0_745 -> bb113__0_745 [label=""];
    bb113__0_745 -> bb115__0_745 [label=""];
    bb114__0_745 -> bb115__0_745 [label=""];
    bb115__0_745 -> bb116__0_745 [label=""];
    bb117__0_745 -> bb118__0_745 [label="return"];
    bb118__0_745 -> bb119__0_745 [label="return"];
    bb120__0_745 -> bb119__0_745 [label=""];
    bb121__0_745 -> bb61__0_745 [label=""];
    bb122__0_745 -> bb50__0_745 [label="return"];
    bb122__0_745 -> bb118__0_745 [label="unwind"];
    bb123__0_745 -> bb122__0_745 [label="success"];
    bb124__0_745 -> bb123__0_745 [label="success"];
}
