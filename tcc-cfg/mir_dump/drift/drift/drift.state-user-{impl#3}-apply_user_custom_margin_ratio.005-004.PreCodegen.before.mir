// MIR for `state::user::<impl at programs/drift/src/state/user.rs:744:1: 744:25>::apply_user_custom_margin_ratio` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:744:1: 744:25>::apply_user_custom_margin_ratio(_1: OrderFillSimulation, _2: &SpotMarket, _3: i64, _4: u32) -> std::result::Result<OrderFillSimulation, error::ErrorCode> {
    debug self => _1;
    debug spot_market => _2;
    debug oracle_price => _3;
    debug user_custom_margin_ratio => _4;
    let mut _0: std::result::Result<state::user::OrderFillSimulation, error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: u32;
    let mut _8: !;
    let mut _9: state::user::OrderFillSimulation;
    let _10: ();
    let mut _11: bool;
    let mut _12: i128;
    let _13: u32;
    let mut _14: u32;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _16: std::result::Result<u32, error::ErrorCode>;
    let mut _17: &state::spot_market::SpotMarket;
    let mut _18: u128;
    let mut _19: i128;
    let mut _20: &math::margin::MarginRequirementType;
    let _21: &math::margin::MarginRequirementType;
    let _22: math::margin::MarginRequirementType;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: u32;
    let mut _28: u32;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _30: std::result::Result<u32, error::ErrorCode>;
    let mut _31: u32;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: u32;
    let mut _37: i128;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _39: std::result::Result<i128, error::ErrorCode>;
    let mut _40: i128;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _42: std::result::Result<i128, error::ErrorCode>;
    let mut _43: i128;
    let mut _44: i128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _46: std::result::Result<i128, error::ErrorCode>;
    let mut _47: u32;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: bool;
    let mut _64: i128;
    let _65: u32;
    let mut _66: u32;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _68: std::result::Result<u32, error::ErrorCode>;
    let mut _69: &state::spot_market::SpotMarket;
    let mut _70: u128;
    let mut _71: i128;
    let mut _72: i64;
    let mut _73: &math::margin::MarginRequirementType;
    let _74: &math::margin::MarginRequirementType;
    let _75: math::margin::MarginRequirementType;
    let mut _76: isize;
    let _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _80: u32;
    let mut _81: u32;
    let mut _82: u32;
    let mut _83: i128;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _85: std::result::Result<i128, error::ErrorCode>;
    let mut _86: i128;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _88: std::result::Result<i128, error::ErrorCode>;
    let mut _89: i128;
    let mut _90: i128;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _92: std::result::Result<i128, error::ErrorCode>;
    let mut _93: u32;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: i128;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _111: std::result::Result<i128, error::ErrorCode>;
    let mut _112: i128;
    let mut _113: i128;
    let mut _114: isize;
    let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _118: i128;
    let mut _119: state::user::OrderFillSimulation;
    let mut _120: &math::margin::MarginRequirementType;
    let mut _121: &math::margin::MarginRequirementType;
    scope 1 {
        debug max_liability_weight => _13;
        let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _52: i128;
        let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _57: i128;
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: i128;
        scope 10 {
            debug residual => _49;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _52;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _54;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _57;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _59;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _62;
            scope 21 {
            }
        }
    }
    scope 2 {
        debug residual => _24;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _27;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _33;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _36;
        scope 9 {
        }
    }
    scope 22 {
        debug min_asset_weight => _65;
        let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _98: i128;
        let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _103: i128;
        let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _108: i128;
        scope 27 {
            debug residual => _95;
            scope 28 {
            }
        }
        scope 29 {
            debug val => _98;
            scope 30 {
            }
        }
        scope 31 {
            debug residual => _100;
            scope 32 {
            }
        }
        scope 33 {
            debug val => _103;
            scope 34 {
            }
        }
        scope 35 {
            debug residual => _105;
            scope 36 {
            }
        }
        scope 37 {
            debug val => _108;
            scope 38 {
            }
        }
    }
    scope 23 {
        debug residual => _77;
        scope 24 {
        }
    }
    scope 25 {
        debug val => _80;
        scope 26 {
        }
    }
    scope 39 {
        debug residual => _115;
        scope 40 {
        }
    }
    scope 41 {
        debug val => _118;
        scope 42 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _4;
        _6 = Eq(move _7, const 0_u32);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = _1;
        _0 = std::result::Result::<OrderFillSimulation, error::ErrorCode>::Ok(move _9);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb73;
    }

    bb2: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = (_1.3: i128);
        _11 = Lt(move _12, const 0_i128);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = &(*_2);
        StorageLive(_18);
        StorageLive(_19);
        _19 = (_1.0: i128);
        _18 = core::num::<impl i128>::unsigned_abs(move _19) -> [return: bb5, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageLive(_63);
        StorageLive(_64);
        _64 = (_1.3: i128);
        _63 = Gt(move _64, const 0_i128);
        switchInt(move _63) -> [0: bb34, otherwise: bb33];
    }

    bb5: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _120 = const _;
        _21 = &(*_120);
        _20 = &(*_21);
        _16 = SpotMarket::get_liability_weight(move _17, move _18, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        _15 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        _23 = discriminant(_15);
        switchInt(move _23) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_27);
        _27 = ((_15 as Continue).0: u32);
        _14 = _27;
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _4;
        _30 = <u32 as SafeMath>::safe_add(move _31, const _) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_14);
        goto -> bb70;
    }

    bb12: {
        StorageDead(_31);
        _29 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_36);
        _36 = ((_29 as Continue).0: u32);
        _28 = _36;
        StorageDead(_36);
        _13 = <u32 as Ord>::max(move _14, move _28) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_14);
        StorageDead(_29);
        goto -> bb70;
    }

    bb17: {
        StorageDead(_28);
        StorageDead(_14);
        StorageDead(_29);
        StorageDead(_21);
        StorageDead(_15);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = (_1.2: i128);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _13;
        _46 = <u32 as Cast>::cast::<i128>(move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_47);
        _45 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb20, 1: bb21, otherwise: bb9];
    }

    bb20: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: i128);
        _44 = _52;
        StorageDead(_52);
        _42 = <i128 as SafeMath>::safe_mul(move _43, move _44) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb68;
    }

    bb23: {
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_42);
        _53 = discriminant(_41);
        switchInt(move _53) -> [0: bb25, 1: bb26, otherwise: bb9];
    }

    bb25: {
        StorageLive(_57);
        _57 = ((_41 as Continue).0: i128);
        _40 = _57;
        StorageDead(_57);
        _39 = <i128 as SafeMath>::safe_div(move _40, const _) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_54);
        _54 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb68;
    }

    bb28: {
        StorageDead(_40);
        _38 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _39) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_39);
        _58 = discriminant(_38);
        switchInt(move _58) -> [0: bb30, 1: bb31, otherwise: bb9];
    }

    bb30: {
        StorageLive(_62);
        _62 = ((_38 as Continue).0: i128);
        _37 = _62;
        StorageDead(_62);
        (_1.3: i128) = move _37;
        StorageDead(_37);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_38);
        _10 = const ();
        StorageDead(_13);
        goto -> bb59;
    }

    bb31: {
        StorageLive(_59);
        _59 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb69;
    }

    bb33: {
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_2);
        StorageLive(_70);
        StorageLive(_71);
        _71 = (_1.0: i128);
        _70 = core::num::<impl i128>::unsigned_abs(move _71) -> [return: bb35, unwind continue];
    }

    bb34: {
        StorageDead(_64);
        _10 = const ();
        goto -> bb58;
    }

    bb35: {
        StorageDead(_71);
        StorageLive(_72);
        _72 = _3;
        StorageLive(_73);
        StorageLive(_74);
        _121 = const _;
        _74 = &(*_121);
        _73 = &(*_74);
        _68 = SpotMarket::get_asset_weight(move _69, move _70, move _72, move _73) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_69);
        _67 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _68) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb38, 1: bb39, otherwise: bb9];
    }

    bb38: {
        StorageLive(_80);
        _80 = ((_67 as Continue).0: u32);
        _66 = _80;
        StorageDead(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _4;
        _81 = core::num::<impl u32>::saturating_sub(const _, move _82) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_77);
        _77 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_79);
        _79 = _77;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _79) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_66);
        StorageDead(_74);
        StorageDead(_67);
        goto -> bb67;
    }

    bb41: {
        StorageDead(_82);
        _65 = <u32 as Ord>::min(move _66, move _81) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_74);
        StorageDead(_67);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = (_1.2: i128);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = _65;
        _92 = <u32 as Cast>::cast::<i128>(move _93) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_93);
        _91 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _92) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_92);
        _94 = discriminant(_91);
        switchInt(move _94) -> [0: bb45, 1: bb46, otherwise: bb9];
    }

    bb45: {
        StorageLive(_98);
        _98 = ((_91 as Continue).0: i128);
        _90 = _98;
        StorageDead(_98);
        _88 = <i128 as SafeMath>::safe_mul(move _89, move _90) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_95);
        _95 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb65;
    }

    bb48: {
        StorageDead(_90);
        StorageDead(_89);
        _87 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _88) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_88);
        _99 = discriminant(_87);
        switchInt(move _99) -> [0: bb50, 1: bb51, otherwise: bb9];
    }

    bb50: {
        StorageLive(_103);
        _103 = ((_87 as Continue).0: i128);
        _86 = _103;
        StorageDead(_103);
        _85 = <i128 as SafeMath>::safe_div(move _86, const _) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_100);
        _100 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb65;
    }

    bb53: {
        StorageDead(_86);
        _84 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _85) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_85);
        _104 = discriminant(_84);
        switchInt(move _104) -> [0: bb55, 1: bb56, otherwise: bb9];
    }

    bb55: {
        StorageLive(_108);
        _108 = ((_84 as Continue).0: i128);
        _83 = _108;
        StorageDead(_108);
        (_1.3: i128) = move _83;
        StorageDead(_83);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_84);
        _10 = const ();
        StorageDead(_65);
        goto -> bb58;
    }

    bb56: {
        StorageLive(_105);
        _105 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_107);
        StorageDead(_105);
        goto -> bb66;
    }

    bb58: {
        StorageDead(_63);
        goto -> bb59;
    }

    bb59: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = (_1.3: i128);
        StorageLive(_113);
        _113 = (_1.1: i128);
        _111 = <i128 as SafeMath>::safe_add(move _112, move _113) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_113);
        StorageDead(_112);
        _110 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _111) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_111);
        _114 = discriminant(_110);
        switchInt(move _114) -> [0: bb62, 1: bb63, otherwise: bb9];
    }

    bb62: {
        StorageLive(_118);
        _118 = ((_110 as Continue).0: i128);
        _109 = _118;
        StorageDead(_118);
        (_1.4: i128) = move _109;
        StorageDead(_109);
        StorageDead(_110);
        StorageLive(_119);
        _119 = _1;
        _0 = std::result::Result::<OrderFillSimulation, error::ErrorCode>::Ok(move _119);
        StorageDead(_119);
        goto -> bb73;
    }

    bb63: {
        StorageLive(_115);
        _115 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_109);
        StorageDead(_110);
        goto -> bb73;
    }

    bb65: {
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_83);
        StorageDead(_91);
        StorageDead(_87);
        StorageDead(_84);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb72;
    }

    bb68: {
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_37);
        StorageDead(_45);
        StorageDead(_41);
        StorageDead(_38);
        goto -> bb71;
    }

    bb70: {
        StorageDead(_21);
        StorageDead(_15);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_13);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb73;
    }

    bb73: {
        return;
    }
}
