// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::from_little_endian` before PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::from_little_endian(_1: &[u8]) -> U256 {
    debug slice => _1;
    let mut _0: math::bn::U256;
    let _2: ();
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: (usize, bool);
    let mut _6: usize;
    let mut _7: &[u8];
    let mut _8: !;
    let mut _9: [u8; 32];
    let _10: ();
    let mut _11: &mut [u8];
    let mut _12: &mut [u8];
    let mut _13: &mut [u8; 32];
    let mut _14: std::ops::Range<usize>;
    let mut _15: usize;
    let mut _16: &[u8];
    let mut _17: &[u8];
    let _18: &&[u8];
    let _20: ();
    let mut _21: std::ops::Range<usize>;
    let mut _22: std::ops::Range<usize>;
    let mut _24: ();
    let _25: ();
    let mut _26: std::option::Option<usize>;
    let mut _27: &mut std::ops::Range<usize>;
    let mut _28: &mut std::ops::Range<usize>;
    let mut _29: isize;
    let mut _30: !;
    let mut _32: u64;
    let mut _33: &[u8];
    let _34: &[u8];
    let _35: &[u8];
    let mut _36: &[u8; 32];
    let mut _37: std::ops::RangeFrom<usize>;
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: (usize, bool);
    let _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    let mut _44: [u64; 4];
    let mut _45: &[u8];
    scope 1 {
        debug padded => _9;
        let mut _19: [u64; 4];
        scope 2 {
            debug ret => _19;
            let mut _23: std::ops::Range<usize>;
            scope 3 {
                debug iter => _23;
                let _31: usize;
                scope 4 {
                    debug i => _31;
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _5 = CheckedMul(const 4_usize, const 8_usize);
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_usize, const 8_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _4 = move (_5.0: usize);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        _6 = core::slice::<impl [u8]>::len(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _3 = Ge(move _4, move _6);
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageDead(_4);
        _2 = const ();
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_9);
        _9 = [const 0_u8; 32];
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _9;
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        _15 = core::slice::<impl [u8]>::len(move _16) -> [return: bb5, unwind continue];
    }

    bb4: {
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_8);
        _8 = panic(const "assertion failed: 4 * 8 >= slice.len()") -> unwind continue;
    }

    bb5: {
        StorageDead(_16);
        _14 = std::ops::Range::<usize> { start: const 0_usize, end: move _15 };
        StorageDead(_15);
        _12 = <[u8; 32] as IndexMut<std::ops::Range<usize>>>::index_mut(move _13, move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = &mut (*_12);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_17);
        StorageLive(_18);
        _18 = &_1;
        _45 = deref_copy (*_18);
        _17 = &(*_45);
        _10 = core::slice::<impl [u8]>::copy_from_slice(move _11, move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_11);
        StorageDead(_18);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_19);
        _19 = [const 0_u64; 4];
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = std::ops::Range::<usize> { start: const 0_usize, end: const 4_usize };
        _21 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_22);
        StorageLive(_23);
        _23 = move _21;
        goto -> bb9;
    }

    bb9: {
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &mut _23;
        _27 = &mut (*_28);
        _26 = <std::ops::Range<usize> as Iterator>::next(move _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_27);
        _29 = discriminant(_26);
        switchInt(move _29) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        StorageLive(_31);
        _31 = ((_26 as Some).0: usize);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_9;
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = _31;
        _40 = CheckedMul(const 8_usize, _39);
        assert(!move (_40.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_usize, move _39) -> [success: bb14, unwind continue];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        _20 = const ();
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_44);
        _44 = _19;
        _0 = U256(move _44);
        StorageDead(_44);
        StorageDead(_19);
        StorageDead(_9);
        return;
    }

    bb14: {
        _38 = move (_40.0: usize);
        StorageDead(_39);
        _37 = RangeFrom::<usize> { start: move _38 };
        StorageDead(_38);
        _35 = <[u8; 32] as Index<RangeFrom<usize>>>::index(move _36, move _37) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = &(*_35);
        _33 = &(*_34);
        _32 = <LittleEndian as ByteOrder>::read_u64(move _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageLive(_41);
        _41 = _31;
        _42 = Len(_19);
        _43 = Lt(_41, _42);
        assert(move _43, "index out of bounds: the length is {} but the index is {}", move _42, _41) -> [success: bb17, unwind continue];
    }

    bb17: {
        _19[_41] = move _32;
        StorageDead(_32);
        StorageDead(_41);
        StorageDead(_35);
        StorageDead(_34);
        _25 = const ();
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        _24 = const ();
        goto -> bb9;
    }
}
