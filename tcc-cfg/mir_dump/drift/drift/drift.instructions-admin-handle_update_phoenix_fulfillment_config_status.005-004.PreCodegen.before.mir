// MIR for `admin::handle_update_phoenix_fulfillment_config_status` before PreCodegen

fn admin::handle_update_phoenix_fulfillment_config_status(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::UpdatePhoenixFulfillmentConfig<'_>>, _2: state::spot_market::SpotFulfillmentConfigStatus) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug status => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, error::ErrorCode>;
    let mut _6: std::result::Result<std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _8: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let _14: ();
    let mut _15: &str;
    let _16: &str;
    let mut _17: &std::string::String;
    let _18: &std::string::String;
    let _19: std::string::String;
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[&str; 2];
    let _24: &[&str; 2];
    let _25: [&str; 2];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let mut _27: &[core::fmt::rt::Argument<'_>; 2];
    let _28: &[core::fmt::rt::Argument<'_>; 2];
    let _29: [core::fmt::rt::Argument<'_>; 2];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &state::spot_market::SpotFulfillmentConfigStatus;
    let _32: &state::spot_market::SpotFulfillmentConfigStatus;
    let _33: &state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _34: &std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _35: core::fmt::rt::Argument<'_>;
    let mut _36: &state::spot_market::SpotFulfillmentConfigStatus;
    let _37: &state::spot_market::SpotFulfillmentConfigStatus;
    let mut _38: state::spot_market::SpotFulfillmentConfigStatus;
    let mut _39: &mut state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _40: &mut std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _41: ();
    let mut _43: &mut instructions::admin::UpdatePhoenixFulfillmentConfig<'_>;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    scope 1 {
        debug config => _3;
        let _20: std::string::String;
        let mut _42: &[&str; 2];
        scope 6 {
            debug res => _20;
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _43 = deref_copy (_1.1: &mut instructions::admin::UpdatePhoenixFulfillmentConfig<'_>);
        _7 = &((*_43).1: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, PhoenixV1FulfillmentConfig>::load_mut(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _5 = std::result::Result::<RefMut<'_, PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _6, move _8) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, PhoenixV1FulfillmentConfig>, error::ErrorCode> as Try>::branch(move _5) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        StorageDead(_5);
        _9 = discriminant(_4);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>);
        _3 = move _13;
        StorageDead(_13);
        _46 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _42 = const _;
        _24 = &(*_42);
        _23 = &(*_24);
        _22 = move _23 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_23);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_3;
        _33 = <RefMut<'_, PhoenixV1FulfillmentConfig> as Deref>::deref(move _34) -> [return: bb8, unwind: bb20];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        _44 = discriminant(_4);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb18;
    }

    bb8: {
        StorageDead(_34);
        _32 = &((*_33).8: state::spot_market::SpotFulfillmentConfigStatus);
        _31 = &(*_32);
        _30 = core::fmt::rt::Argument::<'_>::new_debug::<state::spot_market::SpotFulfillmentConfigStatus>(move _31) -> [return: bb9, unwind: bb20];
    }

    bb9: {
        StorageDead(_31);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_2;
        _36 = &(*_37);
        _35 = core::fmt::rt::Argument::<'_>::new_debug::<state::spot_market::SpotFulfillmentConfigStatus>(move _36) -> [return: bb10, unwind: bb20];
    }

    bb10: {
        StorageDead(_36);
        _29 = [move _30, move _35];
        StorageDead(_35);
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = move _27 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_27);
        _21 = Arguments::<'_>::new_v1(move _22, move _26) -> [return: bb11, unwind: bb20];
    }

    bb11: {
        StorageDead(_26);
        StorageDead(_22);
        _20 = format(move _21) -> [return: bb12, unwind: bb20];
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_24);
        _19 = move _20;
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = <String as Deref>::deref(move _17) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _15 = &(*_16);
        StorageDead(_17);
        _14 = solana_program::log::sol_log(move _15) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        StorageDead(_15);
        drop(_19) -> [return: bb15, unwind: bb20];
    }

    bb15: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_38);
        _38 = _2;
        StorageLive(_39);
        StorageLive(_40);
        _40 = &mut _3;
        _39 = <RefMut<'_, PhoenixV1FulfillmentConfig> as DerefMut>::deref_mut(move _40) -> [return: bb16, unwind: bb20];
    }

    bb16: {
        StorageDead(_40);
        ((*_39).8: state::spot_market::SpotFulfillmentConfigStatus) = move _38;
        StorageDead(_38);
        StorageDead(_39);
        StorageLive(_41);
        _41 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _41);
        StorageDead(_41);
        drop(_3) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        StorageDead(_3);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_19) -> [return: bb20, unwind terminate(cleanup)];
    }

    bb20 (cleanup): {
        drop(_3) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        _48 = discriminant(_4);
        goto -> bb21;
    }
}
