// MIR for `fulfill_spot_order_with_external_market` before PreCodegen

fn fulfill_spot_order_with_external_market(_1: &mut SpotMarket, _2: &mut SpotMarket, _3: &mut User, _4: &mut UserStats, _5: usize, _6: &anchor_lang::prelude::Pubkey, _7: Option<&mut User>, _8: Option<&mut UserStats>, _9: &anchor_lang::prelude::Pubkey, _10: i64, _11: u64, _12: &mut OracleMap<'_>, _13: &state::state::FeeStructure, _14: &mut dyn SpotFulfillmentParams) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug base_market => _1;
    debug quote_market => _2;
    debug taker => _3;
    debug taker_stats => _4;
    debug taker_order_index => _5;
    debug taker_key => _6;
    debug filler => _7;
    debug filler_stats => _8;
    debug filler_key => _9;
    debug now => _10;
    debug slot => _11;
    debug oracle_map => _12;
    debug fee_structure => _13;
    debug fulfillment_params => _14;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _15: i64;
    let mut _16: &state::oracle::OraclePriceData;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _18: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _19: &mut state::oracle_map::OracleMap<'_>;
    let mut _20: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _21: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _22: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _23: &state::spot_market::SpotMarket;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: &state::oracle::OraclePriceData;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<u64>>;
    let mut _31: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _32: &state::user::Order;
    let _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: std::option::Option<i64>;
    let mut _37: i64;
    let mut _38: std::option::Option<u64>;
    let mut _39: u64;
    let mut _40: u64;
    let mut _41: std::option::Option<state::protected_maker_mode_config::ProtectedMakerParams>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _49: std::result::Result<i128, error::ErrorCode>;
    let mut _50: &state::user::SpotPosition;
    let _51: &mut state::user::SpotPosition;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _53: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _54: &mut state::user::User;
    let mut _55: u16;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: &state::spot_market::SpotMarket;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _69: std::result::Result<u64, error::ErrorCode>;
    let mut _70: &state::user::Order;
    let _71: usize;
    let mut _72: usize;
    let mut _73: bool;
    let mut _74: std::option::Option<i64>;
    let mut _75: i64;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _77: std::result::Result<i64, error::ErrorCode>;
    let mut _78: i128;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: u64;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _91: usize;
    let mut _92: usize;
    let mut _93: bool;
    let _95: usize;
    let mut _96: usize;
    let mut _97: bool;
    let mut _100: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _102: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _103: &state::user::User;
    let mut _104: usize;
    let mut _105: &state::spot_market::SpotMarket;
    let mut _106: &state::spot_market::SpotMarket;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: u64;
    let mut _114: u64;
    let mut _115: std::option::Option<u64>;
    let mut _118: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _119: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _120: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _121: &dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _122: isize;
    let mut _124: !;
    let mut _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _127: ();
    let mut _128: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _129: std::result::Result<(), error::ErrorCode>;
    let mut _130: &mut state::spot_market::SpotMarket;
    let mut _131: std::option::Option<u64>;
    let mut _132: std::option::Option<u64>;
    let mut _133: i64;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: isize;
    let mut _142: isize;
    let mut _143: isize;
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _146: std::result::Result<u64, error::ErrorCode>;
    let mut _147: u64;
    let mut _148: u64;
    let mut _149: u64;
    let mut _150: bool;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _156: !;
    let _157: ();
    let mut _158: &str;
    let _159: &str;
    let mut _160: (u64, u64);
    let mut _161: isize;
    let mut _163: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _164: std::result::Result<u64, error::ErrorCode>;
    let mut _165: u64;
    let mut _166: u64;
    let mut _167: u64;
    let mut _168: bool;
    let mut _169: isize;
    let mut _171: !;
    let mut _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _174: !;
    let _175: ();
    let mut _176: &str;
    let _177: &str;
    let mut _178: (u64, u64);
    let mut _186: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::spot_fulfillment_params::ExternalSpotFill>;
    let mut _188: std::result::Result<state::spot_fulfillment_params::ExternalSpotFill, error::ErrorCode>;
    let mut _189: &mut dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _190: controller::position::PositionDirection;
    let mut _191: u64;
    let mut _192: u64;
    let mut _193: u64;
    let mut _194: std::option::Option<u64>;
    let mut _195: isize;
    let mut _197: !;
    let mut _198: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _200: ();
    let mut _201: bool;
    let mut _202: u64;
    let mut _203: !;
    let mut _204: (u64, u64);
    let _205: ();
    let mut _206: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _207: std::result::Result<(), error::ErrorCode>;
    let mut _208: u128;
    let mut _209: u64;
    let mut _210: &state::spot_market::SpotBalanceType;
    let _211: &state::spot_market::SpotBalanceType;
    let _212: state::spot_market::SpotBalanceType;
    let mut _213: &mut state::spot_market::SpotMarket;
    let mut _214: &mut dyn state::spot_market::SpotBalance;
    let mut _215: &mut state::perp_market::PoolBalance;
    let mut _216: &mut state::perp_market::PoolBalance;
    let mut _217: isize;
    let mut _219: !;
    let mut _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _222: ();
    let mut _223: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _224: std::result::Result<(), error::ErrorCode>;
    let mut _225: u64;
    let mut _226: u64;
    let mut _227: u64;
    let mut _228: state::spot_market::SpotMarket;
    let mut _229: controller::position::PositionDirection;
    let mut _230: u64;
    let mut _231: isize;
    let mut _233: !;
    let mut _234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _238: std::result::Result<u128, error::ErrorCode>;
    let mut _239: u128;
    let mut _240: &state::spot_market::SpotMarket;
    let mut _241: &state::spot_market::SpotBalanceType;
    let _242: &state::spot_market::SpotBalanceType;
    let _243: state::spot_market::SpotBalanceType;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _253: math::fees::ExternalFillFees;
    let mut _254: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::fees::ExternalFillFees>;
    let mut _255: std::result::Result<math::fees::ExternalFillFees, error::ErrorCode>;
    let mut _256: &state::user::UserStats;
    let mut _257: u64;
    let mut _258: &state::state::FeeStructure;
    let mut _259: u64;
    let mut _260: u64;
    let mut _261: bool;
    let mut _262: &std::option::Option<&mut state::user::User>;
    let mut _263: u64;
    let mut _264: u64;
    let mut _265: u64;
    let mut _266: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _267: std::result::Result<u64, error::ErrorCode>;
    let mut _268: u128;
    let mut _269: isize;
    let mut _271: !;
    let mut _272: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _274: i16;
    let mut _275: isize;
    let mut _277: !;
    let mut _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _281: isize;
    let mut _282: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _283: std::result::Result<u64, error::ErrorCode>;
    let mut _284: u64;
    let mut _285: u64;
    let mut _286: isize;
    let mut _288: !;
    let mut _289: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _292: std::result::Result<u64, error::ErrorCode>;
    let mut _293: u64;
    let mut _294: u64;
    let mut _295: isize;
    let mut _297: !;
    let mut _298: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _300: ();
    let mut _301: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _302: std::result::Result<(), error::ErrorCode>;
    let mut _303: bool;
    let mut _304: &state::spot_market::SpotBalanceType;
    let mut _305: &state::spot_market::SpotBalanceType;
    let _306: state::spot_market::SpotBalanceType;
    let mut _307: &state::user::Order;
    let _308: usize;
    let mut _309: usize;
    let mut _310: bool;
    let mut _311: state::user::AssetType;
    let mut _312: ();
    let _314: ();
    let mut _315: &str;
    let _316: &str;
    let mut _317: &std::string::String;
    let _318: &std::string::String;
    let _319: std::string::String;
    let mut _321: std::fmt::Arguments<'_>;
    let mut _322: &[&str];
    let mut _323: &[&str; 2];
    let _324: &[&str; 2];
    let _325: [&str; 2];
    let mut _326: &[core::fmt::rt::Argument<'_>];
    let mut _327: &[core::fmt::rt::Argument<'_>; 1];
    let _328: &[core::fmt::rt::Argument<'_>; 1];
    let _329: [core::fmt::rt::Argument<'_>; 1];
    let mut _330: core::fmt::rt::Argument<'_>;
    let mut _331: &error::ErrorCode;
    let _332: &error::ErrorCode;
    let _333: ();
    let mut _334: &str;
    let _335: &str;
    let mut _336: error::ErrorCode;
    let mut _337: isize;
    let mut _339: !;
    let mut _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _343: &state::user::Order;
    let _344: usize;
    let mut _345: usize;
    let mut _346: bool;
    let mut _347: state::user::AssetType;
    let _348: ();
    let mut _349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _350: std::result::Result<(), error::ErrorCode>;
    let mut _351: u128;
    let mut _352: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _353: std::result::Result<u128, error::ErrorCode>;
    let mut _354: u64;
    let mut _355: isize;
    let mut _357: !;
    let mut _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _360: &state::spot_market::SpotBalanceType;
    let _361: &state::spot_market::SpotBalanceType;
    let mut _362: &mut state::spot_market::SpotMarket;
    let mut _363: &mut state::user::SpotPosition;
    let mut _364: &mut state::user::SpotPosition;
    let mut _365: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _366: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _367: &mut state::user::User;
    let mut _368: u16;
    let mut _369: isize;
    let mut _371: !;
    let mut _372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _374: bool;
    let mut _375: &state::spot_market::SpotBalanceType;
    let mut _376: &state::spot_market::SpotBalanceType;
    let _377: state::spot_market::SpotBalanceType;
    let mut _378: std::option::Option<u128>;
    let mut _379: isize;
    let mut _381: !;
    let mut _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _384: ();
    let mut _385: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _386: std::result::Result<(), error::ErrorCode>;
    let mut _387: bool;
    let mut _388: &state::spot_market::SpotBalanceType;
    let mut _389: &state::spot_market::SpotBalanceType;
    let _390: state::spot_market::SpotBalanceType;
    let mut _391: &state::user::Order;
    let _392: usize;
    let mut _393: usize;
    let mut _394: bool;
    let mut _395: state::user::AssetType;
    let mut _396: ();
    let _398: ();
    let mut _399: &str;
    let _400: &str;
    let mut _401: &std::string::String;
    let _402: &std::string::String;
    let _403: std::string::String;
    let mut _405: std::fmt::Arguments<'_>;
    let mut _406: &[&str];
    let mut _407: &[&str; 2];
    let _408: &[&str; 2];
    let _409: [&str; 2];
    let mut _410: &[core::fmt::rt::Argument<'_>];
    let mut _411: &[core::fmt::rt::Argument<'_>; 1];
    let _412: &[core::fmt::rt::Argument<'_>; 1];
    let _413: [core::fmt::rt::Argument<'_>; 1];
    let mut _414: core::fmt::rt::Argument<'_>;
    let mut _415: &error::ErrorCode;
    let _416: &error::ErrorCode;
    let _417: ();
    let mut _418: &str;
    let _419: &str;
    let mut _420: error::ErrorCode;
    let mut _421: isize;
    let mut _423: !;
    let mut _424: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _427: &state::user::Order;
    let _428: usize;
    let mut _429: usize;
    let mut _430: bool;
    let mut _431: state::user::AssetType;
    let _432: ();
    let mut _433: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _434: std::result::Result<(), error::ErrorCode>;
    let mut _435: u128;
    let mut _436: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _437: std::result::Result<u128, error::ErrorCode>;
    let mut _438: u64;
    let mut _439: isize;
    let mut _441: !;
    let mut _442: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _444: &state::spot_market::SpotBalanceType;
    let _445: &state::spot_market::SpotBalanceType;
    let mut _446: &mut state::spot_market::SpotMarket;
    let mut _447: &mut state::user::SpotPosition;
    let mut _448: &mut state::user::SpotPosition;
    let mut _449: &mut state::user::User;
    let mut _450: bool;
    let mut _451: &state::spot_market::SpotBalanceType;
    let mut _452: &state::spot_market::SpotBalanceType;
    let _453: state::spot_market::SpotBalanceType;
    let mut _454: std::option::Option<u128>;
    let mut _455: u128;
    let mut _456: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _457: std::result::Result<u128, error::ErrorCode>;
    let mut _458: u64;
    let mut _459: isize;
    let mut _461: !;
    let mut _462: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _464: isize;
    let mut _466: !;
    let mut _467: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _469: ();
    let mut _470: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _471: std::result::Result<(), error::ErrorCode>;
    let mut _472: &mut state::user::User;
    let mut _473: i64;
    let mut _474: i64;
    let mut _475: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _476: std::result::Result<i64, error::ErrorCode>;
    let mut _477: u64;
    let mut _478: isize;
    let mut _480: !;
    let mut _481: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _483: bool;
    let mut _484: isize;
    let mut _486: !;
    let mut _487: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _489: ();
    let mut _490: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _491: std::result::Result<(), error::ErrorCode>;
    let mut _492: &mut state::user::UserStats;
    let mut _493: u8;
    let mut _494: u64;
    let mut _495: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _496: std::result::Result<u64, error::ErrorCode>;
    let mut _497: u64;
    let mut _498: isize;
    let mut _500: !;
    let mut _501: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _503: i64;
    let mut _504: isize;
    let mut _506: !;
    let mut _507: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _509: ();
    let mut _510: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _511: std::result::Result<(), error::ErrorCode>;
    let mut _512: &mut state::user::UserStats;
    let mut _513: u64;
    let mut _514: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _515: std::result::Result<u64, error::ErrorCode>;
    let mut _516: u64;
    let mut _517: isize;
    let mut _519: !;
    let mut _520: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _522: isize;
    let mut _524: !;
    let mut _525: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _527: ();
    let mut _528: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _529: std::result::Result<(), error::ErrorCode>;
    let mut _530: &mut state::user::Order;
    let mut _531: &mut state::user::Order;
    let _532: usize;
    let mut _533: usize;
    let mut _534: bool;
    let mut _535: u64;
    let mut _536: u64;
    let mut _537: isize;
    let mut _539: !;
    let mut _540: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _543: usize;
    let mut _544: usize;
    let mut _545: bool;
    let mut _547: &state::user::Order;
    let _548: usize;
    let mut _549: usize;
    let mut _550: bool;
    let _551: ();
    let mut _552: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _553: std::result::Result<(), error::ErrorCode>;
    let mut _554: &mut state::user::SpotPosition;
    let mut _555: &mut state::user::SpotPosition;
    let mut _556: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _557: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _558: &mut state::user::User;
    let mut _559: u16;
    let mut _560: isize;
    let mut _562: !;
    let mut _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _565: &controller::position::PositionDirection;
    let _566: &controller::position::PositionDirection;
    let mut _567: u64;
    let mut _568: bool;
    let mut _569: isize;
    let mut _571: !;
    let mut _572: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _574: ();
    let mut _575: (std::option::Option<&mut state::user::User>, std::option::Option<&mut state::user::UserStats>);
    let mut _576: std::option::Option<&mut state::user::User>;
    let mut _577: std::option::Option<&mut state::user::UserStats>;
    let mut _578: isize;
    let mut _579: isize;
    let _582: ();
    let mut _583: bool;
    let mut _584: u64;
    let _585: ();
    let mut _586: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _587: std::result::Result<(), error::ErrorCode>;
    let mut _588: u128;
    let mut _589: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _590: std::result::Result<u128, error::ErrorCode>;
    let mut _591: u64;
    let mut _592: isize;
    let mut _594: !;
    let mut _595: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _597: &state::spot_market::SpotBalanceType;
    let _598: &state::spot_market::SpotBalanceType;
    let _599: state::spot_market::SpotBalanceType;
    let mut _600: &mut state::spot_market::SpotMarket;
    let mut _601: &mut dyn state::spot_market::SpotBalance;
    let mut _602: &mut state::user::SpotPosition;
    let mut _603: &mut state::user::SpotPosition;
    let mut _604: &mut state::user::User;
    let mut _605: isize;
    let mut _607: !;
    let mut _608: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _610: ();
    let mut _611: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _612: std::result::Result<(), error::ErrorCode>;
    let mut _613: &mut state::user::User;
    let mut _614: i64;
    let mut _615: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _616: std::result::Result<i64, error::ErrorCode>;
    let mut _617: u64;
    let mut _618: isize;
    let mut _620: !;
    let mut _621: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _623: isize;
    let mut _625: !;
    let mut _626: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _628: ();
    let mut _629: &mut state::user::User;
    let mut _630: u64;
    let _631: ();
    let mut _632: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _633: std::result::Result<(), error::ErrorCode>;
    let mut _634: &mut state::user::UserStats;
    let mut _635: u64;
    let mut _636: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _637: std::result::Result<u64, error::ErrorCode>;
    let mut _638: u64;
    let mut _639: isize;
    let mut _641: !;
    let mut _642: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _644: i64;
    let mut _645: isize;
    let mut _647: !;
    let mut _648: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _650: ();
    let mut _651: bool;
    let mut _652: i64;
    let _653: ();
    let mut _654: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _655: std::result::Result<(), error::ErrorCode>;
    let mut _656: u128;
    let mut _657: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _658: std::result::Result<u128, error::ErrorCode>;
    let mut _659: u64;
    let mut _660: i64;
    let mut _661: isize;
    let mut _663: !;
    let mut _664: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _666: &state::spot_market::SpotBalanceType;
    let mut _667: bool;
    let mut _668: i64;
    let _669: &state::spot_market::SpotBalanceType;
    let _670: state::spot_market::SpotBalanceType;
    let _671: &state::spot_market::SpotBalanceType;
    let _672: state::spot_market::SpotBalanceType;
    let mut _673: &mut state::spot_market::SpotMarket;
    let mut _674: &mut dyn state::spot_market::SpotBalance;
    let mut _675: &mut state::perp_market::PoolBalance;
    let mut _676: &mut state::perp_market::PoolBalance;
    let mut _677: isize;
    let mut _679: !;
    let mut _680: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _682: u128;
    let mut _683: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _684: std::result::Result<u128, error::ErrorCode>;
    let mut _685: u128;
    let mut _686: u128;
    let mut _687: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _688: std::result::Result<u128, error::ErrorCode>;
    let mut _689: u64;
    let mut _690: isize;
    let mut _692: !;
    let mut _693: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _695: isize;
    let mut _697: !;
    let mut _698: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _702: u64;
    let mut _703: std::option::Option<u64>;
    let mut _704: std::option::Option<u64>;
    let mut _705: u64;
    let mut _706: std::option::Option<u64>;
    let mut _708: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::events::OrderActionRecord>;
    let mut _709: std::result::Result<state::events::OrderActionRecord, error::ErrorCode>;
    let mut _710: i64;
    let mut _711: state::events::OrderAction;
    let mut _712: state::events::OrderActionExplanation;
    let mut _713: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::events::OrderActionExplanation>;
    let mut _714: std::result::Result<state::events::OrderActionExplanation, error::ErrorCode>;
    let mut _715: &dyn state::spot_fulfillment_params::SpotFulfillmentParams;
    let mut _716: isize;
    let mut _718: !;
    let mut _719: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _721: u16;
    let _722: usize;
    let mut _723: usize;
    let mut _724: bool;
    let mut _725: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _726: anchor_lang::prelude::Pubkey;
    let mut _727: std::option::Option<u64>;
    let mut _728: u64;
    let mut _729: std::option::Option<u64>;
    let mut _730: u64;
    let mut _731: std::option::Option<u64>;
    let mut _732: u64;
    let mut _733: std::option::Option<u64>;
    let mut _734: u64;
    let mut _735: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _736: std::result::Result<u64, error::ErrorCode>;
    let mut _737: u64;
    let mut _738: isize;
    let mut _740: !;
    let mut _741: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _743: std::option::Option<u64>;
    let mut _744: u64;
    let mut _745: std::option::Option<u64>;
    let mut _746: std::option::Option<u64>;
    let mut _747: std::option::Option<i64>;
    let mut _748: std::option::Option<u64>;
    let mut _749: u64;
    let mut _750: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _751: anchor_lang::prelude::Pubkey;
    let mut _752: std::option::Option<state::user::Order>;
    let mut _753: state::user::Order;
    let _754: usize;
    let mut _755: usize;
    let mut _756: bool;
    let mut _757: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _758: std::option::Option<state::user::Order>;
    let mut _759: i64;
    let mut _760: std::option::Option<u64>;
    let mut _761: std::option::Option<u64>;
    let mut _762: std::option::Option<u64>;
    let mut _763: std::option::Option<u64>;
    let mut _764: std::option::Option<u64>;
    let mut _765: isize;
    let mut _767: !;
    let mut _768: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _770: ();
    let mut _771: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _772: std::result::Result<(), error::ErrorCode>;
    let mut _773: state::events::OrderActionRecord;
    let mut _774: isize;
    let mut _776: !;
    let mut _777: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _779: ();
    let mut _780: bool;
    let mut _781: u64;
    let mut _782: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _783: std::result::Result<u64, error::ErrorCode>;
    let mut _784: &state::user::Order;
    let _785: usize;
    let mut _786: usize;
    let mut _787: bool;
    let mut _788: std::option::Option<i64>;
    let mut _789: isize;
    let mut _791: !;
    let mut _792: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _794: ();
    let mut _795: &mut state::user::User;
    let mut _796: bool;
    let mut _797: &state::user::Order;
    let _798: usize;
    let mut _799: usize;
    let mut _800: bool;
    let mut _801: state::user::OrderStatus;
    let _802: usize;
    let mut _803: usize;
    let mut _804: bool;
    let mut _805: &mut state::user::SpotPosition;
    let mut _806: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::SpotPosition>;
    let mut _807: std::result::Result<&mut state::user::SpotPosition, error::ErrorCode>;
    let mut _808: &mut state::user::User;
    let mut _809: u16;
    let mut _810: isize;
    let mut _812: !;
    let mut _813: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _815: (u8, bool);
    let mut _816: (u64, u64);
    let mut _817: u64;
    let mut _818: u64;
    scope 1 {
        debug oracle_price => _15;
        let _29: std::option::Option<u64>;
        let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _46: std::option::Option<u64>;
        scope 6 {
            debug taker_price => _29;
            let _47: i128;
            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _60: &mut state::user::SpotPosition;
            let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _66: i128;
            scope 11 {
                debug taker_token_amount => _47;
                let _67: u64;
                let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _83: i64;
                let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _89: u64;
                scope 20 {
                    debug taker_base_asset_amount => _67;
                    let _90: controller::position::PositionDirection;
                    scope 29 {
                        debug order_direction => _90;
                        let _94: u64;
                        scope 30 {
                            debug taker_order_slot => _94;
                            let _98: std::option::Option<u64>;
                            let _99: std::option::Option<u64>;
                            let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _111: (std::option::Option<u64>, std::option::Option<u64>);
                            scope 31 {
                                debug max_base_asset_amount => _98;
                                debug max_quote_asset_amount => _99;
                                let _112: u64;
                                scope 36 {
                                    debug taker_base_asset_amount => _112;
                                    let _116: std::option::Option<u64>;
                                    let _117: std::option::Option<u64>;
                                    let _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _126: (std::option::Option<u64>, std::option::Option<u64>);
                                    scope 37 {
                                        debug best_bid => _116;
                                        debug best_ask => _117;
                                        let _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _138: ();
                                        let _139: u64;
                                        scope 42 {
                                            debug residual => _135;
                                            scope 43 {
                                            }
                                        }
                                        scope 44 {
                                            debug val => _138;
                                            scope 45 {
                                            }
                                        }
                                        scope 46 {
                                            debug taker_price => _139;
                                            let _179: u64;
                                            let _180: state::spot_market::SpotBalanceType;
                                            let _181: u64;
                                            let _182: state::spot_market::SpotBalanceType;
                                            let _183: u64;
                                            let _184: u64;
                                            let _185: u64;
                                            let _196: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _199: state::spot_fulfillment_params::ExternalSpotFill;
                                            scope 58 {
                                                debug base_asset_amount_filled => _179;
                                                debug base_update_direction => _180;
                                                debug quote_asset_amount_filled => _181;
                                                debug quote_update_direction => _182;
                                                debug external_market_fee => _183;
                                                debug settled_referrer_rebate => _184;
                                                debug unsettled_referrer_rebate => _185;
                                                let _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _221: ();
                                                let _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _235: ();
                                                let _236: u128;
                                                let _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _248: u128;
                                                let mut _826: &state::spot_market::SpotBalanceType;
                                                let mut _827: &state::spot_market::SpotBalanceType;
                                                scope 63 {
                                                    debug residual => _218;
                                                    scope 64 {
                                                    }
                                                }
                                                scope 65 {
                                                    debug val => _221;
                                                    scope 66 {
                                                    }
                                                }
                                                scope 67 {
                                                    debug residual => _232;
                                                    scope 68 {
                                                    }
                                                }
                                                scope 69 {
                                                    debug val => _235;
                                                    scope 70 {
                                                    }
                                                }
                                                scope 71 {
                                                    debug fee_pool_amount => _236;
                                                    let _249: u64;
                                                    let _250: u64;
                                                    let _251: i64;
                                                    let _252: u64;
                                                    let _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _273: u64;
                                                    let _276: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _279: math::fees::ExternalFillFees;
                                                    scope 76 {
                                                        debug taker_fee => _249;
                                                        debug fee_to_market => _250;
                                                        debug fee_pool_delta => _251;
                                                        debug filler_reward => _252;
                                                        let _280: u64;
                                                        let _287: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _290: u64;
                                                        let _296: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _299: u64;
                                                        scope 85 {
                                                            debug quote_spot_position_delta => _280;
                                                            let _313: error::ErrorCode;
                                                            let _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _341: ();
                                                            let _342: state::spot_market::SpotBalanceType;
                                                            scope 94 {
                                                                debug error_code => _313;
                                                                let _320: std::string::String;
                                                                let mut _825: &[&str; 2];
                                                                scope 95 {
                                                                    debug res => _320;
                                                                }
                                                            }
                                                            scope 96 {
                                                                debug residual => _338;
                                                                scope 97 {
                                                                }
                                                            }
                                                            scope 98 {
                                                                debug val => _341;
                                                                scope 99 {
                                                                }
                                                            }
                                                            scope 100 {
                                                                debug base_update_direction => _342;
                                                                let _356: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _359: u128;
                                                                let _370: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _373: &mut state::user::SpotPosition;
                                                                let _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _383: ();
                                                                let _397: error::ErrorCode;
                                                                let _422: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _425: ();
                                                                let _426: state::spot_market::SpotBalanceType;
                                                                let mut _824: &state::spot_market::SpotBalanceType;
                                                                scope 101 {
                                                                    debug residual => _356;
                                                                    scope 102 {
                                                                    }
                                                                }
                                                                scope 103 {
                                                                    debug val => _359;
                                                                    scope 104 {
                                                                    }
                                                                }
                                                                scope 105 {
                                                                    debug residual => _370;
                                                                    scope 106 {
                                                                    }
                                                                }
                                                                scope 107 {
                                                                    debug val => _373;
                                                                    scope 108 {
                                                                    }
                                                                }
                                                                scope 109 {
                                                                    debug residual => _380;
                                                                    scope 110 {
                                                                    }
                                                                }
                                                                scope 111 {
                                                                    debug val => _383;
                                                                    scope 112 {
                                                                    }
                                                                }
                                                                scope 113 {
                                                                    debug error_code => _397;
                                                                    let _404: std::string::String;
                                                                    let mut _823: &[&str; 2];
                                                                    scope 114 {
                                                                        debug res => _404;
                                                                    }
                                                                }
                                                                scope 115 {
                                                                    debug residual => _422;
                                                                    scope 116 {
                                                                    }
                                                                }
                                                                scope 117 {
                                                                    debug val => _425;
                                                                    scope 118 {
                                                                    }
                                                                }
                                                                scope 119 {
                                                                    debug quote_update_direction => _426;
                                                                    let _440: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _443: u128;
                                                                    let _460: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _463: u128;
                                                                    let _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _468: ();
                                                                    let _479: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _482: i64;
                                                                    let _485: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _488: ();
                                                                    let _499: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _502: u64;
                                                                    let _505: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _508: ();
                                                                    let _518: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _521: u64;
                                                                    let _523: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _526: ();
                                                                    let _538: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _541: ();
                                                                    let _542: controller::position::PositionDirection;
                                                                    let mut _822: &state::spot_market::SpotBalanceType;
                                                                    scope 120 {
                                                                        debug residual => _440;
                                                                        scope 121 {
                                                                        }
                                                                    }
                                                                    scope 122 {
                                                                        debug val => _443;
                                                                        scope 123 {
                                                                        }
                                                                    }
                                                                    scope 124 {
                                                                        debug residual => _460;
                                                                        scope 125 {
                                                                        }
                                                                    }
                                                                    scope 126 {
                                                                        debug val => _463;
                                                                        scope 127 {
                                                                        }
                                                                    }
                                                                    scope 128 {
                                                                        debug residual => _465;
                                                                        scope 129 {
                                                                        }
                                                                    }
                                                                    scope 130 {
                                                                        debug val => _468;
                                                                        scope 131 {
                                                                        }
                                                                    }
                                                                    scope 132 {
                                                                        debug residual => _479;
                                                                        scope 133 {
                                                                        }
                                                                    }
                                                                    scope 134 {
                                                                        debug val => _482;
                                                                        scope 135 {
                                                                        }
                                                                    }
                                                                    scope 136 {
                                                                        debug residual => _485;
                                                                        scope 137 {
                                                                        }
                                                                    }
                                                                    scope 138 {
                                                                        debug val => _488;
                                                                        scope 139 {
                                                                        }
                                                                    }
                                                                    scope 140 {
                                                                        debug residual => _499;
                                                                        scope 141 {
                                                                        }
                                                                    }
                                                                    scope 142 {
                                                                        debug val => _502;
                                                                        scope 143 {
                                                                        }
                                                                    }
                                                                    scope 144 {
                                                                        debug residual => _505;
                                                                        scope 145 {
                                                                        }
                                                                    }
                                                                    scope 146 {
                                                                        debug val => _508;
                                                                        scope 147 {
                                                                        }
                                                                    }
                                                                    scope 148 {
                                                                        debug residual => _518;
                                                                        scope 149 {
                                                                        }
                                                                    }
                                                                    scope 150 {
                                                                        debug val => _521;
                                                                        scope 151 {
                                                                        }
                                                                    }
                                                                    scope 152 {
                                                                        debug residual => _523;
                                                                        scope 153 {
                                                                        }
                                                                    }
                                                                    scope 154 {
                                                                        debug val => _526;
                                                                        scope 155 {
                                                                        }
                                                                    }
                                                                    scope 156 {
                                                                        debug residual => _538;
                                                                        scope 157 {
                                                                        }
                                                                    }
                                                                    scope 158 {
                                                                        debug val => _541;
                                                                        scope 159 {
                                                                        }
                                                                    }
                                                                    scope 160 {
                                                                        debug taker_order_direction => _542;
                                                                        let _546: bool;
                                                                        scope 161 {
                                                                            debug taker_update_open_bids_and_asks => _546;
                                                                            let _561: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _564: &mut state::user::SpotPosition;
                                                                            let _570: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _573: ();
                                                                            let _662: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _665: u128;
                                                                            let _678: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _681: ();
                                                                            let _691: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _694: u128;
                                                                            let _696: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _699: u128;
                                                                            let _700: u64;
                                                                            let _701: u64;
                                                                            let mut _819: &state::spot_market::SpotBalanceType;
                                                                            let mut _820: &state::spot_market::SpotBalanceType;
                                                                            scope 162 {
                                                                                debug residual => _561;
                                                                                scope 163 {
                                                                                }
                                                                            }
                                                                            scope 164 {
                                                                                debug val => _564;
                                                                                scope 165 {
                                                                                }
                                                                            }
                                                                            scope 166 {
                                                                                debug residual => _570;
                                                                                scope 167 {
                                                                                }
                                                                            }
                                                                            scope 168 {
                                                                                debug val => _573;
                                                                                scope 169 {
                                                                                }
                                                                            }
                                                                            scope 170 {
                                                                                debug filler => _580;
                                                                                debug filler_stats => _581;
                                                                                let _580: &mut state::user::User;
                                                                                let _581: &mut state::user::UserStats;
                                                                                let _593: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _596: u128;
                                                                                let _606: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _609: ();
                                                                                let _619: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _622: i64;
                                                                                let _624: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _627: ();
                                                                                let _640: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _643: u64;
                                                                                let _646: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _649: ();
                                                                                let mut _821: &state::spot_market::SpotBalanceType;
                                                                                scope 171 {
                                                                                    debug residual => _593;
                                                                                    scope 172 {
                                                                                    }
                                                                                }
                                                                                scope 173 {
                                                                                    debug val => _596;
                                                                                    scope 174 {
                                                                                    }
                                                                                }
                                                                                scope 175 {
                                                                                    debug residual => _606;
                                                                                    scope 176 {
                                                                                    }
                                                                                }
                                                                                scope 177 {
                                                                                    debug val => _609;
                                                                                    scope 178 {
                                                                                    }
                                                                                }
                                                                                scope 179 {
                                                                                    debug residual => _619;
                                                                                    scope 180 {
                                                                                    }
                                                                                }
                                                                                scope 181 {
                                                                                    debug val => _622;
                                                                                    scope 182 {
                                                                                    }
                                                                                }
                                                                                scope 183 {
                                                                                    debug residual => _624;
                                                                                    scope 184 {
                                                                                    }
                                                                                }
                                                                                scope 185 {
                                                                                    debug val => _627;
                                                                                    scope 186 {
                                                                                    }
                                                                                }
                                                                                scope 187 {
                                                                                    debug residual => _640;
                                                                                    scope 188 {
                                                                                    }
                                                                                }
                                                                                scope 189 {
                                                                                    debug val => _643;
                                                                                    scope 190 {
                                                                                    }
                                                                                }
                                                                                scope 191 {
                                                                                    debug residual => _646;
                                                                                    scope 192 {
                                                                                    }
                                                                                }
                                                                                scope 193 {
                                                                                    debug val => _649;
                                                                                    scope 194 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 195 {
                                                                                debug residual => _662;
                                                                                scope 196 {
                                                                                }
                                                                            }
                                                                            scope 197 {
                                                                                debug val => _665;
                                                                                scope 198 {
                                                                                }
                                                                            }
                                                                            scope 199 {
                                                                                debug residual => _678;
                                                                                scope 200 {
                                                                                }
                                                                            }
                                                                            scope 201 {
                                                                                debug val => _681;
                                                                                scope 202 {
                                                                                }
                                                                            }
                                                                            scope 203 {
                                                                                debug residual => _691;
                                                                                scope 204 {
                                                                                }
                                                                            }
                                                                            scope 205 {
                                                                                debug val => _694;
                                                                                scope 206 {
                                                                                }
                                                                            }
                                                                            scope 207 {
                                                                                debug residual => _696;
                                                                                scope 208 {
                                                                                }
                                                                            }
                                                                            scope 209 {
                                                                                debug val => _699;
                                                                                scope 210 {
                                                                                }
                                                                            }
                                                                            scope 211 {
                                                                                debug fill_record_id => _700;
                                                                                let _707: state::events::OrderActionRecord;
                                                                                let _717: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _720: state::events::OrderActionExplanation;
                                                                                let _739: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _742: u64;
                                                                                let _766: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _769: state::events::OrderActionRecord;
                                                                                scope 213 {
                                                                                    debug order_action_record => _707;
                                                                                    let _775: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _778: ();
                                                                                    let _790: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _793: u64;
                                                                                    let _811: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _814: &mut state::user::SpotPosition;
                                                                                    scope 226 {
                                                                                        debug residual => _775;
                                                                                        scope 227 {
                                                                                        }
                                                                                    }
                                                                                    scope 228 {
                                                                                        debug val => _778;
                                                                                        scope 229 {
                                                                                        }
                                                                                    }
                                                                                    scope 230 {
                                                                                        debug residual => _790;
                                                                                        scope 231 {
                                                                                        }
                                                                                    }
                                                                                    scope 232 {
                                                                                        debug val => _793;
                                                                                        scope 233 {
                                                                                        }
                                                                                    }
                                                                                    scope 234 {
                                                                                        debug residual => _811;
                                                                                        scope 235 {
                                                                                        }
                                                                                    }
                                                                                    scope 236 {
                                                                                        debug val => _814;
                                                                                        scope 237 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 214 {
                                                                                    debug residual => _717;
                                                                                    scope 215 {
                                                                                    }
                                                                                }
                                                                                scope 216 {
                                                                                    debug val => _720;
                                                                                    scope 217 {
                                                                                    }
                                                                                }
                                                                                scope 218 {
                                                                                    debug residual => _739;
                                                                                    scope 219 {
                                                                                    }
                                                                                }
                                                                                scope 220 {
                                                                                    debug val => _742;
                                                                                    scope 221 {
                                                                                    }
                                                                                }
                                                                                scope 222 {
                                                                                    debug residual => _766;
                                                                                    scope 223 {
                                                                                    }
                                                                                }
                                                                                scope 224 {
                                                                                    debug val => _769;
                                                                                    scope 225 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 212 {
                                                                                debug current_id => _701;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 86 {
                                                            debug residual => _287;
                                                            scope 87 {
                                                            }
                                                        }
                                                        scope 88 {
                                                            debug val => _290;
                                                            scope 89 {
                                                            }
                                                        }
                                                        scope 90 {
                                                            debug residual => _296;
                                                            scope 91 {
                                                            }
                                                        }
                                                        scope 92 {
                                                            debug val => _299;
                                                            scope 93 {
                                                            }
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug residual => _270;
                                                        scope 78 {
                                                        }
                                                    }
                                                    scope 79 {
                                                        debug val => _273;
                                                        scope 80 {
                                                        }
                                                    }
                                                    scope 81 {
                                                        debug residual => _276;
                                                        scope 82 {
                                                        }
                                                    }
                                                    scope 83 {
                                                        debug val => _279;
                                                        scope 84 {
                                                        }
                                                    }
                                                }
                                                scope 72 {
                                                    debug residual => _245;
                                                    scope 73 {
                                                    }
                                                }
                                                scope 74 {
                                                    debug val => _248;
                                                    scope 75 {
                                                    }
                                                }
                                            }
                                            scope 59 {
                                                debug residual => _196;
                                                scope 60 {
                                                }
                                            }
                                            scope 61 {
                                                debug val => _199;
                                                scope 62 {
                                                }
                                            }
                                        }
                                        scope 47 {
                                            debug price => _141;
                                            let _141: u64;
                                        }
                                        scope 48 {
                                            debug ask => _144;
                                            let _144: u64;
                                            let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _155: u64;
                                            scope 49 {
                                                debug residual => _152;
                                                scope 50 {
                                                }
                                            }
                                            scope 51 {
                                                debug val => _155;
                                                scope 52 {
                                                }
                                            }
                                        }
                                        scope 53 {
                                            debug bid => _162;
                                            let _162: u64;
                                            let _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _173: u64;
                                            scope 54 {
                                                debug residual => _170;
                                                scope 55 {
                                                }
                                            }
                                            scope 56 {
                                                debug val => _173;
                                                scope 57 {
                                                }
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _123;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _126;
                                        scope 41 {
                                        }
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _108;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _111;
                                scope 35 {
                                }
                            }
                        }
                    }
                }
                scope 21 {
                    debug residual => _80;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _83;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug residual => _86;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _89;
                    scope 28 {
                    }
                }
            }
            scope 12 {
                debug residual => _57;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _60;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _63;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _66;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _43;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _46;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _25;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _28;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &mut (*_12);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        _22 = SpotMarket::oracle_id(move _23) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_23);
        _21 = &_22;
        _20 = &(*_21);
        _18 = OracleMap::<'_>::get_price_data(move _19, move _20) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _18) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_18);
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_28);
        _28 = ((_17 as Continue).0: &state::oracle::OraclePriceData);
        _16 = _28;
        StorageDead(_28);
        _15 = ((*_16).0: i64);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _5;
        _34 = Len(((*_3).5: [state::user::Order; 32]));
        _35 = Lt(_33, _34);
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_25);
        _25 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb391;
    }

    bb8: {
        _32 = &((*_3).5: [state::user::Order; 32])[_33];
        StorageLive(_36);
        StorageLive(_37);
        _37 = _15;
        _36 = Option::<i64>::Some(move _37);
        StorageDead(_37);
        StorageLive(_38);
        _38 = Option::<u64>::None;
        StorageLive(_39);
        _39 = _11;
        StorageLive(_40);
        _40 = ((*_1).26: u64);
        StorageLive(_41);
        _41 = Option::<ProtectedMakerParams>::None;
        _31 = Order::get_limit_price(move _32, move _36, move _38, move _39, move _40, const false, move _41) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_32);
        _30 = <std::result::Result<Option<u64>, error::ErrorCode> as Try>::branch(move _31) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_31);
        _42 = discriminant(_30);
        switchInt(move _42) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_46);
        _46 = ((_30 as Continue).0: std::option::Option<u64>);
        _29 = _46;
        StorageDead(_46);
        StorageDead(_33);
        StorageDead(_30);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &mut (*_3);
        StorageLive(_55);
        _55 = ((*_1).42: u16);
        _53 = User::force_get_spot_position_mut(move _54, move _55) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_43);
        _43 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_33);
        StorageDead(_30);
        goto -> bb390;
    }

    bb14: {
        StorageDead(_55);
        StorageDead(_54);
        _52 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _53) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_53);
        _56 = discriminant(_52);
        switchInt(move _56) -> [0: bb16, 1: bb17, otherwise: bb5];
    }

    bb16: {
        StorageLive(_60);
        _60 = move ((_52 as Continue).0: &mut state::user::SpotPosition);
        _51 = move _60;
        StorageDead(_60);
        _50 = &(*_51);
        StorageLive(_61);
        _61 = &(*_1);
        _49 = SpotPosition::get_signed_token_amount(move _50, move _61) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_57);
        _57 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb388;
    }

    bb19: {
        StorageDead(_61);
        StorageDead(_50);
        _48 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_49);
        _62 = discriminant(_48);
        switchInt(move _62) -> [0: bb21, 1: bb22, otherwise: bb5];
    }

    bb21: {
        StorageLive(_66);
        _66 = ((_48 as Continue).0: i128);
        _47 = _66;
        StorageDead(_66);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _5;
        _72 = Len(((*_3).5: [state::user::Order; 32]));
        _73 = Lt(_71, _72);
        assert(move _73, "index out of bounds: the length is {} but the index is {}", move _72, _71) -> [success: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_63);
        _63 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb388;
    }

    bb24: {
        _70 = &((*_3).5: [state::user::Order; 32])[_71];
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _47;
        _77 = <i128 as Cast>::cast::<i64>(move _78) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_78);
        _76 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _77) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_77);
        _79 = discriminant(_76);
        switchInt(move _79) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_83);
        _83 = ((_76 as Continue).0: i64);
        _75 = _83;
        StorageDead(_83);
        _74 = Option::<i64>::Some(move _75);
        StorageDead(_75);
        StorageLive(_84);
        _84 = ((*_1).25: u64);
        _69 = Order::get_standardized_base_asset_amount_unfilled(move _70, move _74, move _84) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_80);
        _80 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb386;
    }

    bb30: {
        StorageDead(_84);
        StorageDead(_74);
        StorageDead(_70);
        _68 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _69) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_69);
        _85 = discriminant(_68);
        switchInt(move _85) -> [0: bb32, 1: bb33, otherwise: bb5];
    }

    bb32: {
        StorageLive(_89);
        _89 = ((_68 as Continue).0: u64);
        _67 = _89;
        StorageDead(_89);
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_68);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _5;
        _92 = Len(((*_3).5: [state::user::Order; 32]));
        _93 = Lt(_91, _92);
        assert(move _93, "index out of bounds: the length is {} but the index is {}", move _92, _91) -> [success: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_86);
        _86 = ((_68 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_88);
        StorageDead(_86);
        goto -> bb386;
    }

    bb35: {
        _90 = (((*_3).5: [state::user::Order; 32])[_91].17: controller::position::PositionDirection);
        StorageDead(_91);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _5;
        _96 = Len(((*_3).5: [state::user::Order; 32]));
        _97 = Lt(_95, _96);
        assert(move _97, "index out of bounds: the length is {} but the index is {}", move _96, _95) -> [success: bb36, unwind continue];
    }

    bb36: {
        _94 = (((*_3).5: [state::user::Order; 32])[_95].0: u64);
        StorageDead(_95);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_3);
        StorageLive(_104);
        _104 = _5;
        StorageLive(_105);
        _105 = &(*_1);
        StorageLive(_106);
        _106 = &(*_2);
        _102 = math::orders::get_max_fill_amounts(move _103, move _104, move _105, move _106, const true) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _102) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_102);
        _107 = discriminant(_101);
        switchInt(move _107) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_111);
        _111 = ((_101 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _100 = _111;
        StorageDead(_111);
        StorageLive(_98);
        _98 = (_100.0: std::option::Option<u64>);
        StorageLive(_99);
        _99 = (_100.1: std::option::Option<u64>);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_112);
        StorageLive(_113);
        _113 = _67;
        StorageLive(_114);
        StorageLive(_115);
        _115 = _98;
        _114 = Option::<u64>::unwrap_or(move _115, const _) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_108);
        _108 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb385;
    }

    bb42: {
        StorageDead(_115);
        _112 = <u64 as Ord>::min(move _113, move _114) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &(*_14);
        _120 = <dyn SpotFulfillmentParams as SpotFulfillmentParams>::get_best_bid_and_ask(move _121) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_121);
        _119 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _120) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_120);
        _122 = discriminant(_119);
        switchInt(move _122) -> [0: bb46, 1: bb47, otherwise: bb5];
    }

    bb46: {
        StorageLive(_126);
        _126 = ((_119 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _118 = _126;
        StorageDead(_126);
        StorageLive(_116);
        _116 = (_118.0: std::option::Option<u64>);
        StorageLive(_117);
        _117 = (_118.1: std::option::Option<u64>);
        StorageDead(_119);
        StorageDead(_118);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &mut (*_1);
        StorageLive(_131);
        _131 = _116;
        StorageLive(_132);
        _132 = _117;
        StorageLive(_133);
        _133 = _10;
        _129 = SpotMarket::update_historical_index_price(move _130, move _131, move _132, move _133) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_123);
        _123 = ((_119 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_125);
        _125 = _123;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _125) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb384;
    }

    bb49: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        _128 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _129) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_129);
        _134 = discriminant(_128);
        switchInt(move _134) -> [0: bb51, 1: bb52, otherwise: bb5];
    }

    bb51: {
        StorageLive(_138);
        _138 = ((_128 as Continue).0: ());
        _127 = _138;
        StorageDead(_138);
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_139);
        _140 = discriminant(_29);
        switchInt(move _140) -> [1: bb55, otherwise: bb54];
    }

    bb52: {
        StorageLive(_135);
        _135 = ((_128 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_137);
        _137 = _135;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _137) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_128);
        StorageDead(_127);
        goto -> bb383;
    }

    bb54: {
        _142 = discriminant(_90);
        switchInt(move _142) -> [0: bb57, 1: bb56, otherwise: bb5];
    }

    bb55: {
        StorageLive(_141);
        _141 = ((_29 as Some).0: u64);
        _139 = _141;
        StorageDead(_141);
        goto -> bb76;
    }

    bb56: {
        _161 = discriminant(_116);
        switchInt(move _161) -> [1: bb67, otherwise: bb74];
    }

    bb57: {
        _143 = discriminant(_117);
        switchInt(move _143) -> [1: bb58, otherwise: bb65];
    }

    bb58: {
        StorageLive(_144);
        _144 = ((_117 as Some).0: u64);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _144;
        StorageLive(_148);
        StorageLive(_149);
        _149 = _144;
        _150 = Eq(const 100_u64, const 0_u64);
        assert(!move _150, "attempt to divide `{}` by zero", _149) -> [success: bb59, unwind continue];
    }

    bb59: {
        _148 = Div(move _149, const 100_u64);
        StorageDead(_149);
        _146 = <u64 as SafeMath>::safe_add(move _147, move _148) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_148);
        StorageDead(_147);
        _145 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _146) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_146);
        _151 = discriminant(_145);
        switchInt(move _151) -> [0: bb62, 1: bb63, otherwise: bb5];
    }

    bb62: {
        StorageLive(_155);
        _155 = ((_145 as Continue).0: u64);
        _139 = _155;
        StorageDead(_155);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb76;
    }

    bb63: {
        StorageLive(_152);
        _152 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb382;
    }

    bb65: {
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = const "External market has no ask";
        _158 = &(*_159);
        _157 = solana_program::log::sol_log(move _158) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_158);
        StorageDead(_159);
        StorageDead(_157);
        StorageLive(_160);
        _160 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _160);
        StorageDead(_160);
        goto -> bb382;
    }

    bb67: {
        StorageLive(_162);
        _162 = ((_116 as Some).0: u64);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = _162;
        StorageLive(_166);
        StorageLive(_167);
        _167 = _162;
        _168 = Eq(const 100_u64, const 0_u64);
        assert(!move _168, "attempt to divide `{}` by zero", _167) -> [success: bb68, unwind continue];
    }

    bb68: {
        _166 = Div(move _167, const 100_u64);
        StorageDead(_167);
        _164 = <u64 as SafeMath>::safe_sub(move _165, move _166) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_166);
        StorageDead(_165);
        _163 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _164) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_164);
        _169 = discriminant(_163);
        switchInt(move _169) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_173);
        _173 = ((_163 as Continue).0: u64);
        _139 = _173;
        StorageDead(_173);
        StorageDead(_163);
        StorageDead(_162);
        goto -> bb76;
    }

    bb72: {
        StorageLive(_170);
        _170 = ((_163 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_172);
        _172 = _170;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _172) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_163);
        StorageDead(_162);
        goto -> bb382;
    }

    bb74: {
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        _177 = const "External market has no bid";
        _176 = &(*_177);
        _175 = solana_program::log::sol_log(move _176) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_176);
        StorageDead(_177);
        StorageDead(_175);
        StorageLive(_178);
        _178 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _178);
        StorageDead(_178);
        goto -> bb382;
    }

    bb76: {
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &mut (*_14);
        StorageLive(_190);
        _190 = _90;
        StorageLive(_191);
        _191 = _139;
        StorageLive(_192);
        _192 = _112;
        StorageLive(_193);
        StorageLive(_194);
        _194 = _99;
        _193 = Option::<u64>::unwrap_or(move _194, const _) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_194);
        _188 = <dyn SpotFulfillmentParams as SpotFulfillmentParams>::fulfill_order(move _189, move _190, move _191, move _192, move _193) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        _187 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as Try>::branch(move _188) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_188);
        _195 = discriminant(_187);
        switchInt(move _195) -> [0: bb80, 1: bb81, otherwise: bb5];
    }

    bb80: {
        StorageLive(_199);
        _199 = move ((_187 as Continue).0: state::spot_fulfillment_params::ExternalSpotFill);
        _186 = move _199;
        StorageDead(_199);
        StorageLive(_179);
        _179 = (_186.0: u64);
        StorageLive(_180);
        _180 = (_186.1: state::spot_market::SpotBalanceType);
        StorageLive(_181);
        _181 = (_186.2: u64);
        StorageLive(_182);
        _182 = (_186.3: state::spot_market::SpotBalanceType);
        StorageLive(_183);
        _183 = (_186.6: u64);
        StorageLive(_184);
        _184 = (_186.4: u64);
        StorageLive(_185);
        _185 = (_186.5: u64);
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = _179;
        _201 = Eq(move _202, const 0_u64);
        switchInt(move _201) -> [0: bb84, otherwise: bb83];
    }

    bb81: {
        StorageLive(_196);
        _196 = ((_187 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_198);
        _198 = _196;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _198) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb382;
    }

    bb83: {
        StorageDead(_202);
        StorageLive(_204);
        _204 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _204);
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_200);
        goto -> bb381;
    }

    bb84: {
        StorageDead(_202);
        _200 = const ();
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = _184;
        _208 = move _209 as u128 (IntToInt);
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        _827 = const _;
        _211 = &(*_827);
        _210 = &(*_211);
        StorageLive(_213);
        _213 = &mut (*_2);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &mut ((*_1).8: state::perp_market::PoolBalance);
        _215 = &mut (*_216);
        _214 = move _215 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_215);
        _207 = update_spot_balances(move _208, move _210, move _213, move _214, const false) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_208);
        _206 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _207) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_207);
        _217 = discriminant(_206);
        switchInt(move _217) -> [0: bb87, 1: bb88, otherwise: bb5];
    }

    bb87: {
        StorageLive(_221);
        _221 = ((_206 as Continue).0: ());
        _205 = _221;
        StorageDead(_221);
        StorageDead(_216);
        StorageDead(_211);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = _181;
        StorageLive(_226);
        _226 = _179;
        StorageLive(_227);
        StorageLive(_228);
        _228 = (*_1);
        _227 = SpotMarket::get_precision(move _228) -> [return: bb90, unwind continue];
    }

    bb88: {
        StorageLive(_218);
        _218 = ((_206 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_220);
        _220 = _218;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _220) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_211);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb381;
    }

    bb90: {
        StorageDead(_228);
        StorageLive(_229);
        _229 = _90;
        StorageLive(_230);
        _230 = _139;
        _224 = math::orders::validate_fill_price(move _225, move _226, move _227, move _229, move _230, const true) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_225);
        _223 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _224) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_224);
        _231 = discriminant(_223);
        switchInt(move _231) -> [0: bb93, 1: bb94, otherwise: bb5];
    }

    bb93: {
        StorageLive(_235);
        _235 = ((_223 as Continue).0: ());
        _222 = _235;
        StorageDead(_235);
        StorageDead(_223);
        StorageDead(_222);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = (((*_1).8: state::perp_market::PoolBalance).0: u128);
        StorageLive(_240);
        _240 = &(*_2);
        StorageLive(_241);
        StorageLive(_242);
        _826 = const _;
        _242 = &(*_826);
        _241 = &(*_242);
        _238 = get_token_amount(move _239, move _240, move _241) -> [return: bb96, unwind continue];
    }

    bb94: {
        StorageLive(_232);
        _232 = ((_223 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_234);
        _234 = _232;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _234) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_223);
        StorageDead(_222);
        goto -> bb381;
    }

    bb96: {
        StorageDead(_241);
        StorageDead(_240);
        StorageDead(_239);
        _237 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _238) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_238);
        _244 = discriminant(_237);
        switchInt(move _244) -> [0: bb98, 1: bb99, otherwise: bb5];
    }

    bb98: {
        StorageLive(_248);
        _248 = ((_237 as Continue).0: u128);
        _236 = _248;
        StorageDead(_248);
        StorageDead(_242);
        StorageDead(_237);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &(*_4);
        StorageLive(_257);
        _257 = _181;
        StorageLive(_258);
        _258 = &(*_13);
        StorageLive(_259);
        _259 = _94;
        StorageLive(_260);
        _260 = _11;
        StorageLive(_261);
        StorageLive(_262);
        _262 = &_7;
        _261 = Option::<&mut User>::is_some(move _262) -> [return: bb101, unwind continue];
    }

    bb99: {
        StorageLive(_245);
        _245 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_247);
        _247 = _245;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _247) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_242);
        StorageDead(_237);
        goto -> bb380;
    }

    bb101: {
        StorageDead(_262);
        StorageLive(_263);
        _263 = _183;
        StorageLive(_264);
        _264 = _185;
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = _236;
        _267 = <u128 as Cast>::cast::<u64>(move _268) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_268);
        _266 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _267) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_267);
        _269 = discriminant(_266);
        switchInt(move _269) -> [0: bb104, 1: bb105, otherwise: bb5];
    }

    bb104: {
        StorageLive(_273);
        _273 = ((_266 as Continue).0: u64);
        _265 = _273;
        StorageDead(_273);
        StorageLive(_274);
        _274 = ((*_1).49: i16);
        _255 = calculate_fee_for_fulfillment_with_external_market(move _256, move _257, move _258, move _259, move _260, move _261, move _263, move _264, move _265, move _274) -> [return: bb107, unwind continue];
    }

    bb105: {
        StorageLive(_270);
        _270 = ((_266 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_272);
        _272 = _270;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _272) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_255);
        goto -> bb379;
    }

    bb107: {
        StorageDead(_274);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_256);
        _254 = <std::result::Result<ExternalFillFees, error::ErrorCode> as Try>::branch(move _255) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_255);
        _275 = discriminant(_254);
        switchInt(move _275) -> [0: bb109, 1: bb110, otherwise: bb5];
    }

    bb109: {
        StorageLive(_279);
        _279 = move ((_254 as Continue).0: math::fees::ExternalFillFees);
        _253 = move _279;
        StorageDead(_279);
        StorageLive(_249);
        _249 = (_253.0: u64);
        StorageLive(_250);
        _250 = (_253.1: u64);
        StorageLive(_251);
        _251 = (_253.2: i64);
        StorageLive(_252);
        _252 = (_253.3: u64);
        StorageDead(_266);
        StorageDead(_254);
        StorageDead(_253);
        StorageLive(_280);
        _281 = discriminant(_182);
        switchInt(move _281) -> [0: bb113, 1: bb112, otherwise: bb5];
    }

    bb110: {
        StorageLive(_276);
        _276 = ((_254 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_278);
        _278 = _276;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _278) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_278);
        StorageDead(_276);
        goto -> bb379;
    }

    bb112: {
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = _181;
        StorageLive(_294);
        _294 = _249;
        _292 = <u64 as SafeMath>::safe_add(move _293, move _294) -> [return: bb119, unwind continue];
    }

    bb113: {
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = _181;
        StorageLive(_285);
        _285 = _249;
        _283 = <u64 as SafeMath>::safe_sub(move _284, move _285) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_285);
        StorageDead(_284);
        _282 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _283) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_283);
        _286 = discriminant(_282);
        switchInt(move _286) -> [0: bb116, 1: bb117, otherwise: bb5];
    }

    bb116: {
        StorageLive(_290);
        _290 = ((_282 as Continue).0: u64);
        _280 = _290;
        StorageDead(_290);
        StorageDead(_282);
        goto -> bb124;
    }

    bb117: {
        StorageLive(_287);
        _287 = ((_282 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_289);
        _289 = _287;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _289) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_289);
        StorageDead(_287);
        StorageDead(_282);
        goto -> bb378;
    }

    bb119: {
        StorageDead(_294);
        StorageDead(_293);
        _291 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _292) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_292);
        _295 = discriminant(_291);
        switchInt(move _295) -> [0: bb121, 1: bb122, otherwise: bb5];
    }

    bb121: {
        StorageLive(_299);
        _299 = ((_291 as Continue).0: u64);
        _280 = _299;
        StorageDead(_299);
        StorageDead(_291);
        goto -> bb124;
    }

    bb122: {
        StorageLive(_296);
        _296 = ((_291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_298);
        _298 = _296;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _298) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_291);
        goto -> bb378;
    }

    bb124: {
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_180;
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _308 = _5;
        _309 = Len(((*_3).5: [state::user::Order; 32]));
        _310 = Lt(_308, _309);
        assert(move _310, "index out of bounds: the length is {} but the index is {}", move _309, _308) -> [success: bb125, unwind continue];
    }

    bb125: {
        _307 = &((*_3).5: [state::user::Order; 32])[_308];
        StorageLive(_311);
        _311 = AssetType::Base;
        _306 = Order::get_spot_position_update_direction(move _307, move _311) -> [return: bb126, unwind continue];
    }

    bb126: {
        _305 = &_306;
        StorageDead(_311);
        StorageDead(_307);
        _303 = <SpotBalanceType as PartialEq>::eq(move _304, move _305) -> [return: bb127, unwind continue];
    }

    bb127: {
        switchInt(move _303) -> [0: bb129, otherwise: bb128];
    }

    bb128: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_312);
        _312 = ();
        _302 = std::result::Result::<(), error::ErrorCode>::Ok(move _312);
        StorageDead(_312);
        goto -> bb137;
    }

    bb129: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_304);
        StorageLive(_313);
        _313 = error::ErrorCode::FailedToFillOnExternalMarket;
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _825 = const _;
        _324 = &(*_825);
        _323 = &(*_324);
        _322 = move _323 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_323);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_313;
        _331 = &(*_332);
        _330 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _331) -> [return: bb130, unwind continue];
    }

    bb130: {
        StorageDead(_331);
        _329 = [move _330];
        StorageDead(_330);
        _328 = &_329;
        _327 = &(*_328);
        _326 = move _327 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_327);
        _321 = Arguments::<'_>::new_v1(move _322, move _326) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_326);
        StorageDead(_322);
        _320 = format(move _321) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_321);
        StorageDead(_332);
        StorageDead(_329);
        StorageDead(_328);
        StorageDead(_324);
        _319 = move _320;
        StorageDead(_320);
        _318 = &_319;
        _317 = &(*_318);
        _316 = <String as Deref>::deref(move _317) -> [return: bb133, unwind: bb394];
    }

    bb133: {
        _315 = &(*_316);
        StorageDead(_317);
        _314 = solana_program::log::sol_log(move _315) -> [return: bb134, unwind: bb394];
    }

    bb134: {
        StorageDead(_315);
        drop(_319) -> [return: bb135, unwind: bb395];
    }

    bb135: {
        StorageDead(_319);
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_314);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = const "Fill on external spot market lead to unexpected to update direction";
        _334 = &(*_335);
        _333 = solana_program::log::sol_log(move _334) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_334);
        StorageDead(_335);
        StorageDead(_333);
        StorageLive(_336);
        _336 = _313;
        _302 = std::result::Result::<(), error::ErrorCode>::Err(move _336);
        StorageDead(_336);
        StorageDead(_313);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_303);
        _301 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _302) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_302);
        _337 = discriminant(_301);
        switchInt(move _337) -> [0: bb139, 1: bb140, otherwise: bb5];
    }

    bb139: {
        StorageLive(_341);
        _341 = ((_301 as Continue).0: ());
        _300 = _341;
        StorageDead(_341);
        StorageDead(_301);
        StorageDead(_300);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = _5;
        _345 = Len(((*_3).5: [state::user::Order; 32]));
        _346 = Lt(_344, _345);
        assert(move _346, "index out of bounds: the length is {} but the index is {}", move _345, _344) -> [success: bb142, unwind continue];
    }

    bb140: {
        StorageLive(_338);
        _338 = ((_301 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_340);
        _340 = _338;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _340) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_301);
        StorageDead(_300);
        goto -> bb378;
    }

    bb142: {
        _343 = &((*_3).5: [state::user::Order; 32])[_344];
        StorageLive(_347);
        _347 = AssetType::Base;
        _342 = Order::get_spot_position_update_direction(move _343, move _347) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_347);
        StorageDead(_343);
        StorageDead(_344);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = _179;
        _353 = <u64 as Cast>::cast::<u128>(move _354) -> [return: bb144, unwind continue];
    }

    bb144: {
        StorageDead(_354);
        _352 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _353) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_353);
        _355 = discriminant(_352);
        switchInt(move _355) -> [0: bb146, 1: bb147, otherwise: bb5];
    }

    bb146: {
        StorageLive(_359);
        _359 = ((_352 as Continue).0: u128);
        _351 = _359;
        StorageDead(_359);
        StorageLive(_360);
        StorageLive(_361);
        _361 = &_342;
        _360 = &(*_361);
        StorageLive(_362);
        _362 = &mut (*_1);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        _367 = &mut (*_3);
        StorageLive(_368);
        _368 = ((*_1).42: u16);
        _366 = User::force_get_spot_position_mut(move _367, move _368) -> [return: bb149, unwind continue];
    }

    bb147: {
        StorageLive(_356);
        _356 = ((_352 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_358);
        _358 = _356;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _358) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_351);
        StorageDead(_350);
        goto -> bb376;
    }

    bb149: {
        StorageDead(_368);
        StorageDead(_367);
        _365 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _366) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_366);
        _369 = discriminant(_365);
        switchInt(move _369) -> [0: bb151, 1: bb152, otherwise: bb5];
    }

    bb151: {
        StorageLive(_373);
        _373 = move ((_365 as Continue).0: &mut state::user::SpotPosition);
        _364 = &mut (*_373);
        StorageDead(_373);
        _363 = &mut (*_364);
        StorageLive(_374);
        StorageLive(_375);
        _375 = &_342;
        StorageLive(_376);
        _824 = const _;
        _376 = &(*_824);
        _374 = <SpotBalanceType as PartialEq>::eq(move _375, move _376) -> [return: bb154, unwind continue];
    }

    bb152: {
        StorageLive(_370);
        _370 = ((_365 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_372);
        _372 = _370;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _372) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_351);
        StorageDead(_350);
        goto -> bb375;
    }

    bb154: {
        StorageDead(_376);
        StorageDead(_375);
        StorageLive(_378);
        _378 = Option::<u128>::None;
        _350 = update_spot_balances_and_cumulative_deposits(move _351, move _360, move _362, move _363, move _374, move _378) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_378);
        StorageDead(_374);
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_351);
        _349 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _350) -> [return: bb156, unwind continue];
    }

    bb156: {
        StorageDead(_350);
        _379 = discriminant(_349);
        switchInt(move _379) -> [0: bb157, 1: bb158, otherwise: bb5];
    }

    bb157: {
        StorageLive(_383);
        _383 = ((_349 as Continue).0: ());
        _348 = _383;
        StorageDead(_383);
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_361);
        StorageDead(_352);
        StorageDead(_349);
        StorageDead(_348);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        _388 = &_182;
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = _5;
        _393 = Len(((*_3).5: [state::user::Order; 32]));
        _394 = Lt(_392, _393);
        assert(move _394, "index out of bounds: the length is {} but the index is {}", move _393, _392) -> [success: bb160, unwind continue];
    }

    bb158: {
        StorageLive(_380);
        _380 = ((_349 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_382);
        _382 = _380;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _382) -> [return: bb159, unwind continue];
    }

    bb159: {
        StorageDead(_382);
        StorageDead(_380);
        goto -> bb375;
    }

    bb160: {
        _391 = &((*_3).5: [state::user::Order; 32])[_392];
        StorageLive(_395);
        _395 = AssetType::Quote;
        _390 = Order::get_spot_position_update_direction(move _391, move _395) -> [return: bb161, unwind continue];
    }

    bb161: {
        _389 = &_390;
        StorageDead(_395);
        StorageDead(_391);
        _387 = <SpotBalanceType as PartialEq>::eq(move _388, move _389) -> [return: bb162, unwind continue];
    }

    bb162: {
        switchInt(move _387) -> [0: bb164, otherwise: bb163];
    }

    bb163: {
        StorageDead(_392);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_388);
        StorageLive(_396);
        _396 = ();
        _386 = std::result::Result::<(), error::ErrorCode>::Ok(move _396);
        StorageDead(_396);
        goto -> bb172;
    }

    bb164: {
        StorageDead(_392);
        StorageDead(_390);
        StorageDead(_389);
        StorageDead(_388);
        StorageLive(_397);
        _397 = error::ErrorCode::FailedToFillOnExternalMarket;
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _823 = const _;
        _408 = &(*_823);
        _407 = &(*_408);
        _406 = move _407 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_407);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _416 = &_397;
        _415 = &(*_416);
        _414 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _415) -> [return: bb165, unwind continue];
    }

    bb165: {
        StorageDead(_415);
        _413 = [move _414];
        StorageDead(_414);
        _412 = &_413;
        _411 = &(*_412);
        _410 = move _411 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_411);
        _405 = Arguments::<'_>::new_v1(move _406, move _410) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_410);
        StorageDead(_406);
        _404 = format(move _405) -> [return: bb167, unwind continue];
    }

    bb167: {
        StorageDead(_405);
        StorageDead(_416);
        StorageDead(_413);
        StorageDead(_412);
        StorageDead(_408);
        _403 = move _404;
        StorageDead(_404);
        _402 = &_403;
        _401 = &(*_402);
        _400 = <String as Deref>::deref(move _401) -> [return: bb168, unwind: bb393];
    }

    bb168: {
        _399 = &(*_400);
        StorageDead(_401);
        _398 = solana_program::log::sol_log(move _399) -> [return: bb169, unwind: bb393];
    }

    bb169: {
        StorageDead(_399);
        drop(_403) -> [return: bb170, unwind: bb395];
    }

    bb170: {
        StorageDead(_403);
        StorageDead(_402);
        StorageDead(_400);
        StorageDead(_398);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = const "Fill on external market lead to unexpected to update direction";
        _418 = &(*_419);
        _417 = solana_program::log::sol_log(move _418) -> [return: bb171, unwind continue];
    }

    bb171: {
        StorageDead(_418);
        StorageDead(_419);
        StorageDead(_417);
        StorageLive(_420);
        _420 = _397;
        _386 = std::result::Result::<(), error::ErrorCode>::Err(move _420);
        StorageDead(_420);
        StorageDead(_397);
        goto -> bb172;
    }

    bb172: {
        StorageDead(_387);
        _385 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _386) -> [return: bb173, unwind continue];
    }

    bb173: {
        StorageDead(_386);
        _421 = discriminant(_385);
        switchInt(move _421) -> [0: bb174, 1: bb175, otherwise: bb5];
    }

    bb174: {
        StorageLive(_425);
        _425 = ((_385 as Continue).0: ());
        _384 = _425;
        StorageDead(_425);
        StorageDead(_385);
        StorageDead(_384);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        _428 = _5;
        _429 = Len(((*_3).5: [state::user::Order; 32]));
        _430 = Lt(_428, _429);
        assert(move _430, "index out of bounds: the length is {} but the index is {}", move _429, _428) -> [success: bb177, unwind continue];
    }

    bb175: {
        StorageLive(_422);
        _422 = ((_385 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_424);
        _424 = _422;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _424) -> [return: bb176, unwind continue];
    }

    bb176: {
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_385);
        StorageDead(_384);
        goto -> bb377;
    }

    bb177: {
        _427 = &((*_3).5: [state::user::Order; 32])[_428];
        StorageLive(_431);
        _431 = AssetType::Quote;
        _426 = Order::get_spot_position_update_direction(move _427, move _431) -> [return: bb178, unwind continue];
    }

    bb178: {
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_428);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        _438 = _280;
        _437 = <u64 as Cast>::cast::<u128>(move _438) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_438);
        _436 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _437) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_437);
        _439 = discriminant(_436);
        switchInt(move _439) -> [0: bb181, 1: bb182, otherwise: bb5];
    }

    bb181: {
        StorageLive(_443);
        _443 = ((_436 as Continue).0: u128);
        _435 = _443;
        StorageDead(_443);
        StorageLive(_444);
        StorageLive(_445);
        _445 = &_426;
        _444 = &(*_445);
        StorageLive(_446);
        _446 = &mut (*_2);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = &mut (*_3);
        _448 = User::get_quote_spot_position_mut(move _449) -> [return: bb184, unwind continue];
    }

    bb182: {
        StorageLive(_440);
        _440 = ((_436 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_442);
        _442 = _440;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _442) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_442);
        StorageDead(_440);
        StorageDead(_435);
        StorageDead(_434);
        goto -> bb373;
    }

    bb184: {
        _447 = &mut (*_448);
        StorageDead(_449);
        StorageLive(_450);
        StorageLive(_451);
        _451 = &_426;
        StorageLive(_452);
        _822 = const _;
        _452 = &(*_822);
        _450 = <SpotBalanceType as PartialEq>::eq(move _451, move _452) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_452);
        StorageDead(_451);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = _181;
        _457 = <u64 as Cast>::cast::<u128>(move _458) -> [return: bb186, unwind continue];
    }

    bb186: {
        StorageDead(_458);
        _456 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _457) -> [return: bb187, unwind continue];
    }

    bb187: {
        StorageDead(_457);
        _459 = discriminant(_456);
        switchInt(move _459) -> [0: bb188, 1: bb189, otherwise: bb5];
    }

    bb188: {
        StorageLive(_463);
        _463 = ((_456 as Continue).0: u128);
        _455 = _463;
        StorageDead(_463);
        _454 = Option::<u128>::Some(move _455);
        StorageDead(_455);
        _434 = update_spot_balances_and_cumulative_deposits(move _435, move _444, move _446, move _447, move _450, move _454) -> [return: bb191, unwind continue];
    }

    bb189: {
        StorageLive(_460);
        _460 = ((_456 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_462);
        _462 = _460;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _462) -> [return: bb190, unwind continue];
    }

    bb190: {
        StorageDead(_462);
        StorageDead(_460);
        StorageDead(_455);
        StorageDead(_454);
        StorageDead(_450);
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_435);
        StorageDead(_434);
        goto -> bb372;
    }

    bb191: {
        StorageDead(_454);
        StorageDead(_450);
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_444);
        StorageDead(_435);
        _433 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _434) -> [return: bb192, unwind continue];
    }

    bb192: {
        StorageDead(_434);
        _464 = discriminant(_433);
        switchInt(move _464) -> [0: bb193, 1: bb194, otherwise: bb5];
    }

    bb193: {
        StorageLive(_468);
        _468 = ((_433 as Continue).0: ());
        _432 = _468;
        StorageDead(_468);
        StorageDead(_456);
        StorageDead(_448);
        StorageDead(_445);
        StorageDead(_436);
        StorageDead(_433);
        StorageDead(_432);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        _472 = &mut (*_3);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        _477 = _249;
        _476 = <u64 as Cast>::cast::<i64>(move _477) -> [return: bb196, unwind continue];
    }

    bb194: {
        StorageLive(_465);
        _465 = ((_433 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_467);
        _467 = _465;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _467) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_467);
        StorageDead(_465);
        goto -> bb372;
    }

    bb196: {
        StorageDead(_477);
        _475 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _476) -> [return: bb197, unwind continue];
    }

    bb197: {
        StorageDead(_476);
        _478 = discriminant(_475);
        switchInt(move _478) -> [0: bb198, 1: bb199, otherwise: bb5];
    }

    bb198: {
        StorageLive(_482);
        _482 = ((_475 as Continue).0: i64);
        _474 = _482;
        StorageDead(_482);
        _483 = Eq(_474, const i64::MIN);
        assert(!move _483, "attempt to negate `{}`, which would overflow", _474) -> [success: bb201, unwind continue];
    }

    bb199: {
        StorageLive(_479);
        _479 = ((_475 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_481);
        _481 = _479;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _481) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_481);
        StorageDead(_479);
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_471);
        goto -> bb371;
    }

    bb201: {
        _473 = Neg(move _474);
        StorageDead(_474);
        _471 = User::update_cumulative_spot_fees(move _472, move _473) -> [return: bb202, unwind continue];
    }

    bb202: {
        StorageDead(_473);
        StorageDead(_472);
        _470 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _471) -> [return: bb203, unwind continue];
    }

    bb203: {
        StorageDead(_471);
        _484 = discriminant(_470);
        switchInt(move _484) -> [0: bb204, 1: bb205, otherwise: bb5];
    }

    bb204: {
        StorageLive(_488);
        _488 = ((_470 as Continue).0: ());
        _469 = _488;
        StorageDead(_488);
        StorageDead(_475);
        StorageDead(_470);
        StorageDead(_469);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = &mut (*_4);
        StorageLive(_493);
        _493 = ((*_1).58: u8);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        _497 = _181;
        _496 = <u64 as Cast>::cast::<u64>(move _497) -> [return: bb207, unwind continue];
    }

    bb205: {
        StorageLive(_485);
        _485 = ((_470 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_487);
        _487 = _485;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _487) -> [return: bb206, unwind continue];
    }

    bb206: {
        StorageDead(_487);
        StorageDead(_485);
        goto -> bb371;
    }

    bb207: {
        StorageDead(_497);
        _495 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _496) -> [return: bb208, unwind continue];
    }

    bb208: {
        StorageDead(_496);
        _498 = discriminant(_495);
        switchInt(move _498) -> [0: bb209, 1: bb210, otherwise: bb5];
    }

    bb209: {
        StorageLive(_502);
        _502 = ((_495 as Continue).0: u64);
        _494 = _502;
        StorageDead(_502);
        StorageLive(_503);
        _503 = _10;
        _491 = UserStats::update_taker_volume_30d(move _492, move _493, move _494, move _503) -> [return: bb212, unwind continue];
    }

    bb210: {
        StorageLive(_499);
        _499 = ((_495 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_501);
        _501 = _499;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _501) -> [return: bb211, unwind continue];
    }

    bb211: {
        StorageDead(_501);
        StorageDead(_499);
        StorageDead(_494);
        StorageDead(_493);
        StorageDead(_492);
        StorageDead(_491);
        goto -> bb370;
    }

    bb212: {
        StorageDead(_503);
        StorageDead(_494);
        StorageDead(_493);
        StorageDead(_492);
        _490 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _491) -> [return: bb213, unwind continue];
    }

    bb213: {
        StorageDead(_491);
        _504 = discriminant(_490);
        switchInt(move _504) -> [0: bb214, 1: bb215, otherwise: bb5];
    }

    bb214: {
        StorageLive(_508);
        _508 = ((_490 as Continue).0: ());
        _489 = _508;
        StorageDead(_508);
        StorageDead(_495);
        StorageDead(_490);
        StorageDead(_489);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        _512 = &mut (*_4);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _516 = _249;
        _515 = <u64 as Cast>::cast::<u64>(move _516) -> [return: bb217, unwind continue];
    }

    bb215: {
        StorageLive(_505);
        _505 = ((_490 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_507);
        _507 = _505;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _507) -> [return: bb216, unwind continue];
    }

    bb216: {
        StorageDead(_507);
        StorageDead(_505);
        goto -> bb370;
    }

    bb217: {
        StorageDead(_516);
        _514 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _515) -> [return: bb218, unwind continue];
    }

    bb218: {
        StorageDead(_515);
        _517 = discriminant(_514);
        switchInt(move _517) -> [0: bb219, 1: bb220, otherwise: bb5];
    }

    bb219: {
        StorageLive(_521);
        _521 = ((_514 as Continue).0: u64);
        _513 = _521;
        StorageDead(_521);
        _511 = UserStats::increment_total_fees(move _512, move _513) -> [return: bb222, unwind continue];
    }

    bb220: {
        StorageLive(_518);
        _518 = ((_514 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_520);
        _520 = _518;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _520) -> [return: bb221, unwind continue];
    }

    bb221: {
        StorageDead(_520);
        StorageDead(_518);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_511);
        goto -> bb369;
    }

    bb222: {
        StorageDead(_513);
        StorageDead(_512);
        _510 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _511) -> [return: bb223, unwind continue];
    }

    bb223: {
        StorageDead(_511);
        _522 = discriminant(_510);
        switchInt(move _522) -> [0: bb224, 1: bb225, otherwise: bb5];
    }

    bb224: {
        StorageLive(_526);
        _526 = ((_510 as Continue).0: ());
        _509 = _526;
        StorageDead(_526);
        StorageDead(_514);
        StorageDead(_510);
        StorageDead(_509);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        _532 = _5;
        _533 = Len(((*_3).5: [state::user::Order; 32]));
        _534 = Lt(_532, _533);
        assert(move _534, "index out of bounds: the length is {} but the index is {}", move _533, _532) -> [success: bb227, unwind continue];
    }

    bb225: {
        StorageLive(_523);
        _523 = ((_510 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_525);
        _525 = _523;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _525) -> [return: bb226, unwind continue];
    }

    bb226: {
        StorageDead(_525);
        StorageDead(_523);
        goto -> bb369;
    }

    bb227: {
        _531 = &mut ((*_3).5: [state::user::Order; 32])[_532];
        _530 = &mut (*_531);
        StorageLive(_535);
        _535 = _179;
        StorageLive(_536);
        _536 = _181;
        _529 = update_order_after_fill(move _530, move _535, move _536) -> [return: bb228, unwind continue];
    }

    bb228: {
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_530);
        _528 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _529) -> [return: bb229, unwind continue];
    }

    bb229: {
        StorageDead(_529);
        _537 = discriminant(_528);
        switchInt(move _537) -> [0: bb230, 1: bb231, otherwise: bb5];
    }

    bb230: {
        StorageLive(_541);
        _541 = ((_528 as Continue).0: ());
        _527 = _541;
        StorageDead(_541);
        StorageDead(_532);
        StorageDead(_531);
        StorageDead(_528);
        StorageDead(_527);
        StorageLive(_542);
        StorageLive(_543);
        _543 = _5;
        _544 = Len(((*_3).5: [state::user::Order; 32]));
        _545 = Lt(_543, _544);
        assert(move _545, "index out of bounds: the length is {} but the index is {}", move _544, _543) -> [success: bb233, unwind continue];
    }

    bb231: {
        StorageLive(_538);
        _538 = ((_528 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_540);
        _540 = _538;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _540) -> [return: bb232, unwind continue];
    }

    bb232: {
        StorageDead(_540);
        StorageDead(_538);
        StorageDead(_532);
        StorageDead(_531);
        StorageDead(_528);
        StorageDead(_527);
        goto -> bb374;
    }

    bb233: {
        _542 = (((*_3).5: [state::user::Order; 32])[_543].17: controller::position::PositionDirection);
        StorageDead(_543);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        _548 = _5;
        _549 = Len(((*_3).5: [state::user::Order; 32]));
        _550 = Lt(_548, _549);
        assert(move _550, "index out of bounds: the length is {} but the index is {}", move _549, _548) -> [success: bb234, unwind continue];
    }

    bb234: {
        _547 = &((*_3).5: [state::user::Order; 32])[_548];
        _546 = Order::update_open_bids_and_asks(move _547) -> [return: bb235, unwind continue];
    }

    bb235: {
        StorageDead(_547);
        StorageDead(_548);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        _558 = &mut (*_3);
        StorageLive(_559);
        _559 = ((*_1).42: u16);
        _557 = User::force_get_spot_position_mut(move _558, move _559) -> [return: bb236, unwind continue];
    }

    bb236: {
        StorageDead(_559);
        StorageDead(_558);
        _556 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _557) -> [return: bb237, unwind continue];
    }

    bb237: {
        StorageDead(_557);
        _560 = discriminant(_556);
        switchInt(move _560) -> [0: bb238, 1: bb239, otherwise: bb5];
    }

    bb238: {
        StorageLive(_564);
        _564 = move ((_556 as Continue).0: &mut state::user::SpotPosition);
        _555 = &mut (*_564);
        StorageDead(_564);
        _554 = &mut (*_555);
        StorageLive(_565);
        StorageLive(_566);
        _566 = &_542;
        _565 = &(*_566);
        StorageLive(_567);
        _567 = _179;
        StorageLive(_568);
        _568 = _546;
        _553 = decrease_spot_open_bids_and_asks(move _554, move _565, move _567, move _568) -> [return: bb241, unwind continue];
    }

    bb239: {
        StorageLive(_561);
        _561 = ((_556 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_563);
        _563 = _561;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _563) -> [return: bb240, unwind continue];
    }

    bb240: {
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_554);
        StorageDead(_553);
        goto -> bb367;
    }

    bb241: {
        StorageDead(_568);
        StorageDead(_567);
        StorageDead(_565);
        StorageDead(_554);
        _552 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _553) -> [return: bb242, unwind continue];
    }

    bb242: {
        StorageDead(_553);
        _569 = discriminant(_552);
        switchInt(move _569) -> [0: bb243, 1: bb244, otherwise: bb5];
    }

    bb243: {
        StorageLive(_573);
        _573 = ((_552 as Continue).0: ());
        _551 = _573;
        StorageDead(_573);
        StorageDead(_566);
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_552);
        StorageDead(_551);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        _576 = move _7;
        StorageLive(_577);
        _577 = move _8;
        _575 = (move _576, move _577);
        StorageDead(_577);
        StorageDead(_576);
        _579 = discriminant((_575.0: std::option::Option<&mut state::user::User>));
        switchInt(move _579) -> [1: bb247, otherwise: bb246];
    }

    bb244: {
        StorageLive(_570);
        _570 = ((_552 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_572);
        _572 = _570;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _572) -> [return: bb245, unwind continue];
    }

    bb245: {
        StorageDead(_572);
        StorageDead(_570);
        StorageDead(_566);
        goto -> bb367;
    }

    bb246: {
        _574 = const ();
        goto -> bb284;
    }

    bb247: {
        _578 = discriminant((_575.1: std::option::Option<&mut state::user::UserStats>));
        switchInt(move _578) -> [1: bb248, otherwise: bb246];
    }

    bb248: {
        StorageLive(_580);
        _580 = move (((_575.0: std::option::Option<&mut state::user::User>) as Some).0: &mut state::user::User);
        StorageLive(_581);
        _581 = move (((_575.1: std::option::Option<&mut state::user::UserStats>) as Some).0: &mut state::user::UserStats);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        _584 = _252;
        _583 = Gt(move _584, const 0_u64);
        switchInt(move _583) -> [0: bb271, otherwise: bb249];
    }

    bb249: {
        StorageDead(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        _591 = _252;
        _590 = <u64 as Cast>::cast::<u128>(move _591) -> [return: bb250, unwind continue];
    }

    bb250: {
        StorageDead(_591);
        _589 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _590) -> [return: bb251, unwind continue];
    }

    bb251: {
        StorageDead(_590);
        _592 = discriminant(_589);
        switchInt(move _592) -> [0: bb252, 1: bb253, otherwise: bb5];
    }

    bb252: {
        StorageLive(_596);
        _596 = ((_589 as Continue).0: u128);
        _588 = _596;
        StorageDead(_596);
        StorageLive(_597);
        StorageLive(_598);
        _821 = const _;
        _598 = &(*_821);
        _597 = &(*_598);
        StorageLive(_600);
        _600 = &mut (*_2);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = &mut (*_580);
        _603 = User::get_quote_spot_position_mut(move _604) -> [return: bb255, unwind continue];
    }

    bb253: {
        StorageLive(_593);
        _593 = ((_589 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_595);
        _595 = _593;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _595) -> [return: bb254, unwind continue];
    }

    bb254: {
        StorageDead(_595);
        StorageDead(_593);
        StorageDead(_588);
        StorageDead(_587);
        goto -> bb364;
    }

    bb255: {
        _602 = &mut (*_603);
        _601 = move _602 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_604);
        StorageDead(_602);
        _587 = update_spot_balances(move _588, move _597, move _600, move _601, const false) -> [return: bb256, unwind continue];
    }

    bb256: {
        StorageDead(_601);
        StorageDead(_600);
        StorageDead(_597);
        StorageDead(_588);
        _586 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _587) -> [return: bb257, unwind continue];
    }

    bb257: {
        StorageDead(_587);
        _605 = discriminant(_586);
        switchInt(move _605) -> [0: bb258, 1: bb259, otherwise: bb5];
    }

    bb258: {
        StorageLive(_609);
        _609 = ((_586 as Continue).0: ());
        _585 = _609;
        StorageDead(_609);
        StorageDead(_603);
        StorageDead(_598);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_585);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        _613 = &mut (*_580);
        StorageLive(_614);
        StorageLive(_615);
        StorageLive(_616);
        StorageLive(_617);
        _617 = _252;
        _616 = <u64 as Cast>::cast::<i64>(move _617) -> [return: bb261, unwind continue];
    }

    bb259: {
        StorageLive(_606);
        _606 = ((_586 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_608);
        _608 = _606;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _608) -> [return: bb260, unwind continue];
    }

    bb260: {
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_603);
        StorageDead(_598);
        goto -> bb364;
    }

    bb261: {
        StorageDead(_617);
        _615 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _616) -> [return: bb262, unwind continue];
    }

    bb262: {
        StorageDead(_616);
        _618 = discriminant(_615);
        switchInt(move _618) -> [0: bb263, 1: bb264, otherwise: bb5];
    }

    bb263: {
        StorageLive(_622);
        _622 = ((_615 as Continue).0: i64);
        _614 = _622;
        StorageDead(_622);
        _612 = User::update_cumulative_spot_fees(move _613, move _614) -> [return: bb266, unwind continue];
    }

    bb264: {
        StorageLive(_619);
        _619 = ((_615 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_621);
        _621 = _619;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _621) -> [return: bb265, unwind continue];
    }

    bb265: {
        StorageDead(_621);
        StorageDead(_619);
        StorageDead(_614);
        StorageDead(_613);
        StorageDead(_612);
        goto -> bb363;
    }

    bb266: {
        StorageDead(_614);
        StorageDead(_613);
        _611 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _612) -> [return: bb267, unwind continue];
    }

    bb267: {
        StorageDead(_612);
        _623 = discriminant(_611);
        switchInt(move _623) -> [0: bb268, 1: bb269, otherwise: bb5];
    }

    bb268: {
        StorageLive(_627);
        _627 = ((_611 as Continue).0: ());
        _610 = _627;
        StorageDead(_627);
        StorageDead(_615);
        StorageDead(_611);
        StorageDead(_610);
        _582 = const ();
        goto -> bb272;
    }

    bb269: {
        StorageLive(_624);
        _624 = ((_611 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_626);
        _626 = _624;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _626) -> [return: bb270, unwind continue];
    }

    bb270: {
        StorageDead(_626);
        StorageDead(_624);
        goto -> bb363;
    }

    bb271: {
        StorageDead(_584);
        _582 = const ();
        goto -> bb272;
    }

    bb272: {
        StorageDead(_583);
        StorageDead(_582);
        StorageLive(_628);
        StorageLive(_629);
        _629 = &mut (*_580);
        StorageLive(_630);
        _630 = _11;
        _628 = User::update_last_active_slot(move _629, move _630) -> [return: bb273, unwind continue];
    }

    bb273: {
        StorageDead(_630);
        StorageDead(_629);
        StorageDead(_628);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        _634 = &mut (*_581);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        _638 = _181;
        _637 = <u64 as Cast>::cast::<u64>(move _638) -> [return: bb274, unwind continue];
    }

    bb274: {
        StorageDead(_638);
        _636 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _637) -> [return: bb275, unwind continue];
    }

    bb275: {
        StorageDead(_637);
        _639 = discriminant(_636);
        switchInt(move _639) -> [0: bb276, 1: bb277, otherwise: bb5];
    }

    bb276: {
        StorageLive(_643);
        _643 = ((_636 as Continue).0: u64);
        _635 = _643;
        StorageDead(_643);
        StorageLive(_644);
        _644 = _10;
        _633 = UserStats::update_filler_volume(move _634, move _635, move _644) -> [return: bb279, unwind continue];
    }

    bb277: {
        StorageLive(_640);
        _640 = ((_636 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_642);
        _642 = _640;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _642) -> [return: bb278, unwind continue];
    }

    bb278: {
        StorageDead(_642);
        StorageDead(_640);
        StorageDead(_635);
        StorageDead(_634);
        StorageDead(_633);
        goto -> bb362;
    }

    bb279: {
        StorageDead(_644);
        StorageDead(_635);
        StorageDead(_634);
        _632 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _633) -> [return: bb280, unwind continue];
    }

    bb280: {
        StorageDead(_633);
        _645 = discriminant(_632);
        switchInt(move _645) -> [0: bb281, 1: bb282, otherwise: bb5];
    }

    bb281: {
        StorageLive(_649);
        _649 = ((_632 as Continue).0: ());
        _631 = _649;
        StorageDead(_649);
        StorageDead(_636);
        StorageDead(_632);
        StorageDead(_631);
        _574 = const ();
        StorageDead(_581);
        StorageDead(_580);
        goto -> bb284;
    }

    bb282: {
        StorageLive(_646);
        _646 = ((_632 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_648);
        _648 = _646;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _648) -> [return: bb283, unwind continue];
    }

    bb283: {
        StorageDead(_648);
        StorageDead(_646);
        goto -> bb362;
    }

    bb284: {
        StorageDead(_575);
        StorageDead(_574);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        _652 = _251;
        _651 = Ne(move _652, const 0_i64);
        switchInt(move _651) -> [0: bb300, otherwise: bb285];
    }

    bb285: {
        StorageDead(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        _660 = _251;
        _659 = core::num::<impl i64>::unsigned_abs(move _660) -> [return: bb286, unwind continue];
    }

    bb286: {
        StorageDead(_660);
        _658 = <u64 as Cast>::cast::<u128>(move _659) -> [return: bb287, unwind continue];
    }

    bb287: {
        StorageDead(_659);
        _657 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _658) -> [return: bb288, unwind continue];
    }

    bb288: {
        StorageDead(_658);
        _661 = discriminant(_657);
        switchInt(move _661) -> [0: bb289, 1: bb290, otherwise: bb5];
    }

    bb289: {
        StorageLive(_665);
        _665 = ((_657 as Continue).0: u128);
        _656 = _665;
        StorageDead(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        _668 = _251;
        _667 = Gt(move _668, const 0_i64);
        switchInt(move _667) -> [0: bb293, otherwise: bb292];
    }

    bb290: {
        StorageLive(_662);
        _662 = ((_657 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_664);
        _664 = _662;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _664) -> [return: bb291, unwind continue];
    }

    bb291: {
        StorageDead(_664);
        StorageDead(_662);
        StorageDead(_656);
        StorageDead(_655);
        goto -> bb361;
    }

    bb292: {
        StorageDead(_668);
        StorageLive(_669);
        _819 = const _;
        _669 = &(*_819);
        _666 = &(*_669);
        StorageDead(_669);
        goto -> bb294;
    }

    bb293: {
        StorageDead(_668);
        StorageLive(_671);
        _820 = const _;
        _671 = &(*_820);
        _666 = &(*_671);
        StorageDead(_671);
        goto -> bb294;
    }

    bb294: {
        StorageDead(_667);
        StorageLive(_673);
        _673 = &mut (*_2);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        _676 = &mut ((*_1).8: state::perp_market::PoolBalance);
        _675 = &mut (*_676);
        _674 = move _675 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_675);
        _655 = update_spot_balances(move _656, move _666, move _673, move _674, const false) -> [return: bb295, unwind continue];
    }

    bb295: {
        StorageDead(_674);
        StorageDead(_673);
        StorageDead(_666);
        StorageDead(_656);
        _654 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _655) -> [return: bb296, unwind continue];
    }

    bb296: {
        StorageDead(_655);
        _677 = discriminant(_654);
        switchInt(move _677) -> [0: bb297, 1: bb298, otherwise: bb5];
    }

    bb297: {
        StorageLive(_681);
        _681 = ((_654 as Continue).0: ());
        _653 = _681;
        StorageDead(_681);
        StorageDead(_676);
        StorageDead(_657);
        StorageDead(_654);
        StorageDead(_653);
        _650 = const ();
        goto -> bb301;
    }

    bb298: {
        StorageLive(_678);
        _678 = ((_654 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_680);
        _680 = _678;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _680) -> [return: bb299, unwind continue];
    }

    bb299: {
        StorageDead(_680);
        StorageDead(_678);
        StorageDead(_676);
        goto -> bb361;
    }

    bb300: {
        StorageDead(_652);
        _650 = const ();
        goto -> bb301;
    }

    bb301: {
        StorageDead(_651);
        StorageDead(_650);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        _685 = ((*_1).10: u128);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        _689 = _250;
        _688 = <u64 as Cast>::cast::<u128>(move _689) -> [return: bb302, unwind continue];
    }

    bb302: {
        StorageDead(_689);
        _687 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _688) -> [return: bb303, unwind continue];
    }

    bb303: {
        StorageDead(_688);
        _690 = discriminant(_687);
        switchInt(move _690) -> [0: bb304, 1: bb305, otherwise: bb5];
    }

    bb304: {
        StorageLive(_694);
        _694 = ((_687 as Continue).0: u128);
        _686 = _694;
        StorageDead(_694);
        _684 = <u128 as SafeMath>::safe_add(move _685, move _686) -> [return: bb307, unwind continue];
    }

    bb305: {
        StorageLive(_691);
        _691 = ((_687 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_693);
        _693 = _691;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _693) -> [return: bb306, unwind continue];
    }

    bb306: {
        StorageDead(_693);
        StorageDead(_691);
        StorageDead(_686);
        StorageDead(_685);
        StorageDead(_684);
        goto -> bb360;
    }

    bb307: {
        StorageDead(_686);
        StorageDead(_685);
        _683 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _684) -> [return: bb308, unwind continue];
    }

    bb308: {
        StorageDead(_684);
        _695 = discriminant(_683);
        switchInt(move _695) -> [0: bb309, 1: bb310, otherwise: bb5];
    }

    bb309: {
        StorageLive(_699);
        _699 = ((_683 as Continue).0: u128);
        _682 = _699;
        StorageDead(_699);
        ((*_1).10: u128) = move _682;
        StorageDead(_682);
        StorageDead(_687);
        StorageDead(_683);
        StorageLive(_700);
        StorageLive(_701);
        _701 = ((*_1).29: u64);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        _705 = _701;
        _704 = core::num::<impl u64>::checked_add(move _705, const 1_u64) -> [return: bb312, unwind continue];
    }

    bb310: {
        StorageLive(_696);
        _696 = ((_683 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_698);
        _698 = _696;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _698) -> [return: bb311, unwind continue];
    }

    bb311: {
        StorageDead(_698);
        StorageDead(_696);
        goto -> bb360;
    }

    bb312: {
        StorageDead(_705);
        StorageLive(_706);
        _706 = Option::<u64>::Some(const 1_u64);
        _703 = Option::<u64>::or(move _704, move _706) -> [return: bb313, unwind continue];
    }

    bb313: {
        StorageDead(_706);
        StorageDead(_704);
        _702 = Option::<u64>::unwrap(move _703) -> [return: bb314, unwind continue];
    }

    bb314: {
        StorageDead(_703);
        ((*_1).29: u64) = move _702;
        StorageDead(_702);
        _700 = _701;
        StorageDead(_701);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        _710 = _10;
        StorageLive(_711);
        _711 = OrderAction::Fill;
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        _715 = &(*_14);
        _714 = <dyn SpotFulfillmentParams as SpotFulfillmentParams>::get_order_action_explanation(move _715) -> [return: bb315, unwind continue];
    }

    bb315: {
        StorageDead(_715);
        _713 = <std::result::Result<OrderActionExplanation, error::ErrorCode> as Try>::branch(move _714) -> [return: bb316, unwind continue];
    }

    bb316: {
        StorageDead(_714);
        _716 = discriminant(_713);
        switchInt(move _716) -> [0: bb317, 1: bb318, otherwise: bb5];
    }

    bb317: {
        StorageLive(_720);
        _720 = ((_713 as Continue).0: state::events::OrderActionExplanation);
        _712 = _720;
        StorageDead(_720);
        StorageLive(_721);
        StorageLive(_722);
        _722 = _5;
        _723 = Len(((*_3).5: [state::user::Order; 32]));
        _724 = Lt(_722, _723);
        assert(move _724, "index out of bounds: the length is {} but the index is {}", move _723, _722) -> [success: bb320, unwind continue];
    }

    bb318: {
        StorageLive(_717);
        _717 = ((_713 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_719);
        _719 = _717;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _719) -> [return: bb319, unwind continue];
    }

    bb319: {
        StorageDead(_719);
        StorageDead(_717);
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_710);
        StorageDead(_709);
        goto -> bb358;
    }

    bb320: {
        _721 = (((*_3).5: [state::user::Order; 32])[_722].11: u16);
        StorageLive(_725);
        StorageLive(_726);
        _726 = (*_9);
        _725 = Option::<anchor_lang::prelude::Pubkey>::Some(move _726);
        StorageDead(_726);
        StorageLive(_727);
        StorageLive(_728);
        _728 = _700;
        _727 = Option::<u64>::Some(move _728);
        StorageDead(_728);
        StorageLive(_729);
        StorageLive(_730);
        _730 = _252;
        _729 = Option::<u64>::Some(move _730);
        StorageDead(_730);
        StorageLive(_731);
        StorageLive(_732);
        _732 = _179;
        _731 = Option::<u64>::Some(move _732);
        StorageDead(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        StorageLive(_737);
        _737 = _181;
        _736 = <u64 as Cast>::cast::<u64>(move _737) -> [return: bb321, unwind continue];
    }

    bb321: {
        StorageDead(_737);
        _735 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _736) -> [return: bb322, unwind continue];
    }

    bb322: {
        StorageDead(_736);
        _738 = discriminant(_735);
        switchInt(move _738) -> [0: bb323, 1: bb324, otherwise: bb5];
    }

    bb323: {
        StorageLive(_742);
        _742 = ((_735 as Continue).0: u64);
        _734 = _742;
        StorageDead(_742);
        _733 = Option::<u64>::Some(move _734);
        StorageDead(_734);
        StorageLive(_743);
        StorageLive(_744);
        _744 = _249;
        _743 = Option::<u64>::Some(move _744);
        StorageDead(_744);
        StorageLive(_745);
        _745 = Option::<u64>::Some(const 0_u64);
        StorageLive(_746);
        _746 = Option::<u64>::None;
        StorageLive(_747);
        _747 = Option::<i64>::Some(const 0_i64);
        StorageLive(_748);
        StorageLive(_749);
        _749 = _183;
        _748 = Option::<u64>::Some(move _749);
        StorageDead(_749);
        StorageLive(_750);
        StorageLive(_751);
        _751 = (*_6);
        _750 = Option::<anchor_lang::prelude::Pubkey>::Some(move _751);
        StorageDead(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        _754 = _5;
        _755 = Len(((*_3).5: [state::user::Order; 32]));
        _756 = Lt(_754, _755);
        assert(move _756, "index out of bounds: the length is {} but the index is {}", move _755, _754) -> [success: bb326, unwind continue];
    }

    bb324: {
        StorageLive(_739);
        _739 = ((_735 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_741);
        _741 = _739;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _741) -> [return: bb325, unwind continue];
    }

    bb325: {
        StorageDead(_741);
        StorageDead(_739);
        StorageDead(_734);
        StorageDead(_733);
        StorageDead(_731);
        StorageDead(_729);
        StorageDead(_727);
        StorageDead(_725);
        StorageDead(_721);
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_710);
        StorageDead(_709);
        goto -> bb357;
    }

    bb326: {
        _753 = ((*_3).5: [state::user::Order; 32])[_754];
        _752 = Option::<Order>::Some(move _753);
        StorageDead(_753);
        StorageLive(_757);
        _757 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_758);
        _758 = Option::<Order>::None;
        StorageLive(_759);
        _759 = _15;
        StorageLive(_760);
        _760 = Option::<u64>::None;
        StorageLive(_761);
        _761 = Option::<u64>::None;
        StorageLive(_762);
        _762 = Option::<u64>::None;
        StorageLive(_763);
        _763 = Option::<u64>::None;
        StorageLive(_764);
        _764 = Option::<u64>::None;
        _709 = get_order_action_record(move _710, move _711, move _712, move _721, move _725, move _727, move _729, move _731, move _733, move _743, move _745, move _746, move _747, move _748, move _750, move _752, move _757, move _758, move _759, const 0_u8, move _760, move _761, move _762, move _763, move _764) -> [return: bb327, unwind continue];
    }

    bb327: {
        StorageDead(_764);
        StorageDead(_763);
        StorageDead(_762);
        StorageDead(_761);
        StorageDead(_760);
        StorageDead(_759);
        StorageDead(_758);
        StorageDead(_757);
        StorageDead(_752);
        StorageDead(_750);
        StorageDead(_748);
        StorageDead(_747);
        StorageDead(_746);
        StorageDead(_745);
        StorageDead(_743);
        StorageDead(_733);
        StorageDead(_731);
        StorageDead(_729);
        StorageDead(_727);
        StorageDead(_725);
        StorageDead(_721);
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_710);
        _708 = <std::result::Result<OrderActionRecord, error::ErrorCode> as Try>::branch(move _709) -> [return: bb328, unwind continue];
    }

    bb328: {
        StorageDead(_709);
        _765 = discriminant(_708);
        switchInt(move _765) -> [0: bb329, 1: bb330, otherwise: bb5];
    }

    bb329: {
        StorageLive(_769);
        _769 = move ((_708 as Continue).0: state::events::OrderActionRecord);
        _707 = move _769;
        StorageDead(_769);
        StorageDead(_754);
        StorageDead(_735);
        StorageDead(_722);
        StorageDead(_713);
        StorageDead(_708);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        _773 = move _707;
        _772 = emit_stack::<OrderActionRecord, 464>(move _773) -> [return: bb332, unwind continue];
    }

    bb330: {
        StorageLive(_766);
        _766 = ((_708 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_768);
        _768 = _766;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _768) -> [return: bb331, unwind continue];
    }

    bb331: {
        StorageDead(_768);
        StorageDead(_766);
        StorageDead(_754);
        goto -> bb357;
    }

    bb332: {
        StorageDead(_773);
        _771 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _772) -> [return: bb333, unwind continue];
    }

    bb333: {
        StorageDead(_772);
        _774 = discriminant(_771);
        switchInt(move _774) -> [0: bb334, 1: bb335, otherwise: bb5];
    }

    bb334: {
        StorageLive(_778);
        _778 = ((_771 as Continue).0: ());
        _770 = _778;
        StorageDead(_778);
        StorageDead(_771);
        StorageDead(_770);
        StorageLive(_779);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        _785 = _5;
        _786 = Len(((*_3).5: [state::user::Order; 32]));
        _787 = Lt(_785, _786);
        assert(move _787, "index out of bounds: the length is {} but the index is {}", move _786, _785) -> [success: bb337, unwind continue];
    }

    bb335: {
        StorageLive(_775);
        _775 = ((_771 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_777);
        _777 = _775;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _777) -> [return: bb336, unwind continue];
    }

    bb336: {
        StorageDead(_777);
        StorageDead(_775);
        StorageDead(_771);
        StorageDead(_770);
        goto -> bb359;
    }

    bb337: {
        _784 = &((*_3).5: [state::user::Order; 32])[_785];
        StorageLive(_788);
        _788 = Option::<i64>::None;
        _783 = Order::get_base_asset_amount_unfilled(move _784, move _788) -> [return: bb338, unwind continue];
    }

    bb338: {
        StorageDead(_788);
        StorageDead(_784);
        _782 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _783) -> [return: bb339, unwind continue];
    }

    bb339: {
        StorageDead(_783);
        _789 = discriminant(_782);
        switchInt(move _789) -> [0: bb340, 1: bb341, otherwise: bb5];
    }

    bb340: {
        StorageLive(_793);
        _793 = ((_782 as Continue).0: u64);
        _781 = _793;
        StorageDead(_793);
        _780 = Eq(move _781, const 0_u64);
        switchInt(move _780) -> [0: bb344, otherwise: bb343];
    }

    bb341: {
        StorageLive(_790);
        _790 = ((_782 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_792);
        _792 = _790;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _792) -> [return: bb342, unwind continue];
    }

    bb342: {
        StorageDead(_792);
        StorageDead(_790);
        StorageDead(_785);
        StorageDead(_782);
        StorageDead(_781);
        goto -> bb356;
    }

    bb343: {
        StorageDead(_785);
        StorageDead(_782);
        StorageDead(_781);
        StorageLive(_794);
        StorageLive(_795);
        _795 = &mut (*_3);
        StorageLive(_796);
        StorageLive(_797);
        StorageLive(_798);
        _798 = _5;
        _799 = Len(((*_3).5: [state::user::Order; 32]));
        _800 = Lt(_798, _799);
        assert(move _800, "index out of bounds: the length is {} but the index is {}", move _799, _798) -> [success: bb345, unwind continue];
    }

    bb344: {
        StorageDead(_785);
        StorageDead(_782);
        StorageDead(_781);
        _779 = const ();
        goto -> bb355;
    }

    bb345: {
        _797 = &((*_3).5: [state::user::Order; 32])[_798];
        _796 = Order::has_auction(move _797) -> [return: bb346, unwind continue];
    }

    bb346: {
        StorageDead(_797);
        _794 = User::decrement_open_orders(move _795, move _796) -> [return: bb347, unwind continue];
    }

    bb347: {
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_798);
        StorageDead(_794);
        StorageLive(_801);
        _801 = OrderStatus::Filled;
        StorageLive(_802);
        _802 = _5;
        _803 = Len(((*_3).5: [state::user::Order; 32]));
        _804 = Lt(_802, _803);
        assert(move _804, "index out of bounds: the length is {} but the index is {}", move _803, _802) -> [success: bb348, unwind continue];
    }

    bb348: {
        (((*_3).5: [state::user::Order; 32])[_802].12: state::user::OrderStatus) = move _801;
        StorageDead(_801);
        StorageDead(_802);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        _808 = &mut (*_3);
        StorageLive(_809);
        _809 = ((*_1).42: u16);
        _807 = User::force_get_spot_position_mut(move _808, move _809) -> [return: bb349, unwind continue];
    }

    bb349: {
        StorageDead(_809);
        StorageDead(_808);
        _806 = <std::result::Result<&mut SpotPosition, error::ErrorCode> as Try>::branch(move _807) -> [return: bb350, unwind continue];
    }

    bb350: {
        StorageDead(_807);
        _810 = discriminant(_806);
        switchInt(move _810) -> [0: bb351, 1: bb352, otherwise: bb5];
    }

    bb351: {
        StorageLive(_814);
        _814 = move ((_806 as Continue).0: &mut state::user::SpotPosition);
        _805 = move _814;
        StorageDead(_814);
        _815 = CheckedSub(((*_805).6: u8), const 1_u8);
        assert(!move (_815.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_805).6: u8), const 1_u8) -> [success: bb354, unwind continue];
    }

    bb352: {
        StorageLive(_811);
        _811 = ((_806 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_813);
        _813 = _811;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _813) -> [return: bb353, unwind continue];
    }

    bb353: {
        StorageDead(_813);
        StorageDead(_811);
        StorageDead(_806);
        StorageDead(_805);
        goto -> bb356;
    }

    bb354: {
        ((*_805).6: u8) = move (_815.0: u8);
        StorageDead(_806);
        StorageDead(_805);
        _779 = const ();
        goto -> bb355;
    }

    bb355: {
        StorageDead(_780);
        StorageDead(_779);
        StorageLive(_816);
        StorageLive(_817);
        _817 = _179;
        StorageLive(_818);
        _818 = _181;
        _816 = (move _817, move _818);
        StorageDead(_818);
        StorageDead(_817);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _816);
        StorageDead(_816);
        StorageDead(_707);
        StorageDead(_700);
        StorageDead(_546);
        StorageDead(_542);
        StorageDead(_426);
        StorageDead(_342);
        StorageDead(_280);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_236);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_139);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_112);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        StorageDead(_90);
        StorageDead(_67);
        StorageDead(_47);
        StorageDead(_29);
        StorageDead(_15);
        goto -> bb392;
    }

    bb356: {
        StorageDead(_780);
        StorageDead(_779);
        goto -> bb359;
    }

    bb357: {
        StorageDead(_735);
        StorageDead(_722);
        goto -> bb358;
    }

    bb358: {
        StorageDead(_713);
        StorageDead(_708);
        goto -> bb359;
    }

    bb359: {
        StorageDead(_707);
        StorageDead(_700);
        goto -> bb368;
    }

    bb360: {
        StorageDead(_682);
        StorageDead(_687);
        StorageDead(_683);
        goto -> bb368;
    }

    bb361: {
        StorageDead(_657);
        StorageDead(_654);
        StorageDead(_653);
        StorageDead(_651);
        StorageDead(_650);
        goto -> bb368;
    }

    bb362: {
        StorageDead(_636);
        StorageDead(_632);
        StorageDead(_631);
        goto -> bb366;
    }

    bb363: {
        StorageDead(_615);
        StorageDead(_611);
        StorageDead(_610);
        goto -> bb365;
    }

    bb364: {
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_585);
        goto -> bb365;
    }

    bb365: {
        StorageDead(_583);
        StorageDead(_582);
        goto -> bb366;
    }

    bb366: {
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_575);
        StorageDead(_574);
        goto -> bb368;
    }

    bb367: {
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_552);
        StorageDead(_551);
        goto -> bb368;
    }

    bb368: {
        StorageDead(_546);
        StorageDead(_542);
        goto -> bb374;
    }

    bb369: {
        StorageDead(_514);
        StorageDead(_510);
        StorageDead(_509);
        goto -> bb374;
    }

    bb370: {
        StorageDead(_495);
        StorageDead(_490);
        StorageDead(_489);
        goto -> bb374;
    }

    bb371: {
        StorageDead(_475);
        StorageDead(_470);
        StorageDead(_469);
        goto -> bb374;
    }

    bb372: {
        StorageDead(_456);
        StorageDead(_448);
        StorageDead(_445);
        goto -> bb373;
    }

    bb373: {
        StorageDead(_436);
        StorageDead(_433);
        StorageDead(_432);
        goto -> bb374;
    }

    bb374: {
        StorageDead(_426);
        goto -> bb377;
    }

    bb375: {
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_361);
        goto -> bb376;
    }

    bb376: {
        StorageDead(_352);
        StorageDead(_349);
        StorageDead(_348);
        goto -> bb377;
    }

    bb377: {
        StorageDead(_342);
        goto -> bb378;
    }

    bb378: {
        StorageDead(_280);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_249);
        goto -> bb380;
    }

    bb379: {
        StorageDead(_266);
        StorageDead(_254);
        StorageDead(_253);
        goto -> bb380;
    }

    bb380: {
        StorageDead(_236);
        goto -> bb381;
    }

    bb381: {
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb382;
    }

    bb382: {
        StorageDead(_139);
        goto -> bb383;
    }

    bb383: {
        StorageDead(_117);
        StorageDead(_116);
        goto -> bb384;
    }

    bb384: {
        StorageDead(_112);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb385;
    }

    bb385: {
        StorageDead(_94);
        StorageDead(_90);
        goto -> bb387;
    }

    bb386: {
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_68);
        goto -> bb387;
    }

    bb387: {
        StorageDead(_67);
        goto -> bb389;
    }

    bb388: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_48);
        goto -> bb389;
    }

    bb389: {
        StorageDead(_47);
        goto -> bb390;
    }

    bb390: {
        StorageDead(_29);
        goto -> bb391;
    }

    bb391: {
        StorageDead(_15);
        goto -> bb392;
    }

    bb392: {
        return;
    }

    bb393 (cleanup): {
        drop(_403) -> [return: bb395, unwind terminate(cleanup)];
    }

    bb394 (cleanup): {
        drop(_319) -> [return: bb395, unwind terminate(cleanup)];
    }

    bb395 (cleanup): {
        resume;
    }
}
