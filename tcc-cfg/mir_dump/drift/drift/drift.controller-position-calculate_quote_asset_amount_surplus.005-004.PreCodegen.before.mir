// MIR for `controller::position::calculate_quote_asset_amount_surplus` before PreCodegen

fn controller::position::calculate_quote_asset_amount_surplus(_1: controller::position::PositionDirection, _2: u64, _3: u64, _4: u64) -> std::result::Result<(u64, i64), error::ErrorCode> {
    debug position_direction => _1;
    debug quote_asset_swapped => _2;
    debug base_asset_amount => _3;
    debug fill_price => _4;
    let mut _0: std::result::Result<(u64, i64), error::ErrorCode>;
    let _5: u64;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _7: std::result::Result<u64, error::ErrorCode>;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: controller::position::PositionDirection;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: u64;
    let mut _17: isize;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _19: std::result::Result<i64, error::ErrorCode>;
    let mut _20: i64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _22: std::result::Result<i64, error::ErrorCode>;
    let mut _23: u64;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: i64;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _31: std::result::Result<i64, error::ErrorCode>;
    let mut _32: u64;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _44: std::result::Result<i64, error::ErrorCode>;
    let mut _45: i64;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _47: std::result::Result<i64, error::ErrorCode>;
    let mut _48: u64;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: i64;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _56: std::result::Result<i64, error::ErrorCode>;
    let mut _57: u64;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: (u64, i64);
    let mut _69: u64;
    let mut _70: i64;
    scope 1 {
        debug quote_asset_amount => _5;
        let _16: i64;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: i64;
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: i64;
        let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _42: i64;
        let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _53: i64;
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: i64;
        let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _67: i64;
        scope 6 {
            debug quote_asset_amount_surplus => _16;
        }
        scope 7 {
            debug residual => _25;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _28;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _34;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _37;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _39;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _42;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _50;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _53;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _59;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _62;
            scope 26 {
            }
        }
        scope 27 {
            debug residual => _64;
            scope 28 {
            }
        }
        scope 29 {
            debug val => _67;
            scope 30 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        StorageLive(_9);
        _9 = _4;
        StorageLive(_10);
        _10 = _1;
        _7 = calculate_quote_asset_amount_for_maker_order(move _8, move _9, const _, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: u64);
        _5 = _15;
        StorageDead(_15);
        StorageDead(_6);
        StorageLive(_16);
        _17 = discriminant(_1);
        switchInt(move _17) -> [0: bb8, 1: bb7, otherwise: bb4];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        goto -> bb45;
    }

    bb7: {
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _2;
        _47 = <u64 as Cast>::cast::<i64>(move _48) -> [return: bb24, unwind continue];
    }

    bb8: {
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _5;
        _22 = <u64 as Cast>::cast::<i64>(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        _21 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        _24 = discriminant(_21);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb4];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_21 as Continue).0: i64);
        _20 = _28;
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _2;
        _31 = <u64 as Cast>::cast::<i64>(move _32) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_25);
        _25 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb43;
    }

    bb14: {
        StorageDead(_32);
        _30 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_31);
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_37);
        _37 = ((_30 as Continue).0: i64);
        _29 = _37;
        StorageDead(_37);
        _19 = <i64 as SafeMath>::safe_sub(move _20, move _29) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_34);
        _34 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_29);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb42;
    }

    bb19: {
        StorageDead(_29);
        StorageDead(_20);
        _18 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _19) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_19);
        _38 = discriminant(_18);
        switchInt(move _38) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_18 as Continue).0: i64);
        _16 = _42;
        StorageDead(_42);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb39;
    }

    bb22: {
        StorageLive(_39);
        _39 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb42;
    }

    bb24: {
        StorageDead(_48);
        _46 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _47) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_47);
        _49 = discriminant(_46);
        switchInt(move _49) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_46 as Continue).0: i64);
        _45 = _53;
        StorageDead(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = _5;
        _56 = <u64 as Cast>::cast::<i64>(move _57) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_50);
        _50 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb41;
    }

    bb29: {
        StorageDead(_57);
        _55 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _56) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_56);
        _58 = discriminant(_55);
        switchInt(move _58) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_62);
        _62 = ((_55 as Continue).0: i64);
        _54 = _62;
        StorageDead(_62);
        _44 = <i64 as SafeMath>::safe_sub(move _45, move _54) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_59);
        _59 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb40;
    }

    bb34: {
        StorageDead(_54);
        StorageDead(_45);
        _43 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_44);
        _63 = discriminant(_43);
        switchInt(move _63) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_67);
        _67 = ((_43 as Continue).0: i64);
        _16 = _67;
        StorageDead(_67);
        StorageDead(_55);
        StorageDead(_46);
        StorageDead(_43);
        goto -> bb39;
    }

    bb37: {
        StorageLive(_64);
        _64 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_66);
        StorageDead(_64);
        goto -> bb40;
    }

    bb39: {
        StorageLive(_68);
        StorageLive(_69);
        _69 = _5;
        StorageLive(_70);
        _70 = _16;
        _68 = (move _69, move _70);
        StorageDead(_70);
        StorageDead(_69);
        _0 = std::result::Result::<(u64, i64), error::ErrorCode>::Ok(move _68);
        StorageDead(_68);
        StorageDead(_16);
        StorageDead(_5);
        goto -> bb46;
    }

    bb40: {
        StorageDead(_55);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_46);
        StorageDead(_43);
        goto -> bb44;
    }

    bb42: {
        StorageDead(_30);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_16);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_5);
        goto -> bb46;
    }

    bb46: {
        return;
    }
}
