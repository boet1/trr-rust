digraph Mir_0_508 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn controller::orders::cancel_orders(_1: &amp;ReErased mut state::user::User, _2: &amp;ReErased anchor_lang::prelude::Pubkey, _3: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;, _4: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;, _5: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;, _6: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;, _7: i64, _8: u64, _9: state::events::OrderActionExplanation, _10: std::option::Option&lt;state::user::MarketType&gt;, _11: std::option::Option&lt;u16&gt;, _12: std::option::Option&lt;controller::position::PositionDirection&gt;) -&gt; std::result::Result&lt;std::vec::Vec&lt;u32, std::alloc::Global&gt;, error::ErrorCode&gt;<br align="left"/>let mut _13: std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let _14: ();<br align="left"/>let mut _15: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _16: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: &amp;ReErased [state::user::Order];<br align="left"/>let mut _19: &amp;ReErased [state::user::Order; 32_usize];<br align="left"/>let mut _20: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _21: ();<br align="left"/>let _22: ();<br align="left"/>let mut _23: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _24: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _25: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: !;<br align="left"/>let _28: usize;<br align="left"/>let _29: ();<br align="left"/>let mut _30: bool;<br align="left"/>let mut _31: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _32: usize;<br align="left"/>let mut _33: usize;<br align="left"/>let mut _34: bool;<br align="left"/>let mut _35: &amp;ReErased state::user::OrderStatus;<br align="left"/>let _36: state::user::OrderStatus;<br align="left"/>let mut _37: !;<br align="left"/>let _38: ();<br align="left"/>let mut _39: (std::option::Option&lt;state::user::MarketType&gt;, std::option::Option&lt;u16&gt;);<br align="left"/>let mut _40: std::option::Option&lt;state::user::MarketType&gt;;<br align="left"/>let mut _41: std::option::Option&lt;u16&gt;;<br align="left"/>let mut _42: isize;<br align="left"/>let mut _43: isize;<br align="left"/>let _44: state::user::MarketType;<br align="left"/>let _45: u16;<br align="left"/>let _46: ();<br align="left"/>let mut _47: bool;<br align="left"/>let mut _48: &amp;ReErased state::user::MarketType;<br align="left"/>let _49: usize;<br align="left"/>let mut _50: usize;<br align="left"/>let mut _51: bool;<br align="left"/>let mut _52: &amp;ReErased state::user::MarketType;<br align="left"/>let mut _53: !;<br align="left"/>let mut _54: bool;<br align="left"/>let mut _55: u16;<br align="left"/>let _56: usize;<br align="left"/>let mut _57: usize;<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: u16;<br align="left"/>let mut _60: !;<br align="left"/>let _61: ();<br align="left"/>let mut _62: isize;<br align="left"/>let _63: controller::position::PositionDirection;<br align="left"/>let mut _64: bool;<br align="left"/>let mut _65: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let _66: usize;<br align="left"/>let mut _67: usize;<br align="left"/>let mut _68: bool;<br align="left"/>let mut _69: &amp;ReErased controller::position::PositionDirection;<br align="left"/>let mut _70: !;<br align="left"/>let _71: ();<br align="left"/>let mut _72: &amp;ReErased mut std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let mut _73: u32;<br align="left"/>let _74: usize;<br align="left"/>let mut _75: usize;<br align="left"/>let mut _76: bool;<br align="left"/>let _77: ();<br align="left"/>let mut _78: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _79: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _80: usize;<br align="left"/>let mut _81: &amp;ReErased mut state::user::User;<br align="left"/>let mut _82: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let mut _83: &amp;ReErased state::perp_market_map::PerpMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _84: &amp;ReErased state::spot_market_map::SpotMarketMap&lt;ReErased&gt;;<br align="left"/>let mut _85: &amp;ReErased mut state::oracle_map::OracleMap&lt;ReErased&gt;;<br align="left"/>let mut _86: i64;<br align="left"/>let mut _87: u64;<br align="left"/>let mut _88: state::events::OrderActionExplanation;<br align="left"/>let mut _89: std::option::Option&lt;&amp;ReErased anchor_lang::prelude::Pubkey&gt;;<br align="left"/>let mut _90: isize;<br align="left"/>let _91: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _92: !;<br align="left"/>let mut _93: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _94: ();<br align="left"/>let _95: ();<br align="left"/>let mut _96: &amp;ReErased mut state::user::User;<br align="left"/>let mut _97: u64;<br align="left"/>let mut _98: std::vec::Vec&lt;u32, std::alloc::Global&gt;;<br align="left"/>let mut _99: &amp;ReErased state::user::OrderStatus;<br align="left"/>debug user =&gt; _1;<br align="left"/>debug user_key =&gt; _2;<br align="left"/>debug filler_key =&gt; _3;<br align="left"/>debug perp_market_map =&gt; _4;<br align="left"/>debug spot_market_map =&gt; _5;<br align="left"/>debug oracle_map =&gt; _6;<br align="left"/>debug now =&gt; _7;<br align="left"/>debug slot =&gt; _8;<br align="left"/>debug explanation =&gt; _9;<br align="left"/>debug market_type =&gt; _10;<br align="left"/>debug market_index =&gt; _11;<br align="left"/>debug direction =&gt; _12;<br align="left"/>debug canceled_order_ids =&gt; _13;<br align="left"/>debug iter =&gt; _20;<br align="left"/>debug order_index =&gt; _28;<br align="left"/>debug market_type =&gt; _44;<br align="left"/>debug market_index =&gt; _45;<br align="left"/>debug direction =&gt; _63;<br align="left"/>debug residual =&gt; _91;<br align="left"/>debug val =&gt; _94;<br align="left"/>>;
    bb0__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/></td></tr><tr><td align="left">_13 = Vec::&lt;u32&gt;::new()</td></tr></table>>];
    bb1__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;((*_1).5: [state::user::Order; 32])<br/>_18 = move _19 as &amp;[state::user::Order] (PointerCoercion(Unsize))<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_17 = core::slice::&lt;impl [Order]&gt;::len(move _18)</td></tr></table>>];
    bb2__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>_16 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: move _17 }<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _16)</td></tr></table>>];
    bb3__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageLive(_20)<br/>_20 = move _15<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>_25 = &amp;mut _20<br/>_24 = &amp;mut (*_25)<br/></td></tr><tr><td align="left">_23 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _24)</td></tr></table>>];
    bb5__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_26 = discriminant(_23)<br/></td></tr><tr><td align="left">switchInt(move _26)</td></tr></table>>];
    bb6__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_23 as Some).0: usize)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = _28<br/>_33 = Len(((*_1).5: [state::user::Order; 32]))<br/>_34 = Lt(_32, _33)<br/></td></tr><tr><td align="left">assert(move _34, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _33, _32)</td></tr></table>>];
    bb7__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_14 = const ()<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageLive(_95)<br/>StorageLive(_96)<br/>_96 = &amp;mut (*_1)<br/>StorageLive(_97)<br/>_97 = _8<br/></td></tr><tr><td align="left">_95 = User::update_last_active_slot(move _96, move _97)</td></tr></table>>];
    bb9__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_31 = &amp;(((*_1).5: [state::user::Order; 32])[_32].12: state::user::OrderStatus)<br/>StorageLive(_35)<br/>_99 = const _<br/>_35 = &amp;(*_99)<br/></td></tr><tr><td align="left">_30 = &lt;OrderStatus as PartialEq&gt;::ne(move _31, move _35)</td></tr></table>>];
    bb10__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb11__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>_29 = const ()<br/>StorageDead(_30)<br/>StorageDead(_29)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = _10<br/>StorageLive(_41)<br/>_41 = _11<br/>_39 = (move _40, move _41)<br/>StorageDead(_41)<br/>StorageDead(_40)<br/>_43 = discriminant((_39.0: std::option::Option&lt;state::user::MarketType&gt;))<br/></td></tr><tr><td align="left">switchInt(move _43)</td></tr></table>>];
    bb13__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">_38 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_42 = discriminant((_39.1: std::option::Option&lt;u16&gt;))<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb15__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = (((_39.0: std::option::Option&lt;state::user::MarketType&gt;) as Some).0: state::user::MarketType)<br/>StorageLive(_45)<br/>_45 = (((_39.1: std::option::Option&lt;u16&gt;) as Some).0: u16)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _28<br/>_50 = Len(((*_1).5: [state::user::Order; 32]))<br/>_51 = Lt(_49, _50)<br/></td></tr><tr><td align="left">assert(move _51, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _50, _49)</td></tr></table>>];
    bb16__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_48 = &amp;(((*_1).5: [state::user::Order; 32])[_49].14: state::user::MarketType)<br/>StorageLive(_52)<br/>_52 = &amp;_44<br/></td></tr><tr><td align="left">_47 = &lt;state::user::MarketType as PartialEq&gt;::ne(move _48, move _52)</td></tr></table>>];
    bb17__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">switchInt(move _47)</td></tr></table>>];
    bb18__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_49)<br/>StorageDead(_48)<br/>_46 = const ()<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = _28<br/>_57 = Len(((*_1).5: [state::user::Order; 32]))<br/>_58 = Lt(_56, _57)<br/></td></tr><tr><td align="left">assert(move _58, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _57, _56)</td></tr></table>>];
    bb20__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_55 = (((*_1).5: [state::user::Order; 32])[_56].11: u16)<br/>StorageLive(_59)<br/>_59 = _45<br/>_54 = Ne(move _55, move _59)<br/></td></tr><tr><td align="left">switchInt(move _54)</td></tr></table>>];
    bb21__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>_38 = const ()<br/>StorageDead(_54)<br/>StorageDead(_45)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_38)<br/>StorageLive(_61)<br/>_62 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb24__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_12 as Some).0: controller::position::PositionDirection)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = _28<br/>_67 = Len(((*_1).5: [state::user::Order; 32]))<br/>_68 = Lt(_66, _67)<br/></td></tr><tr><td align="left">assert(move _68, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _67, _66)</td></tr></table>>];
    bb25__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_65 = &amp;(((*_1).5: [state::user::Order; 32])[_66].17: controller::position::PositionDirection)<br/>StorageLive(_69)<br/>_69 = &amp;_63<br/></td></tr><tr><td align="left">_64 = &lt;controller::position::PositionDirection as PartialEq&gt;::ne(move _65, move _69)</td></tr></table>>];
    bb26__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">switchInt(move _64)</td></tr></table>>];
    bb27__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>StorageDead(_64)<br/>StorageDead(_63)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/>_61 = const ()<br/>StorageDead(_64)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">_61 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>_72 = &amp;mut _13<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = _28<br/>_75 = Len(((*_1).5: [state::user::Order; 32]))<br/>_76 = Lt(_74, _75)<br/></td></tr><tr><td align="left">assert(move _76, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _75, _74)</td></tr></table>>];
    bb31__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_73 = (((*_1).5: [state::user::Order; 32])[_74].10: u32)<br/></td></tr><tr><td align="left">_71 = Vec::&lt;u32&gt;::push(move _72, move _73)</td></tr></table>>];
    bb32__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>StorageDead(_72)<br/>StorageDead(_74)<br/>StorageDead(_71)<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>_80 = _28<br/>StorageLive(_81)<br/>_81 = &amp;mut (*_1)<br/>StorageLive(_82)<br/>_82 = &amp;(*_2)<br/>StorageLive(_83)<br/>_83 = &amp;(*_4)<br/>StorageLive(_84)<br/>_84 = &amp;(*_5)<br/>StorageLive(_85)<br/>_85 = &amp;mut (*_6)<br/>StorageLive(_86)<br/>_86 = _7<br/>StorageLive(_87)<br/>_87 = _8<br/>StorageLive(_88)<br/>_88 = _9<br/>StorageLive(_89)<br/>_89 = _3<br/></td></tr><tr><td align="left">_79 = controller::orders::cancel_order(move _80, move _81, move _82, move _83, move _84, move _85, move _86, move _87, move _88, move _89, const 0_u64, const false)</td></tr></table>>];
    bb33__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/>StorageDead(_83)<br/>StorageDead(_82)<br/>StorageDead(_81)<br/>StorageDead(_80)<br/></td></tr><tr><td align="left">_78 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _79)</td></tr></table>>];
    bb34__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>_90 = discriminant(_78)<br/></td></tr><tr><td align="left">switchInt(move _90)</td></tr></table>>];
    bb35__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageLive(_94)<br/>_94 = ((_78 as Continue).0: ())<br/>_77 = _94<br/>StorageDead(_94)<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>_22 = const ()<br/>StorageDead(_28)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>_21 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_91)<br/>_91 = ((_78 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_93)<br/>_93 = _91<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;Vec&lt;u32&gt;, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _93)</td></tr></table>>];
    bb37__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_91)<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_28)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">drop(_13)</td></tr></table>>];
    bb38__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>StorageDead(_96)<br/>StorageDead(_95)<br/>StorageLive(_98)<br/>_98 = move _13<br/>_0 = std::result::Result::&lt;Vec&lt;u32&gt;, error::ErrorCode&gt;::Ok(move _98)<br/>StorageDead(_98)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left">return</td></tr></table>>];
    bb43__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">43 (cleanup)</td></tr><tr><td align="left">drop(_13)</td></tr></table>>];
    bb44__0_508 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">44 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_508 -> bb1__0_508 [label="return"];
    bb1__0_508 -> bb2__0_508 [label="return"];
    bb1__0_508 -> bb43__0_508 [label="unwind"];
    bb2__0_508 -> bb3__0_508 [label="return"];
    bb2__0_508 -> bb43__0_508 [label="unwind"];
    bb3__0_508 -> bb4__0_508 [label=""];
    bb4__0_508 -> bb5__0_508 [label="return"];
    bb4__0_508 -> bb43__0_508 [label="unwind"];
    bb5__0_508 -> bb8__0_508 [label="0"];
    bb5__0_508 -> bb6__0_508 [label="1"];
    bb5__0_508 -> bb7__0_508 [label="otherwise"];
    bb6__0_508 -> bb9__0_508 [label="success"];
    bb6__0_508 -> bb43__0_508 [label="unwind"];
    bb8__0_508 -> bb40__0_508 [label="return"];
    bb8__0_508 -> bb43__0_508 [label="unwind"];
    bb9__0_508 -> bb10__0_508 [label="return"];
    bb9__0_508 -> bb43__0_508 [label="unwind"];
    bb10__0_508 -> bb12__0_508 [label="0"];
    bb10__0_508 -> bb11__0_508 [label="otherwise"];
    bb11__0_508 -> bb39__0_508 [label=""];
    bb12__0_508 -> bb14__0_508 [label="1"];
    bb12__0_508 -> bb13__0_508 [label="otherwise"];
    bb13__0_508 -> bb23__0_508 [label=""];
    bb14__0_508 -> bb15__0_508 [label="1"];
    bb14__0_508 -> bb13__0_508 [label="otherwise"];
    bb15__0_508 -> bb16__0_508 [label="success"];
    bb15__0_508 -> bb43__0_508 [label="unwind"];
    bb16__0_508 -> bb17__0_508 [label="return"];
    bb16__0_508 -> bb43__0_508 [label="unwind"];
    bb17__0_508 -> bb19__0_508 [label="0"];
    bb17__0_508 -> bb18__0_508 [label="otherwise"];
    bb18__0_508 -> bb38__0_508 [label=""];
    bb19__0_508 -> bb20__0_508 [label="success"];
    bb19__0_508 -> bb43__0_508 [label="unwind"];
    bb20__0_508 -> bb22__0_508 [label="0"];
    bb20__0_508 -> bb21__0_508 [label="otherwise"];
    bb21__0_508 -> bb38__0_508 [label=""];
    bb22__0_508 -> bb23__0_508 [label=""];
    bb23__0_508 -> bb24__0_508 [label="1"];
    bb23__0_508 -> bb29__0_508 [label="otherwise"];
    bb24__0_508 -> bb25__0_508 [label="success"];
    bb24__0_508 -> bb43__0_508 [label="unwind"];
    bb25__0_508 -> bb26__0_508 [label="return"];
    bb25__0_508 -> bb43__0_508 [label="unwind"];
    bb26__0_508 -> bb28__0_508 [label="0"];
    bb26__0_508 -> bb27__0_508 [label="otherwise"];
    bb27__0_508 -> bb39__0_508 [label=""];
    bb28__0_508 -> bb30__0_508 [label=""];
    bb29__0_508 -> bb30__0_508 [label=""];
    bb30__0_508 -> bb31__0_508 [label="success"];
    bb30__0_508 -> bb43__0_508 [label="unwind"];
    bb31__0_508 -> bb32__0_508 [label="return"];
    bb31__0_508 -> bb43__0_508 [label="unwind"];
    bb32__0_508 -> bb33__0_508 [label="return"];
    bb32__0_508 -> bb43__0_508 [label="unwind"];
    bb33__0_508 -> bb34__0_508 [label="return"];
    bb33__0_508 -> bb43__0_508 [label="unwind"];
    bb34__0_508 -> bb35__0_508 [label="0"];
    bb34__0_508 -> bb36__0_508 [label="1"];
    bb34__0_508 -> bb7__0_508 [label="otherwise"];
    bb35__0_508 -> bb4__0_508 [label=""];
    bb36__0_508 -> bb37__0_508 [label="return"];
    bb36__0_508 -> bb43__0_508 [label="unwind"];
    bb37__0_508 -> bb41__0_508 [label="return"];
    bb37__0_508 -> bb44__0_508 [label="unwind"];
    bb38__0_508 -> bb39__0_508 [label=""];
    bb39__0_508 -> bb4__0_508 [label=""];
    bb40__0_508 -> bb42__0_508 [label=""];
    bb41__0_508 -> bb42__0_508 [label=""];
    bb43__0_508 -> bb44__0_508 [label="return"];
}
