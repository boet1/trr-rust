// MIR for `instructions::user::handle_update_user_pool_id` before PreCodegen

fn instructions::user::handle_update_user_pool_id(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::UpdateUser<'_>>, _2: u16, _3: u8) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug _sub_account_id => _2;
    debug pool_id => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _5: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _6: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _7: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: instructions::optional_accounts::AccountMaps<'_>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _13: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _14: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _15: &std::collections::BTreeSet<u16>;
    let _16: &std::collections::BTreeSet<u16>;
    let _17: std::collections::BTreeSet<u16>;
    let mut _18: &std::collections::BTreeSet<u16>;
    let _19: &std::collections::BTreeSet<u16>;
    let _20: std::collections::BTreeSet<u16>;
    let mut _21: u64;
    let mut _22: anchor_lang::prelude::Clock;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _24: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _30: std::option::Option<state::state::OracleGuardRails>;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _39: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _41: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: u8;
    let mut _48: &mut state::user::User;
    let mut _49: &mut std::cell::RefMut<'_, state::user::User>;
    let _50: bool;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _52: std::result::Result<bool, error::ErrorCode>;
    let mut _53: &state::user::User;
    let _54: &state::user::User;
    let mut _55: &std::cell::RefMut<'_, state::user::User>;
    let _56: &std::cell::RefMut<'_, state::user::User>;
    let mut _57: &state::perp_market_map::PerpMarketMap<'_>;
    let _58: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _59: &state::spot_market_map::SpotMarketMap<'_>;
    let _60: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _61: &mut state::oracle_map::OracleMap<'_>;
    let mut _62: &mut state::oracle_map::OracleMap<'_>;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: ();
    let mut _69: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _70: &mut instructions::user::UpdateUser<'_>;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    scope 1 {
        debug remaining_accounts_iter => _4;
        let _8: state::perp_market_map::PerpMarketMap<'_>;
        let _9: state::spot_market_map::SpotMarketMap<'_>;
        let mut _10: state::oracle_map::OracleMap<'_>;
        let _26: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _29: anchor_lang::prelude::Clock;
        let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _35: instructions::optional_accounts::AccountMaps<'_>;
        scope 2 {
            debug perp_market_map => _8;
            debug spot_market_map => _9;
            debug oracle_map => _10;
            let mut _36: std::cell::RefMut<'_, state::user::User>;
            let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _46: std::cell::RefMut<'_, state::user::User>;
            scope 11 {
                debug user => _36;
                let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _67: bool;
                scope 16 {
                    debug residual => _64;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _67;
                    scope 19 {
                    }
                }
            }
            scope 12 {
                debug residual => _43;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _46;
                scope 15 {
                }
            }
        }
        scope 3 {
            debug residual => _26;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _29;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _32;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _35;
            scope 10 {
            }
        }
    }

    bb0: {
        _72 = const false;
        _71 = const false;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _69 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _7 = &(*_69);
        _6 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _4 = &mut _5;
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut (*_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = BTreeSet::<u16>::new() -> [return: bb3, unwind continue];
    }

    bb3: {
        _16 = &_17;
        _15 = &(*_16);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = BTreeSet::<u16>::new() -> [return: bb4, unwind: bb50];
    }

    bb4: {
        _19 = &_20;
        _18 = &(*_19);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb5, unwind: bb49];
    }

    bb5: {
        _23 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _24) -> [return: bb6, unwind: bb49];
    }

    bb6: {
        _71 = const true;
        _72 = const true;
        StorageDead(_24);
        _25 = discriminant(_23);
        switchInt(move _25) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_29);
        _29 = move ((_23 as Continue).0: anchor_lang::prelude::Clock);
        _22 = move _29;
        StorageDead(_29);
        _21 = (_22.0: u64);
        StorageLive(_30);
        _30 = Option::<state::state::OracleGuardRails>::None;
        _13 = load_maps(move _14, move _15, move _18, move _21, move _30) -> [return: bb11, unwind: bb54];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_26);
        _26 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_28);
        _28 = move _26;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _28) -> [return: bb10, unwind: bb54];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb39;
    }

    bb11: {
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _13) -> [return: bb12, unwind: bb54];
    }

    bb12: {
        StorageDead(_13);
        _31 = discriminant(_12);
        switchInt(move _31) -> [0: bb13, 1: bb14, otherwise: bb8];
    }

    bb13: {
        StorageLive(_35);
        _35 = move ((_12 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _11 = move _35;
        StorageDead(_35);
        StorageLive(_8);
        _8 = move (_11.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_9);
        _9 = move (_11.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_10);
        _10 = move (_11.2: state::oracle_map::OracleMap<'_>);
        _75 = discriminant(_12);
        _77 = discriminant(_23);
        _71 = const false;
        _72 = const false;
        StorageDead(_23);
        StorageDead(_22);
        drop(_20) -> [return: bb16, unwind: bb45];
    }

    bb14: {
        StorageLive(_32);
        _32 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb15, unwind: bb53];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_32);
        _73 = discriminant(_12);
        goto -> bb39;
    }

    bb16: {
        StorageDead(_20);
        StorageDead(_19);
        drop(_17) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _70 = deref_copy (_1.1: &mut instructions::user::UpdateUser<'_>);
        _40 = &((*_70).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _39 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _40) -> [return: bb18, unwind: bb46];
    }

    bb18: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _38 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _39, move _41) -> [return: bb19, unwind: bb46];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _38) -> [return: bb20, unwind: bb46];
    }

    bb20: {
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb21, 1: bb22, otherwise: bb8];
    }

    bb21: {
        StorageLive(_46);
        _46 = move ((_37 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _36 = move _46;
        StorageDead(_46);
        _81 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_47);
        _47 = _3;
        StorageLive(_48);
        StorageLive(_49);
        _49 = &mut _36;
        _48 = <RefMut<'_, User> as DerefMut>::deref_mut(move _49) -> [return: bb24, unwind: bb44];
    }

    bb22: {
        StorageLive(_43);
        _43 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb23, unwind: bb52];
    }

    bb23: {
        StorageDead(_45);
        StorageDead(_43);
        _79 = discriminant(_37);
        StorageDead(_37);
        goto -> bb35;
    }

    bb24: {
        StorageDead(_49);
        ((*_48).27: u8) = move _47;
        StorageDead(_47);
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_36;
        _55 = &(*_56);
        _54 = <RefMut<'_, User> as Deref>::deref(move _55) -> [return: bb25, unwind: bb44];
    }

    bb25: {
        _53 = &(*_54);
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        _58 = &_8;
        _57 = &(*_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &_9;
        _59 = &(*_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &mut _10;
        _61 = &mut (*_62);
        _52 = math::margin::meets_initial_margin_requirement(move _53, move _57, move _59, move _61) -> [return: bb26, unwind: bb44];
    }

    bb26: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_53);
        _51 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _52) -> [return: bb27, unwind: bb44];
    }

    bb27: {
        StorageDead(_52);
        _63 = discriminant(_51);
        switchInt(move _63) -> [0: bb28, 1: bb29, otherwise: bb8];
    }

    bb28: {
        StorageLive(_67);
        _67 = ((_51 as Continue).0: bool);
        _50 = _67;
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_68);
        _68 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _68);
        StorageDead(_68);
        drop(_36) -> [return: bb31, unwind: bb46];
    }

    bb29: {
        StorageLive(_64);
        _64 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb30, unwind: bb44];
    }

    bb30: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        drop(_36) -> [return: bb35, unwind: bb46];
    }

    bb31: {
        StorageDead(_36);
        drop(_10) -> [return: bb32, unwind: bb47];
    }

    bb32: {
        StorageDead(_10);
        drop(_9) -> [return: bb33, unwind: bb48];
    }

    bb33: {
        StorageDead(_9);
        drop(_8) -> [return: bb34, unwind: bb51];
    }

    bb34: {
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb43;
    }

    bb35: {
        StorageDead(_36);
        drop(_10) -> [return: bb36, unwind: bb47];
    }

    bb36: {
        StorageDead(_10);
        drop(_9) -> [return: bb37, unwind: bb48];
    }

    bb37: {
        StorageDead(_9);
        drop(_8) -> [return: bb38, unwind: bb51];
    }

    bb38: {
        StorageDead(_8);
        goto -> bb42;
    }

    bb39: {
        _83 = discriminant(_23);
        _71 = const false;
        _72 = const false;
        StorageDead(_23);
        StorageDead(_22);
        drop(_20) -> [return: bb40, unwind: bb50];
    }

    bb40: {
        StorageDead(_20);
        StorageDead(_19);
        drop(_17) -> [return: bb41, unwind: bb51];
    }

    bb41: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb43;
    }

    bb43: {
        return;
    }

    bb44 (cleanup): {
        drop(_36) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_17) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_10) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        drop(_9) -> [return: bb48, unwind terminate(cleanup)];
    }

    bb48 (cleanup): {
        drop(_8) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb49 (cleanup): {
        drop(_20) -> [return: bb50, unwind terminate(cleanup)];
    }

    bb50 (cleanup): {
        drop(_17) -> [return: bb51, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52 (cleanup): {
        _85 = discriminant(_37);
        goto -> bb46;
    }

    bb53 (cleanup): {
        _88 = discriminant(_12);
        goto -> bb54;
    }

    bb54 (cleanup): {
        _89 = discriminant(_23);
        goto -> bb49;
    }
}
