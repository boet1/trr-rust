// MIR for `admin::<impl at programs/drift/src/instructions/admin.rs:4938:10: 4938:18>::try_accounts` after PreCodegen

fn admin::<impl at programs/drift/src/instructions/admin.rs:4938:10: 4938:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeSpotMarketBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>;
    let _6: ();
    let mut _7: bool;
    let mut _8: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _9: !;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::ErrorCode;
    let _12: &anchor_lang::prelude::AccountInfo<'_>;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: &[anchor_lang::prelude::AccountInfo<'_>];
    let _17: &[anchor_lang::prelude::AccountInfo<'_>];
    let _18: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _19: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _20: std::ops::RangeFrom<usize>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _36: ();
    let mut _37: bool;
    let mut _38: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _39: !;
    let mut _40: anchor_lang::error::Error;
    let mut _41: anchor_lang::error::ErrorCode;
    let _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _46: &[anchor_lang::prelude::AccountInfo<'_>];
    let _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _50: std::ops::RangeFrom<usize>;
    let _51: ();
    let mut _52: bool;
    let mut _53: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _54: !;
    let mut _55: anchor_lang::error::Error;
    let mut _56: anchor_lang::error::ErrorCode;
    let _58: usize;
    let mut _59: usize;
    let mut _60: bool;
    let mut _61: &[anchor_lang::prelude::AccountInfo<'_>];
    let _62: &[anchor_lang::prelude::AccountInfo<'_>];
    let _63: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _64: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _65: std::ops::RangeFrom<usize>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _98: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _113: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _128: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _143: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _158: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut instructions::admin::InitializeSpotMarketBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _173: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _174: isize;
    let mut _176: !;
    let mut _177: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _181: (anchor_lang::prelude::Pubkey, u8);
    let mut _182: &[&[u8]];
    let mut _183: &[&[u8]; 2];
    let _184: &[&[u8]; 2];
    let _185: [&[u8]; 2];
    let mut _186: &[u8];
    let mut _187: &[u8; 11];
    let _188: &[u8; 11];
    let mut _189: &[u8];
    let _190: &[u8];
    let mut _191: &[u8; 2];
    let _192: [u8; 2];
    let mut _193: u16;
    let mut _194: &state::state::State;
    let mut _195: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _196: &anchor_lang::prelude::Pubkey;
    let mut _197: u8;
    let _198: ();
    let mut _199: bool;
    let mut _200: &anchor_lang::prelude::Pubkey;
    let _201: anchor_lang::prelude::Pubkey;
    let mut _202: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _203: &anchor_lang::prelude::Pubkey;
    let mut _204: !;
    let mut _205: anchor_lang::error::Error;
    let mut _206: anchor_lang::error::Error;
    let mut _207: anchor_lang::error::Error;
    let mut _208: anchor_lang::error::ErrorCode;
    let mut _209: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _210: anchor_lang::prelude::Pubkey;
    let mut _211: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _212: anchor_lang::prelude::Pubkey;
    let mut _215: &&anchor_lang::prelude::AccountInfo<'_>;
    let _216: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _220: bool;
    let mut _221: bool;
    let mut _222: &&anchor_lang::prelude::Pubkey;
    let mut _223: &&anchor_lang::prelude::Pubkey;
    let _224: &anchor_lang::prelude::Pubkey;
    let _225: anchor_lang::prelude::Pubkey;
    let mut _227: &anchor_lang::prelude::AccountInfo<'_>;
    let _228: ();
    let mut _229: bool;
    let mut _230: u64;
    let mut _233: &anchor_lang::prelude::Rent;
    let mut _234: usize;
    let mut _236: anchor_lang::prelude::AccountInfo<'_>;
    let mut _237: &anchor_lang::prelude::Signer<'_>;
    let mut _238: anchor_lang::prelude::AccountInfo<'_>;
    let mut _239: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _241: anchor_lang::prelude::AccountInfo<'_>;
    let mut _242: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _243: anchor_lang::system_program::CreateAccount<'_>;
    let _244: ();
    let mut _245: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _246: std::result::Result<(), anchor_lang::error::Error>;
    let mut _247: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _248: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _249: &[&[&[u8]]];
    let mut _250: &[&[&[u8]]; 1];
    let _251: &[&[&[u8]]; 1];
    let _252: [&[&[u8]]; 1];
    let mut _253: &[&[u8]];
    let _254: &[&[u8]];
    let _255: &[&[u8]];
    let mut _256: &[&[u8]; 3];
    let _257: [&[u8]; 3];
    let mut _258: &[u8];
    let mut _259: &[u8; 11];
    let _260: &[u8; 11];
    let mut _261: &[u8];
    let mut _262: &[u8; 2];
    let _263: [u8; 2];
    let mut _264: u16;
    let mut _265: &state::state::State;
    let mut _266: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _267: &[u8];
    let _268: &[u8];
    let _269: &[u8];
    let mut _270: &[u8; 1];
    let _271: [u8; 1];
    let mut _272: u8;
    let mut _273: std::ops::RangeFull;
    let mut _274: std::ops::RangeFull;
    let mut _275: u64;
    let mut _276: u64;
    let mut _277: usize;
    let mut _278: &anchor_lang::prelude::Pubkey;
    let mut _279: isize;
    let mut _281: !;
    let mut _282: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _284: ();
    let mut _285: bool;
    let mut _286: &anchor_lang::prelude::Pubkey;
    let _287: anchor_lang::prelude::Pubkey;
    let mut _288: &anchor_lang::prelude::Signer<'_>;
    let mut _289: &anchor_lang::prelude::Pubkey;
    let _290: anchor_lang::prelude::Pubkey;
    let mut _291: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _292: !;
    let mut _293: anchor_lang::error::Error;
    let mut _294: anchor_lang::error::Error;
    let mut _295: anchor_lang::error::AnchorError;
    let mut _296: std::string::String;
    let mut _297: &anchor_lang::error::ErrorCode;
    let _298: anchor_lang::error::ErrorCode;
    let mut _299: u32;
    let mut _300: anchor_lang::error::ErrorCode;
    let mut _301: std::string::String;
    let mut _302: &anchor_lang::error::ErrorCode;
    let _303: anchor_lang::error::ErrorCode;
    let mut _304: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _305: anchor_lang::error::ErrorOrigin;
    let mut _306: anchor_lang::error::Source;
    let mut _307: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _308: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _309: anchor_lang::prelude::Pubkey;
    let mut _310: &anchor_lang::prelude::Signer<'_>;
    let mut _311: anchor_lang::prelude::Pubkey;
    let mut _312: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _314: u64;
    let mut _315: u64;
    let mut _316: &anchor_lang::prelude::Rent;
    let mut _317: usize;
    let mut _318: u64;
    let _319: ();
    let mut _320: bool;
    let mut _321: u64;
    let mut _323: anchor_lang::prelude::AccountInfo<'_>;
    let mut _324: &anchor_lang::prelude::Signer<'_>;
    let mut _325: anchor_lang::prelude::AccountInfo<'_>;
    let mut _326: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _328: anchor_lang::prelude::AccountInfo<'_>;
    let mut _329: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _330: anchor_lang::system_program::Transfer<'_>;
    let _331: ();
    let mut _332: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _333: std::result::Result<(), anchor_lang::error::Error>;
    let mut _334: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _335: u64;
    let mut _336: isize;
    let mut _338: !;
    let mut _339: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _342: anchor_lang::prelude::AccountInfo<'_>;
    let mut _343: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _345: anchor_lang::prelude::AccountInfo<'_>;
    let mut _346: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _347: anchor_lang::system_program::Allocate<'_>;
    let _348: ();
    let mut _349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _350: std::result::Result<(), anchor_lang::error::Error>;
    let mut _351: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _352: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _353: &[&[&[u8]]];
    let mut _354: &[&[&[u8]]; 1];
    let _355: &[&[&[u8]]; 1];
    let _356: [&[&[u8]]; 1];
    let mut _357: &[&[u8]];
    let _358: &[&[u8]];
    let _359: &[&[u8]];
    let mut _360: &[&[u8]; 3];
    let _361: [&[u8]; 3];
    let mut _362: &[u8];
    let mut _363: &[u8; 11];
    let _364: &[u8; 11];
    let mut _365: &[u8];
    let mut _366: &[u8; 2];
    let _367: [u8; 2];
    let mut _368: u16;
    let mut _369: &state::state::State;
    let mut _370: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _371: &[u8];
    let _372: &[u8];
    let _373: &[u8];
    let mut _374: &[u8; 1];
    let _375: [u8; 1];
    let mut _376: u8;
    let mut _377: std::ops::RangeFull;
    let mut _378: std::ops::RangeFull;
    let mut _379: u64;
    let mut _380: usize;
    let mut _381: isize;
    let mut _383: !;
    let mut _384: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _387: anchor_lang::prelude::AccountInfo<'_>;
    let mut _388: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _390: anchor_lang::prelude::AccountInfo<'_>;
    let mut _391: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _392: anchor_lang::system_program::Assign<'_>;
    let _393: ();
    let mut _394: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _395: std::result::Result<(), anchor_lang::error::Error>;
    let mut _396: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _397: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _398: &[&[&[u8]]];
    let mut _399: &[&[&[u8]]; 1];
    let _400: &[&[&[u8]]; 1];
    let _401: [&[&[u8]]; 1];
    let mut _402: &[&[u8]];
    let _403: &[&[u8]];
    let _404: &[&[u8]];
    let mut _405: &[&[u8]; 3];
    let _406: [&[u8]; 3];
    let mut _407: &[u8];
    let mut _408: &[u8; 11];
    let _409: &[u8; 11];
    let mut _410: &[u8];
    let mut _411: &[u8; 2];
    let _412: [u8; 2];
    let mut _413: u16;
    let mut _414: &state::state::State;
    let mut _415: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _416: &[u8];
    let _417: &[u8];
    let _418: &[u8];
    let mut _419: &[u8; 1];
    let _420: [u8; 1];
    let mut _421: u8;
    let mut _422: std::ops::RangeFull;
    let mut _423: std::ops::RangeFull;
    let mut _424: &anchor_lang::prelude::Pubkey;
    let mut _425: isize;
    let mut _427: !;
    let mut _428: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _430: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _431: &anchor_lang::prelude::Pubkey;
    let mut _432: &anchor_lang::prelude::AccountInfo<'_>;
    let _433: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _434: isize;
    let mut _437: !;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::Error;
    let mut _440: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _441: &anchor_lang::prelude::AccountInfo<'_>;
    let _442: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _443: isize;
    let mut _446: !;
    let mut _447: anchor_lang::error::Error;
    let mut _448: anchor_lang::error::Error;
    let _449: ();
    let mut _450: bool;
    let _451: ();
    let mut _452: bool;
    let mut _453: usize;
    let mut _454: usize;
    let mut _455: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _456: !;
    let mut _457: anchor_lang::error::Error;
    let mut _458: anchor_lang::error::Error;
    let mut _459: anchor_lang::error::Error;
    let mut _460: anchor_lang::error::ErrorCode;
    let mut _461: (usize, usize);
    let mut _462: usize;
    let mut _463: usize;
    let mut _464: &anchor_lang::prelude::AccountInfo<'_>;
    let _465: ();
    let mut _466: bool;
    let mut _467: &&anchor_lang::prelude::Pubkey;
    let mut _468: &&anchor_lang::prelude::Pubkey;
    let mut _469: !;
    let mut _470: anchor_lang::error::Error;
    let mut _471: anchor_lang::error::Error;
    let mut _472: anchor_lang::error::Error;
    let mut _473: anchor_lang::error::ErrorCode;
    let mut _474: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _475: anchor_lang::prelude::Pubkey;
    let mut _476: anchor_lang::prelude::Pubkey;
    let mut _478: &anchor_lang::prelude::Rent;
    let mut _479: usize;
    let mut _480: bool;
    let mut _481: u64;
    let mut _482: &anchor_lang::prelude::AccountInfo<'_>;
    let _483: anchor_lang::prelude::AccountInfo<'_>;
    let mut _484: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _485: u64;
    let mut _486: !;
    let mut _487: anchor_lang::error::Error;
    let mut _488: anchor_lang::error::Error;
    let mut _489: anchor_lang::error::ErrorCode;
    let _490: ();
    let mut _491: bool;
    let mut _492: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _493: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let _494: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _495: !;
    let mut _496: anchor_lang::error::Error;
    let mut _497: anchor_lang::error::Error;
    let mut _498: anchor_lang::error::ErrorCode;
    let _499: ();
    let mut _500: bool;
    let mut _501: &anchor_lang::prelude::Rent;
    let mut _502: u64;
    let mut _503: &anchor_lang::prelude::AccountInfo<'_>;
    let _504: anchor_lang::prelude::AccountInfo<'_>;
    let mut _505: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _506: usize;
    let mut _507: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _508: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _509: &anchor_lang::prelude::AccountInfo<'_>;
    let _510: anchor_lang::prelude::AccountInfo<'_>;
    let mut _511: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _512: isize;
    let mut _514: !;
    let mut _515: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _517: !;
    let mut _518: anchor_lang::error::Error;
    let mut _519: anchor_lang::error::Error;
    let mut _520: anchor_lang::error::ErrorCode;
    let mut _522: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _523: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _524: isize;
    let mut _526: !;
    let mut _527: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _531: (anchor_lang::prelude::Pubkey, u8);
    let mut _532: &[&[u8]];
    let mut _533: &[&[u8]; 2];
    let _534: &[&[u8]; 2];
    let _535: [&[u8]; 2];
    let mut _536: &[u8];
    let _537: &[u8];
    let mut _538: &[u8; 17];
    let _539: &[u8; 17];
    let mut _540: &[u8];
    let _541: &[u8];
    let mut _542: &[u8; 2];
    let _543: [u8; 2];
    let mut _544: u16;
    let mut _545: &state::state::State;
    let mut _546: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _547: &anchor_lang::prelude::Pubkey;
    let mut _548: u8;
    let _549: ();
    let mut _550: bool;
    let mut _551: &anchor_lang::prelude::Pubkey;
    let _552: anchor_lang::prelude::Pubkey;
    let mut _553: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _554: &anchor_lang::prelude::Pubkey;
    let mut _555: !;
    let mut _556: anchor_lang::error::Error;
    let mut _557: anchor_lang::error::Error;
    let mut _558: anchor_lang::error::Error;
    let mut _559: anchor_lang::error::ErrorCode;
    let mut _560: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _561: anchor_lang::prelude::Pubkey;
    let mut _562: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _563: anchor_lang::prelude::Pubkey;
    let mut _566: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _567: &anchor_lang::prelude::AccountInfo<'_>;
    let _568: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _569: &anchor_lang::prelude::AccountInfo<'_>;
    let _570: ();
    let mut _571: bool;
    let mut _572: bool;
    let mut _573: &&anchor_lang::prelude::Pubkey;
    let mut _574: &&anchor_lang::prelude::Pubkey;
    let _575: &anchor_lang::prelude::Pubkey;
    let _576: anchor_lang::prelude::Pubkey;
    let mut _578: &anchor_lang::prelude::AccountInfo<'_>;
    let _579: ();
    let mut _580: bool;
    let mut _581: u64;
    let mut _584: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _585: bool;
    let mut _586: &anchor_lang::prelude::Pubkey;
    let mut _587: &anchor_lang::prelude::Pubkey;
    let _588: anchor_lang::prelude::Pubkey;
    let mut _590: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _591: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _592: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _593: isize;
    let mut _595: !;
    let mut _596: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _599: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _600: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _601: &[u8];
    let _602: &&mut [u8];
    let mut _603: &std::cell::Ref<'_, &mut [u8]>;
    let _604: &std::cell::Ref<'_, &mut [u8]>;
    let mut _605: isize;
    let mut _607: !;
    let mut _608: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _611: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _612: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _613: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _614: isize;
    let mut _616: !;
    let mut _617: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _620: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _621: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _622: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _623: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _624: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _625: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _626: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _627: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _628: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _629: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _630: isize;
    let mut _632: !;
    let mut _633: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _636: &anchor_lang::prelude::Rent;
    let mut _637: usize;
    let mut _639: anchor_lang::prelude::AccountInfo<'_>;
    let mut _640: &anchor_lang::prelude::Signer<'_>;
    let mut _641: anchor_lang::prelude::AccountInfo<'_>;
    let mut _642: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _644: anchor_lang::prelude::AccountInfo<'_>;
    let mut _645: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _646: anchor_lang::system_program::CreateAccount<'_>;
    let _647: ();
    let mut _648: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _649: std::result::Result<(), anchor_lang::error::Error>;
    let mut _650: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _651: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _652: &[&[&[u8]]];
    let mut _653: &[&[&[u8]]; 1];
    let _654: &[&[&[u8]]; 1];
    let _655: [&[&[u8]]; 1];
    let mut _656: &[&[u8]];
    let _657: &[&[u8]];
    let _658: &[&[u8]];
    let mut _659: &[&[u8]; 3];
    let _660: [&[u8]; 3];
    let mut _661: &[u8];
    let mut _662: &[u8; 17];
    let _663: &[u8; 17];
    let mut _664: &[u8];
    let _665: &[u8];
    let mut _666: &[u8; 2];
    let _667: [u8; 2];
    let mut _668: u16;
    let mut _669: &state::state::State;
    let mut _670: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _671: &[u8];
    let _672: &[u8];
    let _673: &[u8];
    let mut _674: &[u8; 1];
    let _675: [u8; 1];
    let mut _676: u8;
    let mut _677: std::ops::RangeFull;
    let mut _678: std::ops::RangeFull;
    let mut _679: u64;
    let mut _680: u64;
    let mut _681: usize;
    let mut _682: &anchor_lang::prelude::Pubkey;
    let _683: &anchor_lang::prelude::Pubkey;
    let _684: anchor_lang::prelude::Pubkey;
    let mut _685: &anchor_lang::prelude::AccountInfo<'_>;
    let _686: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _687: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _688: isize;
    let mut _690: !;
    let mut _691: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _693: ();
    let mut _694: bool;
    let mut _695: &anchor_lang::prelude::Pubkey;
    let _696: anchor_lang::prelude::Pubkey;
    let mut _697: &anchor_lang::prelude::Signer<'_>;
    let mut _698: &anchor_lang::prelude::Pubkey;
    let _699: anchor_lang::prelude::Pubkey;
    let mut _700: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _701: !;
    let mut _702: anchor_lang::error::Error;
    let mut _703: anchor_lang::error::Error;
    let mut _704: anchor_lang::error::AnchorError;
    let mut _705: std::string::String;
    let mut _706: &anchor_lang::error::ErrorCode;
    let _707: anchor_lang::error::ErrorCode;
    let mut _708: u32;
    let mut _709: anchor_lang::error::ErrorCode;
    let mut _710: std::string::String;
    let mut _711: &anchor_lang::error::ErrorCode;
    let _712: anchor_lang::error::ErrorCode;
    let mut _713: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _714: anchor_lang::error::ErrorOrigin;
    let mut _715: anchor_lang::error::Source;
    let mut _716: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _717: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _718: anchor_lang::prelude::Pubkey;
    let mut _719: &anchor_lang::prelude::Signer<'_>;
    let mut _720: anchor_lang::prelude::Pubkey;
    let mut _721: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _723: u64;
    let mut _724: u64;
    let mut _725: &anchor_lang::prelude::Rent;
    let mut _726: usize;
    let mut _728: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _729: bool;
    let mut _730: &anchor_lang::prelude::Pubkey;
    let mut _731: &anchor_lang::prelude::Pubkey;
    let _732: anchor_lang::prelude::Pubkey;
    let mut _734: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _735: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _736: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _737: isize;
    let mut _739: !;
    let mut _740: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _743: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _744: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _745: &[u8];
    let _746: &&mut [u8];
    let mut _747: &std::cell::Ref<'_, &mut [u8]>;
    let _748: &std::cell::Ref<'_, &mut [u8]>;
    let mut _749: isize;
    let mut _751: !;
    let mut _752: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _755: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _756: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _757: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _758: isize;
    let mut _760: !;
    let mut _761: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _764: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _765: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _766: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _767: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _768: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _769: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _770: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _771: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _772: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _773: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _774: isize;
    let mut _776: !;
    let mut _777: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _779: u64;
    let _780: ();
    let mut _781: bool;
    let mut _782: u64;
    let mut _784: anchor_lang::prelude::AccountInfo<'_>;
    let mut _785: &anchor_lang::prelude::Signer<'_>;
    let mut _786: anchor_lang::prelude::AccountInfo<'_>;
    let mut _787: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _789: anchor_lang::prelude::AccountInfo<'_>;
    let mut _790: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _791: anchor_lang::system_program::Transfer<'_>;
    let _792: ();
    let mut _793: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _794: std::result::Result<(), anchor_lang::error::Error>;
    let mut _795: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _796: u64;
    let mut _797: isize;
    let mut _799: !;
    let mut _800: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _803: anchor_lang::prelude::AccountInfo<'_>;
    let mut _804: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _806: anchor_lang::prelude::AccountInfo<'_>;
    let mut _807: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _808: anchor_lang::system_program::Allocate<'_>;
    let _809: ();
    let mut _810: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _811: std::result::Result<(), anchor_lang::error::Error>;
    let mut _812: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _813: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _814: &[&[&[u8]]];
    let mut _815: &[&[&[u8]]; 1];
    let _816: &[&[&[u8]]; 1];
    let _817: [&[&[u8]]; 1];
    let mut _818: &[&[u8]];
    let _819: &[&[u8]];
    let _820: &[&[u8]];
    let mut _821: &[&[u8]; 3];
    let _822: [&[u8]; 3];
    let mut _823: &[u8];
    let mut _824: &[u8; 17];
    let _825: &[u8; 17];
    let mut _826: &[u8];
    let _827: &[u8];
    let mut _828: &[u8; 2];
    let _829: [u8; 2];
    let mut _830: u16;
    let mut _831: &state::state::State;
    let mut _832: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _833: &[u8];
    let _834: &[u8];
    let _835: &[u8];
    let mut _836: &[u8; 1];
    let _837: [u8; 1];
    let mut _838: u8;
    let mut _839: std::ops::RangeFull;
    let mut _840: std::ops::RangeFull;
    let mut _841: u64;
    let mut _842: usize;
    let mut _844: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _845: bool;
    let mut _846: &anchor_lang::prelude::Pubkey;
    let mut _847: &anchor_lang::prelude::Pubkey;
    let _848: anchor_lang::prelude::Pubkey;
    let mut _850: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _851: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _852: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _853: isize;
    let mut _855: !;
    let mut _856: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _859: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _860: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _861: &[u8];
    let _862: &&mut [u8];
    let mut _863: &std::cell::Ref<'_, &mut [u8]>;
    let _864: &std::cell::Ref<'_, &mut [u8]>;
    let mut _865: isize;
    let mut _867: !;
    let mut _868: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _871: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _872: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _873: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _874: isize;
    let mut _876: !;
    let mut _877: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _880: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _881: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _882: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _883: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _884: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _885: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _886: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _887: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _888: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _889: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _890: isize;
    let mut _892: !;
    let mut _893: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _895: isize;
    let mut _897: !;
    let mut _898: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _901: anchor_lang::prelude::AccountInfo<'_>;
    let mut _902: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _904: anchor_lang::prelude::AccountInfo<'_>;
    let mut _905: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _906: anchor_lang::system_program::Assign<'_>;
    let _907: ();
    let mut _908: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _909: std::result::Result<(), anchor_lang::error::Error>;
    let mut _910: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _911: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _912: &[&[&[u8]]];
    let mut _913: &[&[&[u8]]; 1];
    let _914: &[&[&[u8]]; 1];
    let _915: [&[&[u8]]; 1];
    let mut _916: &[&[u8]];
    let _917: &[&[u8]];
    let _918: &[&[u8]];
    let mut _919: &[&[u8]; 3];
    let _920: [&[u8]; 3];
    let mut _921: &[u8];
    let mut _922: &[u8; 17];
    let _923: &[u8; 17];
    let mut _924: &[u8];
    let _925: &[u8];
    let mut _926: &[u8; 2];
    let _927: [u8; 2];
    let mut _928: u16;
    let mut _929: &state::state::State;
    let mut _930: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _931: &[u8];
    let _932: &[u8];
    let _933: &[u8];
    let mut _934: &[u8; 1];
    let _935: [u8; 1];
    let mut _936: u8;
    let mut _937: std::ops::RangeFull;
    let mut _938: std::ops::RangeFull;
    let mut _939: &anchor_lang::prelude::Pubkey;
    let _940: &anchor_lang::prelude::Pubkey;
    let _941: anchor_lang::prelude::Pubkey;
    let mut _942: &anchor_lang::prelude::AccountInfo<'_>;
    let _943: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _944: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _945: isize;
    let mut _947: !;
    let mut _948: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _951: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _953: anchor_lang::prelude::AccountInfo<'_>;
    let mut _954: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _955: anchor_lang::prelude::AccountInfo<'_>;
    let mut _956: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _957: anchor_lang::prelude::AccountInfo<'_>;
    let mut _958: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _960: anchor_lang::prelude::AccountInfo<'_>;
    let mut _961: anchor_spl::token_2022::InitializeAccount3<'_>;
    let _962: ();
    let mut _963: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _964: std::result::Result<(), anchor_lang::error::Error>;
    let mut _965: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
    let mut _966: isize;
    let mut _968: !;
    let mut _969: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _972: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _973: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _974: &anchor_lang::prelude::AccountInfo<'_>;
    let _975: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _976: isize;
    let mut _979: !;
    let mut _980: anchor_lang::error::Error;
    let mut _981: anchor_lang::error::Error;
    let _982: ();
    let mut _983: bool;
    let _984: ();
    let mut _985: bool;
    let mut _986: &anchor_lang::prelude::Pubkey;
    let _987: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _988: &anchor_spl::token_interface::TokenAccount;
    let _989: &anchor_spl::token_interface::TokenAccount;
    let mut _990: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _991: &anchor_lang::prelude::Pubkey;
    let _992: anchor_lang::prelude::Pubkey;
    let mut _993: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _994: !;
    let mut _995: anchor_lang::error::Error;
    let mut _996: anchor_lang::error::Error;
    let mut _997: anchor_lang::error::Error;
    let mut _998: anchor_lang::error::ErrorCode;
    let mut _999: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1000: anchor_lang::prelude::Pubkey;
    let mut _1001: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1002: &anchor_spl::token_interface::TokenAccount;
    let _1003: &anchor_spl::token_interface::TokenAccount;
    let mut _1004: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1005: anchor_lang::prelude::Pubkey;
    let mut _1006: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _1007: ();
    let mut _1008: bool;
    let mut _1009: &anchor_lang::prelude::Pubkey;
    let _1010: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1011: &anchor_spl::token_interface::TokenAccount;
    let _1012: &anchor_spl::token_interface::TokenAccount;
    let mut _1013: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1014: &anchor_lang::prelude::Pubkey;
    let _1015: anchor_lang::prelude::Pubkey;
    let mut _1016: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1017: !;
    let mut _1018: anchor_lang::error::Error;
    let mut _1019: anchor_lang::error::Error;
    let mut _1020: anchor_lang::error::Error;
    let mut _1021: anchor_lang::error::ErrorCode;
    let mut _1022: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1023: anchor_lang::prelude::Pubkey;
    let mut _1024: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1025: &anchor_spl::token_interface::TokenAccount;
    let _1026: &anchor_spl::token_interface::TokenAccount;
    let mut _1027: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1028: anchor_lang::prelude::Pubkey;
    let mut _1029: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1030: bool;
    let mut _1031: &&anchor_lang::prelude::Pubkey;
    let mut _1032: &&anchor_lang::prelude::Pubkey;
    let _1033: &anchor_lang::prelude::Pubkey;
    let _1034: anchor_lang::prelude::Pubkey;
    let mut _1035: &anchor_lang::prelude::AccountInfo<'_>;
    let _1036: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1037: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1038: !;
    let mut _1039: anchor_lang::error::Error;
    let mut _1040: anchor_lang::error::Error;
    let mut _1041: anchor_lang::error::Error;
    let mut _1042: anchor_lang::error::ErrorCode;
    let mut _1043: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1044: anchor_lang::prelude::Pubkey;
    let mut _1045: anchor_lang::prelude::Pubkey;
    let mut _1046: &anchor_lang::prelude::AccountInfo<'_>;
    let _1047: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1048: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _1049: ();
    let mut _1050: bool;
    let mut _1051: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1052: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _1053: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1054: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1055: !;
    let mut _1056: anchor_lang::error::Error;
    let mut _1057: anchor_lang::error::Error;
    let mut _1058: anchor_lang::error::ErrorCode;
    let _1059: ();
    let mut _1060: bool;
    let mut _1061: &anchor_lang::prelude::Rent;
    let mut _1062: u64;
    let mut _1063: &anchor_lang::prelude::AccountInfo<'_>;
    let _1064: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1065: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1066: usize;
    let mut _1067: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1068: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1069: &anchor_lang::prelude::AccountInfo<'_>;
    let _1070: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1071: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1072: isize;
    let mut _1074: !;
    let mut _1075: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1077: !;
    let mut _1078: anchor_lang::error::Error;
    let mut _1079: anchor_lang::error::Error;
    let mut _1080: anchor_lang::error::ErrorCode;
    let mut _1082: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _1083: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _1084: isize;
    let mut _1086: !;
    let mut _1087: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1091: (anchor_lang::prelude::Pubkey, u8);
    let mut _1092: &[&[u8]];
    let mut _1093: &[&[u8]; 2];
    let _1094: &[&[u8]; 2];
    let _1095: [&[u8]; 2];
    let mut _1096: &[u8];
    let _1097: &[u8];
    let mut _1098: &[u8; 20];
    let _1099: &[u8; 20];
    let mut _1100: &[u8];
    let _1101: &[u8];
    let mut _1102: &[u8; 2];
    let _1103: [u8; 2];
    let mut _1104: u16;
    let mut _1105: &state::state::State;
    let mut _1106: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1107: &anchor_lang::prelude::Pubkey;
    let mut _1108: u8;
    let _1109: ();
    let mut _1110: bool;
    let mut _1111: &anchor_lang::prelude::Pubkey;
    let _1112: anchor_lang::prelude::Pubkey;
    let mut _1113: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1114: &anchor_lang::prelude::Pubkey;
    let mut _1115: !;
    let mut _1116: anchor_lang::error::Error;
    let mut _1117: anchor_lang::error::Error;
    let mut _1118: anchor_lang::error::Error;
    let mut _1119: anchor_lang::error::ErrorCode;
    let mut _1120: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1121: anchor_lang::prelude::Pubkey;
    let mut _1122: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1123: anchor_lang::prelude::Pubkey;
    let mut _1126: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1127: &anchor_lang::prelude::AccountInfo<'_>;
    let _1128: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1129: &anchor_lang::prelude::AccountInfo<'_>;
    let _1130: ();
    let mut _1131: bool;
    let mut _1132: bool;
    let mut _1133: &&anchor_lang::prelude::Pubkey;
    let mut _1134: &&anchor_lang::prelude::Pubkey;
    let _1135: &anchor_lang::prelude::Pubkey;
    let _1136: anchor_lang::prelude::Pubkey;
    let mut _1138: &anchor_lang::prelude::AccountInfo<'_>;
    let _1139: ();
    let mut _1140: bool;
    let mut _1141: u64;
    let mut _1144: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1145: bool;
    let mut _1146: &anchor_lang::prelude::Pubkey;
    let mut _1147: &anchor_lang::prelude::Pubkey;
    let _1148: anchor_lang::prelude::Pubkey;
    let mut _1150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _1151: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _1152: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1153: isize;
    let mut _1155: !;
    let mut _1156: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1159: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _1160: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _1161: &[u8];
    let _1162: &&mut [u8];
    let mut _1163: &std::cell::Ref<'_, &mut [u8]>;
    let _1164: &std::cell::Ref<'_, &mut [u8]>;
    let mut _1165: isize;
    let mut _1167: !;
    let mut _1168: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _1172: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _1173: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _1174: isize;
    let mut _1176: !;
    let mut _1177: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1180: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1181: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1182: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1183: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1184: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1185: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1186: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1187: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1188: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1189: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1190: isize;
    let mut _1192: !;
    let mut _1193: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1196: &anchor_lang::prelude::Rent;
    let mut _1197: usize;
    let mut _1199: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1200: &anchor_lang::prelude::Signer<'_>;
    let mut _1201: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1202: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1204: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1205: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1206: anchor_lang::system_program::CreateAccount<'_>;
    let _1207: ();
    let mut _1208: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1209: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1210: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _1211: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _1212: &[&[&[u8]]];
    let mut _1213: &[&[&[u8]]; 1];
    let _1214: &[&[&[u8]]; 1];
    let _1215: [&[&[u8]]; 1];
    let mut _1216: &[&[u8]];
    let _1217: &[&[u8]];
    let _1218: &[&[u8]];
    let mut _1219: &[&[u8]; 3];
    let _1220: [&[u8]; 3];
    let mut _1221: &[u8];
    let mut _1222: &[u8; 20];
    let _1223: &[u8; 20];
    let mut _1224: &[u8];
    let _1225: &[u8];
    let mut _1226: &[u8; 2];
    let _1227: [u8; 2];
    let mut _1228: u16;
    let mut _1229: &state::state::State;
    let mut _1230: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1231: &[u8];
    let _1232: &[u8];
    let _1233: &[u8];
    let mut _1234: &[u8; 1];
    let _1235: [u8; 1];
    let mut _1236: u8;
    let mut _1237: std::ops::RangeFull;
    let mut _1238: std::ops::RangeFull;
    let mut _1239: u64;
    let mut _1240: u64;
    let mut _1241: usize;
    let mut _1242: &anchor_lang::prelude::Pubkey;
    let _1243: &anchor_lang::prelude::Pubkey;
    let _1244: anchor_lang::prelude::Pubkey;
    let mut _1245: &anchor_lang::prelude::AccountInfo<'_>;
    let _1246: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1247: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1248: isize;
    let mut _1250: !;
    let mut _1251: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _1253: ();
    let mut _1254: bool;
    let mut _1255: &anchor_lang::prelude::Pubkey;
    let _1256: anchor_lang::prelude::Pubkey;
    let mut _1257: &anchor_lang::prelude::Signer<'_>;
    let mut _1258: &anchor_lang::prelude::Pubkey;
    let _1259: anchor_lang::prelude::Pubkey;
    let mut _1260: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1261: !;
    let mut _1262: anchor_lang::error::Error;
    let mut _1263: anchor_lang::error::Error;
    let mut _1264: anchor_lang::error::AnchorError;
    let mut _1265: std::string::String;
    let mut _1266: &anchor_lang::error::ErrorCode;
    let _1267: anchor_lang::error::ErrorCode;
    let mut _1268: u32;
    let mut _1269: anchor_lang::error::ErrorCode;
    let mut _1270: std::string::String;
    let mut _1271: &anchor_lang::error::ErrorCode;
    let _1272: anchor_lang::error::ErrorCode;
    let mut _1273: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _1274: anchor_lang::error::ErrorOrigin;
    let mut _1275: anchor_lang::error::Source;
    let mut _1276: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _1277: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1278: anchor_lang::prelude::Pubkey;
    let mut _1279: &anchor_lang::prelude::Signer<'_>;
    let mut _1280: anchor_lang::prelude::Pubkey;
    let mut _1281: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1283: u64;
    let mut _1284: u64;
    let mut _1285: &anchor_lang::prelude::Rent;
    let mut _1286: usize;
    let mut _1288: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1289: bool;
    let mut _1290: &anchor_lang::prelude::Pubkey;
    let mut _1291: &anchor_lang::prelude::Pubkey;
    let _1292: anchor_lang::prelude::Pubkey;
    let mut _1294: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _1295: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _1296: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1297: isize;
    let mut _1299: !;
    let mut _1300: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1303: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _1304: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _1305: &[u8];
    let _1306: &&mut [u8];
    let mut _1307: &std::cell::Ref<'_, &mut [u8]>;
    let _1308: &std::cell::Ref<'_, &mut [u8]>;
    let mut _1309: isize;
    let mut _1311: !;
    let mut _1312: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1315: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _1316: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _1317: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _1318: isize;
    let mut _1320: !;
    let mut _1321: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1324: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1325: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1326: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1327: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1328: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1329: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1330: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1331: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1332: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1333: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1334: isize;
    let mut _1336: !;
    let mut _1337: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1339: u64;
    let _1340: ();
    let mut _1341: bool;
    let mut _1342: u64;
    let mut _1344: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1345: &anchor_lang::prelude::Signer<'_>;
    let mut _1346: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1347: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1349: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1350: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1351: anchor_lang::system_program::Transfer<'_>;
    let _1352: ();
    let mut _1353: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1354: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1355: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _1356: u64;
    let mut _1357: isize;
    let mut _1359: !;
    let mut _1360: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1363: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1364: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1366: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1367: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1368: anchor_lang::system_program::Allocate<'_>;
    let _1369: ();
    let mut _1370: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1371: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1372: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _1373: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _1374: &[&[&[u8]]];
    let mut _1375: &[&[&[u8]]; 1];
    let _1376: &[&[&[u8]]; 1];
    let _1377: [&[&[u8]]; 1];
    let mut _1378: &[&[u8]];
    let _1379: &[&[u8]];
    let _1380: &[&[u8]];
    let mut _1381: &[&[u8]; 3];
    let _1382: [&[u8]; 3];
    let mut _1383: &[u8];
    let mut _1384: &[u8; 20];
    let _1385: &[u8; 20];
    let mut _1386: &[u8];
    let _1387: &[u8];
    let mut _1388: &[u8; 2];
    let _1389: [u8; 2];
    let mut _1390: u16;
    let mut _1391: &state::state::State;
    let mut _1392: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1393: &[u8];
    let _1394: &[u8];
    let _1395: &[u8];
    let mut _1396: &[u8; 1];
    let _1397: [u8; 1];
    let mut _1398: u8;
    let mut _1399: std::ops::RangeFull;
    let mut _1400: std::ops::RangeFull;
    let mut _1401: u64;
    let mut _1402: usize;
    let mut _1404: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1405: bool;
    let mut _1406: &anchor_lang::prelude::Pubkey;
    let mut _1407: &anchor_lang::prelude::Pubkey;
    let _1408: anchor_lang::prelude::Pubkey;
    let mut _1410: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _1411: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _1412: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1413: isize;
    let mut _1415: !;
    let mut _1416: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1419: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>>;
    let mut _1420: std::result::Result<anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError>;
    let mut _1421: &[u8];
    let _1422: &&mut [u8];
    let mut _1423: &std::cell::Ref<'_, &mut [u8]>;
    let _1424: &std::cell::Ref<'_, &mut [u8]>;
    let mut _1425: isize;
    let mut _1427: !;
    let mut _1428: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1431: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>>;
    let mut _1432: std::result::Result<std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>, anchor_lang::prelude::ProgramError>;
    let mut _1433: &anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
    let mut _1434: isize;
    let mut _1436: !;
    let mut _1437: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1440: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1441: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1442: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1443: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1444: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1445: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1446: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let _1447: &[anchor_spl::token_2022::spl_token_2022::extension::ExtensionType];
    let mut _1448: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let _1449: &std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
    let mut _1450: isize;
    let mut _1452: !;
    let mut _1453: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1455: isize;
    let mut _1457: !;
    let mut _1458: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1461: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1462: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1464: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1465: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1466: anchor_lang::system_program::Assign<'_>;
    let _1467: ();
    let mut _1468: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1469: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1470: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _1471: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _1472: &[&[&[u8]]];
    let mut _1473: &[&[&[u8]]; 1];
    let _1474: &[&[&[u8]]; 1];
    let _1475: [&[&[u8]]; 1];
    let mut _1476: &[&[u8]];
    let _1477: &[&[u8]];
    let _1478: &[&[u8]];
    let mut _1479: &[&[u8]; 3];
    let _1480: [&[u8]; 3];
    let mut _1481: &[u8];
    let mut _1482: &[u8; 20];
    let _1483: &[u8; 20];
    let mut _1484: &[u8];
    let _1485: &[u8];
    let mut _1486: &[u8; 2];
    let _1487: [u8; 2];
    let mut _1488: u16;
    let mut _1489: &state::state::State;
    let mut _1490: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1491: &[u8];
    let _1492: &[u8];
    let _1493: &[u8];
    let mut _1494: &[u8; 1];
    let _1495: [u8; 1];
    let mut _1496: u8;
    let mut _1497: std::ops::RangeFull;
    let mut _1498: std::ops::RangeFull;
    let mut _1499: &anchor_lang::prelude::Pubkey;
    let _1500: &anchor_lang::prelude::Pubkey;
    let _1501: anchor_lang::prelude::Pubkey;
    let mut _1502: &anchor_lang::prelude::AccountInfo<'_>;
    let _1503: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1504: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1505: isize;
    let mut _1507: !;
    let mut _1508: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1511: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1513: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1514: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1515: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1516: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1517: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1518: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1520: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1521: anchor_spl::token_2022::InitializeAccount3<'_>;
    let _1522: ();
    let mut _1523: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _1524: std::result::Result<(), anchor_lang::error::Error>;
    let mut _1525: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
    let mut _1526: isize;
    let mut _1528: !;
    let mut _1529: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _1532: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1533: std::result::Result<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, anchor_lang::error::Error>;
    let mut _1534: &anchor_lang::prelude::AccountInfo<'_>;
    let _1535: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _1536: isize;
    let mut _1539: !;
    let mut _1540: anchor_lang::error::Error;
    let mut _1541: anchor_lang::error::Error;
    let _1542: ();
    let mut _1543: bool;
    let _1544: ();
    let mut _1545: bool;
    let mut _1546: &anchor_lang::prelude::Pubkey;
    let _1547: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1548: &anchor_spl::token_interface::TokenAccount;
    let _1549: &anchor_spl::token_interface::TokenAccount;
    let mut _1550: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1551: &anchor_lang::prelude::Pubkey;
    let _1552: anchor_lang::prelude::Pubkey;
    let mut _1553: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _1554: !;
    let mut _1555: anchor_lang::error::Error;
    let mut _1556: anchor_lang::error::Error;
    let mut _1557: anchor_lang::error::Error;
    let mut _1558: anchor_lang::error::ErrorCode;
    let mut _1559: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1560: anchor_lang::prelude::Pubkey;
    let mut _1561: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1562: &anchor_spl::token_interface::TokenAccount;
    let _1563: &anchor_spl::token_interface::TokenAccount;
    let mut _1564: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1565: anchor_lang::prelude::Pubkey;
    let mut _1566: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _1567: ();
    let mut _1568: bool;
    let mut _1569: &anchor_lang::prelude::Pubkey;
    let _1570: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1571: &anchor_spl::token_interface::TokenAccount;
    let _1572: &anchor_spl::token_interface::TokenAccount;
    let mut _1573: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1574: &anchor_lang::prelude::Pubkey;
    let _1575: anchor_lang::prelude::Pubkey;
    let mut _1576: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1577: !;
    let mut _1578: anchor_lang::error::Error;
    let mut _1579: anchor_lang::error::Error;
    let mut _1580: anchor_lang::error::Error;
    let mut _1581: anchor_lang::error::ErrorCode;
    let mut _1582: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1583: anchor_lang::prelude::Pubkey;
    let mut _1584: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _1585: &anchor_spl::token_interface::TokenAccount;
    let _1586: &anchor_spl::token_interface::TokenAccount;
    let mut _1587: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1588: anchor_lang::prelude::Pubkey;
    let mut _1589: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1590: bool;
    let mut _1591: &&anchor_lang::prelude::Pubkey;
    let mut _1592: &&anchor_lang::prelude::Pubkey;
    let _1593: &anchor_lang::prelude::Pubkey;
    let _1594: anchor_lang::prelude::Pubkey;
    let mut _1595: &anchor_lang::prelude::AccountInfo<'_>;
    let _1596: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1597: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1598: !;
    let mut _1599: anchor_lang::error::Error;
    let mut _1600: anchor_lang::error::Error;
    let mut _1601: anchor_lang::error::Error;
    let mut _1602: anchor_lang::error::ErrorCode;
    let mut _1603: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _1604: anchor_lang::prelude::Pubkey;
    let mut _1605: anchor_lang::prelude::Pubkey;
    let mut _1606: &anchor_lang::prelude::AccountInfo<'_>;
    let _1607: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1608: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _1609: ();
    let mut _1610: bool;
    let mut _1611: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1612: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _1613: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1614: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1615: !;
    let mut _1616: anchor_lang::error::Error;
    let mut _1617: anchor_lang::error::Error;
    let mut _1618: anchor_lang::error::ErrorCode;
    let _1619: ();
    let mut _1620: bool;
    let mut _1621: &anchor_lang::prelude::Rent;
    let mut _1622: u64;
    let mut _1623: &anchor_lang::prelude::AccountInfo<'_>;
    let _1624: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1625: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1626: usize;
    let mut _1627: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _1628: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _1629: &anchor_lang::prelude::AccountInfo<'_>;
    let _1630: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1631: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _1632: isize;
    let mut _1634: !;
    let mut _1635: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _1637: !;
    let mut _1638: anchor_lang::error::Error;
    let mut _1639: anchor_lang::error::Error;
    let mut _1640: anchor_lang::error::ErrorCode;
    let _1641: ();
    let mut _1642: bool;
    let mut _1643: &anchor_lang::prelude::Pubkey;
    let _1644: &state::state::State;
    let mut _1645: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1646: &anchor_lang::prelude::Pubkey;
    let _1647: &anchor_lang::prelude::Pubkey;
    let _1648: anchor_lang::prelude::Pubkey;
    let mut _1649: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1650: !;
    let mut _1651: anchor_lang::error::Error;
    let mut _1652: anchor_lang::error::Error;
    let mut _1653: anchor_lang::error::ErrorCode;
    let _1654: ();
    let mut _1655: bool;
    let mut _1656: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1657: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _1658: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1659: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1660: !;
    let mut _1661: anchor_lang::error::Error;
    let mut _1662: anchor_lang::error::Error;
    let mut _1663: anchor_lang::error::ErrorCode;
    let _1664: ();
    let mut _1665: bool;
    let mut _1666: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1667: &anchor_lang::prelude::Signer<'_>;
    let _1668: &anchor_lang::prelude::Signer<'_>;
    let mut _1669: !;
    let mut _1670: anchor_lang::error::Error;
    let mut _1671: anchor_lang::error::Error;
    let mut _1672: anchor_lang::error::ErrorCode;
    let _1673: ();
    let mut _1674: bool;
    let mut _1675: &anchor_lang::prelude::Pubkey;
    let _1676: anchor_lang::prelude::Pubkey;
    let mut _1677: &anchor_lang::prelude::Signer<'_>;
    let mut _1678: &anchor_lang::prelude::Pubkey;
    let _1679: anchor_lang::prelude::Pubkey;
    let mut _1680: bool;
    let mut _1681: &anchor_lang::prelude::Pubkey;
    let _1682: anchor_lang::prelude::Pubkey;
    let mut _1683: &anchor_lang::prelude::Signer<'_>;
    let mut _1684: &anchor_lang::prelude::Pubkey;
    let _1685: &state::state::State;
    let mut _1686: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1687: !;
    let mut _1688: anchor_lang::error::Error;
    let mut _1689: anchor_lang::error::Error;
    let mut _1690: anchor_lang::error::ErrorCode;
    let mut _1691: instructions::admin::InitializeSpotMarket<'_>;
    let mut _1692: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _1693: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _1694: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1695: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _1696: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1697: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1698: anchor_lang::prelude::AccountInfo<'_>;
    let mut _1699: anchor_lang::prelude::Signer<'_>;
    let mut _1700: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _1701: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _1702: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _1712: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1713: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1714: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1715: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1716: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1717: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1718: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1719: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1720: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1721: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1722: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1723: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _1724: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1725: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1726: &anchor_lang::prelude::Pubkey;
    let mut _1727: &mut [u8];
    let mut _1728: &anchor_lang::prelude::Pubkey;
    let mut _1729: &mut [u8];
    let mut _1730: &anchor_lang::prelude::Pubkey;
    let mut _1731: &mut [u8];
    let mut _1732: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1733: &anchor_lang::prelude::Pubkey;
    let mut _1734: &mut [u8];
    let mut _1735: &anchor_lang::prelude::Pubkey;
    let mut _1736: &mut [u8];
    let mut _1737: &anchor_lang::prelude::Pubkey;
    let mut _1738: &mut [u8];
    let mut _1739: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _1740: bool;
    let mut _1741: bool;
    let mut _1742: bool;
    let mut _1743: bool;
    let mut _1744: bool;
    let mut _1745: bool;
    let mut _1746: bool;
    let mut _1747: bool;
    let mut _1748: bool;
    let mut _1749: bool;
    let mut _1750: bool;
    let mut _1751: bool;
    let mut _1752: bool;
    let mut _1753: bool;
    let mut _1754: bool;
    let mut _1755: bool;
    let mut _1756: bool;
    let mut _1757: bool;
    let mut _1758: bool;
    let mut _1759: bool;
    let mut _1760: bool;
    let mut _1761: bool;
    let mut _1762: bool;
    let mut _1763: bool;
    let mut _1764: bool;
    let mut _1765: bool;
    let mut _1766: bool;
    let mut _1767: bool;
    let mut _1768: bool;
    let mut _1769: bool;
    let mut _1770: bool;
    let mut _1771: bool;
    let mut _1772: bool;
    let mut _1773: bool;
    let mut _1774: bool;
    let mut _1775: bool;
    let mut _1776: bool;
    let mut _1777: bool;
    let mut _1778: bool;
    let mut _1779: bool;
    let mut _1780: bool;
    let mut _1781: bool;
    let mut _1782: bool;
    let mut _1783: bool;
    let mut _1784: bool;
    let mut _1785: bool;
    let mut _1786: bool;
    let mut _1787: bool;
    let mut _1788: bool;
    let mut _1789: bool;
    let mut _1790: bool;
    let mut _1791: bool;
    let mut _1792: bool;
    let mut _1793: bool;
    let mut _1794: bool;
    let mut _1795: isize;
    let mut _1796: isize;
    let mut _1797: isize;
    let mut _1798: isize;
    let mut _1799: isize;
    let mut _1800: isize;
    let mut _1801: isize;
    let mut _1802: isize;
    let mut _1803: isize;
    let mut _1804: isize;
    let mut _1805: isize;
    let mut _1806: isize;
    let mut _1807: isize;
    let mut _1808: isize;
    let mut _1809: isize;
    let mut _1810: isize;
    let mut _1811: isize;
    let mut _1812: isize;
    let mut _1813: isize;
    let mut _1814: isize;
    let mut _1815: isize;
    let mut _1816: isize;
    let mut _1817: isize;
    let mut _1818: isize;
    let mut _1819: isize;
    let mut _1820: isize;
    let mut _1821: isize;
    let mut _1822: isize;
    let mut _1823: isize;
    let mut _1824: isize;
    let mut _1825: isize;
    let mut _1826: isize;
    let mut _1827: isize;
    let mut _1828: isize;
    let mut _1829: isize;
    let mut _1830: isize;
    let mut _1831: isize;
    let mut _1832: isize;
    let mut _1833: isize;
    let mut _1834: isize;
    let mut _1835: isize;
    let mut _1836: isize;
    let mut _1837: isize;
    let mut _1838: isize;
    let mut _1839: isize;
    let mut _1840: isize;
    let mut _1841: isize;
    let mut _1842: isize;
    let mut _1843: isize;
    let mut _1844: isize;
    let mut _1845: isize;
    let mut _1846: isize;
    let mut _1847: isize;
    let mut _1848: isize;
    let mut _1849: isize;
    let mut _1850: isize;
    let mut _1851: isize;
    let mut _1852: isize;
    let mut _1853: isize;
    let mut _1854: isize;
    let mut _1855: isize;
    let mut _1856: isize;
    let mut _1857: isize;
    let mut _1858: isize;
    let mut _1859: isize;
    let mut _1860: isize;
    let mut _1861: isize;
    let mut _1862: isize;
    let mut _1863: isize;
    let mut _1864: isize;
    let mut _1865: isize;
    let mut _1866: isize;
    let mut _1867: isize;
    let mut _1868: isize;
    let mut _1869: isize;
    let mut _1870: isize;
    let mut _1871: isize;
    let mut _1872: isize;
    let mut _1873: isize;
    let mut _1874: isize;
    let mut _1875: isize;
    let mut _1876: isize;
    let mut _1877: isize;
    let mut _1878: isize;
    let mut _1879: isize;
    let mut _1880: isize;
    let mut _1881: isize;
    let mut _1882: isize;
    let mut _1883: isize;
    let mut _1884: isize;
    let mut _1885: isize;
    let mut _1886: isize;
    let mut _1887: isize;
    let mut _1888: isize;
    let mut _1889: isize;
    let mut _1890: isize;
    let mut _1891: isize;
    let mut _1892: isize;
    let mut _1893: isize;
    let mut _1894: isize;
    let mut _1895: isize;
    let mut _1896: isize;
    let mut _1897: isize;
    let mut _1898: isize;
    let mut _1899: isize;
    let mut _1900: isize;
    let mut _1901: isize;
    let mut _1902: isize;
    let mut _1903: isize;
    let mut _1904: isize;
    let mut _1905: isize;
    let mut _1906: isize;
    let mut _1907: isize;
    let mut _1908: isize;
    let mut _1909: isize;
    let mut _1910: isize;
    let mut _1911: isize;
    let mut _1912: isize;
    let mut _1913: isize;
    let mut _1914: isize;
    let mut _1915: isize;
    let mut _1916: isize;
    let mut _1917: isize;
    let mut _1918: isize;
    let mut _1919: isize;
    let mut _1920: isize;
    let mut _1921: isize;
    let mut _1922: isize;
    let mut _1923: isize;
    let mut _1924: isize;
    let mut _1925: isize;
    let mut _1926: isize;
    let mut _1927: isize;
    let mut _1928: isize;
    let mut _1929: isize;
    let mut _1930: isize;
    let mut _1931: isize;
    let mut _1932: isize;
    let mut _1933: isize;
    let mut _1934: isize;
    let mut _1935: isize;
    let mut _1936: isize;
    let mut _1937: isize;
    let mut _1938: isize;
    let mut _1939: isize;
    let mut _1940: isize;
    let mut _1941: isize;
    let mut _1942: isize;
    let mut _1943: isize;
    let mut _1944: isize;
    let mut _1945: isize;
    let mut _1946: isize;
    let mut _1947: isize;
    let mut _1948: isize;
    let mut _1949: isize;
    let mut _1950: isize;
    let mut _1951: isize;
    let mut _1952: isize;
    let mut _1953: isize;
    let mut _1954: isize;
    let mut _1955: isize;
    let mut _1956: isize;
    let mut _1957: isize;
    let mut _1958: isize;
    let mut _1959: isize;
    let mut _1960: isize;
    let mut _1961: isize;
    let mut _1962: isize;
    let mut _1963: isize;
    let mut _1964: isize;
    let mut _1965: isize;
    let mut _1966: isize;
    let mut _1967: isize;
    let mut _1968: isize;
    let mut _1969: isize;
    let mut _1970: isize;
    let mut _1971: isize;
    let mut _1972: isize;
    let mut _1973: isize;
    let mut _1974: isize;
    let mut _1975: isize;
    let mut _1976: isize;
    let mut _1977: isize;
    let mut _1978: isize;
    let mut _1979: isize;
    let mut _1980: isize;
    let mut _1981: isize;
    let mut _1982: isize;
    let mut _1983: isize;
    let mut _1984: isize;
    let mut _1985: isize;
    let mut _1986: isize;
    let mut _1987: isize;
    let mut _1988: isize;
    let mut _1989: isize;
    let mut _1990: isize;
    let mut _1991: isize;
    let mut _1992: isize;
    let mut _1993: isize;
    let mut _1994: isize;
    let mut _1995: isize;
    let mut _1996: isize;
    let mut _1997: isize;
    let mut _1998: isize;
    let mut _1999: isize;
    let mut _2000: isize;
    let mut _2001: isize;
    let mut _2002: isize;
    let mut _2003: isize;
    let mut _2004: isize;
    let mut _2005: isize;
    let mut _2006: isize;
    let mut _2007: isize;
    let mut _2008: isize;
    let mut _2009: isize;
    let mut _2010: isize;
    let mut _2011: isize;
    let mut _2012: isize;
    let mut _2013: isize;
    let mut _2014: isize;
    let mut _2015: isize;
    let mut _2016: isize;
    let mut _2017: isize;
    let mut _2018: isize;
    let mut _2019: isize;
    let mut _2020: isize;
    let mut _2021: isize;
    let mut _2022: isize;
    let mut _2023: isize;
    let mut _2024: isize;
    let mut _2025: isize;
    let mut _2026: isize;
    let mut _2027: isize;
    let mut _2028: isize;
    let mut _2029: isize;
    let mut _2030: isize;
    let mut _2031: isize;
    let mut _2032: isize;
    let mut _2033: isize;
    let mut _2034: isize;
    let mut _2035: isize;
    let mut _2036: isize;
    let mut _2037: isize;
    let mut _2038: isize;
    let mut _2039: isize;
    let mut _2040: isize;
    let mut _2041: isize;
    let mut _2042: isize;
    let mut _2043: isize;
    let mut _2044: isize;
    let mut _2045: isize;
    let mut _2046: isize;
    let mut _2047: isize;
    let mut _2048: isize;
    let mut _2049: isize;
    let mut _2050: isize;
    let mut _2051: isize;
    let mut _2052: isize;
    let mut _2053: isize;
    let mut _2054: isize;
    let mut _2055: isize;
    let mut _2056: isize;
    let mut _2057: isize;
    let mut _2058: isize;
    let mut _2059: isize;
    let mut _2060: isize;
    let mut _2061: isize;
    let mut _2062: isize;
    let mut _2063: isize;
    let mut _2064: isize;
    let mut _2065: isize;
    let mut _2066: isize;
    let mut _2067: isize;
    let mut _2068: isize;
    let mut _2069: isize;
    let mut _2070: isize;
    let mut _2071: isize;
    let mut _2072: isize;
    let mut _2073: isize;
    let mut _2074: isize;
    let mut _2075: isize;
    let mut _2076: isize;
    let mut _2077: isize;
    let mut _2078: isize;
    let mut _2079: isize;
    let mut _2080: isize;
    let mut _2081: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2082: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2083: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2084: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2085: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2086: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2087: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2088: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2089: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2090: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2091: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2092: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2093: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2094: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2095: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2096: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2097: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2098: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2099: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2100: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2101: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2102: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2103: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2104: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2105: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2106: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2107: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2108: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2109: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2110: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2111: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2112: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _2113: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2114: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2115: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2116: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _2117: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _2118: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug spot_market => _12;
        let _21: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
        scope 2 {
            debug spot_market_mint => _21;
            let _42: &anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug spot_market_vault => _42;
                let _57: &anchor_lang::prelude::AccountInfo<'_>;
                scope 8 {
                    debug insurance_fund_vault => _57;
                    let _66: anchor_lang::prelude::AccountInfo<'_>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::AccountInfo<'_>;
                    scope 9 {
                        debug drift_signer => _66;
                        let _81: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        scope 14 {
                            debug state => _81;
                            let _96: anchor_lang::prelude::AccountInfo<'_>;
                            let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _110: anchor_lang::prelude::AccountInfo<'_>;
                            scope 19 {
                                debug oracle => _96;
                                let _111: anchor_lang::prelude::Signer<'_>;
                                let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _125: anchor_lang::prelude::Signer<'_>;
                                scope 24 {
                                    debug admin => _111;
                                    let _126: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                    let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _140: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                    scope 29 {
                                        debug rent => _126;
                                        let _141: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                        let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _155: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                        scope 34 {
                                            debug system_program => _141;
                                            let _156: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                            let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _170: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                            scope 39 {
                                                debug token_program => _156;
                                                let _171: anchor_lang::prelude::Rent;
                                                let _175: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                let _178: anchor_lang::prelude::Rent;
                                                scope 44 {
                                                    debug __anchor_rent => _171;
                                                    let _179: anchor_lang::prelude::Pubkey;
                                                    let _180: u8;
                                                    scope 49 {
                                                        debug __pda_address => _179;
                                                        debug __bump => _180;
                                                        let _213: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                                                        let _214: &anchor_lang::prelude::AccountInfo<'_>;
                                                        scope 50 {
                                                            debug spot_market => _213;
                                                            let _513: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _516: usize;
                                                            let _521: anchor_lang::prelude::Rent;
                                                            let _525: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                            let _528: anchor_lang::prelude::Rent;
                                                            scope 88 {
                                                                debug residual => _513;
                                                                scope 89 {
                                                                }
                                                            }
                                                            scope 90 {
                                                                debug val => _516;
                                                                scope 91 {
                                                                }
                                                            }
                                                            scope 92 {
                                                                debug __anchor_rent => _521;
                                                                let _529: anchor_lang::prelude::Pubkey;
                                                                let _530: u8;
                                                                scope 97 {
                                                                    debug __pda_address => _529;
                                                                    debug __bump => _530;
                                                                    let _564: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                    let _565: &anchor_lang::prelude::Pubkey;
                                                                    scope 98 {
                                                                        debug spot_market_vault => _564;
                                                                        let _1073: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _1076: usize;
                                                                        let _1081: anchor_lang::prelude::Rent;
                                                                        let _1085: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                        let _1088: anchor_lang::prelude::Rent;
                                                                        scope 201 {
                                                                            debug residual => _1073;
                                                                            scope 202 {
                                                                            }
                                                                        }
                                                                        scope 203 {
                                                                            debug val => _1076;
                                                                            scope 204 {
                                                                            }
                                                                        }
                                                                        scope 205 {
                                                                            debug __anchor_rent => _1081;
                                                                            let _1089: anchor_lang::prelude::Pubkey;
                                                                            let _1090: u8;
                                                                            scope 210 {
                                                                                debug __pda_address => _1089;
                                                                                debug __bump => _1090;
                                                                                let _1124: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                let _1125: &anchor_lang::prelude::Pubkey;
                                                                                scope 211 {
                                                                                    debug insurance_fund_vault => _1124;
                                                                                    let _1633: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _1636: usize;
                                                                                    scope 314 {
                                                                                        debug residual => _1633;
                                                                                        scope 315 {
                                                                                        }
                                                                                    }
                                                                                    scope 316 {
                                                                                        debug val => _1636;
                                                                                        scope 317 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 212 {
                                                                                    debug owner_program => _1125;
                                                                                    let _1137: u64;
                                                                                    let _1531: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                                    let _1537: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                                                    let _1538: anchor_lang::error::Error;
                                                                                    let mut _1705: &&anchor_lang::prelude::Pubkey;
                                                                                    scope 213 {
                                                                                        debug __current_lamports => _1137;
                                                                                        let _1142: usize;
                                                                                        let _1143: anchor_lang::prelude::AccountInfo<'_>;
                                                                                        let _1282: u64;
                                                                                        let _1287: anchor_lang::prelude::AccountInfo<'_>;
                                                                                        let _1510: anchor_lang::prelude::AccountInfo<'_>;
                                                                                        let mut _1703: &anchor_lang::error::ErrorCode;
                                                                                        let mut _1704: &anchor_lang::error::ErrorCode;
                                                                                        scope 214 {
                                                                                            debug space => _1142;
                                                                                            let _1195: u64;
                                                                                            scope 236 {
                                                                                                debug lamports => _1195;
                                                                                                let _1198: anchor_lang::system_program::CreateAccount<'_>;
                                                                                                scope 237 {
                                                                                                    debug cpi_accounts => _1198;
                                                                                                    let _1203: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                                    scope 238 {
                                                                                                        debug cpi_context => _1203;
                                                                                                        let _1249: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                        let _1252: ();
                                                                                                        scope 239 {
                                                                                                            debug residual => _1249;
                                                                                                            scope 240 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 241 {
                                                                                                            debug val => _1252;
                                                                                                            scope 242 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 215 {
                                                                                            debug mint_info => _1143;
                                                                                            let _1149: std::cell::Ref<'_, &mut [u8]>;
                                                                                            let _1154: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                            let _1157: std::cell::Ref<'_, &mut [u8]>;
                                                                                            scope 216 {
                                                                                                debug mint_data => _1149;
                                                                                                let _1158: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                let _1166: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _1169: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                scope 221 {
                                                                                                    debug mint_state => _1158;
                                                                                                    let _1170: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    let _1175: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                    let _1178: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    scope 226 {
                                                                                                        debug mint_extensions => _1170;
                                                                                                        let _1179: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                        scope 231 {
                                                                                                            debug required_extensions => _1179;
                                                                                                            let _1191: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _1194: usize;
                                                                                                            scope 232 {
                                                                                                                debug residual => _1191;
                                                                                                                scope 233 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 234 {
                                                                                                                debug val => _1194;
                                                                                                                scope 235 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 227 {
                                                                                                        debug residual => _1175;
                                                                                                        scope 228 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 229 {
                                                                                                        debug val => _1178;
                                                                                                        scope 230 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 222 {
                                                                                                    debug residual => _1166;
                                                                                                    scope 223 {
                                                                                                    }
                                                                                                }
                                                                                                scope 224 {
                                                                                                    debug val => _1169;
                                                                                                    scope 225 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 217 {
                                                                                                debug residual => _1154;
                                                                                                scope 218 {
                                                                                                }
                                                                                            }
                                                                                            scope 219 {
                                                                                                debug val => _1157;
                                                                                                scope 220 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 243 {
                                                                                            debug required_lamports => _1282;
                                                                                            let _1343: anchor_lang::system_program::Transfer<'_>;
                                                                                            let _1362: anchor_lang::system_program::Allocate<'_>;
                                                                                            scope 265 {
                                                                                                debug cpi_accounts => _1343;
                                                                                                let _1348: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                                scope 266 {
                                                                                                    debug cpi_context => _1348;
                                                                                                    let _1358: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                    let _1361: ();
                                                                                                    scope 267 {
                                                                                                        debug residual => _1358;
                                                                                                        scope 268 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 269 {
                                                                                                        debug val => _1361;
                                                                                                        scope 270 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 271 {
                                                                                                debug cpi_accounts => _1362;
                                                                                                let _1365: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                                scope 272 {
                                                                                                    debug cpi_context => _1365;
                                                                                                    let _1403: anchor_lang::prelude::AccountInfo<'_>;
                                                                                                    let _1456: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                    let _1459: ();
                                                                                                    let _1460: anchor_lang::system_program::Assign<'_>;
                                                                                                    scope 273 {
                                                                                                        debug mint_info => _1403;
                                                                                                        let _1409: std::cell::Ref<'_, &mut [u8]>;
                                                                                                        let _1414: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                        let _1417: std::cell::Ref<'_, &mut [u8]>;
                                                                                                        scope 274 {
                                                                                                            debug mint_data => _1409;
                                                                                                            let _1418: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                            let _1426: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _1429: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                            scope 279 {
                                                                                                                debug mint_state => _1418;
                                                                                                                let _1430: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                let _1435: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                let _1438: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                scope 284 {
                                                                                                                    debug mint_extensions => _1430;
                                                                                                                    let _1439: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                                    scope 289 {
                                                                                                                        debug required_extensions => _1439;
                                                                                                                        let _1451: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                                        let _1454: usize;
                                                                                                                        scope 290 {
                                                                                                                            debug residual => _1451;
                                                                                                                            scope 291 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                        scope 292 {
                                                                                                                            debug val => _1454;
                                                                                                                            scope 293 {
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 285 {
                                                                                                                    debug residual => _1435;
                                                                                                                    scope 286 {
                                                                                                                    }
                                                                                                                }
                                                                                                                scope 287 {
                                                                                                                    debug val => _1438;
                                                                                                                    scope 288 {
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                            scope 280 {
                                                                                                                debug residual => _1426;
                                                                                                                scope 281 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 282 {
                                                                                                                debug val => _1429;
                                                                                                                scope 283 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                        scope 275 {
                                                                                                            debug residual => _1414;
                                                                                                            scope 276 {
                                                                                                            }
                                                                                                        }
                                                                                                        scope 277 {
                                                                                                            debug val => _1417;
                                                                                                            scope 278 {
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 294 {
                                                                                                        debug residual => _1456;
                                                                                                        scope 295 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 296 {
                                                                                                        debug val => _1459;
                                                                                                        scope 297 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 298 {
                                                                                                        debug cpi_accounts => _1460;
                                                                                                        let _1463: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                                        scope 299 {
                                                                                                            debug cpi_context => _1463;
                                                                                                            let _1506: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                            let _1509: ();
                                                                                                            scope 300 {
                                                                                                                debug residual => _1506;
                                                                                                                scope 301 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 302 {
                                                                                                                debug val => _1509;
                                                                                                                scope 303 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 244 {
                                                                                            debug mint_info => _1287;
                                                                                            let _1293: std::cell::Ref<'_, &mut [u8]>;
                                                                                            let _1298: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                            let _1301: std::cell::Ref<'_, &mut [u8]>;
                                                                                            scope 245 {
                                                                                                debug mint_data => _1293;
                                                                                                let _1302: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                let _1310: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _1313: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                scope 250 {
                                                                                                    debug mint_state => _1302;
                                                                                                    let _1314: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    let _1319: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                    let _1322: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    scope 255 {
                                                                                                        debug mint_extensions => _1314;
                                                                                                        let _1323: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                        scope 260 {
                                                                                                            debug required_extensions => _1323;
                                                                                                            let _1335: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _1338: usize;
                                                                                                            scope 261 {
                                                                                                                debug residual => _1335;
                                                                                                                scope 262 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 263 {
                                                                                                                debug val => _1338;
                                                                                                                scope 264 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 256 {
                                                                                                        debug residual => _1319;
                                                                                                        scope 257 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 258 {
                                                                                                        debug val => _1322;
                                                                                                        scope 259 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 251 {
                                                                                                    debug residual => _1310;
                                                                                                    scope 252 {
                                                                                                    }
                                                                                                }
                                                                                                scope 253 {
                                                                                                    debug val => _1313;
                                                                                                    scope 254 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 246 {
                                                                                                debug residual => _1298;
                                                                                                scope 247 {
                                                                                                }
                                                                                            }
                                                                                            scope 248 {
                                                                                                debug val => _1301;
                                                                                                scope 249 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 304 {
                                                                                            debug cpi_program => _1510;
                                                                                            let _1512: anchor_spl::token_2022::InitializeAccount3<'_>;
                                                                                            scope 305 {
                                                                                                debug accounts => _1512;
                                                                                                let _1519: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
                                                                                                scope 306 {
                                                                                                    debug cpi_ctx => _1519;
                                                                                                    let _1527: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                    let _1530: ();
                                                                                                    scope 307 {
                                                                                                        debug residual => _1527;
                                                                                                        scope 308 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 309 {
                                                                                                        debug val => _1530;
                                                                                                        scope 310 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 311 {
                                                                                        debug pa => _1531;
                                                                                    }
                                                                                    scope 312 {
                                                                                        debug val => _1537;
                                                                                    }
                                                                                    scope 313 {
                                                                                        debug e => _1538;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 206 {
                                                                            debug residual => _1085;
                                                                            scope 207 {
                                                                            }
                                                                        }
                                                                        scope 208 {
                                                                            debug val => _1088;
                                                                            scope 209 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 99 {
                                                                        debug owner_program => _565;
                                                                        let _577: u64;
                                                                        let _971: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                                        let _977: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
                                                                        let _978: anchor_lang::error::Error;
                                                                        let mut _1708: &&anchor_lang::prelude::Pubkey;
                                                                        scope 100 {
                                                                            debug __current_lamports => _577;
                                                                            let _582: usize;
                                                                            let _583: anchor_lang::prelude::AccountInfo<'_>;
                                                                            let _722: u64;
                                                                            let _727: anchor_lang::prelude::AccountInfo<'_>;
                                                                            let _950: anchor_lang::prelude::AccountInfo<'_>;
                                                                            let mut _1706: &anchor_lang::error::ErrorCode;
                                                                            let mut _1707: &anchor_lang::error::ErrorCode;
                                                                            scope 101 {
                                                                                debug space => _582;
                                                                                let _635: u64;
                                                                                scope 123 {
                                                                                    debug lamports => _635;
                                                                                    let _638: anchor_lang::system_program::CreateAccount<'_>;
                                                                                    scope 124 {
                                                                                        debug cpi_accounts => _638;
                                                                                        let _643: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                        scope 125 {
                                                                                            debug cpi_context => _643;
                                                                                            let _689: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _692: ();
                                                                                            scope 126 {
                                                                                                debug residual => _689;
                                                                                                scope 127 {
                                                                                                }
                                                                                            }
                                                                                            scope 128 {
                                                                                                debug val => _692;
                                                                                                scope 129 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 102 {
                                                                                debug mint_info => _583;
                                                                                let _589: std::cell::Ref<'_, &mut [u8]>;
                                                                                let _594: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                let _597: std::cell::Ref<'_, &mut [u8]>;
                                                                                scope 103 {
                                                                                    debug mint_data => _589;
                                                                                    let _598: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    let _606: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _609: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    scope 108 {
                                                                                        debug mint_state => _598;
                                                                                        let _610: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        let _615: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                        let _618: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        scope 113 {
                                                                                            debug mint_extensions => _610;
                                                                                            let _619: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                            scope 118 {
                                                                                                debug required_extensions => _619;
                                                                                                let _631: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _634: usize;
                                                                                                scope 119 {
                                                                                                    debug residual => _631;
                                                                                                    scope 120 {
                                                                                                    }
                                                                                                }
                                                                                                scope 121 {
                                                                                                    debug val => _634;
                                                                                                    scope 122 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 114 {
                                                                                            debug residual => _615;
                                                                                            scope 115 {
                                                                                            }
                                                                                        }
                                                                                        scope 116 {
                                                                                            debug val => _618;
                                                                                            scope 117 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 109 {
                                                                                        debug residual => _606;
                                                                                        scope 110 {
                                                                                        }
                                                                                    }
                                                                                    scope 111 {
                                                                                        debug val => _609;
                                                                                        scope 112 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 104 {
                                                                                    debug residual => _594;
                                                                                    scope 105 {
                                                                                    }
                                                                                }
                                                                                scope 106 {
                                                                                    debug val => _597;
                                                                                    scope 107 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 130 {
                                                                                debug required_lamports => _722;
                                                                                let _783: anchor_lang::system_program::Transfer<'_>;
                                                                                let _802: anchor_lang::system_program::Allocate<'_>;
                                                                                scope 152 {
                                                                                    debug cpi_accounts => _783;
                                                                                    let _788: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                    scope 153 {
                                                                                        debug cpi_context => _788;
                                                                                        let _798: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _801: ();
                                                                                        scope 154 {
                                                                                            debug residual => _798;
                                                                                            scope 155 {
                                                                                            }
                                                                                        }
                                                                                        scope 156 {
                                                                                            debug val => _801;
                                                                                            scope 157 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 158 {
                                                                                    debug cpi_accounts => _802;
                                                                                    let _805: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                    scope 159 {
                                                                                        debug cpi_context => _805;
                                                                                        let _843: anchor_lang::prelude::AccountInfo<'_>;
                                                                                        let _896: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _899: ();
                                                                                        let _900: anchor_lang::system_program::Assign<'_>;
                                                                                        scope 160 {
                                                                                            debug mint_info => _843;
                                                                                            let _849: std::cell::Ref<'_, &mut [u8]>;
                                                                                            let _854: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                            let _857: std::cell::Ref<'_, &mut [u8]>;
                                                                                            scope 161 {
                                                                                                debug mint_data => _849;
                                                                                                let _858: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                let _866: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _869: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                                scope 166 {
                                                                                                    debug mint_state => _858;
                                                                                                    let _870: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    let _875: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                    let _878: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                    scope 171 {
                                                                                                        debug mint_extensions => _870;
                                                                                                        let _879: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                                        scope 176 {
                                                                                                            debug required_extensions => _879;
                                                                                                            let _891: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                            let _894: usize;
                                                                                                            scope 177 {
                                                                                                                debug residual => _891;
                                                                                                                scope 178 {
                                                                                                                }
                                                                                                            }
                                                                                                            scope 179 {
                                                                                                                debug val => _894;
                                                                                                                scope 180 {
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    scope 172 {
                                                                                                        debug residual => _875;
                                                                                                        scope 173 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 174 {
                                                                                                        debug val => _878;
                                                                                                        scope 175 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 167 {
                                                                                                    debug residual => _866;
                                                                                                    scope 168 {
                                                                                                    }
                                                                                                }
                                                                                                scope 169 {
                                                                                                    debug val => _869;
                                                                                                    scope 170 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            scope 162 {
                                                                                                debug residual => _854;
                                                                                                scope 163 {
                                                                                                }
                                                                                            }
                                                                                            scope 164 {
                                                                                                debug val => _857;
                                                                                                scope 165 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 181 {
                                                                                            debug residual => _896;
                                                                                            scope 182 {
                                                                                            }
                                                                                        }
                                                                                        scope 183 {
                                                                                            debug val => _899;
                                                                                            scope 184 {
                                                                                            }
                                                                                        }
                                                                                        scope 185 {
                                                                                            debug cpi_accounts => _900;
                                                                                            let _903: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                            scope 186 {
                                                                                                debug cpi_context => _903;
                                                                                                let _946: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                                let _949: ();
                                                                                                scope 187 {
                                                                                                    debug residual => _946;
                                                                                                    scope 188 {
                                                                                                    }
                                                                                                }
                                                                                                scope 189 {
                                                                                                    debug val => _949;
                                                                                                    scope 190 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 131 {
                                                                                debug mint_info => _727;
                                                                                let _733: std::cell::Ref<'_, &mut [u8]>;
                                                                                let _738: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                let _741: std::cell::Ref<'_, &mut [u8]>;
                                                                                scope 132 {
                                                                                    debug mint_data => _733;
                                                                                    let _742: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    let _750: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _753: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>;
                                                                                    scope 137 {
                                                                                        debug mint_state => _742;
                                                                                        let _754: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        let _759: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                        let _762: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                        scope 142 {
                                                                                            debug mint_extensions => _754;
                                                                                            let _763: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>;
                                                                                            scope 147 {
                                                                                                debug required_extensions => _763;
                                                                                                let _775: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                                let _778: usize;
                                                                                                scope 148 {
                                                                                                    debug residual => _775;
                                                                                                    scope 149 {
                                                                                                    }
                                                                                                }
                                                                                                scope 150 {
                                                                                                    debug val => _778;
                                                                                                    scope 151 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 143 {
                                                                                            debug residual => _759;
                                                                                            scope 144 {
                                                                                            }
                                                                                        }
                                                                                        scope 145 {
                                                                                            debug val => _762;
                                                                                            scope 146 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 138 {
                                                                                        debug residual => _750;
                                                                                        scope 139 {
                                                                                        }
                                                                                    }
                                                                                    scope 140 {
                                                                                        debug val => _753;
                                                                                        scope 141 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 133 {
                                                                                    debug residual => _738;
                                                                                    scope 134 {
                                                                                    }
                                                                                }
                                                                                scope 135 {
                                                                                    debug val => _741;
                                                                                    scope 136 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 191 {
                                                                                debug cpi_program => _950;
                                                                                let _952: anchor_spl::token_2022::InitializeAccount3<'_>;
                                                                                scope 192 {
                                                                                    debug accounts => _952;
                                                                                    let _959: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>;
                                                                                    scope 193 {
                                                                                        debug cpi_ctx => _959;
                                                                                        let _967: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _970: ();
                                                                                        scope 194 {
                                                                                            debug residual => _967;
                                                                                            scope 195 {
                                                                                            }
                                                                                        }
                                                                                        scope 196 {
                                                                                            debug val => _970;
                                                                                            scope 197 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 198 {
                                                                            debug pa => _971;
                                                                        }
                                                                        scope 199 {
                                                                            debug val => _977;
                                                                        }
                                                                        scope 200 {
                                                                            debug e => _978;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 93 {
                                                                debug residual => _525;
                                                                scope 94 {
                                                                }
                                                            }
                                                            scope 95 {
                                                                debug val => _528;
                                                                scope 96 {
                                                                }
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug actual_field => _214;
                                                            let _217: &anchor_lang::prelude::Pubkey;
                                                            scope 52 {
                                                                debug actual_owner => _217;
                                                                let _218: usize;
                                                                scope 53 {
                                                                    debug space => _218;
                                                                    let _219: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                                                                    let _226: u64;
                                                                    let _444: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                                                                    let _445: anchor_lang::error::Error;
                                                                    let mut _1711: &&anchor_lang::prelude::Pubkey;
                                                                    scope 54 {
                                                                        debug pa => _219;
                                                                        let _477: u64;
                                                                        scope 87 {
                                                                            debug required_lamports => _477;
                                                                        }
                                                                    }
                                                                    scope 55 {
                                                                        debug __current_lamports => _226;
                                                                        let _231: usize;
                                                                        let _313: u64;
                                                                        let _435: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
                                                                        let _436: anchor_lang::error::Error;
                                                                        let mut _1709: &anchor_lang::error::ErrorCode;
                                                                        let mut _1710: &anchor_lang::error::ErrorCode;
                                                                        scope 56 {
                                                                            debug space => _231;
                                                                            let _232: u64;
                                                                            scope 57 {
                                                                                debug lamports => _232;
                                                                                let _235: anchor_lang::system_program::CreateAccount<'_>;
                                                                                scope 58 {
                                                                                    debug cpi_accounts => _235;
                                                                                    let _240: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                    scope 59 {
                                                                                        debug cpi_context => _240;
                                                                                        let _280: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _283: ();
                                                                                        scope 60 {
                                                                                            debug residual => _280;
                                                                                            scope 61 {
                                                                                            }
                                                                                        }
                                                                                        scope 62 {
                                                                                            debug val => _283;
                                                                                            scope 63 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 64 {
                                                                            debug required_lamports => _313;
                                                                            let _322: anchor_lang::system_program::Transfer<'_>;
                                                                            let _341: anchor_lang::system_program::Allocate<'_>;
                                                                            scope 65 {
                                                                                debug cpi_accounts => _322;
                                                                                let _327: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                                scope 66 {
                                                                                    debug cpi_context => _327;
                                                                                    let _337: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _340: ();
                                                                                    scope 67 {
                                                                                        debug residual => _337;
                                                                                        scope 68 {
                                                                                        }
                                                                                    }
                                                                                    scope 69 {
                                                                                        debug val => _340;
                                                                                        scope 70 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 71 {
                                                                                debug cpi_accounts => _341;
                                                                                let _344: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                                scope 72 {
                                                                                    debug cpi_context => _344;
                                                                                    let _382: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _385: ();
                                                                                    let _386: anchor_lang::system_program::Assign<'_>;
                                                                                    scope 73 {
                                                                                        debug residual => _382;
                                                                                        scope 74 {
                                                                                        }
                                                                                    }
                                                                                    scope 75 {
                                                                                        debug val => _385;
                                                                                        scope 76 {
                                                                                        }
                                                                                    }
                                                                                    scope 77 {
                                                                                        debug cpi_accounts => _386;
                                                                                        let _389: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                        scope 78 {
                                                                                            debug cpi_context => _389;
                                                                                            let _426: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                            let _429: ();
                                                                                            scope 79 {
                                                                                                debug residual => _426;
                                                                                                scope 80 {
                                                                                                }
                                                                                            }
                                                                                            scope 81 {
                                                                                                debug val => _429;
                                                                                                scope 82 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 83 {
                                                                            debug val => _435;
                                                                        }
                                                                        scope 84 {
                                                                            debug e => _436;
                                                                        }
                                                                    }
                                                                    scope 85 {
                                                                        debug val => _444;
                                                                    }
                                                                    scope 86 {
                                                                        debug e => _445;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 45 {
                                                    debug residual => _175;
                                                    scope 46 {
                                                    }
                                                }
                                                scope 47 {
                                                    debug val => _178;
                                                    scope 48 {
                                                    }
                                                }
                                            }
                                            scope 40 {
                                                debug residual => _167;
                                                scope 41 {
                                                }
                                            }
                                            scope 42 {
                                                debug val => _170;
                                                scope 43 {
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _152;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _155;
                                            scope 38 {
                                            }
                                        }
                                    }
                                    scope 30 {
                                        debug residual => _137;
                                        scope 31 {
                                        }
                                    }
                                    scope 32 {
                                        debug val => _140;
                                        scope 33 {
                                        }
                                    }
                                }
                                scope 25 {
                                    debug residual => _122;
                                    scope 26 {
                                    }
                                }
                                scope 27 {
                                    debug val => _125;
                                    scope 28 {
                                    }
                                }
                            }
                            scope 20 {
                                debug residual => _107;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _110;
                                scope 23 {
                                }
                            }
                        }
                        scope 15 {
                            debug residual => _92;
                            scope 16 {
                            }
                        }
                        scope 17 {
                            debug val => _95;
                            scope 18 {
                            }
                        }
                    }
                    scope 10 {
                        debug residual => _77;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _80;
                        scope 13 {
                        }
                    }
                }
            }
        }
        scope 3 {
            debug residual => _32;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _35;
            scope 6 {
            }
        }
    }

    bb0: {
        _1794 = const false;
        _1793 = const false;
        _1792 = const false;
        _1791 = const false;
        _1790 = const false;
        _1789 = const false;
        _1788 = const false;
        _1787 = const false;
        _1786 = const false;
        _1785 = const false;
        _1783 = const false;
        _1781 = const false;
        _1779 = const false;
        _1780 = const false;
        _1778 = const false;
        _1776 = const false;
        _1775 = const false;
        _1773 = const false;
        _1774 = const false;
        _1771 = const false;
        _1769 = const false;
        _1770 = const false;
        _1768 = const false;
        _1765 = const false;
        _1764 = const false;
        _1763 = const false;
        _1761 = const false;
        _1759 = const false;
        _1757 = const false;
        _1758 = const false;
        _1756 = const false;
        _1754 = const false;
        _1753 = const false;
        _1751 = const false;
        _1752 = const false;
        _1749 = const false;
        _1747 = const false;
        _1748 = const false;
        _1746 = const false;
        _1743 = const false;
        _1742 = const false;
        _1741 = const false;
        _1784 = const false;
        _1782 = const false;
        _1777 = const false;
        _1772 = const false;
        _1767 = const false;
        _1766 = const false;
        _1762 = const false;
        _1760 = const false;
        _1755 = const false;
        _1750 = const false;
        _1745 = const false;
        _1744 = const false;
        _1740 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _1712 = deref_copy (*_2);
        _8 = &(*_1712);
        _7 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _7) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = AccountNotEnoughKeys;
        _10 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb917;
    }

    bb4: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_12);
        StorageLive(_13);
        _13 = const 0_usize;
        _1713 = deref_copy (*_2);
        _14 = Len((*_1713));
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb5, unwind continue];
    }

    bb5: {
        _1714 = deref_copy (*_2);
        _12 = &(*_1714)[_13];
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _1715 = deref_copy (*_2);
        _19 = &(*_1715);
        StorageLive(_20);
        _20 = RangeFrom::<usize> { start: const 1_usize };
        _18 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _19, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = &(*_18);
        _16 = &(*_17);
        (*_2) = move _16;
        StorageDead(_16);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
        _23 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18}>(move _24, move _30) -> [return: bb8, unwind: bb988];
    }

    bb8: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb9, unwind: bb988];
    }

    bb9: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _21 = move _35;
        StorageDead(_35);
        _1795 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _1716 = deref_copy (*_2);
        _38 = &(*_1716);
        _37 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _38) -> [return: bb14, unwind: bb987];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb1128];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _2023 = discriminant(_22);
        StorageDead(_22);
        goto -> bb916;
    }

    bb14: {
        switchInt(move _37) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_38);
        StorageLive(_40);
        StorageLive(_41);
        _41 = AccountNotEnoughKeys;
        _40 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _41) -> [return: bb16, unwind: bb987];
    }

    bb16: {
        StorageDead(_41);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _40);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb915;
    }

    bb17: {
        StorageDead(_38);
        _36 = const ();
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const 0_usize;
        _1717 = deref_copy (*_2);
        _44 = Len((*_1717));
        _45 = Lt(_43, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> [success: bb18, unwind: bb987];
    }

    bb18: {
        _1718 = deref_copy (*_2);
        _42 = &(*_1718)[_43];
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _1719 = deref_copy (*_2);
        _49 = &(*_1719);
        StorageLive(_50);
        _50 = RangeFrom::<usize> { start: const 1_usize };
        _48 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _49, move _50) -> [return: bb19, unwind: bb987];
    }

    bb19: {
        StorageDead(_50);
        StorageDead(_49);
        _47 = &(*_48);
        _46 = &(*_47);
        (*_2) = move _46;
        StorageDead(_46);
        StorageDead(_48);
        StorageDead(_47);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _1720 = deref_copy (*_2);
        _53 = &(*_1720);
        _52 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _53) -> [return: bb20, unwind: bb987];
    }

    bb20: {
        switchInt(move _52) -> [0: bb23, otherwise: bb21];
    }

    bb21: {
        StorageDead(_53);
        StorageLive(_55);
        StorageLive(_56);
        _56 = AccountNotEnoughKeys;
        _55 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _56) -> [return: bb22, unwind: bb987];
    }

    bb22: {
        StorageDead(_56);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _55);
        StorageDead(_55);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb914;
    }

    bb23: {
        StorageDead(_53);
        _51 = const ();
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_57);
        StorageLive(_58);
        _58 = const 0_usize;
        _1721 = deref_copy (*_2);
        _59 = Len((*_1721));
        _60 = Lt(_58, _59);
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> [success: bb24, unwind: bb987];
    }

    bb24: {
        _1722 = deref_copy (*_2);
        _57 = &(*_1722)[_58];
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _1723 = deref_copy (*_2);
        _64 = &(*_1723);
        StorageLive(_65);
        _65 = RangeFrom::<usize> { start: const 1_usize };
        _63 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _64, move _65) -> [return: bb25, unwind: bb987];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_64);
        _62 = &(*_63);
        _61 = &(*_62);
        (*_2) = move _61;
        StorageDead(_61);
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb987];
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18}>(move _69, move _75) -> [return: bb27, unwind: bb987];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb987];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb11];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _66 = move _80;
        StorageDead(_80);
        _1797 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb986];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb1127];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _2021 = discriminant(_67);
        StorageDead(_67);
        goto -> bb913;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
        _83 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18}>(move _84, move _90) -> [return: bb33, unwind: bb986];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb986];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb11];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _81 = move _95;
        StorageDead(_95);
        _1799 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_3);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb985];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb1126];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _2019 = discriminant(_82);
        StorageDead(_82);
        goto -> bb912;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
        _98 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18}>(move _99, move _105) -> [return: bb39, unwind: bb985];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb985];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb11];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _96 = move _110;
        StorageDead(_110);
        _1801 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_3);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb984];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb1125];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _2017 = discriminant(_97);
        StorageDead(_97);
        goto -> bb911;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
        _113 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18}>(move _114, move _120) -> [return: bb45, unwind: bb984];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb984];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb11];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _111 = move _125;
        StorageDead(_125);
        _1803 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_3);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb984];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb1124];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _2015 = discriminant(_112);
        StorageDead(_112);
        goto -> bb910;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
        _128 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18}>(move _129, move _135) -> [return: bb51, unwind: bb984];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb984];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb11];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _126 = move _140;
        StorageDead(_140);
        _1805 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_3);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb984];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb1123];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _2013 = discriminant(_127);
        StorageDead(_127);
        goto -> bb909;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
        _143 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18}>(move _144, move _150) -> [return: bb57, unwind: bb984];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb984];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb11];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _141 = move _155;
        StorageDead(_155);
        _1807 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_3);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, InitializeSpotMarketBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb984];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb1122];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _2011 = discriminant(_142);
        StorageDead(_142);
        goto -> bb908;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18};
        _158 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/admin.rs:4938:10: 4938:18}>(move _159, move _165) -> [return: bb63, unwind: bb984];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb984];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb11];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _156 = move _170;
        StorageDead(_170);
        _1809 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb68, unwind: bb984];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb1121];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _2009 = discriminant(_157);
        StorageDead(_157);
        goto -> bb907;
    }

    bb68: {
        _172 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _173) -> [return: bb69, unwind: bb984];
    }

    bb69: {
        StorageDead(_173);
        _174 = discriminant(_172);
        switchInt(move _174) -> [0: bb70, 1: bb71, otherwise: bb11];
    }

    bb70: {
        StorageLive(_178);
        _178 = ((_172 as Continue).0: anchor_lang::prelude::Rent);
        _171 = _178;
        StorageDead(_178);
        _1811 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = const b"spot_market";
        _187 = &(*_188);
        _186 = move _187 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_187);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _2081 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _195 = &(*_2081);
        _194 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _195) -> [return: bb73, unwind: bb984];
    }

    bb71: {
        StorageLive(_175);
        _175 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_177);
        _177 = move _175;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _177) -> [return: bb72, unwind: bb1120];
    }

    bb72: {
        StorageDead(_177);
        StorageDead(_175);
        _2007 = discriminant(_172);
        StorageDead(_172);
        goto -> bb906;
    }

    bb73: {
        StorageDead(_195);
        _193 = ((*_194).14: u16);
        _192 = core::num::<impl u16>::to_le_bytes(move _193) -> [return: bb74, unwind: bb984];
    }

    bb74: {
        _191 = &_192;
        StorageDead(_193);
        _190 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _191) -> [return: bb75, unwind: bb984];
    }

    bb75: {
        _189 = &(*_190);
        StorageDead(_191);
        _185 = [move _186, move _189];
        StorageDead(_189);
        StorageDead(_186);
        _184 = &_185;
        _183 = &(*_184);
        _182 = move _183 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_183);
        StorageLive(_196);
        _196 = &(*_1);
        _181 = anchor_lang::prelude::Pubkey::find_program_address(move _182, move _196) -> [return: bb76, unwind: bb984];
    }

    bb76: {
        StorageDead(_196);
        StorageDead(_182);
        StorageLive(_179);
        _179 = (_181.0: anchor_lang::prelude::Pubkey);
        StorageLive(_180);
        _180 = (_181.1: u8);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_181);
        StorageLive(_197);
        _197 = _180;
        ((*_4).0: u8) = move _197;
        StorageDead(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &(*_12);
        _201 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _202) -> [return: bb77, unwind: bb984];
    }

    bb77: {
        _200 = &_201;
        StorageDead(_202);
        StorageLive(_203);
        _203 = &_179;
        _199 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _200, move _203) -> [return: bb78, unwind: bb984];
    }

    bb78: {
        switchInt(move _199) -> [0: bb84, otherwise: bb79];
    }

    bb79: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = ConstraintSeeds;
        _207 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _208) -> [return: bb80, unwind: bb984];
    }

    bb80: {
        StorageDead(_208);
        _206 = anchor_lang::error::Error::with_account_name::<&str>(move _207, const "spot_market") -> [return: bb81, unwind: bb984];
    }

    bb81: {
        _1794 = const true;
        StorageDead(_207);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &(*_12);
        _210 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _211) -> [return: bb82, unwind: bb1119];
    }

    bb82: {
        StorageDead(_211);
        StorageLive(_212);
        _212 = _179;
        _209 = (move _210, move _212);
        StorageDead(_212);
        StorageDead(_210);
        _1794 = const false;
        _205 = anchor_lang::error::Error::with_pubkeys(move _206, move _209) -> [return: bb83, unwind: bb1119];
    }

    bb83: {
        StorageDead(_209);
        _1794 = const false;
        StorageDead(_206);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _205);
        StorageDead(_205);
        StorageDead(_199);
        StorageDead(_198);
        goto -> bb905;
    }

    bb84: {
        StorageDead(_203);
        StorageDead(_201);
        StorageDead(_200);
        _198 = const ();
        StorageDead(_199);
        StorageDead(_198);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &_12;
        _215 = &(*_216);
        _214 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _215) -> [return: bb85, unwind: bb984];
    }

    bb85: {
        StorageDead(_215);
        StorageDead(_216);
        StorageLive(_217);
        _217 = ((*_214).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_218);
        _218 = const _;
        StorageLive(_219);
        StorageLive(_220);
        _220 = const false;
        switchInt(move _220) -> [0: bb88, otherwise: bb86];
    }

    bb86: {
        StorageLive(_221);
        StorageLive(_222);
        _222 = &_217;
        StorageLive(_223);
        _1711 = const _;
        _223 = &(*_1711);
        _221 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _222, move _223) -> [return: bb87, unwind: bb984];
    }

    bb87: {
        switchInt(move _221) -> [0: bb168, otherwise: bb88];
    }

    bb88: {
        StorageDead(_223);
        StorageDead(_222);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &(*_12);
        _226 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _227) -> [return: bb89, unwind: bb984];
    }

    bb89: {
        StorageDead(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = _226;
        _229 = Eq(move _230, const 0_u64);
        switchInt(move _229) -> [0: bb107, otherwise: bb90];
    }

    bb90: {
        StorageDead(_230);
        StorageLive(_231);
        _231 = _218;
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_171;
        StorageLive(_234);
        _234 = _231;
        _232 = anchor_lang::prelude::Rent::minimum_balance(move _233, move _234) -> [return: bb91, unwind: bb984];
    }

    bb91: {
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_111;
        _236 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _237) -> [return: bb92, unwind: bb984];
    }

    bb92: {
        StorageDead(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = &(*_12);
        _238 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _239) -> [return: bb93, unwind: bb983];
    }

    bb93: {
        StorageDead(_239);
        _1793 = const true;
        _235 = anchor_lang::system_program::CreateAccount::<'_> { from: move _236, to: move _238 };
        StorageDead(_238);
        StorageDead(_236);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = &_141;
        _241 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _242) -> [return: bb94, unwind: bb1117];
    }

    bb94: {
        StorageDead(_242);
        StorageLive(_243);
        _1793 = const false;
        _243 = move _235;
        _240 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _241, move _243) -> [return: bb95, unwind: bb1117];
    }

    bb95: {
        StorageDead(_243);
        StorageDead(_241);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _1792 = const true;
        _248 = move _240;
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = const b"spot_market";
        _259 = &(*_260);
        _258 = move _259 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_259);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _2082 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _266 = &(*_2082);
        _265 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _266) -> [return: bb96, unwind: bb1115];
    }

    bb96: {
        StorageDead(_266);
        _264 = ((*_265).14: u16);
        _263 = core::num::<impl u16>::to_le_bytes(move _264) -> [return: bb97, unwind: bb1115];
    }

    bb97: {
        _262 = &_263;
        StorageDead(_264);
        _261 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _262) -> [return: bb98, unwind: bb1115];
    }

    bb98: {
        StorageDead(_262);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = _180;
        _271 = [move _272];
        _270 = &_271;
        StorageDead(_272);
        StorageLive(_273);
        _273 = RangeFull;
        _269 = <[u8; 1] as Index<RangeFull>>::index(move _270, move _273) -> [return: bb99, unwind: bb1115];
    }

    bb99: {
        StorageDead(_273);
        StorageDead(_270);
        _268 = &(*_269);
        _267 = &(*_268);
        _257 = [move _258, move _261, move _267];
        _256 = &_257;
        StorageDead(_267);
        StorageDead(_261);
        StorageDead(_258);
        StorageLive(_274);
        _274 = RangeFull;
        _255 = <[&[u8]; 3] as Index<RangeFull>>::index(move _256, move _274) -> [return: bb100, unwind: bb1115];
    }

    bb100: {
        StorageDead(_274);
        StorageDead(_256);
        _254 = &(*_255);
        _253 = &(*_254);
        _252 = [move _253];
        StorageDead(_253);
        _251 = &_252;
        _250 = &(*_251);
        _249 = move _250 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_250);
        _1792 = const false;
        _247 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _248, move _249) -> [return: bb101, unwind: bb1115];
    }

    bb101: {
        StorageDead(_249);
        _1792 = const false;
        StorageDead(_248);
        StorageLive(_275);
        _275 = _232;
        StorageLive(_276);
        StorageLive(_277);
        _277 = _231;
        _276 = move _277 as u64 (IntToInt);
        StorageDead(_277);
        StorageLive(_278);
        _278 = &(*_1);
        _246 = anchor_lang::system_program::create_account(move _247, move _275, move _276, move _278) -> [return: bb102, unwind: bb1117];
    }

    bb102: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_247);
        _245 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _246) -> [return: bb103, unwind: bb1117];
    }

    bb103: {
        StorageDead(_246);
        _279 = discriminant(_245);
        switchInt(move _279) -> [0: bb104, 1: bb105, otherwise: bb11];
    }

    bb104: {
        StorageLive(_283);
        _283 = ((_245 as Continue).0: ());
        _244 = _283;
        StorageDead(_283);
        _1813 = discriminant(_245);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_245);
        StorageDead(_244);
        _228 = const ();
        StorageDead(_240);
        _1793 = const false;
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb163;
    }

    bb105: {
        StorageLive(_280);
        _280 = move ((_245 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_282);
        _282 = move _280;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _282) -> [return: bb106, unwind: bb1113];
    }

    bb106: {
        StorageDead(_282);
        StorageDead(_280);
        _2005 = discriminant(_245);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_240);
        _1793 = const false;
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_231);
        goto -> bb901;
    }

    bb107: {
        StorageDead(_230);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        _288 = &_111;
        _287 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _288) -> [return: bb108, unwind: bb984];
    }

    bb108: {
        _286 = &_287;
        StorageDead(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &(*_12);
        _290 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _291) -> [return: bb109, unwind: bb984];
    }

    bb109: {
        _289 = &_290;
        StorageDead(_291);
        _285 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _286, move _289) -> [return: bb110, unwind: bb984];
    }

    bb110: {
        switchInt(move _285) -> [0: bb119, otherwise: bb111];
    }

    bb111: {
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_287);
        StorageDead(_286);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _1710 = const _;
        _297 = &(*_1710);
        _296 = anchor_lang::error::ErrorCode::name(move _297) -> [return: bb112, unwind: bb984];
    }

    bb112: {
        StorageDead(_297);
        StorageLive(_299);
        StorageLive(_300);
        _300 = TryingToInitPayerAsProgramAccount;
        _299 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _300) -> [return: bb113, unwind: bb982];
    }

    bb113: {
        StorageDead(_300);
        StorageLive(_301);
        StorageLive(_302);
        _1709 = const _;
        _302 = &(*_1709);
        _301 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _302) -> [return: bb114, unwind: bb982];
    }

    bb114: {
        StorageDead(_302);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        _306 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 4938_u32 };
        _305 = anchor_lang::error::ErrorOrigin::Source(move _306);
        StorageDead(_306);
        _304 = Option::<ErrorOrigin>::Some(move _305);
        StorageDead(_305);
        StorageLive(_307);
        _307 = Option::<ComparedValues>::None;
        _295 = anchor_lang::error::AnchorError { error_name: move _296, error_code_number: move _299, error_msg: move _301, error_origin: move _304, compared_values: move _307 };
        StorageDead(_307);
        StorageDead(_304);
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_296);
        _294 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _295) -> [return: bb115, unwind: bb984];
    }

    bb115: {
        _1791 = const true;
        StorageDead(_295);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &_111;
        _309 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _310) -> [return: bb116, unwind: bb1112];
    }

    bb116: {
        StorageDead(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &(*_12);
        _311 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _312) -> [return: bb117, unwind: bb1112];
    }

    bb117: {
        StorageDead(_312);
        _308 = (move _309, move _311);
        StorageDead(_311);
        StorageDead(_309);
        _1791 = const false;
        _293 = anchor_lang::error::Error::with_pubkeys(move _294, move _308) -> [return: bb118, unwind: bb1112];
    }

    bb118: {
        StorageDead(_308);
        _1791 = const false;
        StorageDead(_294);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _293);
        StorageDead(_293);
        StorageDead(_285);
        StorageDead(_284);
        goto -> bb901;
    }

    bb119: {
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_287);
        StorageDead(_286);
        _284 = const ();
        StorageDead(_285);
        StorageDead(_284);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = &_171;
        StorageLive(_317);
        _317 = _218;
        _315 = anchor_lang::prelude::Rent::minimum_balance(move _316, move _317) -> [return: bb120, unwind: bb984];
    }

    bb120: {
        StorageDead(_317);
        StorageDead(_316);
        _314 = <u64 as Ord>::max(move _315, const 1_u64) -> [return: bb121, unwind: bb984];
    }

    bb121: {
        StorageDead(_315);
        StorageLive(_318);
        _318 = _226;
        _313 = core::num::<impl u64>::saturating_sub(move _314, move _318) -> [return: bb122, unwind: bb984];
    }

    bb122: {
        StorageDead(_318);
        StorageDead(_314);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = _313;
        _320 = Gt(move _321, const 0_u64);
        switchInt(move _320) -> [0: bb133, otherwise: bb123];
    }

    bb123: {
        StorageDead(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &_111;
        _323 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _324) -> [return: bb124, unwind: bb984];
    }

    bb124: {
        StorageDead(_324);
        StorageLive(_325);
        StorageLive(_326);
        _326 = &(*_12);
        _325 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _326) -> [return: bb125, unwind: bb981];
    }

    bb125: {
        StorageDead(_326);
        _1790 = const true;
        _322 = anchor_lang::system_program::Transfer::<'_> { from: move _323, to: move _325 };
        StorageDead(_325);
        StorageDead(_323);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &_141;
        _328 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _329) -> [return: bb126, unwind: bb1110];
    }

    bb126: {
        StorageDead(_329);
        StorageLive(_330);
        _1790 = const false;
        _330 = move _322;
        _327 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _328, move _330) -> [return: bb127, unwind: bb1110];
    }

    bb127: {
        StorageDead(_330);
        StorageDead(_328);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = move _327;
        StorageLive(_335);
        _335 = _313;
        _333 = anchor_lang::system_program::transfer(move _334, move _335) -> [return: bb128, unwind: bb1110];
    }

    bb128: {
        StorageDead(_335);
        StorageDead(_334);
        _332 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _333) -> [return: bb129, unwind: bb1110];
    }

    bb129: {
        StorageDead(_333);
        _336 = discriminant(_332);
        switchInt(move _336) -> [0: bb130, 1: bb131, otherwise: bb11];
    }

    bb130: {
        StorageLive(_340);
        _340 = ((_332 as Continue).0: ());
        _331 = _340;
        StorageDead(_340);
        _1815 = discriminant(_332);
        StorageDead(_332);
        StorageDead(_331);
        _319 = const ();
        StorageDead(_327);
        _1790 = const false;
        StorageDead(_322);
        goto -> bb134;
    }

    bb131: {
        StorageLive(_337);
        _337 = move ((_332 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_339);
        _339 = move _337;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _339) -> [return: bb132, unwind: bb1108];
    }

    bb132: {
        StorageDead(_339);
        StorageDead(_337);
        _2003 = discriminant(_332);
        StorageDead(_332);
        StorageDead(_331);
        StorageDead(_327);
        _1790 = const false;
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_319);
        goto -> bb900;
    }

    bb133: {
        StorageDead(_321);
        _319 = const ();
        goto -> bb134;
    }

    bb134: {
        StorageDead(_320);
        StorageDead(_319);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &(*_12);
        _342 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _343) -> [return: bb135, unwind: bb984];
    }

    bb135: {
        StorageDead(_343);
        _1789 = const true;
        _341 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _342 };
        StorageDead(_342);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = &_141;
        _345 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _346) -> [return: bb136, unwind: bb1107];
    }

    bb136: {
        StorageDead(_346);
        StorageLive(_347);
        _1789 = const false;
        _347 = move _341;
        _344 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _345, move _347) -> [return: bb137, unwind: bb1107];
    }

    bb137: {
        StorageDead(_347);
        StorageDead(_345);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        _1788 = const true;
        _352 = move _344;
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = const b"spot_market";
        _363 = &(*_364);
        _362 = move _363 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_363);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _2083 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _370 = &(*_2083);
        _369 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _370) -> [return: bb138, unwind: bb1105];
    }

    bb138: {
        StorageDead(_370);
        _368 = ((*_369).14: u16);
        _367 = core::num::<impl u16>::to_le_bytes(move _368) -> [return: bb139, unwind: bb1105];
    }

    bb139: {
        _366 = &_367;
        StorageDead(_368);
        _365 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _366) -> [return: bb140, unwind: bb1105];
    }

    bb140: {
        StorageDead(_366);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = _180;
        _375 = [move _376];
        _374 = &_375;
        StorageDead(_376);
        StorageLive(_377);
        _377 = RangeFull;
        _373 = <[u8; 1] as Index<RangeFull>>::index(move _374, move _377) -> [return: bb141, unwind: bb1105];
    }

    bb141: {
        StorageDead(_377);
        StorageDead(_374);
        _372 = &(*_373);
        _371 = &(*_372);
        _361 = [move _362, move _365, move _371];
        _360 = &_361;
        StorageDead(_371);
        StorageDead(_365);
        StorageDead(_362);
        StorageLive(_378);
        _378 = RangeFull;
        _359 = <[&[u8]; 3] as Index<RangeFull>>::index(move _360, move _378) -> [return: bb142, unwind: bb1105];
    }

    bb142: {
        StorageDead(_378);
        StorageDead(_360);
        _358 = &(*_359);
        _357 = &(*_358);
        _356 = [move _357];
        StorageDead(_357);
        _355 = &_356;
        _354 = &(*_355);
        _353 = move _354 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_354);
        _1788 = const false;
        _351 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _352, move _353) -> [return: bb143, unwind: bb1105];
    }

    bb143: {
        StorageDead(_353);
        _1788 = const false;
        StorageDead(_352);
        StorageLive(_379);
        StorageLive(_380);
        _380 = _218;
        _379 = move _380 as u64 (IntToInt);
        StorageDead(_380);
        _350 = anchor_lang::system_program::allocate(move _351, move _379) -> [return: bb144, unwind: bb1107];
    }

    bb144: {
        StorageDead(_379);
        StorageDead(_351);
        _349 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _350) -> [return: bb145, unwind: bb1107];
    }

    bb145: {
        StorageDead(_350);
        _381 = discriminant(_349);
        switchInt(move _381) -> [0: bb146, 1: bb147, otherwise: bb11];
    }

    bb146: {
        StorageLive(_385);
        _385 = ((_349 as Continue).0: ());
        _348 = _385;
        StorageDead(_385);
        _1817 = discriminant(_349);
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_364);
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_349);
        StorageDead(_348);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        _388 = &(*_12);
        _387 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _388) -> [return: bb149, unwind: bb1107];
    }

    bb147: {
        StorageLive(_382);
        _382 = move ((_349 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_384);
        _384 = move _382;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _384) -> [return: bb148, unwind: bb1103];
    }

    bb148: {
        StorageDead(_384);
        StorageDead(_382);
        _2001 = discriminant(_349);
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_369);
        StorageDead(_367);
        StorageDead(_364);
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_356);
        StorageDead(_355);
        StorageDead(_349);
        StorageDead(_348);
        goto -> bb899;
    }

    bb149: {
        StorageDead(_388);
        _1787 = const true;
        _386 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _387 };
        StorageDead(_387);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &_141;
        _390 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _391) -> [return: bb150, unwind: bb1102];
    }

    bb150: {
        StorageDead(_391);
        StorageLive(_392);
        _1787 = const false;
        _392 = move _386;
        _389 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _390, move _392) -> [return: bb151, unwind: bb1102];
    }

    bb151: {
        StorageDead(_392);
        StorageDead(_390);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        _1786 = const true;
        _397 = move _389;
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = const b"spot_market";
        _408 = &(*_409);
        _407 = move _408 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_408);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _2084 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _415 = &(*_2084);
        _414 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _415) -> [return: bb152, unwind: bb1100];
    }

    bb152: {
        StorageDead(_415);
        _413 = ((*_414).14: u16);
        _412 = core::num::<impl u16>::to_le_bytes(move _413) -> [return: bb153, unwind: bb1100];
    }

    bb153: {
        _411 = &_412;
        StorageDead(_413);
        _410 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _411) -> [return: bb154, unwind: bb1100];
    }

    bb154: {
        StorageDead(_411);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = _180;
        _420 = [move _421];
        _419 = &_420;
        StorageDead(_421);
        StorageLive(_422);
        _422 = RangeFull;
        _418 = <[u8; 1] as Index<RangeFull>>::index(move _419, move _422) -> [return: bb155, unwind: bb1100];
    }

    bb155: {
        StorageDead(_422);
        StorageDead(_419);
        _417 = &(*_418);
        _416 = &(*_417);
        _406 = [move _407, move _410, move _416];
        _405 = &_406;
        StorageDead(_416);
        StorageDead(_410);
        StorageDead(_407);
        StorageLive(_423);
        _423 = RangeFull;
        _404 = <[&[u8]; 3] as Index<RangeFull>>::index(move _405, move _423) -> [return: bb156, unwind: bb1100];
    }

    bb156: {
        StorageDead(_423);
        StorageDead(_405);
        _403 = &(*_404);
        _402 = &(*_403);
        _401 = [move _402];
        StorageDead(_402);
        _400 = &_401;
        _399 = &(*_400);
        _398 = move _399 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_399);
        _1786 = const false;
        _396 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _397, move _398) -> [return: bb157, unwind: bb1100];
    }

    bb157: {
        StorageDead(_398);
        _1786 = const false;
        StorageDead(_397);
        StorageLive(_424);
        _424 = &(*_1);
        _395 = anchor_lang::system_program::assign(move _396, move _424) -> [return: bb158, unwind: bb1102];
    }

    bb158: {
        StorageDead(_424);
        StorageDead(_396);
        _394 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _395) -> [return: bb159, unwind: bb1102];
    }

    bb159: {
        StorageDead(_395);
        _425 = discriminant(_394);
        switchInt(move _425) -> [0: bb160, 1: bb161, otherwise: bb11];
    }

    bb160: {
        StorageLive(_429);
        _429 = ((_394 as Continue).0: ());
        _393 = _429;
        StorageDead(_429);
        _1819 = discriminant(_394);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_394);
        StorageDead(_393);
        _228 = const ();
        StorageDead(_389);
        _1787 = const false;
        StorageDead(_386);
        StorageDead(_344);
        _1789 = const false;
        StorageDead(_341);
        StorageDead(_313);
        goto -> bb163;
    }

    bb161: {
        StorageLive(_426);
        _426 = move ((_394 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_428);
        _428 = move _426;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _428) -> [return: bb162, unwind: bb1098];
    }

    bb162: {
        StorageDead(_428);
        StorageDead(_426);
        _1999 = discriminant(_394);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_417);
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_409);
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_400);
        StorageDead(_394);
        StorageDead(_393);
        StorageDead(_389);
        _1787 = const false;
        StorageDead(_386);
        goto -> bb899;
    }

    bb163: {
        StorageDead(_229);
        StorageDead(_228);
        StorageLive(_430);
        StorageLive(_431);
        _431 = &(*_1);
        StorageLive(_432);
        StorageLive(_433);
        _433 = &_12;
        _1724 = deref_copy (*_433);
        _432 = &(*_1724);
        _430 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::try_from_unchecked(move _431, move _432) -> [return: bb164, unwind: bb984];
    }

    bb164: {
        StorageDead(_432);
        StorageDead(_431);
        _434 = discriminant(_430);
        switchInt(move _434) -> [0: bb166, 1: bb165, otherwise: bb11];
    }

    bb165: {
        StorageLive(_436);
        _436 = move ((_430 as Err).0: anchor_lang::error::Error);
        StorageLive(_438);
        StorageLive(_439);
        _439 = move _436;
        _438 = anchor_lang::error::Error::with_account_name::<&str>(move _439, const "spot_market") -> [return: bb167, unwind: bb1097];
    }

    bb166: {
        StorageLive(_435);
        _435 = move ((_430 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _219 = move _435;
        StorageDead(_435);
        StorageDead(_226);
        _1821 = discriminant(_430);
        StorageDead(_433);
        StorageDead(_430);
        goto -> bb173;
    }

    bb167: {
        StorageDead(_439);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _438);
        StorageDead(_438);
        StorageDead(_436);
        StorageDead(_226);
        _1997 = discriminant(_430);
        StorageDead(_433);
        StorageDead(_430);
        goto -> bb902;
    }

    bb168: {
        StorageDead(_223);
        StorageDead(_222);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = &_12;
        _1725 = deref_copy (*_442);
        _441 = &(*_1725);
        _440 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::try_from(move _441) -> [return: bb169, unwind: bb984];
    }

    bb169: {
        StorageDead(_441);
        _443 = discriminant(_440);
        switchInt(move _443) -> [0: bb171, 1: bb170, otherwise: bb11];
    }

    bb170: {
        StorageLive(_445);
        _445 = move ((_440 as Err).0: anchor_lang::error::Error);
        StorageLive(_447);
        StorageLive(_448);
        _448 = move _445;
        _447 = anchor_lang::error::Error::with_account_name::<&str>(move _448, const "spot_market") -> [return: bb172, unwind: bb1096];
    }

    bb171: {
        StorageLive(_444);
        _444 = move ((_440 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _219 = move _444;
        StorageDead(_444);
        _1823 = discriminant(_440);
        StorageDead(_442);
        StorageDead(_440);
        goto -> bb173;
    }

    bb172: {
        StorageDead(_448);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _447);
        StorageDead(_447);
        StorageDead(_445);
        _1995 = discriminant(_440);
        StorageDead(_442);
        StorageDead(_440);
        goto -> bb902;
    }

    bb173: {
        StorageDead(_221);
        StorageDead(_220);
        StorageLive(_449);
        StorageLive(_450);
        _450 = const false;
        switchInt(move _450) -> [0: bb197, otherwise: bb174];
    }

    bb174: {
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        _453 = _218;
        StorageLive(_454);
        StorageLive(_455);
        _455 = &(*_214);
        _454 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _455) -> [return: bb175, unwind: bb984];
    }

    bb175: {
        StorageDead(_455);
        _452 = Ne(move _453, move _454);
        switchInt(move _452) -> [0: bb181, otherwise: bb176];
    }

    bb176: {
        StorageDead(_454);
        StorageDead(_453);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = ConstraintSpace;
        _459 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _460) -> [return: bb177, unwind: bb984];
    }

    bb177: {
        StorageDead(_460);
        _458 = anchor_lang::error::Error::with_account_name::<&str>(move _459, const "spot_market") -> [return: bb178, unwind: bb984];
    }

    bb178: {
        _1785 = const true;
        StorageDead(_459);
        StorageLive(_461);
        StorageLive(_462);
        _462 = _218;
        StorageLive(_463);
        StorageLive(_464);
        _464 = &(*_214);
        _463 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _464) -> [return: bb179, unwind: bb1095];
    }

    bb179: {
        StorageDead(_464);
        _461 = (move _462, move _463);
        StorageDead(_463);
        StorageDead(_462);
        _1785 = const false;
        _457 = anchor_lang::error::Error::with_values::<usize, usize>(move _458, move _461) -> [return: bb180, unwind: bb1095];
    }

    bb180: {
        StorageDead(_461);
        _1785 = const false;
        StorageDead(_458);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _457);
        StorageDead(_457);
        StorageDead(_452);
        StorageDead(_451);
        goto -> bb898;
    }

    bb181: {
        StorageDead(_454);
        StorageDead(_453);
        _451 = const ();
        StorageDead(_452);
        StorageDead(_451);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = &_217;
        StorageLive(_468);
        _468 = &_1;
        _466 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _467, move _468) -> [return: bb182, unwind: bb984];
    }

    bb182: {
        switchInt(move _466) -> [0: bb187, otherwise: bb183];
    }

    bb183: {
        StorageDead(_468);
        StorageDead(_467);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _473 = ConstraintOwner;
        _472 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _473) -> [return: bb184, unwind: bb984];
    }

    bb184: {
        StorageDead(_473);
        _471 = anchor_lang::error::Error::with_account_name::<&str>(move _472, const "spot_market") -> [return: bb185, unwind: bb984];
    }

    bb185: {
        StorageDead(_472);
        StorageLive(_474);
        StorageLive(_475);
        _475 = (*_217);
        StorageLive(_476);
        _476 = (*_1);
        _474 = (move _475, move _476);
        StorageDead(_476);
        StorageDead(_475);
        _470 = anchor_lang::error::Error::with_pubkeys(move _471, move _474) -> [return: bb186, unwind: bb984];
    }

    bb186: {
        StorageDead(_474);
        StorageDead(_471);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _470);
        StorageDead(_470);
        StorageDead(_466);
        StorageDead(_465);
        goto -> bb898;
    }

    bb187: {
        StorageDead(_468);
        StorageDead(_467);
        _465 = const ();
        StorageDead(_466);
        StorageDead(_465);
        StorageLive(_477);
        StorageLive(_478);
        _478 = &_171;
        StorageLive(_479);
        _479 = _218;
        _477 = anchor_lang::prelude::Rent::minimum_balance(move _478, move _479) -> [return: bb188, unwind: bb984];
    }

    bb188: {
        StorageDead(_479);
        StorageDead(_478);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _484 = &_219;
        _483 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _484) -> [return: bb189, unwind: bb984];
    }

    bb189: {
        _482 = &_483;
        StorageDead(_484);
        _481 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _482) -> [return: bb190, unwind: bb980];
    }

    bb190: {
        StorageDead(_482);
        StorageLive(_485);
        _485 = _477;
        _480 = Lt(move _481, move _485);
        switchInt(move _480) -> [0: bb195, otherwise: bb191];
    }

    bb191: {
        StorageDead(_485);
        drop(_483) -> [return: bb192, unwind: bb984];
    }

    bb192: {
        StorageDead(_483);
        StorageDead(_481);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        _489 = ConstraintRentExempt;
        _488 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _489) -> [return: bb193, unwind: bb984];
    }

    bb193: {
        StorageDead(_489);
        _487 = anchor_lang::error::Error::with_account_name::<&str>(move _488, const "spot_market") -> [return: bb194, unwind: bb984];
    }

    bb194: {
        StorageDead(_488);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _487);
        StorageDead(_487);
        StorageDead(_480);
        StorageDead(_477);
        goto -> bb898;
    }

    bb195: {
        StorageDead(_485);
        drop(_483) -> [return: bb196, unwind: bb984];
    }

    bb196: {
        StorageDead(_483);
        StorageDead(_481);
        _449 = const ();
        StorageDead(_480);
        StorageDead(_477);
        goto -> bb198;
    }

    bb197: {
        _449 = const ();
        goto -> bb198;
    }

    bb198: {
        StorageDead(_450);
        StorageDead(_449);
        _213 = move _219;
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_214);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        _494 = &_213;
        _493 = &(*_494);
        _492 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _493) -> [return: bb199, unwind: bb984];
    }

    bb199: {
        StorageDead(_493);
        _491 = ((*_492).6: bool);
        switchInt(move _491) -> [0: bb200, otherwise: bb203];
    }

    bb200: {
        StorageDead(_494);
        StorageDead(_492);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        _498 = ConstraintMut;
        _497 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _498) -> [return: bb201, unwind: bb984];
    }

    bb201: {
        StorageDead(_498);
        _496 = anchor_lang::error::Error::with_account_name::<&str>(move _497, const "spot_market") -> [return: bb202, unwind: bb984];
    }

    bb202: {
        StorageDead(_497);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _496);
        StorageDead(_496);
        StorageDead(_491);
        StorageDead(_490);
        goto -> bb904;
    }

    bb203: {
        StorageDead(_494);
        StorageDead(_492);
        _490 = const ();
        StorageDead(_491);
        StorageDead(_490);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        _501 = &_171;
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        _505 = &_213;
        _504 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _505) -> [return: bb204, unwind: bb984];
    }

    bb204: {
        _503 = &_504;
        StorageDead(_505);
        _502 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _503) -> [return: bb205, unwind: bb979];
    }

    bb205: {
        StorageDead(_503);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &_213;
        _510 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _511) -> [return: bb206, unwind: bb979];
    }

    bb206: {
        _509 = &_510;
        StorageDead(_511);
        _508 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _509) -> [return: bb207, unwind: bb978];
    }

    bb207: {
        StorageDead(_509);
        _507 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _508) -> [return: bb208, unwind: bb978];
    }

    bb208: {
        _1784 = const true;
        StorageDead(_508);
        _512 = discriminant(_507);
        switchInt(move _512) -> [0: bb209, 1: bb210, otherwise: bb11];
    }

    bb209: {
        StorageLive(_516);
        _516 = ((_507 as Continue).0: usize);
        _506 = _516;
        StorageDead(_516);
        _500 = anchor_lang::prelude::Rent::is_exempt(move _501, move _502, move _506) -> [return: bb212, unwind: bb1093];
    }

    bb210: {
        StorageLive(_513);
        _513 = move ((_507 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_515);
        _515 = move _513;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _515) -> [return: bb211, unwind: bb1093];
    }

    bb211: {
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_506);
        StorageDead(_502);
        StorageDead(_501);
        _1993 = discriminant(_507);
        drop(_510) -> [return: bb895, unwind: bb979];
    }

    bb212: {
        switchInt(move _500) -> [0: bb214, otherwise: bb213];
    }

    bb213: {
        StorageDead(_506);
        StorageDead(_502);
        StorageDead(_501);
        _1825 = discriminant(_507);
        drop(_510) -> [return: bb219, unwind: bb979];
    }

    bb214: {
        StorageDead(_506);
        StorageDead(_502);
        StorageDead(_501);
        _1827 = discriminant(_507);
        drop(_510) -> [return: bb215, unwind: bb979];
    }

    bb215: {
        StorageDead(_510);
        _1784 = const false;
        StorageDead(_507);
        drop(_504) -> [return: bb216, unwind: bb984];
    }

    bb216: {
        StorageDead(_504);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = ConstraintRentExempt;
        _519 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _520) -> [return: bb217, unwind: bb984];
    }

    bb217: {
        StorageDead(_520);
        _518 = anchor_lang::error::Error::with_account_name::<&str>(move _519, const "spot_market") -> [return: bb218, unwind: bb984];
    }

    bb218: {
        StorageDead(_519);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _518);
        StorageDead(_518);
        goto -> bb897;
    }

    bb219: {
        StorageDead(_510);
        _1784 = const false;
        StorageDead(_507);
        drop(_504) -> [return: bb220, unwind: bb984];
    }

    bb220: {
        StorageDead(_504);
        _499 = const ();
        StorageDead(_500);
        StorageDead(_499);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        _523 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb221, unwind: bb984];
    }

    bb221: {
        _522 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _523) -> [return: bb222, unwind: bb984];
    }

    bb222: {
        StorageDead(_523);
        _524 = discriminant(_522);
        switchInt(move _524) -> [0: bb223, 1: bb224, otherwise: bb11];
    }

    bb223: {
        StorageLive(_528);
        _528 = ((_522 as Continue).0: anchor_lang::prelude::Rent);
        _521 = _528;
        StorageDead(_528);
        _1829 = discriminant(_522);
        StorageDead(_522);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        _539 = const b"spot_market_vault";
        _538 = &(*_539);
        _537 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _538) -> [return: bb226, unwind: bb984];
    }

    bb224: {
        StorageLive(_525);
        _525 = move ((_522 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_527);
        _527 = move _525;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _527) -> [return: bb225, unwind: bb1092];
    }

    bb225: {
        StorageDead(_527);
        StorageDead(_525);
        _1991 = discriminant(_522);
        StorageDead(_522);
        goto -> bb894;
    }

    bb226: {
        _536 = &(*_537);
        StorageDead(_538);
        StorageLive(_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        _2085 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _546 = &(*_2085);
        _545 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _546) -> [return: bb227, unwind: bb984];
    }

    bb227: {
        StorageDead(_546);
        _544 = ((*_545).14: u16);
        _543 = core::num::<impl u16>::to_le_bytes(move _544) -> [return: bb228, unwind: bb984];
    }

    bb228: {
        _542 = &_543;
        StorageDead(_544);
        _541 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _542) -> [return: bb229, unwind: bb984];
    }

    bb229: {
        _540 = &(*_541);
        StorageDead(_542);
        _535 = [move _536, move _540];
        StorageDead(_540);
        StorageDead(_536);
        _534 = &_535;
        _533 = &(*_534);
        _532 = move _533 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_533);
        StorageLive(_547);
        _547 = &(*_1);
        _531 = anchor_lang::prelude::Pubkey::find_program_address(move _532, move _547) -> [return: bb230, unwind: bb984];
    }

    bb230: {
        StorageDead(_547);
        StorageDead(_532);
        StorageLive(_529);
        _529 = (_531.0: anchor_lang::prelude::Pubkey);
        StorageLive(_530);
        _530 = (_531.1: u8);
        StorageDead(_545);
        StorageDead(_543);
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_537);
        StorageDead(_535);
        StorageDead(_534);
        StorageDead(_531);
        StorageLive(_548);
        _548 = _530;
        ((*_4).1: u8) = move _548;
        StorageDead(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        _553 = &(*_42);
        _552 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _553) -> [return: bb231, unwind: bb984];
    }

    bb231: {
        _551 = &_552;
        StorageDead(_553);
        StorageLive(_554);
        _554 = &_529;
        _550 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _551, move _554) -> [return: bb232, unwind: bb984];
    }

    bb232: {
        switchInt(move _550) -> [0: bb238, otherwise: bb233];
    }

    bb233: {
        StorageDead(_554);
        StorageDead(_552);
        StorageDead(_551);
        StorageLive(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        _559 = ConstraintSeeds;
        _558 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _559) -> [return: bb234, unwind: bb984];
    }

    bb234: {
        StorageDead(_559);
        _557 = anchor_lang::error::Error::with_account_name::<&str>(move _558, const "spot_market_vault") -> [return: bb235, unwind: bb984];
    }

    bb235: {
        _1783 = const true;
        StorageDead(_558);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        _562 = &(*_42);
        _561 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _562) -> [return: bb236, unwind: bb1091];
    }

    bb236: {
        StorageDead(_562);
        StorageLive(_563);
        _563 = _529;
        _560 = (move _561, move _563);
        StorageDead(_563);
        StorageDead(_561);
        _1783 = const false;
        _556 = anchor_lang::error::Error::with_pubkeys(move _557, move _560) -> [return: bb237, unwind: bb1091];
    }

    bb237: {
        StorageDead(_560);
        _1783 = const false;
        StorageDead(_557);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _556);
        StorageDead(_556);
        StorageDead(_550);
        StorageDead(_549);
        goto -> bb893;
    }

    bb238: {
        StorageDead(_554);
        StorageDead(_552);
        StorageDead(_551);
        _549 = const ();
        StorageDead(_550);
        StorageDead(_549);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        _569 = &(*_42);
        _568 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _569) -> [return: bb239, unwind: bb984];
    }

    bb239: {
        _567 = &(*_568);
        StorageDead(_569);
        _566 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _567) -> [return: bb240, unwind: bb984];
    }

    bb240: {
        StorageDead(_567);
        _565 = ((*_566).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_568);
        StorageDead(_566);
        StorageLive(_570);
        StorageLive(_571);
        _571 = const false;
        switchInt(move _571) -> [0: bb243, otherwise: bb241];
    }

    bb241: {
        StorageLive(_572);
        StorageLive(_573);
        _573 = &_565;
        StorageLive(_574);
        _1708 = const _;
        _574 = &(*_1708);
        _572 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _573, move _574) -> [return: bb242, unwind: bb984];
    }

    bb242: {
        switchInt(move _572) -> [0: bb438, otherwise: bb243];
    }

    bb243: {
        StorageDead(_574);
        StorageDead(_573);
        StorageLive(_577);
        StorageLive(_578);
        _578 = &(*_42);
        _577 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _578) -> [return: bb244, unwind: bb984];
    }

    bb244: {
        StorageDead(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        _581 = _577;
        _580 = Eq(move _581, const 0_u64);
        switchInt(move _580) -> [0: bb299, otherwise: bb245];
    }

    bb245: {
        StorageDead(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        _2086 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _584 = &(*_2086);
        _583 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _584) -> [return: bb246, unwind: bb984];
    }

    bb246: {
        StorageDead(_584);
        StorageLive(_585);
        StorageLive(_586);
        _1726 = deref_copy (_583.3: &anchor_lang::prelude::Pubkey);
        _586 = &(*_1726);
        StorageLive(_587);
        StorageLive(_588);
        _588 = <Token2022 as anchor_lang::Id>::id() -> [return: bb247, unwind: bb977];
    }

    bb247: {
        _587 = &_588;
        _585 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _586, move _587) -> [return: bb248, unwind: bb977];
    }

    bb248: {
        switchInt(move _585) -> [0: bb277, otherwise: bb249];
    }

    bb249: {
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_586);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        _592 = &_583;
        _591 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _592) -> [return: bb250, unwind: bb977];
    }

    bb250: {
        StorageDead(_592);
        _590 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _591) -> [return: bb251, unwind: bb977];
    }

    bb251: {
        StorageDead(_591);
        _593 = discriminant(_590);
        switchInt(move _593) -> [0: bb252, 1: bb253, otherwise: bb11];
    }

    bb252: {
        StorageLive(_597);
        _597 = move ((_590 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _589 = move _597;
        StorageDead(_597);
        _1831 = discriminant(_590);
        StorageDead(_590);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = &_589;
        _603 = &(*_604);
        _602 = <Ref<'_, &mut [u8]> as Deref>::deref(move _603) -> [return: bb255, unwind: bb976];
    }

    bb253: {
        StorageLive(_594);
        _594 = move ((_590 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_596);
        _596 = move _594;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _596) -> [return: bb254, unwind: bb1089];
    }

    bb254: {
        StorageDead(_596);
        StorageDead(_594);
        _1989 = discriminant(_590);
        StorageDead(_590);
        goto -> bb885;
    }

    bb255: {
        _1727 = deref_copy (*_602);
        _601 = &(*_1727);
        StorageDead(_603);
        _600 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _601) -> [return: bb256, unwind: bb976];
    }

    bb256: {
        StorageDead(_601);
        _599 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _600) -> [return: bb257, unwind: bb976];
    }

    bb257: {
        StorageDead(_600);
        _605 = discriminant(_599);
        switchInt(move _605) -> [0: bb258, 1: bb259, otherwise: bb11];
    }

    bb258: {
        StorageLive(_609);
        _609 = move ((_599 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _598 = move _609;
        StorageDead(_609);
        _1833 = discriminant(_599);
        StorageDead(_604);
        StorageDead(_602);
        StorageDead(_599);
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        StorageLive(_613);
        _613 = &_598;
        _612 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _613) -> [return: bb261, unwind: bb976];
    }

    bb259: {
        StorageLive(_606);
        _606 = move ((_599 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_608);
        _608 = move _606;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _608) -> [return: bb260, unwind: bb1088];
    }

    bb260: {
        StorageDead(_608);
        StorageDead(_606);
        _1987 = discriminant(_599);
        StorageDead(_604);
        StorageDead(_602);
        StorageDead(_599);
        goto -> bb884;
    }

    bb261: {
        StorageDead(_613);
        _611 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _612) -> [return: bb262, unwind: bb976];
    }

    bb262: {
        StorageDead(_612);
        _614 = discriminant(_611);
        switchInt(move _614) -> [0: bb263, 1: bb264, otherwise: bb11];
    }

    bb263: {
        StorageLive(_618);
        _618 = move ((_611 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _610 = move _618;
        StorageDead(_618);
        _1835 = discriminant(_611);
        StorageDead(_611);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = &_610;
        _622 = &(*_623);
        _621 = <Vec<ExtensionType> as Deref>::deref(move _622) -> [return: bb266, unwind: bb975];
    }

    bb264: {
        StorageLive(_615);
        _615 = move ((_611 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_617);
        _617 = move _615;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _617) -> [return: bb265, unwind: bb1087];
    }

    bb265: {
        StorageDead(_617);
        StorageDead(_615);
        _1985 = discriminant(_611);
        StorageDead(_611);
        StorageDead(_610);
        goto -> bb884;
    }

    bb266: {
        _620 = &(*_621);
        StorageDead(_622);
        _619 = ExtensionType::get_required_init_account_extensions(move _620) -> [return: bb267, unwind: bb975];
    }

    bb267: {
        StorageDead(_620);
        StorageDead(_623);
        StorageDead(_621);
        StorageLive(_624);
        StorageLive(_625);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        _629 = &_619;
        _628 = &(*_629);
        _627 = <Vec<ExtensionType> as Deref>::deref(move _628) -> [return: bb268, unwind: bb974];
    }

    bb268: {
        _626 = &(*_627);
        StorageDead(_628);
        _625 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _626) -> [return: bb269, unwind: bb974];
    }

    bb269: {
        StorageDead(_626);
        _624 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _625) -> [return: bb270, unwind: bb974];
    }

    bb270: {
        _1782 = const true;
        StorageDead(_625);
        _630 = discriminant(_624);
        switchInt(move _630) -> [0: bb271, 1: bb272, otherwise: bb11];
    }

    bb271: {
        StorageLive(_634);
        _634 = ((_624 as Continue).0: usize);
        _582 = _634;
        StorageDead(_634);
        drop(_619) -> [return: bb274, unwind: bb972];
    }

    bb272: {
        StorageLive(_631);
        _631 = move ((_624 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_633);
        _633 = move _631;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _633) -> [return: bb273, unwind: bb971];
    }

    bb273: {
        StorageDead(_633);
        StorageDead(_631);
        drop(_619) -> [return: bb881, unwind: bb972];
    }

    bb274: {
        StorageDead(_619);
        drop(_610) -> [return: bb275, unwind: bb973];
    }

    bb275: {
        StorageDead(_610);
        StorageDead(_598);
        drop(_589) -> [return: bb276, unwind: bb1086];
    }

    bb276: {
        StorageDead(_589);
        _1837 = discriminant(_624);
        StorageDead(_629);
        StorageDead(_627);
        _1782 = const false;
        StorageDead(_624);
        goto -> bb278;
    }

    bb277: {
        StorageDead(_588);
        StorageDead(_587);
        StorageDead(_586);
        _582 = const _;
        goto -> bb278;
    }

    bb278: {
        StorageDead(_585);
        drop(_583) -> [return: bb279, unwind: bb984];
    }

    bb279: {
        StorageDead(_583);
        StorageLive(_635);
        StorageLive(_636);
        _636 = &_521;
        StorageLive(_637);
        _637 = _582;
        _635 = anchor_lang::prelude::Rent::minimum_balance(move _636, move _637) -> [return: bb280, unwind: bb984];
    }

    bb280: {
        StorageDead(_637);
        StorageDead(_636);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        _640 = &_111;
        _639 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _640) -> [return: bb281, unwind: bb984];
    }

    bb281: {
        StorageDead(_640);
        StorageLive(_641);
        StorageLive(_642);
        _642 = &(*_42);
        _641 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _642) -> [return: bb282, unwind: bb970];
    }

    bb282: {
        StorageDead(_642);
        _1781 = const true;
        _638 = anchor_lang::system_program::CreateAccount::<'_> { from: move _639, to: move _641 };
        StorageDead(_641);
        StorageDead(_639);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        _645 = &_141;
        _644 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _645) -> [return: bb283, unwind: bb1085];
    }

    bb283: {
        StorageDead(_645);
        StorageLive(_646);
        _1781 = const false;
        _646 = move _638;
        _643 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _644, move _646) -> [return: bb284, unwind: bb1085];
    }

    bb284: {
        StorageDead(_646);
        StorageDead(_644);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        _1780 = const true;
        _651 = move _643;
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        _663 = const b"spot_market_vault";
        _662 = &(*_663);
        _661 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _662) -> [return: bb285, unwind: bb1083];
    }

    bb285: {
        StorageDead(_662);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        StorageLive(_668);
        StorageLive(_669);
        StorageLive(_670);
        _2087 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _670 = &(*_2087);
        _669 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _670) -> [return: bb286, unwind: bb1083];
    }

    bb286: {
        StorageDead(_670);
        _668 = ((*_669).14: u16);
        _667 = core::num::<impl u16>::to_le_bytes(move _668) -> [return: bb287, unwind: bb1083];
    }

    bb287: {
        _666 = &_667;
        StorageDead(_668);
        _665 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _666) -> [return: bb288, unwind: bb1083];
    }

    bb288: {
        _664 = &(*_665);
        StorageDead(_666);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        _676 = _530;
        _675 = [move _676];
        _674 = &_675;
        StorageDead(_676);
        StorageLive(_677);
        _677 = RangeFull;
        _673 = <[u8; 1] as Index<RangeFull>>::index(move _674, move _677) -> [return: bb289, unwind: bb1083];
    }

    bb289: {
        StorageDead(_677);
        StorageDead(_674);
        _672 = &(*_673);
        _671 = &(*_672);
        _660 = [move _661, move _664, move _671];
        _659 = &_660;
        StorageDead(_671);
        StorageDead(_664);
        StorageDead(_661);
        StorageLive(_678);
        _678 = RangeFull;
        _658 = <[&[u8]; 3] as Index<RangeFull>>::index(move _659, move _678) -> [return: bb290, unwind: bb1083];
    }

    bb290: {
        StorageDead(_678);
        StorageDead(_659);
        _657 = &(*_658);
        _656 = &(*_657);
        _655 = [move _656];
        StorageDead(_656);
        _654 = &_655;
        _653 = &(*_654);
        _652 = move _653 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_653);
        _1780 = const false;
        _650 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _651, move _652) -> [return: bb291, unwind: bb1083];
    }

    bb291: {
        _1779 = const true;
        StorageDead(_652);
        _1780 = const false;
        StorageDead(_651);
        StorageLive(_679);
        _679 = _635;
        StorageLive(_680);
        StorageLive(_681);
        _681 = _582;
        _680 = move _681 as u64 (IntToInt);
        StorageDead(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        _687 = &_156;
        _686 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _687) -> [return: bb292, unwind: bb1081];
    }

    bb292: {
        _685 = &(*_686);
        StorageDead(_687);
        _684 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _685) -> [return: bb293, unwind: bb1081];
    }

    bb293: {
        StorageDead(_685);
        _683 = &_684;
        _682 = &(*_683);
        _1779 = const false;
        _649 = anchor_lang::system_program::create_account(move _650, move _679, move _680, move _682) -> [return: bb294, unwind: bb1081];
    }

    bb294: {
        StorageDead(_682);
        StorageDead(_680);
        StorageDead(_679);
        _1779 = const false;
        StorageDead(_650);
        _648 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _649) -> [return: bb295, unwind: bb1085];
    }

    bb295: {
        StorageDead(_649);
        _688 = discriminant(_648);
        switchInt(move _688) -> [0: bb296, 1: bb297, otherwise: bb11];
    }

    bb296: {
        StorageLive(_692);
        _692 = ((_648 as Continue).0: ());
        _647 = _692;
        StorageDead(_692);
        _1839 = discriminant(_648);
        StorageDead(_686);
        StorageDead(_684);
        StorageDead(_683);
        StorageDead(_675);
        StorageDead(_673);
        StorageDead(_672);
        StorageDead(_669);
        StorageDead(_667);
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_660);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_655);
        StorageDead(_654);
        StorageDead(_648);
        StorageDead(_647);
        _579 = const ();
        StorageDead(_643);
        _1781 = const false;
        StorageDead(_638);
        StorageDead(_635);
        StorageDead(_582);
        goto -> bb427;
    }

    bb297: {
        StorageLive(_689);
        _689 = move ((_648 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_691);
        _691 = move _689;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _691) -> [return: bb298, unwind: bb1079];
    }

    bb298: {
        StorageDead(_691);
        StorageDead(_689);
        _1981 = discriminant(_648);
        StorageDead(_686);
        StorageDead(_684);
        StorageDead(_683);
        StorageDead(_675);
        StorageDead(_673);
        StorageDead(_672);
        StorageDead(_669);
        StorageDead(_667);
        StorageDead(_665);
        StorageDead(_663);
        StorageDead(_660);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_655);
        StorageDead(_654);
        StorageDead(_648);
        StorageDead(_647);
        StorageDead(_643);
        _1781 = const false;
        StorageDead(_638);
        StorageDead(_635);
        goto -> bb888;
    }

    bb299: {
        StorageDead(_581);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        _697 = &_111;
        _696 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _697) -> [return: bb300, unwind: bb984];
    }

    bb300: {
        _695 = &_696;
        StorageDead(_697);
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        _700 = &(*_42);
        _699 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _700) -> [return: bb301, unwind: bb984];
    }

    bb301: {
        _698 = &_699;
        StorageDead(_700);
        _694 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _695, move _698) -> [return: bb302, unwind: bb984];
    }

    bb302: {
        switchInt(move _694) -> [0: bb311, otherwise: bb303];
    }

    bb303: {
        StorageDead(_699);
        StorageDead(_698);
        StorageDead(_696);
        StorageDead(_695);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        _1707 = const _;
        _706 = &(*_1707);
        _705 = anchor_lang::error::ErrorCode::name(move _706) -> [return: bb304, unwind: bb984];
    }

    bb304: {
        StorageDead(_706);
        StorageLive(_708);
        StorageLive(_709);
        _709 = TryingToInitPayerAsProgramAccount;
        _708 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _709) -> [return: bb305, unwind: bb969];
    }

    bb305: {
        StorageDead(_709);
        StorageLive(_710);
        StorageLive(_711);
        _1706 = const _;
        _711 = &(*_1706);
        _710 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _711) -> [return: bb306, unwind: bb969];
    }

    bb306: {
        StorageDead(_711);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        _715 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 4938_u32 };
        _714 = anchor_lang::error::ErrorOrigin::Source(move _715);
        StorageDead(_715);
        _713 = Option::<ErrorOrigin>::Some(move _714);
        StorageDead(_714);
        StorageLive(_716);
        _716 = Option::<ComparedValues>::None;
        _704 = anchor_lang::error::AnchorError { error_name: move _705, error_code_number: move _708, error_msg: move _710, error_origin: move _713, compared_values: move _716 };
        StorageDead(_716);
        StorageDead(_713);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_705);
        _703 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _704) -> [return: bb307, unwind: bb984];
    }

    bb307: {
        _1778 = const true;
        StorageDead(_704);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        _719 = &_111;
        _718 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _719) -> [return: bb308, unwind: bb1078];
    }

    bb308: {
        StorageDead(_719);
        StorageLive(_720);
        StorageLive(_721);
        _721 = &(*_42);
        _720 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _721) -> [return: bb309, unwind: bb1078];
    }

    bb309: {
        StorageDead(_721);
        _717 = (move _718, move _720);
        StorageDead(_720);
        StorageDead(_718);
        _1778 = const false;
        _702 = anchor_lang::error::Error::with_pubkeys(move _703, move _717) -> [return: bb310, unwind: bb1078];
    }

    bb310: {
        StorageDead(_717);
        _1778 = const false;
        StorageDead(_703);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _702);
        StorageDead(_702);
        StorageDead(_694);
        StorageDead(_693);
        goto -> bb889;
    }

    bb311: {
        StorageDead(_699);
        StorageDead(_698);
        StorageDead(_696);
        StorageDead(_695);
        _693 = const ();
        StorageDead(_694);
        StorageDead(_693);
        StorageLive(_722);
        StorageLive(_723);
        StorageLive(_724);
        StorageLive(_725);
        _725 = &_521;
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        _2088 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _728 = &(*_2088);
        _727 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _728) -> [return: bb312, unwind: bb984];
    }

    bb312: {
        StorageDead(_728);
        StorageLive(_729);
        StorageLive(_730);
        _1728 = deref_copy (_727.3: &anchor_lang::prelude::Pubkey);
        _730 = &(*_1728);
        StorageLive(_731);
        StorageLive(_732);
        _732 = <Token2022 as anchor_lang::Id>::id() -> [return: bb313, unwind: bb968];
    }

    bb313: {
        _731 = &_732;
        _729 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _730, move _731) -> [return: bb314, unwind: bb968];
    }

    bb314: {
        switchInt(move _729) -> [0: bb343, otherwise: bb315];
    }

    bb315: {
        StorageDead(_732);
        StorageDead(_731);
        StorageDead(_730);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        _736 = &_727;
        _735 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _736) -> [return: bb316, unwind: bb968];
    }

    bb316: {
        StorageDead(_736);
        _734 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _735) -> [return: bb317, unwind: bb968];
    }

    bb317: {
        StorageDead(_735);
        _737 = discriminant(_734);
        switchInt(move _737) -> [0: bb318, 1: bb319, otherwise: bb11];
    }

    bb318: {
        StorageLive(_741);
        _741 = move ((_734 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _733 = move _741;
        StorageDead(_741);
        _1841 = discriminant(_734);
        StorageDead(_734);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        _748 = &_733;
        _747 = &(*_748);
        _746 = <Ref<'_, &mut [u8]> as Deref>::deref(move _747) -> [return: bb321, unwind: bb967];
    }

    bb319: {
        StorageLive(_738);
        _738 = move ((_734 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_740);
        _740 = move _738;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _740) -> [return: bb320, unwind: bb1076];
    }

    bb320: {
        StorageDead(_740);
        StorageDead(_738);
        _1979 = discriminant(_734);
        StorageDead(_734);
        goto -> bb877;
    }

    bb321: {
        _1729 = deref_copy (*_746);
        _745 = &(*_1729);
        StorageDead(_747);
        _744 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _745) -> [return: bb322, unwind: bb967];
    }

    bb322: {
        StorageDead(_745);
        _743 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _744) -> [return: bb323, unwind: bb967];
    }

    bb323: {
        StorageDead(_744);
        _749 = discriminant(_743);
        switchInt(move _749) -> [0: bb324, 1: bb325, otherwise: bb11];
    }

    bb324: {
        StorageLive(_753);
        _753 = move ((_743 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _742 = move _753;
        StorageDead(_753);
        _1843 = discriminant(_743);
        StorageDead(_748);
        StorageDead(_746);
        StorageDead(_743);
        StorageLive(_754);
        StorageLive(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = &_742;
        _756 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _757) -> [return: bb327, unwind: bb967];
    }

    bb325: {
        StorageLive(_750);
        _750 = move ((_743 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_752);
        _752 = move _750;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _752) -> [return: bb326, unwind: bb1075];
    }

    bb326: {
        StorageDead(_752);
        StorageDead(_750);
        _1977 = discriminant(_743);
        StorageDead(_748);
        StorageDead(_746);
        StorageDead(_743);
        goto -> bb876;
    }

    bb327: {
        StorageDead(_757);
        _755 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _756) -> [return: bb328, unwind: bb967];
    }

    bb328: {
        StorageDead(_756);
        _758 = discriminant(_755);
        switchInt(move _758) -> [0: bb329, 1: bb330, otherwise: bb11];
    }

    bb329: {
        StorageLive(_762);
        _762 = move ((_755 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _754 = move _762;
        StorageDead(_762);
        _1845 = discriminant(_755);
        StorageDead(_755);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        _767 = &_754;
        _766 = &(*_767);
        _765 = <Vec<ExtensionType> as Deref>::deref(move _766) -> [return: bb332, unwind: bb966];
    }

    bb330: {
        StorageLive(_759);
        _759 = move ((_755 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_761);
        _761 = move _759;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _761) -> [return: bb331, unwind: bb1074];
    }

    bb331: {
        StorageDead(_761);
        StorageDead(_759);
        _1975 = discriminant(_755);
        StorageDead(_755);
        StorageDead(_754);
        goto -> bb876;
    }

    bb332: {
        _764 = &(*_765);
        StorageDead(_766);
        _763 = ExtensionType::get_required_init_account_extensions(move _764) -> [return: bb333, unwind: bb966];
    }

    bb333: {
        StorageDead(_764);
        StorageDead(_767);
        StorageDead(_765);
        StorageLive(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        _773 = &_763;
        _772 = &(*_773);
        _771 = <Vec<ExtensionType> as Deref>::deref(move _772) -> [return: bb334, unwind: bb965];
    }

    bb334: {
        _770 = &(*_771);
        StorageDead(_772);
        _769 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _770) -> [return: bb335, unwind: bb965];
    }

    bb335: {
        StorageDead(_770);
        _768 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _769) -> [return: bb336, unwind: bb965];
    }

    bb336: {
        _1777 = const true;
        StorageDead(_769);
        _774 = discriminant(_768);
        switchInt(move _774) -> [0: bb337, 1: bb338, otherwise: bb11];
    }

    bb337: {
        StorageLive(_778);
        _778 = ((_768 as Continue).0: usize);
        _726 = _778;
        StorageDead(_778);
        drop(_763) -> [return: bb340, unwind: bb963];
    }

    bb338: {
        StorageLive(_775);
        _775 = move ((_768 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_777);
        _777 = move _775;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _777) -> [return: bb339, unwind: bb962];
    }

    bb339: {
        StorageDead(_777);
        StorageDead(_775);
        drop(_763) -> [return: bb873, unwind: bb963];
    }

    bb340: {
        StorageDead(_763);
        drop(_754) -> [return: bb341, unwind: bb964];
    }

    bb341: {
        StorageDead(_754);
        StorageDead(_742);
        drop(_733) -> [return: bb342, unwind: bb1073];
    }

    bb342: {
        StorageDead(_733);
        _1847 = discriminant(_768);
        StorageDead(_773);
        StorageDead(_771);
        _1777 = const false;
        StorageDead(_768);
        goto -> bb344;
    }

    bb343: {
        StorageDead(_732);
        StorageDead(_731);
        StorageDead(_730);
        _726 = const _;
        goto -> bb344;
    }

    bb344: {
        StorageDead(_729);
        drop(_727) -> [return: bb345, unwind: bb984];
    }

    bb345: {
        StorageDead(_727);
        _724 = anchor_lang::prelude::Rent::minimum_balance(move _725, move _726) -> [return: bb346, unwind: bb984];
    }

    bb346: {
        StorageDead(_726);
        StorageDead(_725);
        _723 = <u64 as Ord>::max(move _724, const 1_u64) -> [return: bb347, unwind: bb984];
    }

    bb347: {
        StorageDead(_724);
        StorageLive(_779);
        _779 = _577;
        _722 = core::num::<impl u64>::saturating_sub(move _723, move _779) -> [return: bb348, unwind: bb984];
    }

    bb348: {
        StorageDead(_779);
        StorageDead(_723);
        StorageLive(_780);
        StorageLive(_781);
        StorageLive(_782);
        _782 = _722;
        _781 = Gt(move _782, const 0_u64);
        switchInt(move _781) -> [0: bb359, otherwise: bb349];
    }

    bb349: {
        StorageDead(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        _785 = &_111;
        _784 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _785) -> [return: bb350, unwind: bb984];
    }

    bb350: {
        StorageDead(_785);
        StorageLive(_786);
        StorageLive(_787);
        _787 = &(*_42);
        _786 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _787) -> [return: bb351, unwind: bb961];
    }

    bb351: {
        StorageDead(_787);
        _1776 = const true;
        _783 = anchor_lang::system_program::Transfer::<'_> { from: move _784, to: move _786 };
        StorageDead(_786);
        StorageDead(_784);
        StorageLive(_788);
        StorageLive(_789);
        StorageLive(_790);
        _790 = &_141;
        _789 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _790) -> [return: bb352, unwind: bb1072];
    }

    bb352: {
        StorageDead(_790);
        StorageLive(_791);
        _1776 = const false;
        _791 = move _783;
        _788 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _789, move _791) -> [return: bb353, unwind: bb1072];
    }

    bb353: {
        StorageDead(_791);
        StorageDead(_789);
        StorageLive(_792);
        StorageLive(_793);
        StorageLive(_794);
        StorageLive(_795);
        _795 = move _788;
        StorageLive(_796);
        _796 = _722;
        _794 = anchor_lang::system_program::transfer(move _795, move _796) -> [return: bb354, unwind: bb1072];
    }

    bb354: {
        StorageDead(_796);
        StorageDead(_795);
        _793 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _794) -> [return: bb355, unwind: bb1072];
    }

    bb355: {
        StorageDead(_794);
        _797 = discriminant(_793);
        switchInt(move _797) -> [0: bb356, 1: bb357, otherwise: bb11];
    }

    bb356: {
        StorageLive(_801);
        _801 = ((_793 as Continue).0: ());
        _792 = _801;
        StorageDead(_801);
        _1849 = discriminant(_793);
        StorageDead(_793);
        StorageDead(_792);
        _780 = const ();
        StorageDead(_788);
        _1776 = const false;
        StorageDead(_783);
        goto -> bb360;
    }

    bb357: {
        StorageLive(_798);
        _798 = move ((_793 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_800);
        _800 = move _798;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _800) -> [return: bb358, unwind: bb1070];
    }

    bb358: {
        StorageDead(_800);
        StorageDead(_798);
        _1971 = discriminant(_793);
        StorageDead(_793);
        StorageDead(_792);
        StorageDead(_788);
        _1776 = const false;
        StorageDead(_783);
        StorageDead(_781);
        StorageDead(_780);
        goto -> bb880;
    }

    bb359: {
        StorageDead(_782);
        _780 = const ();
        goto -> bb360;
    }

    bb360: {
        StorageDead(_781);
        StorageDead(_780);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        _804 = &(*_42);
        _803 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _804) -> [return: bb361, unwind: bb984];
    }

    bb361: {
        StorageDead(_804);
        _1775 = const true;
        _802 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _803 };
        StorageDead(_803);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        _807 = &_141;
        _806 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _807) -> [return: bb362, unwind: bb1069];
    }

    bb362: {
        StorageDead(_807);
        StorageLive(_808);
        _1775 = const false;
        _808 = move _802;
        _805 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _806, move _808) -> [return: bb363, unwind: bb1069];
    }

    bb363: {
        StorageDead(_808);
        StorageDead(_806);
        StorageLive(_809);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        _1774 = const true;
        _813 = move _805;
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        _825 = const b"spot_market_vault";
        _824 = &(*_825);
        _823 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _824) -> [return: bb364, unwind: bb1067];
    }

    bb364: {
        StorageDead(_824);
        StorageLive(_826);
        StorageLive(_827);
        StorageLive(_828);
        StorageLive(_829);
        StorageLive(_830);
        StorageLive(_831);
        StorageLive(_832);
        _2089 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _832 = &(*_2089);
        _831 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _832) -> [return: bb365, unwind: bb1067];
    }

    bb365: {
        StorageDead(_832);
        _830 = ((*_831).14: u16);
        _829 = core::num::<impl u16>::to_le_bytes(move _830) -> [return: bb366, unwind: bb1067];
    }

    bb366: {
        _828 = &_829;
        StorageDead(_830);
        _827 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _828) -> [return: bb367, unwind: bb1067];
    }

    bb367: {
        _826 = &(*_827);
        StorageDead(_828);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        StorageLive(_837);
        StorageLive(_838);
        _838 = _530;
        _837 = [move _838];
        _836 = &_837;
        StorageDead(_838);
        StorageLive(_839);
        _839 = RangeFull;
        _835 = <[u8; 1] as Index<RangeFull>>::index(move _836, move _839) -> [return: bb368, unwind: bb1067];
    }

    bb368: {
        StorageDead(_839);
        StorageDead(_836);
        _834 = &(*_835);
        _833 = &(*_834);
        _822 = [move _823, move _826, move _833];
        _821 = &_822;
        StorageDead(_833);
        StorageDead(_826);
        StorageDead(_823);
        StorageLive(_840);
        _840 = RangeFull;
        _820 = <[&[u8]; 3] as Index<RangeFull>>::index(move _821, move _840) -> [return: bb369, unwind: bb1067];
    }

    bb369: {
        StorageDead(_840);
        StorageDead(_821);
        _819 = &(*_820);
        _818 = &(*_819);
        _817 = [move _818];
        StorageDead(_818);
        _816 = &_817;
        _815 = &(*_816);
        _814 = move _815 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_815);
        _1774 = const false;
        _812 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _813, move _814) -> [return: bb370, unwind: bb1067];
    }

    bb370: {
        _1773 = const true;
        StorageDead(_814);
        _1774 = const false;
        StorageDead(_813);
        StorageLive(_841);
        StorageLive(_842);
        StorageLive(_843);
        StorageLive(_844);
        _2090 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _844 = &(*_2090);
        _843 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _844) -> [return: bb371, unwind: bb1065];
    }

    bb371: {
        StorageDead(_844);
        StorageLive(_845);
        StorageLive(_846);
        _1730 = deref_copy (_843.3: &anchor_lang::prelude::Pubkey);
        _846 = &(*_1730);
        StorageLive(_847);
        StorageLive(_848);
        _848 = <Token2022 as anchor_lang::Id>::id() -> [return: bb372, unwind: bb960];
    }

    bb372: {
        _847 = &_848;
        _845 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _846, move _847) -> [return: bb373, unwind: bb960];
    }

    bb373: {
        switchInt(move _845) -> [0: bb402, otherwise: bb374];
    }

    bb374: {
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_846);
        StorageLive(_849);
        StorageLive(_850);
        StorageLive(_851);
        StorageLive(_852);
        _852 = &_843;
        _851 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _852) -> [return: bb375, unwind: bb960];
    }

    bb375: {
        StorageDead(_852);
        _850 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _851) -> [return: bb376, unwind: bb960];
    }

    bb376: {
        StorageDead(_851);
        _853 = discriminant(_850);
        switchInt(move _853) -> [0: bb377, 1: bb378, otherwise: bb11];
    }

    bb377: {
        StorageLive(_857);
        _857 = move ((_850 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _849 = move _857;
        StorageDead(_857);
        _1851 = discriminant(_850);
        StorageDead(_850);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        StorageLive(_864);
        _864 = &_849;
        _863 = &(*_864);
        _862 = <Ref<'_, &mut [u8]> as Deref>::deref(move _863) -> [return: bb380, unwind: bb959];
    }

    bb378: {
        StorageLive(_854);
        _854 = move ((_850 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_856);
        _856 = move _854;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _856) -> [return: bb379, unwind: bb1063];
    }

    bb379: {
        StorageDead(_856);
        StorageDead(_854);
        _1969 = discriminant(_850);
        StorageDead(_850);
        goto -> bb867;
    }

    bb380: {
        _1731 = deref_copy (*_862);
        _861 = &(*_1731);
        StorageDead(_863);
        _860 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _861) -> [return: bb381, unwind: bb959];
    }

    bb381: {
        StorageDead(_861);
        _859 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _860) -> [return: bb382, unwind: bb959];
    }

    bb382: {
        StorageDead(_860);
        _865 = discriminant(_859);
        switchInt(move _865) -> [0: bb383, 1: bb384, otherwise: bb11];
    }

    bb383: {
        StorageLive(_869);
        _869 = move ((_859 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _858 = move _869;
        StorageDead(_869);
        _1853 = discriminant(_859);
        StorageDead(_864);
        StorageDead(_862);
        StorageDead(_859);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        StorageLive(_873);
        _873 = &_858;
        _872 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _873) -> [return: bb386, unwind: bb959];
    }

    bb384: {
        StorageLive(_866);
        _866 = move ((_859 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_868);
        _868 = move _866;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _868) -> [return: bb385, unwind: bb1062];
    }

    bb385: {
        StorageDead(_868);
        StorageDead(_866);
        _1967 = discriminant(_859);
        StorageDead(_864);
        StorageDead(_862);
        StorageDead(_859);
        goto -> bb866;
    }

    bb386: {
        StorageDead(_873);
        _871 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _872) -> [return: bb387, unwind: bb959];
    }

    bb387: {
        StorageDead(_872);
        _874 = discriminant(_871);
        switchInt(move _874) -> [0: bb388, 1: bb389, otherwise: bb11];
    }

    bb388: {
        StorageLive(_878);
        _878 = move ((_871 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _870 = move _878;
        StorageDead(_878);
        _1855 = discriminant(_871);
        StorageDead(_871);
        StorageLive(_879);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        _883 = &_870;
        _882 = &(*_883);
        _881 = <Vec<ExtensionType> as Deref>::deref(move _882) -> [return: bb391, unwind: bb958];
    }

    bb389: {
        StorageLive(_875);
        _875 = move ((_871 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_877);
        _877 = move _875;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _877) -> [return: bb390, unwind: bb1061];
    }

    bb390: {
        StorageDead(_877);
        StorageDead(_875);
        _1965 = discriminant(_871);
        StorageDead(_871);
        StorageDead(_870);
        goto -> bb866;
    }

    bb391: {
        _880 = &(*_881);
        StorageDead(_882);
        _879 = ExtensionType::get_required_init_account_extensions(move _880) -> [return: bb392, unwind: bb958];
    }

    bb392: {
        StorageDead(_880);
        StorageDead(_883);
        StorageDead(_881);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        _889 = &_879;
        _888 = &(*_889);
        _887 = <Vec<ExtensionType> as Deref>::deref(move _888) -> [return: bb393, unwind: bb957];
    }

    bb393: {
        _886 = &(*_887);
        StorageDead(_888);
        _885 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _886) -> [return: bb394, unwind: bb957];
    }

    bb394: {
        StorageDead(_886);
        _884 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _885) -> [return: bb395, unwind: bb957];
    }

    bb395: {
        _1772 = const true;
        StorageDead(_885);
        _890 = discriminant(_884);
        switchInt(move _890) -> [0: bb396, 1: bb397, otherwise: bb11];
    }

    bb396: {
        StorageLive(_894);
        _894 = ((_884 as Continue).0: usize);
        _842 = _894;
        StorageDead(_894);
        drop(_879) -> [return: bb399, unwind: bb955];
    }

    bb397: {
        StorageLive(_891);
        _891 = move ((_884 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_893);
        _893 = move _891;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _893) -> [return: bb398, unwind: bb954];
    }

    bb398: {
        StorageDead(_893);
        StorageDead(_891);
        drop(_879) -> [return: bb863, unwind: bb955];
    }

    bb399: {
        StorageDead(_879);
        drop(_870) -> [return: bb400, unwind: bb956];
    }

    bb400: {
        StorageDead(_870);
        StorageDead(_858);
        drop(_849) -> [return: bb401, unwind: bb1060];
    }

    bb401: {
        StorageDead(_849);
        _1857 = discriminant(_884);
        StorageDead(_889);
        StorageDead(_887);
        _1772 = const false;
        StorageDead(_884);
        goto -> bb403;
    }

    bb402: {
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_846);
        _842 = const _;
        goto -> bb403;
    }

    bb403: {
        StorageDead(_845);
        drop(_843) -> [return: bb404, unwind: bb1065];
    }

    bb404: {
        StorageDead(_843);
        _841 = move _842 as u64 (IntToInt);
        StorageDead(_842);
        _1773 = const false;
        _811 = anchor_lang::system_program::allocate(move _812, move _841) -> [return: bb405, unwind: bb1065];
    }

    bb405: {
        StorageDead(_841);
        _1773 = const false;
        StorageDead(_812);
        _810 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _811) -> [return: bb406, unwind: bb1069];
    }

    bb406: {
        StorageDead(_811);
        _895 = discriminant(_810);
        switchInt(move _895) -> [0: bb407, 1: bb408, otherwise: bb11];
    }

    bb407: {
        StorageLive(_899);
        _899 = ((_810 as Continue).0: ());
        _809 = _899;
        StorageDead(_899);
        _1859 = discriminant(_810);
        StorageDead(_837);
        StorageDead(_835);
        StorageDead(_834);
        StorageDead(_831);
        StorageDead(_829);
        StorageDead(_827);
        StorageDead(_825);
        StorageDead(_822);
        StorageDead(_820);
        StorageDead(_819);
        StorageDead(_817);
        StorageDead(_816);
        StorageDead(_810);
        StorageDead(_809);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        _902 = &(*_42);
        _901 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _902) -> [return: bb410, unwind: bb1069];
    }

    bb408: {
        StorageLive(_896);
        _896 = move ((_810 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_898);
        _898 = move _896;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _898) -> [return: bb409, unwind: bb1059];
    }

    bb409: {
        StorageDead(_898);
        StorageDead(_896);
        _1961 = discriminant(_810);
        goto -> bb871;
    }

    bb410: {
        StorageDead(_902);
        _1771 = const true;
        _900 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _901 };
        StorageDead(_901);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        _905 = &_141;
        _904 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _905) -> [return: bb411, unwind: bb1058];
    }

    bb411: {
        StorageDead(_905);
        StorageLive(_906);
        _1771 = const false;
        _906 = move _900;
        _903 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _904, move _906) -> [return: bb412, unwind: bb1058];
    }

    bb412: {
        StorageDead(_906);
        StorageDead(_904);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        _1770 = const true;
        _911 = move _903;
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        _923 = const b"spot_market_vault";
        _922 = &(*_923);
        _921 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _922) -> [return: bb413, unwind: bb1056];
    }

    bb413: {
        StorageDead(_922);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        _2091 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _930 = &(*_2091);
        _929 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _930) -> [return: bb414, unwind: bb1056];
    }

    bb414: {
        StorageDead(_930);
        _928 = ((*_929).14: u16);
        _927 = core::num::<impl u16>::to_le_bytes(move _928) -> [return: bb415, unwind: bb1056];
    }

    bb415: {
        _926 = &_927;
        StorageDead(_928);
        _925 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _926) -> [return: bb416, unwind: bb1056];
    }

    bb416: {
        _924 = &(*_925);
        StorageDead(_926);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        _936 = _530;
        _935 = [move _936];
        _934 = &_935;
        StorageDead(_936);
        StorageLive(_937);
        _937 = RangeFull;
        _933 = <[u8; 1] as Index<RangeFull>>::index(move _934, move _937) -> [return: bb417, unwind: bb1056];
    }

    bb417: {
        StorageDead(_937);
        StorageDead(_934);
        _932 = &(*_933);
        _931 = &(*_932);
        _920 = [move _921, move _924, move _931];
        _919 = &_920;
        StorageDead(_931);
        StorageDead(_924);
        StorageDead(_921);
        StorageLive(_938);
        _938 = RangeFull;
        _918 = <[&[u8]; 3] as Index<RangeFull>>::index(move _919, move _938) -> [return: bb418, unwind: bb1056];
    }

    bb418: {
        StorageDead(_938);
        StorageDead(_919);
        _917 = &(*_918);
        _916 = &(*_917);
        _915 = [move _916];
        StorageDead(_916);
        _914 = &_915;
        _913 = &(*_914);
        _912 = move _913 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_913);
        _1770 = const false;
        _910 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _911, move _912) -> [return: bb419, unwind: bb1056];
    }

    bb419: {
        _1769 = const true;
        StorageDead(_912);
        _1770 = const false;
        StorageDead(_911);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        _944 = &_156;
        _943 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _944) -> [return: bb420, unwind: bb1054];
    }

    bb420: {
        _942 = &(*_943);
        StorageDead(_944);
        _941 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _942) -> [return: bb421, unwind: bb1054];
    }

    bb421: {
        StorageDead(_942);
        _940 = &_941;
        _939 = &(*_940);
        _1769 = const false;
        _909 = anchor_lang::system_program::assign(move _910, move _939) -> [return: bb422, unwind: bb1054];
    }

    bb422: {
        StorageDead(_939);
        _1769 = const false;
        StorageDead(_910);
        _908 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _909) -> [return: bb423, unwind: bb1058];
    }

    bb423: {
        StorageDead(_909);
        _945 = discriminant(_908);
        switchInt(move _945) -> [0: bb424, 1: bb425, otherwise: bb11];
    }

    bb424: {
        StorageLive(_949);
        _949 = ((_908 as Continue).0: ());
        _907 = _949;
        StorageDead(_949);
        _1861 = discriminant(_908);
        StorageDead(_943);
        StorageDead(_941);
        StorageDead(_940);
        StorageDead(_935);
        StorageDead(_933);
        StorageDead(_932);
        StorageDead(_929);
        StorageDead(_927);
        StorageDead(_925);
        StorageDead(_923);
        StorageDead(_920);
        StorageDead(_918);
        StorageDead(_917);
        StorageDead(_915);
        StorageDead(_914);
        StorageDead(_908);
        StorageDead(_907);
        _579 = const ();
        StorageDead(_903);
        _1771 = const false;
        StorageDead(_900);
        StorageDead(_805);
        _1775 = const false;
        StorageDead(_802);
        StorageDead(_722);
        goto -> bb427;
    }

    bb425: {
        StorageLive(_946);
        _946 = move ((_908 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_948);
        _948 = move _946;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _948) -> [return: bb426, unwind: bb1052];
    }

    bb426: {
        StorageDead(_948);
        StorageDead(_946);
        _1959 = discriminant(_908);
        StorageDead(_943);
        StorageDead(_941);
        StorageDead(_940);
        StorageDead(_935);
        StorageDead(_933);
        StorageDead(_932);
        StorageDead(_929);
        StorageDead(_927);
        StorageDead(_925);
        StorageDead(_923);
        StorageDead(_920);
        StorageDead(_918);
        StorageDead(_917);
        StorageDead(_915);
        StorageDead(_914);
        StorageDead(_908);
        StorageDead(_907);
        StorageDead(_903);
        _1771 = const false;
        StorageDead(_900);
        goto -> bb872;
    }

    bb427: {
        StorageDead(_580);
        StorageDead(_579);
        StorageLive(_950);
        StorageLive(_951);
        _951 = &_156;
        _950 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _951) -> [return: bb428, unwind: bb984];
    }

    bb428: {
        _1768 = const true;
        StorageDead(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        _954 = &(*_42);
        _953 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _954) -> [return: bb429, unwind: bb1051];
    }

    bb429: {
        StorageDead(_954);
        StorageLive(_955);
        StorageLive(_956);
        _2092 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _956 = &(*_2092);
        _955 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _956) -> [return: bb430, unwind: bb953];
    }

    bb430: {
        StorageDead(_956);
        StorageLive(_957);
        StorageLive(_958);
        _958 = &_66;
        _957 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _958) -> [return: bb431, unwind: bb952];
    }

    bb431: {
        StorageDead(_958);
        _952 = anchor_spl::token_2022::InitializeAccount3::<'_> { account: move _953, mint: move _955, authority: move _957 };
        StorageDead(_957);
        StorageDead(_955);
        StorageDead(_953);
        StorageLive(_959);
        StorageLive(_960);
        _1768 = const false;
        _960 = move _950;
        StorageLive(_961);
        _961 = move _952;
        _959 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>::new(move _960, move _961) -> [return: bb432, unwind: bb1051];
    }

    bb432: {
        StorageDead(_961);
        StorageDead(_960);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        StorageLive(_965);
        _965 = move _959;
        _964 = anchor_spl::token_2022::initialize_account3(move _965) -> [return: bb433, unwind: bb1051];
    }

    bb433: {
        StorageDead(_965);
        _963 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _964) -> [return: bb434, unwind: bb1051];
    }

    bb434: {
        StorageDead(_964);
        _966 = discriminant(_963);
        switchInt(move _966) -> [0: bb435, 1: bb436, otherwise: bb11];
    }

    bb435: {
        StorageLive(_970);
        _970 = ((_963 as Continue).0: ());
        _962 = _970;
        StorageDead(_970);
        _1863 = discriminant(_963);
        StorageDead(_963);
        StorageDead(_962);
        _570 = const ();
        StorageDead(_959);
        StorageDead(_952);
        _1768 = const false;
        StorageDead(_950);
        StorageDead(_577);
        goto -> bb439;
    }

    bb436: {
        StorageLive(_967);
        _967 = move ((_963 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_969);
        _969 = move _967;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _969) -> [return: bb437, unwind: bb1049];
    }

    bb437: {
        StorageDead(_969);
        StorageDead(_967);
        _1957 = discriminant(_963);
        StorageDead(_963);
        StorageDead(_962);
        StorageDead(_959);
        StorageDead(_952);
        _1768 = const false;
        StorageDead(_950);
        goto -> bb890;
    }

    bb438: {
        StorageDead(_574);
        StorageDead(_573);
        _570 = const ();
        goto -> bb439;
    }

    bb439: {
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_570);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        StorageLive(_975);
        _975 = &_42;
        _1732 = deref_copy (*_975);
        _974 = &(*_1732);
        _973 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::try_from_unchecked(move _974) -> [return: bb440, unwind: bb984];
    }

    bb440: {
        _1766 = const true;
        _1767 = const true;
        StorageDead(_974);
        _976 = discriminant(_973);
        switchInt(move _976) -> [0: bb442, 1: bb441, otherwise: bb11];
    }

    bb441: {
        StorageLive(_978);
        _978 = move ((_973 as Err).0: anchor_lang::error::Error);
        StorageLive(_980);
        StorageLive(_981);
        _981 = move _978;
        _980 = anchor_lang::error::Error::with_account_name::<&str>(move _981, const "spot_market_vault") -> [return: bb443, unwind: bb1048];
    }

    bb442: {
        StorageLive(_977);
        _977 = move ((_973 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _972 = move _977;
        StorageDead(_977);
        _971 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>::new(move _972) -> [return: bb444, unwind: bb1048];
    }

    bb443: {
        StorageDead(_981);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _980);
        StorageDead(_980);
        StorageDead(_978);
        StorageDead(_972);
        _1955 = discriminant(_973);
        StorageDead(_975);
        _1766 = const false;
        _1767 = const false;
        StorageDead(_973);
        goto -> bb862;
    }

    bb444: {
        StorageDead(_972);
        _1865 = discriminant(_973);
        StorageDead(_975);
        _1766 = const false;
        _1767 = const false;
        StorageDead(_973);
        StorageLive(_982);
        StorageLive(_983);
        _983 = const false;
        switchInt(move _983) -> [0: bb480, otherwise: bb445];
    }

    bb445: {
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        _2093 = (((_971.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _990 = &(*_2093);
        _989 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _990) -> [return: bb446, unwind: bb951];
    }

    bb446: {
        _988 = &(*_989);
        _987 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _988) -> [return: bb447, unwind: bb951];
    }

    bb447: {
        StorageDead(_990);
        StorageDead(_988);
        _986 = &((*_987).0: anchor_lang::prelude::Pubkey);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        _2094 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _993 = &(*_2094);
        _992 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _993) -> [return: bb448, unwind: bb951];
    }

    bb448: {
        _991 = &_992;
        StorageDead(_993);
        _985 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _986, move _991) -> [return: bb449, unwind: bb951];
    }

    bb449: {
        switchInt(move _985) -> [0: bb457, otherwise: bb450];
    }

    bb450: {
        StorageDead(_992);
        StorageDead(_991);
        StorageDead(_989);
        StorageDead(_987);
        StorageDead(_986);
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        _998 = ConstraintTokenMint;
        _997 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _998) -> [return: bb451, unwind: bb951];
    }

    bb451: {
        StorageDead(_998);
        _996 = anchor_lang::error::Error::with_account_name::<&str>(move _997, const "spot_market_vault") -> [return: bb452, unwind: bb951];
    }

    bb452: {
        _1765 = const true;
        StorageDead(_997);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        _2095 = (((_971.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1004 = &(*_2095);
        _1003 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1004) -> [return: bb453, unwind: bb1047];
    }

    bb453: {
        _1002 = &(*_1003);
        _1001 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1002) -> [return: bb454, unwind: bb1047];
    }

    bb454: {
        StorageDead(_1004);
        StorageDead(_1002);
        _1000 = ((*_1001).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1005);
        StorageLive(_1006);
        _2096 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1006 = &(*_2096);
        _1005 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1006) -> [return: bb455, unwind: bb1047];
    }

    bb455: {
        StorageDead(_1006);
        _999 = (move _1000, move _1005);
        StorageDead(_1005);
        StorageDead(_1000);
        _1765 = const false;
        _995 = anchor_lang::error::Error::with_pubkeys(move _996, move _999) -> [return: bb456, unwind: bb1047];
    }

    bb456: {
        StorageDead(_999);
        _1765 = const false;
        StorageDead(_996);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _995);
        StorageDead(_995);
        StorageDead(_1003);
        StorageDead(_1001);
        StorageDead(_985);
        StorageDead(_984);
        goto -> bb861;
    }

    bb457: {
        StorageDead(_992);
        StorageDead(_991);
        StorageDead(_989);
        StorageDead(_987);
        StorageDead(_986);
        _984 = const ();
        StorageDead(_985);
        StorageDead(_984);
        StorageLive(_1007);
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        StorageLive(_1011);
        StorageLive(_1012);
        StorageLive(_1013);
        _2097 = (((_971.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1013 = &(*_2097);
        _1012 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1013) -> [return: bb458, unwind: bb951];
    }

    bb458: {
        _1011 = &(*_1012);
        _1010 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1011) -> [return: bb459, unwind: bb951];
    }

    bb459: {
        StorageDead(_1013);
        StorageDead(_1011);
        _1009 = &((*_1010).1: anchor_lang::prelude::Pubkey);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        _1016 = &_66;
        _1015 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1016) -> [return: bb460, unwind: bb951];
    }

    bb460: {
        _1014 = &_1015;
        StorageDead(_1016);
        _1008 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1009, move _1014) -> [return: bb461, unwind: bb951];
    }

    bb461: {
        switchInt(move _1008) -> [0: bb469, otherwise: bb462];
    }

    bb462: {
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1012);
        StorageDead(_1010);
        StorageDead(_1009);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        StorageLive(_1021);
        _1021 = ConstraintTokenOwner;
        _1020 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1021) -> [return: bb463, unwind: bb951];
    }

    bb463: {
        StorageDead(_1021);
        _1019 = anchor_lang::error::Error::with_account_name::<&str>(move _1020, const "spot_market_vault") -> [return: bb464, unwind: bb951];
    }

    bb464: {
        _1764 = const true;
        StorageDead(_1020);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        StorageLive(_1027);
        _2098 = (((_971.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1027 = &(*_2098);
        _1026 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1027) -> [return: bb465, unwind: bb1045];
    }

    bb465: {
        _1025 = &(*_1026);
        _1024 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1025) -> [return: bb466, unwind: bb1045];
    }

    bb466: {
        StorageDead(_1027);
        StorageDead(_1025);
        _1023 = ((*_1024).1: anchor_lang::prelude::Pubkey);
        StorageLive(_1028);
        StorageLive(_1029);
        _1029 = &_66;
        _1028 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1029) -> [return: bb467, unwind: bb1045];
    }

    bb467: {
        StorageDead(_1029);
        _1022 = (move _1023, move _1028);
        StorageDead(_1028);
        StorageDead(_1023);
        _1764 = const false;
        _1018 = anchor_lang::error::Error::with_pubkeys(move _1019, move _1022) -> [return: bb468, unwind: bb1045];
    }

    bb468: {
        StorageDead(_1022);
        _1764 = const false;
        StorageDead(_1019);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1018);
        StorageDead(_1018);
        StorageDead(_1026);
        StorageDead(_1024);
        StorageDead(_1008);
        StorageDead(_1007);
        goto -> bb861;
    }

    bb469: {
        StorageDead(_1015);
        StorageDead(_1014);
        StorageDead(_1012);
        StorageDead(_1010);
        StorageDead(_1009);
        _1007 = const ();
        StorageDead(_1008);
        StorageDead(_1007);
        StorageLive(_1030);
        StorageLive(_1031);
        _1031 = &_565;
        StorageLive(_1032);
        StorageLive(_1033);
        StorageLive(_1034);
        StorageLive(_1035);
        StorageLive(_1036);
        StorageLive(_1037);
        _1037 = &_156;
        _1036 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1037) -> [return: bb470, unwind: bb951];
    }

    bb470: {
        _1035 = &(*_1036);
        StorageDead(_1037);
        _1034 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1035) -> [return: bb471, unwind: bb951];
    }

    bb471: {
        StorageDead(_1035);
        _1033 = &_1034;
        _1032 = &_1033;
        _1030 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1031, move _1032) -> [return: bb472, unwind: bb951];
    }

    bb472: {
        switchInt(move _1030) -> [0: bb479, otherwise: bb473];
    }

    bb473: {
        StorageDead(_1036);
        StorageDead(_1034);
        StorageDead(_1033);
        StorageDead(_1032);
        StorageDead(_1031);
        StorageLive(_1039);
        StorageLive(_1040);
        StorageLive(_1041);
        StorageLive(_1042);
        _1042 = ConstraintTokenTokenProgram;
        _1041 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1042) -> [return: bb474, unwind: bb951];
    }

    bb474: {
        StorageDead(_1042);
        _1040 = anchor_lang::error::Error::with_account_name::<&str>(move _1041, const "spot_market_vault") -> [return: bb475, unwind: bb951];
    }

    bb475: {
        _1763 = const true;
        StorageDead(_1041);
        StorageLive(_1043);
        StorageLive(_1044);
        _1044 = (*_565);
        StorageLive(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        StorageLive(_1048);
        _1048 = &_156;
        _1047 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1048) -> [return: bb476, unwind: bb1043];
    }

    bb476: {
        _1046 = &(*_1047);
        StorageDead(_1048);
        _1045 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1046) -> [return: bb477, unwind: bb1043];
    }

    bb477: {
        StorageDead(_1046);
        _1043 = (move _1044, move _1045);
        StorageDead(_1045);
        StorageDead(_1044);
        _1763 = const false;
        _1039 = anchor_lang::error::Error::with_pubkeys(move _1040, move _1043) -> [return: bb478, unwind: bb1043];
    }

    bb478: {
        StorageDead(_1043);
        _1763 = const false;
        StorageDead(_1040);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1039);
        StorageDead(_1039);
        StorageDead(_1047);
        StorageDead(_1030);
        goto -> bb861;
    }

    bb479: {
        StorageDead(_1036);
        StorageDead(_1034);
        StorageDead(_1033);
        StorageDead(_1032);
        StorageDead(_1031);
        _982 = const ();
        StorageDead(_1030);
        goto -> bb481;
    }

    bb480: {
        _982 = const ();
        goto -> bb481;
    }

    bb481: {
        StorageDead(_983);
        StorageDead(_982);
        _564 = move _971;
        StorageDead(_971);
        StorageDead(_565);
        StorageLive(_1049);
        StorageLive(_1050);
        StorageLive(_1051);
        StorageLive(_1052);
        StorageLive(_1053);
        StorageLive(_1054);
        _1054 = &_564;
        _1053 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _1054) -> [return: bb482, unwind: bb950];
    }

    bb482: {
        _1052 = &(*_1053);
        StorageDead(_1054);
        _1051 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1052) -> [return: bb483, unwind: bb950];
    }

    bb483: {
        StorageDead(_1052);
        _1050 = ((*_1051).6: bool);
        switchInt(move _1050) -> [0: bb484, otherwise: bb487];
    }

    bb484: {
        StorageDead(_1053);
        StorageDead(_1051);
        StorageLive(_1056);
        StorageLive(_1057);
        StorageLive(_1058);
        _1058 = ConstraintMut;
        _1057 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1058) -> [return: bb485, unwind: bb950];
    }

    bb485: {
        StorageDead(_1058);
        _1056 = anchor_lang::error::Error::with_account_name::<&str>(move _1057, const "spot_market_vault") -> [return: bb486, unwind: bb950];
    }

    bb486: {
        StorageDead(_1057);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1056);
        StorageDead(_1056);
        StorageDead(_1050);
        StorageDead(_1049);
        goto -> bb860;
    }

    bb487: {
        StorageDead(_1053);
        StorageDead(_1051);
        _1049 = const ();
        StorageDead(_1050);
        StorageDead(_1049);
        StorageLive(_1059);
        StorageLive(_1060);
        StorageLive(_1061);
        _1061 = &_521;
        StorageLive(_1062);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        _2099 = (((_564.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1065 = &(*_2099);
        _1064 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1065) -> [return: bb488, unwind: bb950];
    }

    bb488: {
        _1063 = &_1064;
        StorageDead(_1065);
        _1062 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1063) -> [return: bb489, unwind: bb949];
    }

    bb489: {
        StorageDead(_1063);
        StorageLive(_1066);
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        StorageLive(_1070);
        StorageLive(_1071);
        _2100 = (((_564.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1071 = &(*_2100);
        _1070 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1071) -> [return: bb490, unwind: bb949];
    }

    bb490: {
        _1069 = &_1070;
        StorageDead(_1071);
        _1068 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _1069) -> [return: bb491, unwind: bb948];
    }

    bb491: {
        StorageDead(_1069);
        _1067 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1068) -> [return: bb492, unwind: bb948];
    }

    bb492: {
        _1762 = const true;
        StorageDead(_1068);
        _1072 = discriminant(_1067);
        switchInt(move _1072) -> [0: bb493, 1: bb494, otherwise: bb11];
    }

    bb493: {
        StorageLive(_1076);
        _1076 = ((_1067 as Continue).0: usize);
        _1066 = _1076;
        StorageDead(_1076);
        _1060 = anchor_lang::prelude::Rent::is_exempt(move _1061, move _1062, move _1066) -> [return: bb496, unwind: bb1041];
    }

    bb494: {
        StorageLive(_1073);
        _1073 = move ((_1067 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1075);
        _1075 = move _1073;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1075) -> [return: bb495, unwind: bb1041];
    }

    bb495: {
        StorageDead(_1075);
        StorageDead(_1073);
        StorageDead(_1066);
        StorageDead(_1062);
        StorageDead(_1061);
        _1953 = discriminant(_1067);
        drop(_1070) -> [return: bb857, unwind: bb949];
    }

    bb496: {
        switchInt(move _1060) -> [0: bb498, otherwise: bb497];
    }

    bb497: {
        StorageDead(_1066);
        StorageDead(_1062);
        StorageDead(_1061);
        _1867 = discriminant(_1067);
        drop(_1070) -> [return: bb503, unwind: bb949];
    }

    bb498: {
        StorageDead(_1066);
        StorageDead(_1062);
        StorageDead(_1061);
        _1869 = discriminant(_1067);
        drop(_1070) -> [return: bb499, unwind: bb949];
    }

    bb499: {
        StorageDead(_1070);
        _1762 = const false;
        StorageDead(_1067);
        drop(_1064) -> [return: bb500, unwind: bb950];
    }

    bb500: {
        StorageDead(_1064);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        _1080 = ConstraintRentExempt;
        _1079 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1080) -> [return: bb501, unwind: bb950];
    }

    bb501: {
        StorageDead(_1080);
        _1078 = anchor_lang::error::Error::with_account_name::<&str>(move _1079, const "spot_market_vault") -> [return: bb502, unwind: bb950];
    }

    bb502: {
        StorageDead(_1079);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1078);
        StorageDead(_1078);
        goto -> bb859;
    }

    bb503: {
        StorageDead(_1070);
        _1762 = const false;
        StorageDead(_1067);
        drop(_1064) -> [return: bb504, unwind: bb950];
    }

    bb504: {
        StorageDead(_1064);
        _1059 = const ();
        StorageDead(_1060);
        StorageDead(_1059);
        StorageLive(_1081);
        StorageLive(_1082);
        StorageLive(_1083);
        _1083 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb505, unwind: bb950];
    }

    bb505: {
        _1082 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _1083) -> [return: bb506, unwind: bb950];
    }

    bb506: {
        StorageDead(_1083);
        _1084 = discriminant(_1082);
        switchInt(move _1084) -> [0: bb507, 1: bb508, otherwise: bb11];
    }

    bb507: {
        StorageLive(_1088);
        _1088 = ((_1082 as Continue).0: anchor_lang::prelude::Rent);
        _1081 = _1088;
        StorageDead(_1088);
        _1871 = discriminant(_1082);
        StorageDead(_1082);
        StorageLive(_1091);
        StorageLive(_1092);
        StorageLive(_1093);
        StorageLive(_1094);
        StorageLive(_1095);
        StorageLive(_1096);
        StorageLive(_1097);
        StorageLive(_1098);
        StorageLive(_1099);
        _1099 = const b"insurance_fund_vault";
        _1098 = &(*_1099);
        _1097 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _1098) -> [return: bb510, unwind: bb950];
    }

    bb508: {
        StorageLive(_1085);
        _1085 = move ((_1082 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1087);
        _1087 = move _1085;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1087) -> [return: bb509, unwind: bb1040];
    }

    bb509: {
        StorageDead(_1087);
        StorageDead(_1085);
        _1951 = discriminant(_1082);
        StorageDead(_1082);
        goto -> bb856;
    }

    bb510: {
        _1096 = &(*_1097);
        StorageDead(_1098);
        StorageLive(_1100);
        StorageLive(_1101);
        StorageLive(_1102);
        StorageLive(_1103);
        StorageLive(_1104);
        StorageLive(_1105);
        StorageLive(_1106);
        _2101 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1106 = &(*_2101);
        _1105 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1106) -> [return: bb511, unwind: bb950];
    }

    bb511: {
        StorageDead(_1106);
        _1104 = ((*_1105).14: u16);
        _1103 = core::num::<impl u16>::to_le_bytes(move _1104) -> [return: bb512, unwind: bb950];
    }

    bb512: {
        _1102 = &_1103;
        StorageDead(_1104);
        _1101 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _1102) -> [return: bb513, unwind: bb950];
    }

    bb513: {
        _1100 = &(*_1101);
        StorageDead(_1102);
        _1095 = [move _1096, move _1100];
        StorageDead(_1100);
        StorageDead(_1096);
        _1094 = &_1095;
        _1093 = &(*_1094);
        _1092 = move _1093 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_1093);
        StorageLive(_1107);
        _1107 = &(*_1);
        _1091 = anchor_lang::prelude::Pubkey::find_program_address(move _1092, move _1107) -> [return: bb514, unwind: bb950];
    }

    bb514: {
        StorageDead(_1107);
        StorageDead(_1092);
        StorageLive(_1089);
        _1089 = (_1091.0: anchor_lang::prelude::Pubkey);
        StorageLive(_1090);
        _1090 = (_1091.1: u8);
        StorageDead(_1105);
        StorageDead(_1103);
        StorageDead(_1101);
        StorageDead(_1099);
        StorageDead(_1097);
        StorageDead(_1095);
        StorageDead(_1094);
        StorageDead(_1091);
        StorageLive(_1108);
        _1108 = _1090;
        ((*_4).2: u8) = move _1108;
        StorageDead(_1108);
        StorageLive(_1109);
        StorageLive(_1110);
        StorageLive(_1111);
        StorageLive(_1112);
        StorageLive(_1113);
        _1113 = &(*_57);
        _1112 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1113) -> [return: bb515, unwind: bb950];
    }

    bb515: {
        _1111 = &_1112;
        StorageDead(_1113);
        StorageLive(_1114);
        _1114 = &_1089;
        _1110 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1111, move _1114) -> [return: bb516, unwind: bb950];
    }

    bb516: {
        switchInt(move _1110) -> [0: bb522, otherwise: bb517];
    }

    bb517: {
        StorageDead(_1114);
        StorageDead(_1112);
        StorageDead(_1111);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        StorageLive(_1119);
        _1119 = ConstraintSeeds;
        _1118 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1119) -> [return: bb518, unwind: bb950];
    }

    bb518: {
        StorageDead(_1119);
        _1117 = anchor_lang::error::Error::with_account_name::<&str>(move _1118, const "insurance_fund_vault") -> [return: bb519, unwind: bb950];
    }

    bb519: {
        _1761 = const true;
        StorageDead(_1118);
        StorageLive(_1120);
        StorageLive(_1121);
        StorageLive(_1122);
        _1122 = &(*_57);
        _1121 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1122) -> [return: bb520, unwind: bb1039];
    }

    bb520: {
        StorageDead(_1122);
        StorageLive(_1123);
        _1123 = _1089;
        _1120 = (move _1121, move _1123);
        StorageDead(_1123);
        StorageDead(_1121);
        _1761 = const false;
        _1116 = anchor_lang::error::Error::with_pubkeys(move _1117, move _1120) -> [return: bb521, unwind: bb1039];
    }

    bb521: {
        StorageDead(_1120);
        _1761 = const false;
        StorageDead(_1117);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1116);
        StorageDead(_1116);
        StorageDead(_1110);
        StorageDead(_1109);
        goto -> bb855;
    }

    bb522: {
        StorageDead(_1114);
        StorageDead(_1112);
        StorageDead(_1111);
        _1109 = const ();
        StorageDead(_1110);
        StorageDead(_1109);
        StorageLive(_1124);
        StorageLive(_1125);
        StorageLive(_1126);
        StorageLive(_1127);
        StorageLive(_1128);
        StorageLive(_1129);
        _1129 = &(*_57);
        _1128 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1129) -> [return: bb523, unwind: bb950];
    }

    bb523: {
        _1127 = &(*_1128);
        StorageDead(_1129);
        _1126 = <anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1127) -> [return: bb524, unwind: bb950];
    }

    bb524: {
        StorageDead(_1127);
        _1125 = ((*_1126).3: &anchor_lang::prelude::Pubkey);
        StorageDead(_1128);
        StorageDead(_1126);
        StorageLive(_1130);
        StorageLive(_1131);
        _1131 = const false;
        switchInt(move _1131) -> [0: bb527, otherwise: bb525];
    }

    bb525: {
        StorageLive(_1132);
        StorageLive(_1133);
        _1133 = &_1125;
        StorageLive(_1134);
        _1705 = const _;
        _1134 = &(*_1705);
        _1132 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1133, move _1134) -> [return: bb526, unwind: bb950];
    }

    bb526: {
        switchInt(move _1132) -> [0: bb722, otherwise: bb527];
    }

    bb527: {
        StorageDead(_1134);
        StorageDead(_1133);
        StorageLive(_1137);
        StorageLive(_1138);
        _1138 = &(*_57);
        _1137 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1138) -> [return: bb528, unwind: bb950];
    }

    bb528: {
        StorageDead(_1138);
        StorageLive(_1139);
        StorageLive(_1140);
        StorageLive(_1141);
        _1141 = _1137;
        _1140 = Eq(move _1141, const 0_u64);
        switchInt(move _1140) -> [0: bb583, otherwise: bb529];
    }

    bb529: {
        StorageDead(_1141);
        StorageLive(_1142);
        StorageLive(_1143);
        StorageLive(_1144);
        _2102 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1144 = &(*_2102);
        _1143 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1144) -> [return: bb530, unwind: bb950];
    }

    bb530: {
        StorageDead(_1144);
        StorageLive(_1145);
        StorageLive(_1146);
        _1733 = deref_copy (_1143.3: &anchor_lang::prelude::Pubkey);
        _1146 = &(*_1733);
        StorageLive(_1147);
        StorageLive(_1148);
        _1148 = <Token2022 as anchor_lang::Id>::id() -> [return: bb531, unwind: bb947];
    }

    bb531: {
        _1147 = &_1148;
        _1145 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1146, move _1147) -> [return: bb532, unwind: bb947];
    }

    bb532: {
        switchInt(move _1145) -> [0: bb561, otherwise: bb533];
    }

    bb533: {
        StorageDead(_1148);
        StorageDead(_1147);
        StorageDead(_1146);
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        StorageLive(_1152);
        _1152 = &_1143;
        _1151 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _1152) -> [return: bb534, unwind: bb947];
    }

    bb534: {
        StorageDead(_1152);
        _1150 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1151) -> [return: bb535, unwind: bb947];
    }

    bb535: {
        StorageDead(_1151);
        _1153 = discriminant(_1150);
        switchInt(move _1153) -> [0: bb536, 1: bb537, otherwise: bb11];
    }

    bb536: {
        StorageLive(_1157);
        _1157 = move ((_1150 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _1149 = move _1157;
        StorageDead(_1157);
        _1873 = discriminant(_1150);
        StorageDead(_1150);
        StorageLive(_1158);
        StorageLive(_1159);
        StorageLive(_1160);
        StorageLive(_1161);
        StorageLive(_1162);
        StorageLive(_1163);
        StorageLive(_1164);
        _1164 = &_1149;
        _1163 = &(*_1164);
        _1162 = <Ref<'_, &mut [u8]> as Deref>::deref(move _1163) -> [return: bb539, unwind: bb946];
    }

    bb537: {
        StorageLive(_1154);
        _1154 = move ((_1150 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1156);
        _1156 = move _1154;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1156) -> [return: bb538, unwind: bb1037];
    }

    bb538: {
        StorageDead(_1156);
        StorageDead(_1154);
        _1949 = discriminant(_1150);
        StorageDead(_1150);
        goto -> bb847;
    }

    bb539: {
        _1734 = deref_copy (*_1162);
        _1161 = &(*_1734);
        StorageDead(_1163);
        _1160 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _1161) -> [return: bb540, unwind: bb946];
    }

    bb540: {
        StorageDead(_1161);
        _1159 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1160) -> [return: bb541, unwind: bb946];
    }

    bb541: {
        StorageDead(_1160);
        _1165 = discriminant(_1159);
        switchInt(move _1165) -> [0: bb542, 1: bb543, otherwise: bb11];
    }

    bb542: {
        StorageLive(_1169);
        _1169 = move ((_1159 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _1158 = move _1169;
        StorageDead(_1169);
        _1875 = discriminant(_1159);
        StorageDead(_1164);
        StorageDead(_1162);
        StorageDead(_1159);
        StorageLive(_1170);
        StorageLive(_1171);
        StorageLive(_1172);
        StorageLive(_1173);
        _1173 = &_1158;
        _1172 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _1173) -> [return: bb545, unwind: bb946];
    }

    bb543: {
        StorageLive(_1166);
        _1166 = move ((_1159 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1168);
        _1168 = move _1166;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1168) -> [return: bb544, unwind: bb1036];
    }

    bb544: {
        StorageDead(_1168);
        StorageDead(_1166);
        _1947 = discriminant(_1159);
        StorageDead(_1164);
        StorageDead(_1162);
        StorageDead(_1159);
        goto -> bb846;
    }

    bb545: {
        StorageDead(_1173);
        _1171 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1172) -> [return: bb546, unwind: bb946];
    }

    bb546: {
        StorageDead(_1172);
        _1174 = discriminant(_1171);
        switchInt(move _1174) -> [0: bb547, 1: bb548, otherwise: bb11];
    }

    bb547: {
        StorageLive(_1178);
        _1178 = move ((_1171 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _1170 = move _1178;
        StorageDead(_1178);
        _1877 = discriminant(_1171);
        StorageDead(_1171);
        StorageLive(_1179);
        StorageLive(_1180);
        StorageLive(_1181);
        StorageLive(_1182);
        StorageLive(_1183);
        _1183 = &_1170;
        _1182 = &(*_1183);
        _1181 = <Vec<ExtensionType> as Deref>::deref(move _1182) -> [return: bb550, unwind: bb945];
    }

    bb548: {
        StorageLive(_1175);
        _1175 = move ((_1171 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1177);
        _1177 = move _1175;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1177) -> [return: bb549, unwind: bb1035];
    }

    bb549: {
        StorageDead(_1177);
        StorageDead(_1175);
        _1945 = discriminant(_1171);
        StorageDead(_1171);
        StorageDead(_1170);
        goto -> bb846;
    }

    bb550: {
        _1180 = &(*_1181);
        StorageDead(_1182);
        _1179 = ExtensionType::get_required_init_account_extensions(move _1180) -> [return: bb551, unwind: bb945];
    }

    bb551: {
        StorageDead(_1180);
        StorageDead(_1183);
        StorageDead(_1181);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        StorageLive(_1187);
        StorageLive(_1188);
        StorageLive(_1189);
        _1189 = &_1179;
        _1188 = &(*_1189);
        _1187 = <Vec<ExtensionType> as Deref>::deref(move _1188) -> [return: bb552, unwind: bb944];
    }

    bb552: {
        _1186 = &(*_1187);
        StorageDead(_1188);
        _1185 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _1186) -> [return: bb553, unwind: bb944];
    }

    bb553: {
        StorageDead(_1186);
        _1184 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1185) -> [return: bb554, unwind: bb944];
    }

    bb554: {
        _1760 = const true;
        StorageDead(_1185);
        _1190 = discriminant(_1184);
        switchInt(move _1190) -> [0: bb555, 1: bb556, otherwise: bb11];
    }

    bb555: {
        StorageLive(_1194);
        _1194 = ((_1184 as Continue).0: usize);
        _1142 = _1194;
        StorageDead(_1194);
        drop(_1179) -> [return: bb558, unwind: bb942];
    }

    bb556: {
        StorageLive(_1191);
        _1191 = move ((_1184 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1193);
        _1193 = move _1191;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1193) -> [return: bb557, unwind: bb941];
    }

    bb557: {
        StorageDead(_1193);
        StorageDead(_1191);
        drop(_1179) -> [return: bb843, unwind: bb942];
    }

    bb558: {
        StorageDead(_1179);
        drop(_1170) -> [return: bb559, unwind: bb943];
    }

    bb559: {
        StorageDead(_1170);
        StorageDead(_1158);
        drop(_1149) -> [return: bb560, unwind: bb1034];
    }

    bb560: {
        StorageDead(_1149);
        _1879 = discriminant(_1184);
        StorageDead(_1189);
        StorageDead(_1187);
        _1760 = const false;
        StorageDead(_1184);
        goto -> bb562;
    }

    bb561: {
        StorageDead(_1148);
        StorageDead(_1147);
        StorageDead(_1146);
        _1142 = const _;
        goto -> bb562;
    }

    bb562: {
        StorageDead(_1145);
        drop(_1143) -> [return: bb563, unwind: bb950];
    }

    bb563: {
        StorageDead(_1143);
        StorageLive(_1195);
        StorageLive(_1196);
        _1196 = &_1081;
        StorageLive(_1197);
        _1197 = _1142;
        _1195 = anchor_lang::prelude::Rent::minimum_balance(move _1196, move _1197) -> [return: bb564, unwind: bb950];
    }

    bb564: {
        StorageDead(_1197);
        StorageDead(_1196);
        StorageLive(_1198);
        StorageLive(_1199);
        StorageLive(_1200);
        _1200 = &_111;
        _1199 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1200) -> [return: bb565, unwind: bb950];
    }

    bb565: {
        StorageDead(_1200);
        StorageLive(_1201);
        StorageLive(_1202);
        _1202 = &(*_57);
        _1201 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1202) -> [return: bb566, unwind: bb940];
    }

    bb566: {
        StorageDead(_1202);
        _1759 = const true;
        _1198 = anchor_lang::system_program::CreateAccount::<'_> { from: move _1199, to: move _1201 };
        StorageDead(_1201);
        StorageDead(_1199);
        StorageLive(_1203);
        StorageLive(_1204);
        StorageLive(_1205);
        _1205 = &_141;
        _1204 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1205) -> [return: bb567, unwind: bb1033];
    }

    bb567: {
        StorageDead(_1205);
        StorageLive(_1206);
        _1759 = const false;
        _1206 = move _1198;
        _1203 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _1204, move _1206) -> [return: bb568, unwind: bb1033];
    }

    bb568: {
        StorageDead(_1206);
        StorageDead(_1204);
        StorageLive(_1207);
        StorageLive(_1208);
        StorageLive(_1209);
        StorageLive(_1210);
        StorageLive(_1211);
        _1758 = const true;
        _1211 = move _1203;
        StorageLive(_1212);
        StorageLive(_1213);
        StorageLive(_1214);
        StorageLive(_1215);
        StorageLive(_1216);
        StorageLive(_1217);
        StorageLive(_1218);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        StorageLive(_1223);
        _1223 = const b"insurance_fund_vault";
        _1222 = &(*_1223);
        _1221 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _1222) -> [return: bb569, unwind: bb1031];
    }

    bb569: {
        StorageDead(_1222);
        StorageLive(_1224);
        StorageLive(_1225);
        StorageLive(_1226);
        StorageLive(_1227);
        StorageLive(_1228);
        StorageLive(_1229);
        StorageLive(_1230);
        _2103 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1230 = &(*_2103);
        _1229 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1230) -> [return: bb570, unwind: bb1031];
    }

    bb570: {
        StorageDead(_1230);
        _1228 = ((*_1229).14: u16);
        _1227 = core::num::<impl u16>::to_le_bytes(move _1228) -> [return: bb571, unwind: bb1031];
    }

    bb571: {
        _1226 = &_1227;
        StorageDead(_1228);
        _1225 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _1226) -> [return: bb572, unwind: bb1031];
    }

    bb572: {
        _1224 = &(*_1225);
        StorageDead(_1226);
        StorageLive(_1231);
        StorageLive(_1232);
        StorageLive(_1233);
        StorageLive(_1234);
        StorageLive(_1235);
        StorageLive(_1236);
        _1236 = _1090;
        _1235 = [move _1236];
        _1234 = &_1235;
        StorageDead(_1236);
        StorageLive(_1237);
        _1237 = RangeFull;
        _1233 = <[u8; 1] as Index<RangeFull>>::index(move _1234, move _1237) -> [return: bb573, unwind: bb1031];
    }

    bb573: {
        StorageDead(_1237);
        StorageDead(_1234);
        _1232 = &(*_1233);
        _1231 = &(*_1232);
        _1220 = [move _1221, move _1224, move _1231];
        _1219 = &_1220;
        StorageDead(_1231);
        StorageDead(_1224);
        StorageDead(_1221);
        StorageLive(_1238);
        _1238 = RangeFull;
        _1218 = <[&[u8]; 3] as Index<RangeFull>>::index(move _1219, move _1238) -> [return: bb574, unwind: bb1031];
    }

    bb574: {
        StorageDead(_1238);
        StorageDead(_1219);
        _1217 = &(*_1218);
        _1216 = &(*_1217);
        _1215 = [move _1216];
        StorageDead(_1216);
        _1214 = &_1215;
        _1213 = &(*_1214);
        _1212 = move _1213 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1213);
        _1758 = const false;
        _1210 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _1211, move _1212) -> [return: bb575, unwind: bb1031];
    }

    bb575: {
        _1757 = const true;
        StorageDead(_1212);
        _1758 = const false;
        StorageDead(_1211);
        StorageLive(_1239);
        _1239 = _1195;
        StorageLive(_1240);
        StorageLive(_1241);
        _1241 = _1142;
        _1240 = move _1241 as u64 (IntToInt);
        StorageDead(_1241);
        StorageLive(_1242);
        StorageLive(_1243);
        StorageLive(_1244);
        StorageLive(_1245);
        StorageLive(_1246);
        StorageLive(_1247);
        _1247 = &_156;
        _1246 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1247) -> [return: bb576, unwind: bb1029];
    }

    bb576: {
        _1245 = &(*_1246);
        StorageDead(_1247);
        _1244 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1245) -> [return: bb577, unwind: bb1029];
    }

    bb577: {
        StorageDead(_1245);
        _1243 = &_1244;
        _1242 = &(*_1243);
        _1757 = const false;
        _1209 = anchor_lang::system_program::create_account(move _1210, move _1239, move _1240, move _1242) -> [return: bb578, unwind: bb1029];
    }

    bb578: {
        StorageDead(_1242);
        StorageDead(_1240);
        StorageDead(_1239);
        _1757 = const false;
        StorageDead(_1210);
        _1208 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1209) -> [return: bb579, unwind: bb1033];
    }

    bb579: {
        StorageDead(_1209);
        _1248 = discriminant(_1208);
        switchInt(move _1248) -> [0: bb580, 1: bb581, otherwise: bb11];
    }

    bb580: {
        StorageLive(_1252);
        _1252 = ((_1208 as Continue).0: ());
        _1207 = _1252;
        StorageDead(_1252);
        _1881 = discriminant(_1208);
        StorageDead(_1246);
        StorageDead(_1244);
        StorageDead(_1243);
        StorageDead(_1235);
        StorageDead(_1233);
        StorageDead(_1232);
        StorageDead(_1229);
        StorageDead(_1227);
        StorageDead(_1225);
        StorageDead(_1223);
        StorageDead(_1220);
        StorageDead(_1218);
        StorageDead(_1217);
        StorageDead(_1215);
        StorageDead(_1214);
        StorageDead(_1208);
        StorageDead(_1207);
        _1139 = const ();
        StorageDead(_1203);
        _1759 = const false;
        StorageDead(_1198);
        StorageDead(_1195);
        StorageDead(_1142);
        goto -> bb711;
    }

    bb581: {
        StorageLive(_1249);
        _1249 = move ((_1208 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1251);
        _1251 = move _1249;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1251) -> [return: bb582, unwind: bb1027];
    }

    bb582: {
        StorageDead(_1251);
        StorageDead(_1249);
        _1941 = discriminant(_1208);
        StorageDead(_1246);
        StorageDead(_1244);
        StorageDead(_1243);
        StorageDead(_1235);
        StorageDead(_1233);
        StorageDead(_1232);
        StorageDead(_1229);
        StorageDead(_1227);
        StorageDead(_1225);
        StorageDead(_1223);
        StorageDead(_1220);
        StorageDead(_1218);
        StorageDead(_1217);
        StorageDead(_1215);
        StorageDead(_1214);
        StorageDead(_1208);
        StorageDead(_1207);
        StorageDead(_1203);
        _1759 = const false;
        StorageDead(_1198);
        StorageDead(_1195);
        goto -> bb850;
    }

    bb583: {
        StorageDead(_1141);
        StorageLive(_1253);
        StorageLive(_1254);
        StorageLive(_1255);
        StorageLive(_1256);
        StorageLive(_1257);
        _1257 = &_111;
        _1256 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1257) -> [return: bb584, unwind: bb950];
    }

    bb584: {
        _1255 = &_1256;
        StorageDead(_1257);
        StorageLive(_1258);
        StorageLive(_1259);
        StorageLive(_1260);
        _1260 = &(*_57);
        _1259 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1260) -> [return: bb585, unwind: bb950];
    }

    bb585: {
        _1258 = &_1259;
        StorageDead(_1260);
        _1254 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1255, move _1258) -> [return: bb586, unwind: bb950];
    }

    bb586: {
        switchInt(move _1254) -> [0: bb595, otherwise: bb587];
    }

    bb587: {
        StorageDead(_1259);
        StorageDead(_1258);
        StorageDead(_1256);
        StorageDead(_1255);
        StorageLive(_1262);
        StorageLive(_1263);
        StorageLive(_1264);
        StorageLive(_1265);
        StorageLive(_1266);
        _1704 = const _;
        _1266 = &(*_1704);
        _1265 = anchor_lang::error::ErrorCode::name(move _1266) -> [return: bb588, unwind: bb950];
    }

    bb588: {
        StorageDead(_1266);
        StorageLive(_1268);
        StorageLive(_1269);
        _1269 = TryingToInitPayerAsProgramAccount;
        _1268 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _1269) -> [return: bb589, unwind: bb939];
    }

    bb589: {
        StorageDead(_1269);
        StorageLive(_1270);
        StorageLive(_1271);
        _1703 = const _;
        _1271 = &(*_1703);
        _1270 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _1271) -> [return: bb590, unwind: bb939];
    }

    bb590: {
        StorageDead(_1271);
        StorageLive(_1273);
        StorageLive(_1274);
        StorageLive(_1275);
        _1275 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/admin.rs", line: const 4938_u32 };
        _1274 = anchor_lang::error::ErrorOrigin::Source(move _1275);
        StorageDead(_1275);
        _1273 = Option::<ErrorOrigin>::Some(move _1274);
        StorageDead(_1274);
        StorageLive(_1276);
        _1276 = Option::<ComparedValues>::None;
        _1264 = anchor_lang::error::AnchorError { error_name: move _1265, error_code_number: move _1268, error_msg: move _1270, error_origin: move _1273, compared_values: move _1276 };
        StorageDead(_1276);
        StorageDead(_1273);
        StorageDead(_1270);
        StorageDead(_1268);
        StorageDead(_1265);
        _1263 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _1264) -> [return: bb591, unwind: bb950];
    }

    bb591: {
        _1756 = const true;
        StorageDead(_1264);
        StorageLive(_1277);
        StorageLive(_1278);
        StorageLive(_1279);
        _1279 = &_111;
        _1278 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1279) -> [return: bb592, unwind: bb1026];
    }

    bb592: {
        StorageDead(_1279);
        StorageLive(_1280);
        StorageLive(_1281);
        _1281 = &(*_57);
        _1280 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1281) -> [return: bb593, unwind: bb1026];
    }

    bb593: {
        StorageDead(_1281);
        _1277 = (move _1278, move _1280);
        StorageDead(_1280);
        StorageDead(_1278);
        _1756 = const false;
        _1262 = anchor_lang::error::Error::with_pubkeys(move _1263, move _1277) -> [return: bb594, unwind: bb1026];
    }

    bb594: {
        StorageDead(_1277);
        _1756 = const false;
        StorageDead(_1263);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1262);
        StorageDead(_1262);
        StorageDead(_1254);
        StorageDead(_1253);
        goto -> bb851;
    }

    bb595: {
        StorageDead(_1259);
        StorageDead(_1258);
        StorageDead(_1256);
        StorageDead(_1255);
        _1253 = const ();
        StorageDead(_1254);
        StorageDead(_1253);
        StorageLive(_1282);
        StorageLive(_1283);
        StorageLive(_1284);
        StorageLive(_1285);
        _1285 = &_1081;
        StorageLive(_1286);
        StorageLive(_1287);
        StorageLive(_1288);
        _2104 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1288 = &(*_2104);
        _1287 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1288) -> [return: bb596, unwind: bb950];
    }

    bb596: {
        StorageDead(_1288);
        StorageLive(_1289);
        StorageLive(_1290);
        _1735 = deref_copy (_1287.3: &anchor_lang::prelude::Pubkey);
        _1290 = &(*_1735);
        StorageLive(_1291);
        StorageLive(_1292);
        _1292 = <Token2022 as anchor_lang::Id>::id() -> [return: bb597, unwind: bb938];
    }

    bb597: {
        _1291 = &_1292;
        _1289 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1290, move _1291) -> [return: bb598, unwind: bb938];
    }

    bb598: {
        switchInt(move _1289) -> [0: bb627, otherwise: bb599];
    }

    bb599: {
        StorageDead(_1292);
        StorageDead(_1291);
        StorageDead(_1290);
        StorageLive(_1293);
        StorageLive(_1294);
        StorageLive(_1295);
        StorageLive(_1296);
        _1296 = &_1287;
        _1295 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _1296) -> [return: bb600, unwind: bb938];
    }

    bb600: {
        StorageDead(_1296);
        _1294 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1295) -> [return: bb601, unwind: bb938];
    }

    bb601: {
        StorageDead(_1295);
        _1297 = discriminant(_1294);
        switchInt(move _1297) -> [0: bb602, 1: bb603, otherwise: bb11];
    }

    bb602: {
        StorageLive(_1301);
        _1301 = move ((_1294 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _1293 = move _1301;
        StorageDead(_1301);
        _1883 = discriminant(_1294);
        StorageDead(_1294);
        StorageLive(_1302);
        StorageLive(_1303);
        StorageLive(_1304);
        StorageLive(_1305);
        StorageLive(_1306);
        StorageLive(_1307);
        StorageLive(_1308);
        _1308 = &_1293;
        _1307 = &(*_1308);
        _1306 = <Ref<'_, &mut [u8]> as Deref>::deref(move _1307) -> [return: bb605, unwind: bb937];
    }

    bb603: {
        StorageLive(_1298);
        _1298 = move ((_1294 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1300);
        _1300 = move _1298;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1300) -> [return: bb604, unwind: bb1024];
    }

    bb604: {
        StorageDead(_1300);
        StorageDead(_1298);
        _1939 = discriminant(_1294);
        StorageDead(_1294);
        goto -> bb839;
    }

    bb605: {
        _1736 = deref_copy (*_1306);
        _1305 = &(*_1736);
        StorageDead(_1307);
        _1304 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _1305) -> [return: bb606, unwind: bb937];
    }

    bb606: {
        StorageDead(_1305);
        _1303 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1304) -> [return: bb607, unwind: bb937];
    }

    bb607: {
        StorageDead(_1304);
        _1309 = discriminant(_1303);
        switchInt(move _1309) -> [0: bb608, 1: bb609, otherwise: bb11];
    }

    bb608: {
        StorageLive(_1313);
        _1313 = move ((_1303 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _1302 = move _1313;
        StorageDead(_1313);
        _1885 = discriminant(_1303);
        StorageDead(_1308);
        StorageDead(_1306);
        StorageDead(_1303);
        StorageLive(_1314);
        StorageLive(_1315);
        StorageLive(_1316);
        StorageLive(_1317);
        _1317 = &_1302;
        _1316 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _1317) -> [return: bb611, unwind: bb937];
    }

    bb609: {
        StorageLive(_1310);
        _1310 = move ((_1303 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1312);
        _1312 = move _1310;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1312) -> [return: bb610, unwind: bb1023];
    }

    bb610: {
        StorageDead(_1312);
        StorageDead(_1310);
        _1937 = discriminant(_1303);
        StorageDead(_1308);
        StorageDead(_1306);
        StorageDead(_1303);
        goto -> bb838;
    }

    bb611: {
        StorageDead(_1317);
        _1315 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1316) -> [return: bb612, unwind: bb937];
    }

    bb612: {
        StorageDead(_1316);
        _1318 = discriminant(_1315);
        switchInt(move _1318) -> [0: bb613, 1: bb614, otherwise: bb11];
    }

    bb613: {
        StorageLive(_1322);
        _1322 = move ((_1315 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _1314 = move _1322;
        StorageDead(_1322);
        _1887 = discriminant(_1315);
        StorageDead(_1315);
        StorageLive(_1323);
        StorageLive(_1324);
        StorageLive(_1325);
        StorageLive(_1326);
        StorageLive(_1327);
        _1327 = &_1314;
        _1326 = &(*_1327);
        _1325 = <Vec<ExtensionType> as Deref>::deref(move _1326) -> [return: bb616, unwind: bb936];
    }

    bb614: {
        StorageLive(_1319);
        _1319 = move ((_1315 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1321);
        _1321 = move _1319;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1321) -> [return: bb615, unwind: bb1022];
    }

    bb615: {
        StorageDead(_1321);
        StorageDead(_1319);
        _1935 = discriminant(_1315);
        StorageDead(_1315);
        StorageDead(_1314);
        goto -> bb838;
    }

    bb616: {
        _1324 = &(*_1325);
        StorageDead(_1326);
        _1323 = ExtensionType::get_required_init_account_extensions(move _1324) -> [return: bb617, unwind: bb936];
    }

    bb617: {
        StorageDead(_1324);
        StorageDead(_1327);
        StorageDead(_1325);
        StorageLive(_1328);
        StorageLive(_1329);
        StorageLive(_1330);
        StorageLive(_1331);
        StorageLive(_1332);
        StorageLive(_1333);
        _1333 = &_1323;
        _1332 = &(*_1333);
        _1331 = <Vec<ExtensionType> as Deref>::deref(move _1332) -> [return: bb618, unwind: bb935];
    }

    bb618: {
        _1330 = &(*_1331);
        StorageDead(_1332);
        _1329 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _1330) -> [return: bb619, unwind: bb935];
    }

    bb619: {
        StorageDead(_1330);
        _1328 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1329) -> [return: bb620, unwind: bb935];
    }

    bb620: {
        _1755 = const true;
        StorageDead(_1329);
        _1334 = discriminant(_1328);
        switchInt(move _1334) -> [0: bb621, 1: bb622, otherwise: bb11];
    }

    bb621: {
        StorageLive(_1338);
        _1338 = ((_1328 as Continue).0: usize);
        _1286 = _1338;
        StorageDead(_1338);
        drop(_1323) -> [return: bb624, unwind: bb933];
    }

    bb622: {
        StorageLive(_1335);
        _1335 = move ((_1328 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1337);
        _1337 = move _1335;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1337) -> [return: bb623, unwind: bb932];
    }

    bb623: {
        StorageDead(_1337);
        StorageDead(_1335);
        drop(_1323) -> [return: bb835, unwind: bb933];
    }

    bb624: {
        StorageDead(_1323);
        drop(_1314) -> [return: bb625, unwind: bb934];
    }

    bb625: {
        StorageDead(_1314);
        StorageDead(_1302);
        drop(_1293) -> [return: bb626, unwind: bb1021];
    }

    bb626: {
        StorageDead(_1293);
        _1889 = discriminant(_1328);
        StorageDead(_1333);
        StorageDead(_1331);
        _1755 = const false;
        StorageDead(_1328);
        goto -> bb628;
    }

    bb627: {
        StorageDead(_1292);
        StorageDead(_1291);
        StorageDead(_1290);
        _1286 = const _;
        goto -> bb628;
    }

    bb628: {
        StorageDead(_1289);
        drop(_1287) -> [return: bb629, unwind: bb950];
    }

    bb629: {
        StorageDead(_1287);
        _1284 = anchor_lang::prelude::Rent::minimum_balance(move _1285, move _1286) -> [return: bb630, unwind: bb950];
    }

    bb630: {
        StorageDead(_1286);
        StorageDead(_1285);
        _1283 = <u64 as Ord>::max(move _1284, const 1_u64) -> [return: bb631, unwind: bb950];
    }

    bb631: {
        StorageDead(_1284);
        StorageLive(_1339);
        _1339 = _1137;
        _1282 = core::num::<impl u64>::saturating_sub(move _1283, move _1339) -> [return: bb632, unwind: bb950];
    }

    bb632: {
        StorageDead(_1339);
        StorageDead(_1283);
        StorageLive(_1340);
        StorageLive(_1341);
        StorageLive(_1342);
        _1342 = _1282;
        _1341 = Gt(move _1342, const 0_u64);
        switchInt(move _1341) -> [0: bb643, otherwise: bb633];
    }

    bb633: {
        StorageDead(_1342);
        StorageLive(_1343);
        StorageLive(_1344);
        StorageLive(_1345);
        _1345 = &_111;
        _1344 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1345) -> [return: bb634, unwind: bb950];
    }

    bb634: {
        StorageDead(_1345);
        StorageLive(_1346);
        StorageLive(_1347);
        _1347 = &(*_57);
        _1346 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1347) -> [return: bb635, unwind: bb931];
    }

    bb635: {
        StorageDead(_1347);
        _1754 = const true;
        _1343 = anchor_lang::system_program::Transfer::<'_> { from: move _1344, to: move _1346 };
        StorageDead(_1346);
        StorageDead(_1344);
        StorageLive(_1348);
        StorageLive(_1349);
        StorageLive(_1350);
        _1350 = &_141;
        _1349 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1350) -> [return: bb636, unwind: bb1020];
    }

    bb636: {
        StorageDead(_1350);
        StorageLive(_1351);
        _1754 = const false;
        _1351 = move _1343;
        _1348 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _1349, move _1351) -> [return: bb637, unwind: bb1020];
    }

    bb637: {
        StorageDead(_1351);
        StorageDead(_1349);
        StorageLive(_1352);
        StorageLive(_1353);
        StorageLive(_1354);
        StorageLive(_1355);
        _1355 = move _1348;
        StorageLive(_1356);
        _1356 = _1282;
        _1354 = anchor_lang::system_program::transfer(move _1355, move _1356) -> [return: bb638, unwind: bb1020];
    }

    bb638: {
        StorageDead(_1356);
        StorageDead(_1355);
        _1353 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1354) -> [return: bb639, unwind: bb1020];
    }

    bb639: {
        StorageDead(_1354);
        _1357 = discriminant(_1353);
        switchInt(move _1357) -> [0: bb640, 1: bb641, otherwise: bb11];
    }

    bb640: {
        StorageLive(_1361);
        _1361 = ((_1353 as Continue).0: ());
        _1352 = _1361;
        StorageDead(_1361);
        _1891 = discriminant(_1353);
        StorageDead(_1353);
        StorageDead(_1352);
        _1340 = const ();
        StorageDead(_1348);
        _1754 = const false;
        StorageDead(_1343);
        goto -> bb644;
    }

    bb641: {
        StorageLive(_1358);
        _1358 = move ((_1353 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1360);
        _1360 = move _1358;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1360) -> [return: bb642, unwind: bb1018];
    }

    bb642: {
        StorageDead(_1360);
        StorageDead(_1358);
        _1931 = discriminant(_1353);
        StorageDead(_1353);
        StorageDead(_1352);
        StorageDead(_1348);
        _1754 = const false;
        StorageDead(_1343);
        StorageDead(_1341);
        StorageDead(_1340);
        goto -> bb842;
    }

    bb643: {
        StorageDead(_1342);
        _1340 = const ();
        goto -> bb644;
    }

    bb644: {
        StorageDead(_1341);
        StorageDead(_1340);
        StorageLive(_1362);
        StorageLive(_1363);
        StorageLive(_1364);
        _1364 = &(*_57);
        _1363 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1364) -> [return: bb645, unwind: bb950];
    }

    bb645: {
        StorageDead(_1364);
        _1753 = const true;
        _1362 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _1363 };
        StorageDead(_1363);
        StorageLive(_1365);
        StorageLive(_1366);
        StorageLive(_1367);
        _1367 = &_141;
        _1366 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1367) -> [return: bb646, unwind: bb1017];
    }

    bb646: {
        StorageDead(_1367);
        StorageLive(_1368);
        _1753 = const false;
        _1368 = move _1362;
        _1365 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _1366, move _1368) -> [return: bb647, unwind: bb1017];
    }

    bb647: {
        StorageDead(_1368);
        StorageDead(_1366);
        StorageLive(_1369);
        StorageLive(_1370);
        StorageLive(_1371);
        StorageLive(_1372);
        StorageLive(_1373);
        _1752 = const true;
        _1373 = move _1365;
        StorageLive(_1374);
        StorageLive(_1375);
        StorageLive(_1376);
        StorageLive(_1377);
        StorageLive(_1378);
        StorageLive(_1379);
        StorageLive(_1380);
        StorageLive(_1381);
        StorageLive(_1382);
        StorageLive(_1383);
        StorageLive(_1384);
        StorageLive(_1385);
        _1385 = const b"insurance_fund_vault";
        _1384 = &(*_1385);
        _1383 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _1384) -> [return: bb648, unwind: bb1015];
    }

    bb648: {
        StorageDead(_1384);
        StorageLive(_1386);
        StorageLive(_1387);
        StorageLive(_1388);
        StorageLive(_1389);
        StorageLive(_1390);
        StorageLive(_1391);
        StorageLive(_1392);
        _2105 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1392 = &(*_2105);
        _1391 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1392) -> [return: bb649, unwind: bb1015];
    }

    bb649: {
        StorageDead(_1392);
        _1390 = ((*_1391).14: u16);
        _1389 = core::num::<impl u16>::to_le_bytes(move _1390) -> [return: bb650, unwind: bb1015];
    }

    bb650: {
        _1388 = &_1389;
        StorageDead(_1390);
        _1387 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _1388) -> [return: bb651, unwind: bb1015];
    }

    bb651: {
        _1386 = &(*_1387);
        StorageDead(_1388);
        StorageLive(_1393);
        StorageLive(_1394);
        StorageLive(_1395);
        StorageLive(_1396);
        StorageLive(_1397);
        StorageLive(_1398);
        _1398 = _1090;
        _1397 = [move _1398];
        _1396 = &_1397;
        StorageDead(_1398);
        StorageLive(_1399);
        _1399 = RangeFull;
        _1395 = <[u8; 1] as Index<RangeFull>>::index(move _1396, move _1399) -> [return: bb652, unwind: bb1015];
    }

    bb652: {
        StorageDead(_1399);
        StorageDead(_1396);
        _1394 = &(*_1395);
        _1393 = &(*_1394);
        _1382 = [move _1383, move _1386, move _1393];
        _1381 = &_1382;
        StorageDead(_1393);
        StorageDead(_1386);
        StorageDead(_1383);
        StorageLive(_1400);
        _1400 = RangeFull;
        _1380 = <[&[u8]; 3] as Index<RangeFull>>::index(move _1381, move _1400) -> [return: bb653, unwind: bb1015];
    }

    bb653: {
        StorageDead(_1400);
        StorageDead(_1381);
        _1379 = &(*_1380);
        _1378 = &(*_1379);
        _1377 = [move _1378];
        StorageDead(_1378);
        _1376 = &_1377;
        _1375 = &(*_1376);
        _1374 = move _1375 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1375);
        _1752 = const false;
        _1372 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _1373, move _1374) -> [return: bb654, unwind: bb1015];
    }

    bb654: {
        _1751 = const true;
        StorageDead(_1374);
        _1752 = const false;
        StorageDead(_1373);
        StorageLive(_1401);
        StorageLive(_1402);
        StorageLive(_1403);
        StorageLive(_1404);
        _2106 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1404 = &(*_2106);
        _1403 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1404) -> [return: bb655, unwind: bb1013];
    }

    bb655: {
        StorageDead(_1404);
        StorageLive(_1405);
        StorageLive(_1406);
        _1737 = deref_copy (_1403.3: &anchor_lang::prelude::Pubkey);
        _1406 = &(*_1737);
        StorageLive(_1407);
        StorageLive(_1408);
        _1408 = <Token2022 as anchor_lang::Id>::id() -> [return: bb656, unwind: bb930];
    }

    bb656: {
        _1407 = &_1408;
        _1405 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1406, move _1407) -> [return: bb657, unwind: bb930];
    }

    bb657: {
        switchInt(move _1405) -> [0: bb686, otherwise: bb658];
    }

    bb658: {
        StorageDead(_1408);
        StorageDead(_1407);
        StorageDead(_1406);
        StorageLive(_1409);
        StorageLive(_1410);
        StorageLive(_1411);
        StorageLive(_1412);
        _1412 = &_1403;
        _1411 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _1412) -> [return: bb659, unwind: bb930];
    }

    bb659: {
        StorageDead(_1412);
        _1410 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1411) -> [return: bb660, unwind: bb930];
    }

    bb660: {
        StorageDead(_1411);
        _1413 = discriminant(_1410);
        switchInt(move _1413) -> [0: bb661, 1: bb662, otherwise: bb11];
    }

    bb661: {
        StorageLive(_1417);
        _1417 = move ((_1410 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _1409 = move _1417;
        StorageDead(_1417);
        _1893 = discriminant(_1410);
        StorageDead(_1410);
        StorageLive(_1418);
        StorageLive(_1419);
        StorageLive(_1420);
        StorageLive(_1421);
        StorageLive(_1422);
        StorageLive(_1423);
        StorageLive(_1424);
        _1424 = &_1409;
        _1423 = &(*_1424);
        _1422 = <Ref<'_, &mut [u8]> as Deref>::deref(move _1423) -> [return: bb664, unwind: bb929];
    }

    bb662: {
        StorageLive(_1414);
        _1414 = move ((_1410 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1416);
        _1416 = move _1414;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1416) -> [return: bb663, unwind: bb1011];
    }

    bb663: {
        StorageDead(_1416);
        StorageDead(_1414);
        _1929 = discriminant(_1410);
        StorageDead(_1410);
        goto -> bb829;
    }

    bb664: {
        _1738 = deref_copy (*_1422);
        _1421 = &(*_1738);
        StorageDead(_1423);
        _1420 = StateWithExtensions::<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>::unpack(move _1421) -> [return: bb665, unwind: bb929];
    }

    bb665: {
        StorageDead(_1421);
        _1419 = <std::result::Result<StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1420) -> [return: bb666, unwind: bb929];
    }

    bb666: {
        StorageDead(_1420);
        _1425 = discriminant(_1419);
        switchInt(move _1425) -> [0: bb667, 1: bb668, otherwise: bb11];
    }

    bb667: {
        StorageLive(_1429);
        _1429 = move ((_1419 as Continue).0: anchor_spl::token_2022::spl_token_2022::extension::StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint>);
        _1418 = move _1429;
        StorageDead(_1429);
        _1895 = discriminant(_1419);
        StorageDead(_1424);
        StorageDead(_1422);
        StorageDead(_1419);
        StorageLive(_1430);
        StorageLive(_1431);
        StorageLive(_1432);
        StorageLive(_1433);
        _1433 = &_1418;
        _1432 = <StateWithExtensions<'_, anchor_spl::token_2022::spl_token_2022::state::Mint> as BaseStateWithExtensions<anchor_spl::token_2022::spl_token_2022::state::Mint>>::get_extension_types(move _1433) -> [return: bb670, unwind: bb929];
    }

    bb668: {
        StorageLive(_1426);
        _1426 = move ((_1419 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1428);
        _1428 = move _1426;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1428) -> [return: bb669, unwind: bb1010];
    }

    bb669: {
        StorageDead(_1428);
        StorageDead(_1426);
        _1927 = discriminant(_1419);
        StorageDead(_1424);
        StorageDead(_1422);
        StorageDead(_1419);
        goto -> bb828;
    }

    bb670: {
        StorageDead(_1433);
        _1431 = <std::result::Result<Vec<ExtensionType>, anchor_lang::prelude::ProgramError> as Try>::branch(move _1432) -> [return: bb671, unwind: bb929];
    }

    bb671: {
        StorageDead(_1432);
        _1434 = discriminant(_1431);
        switchInt(move _1434) -> [0: bb672, 1: bb673, otherwise: bb11];
    }

    bb672: {
        StorageLive(_1438);
        _1438 = move ((_1431 as Continue).0: std::vec::Vec<anchor_spl::token_2022::spl_token_2022::extension::ExtensionType>);
        _1430 = move _1438;
        StorageDead(_1438);
        _1897 = discriminant(_1431);
        StorageDead(_1431);
        StorageLive(_1439);
        StorageLive(_1440);
        StorageLive(_1441);
        StorageLive(_1442);
        StorageLive(_1443);
        _1443 = &_1430;
        _1442 = &(*_1443);
        _1441 = <Vec<ExtensionType> as Deref>::deref(move _1442) -> [return: bb675, unwind: bb928];
    }

    bb673: {
        StorageLive(_1435);
        _1435 = move ((_1431 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1437);
        _1437 = move _1435;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1437) -> [return: bb674, unwind: bb1009];
    }

    bb674: {
        StorageDead(_1437);
        StorageDead(_1435);
        _1925 = discriminant(_1431);
        StorageDead(_1431);
        StorageDead(_1430);
        goto -> bb828;
    }

    bb675: {
        _1440 = &(*_1441);
        StorageDead(_1442);
        _1439 = ExtensionType::get_required_init_account_extensions(move _1440) -> [return: bb676, unwind: bb928];
    }

    bb676: {
        StorageDead(_1440);
        StorageDead(_1443);
        StorageDead(_1441);
        StorageLive(_1444);
        StorageLive(_1445);
        StorageLive(_1446);
        StorageLive(_1447);
        StorageLive(_1448);
        StorageLive(_1449);
        _1449 = &_1439;
        _1448 = &(*_1449);
        _1447 = <Vec<ExtensionType> as Deref>::deref(move _1448) -> [return: bb677, unwind: bb927];
    }

    bb677: {
        _1446 = &(*_1447);
        StorageDead(_1448);
        _1445 = ExtensionType::try_calculate_account_len::<anchor_spl::token_2022::spl_token_2022::state::Account>(move _1446) -> [return: bb678, unwind: bb927];
    }

    bb678: {
        StorageDead(_1446);
        _1444 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1445) -> [return: bb679, unwind: bb927];
    }

    bb679: {
        _1750 = const true;
        StorageDead(_1445);
        _1450 = discriminant(_1444);
        switchInt(move _1450) -> [0: bb680, 1: bb681, otherwise: bb11];
    }

    bb680: {
        StorageLive(_1454);
        _1454 = ((_1444 as Continue).0: usize);
        _1402 = _1454;
        StorageDead(_1454);
        drop(_1439) -> [return: bb683, unwind: bb925];
    }

    bb681: {
        StorageLive(_1451);
        _1451 = move ((_1444 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1453);
        _1453 = move _1451;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1453) -> [return: bb682, unwind: bb924];
    }

    bb682: {
        StorageDead(_1453);
        StorageDead(_1451);
        drop(_1439) -> [return: bb825, unwind: bb925];
    }

    bb683: {
        StorageDead(_1439);
        drop(_1430) -> [return: bb684, unwind: bb926];
    }

    bb684: {
        StorageDead(_1430);
        StorageDead(_1418);
        drop(_1409) -> [return: bb685, unwind: bb1008];
    }

    bb685: {
        StorageDead(_1409);
        _1899 = discriminant(_1444);
        StorageDead(_1449);
        StorageDead(_1447);
        _1750 = const false;
        StorageDead(_1444);
        goto -> bb687;
    }

    bb686: {
        StorageDead(_1408);
        StorageDead(_1407);
        StorageDead(_1406);
        _1402 = const _;
        goto -> bb687;
    }

    bb687: {
        StorageDead(_1405);
        drop(_1403) -> [return: bb688, unwind: bb1013];
    }

    bb688: {
        StorageDead(_1403);
        _1401 = move _1402 as u64 (IntToInt);
        StorageDead(_1402);
        _1751 = const false;
        _1371 = anchor_lang::system_program::allocate(move _1372, move _1401) -> [return: bb689, unwind: bb1013];
    }

    bb689: {
        StorageDead(_1401);
        _1751 = const false;
        StorageDead(_1372);
        _1370 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1371) -> [return: bb690, unwind: bb1017];
    }

    bb690: {
        StorageDead(_1371);
        _1455 = discriminant(_1370);
        switchInt(move _1455) -> [0: bb691, 1: bb692, otherwise: bb11];
    }

    bb691: {
        StorageLive(_1459);
        _1459 = ((_1370 as Continue).0: ());
        _1369 = _1459;
        StorageDead(_1459);
        _1901 = discriminant(_1370);
        StorageDead(_1397);
        StorageDead(_1395);
        StorageDead(_1394);
        StorageDead(_1391);
        StorageDead(_1389);
        StorageDead(_1387);
        StorageDead(_1385);
        StorageDead(_1382);
        StorageDead(_1380);
        StorageDead(_1379);
        StorageDead(_1377);
        StorageDead(_1376);
        StorageDead(_1370);
        StorageDead(_1369);
        StorageLive(_1460);
        StorageLive(_1461);
        StorageLive(_1462);
        _1462 = &(*_57);
        _1461 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1462) -> [return: bb694, unwind: bb1017];
    }

    bb692: {
        StorageLive(_1456);
        _1456 = move ((_1370 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1458);
        _1458 = move _1456;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1458) -> [return: bb693, unwind: bb1007];
    }

    bb693: {
        StorageDead(_1458);
        StorageDead(_1456);
        _1921 = discriminant(_1370);
        goto -> bb833;
    }

    bb694: {
        StorageDead(_1462);
        _1749 = const true;
        _1460 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _1461 };
        StorageDead(_1461);
        StorageLive(_1463);
        StorageLive(_1464);
        StorageLive(_1465);
        _1465 = &_141;
        _1464 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1465) -> [return: bb695, unwind: bb1006];
    }

    bb695: {
        StorageDead(_1465);
        StorageLive(_1466);
        _1749 = const false;
        _1466 = move _1460;
        _1463 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _1464, move _1466) -> [return: bb696, unwind: bb1006];
    }

    bb696: {
        StorageDead(_1466);
        StorageDead(_1464);
        StorageLive(_1467);
        StorageLive(_1468);
        StorageLive(_1469);
        StorageLive(_1470);
        StorageLive(_1471);
        _1748 = const true;
        _1471 = move _1463;
        StorageLive(_1472);
        StorageLive(_1473);
        StorageLive(_1474);
        StorageLive(_1475);
        StorageLive(_1476);
        StorageLive(_1477);
        StorageLive(_1478);
        StorageLive(_1479);
        StorageLive(_1480);
        StorageLive(_1481);
        StorageLive(_1482);
        StorageLive(_1483);
        _1483 = const b"insurance_fund_vault";
        _1482 = &(*_1483);
        _1481 = <[u8; 20] as AsRef<[u8]>>::as_ref(move _1482) -> [return: bb697, unwind: bb1004];
    }

    bb697: {
        StorageDead(_1482);
        StorageLive(_1484);
        StorageLive(_1485);
        StorageLive(_1486);
        StorageLive(_1487);
        StorageLive(_1488);
        StorageLive(_1489);
        StorageLive(_1490);
        _2107 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1490 = &(*_2107);
        _1489 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1490) -> [return: bb698, unwind: bb1004];
    }

    bb698: {
        StorageDead(_1490);
        _1488 = ((*_1489).14: u16);
        _1487 = core::num::<impl u16>::to_le_bytes(move _1488) -> [return: bb699, unwind: bb1004];
    }

    bb699: {
        _1486 = &_1487;
        StorageDead(_1488);
        _1485 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _1486) -> [return: bb700, unwind: bb1004];
    }

    bb700: {
        _1484 = &(*_1485);
        StorageDead(_1486);
        StorageLive(_1491);
        StorageLive(_1492);
        StorageLive(_1493);
        StorageLive(_1494);
        StorageLive(_1495);
        StorageLive(_1496);
        _1496 = _1090;
        _1495 = [move _1496];
        _1494 = &_1495;
        StorageDead(_1496);
        StorageLive(_1497);
        _1497 = RangeFull;
        _1493 = <[u8; 1] as Index<RangeFull>>::index(move _1494, move _1497) -> [return: bb701, unwind: bb1004];
    }

    bb701: {
        StorageDead(_1497);
        StorageDead(_1494);
        _1492 = &(*_1493);
        _1491 = &(*_1492);
        _1480 = [move _1481, move _1484, move _1491];
        _1479 = &_1480;
        StorageDead(_1491);
        StorageDead(_1484);
        StorageDead(_1481);
        StorageLive(_1498);
        _1498 = RangeFull;
        _1478 = <[&[u8]; 3] as Index<RangeFull>>::index(move _1479, move _1498) -> [return: bb702, unwind: bb1004];
    }

    bb702: {
        StorageDead(_1498);
        StorageDead(_1479);
        _1477 = &(*_1478);
        _1476 = &(*_1477);
        _1475 = [move _1476];
        StorageDead(_1476);
        _1474 = &_1475;
        _1473 = &(*_1474);
        _1472 = move _1473 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_1473);
        _1748 = const false;
        _1470 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _1471, move _1472) -> [return: bb703, unwind: bb1004];
    }

    bb703: {
        _1747 = const true;
        StorageDead(_1472);
        _1748 = const false;
        StorageDead(_1471);
        StorageLive(_1499);
        StorageLive(_1500);
        StorageLive(_1501);
        StorageLive(_1502);
        StorageLive(_1503);
        StorageLive(_1504);
        _1504 = &_156;
        _1503 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1504) -> [return: bb704, unwind: bb1002];
    }

    bb704: {
        _1502 = &(*_1503);
        StorageDead(_1504);
        _1501 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1502) -> [return: bb705, unwind: bb1002];
    }

    bb705: {
        StorageDead(_1502);
        _1500 = &_1501;
        _1499 = &(*_1500);
        _1747 = const false;
        _1469 = anchor_lang::system_program::assign(move _1470, move _1499) -> [return: bb706, unwind: bb1002];
    }

    bb706: {
        StorageDead(_1499);
        _1747 = const false;
        StorageDead(_1470);
        _1468 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1469) -> [return: bb707, unwind: bb1006];
    }

    bb707: {
        StorageDead(_1469);
        _1505 = discriminant(_1468);
        switchInt(move _1505) -> [0: bb708, 1: bb709, otherwise: bb11];
    }

    bb708: {
        StorageLive(_1509);
        _1509 = ((_1468 as Continue).0: ());
        _1467 = _1509;
        StorageDead(_1509);
        _1903 = discriminant(_1468);
        StorageDead(_1503);
        StorageDead(_1501);
        StorageDead(_1500);
        StorageDead(_1495);
        StorageDead(_1493);
        StorageDead(_1492);
        StorageDead(_1489);
        StorageDead(_1487);
        StorageDead(_1485);
        StorageDead(_1483);
        StorageDead(_1480);
        StorageDead(_1478);
        StorageDead(_1477);
        StorageDead(_1475);
        StorageDead(_1474);
        StorageDead(_1468);
        StorageDead(_1467);
        _1139 = const ();
        StorageDead(_1463);
        _1749 = const false;
        StorageDead(_1460);
        StorageDead(_1365);
        _1753 = const false;
        StorageDead(_1362);
        StorageDead(_1282);
        goto -> bb711;
    }

    bb709: {
        StorageLive(_1506);
        _1506 = move ((_1468 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1508);
        _1508 = move _1506;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1508) -> [return: bb710, unwind: bb1000];
    }

    bb710: {
        StorageDead(_1508);
        StorageDead(_1506);
        _1919 = discriminant(_1468);
        StorageDead(_1503);
        StorageDead(_1501);
        StorageDead(_1500);
        StorageDead(_1495);
        StorageDead(_1493);
        StorageDead(_1492);
        StorageDead(_1489);
        StorageDead(_1487);
        StorageDead(_1485);
        StorageDead(_1483);
        StorageDead(_1480);
        StorageDead(_1478);
        StorageDead(_1477);
        StorageDead(_1475);
        StorageDead(_1474);
        StorageDead(_1468);
        StorageDead(_1467);
        StorageDead(_1463);
        _1749 = const false;
        StorageDead(_1460);
        goto -> bb834;
    }

    bb711: {
        StorageDead(_1140);
        StorageDead(_1139);
        StorageLive(_1510);
        StorageLive(_1511);
        _1511 = &_156;
        _1510 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1511) -> [return: bb712, unwind: bb950];
    }

    bb712: {
        _1746 = const true;
        StorageDead(_1511);
        StorageLive(_1512);
        StorageLive(_1513);
        StorageLive(_1514);
        _1514 = &(*_57);
        _1513 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1514) -> [return: bb713, unwind: bb999];
    }

    bb713: {
        StorageDead(_1514);
        StorageLive(_1515);
        StorageLive(_1516);
        _2108 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1516 = &(*_2108);
        _1515 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1516) -> [return: bb714, unwind: bb923];
    }

    bb714: {
        StorageDead(_1516);
        StorageLive(_1517);
        StorageLive(_1518);
        _1518 = &_66;
        _1517 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1518) -> [return: bb715, unwind: bb922];
    }

    bb715: {
        StorageDead(_1518);
        _1512 = anchor_spl::token_2022::InitializeAccount3::<'_> { account: move _1513, mint: move _1515, authority: move _1517 };
        StorageDead(_1517);
        StorageDead(_1515);
        StorageDead(_1513);
        StorageLive(_1519);
        StorageLive(_1520);
        _1746 = const false;
        _1520 = move _1510;
        StorageLive(_1521);
        _1521 = move _1512;
        _1519 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::InitializeAccount3<'_>>::new(move _1520, move _1521) -> [return: bb716, unwind: bb999];
    }

    bb716: {
        StorageDead(_1521);
        StorageDead(_1520);
        StorageLive(_1522);
        StorageLive(_1523);
        StorageLive(_1524);
        StorageLive(_1525);
        _1525 = move _1519;
        _1524 = anchor_spl::token_2022::initialize_account3(move _1525) -> [return: bb717, unwind: bb999];
    }

    bb717: {
        StorageDead(_1525);
        _1523 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _1524) -> [return: bb718, unwind: bb999];
    }

    bb718: {
        StorageDead(_1524);
        _1526 = discriminant(_1523);
        switchInt(move _1526) -> [0: bb719, 1: bb720, otherwise: bb11];
    }

    bb719: {
        StorageLive(_1530);
        _1530 = ((_1523 as Continue).0: ());
        _1522 = _1530;
        StorageDead(_1530);
        _1905 = discriminant(_1523);
        StorageDead(_1523);
        StorageDead(_1522);
        _1130 = const ();
        StorageDead(_1519);
        StorageDead(_1512);
        _1746 = const false;
        StorageDead(_1510);
        StorageDead(_1137);
        goto -> bb723;
    }

    bb720: {
        StorageLive(_1527);
        _1527 = move ((_1523 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_1529);
        _1529 = move _1527;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _1529) -> [return: bb721, unwind: bb997];
    }

    bb721: {
        StorageDead(_1529);
        StorageDead(_1527);
        _1917 = discriminant(_1523);
        StorageDead(_1523);
        StorageDead(_1522);
        StorageDead(_1519);
        StorageDead(_1512);
        _1746 = const false;
        StorageDead(_1510);
        goto -> bb852;
    }

    bb722: {
        StorageDead(_1134);
        StorageDead(_1133);
        _1130 = const ();
        goto -> bb723;
    }

    bb723: {
        StorageDead(_1132);
        StorageDead(_1131);
        StorageDead(_1130);
        StorageLive(_1531);
        StorageLive(_1532);
        StorageLive(_1533);
        StorageLive(_1534);
        StorageLive(_1535);
        _1535 = &_57;
        _1739 = deref_copy (*_1535);
        _1534 = &(*_1739);
        _1533 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::try_from_unchecked(move _1534) -> [return: bb724, unwind: bb950];
    }

    bb724: {
        _1744 = const true;
        _1745 = const true;
        StorageDead(_1534);
        _1536 = discriminant(_1533);
        switchInt(move _1536) -> [0: bb726, 1: bb725, otherwise: bb11];
    }

    bb725: {
        StorageLive(_1538);
        _1538 = move ((_1533 as Err).0: anchor_lang::error::Error);
        StorageLive(_1540);
        StorageLive(_1541);
        _1541 = move _1538;
        _1540 = anchor_lang::error::Error::with_account_name::<&str>(move _1541, const "insurance_fund_vault") -> [return: bb727, unwind: bb996];
    }

    bb726: {
        StorageLive(_1537);
        _1537 = move ((_1533 as Ok).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1532 = move _1537;
        StorageDead(_1537);
        _1531 = Box::<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>::new(move _1532) -> [return: bb728, unwind: bb996];
    }

    bb727: {
        StorageDead(_1541);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1540);
        StorageDead(_1540);
        StorageDead(_1538);
        StorageDead(_1532);
        _1915 = discriminant(_1533);
        StorageDead(_1535);
        _1744 = const false;
        _1745 = const false;
        StorageDead(_1533);
        goto -> bb824;
    }

    bb728: {
        StorageDead(_1532);
        _1907 = discriminant(_1533);
        StorageDead(_1535);
        _1744 = const false;
        _1745 = const false;
        StorageDead(_1533);
        StorageLive(_1542);
        StorageLive(_1543);
        _1543 = const false;
        switchInt(move _1543) -> [0: bb764, otherwise: bb729];
    }

    bb729: {
        StorageLive(_1544);
        StorageLive(_1545);
        StorageLive(_1546);
        StorageLive(_1547);
        StorageLive(_1548);
        StorageLive(_1549);
        StorageLive(_1550);
        _2109 = (((_1531.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1550 = &(*_2109);
        _1549 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1550) -> [return: bb730, unwind: bb921];
    }

    bb730: {
        _1548 = &(*_1549);
        _1547 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1548) -> [return: bb731, unwind: bb921];
    }

    bb731: {
        StorageDead(_1550);
        StorageDead(_1548);
        _1546 = &((*_1547).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1551);
        StorageLive(_1552);
        StorageLive(_1553);
        _2110 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1553 = &(*_2110);
        _1552 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1553) -> [return: bb732, unwind: bb921];
    }

    bb732: {
        _1551 = &_1552;
        StorageDead(_1553);
        _1545 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1546, move _1551) -> [return: bb733, unwind: bb921];
    }

    bb733: {
        switchInt(move _1545) -> [0: bb741, otherwise: bb734];
    }

    bb734: {
        StorageDead(_1552);
        StorageDead(_1551);
        StorageDead(_1549);
        StorageDead(_1547);
        StorageDead(_1546);
        StorageLive(_1555);
        StorageLive(_1556);
        StorageLive(_1557);
        StorageLive(_1558);
        _1558 = ConstraintTokenMint;
        _1557 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1558) -> [return: bb735, unwind: bb921];
    }

    bb735: {
        StorageDead(_1558);
        _1556 = anchor_lang::error::Error::with_account_name::<&str>(move _1557, const "insurance_fund_vault") -> [return: bb736, unwind: bb921];
    }

    bb736: {
        _1743 = const true;
        StorageDead(_1557);
        StorageLive(_1559);
        StorageLive(_1560);
        StorageLive(_1561);
        StorageLive(_1562);
        StorageLive(_1563);
        StorageLive(_1564);
        _2111 = (((_1531.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1564 = &(*_2111);
        _1563 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1564) -> [return: bb737, unwind: bb995];
    }

    bb737: {
        _1562 = &(*_1563);
        _1561 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1562) -> [return: bb738, unwind: bb995];
    }

    bb738: {
        StorageDead(_1564);
        StorageDead(_1562);
        _1560 = ((*_1561).0: anchor_lang::prelude::Pubkey);
        StorageLive(_1565);
        StorageLive(_1566);
        _2112 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _1566 = &(*_2112);
        _1565 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::Key>::key(move _1566) -> [return: bb739, unwind: bb995];
    }

    bb739: {
        StorageDead(_1566);
        _1559 = (move _1560, move _1565);
        StorageDead(_1565);
        StorageDead(_1560);
        _1743 = const false;
        _1555 = anchor_lang::error::Error::with_pubkeys(move _1556, move _1559) -> [return: bb740, unwind: bb995];
    }

    bb740: {
        StorageDead(_1559);
        _1743 = const false;
        StorageDead(_1556);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1555);
        StorageDead(_1555);
        StorageDead(_1563);
        StorageDead(_1561);
        StorageDead(_1545);
        StorageDead(_1544);
        goto -> bb823;
    }

    bb741: {
        StorageDead(_1552);
        StorageDead(_1551);
        StorageDead(_1549);
        StorageDead(_1547);
        StorageDead(_1546);
        _1544 = const ();
        StorageDead(_1545);
        StorageDead(_1544);
        StorageLive(_1567);
        StorageLive(_1568);
        StorageLive(_1569);
        StorageLive(_1570);
        StorageLive(_1571);
        StorageLive(_1572);
        StorageLive(_1573);
        _2113 = (((_1531.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1573 = &(*_2113);
        _1572 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1573) -> [return: bb742, unwind: bb921];
    }

    bb742: {
        _1571 = &(*_1572);
        _1570 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1571) -> [return: bb743, unwind: bb921];
    }

    bb743: {
        StorageDead(_1573);
        StorageDead(_1571);
        _1569 = &((*_1570).1: anchor_lang::prelude::Pubkey);
        StorageLive(_1574);
        StorageLive(_1575);
        StorageLive(_1576);
        _1576 = &_66;
        _1575 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1576) -> [return: bb744, unwind: bb921];
    }

    bb744: {
        _1574 = &_1575;
        StorageDead(_1576);
        _1568 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1569, move _1574) -> [return: bb745, unwind: bb921];
    }

    bb745: {
        switchInt(move _1568) -> [0: bb753, otherwise: bb746];
    }

    bb746: {
        StorageDead(_1575);
        StorageDead(_1574);
        StorageDead(_1572);
        StorageDead(_1570);
        StorageDead(_1569);
        StorageLive(_1578);
        StorageLive(_1579);
        StorageLive(_1580);
        StorageLive(_1581);
        _1581 = ConstraintTokenOwner;
        _1580 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1581) -> [return: bb747, unwind: bb921];
    }

    bb747: {
        StorageDead(_1581);
        _1579 = anchor_lang::error::Error::with_account_name::<&str>(move _1580, const "insurance_fund_vault") -> [return: bb748, unwind: bb921];
    }

    bb748: {
        _1742 = const true;
        StorageDead(_1580);
        StorageLive(_1582);
        StorageLive(_1583);
        StorageLive(_1584);
        StorageLive(_1585);
        StorageLive(_1586);
        StorageLive(_1587);
        _2114 = (((_1531.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1587 = &(*_2114);
        _1586 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _1587) -> [return: bb749, unwind: bb993];
    }

    bb749: {
        _1585 = &(*_1586);
        _1584 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _1585) -> [return: bb750, unwind: bb993];
    }

    bb750: {
        StorageDead(_1587);
        StorageDead(_1585);
        _1583 = ((*_1584).1: anchor_lang::prelude::Pubkey);
        StorageLive(_1588);
        StorageLive(_1589);
        _1589 = &_66;
        _1588 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1589) -> [return: bb751, unwind: bb993];
    }

    bb751: {
        StorageDead(_1589);
        _1582 = (move _1583, move _1588);
        StorageDead(_1588);
        StorageDead(_1583);
        _1742 = const false;
        _1578 = anchor_lang::error::Error::with_pubkeys(move _1579, move _1582) -> [return: bb752, unwind: bb993];
    }

    bb752: {
        StorageDead(_1582);
        _1742 = const false;
        StorageDead(_1579);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1578);
        StorageDead(_1578);
        StorageDead(_1586);
        StorageDead(_1584);
        StorageDead(_1568);
        StorageDead(_1567);
        goto -> bb823;
    }

    bb753: {
        StorageDead(_1575);
        StorageDead(_1574);
        StorageDead(_1572);
        StorageDead(_1570);
        StorageDead(_1569);
        _1567 = const ();
        StorageDead(_1568);
        StorageDead(_1567);
        StorageLive(_1590);
        StorageLive(_1591);
        _1591 = &_1125;
        StorageLive(_1592);
        StorageLive(_1593);
        StorageLive(_1594);
        StorageLive(_1595);
        StorageLive(_1596);
        StorageLive(_1597);
        _1597 = &_156;
        _1596 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1597) -> [return: bb754, unwind: bb921];
    }

    bb754: {
        _1595 = &(*_1596);
        StorageDead(_1597);
        _1594 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1595) -> [return: bb755, unwind: bb921];
    }

    bb755: {
        StorageDead(_1595);
        _1593 = &_1594;
        _1592 = &_1593;
        _1590 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _1591, move _1592) -> [return: bb756, unwind: bb921];
    }

    bb756: {
        switchInt(move _1590) -> [0: bb763, otherwise: bb757];
    }

    bb757: {
        StorageDead(_1596);
        StorageDead(_1594);
        StorageDead(_1593);
        StorageDead(_1592);
        StorageDead(_1591);
        StorageLive(_1599);
        StorageLive(_1600);
        StorageLive(_1601);
        StorageLive(_1602);
        _1602 = ConstraintTokenTokenProgram;
        _1601 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1602) -> [return: bb758, unwind: bb921];
    }

    bb758: {
        StorageDead(_1602);
        _1600 = anchor_lang::error::Error::with_account_name::<&str>(move _1601, const "insurance_fund_vault") -> [return: bb759, unwind: bb921];
    }

    bb759: {
        _1741 = const true;
        StorageDead(_1601);
        StorageLive(_1603);
        StorageLive(_1604);
        _1604 = (*_1125);
        StorageLive(_1605);
        StorageLive(_1606);
        StorageLive(_1607);
        StorageLive(_1608);
        _1608 = &_156;
        _1607 = <anchor_lang::prelude::Interface<'_, TokenInterface> as Deref>::deref(move _1608) -> [return: bb760, unwind: bb991];
    }

    bb760: {
        _1606 = &(*_1607);
        StorageDead(_1608);
        _1605 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1606) -> [return: bb761, unwind: bb991];
    }

    bb761: {
        StorageDead(_1606);
        _1603 = (move _1604, move _1605);
        StorageDead(_1605);
        StorageDead(_1604);
        _1741 = const false;
        _1599 = anchor_lang::error::Error::with_pubkeys(move _1600, move _1603) -> [return: bb762, unwind: bb991];
    }

    bb762: {
        StorageDead(_1603);
        _1741 = const false;
        StorageDead(_1600);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1599);
        StorageDead(_1599);
        StorageDead(_1607);
        StorageDead(_1590);
        goto -> bb823;
    }

    bb763: {
        StorageDead(_1596);
        StorageDead(_1594);
        StorageDead(_1593);
        StorageDead(_1592);
        StorageDead(_1591);
        _1542 = const ();
        StorageDead(_1590);
        goto -> bb765;
    }

    bb764: {
        _1542 = const ();
        goto -> bb765;
    }

    bb765: {
        StorageDead(_1543);
        StorageDead(_1542);
        _1124 = move _1531;
        StorageDead(_1531);
        StorageDead(_1125);
        StorageLive(_1609);
        StorageLive(_1610);
        StorageLive(_1611);
        StorageLive(_1612);
        StorageLive(_1613);
        StorageLive(_1614);
        _1614 = &_1124;
        _1613 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _1614) -> [return: bb766, unwind: bb920];
    }

    bb766: {
        _1612 = &(*_1613);
        StorageDead(_1614);
        _1611 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1612) -> [return: bb767, unwind: bb920];
    }

    bb767: {
        StorageDead(_1612);
        _1610 = ((*_1611).6: bool);
        switchInt(move _1610) -> [0: bb768, otherwise: bb771];
    }

    bb768: {
        StorageDead(_1613);
        StorageDead(_1611);
        StorageLive(_1616);
        StorageLive(_1617);
        StorageLive(_1618);
        _1618 = ConstraintMut;
        _1617 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1618) -> [return: bb769, unwind: bb920];
    }

    bb769: {
        StorageDead(_1618);
        _1616 = anchor_lang::error::Error::with_account_name::<&str>(move _1617, const "insurance_fund_vault") -> [return: bb770, unwind: bb920];
    }

    bb770: {
        StorageDead(_1617);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1616);
        StorageDead(_1616);
        StorageDead(_1610);
        StorageDead(_1609);
        goto -> bb822;
    }

    bb771: {
        StorageDead(_1613);
        StorageDead(_1611);
        _1609 = const ();
        StorageDead(_1610);
        StorageDead(_1609);
        StorageLive(_1619);
        StorageLive(_1620);
        StorageLive(_1621);
        _1621 = &_1081;
        StorageLive(_1622);
        StorageLive(_1623);
        StorageLive(_1624);
        StorageLive(_1625);
        _2115 = (((_1124.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1625 = &(*_2115);
        _1624 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1625) -> [return: bb772, unwind: bb920];
    }

    bb772: {
        _1623 = &_1624;
        StorageDead(_1625);
        _1622 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _1623) -> [return: bb773, unwind: bb919];
    }

    bb773: {
        StorageDead(_1623);
        StorageLive(_1626);
        StorageLive(_1627);
        StorageLive(_1628);
        StorageLive(_1629);
        StorageLive(_1630);
        StorageLive(_1631);
        _2116 = (((_1124.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _1631 = &(*_2116);
        _1630 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _1631) -> [return: bb774, unwind: bb919];
    }

    bb774: {
        _1629 = &_1630;
        StorageDead(_1631);
        _1628 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _1629) -> [return: bb775, unwind: bb918];
    }

    bb775: {
        StorageDead(_1629);
        _1627 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _1628) -> [return: bb776, unwind: bb918];
    }

    bb776: {
        _1740 = const true;
        StorageDead(_1628);
        _1632 = discriminant(_1627);
        switchInt(move _1632) -> [0: bb777, 1: bb778, otherwise: bb11];
    }

    bb777: {
        StorageLive(_1636);
        _1636 = ((_1627 as Continue).0: usize);
        _1626 = _1636;
        StorageDead(_1636);
        _1620 = anchor_lang::prelude::Rent::is_exempt(move _1621, move _1622, move _1626) -> [return: bb780, unwind: bb989];
    }

    bb778: {
        StorageLive(_1633);
        _1633 = move ((_1627 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_1635);
        _1635 = move _1633;
        _0 = <std::result::Result<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _1635) -> [return: bb779, unwind: bb989];
    }

    bb779: {
        StorageDead(_1635);
        StorageDead(_1633);
        StorageDead(_1626);
        StorageDead(_1622);
        StorageDead(_1621);
        _1913 = discriminant(_1627);
        drop(_1630) -> [return: bb819, unwind: bb919];
    }

    bb780: {
        switchInt(move _1620) -> [0: bb782, otherwise: bb781];
    }

    bb781: {
        StorageDead(_1626);
        StorageDead(_1622);
        StorageDead(_1621);
        _1909 = discriminant(_1627);
        drop(_1630) -> [return: bb787, unwind: bb919];
    }

    bb782: {
        StorageDead(_1626);
        StorageDead(_1622);
        StorageDead(_1621);
        _1911 = discriminant(_1627);
        drop(_1630) -> [return: bb783, unwind: bb919];
    }

    bb783: {
        StorageDead(_1630);
        _1740 = const false;
        StorageDead(_1627);
        drop(_1624) -> [return: bb784, unwind: bb920];
    }

    bb784: {
        StorageDead(_1624);
        StorageLive(_1638);
        StorageLive(_1639);
        StorageLive(_1640);
        _1640 = ConstraintRentExempt;
        _1639 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1640) -> [return: bb785, unwind: bb920];
    }

    bb785: {
        StorageDead(_1640);
        _1638 = anchor_lang::error::Error::with_account_name::<&str>(move _1639, const "insurance_fund_vault") -> [return: bb786, unwind: bb920];
    }

    bb786: {
        StorageDead(_1639);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1638);
        StorageDead(_1638);
        goto -> bb821;
    }

    bb787: {
        StorageDead(_1630);
        _1740 = const false;
        StorageDead(_1627);
        drop(_1624) -> [return: bb788, unwind: bb920];
    }

    bb788: {
        StorageDead(_1624);
        _1619 = const ();
        StorageDead(_1620);
        StorageDead(_1619);
        StorageLive(_1641);
        StorageLive(_1642);
        StorageLive(_1643);
        StorageLive(_1644);
        StorageLive(_1645);
        _2117 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1645 = &(*_2117);
        _1644 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1645) -> [return: bb789, unwind: bb920];
    }

    bb789: {
        StorageDead(_1645);
        _1643 = &((*_1644).3: anchor_lang::prelude::Pubkey);
        StorageLive(_1646);
        StorageLive(_1647);
        StorageLive(_1648);
        StorageLive(_1649);
        _1649 = &_66;
        _1648 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _1649) -> [return: bb790, unwind: bb920];
    }

    bb790: {
        StorageDead(_1649);
        _1647 = &_1648;
        _1646 = &(*_1647);
        _1642 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1643, move _1646) -> [return: bb791, unwind: bb920];
    }

    bb791: {
        switchInt(move _1642) -> [0: bb793, otherwise: bb792];
    }

    bb792: {
        StorageDead(_1646);
        StorageDead(_1643);
        StorageDead(_1648);
        StorageDead(_1647);
        StorageDead(_1644);
        _1641 = const ();
        StorageDead(_1642);
        StorageDead(_1641);
        StorageLive(_1654);
        StorageLive(_1655);
        StorageLive(_1656);
        StorageLive(_1657);
        StorageLive(_1658);
        StorageLive(_1659);
        _1659 = &_81;
        _1658 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _1659) -> [return: bb796, unwind: bb920];
    }

    bb793: {
        StorageDead(_1646);
        StorageDead(_1643);
        StorageDead(_1648);
        StorageDead(_1647);
        StorageDead(_1644);
        StorageLive(_1651);
        StorageLive(_1652);
        StorageLive(_1653);
        _1653 = ConstraintRaw;
        _1652 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1653) -> [return: bb794, unwind: bb920];
    }

    bb794: {
        StorageDead(_1653);
        _1651 = anchor_lang::error::Error::with_account_name::<&str>(move _1652, const "drift_signer") -> [return: bb795, unwind: bb920];
    }

    bb795: {
        StorageDead(_1652);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1651);
        StorageDead(_1651);
        StorageDead(_1642);
        StorageDead(_1641);
        goto -> bb822;
    }

    bb796: {
        _1657 = &(*_1658);
        StorageDead(_1659);
        _1656 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1657) -> [return: bb797, unwind: bb920];
    }

    bb797: {
        StorageDead(_1657);
        _1655 = ((*_1656).6: bool);
        switchInt(move _1655) -> [0: bb798, otherwise: bb801];
    }

    bb798: {
        StorageDead(_1658);
        StorageDead(_1656);
        StorageLive(_1661);
        StorageLive(_1662);
        StorageLive(_1663);
        _1663 = ConstraintMut;
        _1662 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1663) -> [return: bb799, unwind: bb920];
    }

    bb799: {
        StorageDead(_1663);
        _1661 = anchor_lang::error::Error::with_account_name::<&str>(move _1662, const "state") -> [return: bb800, unwind: bb920];
    }

    bb800: {
        StorageDead(_1662);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1661);
        StorageDead(_1661);
        StorageDead(_1655);
        StorageDead(_1654);
        goto -> bb822;
    }

    bb801: {
        StorageDead(_1658);
        StorageDead(_1656);
        _1654 = const ();
        StorageDead(_1655);
        StorageDead(_1654);
        StorageLive(_1664);
        StorageLive(_1665);
        StorageLive(_1666);
        StorageLive(_1667);
        StorageLive(_1668);
        _1668 = &_111;
        _1667 = &(*_1668);
        _1666 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _1667) -> [return: bb802, unwind: bb920];
    }

    bb802: {
        StorageDead(_1667);
        _1665 = ((*_1666).6: bool);
        switchInt(move _1665) -> [0: bb803, otherwise: bb806];
    }

    bb803: {
        StorageDead(_1668);
        StorageDead(_1666);
        StorageLive(_1670);
        StorageLive(_1671);
        StorageLive(_1672);
        _1672 = ConstraintMut;
        _1671 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1672) -> [return: bb804, unwind: bb920];
    }

    bb804: {
        StorageDead(_1672);
        _1670 = anchor_lang::error::Error::with_account_name::<&str>(move _1671, const "admin") -> [return: bb805, unwind: bb920];
    }

    bb805: {
        StorageDead(_1671);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1670);
        StorageDead(_1670);
        StorageDead(_1665);
        StorageDead(_1664);
        goto -> bb822;
    }

    bb806: {
        StorageDead(_1668);
        StorageDead(_1666);
        _1664 = const ();
        StorageDead(_1665);
        StorageDead(_1664);
        StorageLive(_1673);
        StorageLive(_1674);
        StorageLive(_1675);
        StorageLive(_1676);
        StorageLive(_1677);
        _1677 = &_111;
        _1676 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1677) -> [return: bb807, unwind: bb920];
    }

    bb807: {
        _1675 = &_1676;
        StorageDead(_1677);
        StorageLive(_1678);
        StorageLive(_1679);
        _1679 = admin_hot_wallet::id() -> [return: bb808, unwind: bb920];
    }

    bb808: {
        _1678 = &_1679;
        _1674 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1675, move _1678) -> [return: bb809, unwind: bb920];
    }

    bb809: {
        switchInt(move _1674) -> [0: bb811, otherwise: bb810];
    }

    bb810: {
        StorageDead(_1679);
        StorageDead(_1678);
        StorageDead(_1676);
        StorageDead(_1675);
        goto -> bb815;
    }

    bb811: {
        StorageDead(_1679);
        StorageDead(_1678);
        StorageDead(_1676);
        StorageDead(_1675);
        StorageLive(_1680);
        StorageLive(_1681);
        StorageLive(_1682);
        StorageLive(_1683);
        _1683 = &_111;
        _1682 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _1683) -> [return: bb812, unwind: bb920];
    }

    bb812: {
        _1681 = &_1682;
        StorageDead(_1683);
        StorageLive(_1684);
        StorageLive(_1685);
        StorageLive(_1686);
        _2118 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _1686 = &(*_2118);
        _1685 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _1686) -> [return: bb813, unwind: bb920];
    }

    bb813: {
        StorageDead(_1686);
        _1684 = &((*_1685).0: anchor_lang::prelude::Pubkey);
        _1680 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _1681, move _1684) -> [return: bb814, unwind: bb920];
    }

    bb814: {
        switchInt(move _1680) -> [0: bb816, otherwise: bb815];
    }

    bb815: {
        StorageDead(_1685);
        StorageDead(_1684);
        StorageDead(_1682);
        StorageDead(_1681);
        _1673 = const ();
        StorageDead(_1680);
        StorageDead(_1674);
        StorageDead(_1673);
        StorageLive(_1691);
        StorageLive(_1692);
        _1692 = move _213;
        StorageLive(_1693);
        _1693 = move _21;
        StorageLive(_1694);
        _1694 = move _564;
        StorageLive(_1695);
        _1695 = move _1124;
        StorageLive(_1696);
        _1696 = move _66;
        StorageLive(_1697);
        _1697 = move _81;
        StorageLive(_1698);
        _1698 = move _96;
        StorageLive(_1699);
        _1699 = move _111;
        StorageLive(_1700);
        _1700 = move _126;
        StorageLive(_1701);
        _1701 = move _141;
        StorageLive(_1702);
        _1702 = move _156;
        _1691 = admin::InitializeSpotMarket::<'_> { spot_market: move _1692, spot_market_mint: move _1693, spot_market_vault: move _1694, insurance_fund_vault: move _1695, drift_signer: move _1696, state: move _1697, oracle: move _1698, admin: move _1699, rent: move _1700, system_program: move _1701, token_program: move _1702 };
        StorageDead(_1702);
        StorageDead(_1701);
        StorageDead(_1700);
        StorageDead(_1699);
        StorageDead(_1698);
        StorageDead(_1697);
        StorageDead(_1696);
        StorageDead(_1695);
        StorageDead(_1694);
        StorageDead(_1693);
        StorageDead(_1692);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Ok(move _1691);
        StorageDead(_1691);
        StorageDead(_1124);
        StorageDead(_1090);
        StorageDead(_1089);
        StorageDead(_1081);
        StorageDead(_564);
        StorageDead(_530);
        StorageDead(_529);
        StorageDead(_521);
        StorageDead(_213);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb917;
    }

    bb816: {
        StorageDead(_1685);
        StorageDead(_1684);
        StorageDead(_1682);
        StorageDead(_1681);
        StorageLive(_1688);
        StorageLive(_1689);
        StorageLive(_1690);
        _1690 = ConstraintRaw;
        _1689 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _1690) -> [return: bb817, unwind: bb920];
    }

    bb817: {
        StorageDead(_1690);
        _1688 = anchor_lang::error::Error::with_account_name::<&str>(move _1689, const "admin") -> [return: bb818, unwind: bb920];
    }

    bb818: {
        StorageDead(_1689);
        _0 = std::result::Result::<admin::InitializeSpotMarket<'_>, anchor_lang::error::Error>::Err(move _1688);
        StorageDead(_1688);
        StorageDead(_1680);
        StorageDead(_1674);
        StorageDead(_1673);
        goto -> bb822;
    }

    bb819: {
        StorageDead(_1630);
        _1740 = const false;
        StorageDead(_1627);
        drop(_1624) -> [return: bb820, unwind: bb920];
    }

    bb820: {
        StorageDead(_1624);
        goto -> bb821;
    }

    bb821: {
        StorageDead(_1620);
        StorageDead(_1619);
        goto -> bb822;
    }

    bb822: {
        drop(_1124) -> [return: bb854, unwind: bb950];
    }

    bb823: {
        StorageDead(_1543);
        StorageDead(_1542);
        drop(_1531) -> [return: bb824, unwind: bb950];
    }

    bb824: {
        StorageDead(_1531);
        goto -> bb853;
    }

    bb825: {
        StorageDead(_1439);
        drop(_1430) -> [return: bb826, unwind: bb926];
    }

    bb826: {
        StorageDead(_1430);
        StorageDead(_1418);
        drop(_1409) -> [return: bb827, unwind: bb1008];
    }

    bb827: {
        StorageDead(_1409);
        _1923 = discriminant(_1444);
        StorageDead(_1449);
        StorageDead(_1447);
        _1750 = const false;
        StorageDead(_1444);
        goto -> bb830;
    }

    bb828: {
        StorageDead(_1418);
        drop(_1409) -> [return: bb829, unwind: bb930];
    }

    bb829: {
        StorageDead(_1409);
        goto -> bb830;
    }

    bb830: {
        StorageDead(_1405);
        drop(_1403) -> [return: bb831, unwind: bb1013];
    }

    bb831: {
        StorageDead(_1403);
        StorageDead(_1402);
        StorageDead(_1401);
        drop(_1372) -> [return: bb832, unwind: bb1017];
    }

    bb832: {
        _1751 = const false;
        StorageDead(_1372);
        StorageDead(_1371);
        goto -> bb833;
    }

    bb833: {
        StorageDead(_1397);
        StorageDead(_1395);
        StorageDead(_1394);
        StorageDead(_1391);
        StorageDead(_1389);
        StorageDead(_1387);
        StorageDead(_1385);
        StorageDead(_1382);
        StorageDead(_1380);
        StorageDead(_1379);
        StorageDead(_1377);
        StorageDead(_1376);
        StorageDead(_1370);
        StorageDead(_1369);
        goto -> bb834;
    }

    bb834: {
        StorageDead(_1365);
        _1753 = const false;
        StorageDead(_1362);
        goto -> bb842;
    }

    bb835: {
        StorageDead(_1323);
        drop(_1314) -> [return: bb836, unwind: bb934];
    }

    bb836: {
        StorageDead(_1314);
        StorageDead(_1302);
        drop(_1293) -> [return: bb837, unwind: bb1021];
    }

    bb837: {
        StorageDead(_1293);
        _1933 = discriminant(_1328);
        StorageDead(_1333);
        StorageDead(_1331);
        _1755 = const false;
        StorageDead(_1328);
        goto -> bb840;
    }

    bb838: {
        StorageDead(_1302);
        drop(_1293) -> [return: bb839, unwind: bb938];
    }

    bb839: {
        StorageDead(_1293);
        goto -> bb840;
    }

    bb840: {
        StorageDead(_1289);
        drop(_1287) -> [return: bb841, unwind: bb950];
    }

    bb841: {
        StorageDead(_1287);
        StorageDead(_1286);
        StorageDead(_1285);
        StorageDead(_1284);
        StorageDead(_1283);
        goto -> bb842;
    }

    bb842: {
        StorageDead(_1282);
        goto -> bb851;
    }

    bb843: {
        StorageDead(_1179);
        drop(_1170) -> [return: bb844, unwind: bb943];
    }

    bb844: {
        StorageDead(_1170);
        StorageDead(_1158);
        drop(_1149) -> [return: bb845, unwind: bb1034];
    }

    bb845: {
        StorageDead(_1149);
        _1943 = discriminant(_1184);
        StorageDead(_1189);
        StorageDead(_1187);
        _1760 = const false;
        StorageDead(_1184);
        goto -> bb848;
    }

    bb846: {
        StorageDead(_1158);
        drop(_1149) -> [return: bb847, unwind: bb947];
    }

    bb847: {
        StorageDead(_1149);
        goto -> bb848;
    }

    bb848: {
        StorageDead(_1145);
        drop(_1143) -> [return: bb849, unwind: bb950];
    }

    bb849: {
        StorageDead(_1143);
        goto -> bb850;
    }

    bb850: {
        StorageDead(_1142);
        goto -> bb851;
    }

    bb851: {
        StorageDead(_1140);
        StorageDead(_1139);
        goto -> bb852;
    }

    bb852: {
        StorageDead(_1137);
        StorageDead(_1132);
        StorageDead(_1131);
        StorageDead(_1130);
        goto -> bb853;
    }

    bb853: {
        StorageDead(_1125);
        goto -> bb854;
    }

    bb854: {
        StorageDead(_1124);
        goto -> bb855;
    }

    bb855: {
        StorageDead(_1090);
        StorageDead(_1089);
        goto -> bb856;
    }

    bb856: {
        StorageDead(_1081);
        goto -> bb860;
    }

    bb857: {
        StorageDead(_1070);
        _1762 = const false;
        StorageDead(_1067);
        drop(_1064) -> [return: bb858, unwind: bb950];
    }

    bb858: {
        StorageDead(_1064);
        goto -> bb859;
    }

    bb859: {
        StorageDead(_1060);
        StorageDead(_1059);
        goto -> bb860;
    }

    bb860: {
        drop(_564) -> [return: bb892, unwind: bb984];
    }

    bb861: {
        StorageDead(_983);
        StorageDead(_982);
        drop(_971) -> [return: bb862, unwind: bb984];
    }

    bb862: {
        StorageDead(_971);
        goto -> bb891;
    }

    bb863: {
        StorageDead(_879);
        drop(_870) -> [return: bb864, unwind: bb956];
    }

    bb864: {
        StorageDead(_870);
        StorageDead(_858);
        drop(_849) -> [return: bb865, unwind: bb1060];
    }

    bb865: {
        StorageDead(_849);
        _1963 = discriminant(_884);
        StorageDead(_889);
        StorageDead(_887);
        _1772 = const false;
        StorageDead(_884);
        goto -> bb868;
    }

    bb866: {
        StorageDead(_858);
        drop(_849) -> [return: bb867, unwind: bb960];
    }

    bb867: {
        StorageDead(_849);
        goto -> bb868;
    }

    bb868: {
        StorageDead(_845);
        drop(_843) -> [return: bb869, unwind: bb1065];
    }

    bb869: {
        StorageDead(_843);
        StorageDead(_842);
        StorageDead(_841);
        drop(_812) -> [return: bb870, unwind: bb1069];
    }

    bb870: {
        _1773 = const false;
        StorageDead(_812);
        StorageDead(_811);
        goto -> bb871;
    }

    bb871: {
        StorageDead(_837);
        StorageDead(_835);
        StorageDead(_834);
        StorageDead(_831);
        StorageDead(_829);
        StorageDead(_827);
        StorageDead(_825);
        StorageDead(_822);
        StorageDead(_820);
        StorageDead(_819);
        StorageDead(_817);
        StorageDead(_816);
        StorageDead(_810);
        StorageDead(_809);
        goto -> bb872;
    }

    bb872: {
        StorageDead(_805);
        _1775 = const false;
        StorageDead(_802);
        goto -> bb880;
    }

    bb873: {
        StorageDead(_763);
        drop(_754) -> [return: bb874, unwind: bb964];
    }

    bb874: {
        StorageDead(_754);
        StorageDead(_742);
        drop(_733) -> [return: bb875, unwind: bb1073];
    }

    bb875: {
        StorageDead(_733);
        _1973 = discriminant(_768);
        StorageDead(_773);
        StorageDead(_771);
        _1777 = const false;
        StorageDead(_768);
        goto -> bb878;
    }

    bb876: {
        StorageDead(_742);
        drop(_733) -> [return: bb877, unwind: bb968];
    }

    bb877: {
        StorageDead(_733);
        goto -> bb878;
    }

    bb878: {
        StorageDead(_729);
        drop(_727) -> [return: bb879, unwind: bb984];
    }

    bb879: {
        StorageDead(_727);
        StorageDead(_726);
        StorageDead(_725);
        StorageDead(_724);
        StorageDead(_723);
        goto -> bb880;
    }

    bb880: {
        StorageDead(_722);
        goto -> bb889;
    }

    bb881: {
        StorageDead(_619);
        drop(_610) -> [return: bb882, unwind: bb973];
    }

    bb882: {
        StorageDead(_610);
        StorageDead(_598);
        drop(_589) -> [return: bb883, unwind: bb1086];
    }

    bb883: {
        StorageDead(_589);
        _1983 = discriminant(_624);
        StorageDead(_629);
        StorageDead(_627);
        _1782 = const false;
        StorageDead(_624);
        goto -> bb886;
    }

    bb884: {
        StorageDead(_598);
        drop(_589) -> [return: bb885, unwind: bb977];
    }

    bb885: {
        StorageDead(_589);
        goto -> bb886;
    }

    bb886: {
        StorageDead(_585);
        drop(_583) -> [return: bb887, unwind: bb984];
    }

    bb887: {
        StorageDead(_583);
        goto -> bb888;
    }

    bb888: {
        StorageDead(_582);
        goto -> bb889;
    }

    bb889: {
        StorageDead(_580);
        StorageDead(_579);
        goto -> bb890;
    }

    bb890: {
        StorageDead(_577);
        StorageDead(_572);
        StorageDead(_571);
        StorageDead(_570);
        goto -> bb891;
    }

    bb891: {
        StorageDead(_565);
        goto -> bb892;
    }

    bb892: {
        StorageDead(_564);
        goto -> bb893;
    }

    bb893: {
        StorageDead(_530);
        StorageDead(_529);
        goto -> bb894;
    }

    bb894: {
        StorageDead(_521);
        goto -> bb904;
    }

    bb895: {
        StorageDead(_510);
        _1784 = const false;
        StorageDead(_507);
        drop(_504) -> [return: bb896, unwind: bb984];
    }

    bb896: {
        StorageDead(_504);
        goto -> bb897;
    }

    bb897: {
        StorageDead(_500);
        StorageDead(_499);
        goto -> bb904;
    }

    bb898: {
        StorageDead(_450);
        StorageDead(_449);
        goto -> bb903;
    }

    bb899: {
        StorageDead(_344);
        _1789 = const false;
        StorageDead(_341);
        goto -> bb900;
    }

    bb900: {
        StorageDead(_313);
        goto -> bb901;
    }

    bb901: {
        StorageDead(_229);
        StorageDead(_228);
        StorageDead(_226);
        goto -> bb902;
    }

    bb902: {
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb903;
    }

    bb903: {
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_214);
        goto -> bb904;
    }

    bb904: {
        StorageDead(_213);
        goto -> bb905;
    }

    bb905: {
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb906;
    }

    bb906: {
        StorageDead(_171);
        goto -> bb907;
    }

    bb907: {
        StorageDead(_156);
        goto -> bb908;
    }

    bb908: {
        StorageDead(_141);
        goto -> bb909;
    }

    bb909: {
        StorageDead(_126);
        goto -> bb910;
    }

    bb910: {
        StorageDead(_111);
        drop(_96) -> [return: bb911, unwind: bb985];
    }

    bb911: {
        StorageDead(_96);
        drop(_81) -> [return: bb912, unwind: bb986];
    }

    bb912: {
        StorageDead(_81);
        drop(_66) -> [return: bb913, unwind: bb987];
    }

    bb913: {
        StorageDead(_66);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb914;
    }

    bb914: {
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb915;
    }

    bb915: {
        drop(_21) -> [return: bb916, unwind: bb988];
    }

    bb916: {
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb917;
    }

    bb917: {
        return;
    }

    bb918 (cleanup): {
        drop(_1630) -> [return: bb919, unwind terminate(cleanup)];
    }

    bb919 (cleanup): {
        drop(_1624) -> [return: bb920, unwind terminate(cleanup)];
    }

    bb920 (cleanup): {
        drop(_1124) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb921 (cleanup): {
        drop(_1531) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb922 (cleanup): {
        drop(_1515) -> [return: bb923, unwind terminate(cleanup)];
    }

    bb923 (cleanup): {
        drop(_1513) -> [return: bb999, unwind terminate(cleanup)];
    }

    bb924 (cleanup): {
        drop(_1439) -> [return: bb925, unwind terminate(cleanup)];
    }

    bb925 (cleanup): {
        drop(_1430) -> [return: bb926, unwind terminate(cleanup)];
    }

    bb926 (cleanup): {
        drop(_1409) -> [return: bb1008, unwind terminate(cleanup)];
    }

    bb927 (cleanup): {
        drop(_1439) -> [return: bb928, unwind terminate(cleanup)];
    }

    bb928 (cleanup): {
        drop(_1430) -> [return: bb929, unwind terminate(cleanup)];
    }

    bb929 (cleanup): {
        drop(_1409) -> [return: bb930, unwind terminate(cleanup)];
    }

    bb930 (cleanup): {
        drop(_1403) -> [return: bb1013, unwind terminate(cleanup)];
    }

    bb931 (cleanup): {
        drop(_1344) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb932 (cleanup): {
        drop(_1323) -> [return: bb933, unwind terminate(cleanup)];
    }

    bb933 (cleanup): {
        drop(_1314) -> [return: bb934, unwind terminate(cleanup)];
    }

    bb934 (cleanup): {
        drop(_1293) -> [return: bb1021, unwind terminate(cleanup)];
    }

    bb935 (cleanup): {
        drop(_1323) -> [return: bb936, unwind terminate(cleanup)];
    }

    bb936 (cleanup): {
        drop(_1314) -> [return: bb937, unwind terminate(cleanup)];
    }

    bb937 (cleanup): {
        drop(_1293) -> [return: bb938, unwind terminate(cleanup)];
    }

    bb938 (cleanup): {
        drop(_1287) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb939 (cleanup): {
        drop(_1265) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb940 (cleanup): {
        drop(_1199) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb941 (cleanup): {
        drop(_1179) -> [return: bb942, unwind terminate(cleanup)];
    }

    bb942 (cleanup): {
        drop(_1170) -> [return: bb943, unwind terminate(cleanup)];
    }

    bb943 (cleanup): {
        drop(_1149) -> [return: bb1034, unwind terminate(cleanup)];
    }

    bb944 (cleanup): {
        drop(_1179) -> [return: bb945, unwind terminate(cleanup)];
    }

    bb945 (cleanup): {
        drop(_1170) -> [return: bb946, unwind terminate(cleanup)];
    }

    bb946 (cleanup): {
        drop(_1149) -> [return: bb947, unwind terminate(cleanup)];
    }

    bb947 (cleanup): {
        drop(_1143) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb948 (cleanup): {
        drop(_1070) -> [return: bb949, unwind terminate(cleanup)];
    }

    bb949 (cleanup): {
        drop(_1064) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb950 (cleanup): {
        drop(_564) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb951 (cleanup): {
        drop(_971) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb952 (cleanup): {
        drop(_955) -> [return: bb953, unwind terminate(cleanup)];
    }

    bb953 (cleanup): {
        drop(_953) -> [return: bb1051, unwind terminate(cleanup)];
    }

    bb954 (cleanup): {
        drop(_879) -> [return: bb955, unwind terminate(cleanup)];
    }

    bb955 (cleanup): {
        drop(_870) -> [return: bb956, unwind terminate(cleanup)];
    }

    bb956 (cleanup): {
        drop(_849) -> [return: bb1060, unwind terminate(cleanup)];
    }

    bb957 (cleanup): {
        drop(_879) -> [return: bb958, unwind terminate(cleanup)];
    }

    bb958 (cleanup): {
        drop(_870) -> [return: bb959, unwind terminate(cleanup)];
    }

    bb959 (cleanup): {
        drop(_849) -> [return: bb960, unwind terminate(cleanup)];
    }

    bb960 (cleanup): {
        drop(_843) -> [return: bb1065, unwind terminate(cleanup)];
    }

    bb961 (cleanup): {
        drop(_784) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb962 (cleanup): {
        drop(_763) -> [return: bb963, unwind terminate(cleanup)];
    }

    bb963 (cleanup): {
        drop(_754) -> [return: bb964, unwind terminate(cleanup)];
    }

    bb964 (cleanup): {
        drop(_733) -> [return: bb1073, unwind terminate(cleanup)];
    }

    bb965 (cleanup): {
        drop(_763) -> [return: bb966, unwind terminate(cleanup)];
    }

    bb966 (cleanup): {
        drop(_754) -> [return: bb967, unwind terminate(cleanup)];
    }

    bb967 (cleanup): {
        drop(_733) -> [return: bb968, unwind terminate(cleanup)];
    }

    bb968 (cleanup): {
        drop(_727) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb969 (cleanup): {
        drop(_705) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb970 (cleanup): {
        drop(_639) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb971 (cleanup): {
        drop(_619) -> [return: bb972, unwind terminate(cleanup)];
    }

    bb972 (cleanup): {
        drop(_610) -> [return: bb973, unwind terminate(cleanup)];
    }

    bb973 (cleanup): {
        drop(_589) -> [return: bb1086, unwind terminate(cleanup)];
    }

    bb974 (cleanup): {
        drop(_619) -> [return: bb975, unwind terminate(cleanup)];
    }

    bb975 (cleanup): {
        drop(_610) -> [return: bb976, unwind terminate(cleanup)];
    }

    bb976 (cleanup): {
        drop(_589) -> [return: bb977, unwind terminate(cleanup)];
    }

    bb977 (cleanup): {
        drop(_583) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb978 (cleanup): {
        drop(_510) -> [return: bb979, unwind terminate(cleanup)];
    }

    bb979 (cleanup): {
        drop(_504) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb980 (cleanup): {
        drop(_483) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb981 (cleanup): {
        drop(_323) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb982 (cleanup): {
        drop(_296) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb983 (cleanup): {
        drop(_236) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb984 (cleanup): {
        drop(_96) -> [return: bb985, unwind terminate(cleanup)];
    }

    bb985 (cleanup): {
        drop(_81) -> [return: bb986, unwind terminate(cleanup)];
    }

    bb986 (cleanup): {
        drop(_66) -> [return: bb987, unwind terminate(cleanup)];
    }

    bb987 (cleanup): {
        drop(_21) -> [return: bb988, unwind terminate(cleanup)];
    }

    bb988 (cleanup): {
        resume;
    }

    bb989 (cleanup): {
        _2025 = discriminant(_1627);
        goto -> bb918;
    }

    bb990 (cleanup): {
        drop(_1600) -> [return: bb921, unwind terminate(cleanup)];
    }

    bb991 (cleanup): {
        switchInt(_1741) -> [0: bb921, otherwise: bb990];
    }

    bb992 (cleanup): {
        drop(_1579) -> [return: bb921, unwind terminate(cleanup)];
    }

    bb993 (cleanup): {
        switchInt(_1742) -> [0: bb921, otherwise: bb992];
    }

    bb994 (cleanup): {
        drop(_1556) -> [return: bb921, unwind terminate(cleanup)];
    }

    bb995 (cleanup): {
        switchInt(_1743) -> [0: bb921, otherwise: bb994];
    }

    bb996 (cleanup): {
        _2026 = discriminant(_1533);
        goto -> bb950;
    }

    bb997 (cleanup): {
        _2027 = discriminant(_1523);
        goto -> bb999;
    }

    bb998 (cleanup): {
        drop(_1510) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb999 (cleanup): {
        switchInt(_1746) -> [0: bb950, otherwise: bb998];
    }

    bb1000 (cleanup): {
        _2028 = discriminant(_1468);
        goto -> bb1006;
    }

    bb1001 (cleanup): {
        drop(_1470) -> [return: bb1006, unwind terminate(cleanup)];
    }

    bb1002 (cleanup): {
        switchInt(_1747) -> [0: bb1006, otherwise: bb1001];
    }

    bb1003 (cleanup): {
        drop(_1471) -> [return: bb1006, unwind terminate(cleanup)];
    }

    bb1004 (cleanup): {
        switchInt(_1748) -> [0: bb1006, otherwise: bb1003];
    }

    bb1005 (cleanup): {
        drop(_1460) -> [return: bb1017, unwind terminate(cleanup)];
    }

    bb1006 (cleanup): {
        switchInt(_1749) -> [0: bb1017, otherwise: bb1005];
    }

    bb1007 (cleanup): {
        _2029 = discriminant(_1370);
        goto -> bb1017;
    }

    bb1008 (cleanup): {
        _2030 = discriminant(_1444);
        goto -> bb930;
    }

    bb1009 (cleanup): {
        _2031 = discriminant(_1431);
        goto -> bb929;
    }

    bb1010 (cleanup): {
        _2032 = discriminant(_1419);
        goto -> bb929;
    }

    bb1011 (cleanup): {
        _2033 = discriminant(_1410);
        goto -> bb930;
    }

    bb1012 (cleanup): {
        drop(_1372) -> [return: bb1017, unwind terminate(cleanup)];
    }

    bb1013 (cleanup): {
        switchInt(_1751) -> [0: bb1017, otherwise: bb1012];
    }

    bb1014 (cleanup): {
        drop(_1373) -> [return: bb1017, unwind terminate(cleanup)];
    }

    bb1015 (cleanup): {
        switchInt(_1752) -> [0: bb1017, otherwise: bb1014];
    }

    bb1016 (cleanup): {
        drop(_1362) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb1017 (cleanup): {
        switchInt(_1753) -> [0: bb950, otherwise: bb1016];
    }

    bb1018 (cleanup): {
        _2034 = discriminant(_1353);
        goto -> bb1020;
    }

    bb1019 (cleanup): {
        drop(_1343) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb1020 (cleanup): {
        switchInt(_1754) -> [0: bb950, otherwise: bb1019];
    }

    bb1021 (cleanup): {
        _2035 = discriminant(_1328);
        goto -> bb938;
    }

    bb1022 (cleanup): {
        _2036 = discriminant(_1315);
        goto -> bb937;
    }

    bb1023 (cleanup): {
        _2037 = discriminant(_1303);
        goto -> bb937;
    }

    bb1024 (cleanup): {
        _2038 = discriminant(_1294);
        goto -> bb938;
    }

    bb1025 (cleanup): {
        drop(_1263) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb1026 (cleanup): {
        switchInt(_1756) -> [0: bb950, otherwise: bb1025];
    }

    bb1027 (cleanup): {
        _2039 = discriminant(_1208);
        goto -> bb1033;
    }

    bb1028 (cleanup): {
        drop(_1210) -> [return: bb1033, unwind terminate(cleanup)];
    }

    bb1029 (cleanup): {
        switchInt(_1757) -> [0: bb1033, otherwise: bb1028];
    }

    bb1030 (cleanup): {
        drop(_1211) -> [return: bb1033, unwind terminate(cleanup)];
    }

    bb1031 (cleanup): {
        switchInt(_1758) -> [0: bb1033, otherwise: bb1030];
    }

    bb1032 (cleanup): {
        drop(_1198) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb1033 (cleanup): {
        switchInt(_1759) -> [0: bb950, otherwise: bb1032];
    }

    bb1034 (cleanup): {
        _2040 = discriminant(_1184);
        goto -> bb947;
    }

    bb1035 (cleanup): {
        _2041 = discriminant(_1171);
        goto -> bb946;
    }

    bb1036 (cleanup): {
        _2042 = discriminant(_1159);
        goto -> bb946;
    }

    bb1037 (cleanup): {
        _2043 = discriminant(_1150);
        goto -> bb947;
    }

    bb1038 (cleanup): {
        drop(_1117) -> [return: bb950, unwind terminate(cleanup)];
    }

    bb1039 (cleanup): {
        switchInt(_1761) -> [0: bb950, otherwise: bb1038];
    }

    bb1040 (cleanup): {
        _2044 = discriminant(_1082);
        goto -> bb950;
    }

    bb1041 (cleanup): {
        _2045 = discriminant(_1067);
        goto -> bb948;
    }

    bb1042 (cleanup): {
        drop(_1040) -> [return: bb951, unwind terminate(cleanup)];
    }

    bb1043 (cleanup): {
        switchInt(_1763) -> [0: bb951, otherwise: bb1042];
    }

    bb1044 (cleanup): {
        drop(_1019) -> [return: bb951, unwind terminate(cleanup)];
    }

    bb1045 (cleanup): {
        switchInt(_1764) -> [0: bb951, otherwise: bb1044];
    }

    bb1046 (cleanup): {
        drop(_996) -> [return: bb951, unwind terminate(cleanup)];
    }

    bb1047 (cleanup): {
        switchInt(_1765) -> [0: bb951, otherwise: bb1046];
    }

    bb1048 (cleanup): {
        _2046 = discriminant(_973);
        goto -> bb984;
    }

    bb1049 (cleanup): {
        _2047 = discriminant(_963);
        goto -> bb1051;
    }

    bb1050 (cleanup): {
        drop(_950) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1051 (cleanup): {
        switchInt(_1768) -> [0: bb984, otherwise: bb1050];
    }

    bb1052 (cleanup): {
        _2048 = discriminant(_908);
        goto -> bb1058;
    }

    bb1053 (cleanup): {
        drop(_910) -> [return: bb1058, unwind terminate(cleanup)];
    }

    bb1054 (cleanup): {
        switchInt(_1769) -> [0: bb1058, otherwise: bb1053];
    }

    bb1055 (cleanup): {
        drop(_911) -> [return: bb1058, unwind terminate(cleanup)];
    }

    bb1056 (cleanup): {
        switchInt(_1770) -> [0: bb1058, otherwise: bb1055];
    }

    bb1057 (cleanup): {
        drop(_900) -> [return: bb1069, unwind terminate(cleanup)];
    }

    bb1058 (cleanup): {
        switchInt(_1771) -> [0: bb1069, otherwise: bb1057];
    }

    bb1059 (cleanup): {
        _2049 = discriminant(_810);
        goto -> bb1069;
    }

    bb1060 (cleanup): {
        _2050 = discriminant(_884);
        goto -> bb960;
    }

    bb1061 (cleanup): {
        _2051 = discriminant(_871);
        goto -> bb959;
    }

    bb1062 (cleanup): {
        _2052 = discriminant(_859);
        goto -> bb959;
    }

    bb1063 (cleanup): {
        _2053 = discriminant(_850);
        goto -> bb960;
    }

    bb1064 (cleanup): {
        drop(_812) -> [return: bb1069, unwind terminate(cleanup)];
    }

    bb1065 (cleanup): {
        switchInt(_1773) -> [0: bb1069, otherwise: bb1064];
    }

    bb1066 (cleanup): {
        drop(_813) -> [return: bb1069, unwind terminate(cleanup)];
    }

    bb1067 (cleanup): {
        switchInt(_1774) -> [0: bb1069, otherwise: bb1066];
    }

    bb1068 (cleanup): {
        drop(_802) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1069 (cleanup): {
        switchInt(_1775) -> [0: bb984, otherwise: bb1068];
    }

    bb1070 (cleanup): {
        _2054 = discriminant(_793);
        goto -> bb1072;
    }

    bb1071 (cleanup): {
        drop(_783) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1072 (cleanup): {
        switchInt(_1776) -> [0: bb984, otherwise: bb1071];
    }

    bb1073 (cleanup): {
        _2055 = discriminant(_768);
        goto -> bb968;
    }

    bb1074 (cleanup): {
        _2056 = discriminant(_755);
        goto -> bb967;
    }

    bb1075 (cleanup): {
        _2057 = discriminant(_743);
        goto -> bb967;
    }

    bb1076 (cleanup): {
        _2058 = discriminant(_734);
        goto -> bb968;
    }

    bb1077 (cleanup): {
        drop(_703) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1078 (cleanup): {
        switchInt(_1778) -> [0: bb984, otherwise: bb1077];
    }

    bb1079 (cleanup): {
        _2059 = discriminant(_648);
        goto -> bb1085;
    }

    bb1080 (cleanup): {
        drop(_650) -> [return: bb1085, unwind terminate(cleanup)];
    }

    bb1081 (cleanup): {
        switchInt(_1779) -> [0: bb1085, otherwise: bb1080];
    }

    bb1082 (cleanup): {
        drop(_651) -> [return: bb1085, unwind terminate(cleanup)];
    }

    bb1083 (cleanup): {
        switchInt(_1780) -> [0: bb1085, otherwise: bb1082];
    }

    bb1084 (cleanup): {
        drop(_638) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1085 (cleanup): {
        switchInt(_1781) -> [0: bb984, otherwise: bb1084];
    }

    bb1086 (cleanup): {
        _2060 = discriminant(_624);
        goto -> bb977;
    }

    bb1087 (cleanup): {
        _2061 = discriminant(_611);
        goto -> bb976;
    }

    bb1088 (cleanup): {
        _2062 = discriminant(_599);
        goto -> bb976;
    }

    bb1089 (cleanup): {
        _2063 = discriminant(_590);
        goto -> bb977;
    }

    bb1090 (cleanup): {
        drop(_557) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1091 (cleanup): {
        switchInt(_1783) -> [0: bb984, otherwise: bb1090];
    }

    bb1092 (cleanup): {
        _2064 = discriminant(_522);
        goto -> bb984;
    }

    bb1093 (cleanup): {
        _2065 = discriminant(_507);
        goto -> bb978;
    }

    bb1094 (cleanup): {
        drop(_458) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1095 (cleanup): {
        switchInt(_1785) -> [0: bb984, otherwise: bb1094];
    }

    bb1096 (cleanup): {
        _2066 = discriminant(_440);
        goto -> bb984;
    }

    bb1097 (cleanup): {
        _2067 = discriminant(_430);
        goto -> bb984;
    }

    bb1098 (cleanup): {
        _2068 = discriminant(_394);
        goto -> bb1102;
    }

    bb1099 (cleanup): {
        drop(_397) -> [return: bb1102, unwind terminate(cleanup)];
    }

    bb1100 (cleanup): {
        switchInt(_1786) -> [0: bb1102, otherwise: bb1099];
    }

    bb1101 (cleanup): {
        drop(_386) -> [return: bb1107, unwind terminate(cleanup)];
    }

    bb1102 (cleanup): {
        switchInt(_1787) -> [0: bb1107, otherwise: bb1101];
    }

    bb1103 (cleanup): {
        _2069 = discriminant(_349);
        goto -> bb1107;
    }

    bb1104 (cleanup): {
        drop(_352) -> [return: bb1107, unwind terminate(cleanup)];
    }

    bb1105 (cleanup): {
        switchInt(_1788) -> [0: bb1107, otherwise: bb1104];
    }

    bb1106 (cleanup): {
        drop(_341) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1107 (cleanup): {
        switchInt(_1789) -> [0: bb984, otherwise: bb1106];
    }

    bb1108 (cleanup): {
        _2070 = discriminant(_332);
        goto -> bb1110;
    }

    bb1109 (cleanup): {
        drop(_322) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1110 (cleanup): {
        switchInt(_1790) -> [0: bb984, otherwise: bb1109];
    }

    bb1111 (cleanup): {
        drop(_294) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1112 (cleanup): {
        switchInt(_1791) -> [0: bb984, otherwise: bb1111];
    }

    bb1113 (cleanup): {
        _2071 = discriminant(_245);
        goto -> bb1117;
    }

    bb1114 (cleanup): {
        drop(_248) -> [return: bb1117, unwind terminate(cleanup)];
    }

    bb1115 (cleanup): {
        switchInt(_1792) -> [0: bb1117, otherwise: bb1114];
    }

    bb1116 (cleanup): {
        drop(_235) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1117 (cleanup): {
        switchInt(_1793) -> [0: bb984, otherwise: bb1116];
    }

    bb1118 (cleanup): {
        drop(_206) -> [return: bb984, unwind terminate(cleanup)];
    }

    bb1119 (cleanup): {
        switchInt(_1794) -> [0: bb984, otherwise: bb1118];
    }

    bb1120 (cleanup): {
        _2072 = discriminant(_172);
        goto -> bb984;
    }

    bb1121 (cleanup): {
        _2073 = discriminant(_157);
        goto -> bb984;
    }

    bb1122 (cleanup): {
        _2074 = discriminant(_142);
        goto -> bb984;
    }

    bb1123 (cleanup): {
        _2075 = discriminant(_127);
        goto -> bb984;
    }

    bb1124 (cleanup): {
        _2076 = discriminant(_112);
        goto -> bb984;
    }

    bb1125 (cleanup): {
        _2077 = discriminant(_97);
        goto -> bb985;
    }

    bb1126 (cleanup): {
        _2078 = discriminant(_82);
        goto -> bb986;
    }

    bb1127 (cleanup): {
        _2079 = discriminant(_67);
        goto -> bb987;
    }

    bb1128 (cleanup): {
        _2080 = discriminant(_22);
        goto -> bb988;
    }
}

alloc188 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc187 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc186 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc185 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 76 │ insurance_fund_v
    0x10 │ 61 75 6c 74                                     │ ault
}

alloc184 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc183 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc182 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc181 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc180 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}

alloc179 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}

alloc178 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}

alloc177 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}
