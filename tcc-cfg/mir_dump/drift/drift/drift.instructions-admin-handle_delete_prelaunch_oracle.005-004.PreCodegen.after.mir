// MIR for `admin::handle_delete_prelaunch_oracle` after PreCodegen

fn admin::handle_delete_prelaunch_oracle(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::DeletePrelaunchOracle<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug _perp_market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _5: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 1];
    let _22: &[&str; 1];
    let _23: [&str; 1];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &u16;
    let _30: &u16;
    let _31: &state::perp_market::PerpMarket;
    let mut _32: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _33: ();
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _35: std::result::Result<(), error::ErrorCode>;
    let mut _36: bool;
    let mut _37: &anchor_lang::prelude::Pubkey;
    let _38: &state::perp_market::PerpMarket;
    let mut _39: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let _41: anchor_lang::prelude::Pubkey;
    let mut _42: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _43: ();
    let _45: ();
    let mut _46: &str;
    let _47: &str;
    let mut _48: &std::string::String;
    let _49: &std::string::String;
    let _50: std::string::String;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: &[&str; 2];
    let _55: &[&str; 2];
    let _56: [&str; 2];
    let mut _57: &[core::fmt::rt::Argument<'_>];
    let mut _58: &[core::fmt::rt::Argument<'_>; 1];
    let _59: &[core::fmt::rt::Argument<'_>; 1];
    let _60: [core::fmt::rt::Argument<'_>; 1];
    let mut _61: core::fmt::rt::Argument<'_>;
    let mut _62: &error::ErrorCode;
    let _63: &error::ErrorCode;
    let _64: ();
    let mut _65: &str;
    let _66: &str;
    let mut _67: error::ErrorCode;
    let mut _68: isize;
    let mut _70: !;
    let mut _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: ();
    let mut _76: &mut instructions::admin::DeletePrelaunchOracle<'_>;
    let mut _77: &mut instructions::admin::DeletePrelaunchOracle<'_>;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    scope 1 {
        debug perp_market => _3;
        let _18: std::string::String;
        let _44: error::ErrorCode;
        let _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _72: ();
        let mut _75: &[&str; 1];
        scope 6 {
            debug res => _18;
        }
        scope 7 {
            debug error_code => _44;
            let _51: std::string::String;
            let mut _74: &[&str; 2];
            scope 8 {
                debug res => _51;
            }
        }
        scope 9 {
            debug residual => _69;
            scope 10 {
            }
        }
        scope 11 {
            debug val => _72;
            scope 12 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _76 = deref_copy (_1.1: &mut instructions::admin::DeletePrelaunchOracle<'_>);
        _6 = &((*_76).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<Ref<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _3 = move _11;
        StorageDead(_11);
        _78 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _75 = const _;
        _22 = &(*_75);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_3;
        _31 = <Ref<'_, PerpMarket> as Deref>::deref(move _32) -> [return: bb7, unwind: bb36];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb38];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _80 = discriminant(_4);
        StorageDead(_4);
        goto -> bb32;
    }

    bb7: {
        StorageDead(_32);
        _30 = &((*_31).21: u16);
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _29) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb10, unwind: bb36];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb11, unwind: bb35];
    }

    bb11: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb12, unwind: bb35];
    }

    bb12: {
        StorageDead(_13);
        drop(_17) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &_3;
        _38 = <Ref<'_, PerpMarket> as Deref>::deref(move _39) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        StorageDead(_39);
        _37 = &(((*_38).1: state::perp_market::AMM).0: anchor_lang::prelude::Pubkey);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _77 = deref_copy (_1.1: &mut instructions::admin::DeletePrelaunchOracle<'_>);
        _42 = &((*_77).1: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>);
        _41 = <anchor_lang::prelude::AccountLoader<'_, PrelaunchOracle> as anchor_lang::Key>::key(move _42) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        _40 = &_41;
        StorageDead(_42);
        _36 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _37, move _40) -> [return: bb16, unwind: bb36];
    }

    bb16: {
        switchInt(move _36) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_43);
        _43 = ();
        _35 = std::result::Result::<(), error::ErrorCode>::Ok(move _43);
        StorageDead(_43);
        goto -> bb26;
    }

    bb18: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_44);
        _44 = error::ErrorCode::DefaultError;
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _74 = const _;
        _55 = &(*_74);
        _54 = &(*_55);
        _53 = move _54 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_54);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_44;
        _62 = &(*_63);
        _61 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _62) -> [return: bb19, unwind: bb36];
    }

    bb19: {
        StorageDead(_62);
        _60 = [move _61];
        StorageDead(_61);
        _59 = &_60;
        _58 = &(*_59);
        _57 = move _58 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_58);
        _52 = Arguments::<'_>::new_v1(move _53, move _57) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        StorageDead(_57);
        StorageDead(_53);
        _51 = format(move _52) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        StorageDead(_52);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_55);
        _50 = move _51;
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = <String as Deref>::deref(move _48) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        _46 = &(*_47);
        StorageDead(_48);
        _45 = solana_program::log::sol_log(move _46) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        StorageDead(_46);
        drop(_50) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_45);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = const "prelaunch oracle currently in use";
        _65 = &(*_66);
        _64 = solana_program::log::sol_log(move _65) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        StorageDead(_65);
        StorageDead(_66);
        StorageDead(_64);
        StorageLive(_67);
        _67 = _44;
        _35 = std::result::Result::<(), error::ErrorCode>::Err(move _67);
        StorageDead(_67);
        StorageDead(_44);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_36);
        _34 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _35) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        StorageDead(_35);
        _68 = discriminant(_34);
        switchInt(move _68) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_72);
        _72 = ((_34 as Continue).0: ());
        _33 = _72;
        StorageDead(_72);
        StorageDead(_34);
        StorageDead(_33);
        StorageLive(_73);
        _73 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _73);
        StorageDead(_73);
        drop(_3) -> [return: bb31, unwind: bb37];
    }

    bb29: {
        StorageLive(_69);
        _69 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_71);
        _71 = _69;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _71) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_34);
        StorageDead(_33);
        drop(_3) -> [return: bb32, unwind: bb37];
    }

    bb31: {
        StorageDead(_3);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_3);
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_50) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_17) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_3) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        _82 = discriminant(_4);
        goto -> bb37;
    }
}
