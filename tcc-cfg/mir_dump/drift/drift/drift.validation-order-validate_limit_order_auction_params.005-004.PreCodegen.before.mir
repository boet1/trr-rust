// MIR for `validate_limit_order_auction_params` before PreCodegen

fn validate_limit_order_auction_params(_1: &Order) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _2: ();
    let mut _3: bool;
    let mut _4: &state::user::Order;
    let mut _5: bool;
    let mut _6: state::user::Order;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _9: std::result::Result<(), error::ErrorCode>;
    let mut _10: &state::user::Order;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: &state::user::Order;
    let mut _20: isize;
    let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _24: ();
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _27: std::result::Result<(), error::ErrorCode>;
    let mut _28: bool;
    let mut _29: i64;
    let mut _30: ();
    let _31: error::ErrorCode;
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 2];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let mut _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &error::ErrorCode;
    let _50: &error::ErrorCode;
    let _51: ();
    let mut _52: &str;
    let _53: &str;
    let mut _54: error::ErrorCode;
    let mut _55: isize;
    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let _60: ();
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _62: std::result::Result<(), error::ErrorCode>;
    let mut _63: bool;
    let mut _64: i64;
    let mut _65: ();
    let _66: error::ErrorCode;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 2];
    let _77: &[&str; 2];
    let _78: [&str; 2];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: [core::fmt::rt::Argument<'_>; 1];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &error::ErrorCode;
    let _85: &error::ErrorCode;
    let _86: ();
    let mut _87: &str;
    let _88: &str;
    let mut _89: error::ErrorCode;
    let mut _90: isize;
    let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _94: ();
    let mut _95: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _21;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _24;
        scope 8 {
        }
    }
    scope 9 {
        debug error_code => _31;
        let _38: std::string::String;
        let mut _97: &[&str; 2];
        scope 10 {
            debug res => _38;
        }
    }
    scope 11 {
        debug residual => _56;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _59;
        scope 14 {
        }
    }
    scope 15 {
        debug error_code => _66;
        let _73: std::string::String;
        let mut _96: &[&str; 2];
        scope 16 {
            debug res => _73;
        }
    }
    scope 17 {
        debug residual => _91;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _94;
        scope 20 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = Order::has_auction(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb18, otherwise: bb2];
    }

    bb2: {
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = (*_1);
        _5 = Order::has_oracle_price_offset(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _5) -> [0: bb11, otherwise: bb4];
    }

    bb4: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_1);
        _9 = validate_oracle_auction_params(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        _8 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_15);
        _15 = ((_8 as Continue).0: ());
        _7 = _15;
        StorageDead(_15);
        StorageDead(_8);
        StorageDead(_7);
        _2 = const ();
        goto -> bb17;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_12);
        _12 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb48;
    }

    bb11: {
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = &(*_1);
        _18 = validate_auction_params(move _19) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb14, 1: bb15, otherwise: bb8];
    }

    bb14: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: ());
        _16 = _24;
        StorageDead(_24);
        StorageDead(_17);
        StorageDead(_16);
        _2 = const ();
        goto -> bb17;
    }

    bb15: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb48;
    }

    bb17: {
        StorageDead(_5);
        goto -> bb47;
    }

    bb18: {
        StorageDead(_4);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).6: i64);
        _28 = Eq(move _29, const 0_i64);
        switchInt(move _28) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = ();
        _27 = std::result::Result::<(), error::ErrorCode>::Ok(move _30);
        StorageDead(_30);
        goto -> bb28;
    }

    bb20: {
        StorageDead(_29);
        StorageLive(_31);
        _31 = error::ErrorCode::InvalidOrder;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _97 = const _;
        _42 = &(*_97);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_31;
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _49) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_49);
        _47 = [move _48];
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = move _45 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_45);
        _39 = Arguments::<'_>::new_v1(move _40, move _44) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_39);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <String as Deref>::deref(move _35) -> [return: bb24, unwind: bb52];
    }

    bb24: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb25, unwind: bb52];
    }

    bb25: {
        StorageDead(_33);
        drop(_37) -> [return: bb26, unwind: bb53];
    }

    bb26: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = const "limit order without auction can not have an auction start price";
        _52 = &(*_53);
        _51 = solana_program::log::sol_log(move _52) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_52);
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_54);
        _54 = _31;
        _27 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_31);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_28);
        _26 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _27) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_27);
        _55 = discriminant(_26);
        switchInt(move _55) -> [0: bb30, 1: bb31, otherwise: bb8];
    }

    bb30: {
        StorageLive(_59);
        _59 = ((_26 as Continue).0: ());
        _25 = _59;
        StorageDead(_59);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = ((*_1).7: i64);
        _63 = Eq(move _64, const 0_i64);
        switchInt(move _63) -> [0: bb34, otherwise: bb33];
    }

    bb31: {
        StorageLive(_56);
        _56 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb49;
    }

    bb33: {
        StorageDead(_64);
        StorageLive(_65);
        _65 = ();
        _62 = std::result::Result::<(), error::ErrorCode>::Ok(move _65);
        StorageDead(_65);
        goto -> bb42;
    }

    bb34: {
        StorageDead(_64);
        StorageLive(_66);
        _66 = error::ErrorCode::InvalidOrder;
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _96 = const _;
        _77 = &(*_96);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_66;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _84) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_84);
        _82 = [move _83];
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_74);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <String as Deref>::deref(move _70) -> [return: bb38, unwind: bb51];
    }

    bb38: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb39, unwind: bb51];
    }

    bb39: {
        StorageDead(_68);
        drop(_72) -> [return: bb40, unwind: bb53];
    }

    bb40: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = const "limit order without auction can not have an auction end price";
        _87 = &(*_88);
        _86 = solana_program::log::sol_log(move _87) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_87);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_89);
        _89 = _66;
        _62 = std::result::Result::<(), error::ErrorCode>::Err(move _89);
        StorageDead(_89);
        StorageDead(_66);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_63);
        _61 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _62) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_62);
        _90 = discriminant(_61);
        switchInt(move _90) -> [0: bb44, 1: bb45, otherwise: bb8];
    }

    bb44: {
        StorageLive(_94);
        _94 = ((_61 as Continue).0: ());
        _60 = _94;
        StorageDead(_94);
        StorageDead(_61);
        StorageDead(_60);
        _2 = const ();
        goto -> bb47;
    }

    bb45: {
        StorageLive(_91);
        _91 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb49;
    }

    bb47: {
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_95);
        _95 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _95);
        StorageDead(_95);
        goto -> bb50;
    }

    bb48: {
        StorageDead(_5);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb50;
    }

    bb50: {
        return;
    }

    bb51 (cleanup): {
        drop(_72) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        drop(_37) -> [return: bb53, unwind terminate(cleanup)];
    }

    bb53 (cleanup): {
        resume;
    }
}
