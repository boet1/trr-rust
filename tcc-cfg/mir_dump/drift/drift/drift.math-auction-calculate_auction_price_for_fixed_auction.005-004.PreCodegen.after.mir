// MIR for `calculate_auction_price_for_fixed_auction` after PreCodegen

fn calculate_auction_price_for_fixed_auction(_1: &Order, _2: u64, _3: u64) -> std::result::Result<u64, error::ErrorCode> {
    debug order => _1;
    debug slot => _2;
    debug tick_size => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u64;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _18: std::result::Result<u64, error::ErrorCode>;
    let mut _19: u8;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _28: std::result::Result<u64, error::ErrorCode>;
    let mut _29: i64;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _37: std::result::Result<u64, error::ErrorCode>;
    let mut _38: i64;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _44: ();
    let mut _45: bool;
    let mut _46: u8;
    let mut _47: !;
    let mut _48: u64;
    let mut _49: u64;
    let mut _50: controller::position::PositionDirection;
    let mut _52: isize;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _54: std::result::Result<u64, error::ErrorCode>;
    let mut _55: u64;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _57: std::result::Result<u64, error::ErrorCode>;
    let mut _58: u64;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _60: std::result::Result<u64, error::ErrorCode>;
    let mut _61: u64;
    let mut _62: u64;
    let mut _63: isize;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _70: std::result::Result<u64, error::ErrorCode>;
    let mut _71: u64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: u64;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _84: std::result::Result<u64, error::ErrorCode>;
    let mut _85: u8;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _97: std::result::Result<u64, error::ErrorCode>;
    let mut _98: u64;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _100: std::result::Result<u64, error::ErrorCode>;
    let mut _101: u64;
    let mut _102: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _103: std::result::Result<u64, error::ErrorCode>;
    let mut _104: u64;
    let mut _105: u64;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: u64;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _113: std::result::Result<u64, error::ErrorCode>;
    let mut _114: u64;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _125: u64;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _127: std::result::Result<u64, error::ErrorCode>;
    let mut _128: u8;
    let mut _129: isize;
    let mut _131: !;
    let mut _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _134: isize;
    let mut _136: !;
    let mut _137: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: isize;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _142: std::result::Result<u64, error::ErrorCode>;
    let mut _143: u64;
    let mut _144: u64;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _150: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _151: std::result::Result<u64, error::ErrorCode>;
    let mut _152: u64;
    let mut _153: u64;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _159: u64;
    let mut _160: u64;
    let mut _161: controller::position::PositionDirection;
    scope 1 {
        debug slots_elapsed => _4;
        let _14: u64;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: u64;
        scope 6 {
            debug delta_numerator => _14;
            let _25: u8;
            scope 11 {
                debug delta_denominator => _25;
                let _26: u64;
                let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _34: u64;
                scope 12 {
                    debug auction_start_price => _26;
                    let _35: u64;
                    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _43: u64;
                    scope 17 {
                        debug auction_end_price => _35;
                        let _51: u64;
                        let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _67: u64;
                        let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _76: u64;
                        let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _81: u64;
                        let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _90: u64;
                        let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _95: u64;
                        let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _110: u64;
                        let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _119: u64;
                        let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _124: u64;
                        let _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _133: u64;
                        let _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _138: u64;
                        scope 22 {
                            debug price_delta => _51;
                            let _139: u64;
                            let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _149: u64;
                            let _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _158: u64;
                            scope 63 {
                                debug price => _139;
                            }
                            scope 64 {
                                debug residual => _146;
                                scope 65 {
                                }
                            }
                            scope 66 {
                                debug val => _149;
                                scope 67 {
                                }
                            }
                            scope 68 {
                                debug residual => _155;
                                scope 69 {
                                }
                            }
                            scope 70 {
                                debug val => _158;
                                scope 71 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _64;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _67;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug residual => _73;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _76;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug residual => _78;
                            scope 32 {
                            }
                        }
                        scope 33 {
                            debug val => _81;
                            scope 34 {
                            }
                        }
                        scope 35 {
                            debug residual => _87;
                            scope 36 {
                            }
                        }
                        scope 37 {
                            debug val => _90;
                            scope 38 {
                            }
                        }
                        scope 39 {
                            debug residual => _92;
                            scope 40 {
                            }
                        }
                        scope 41 {
                            debug val => _95;
                            scope 42 {
                            }
                        }
                        scope 43 {
                            debug residual => _107;
                            scope 44 {
                            }
                        }
                        scope 45 {
                            debug val => _110;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug residual => _116;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug val => _119;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug residual => _121;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _124;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug residual => _130;
                            scope 56 {
                            }
                        }
                        scope 57 {
                            debug val => _133;
                            scope 58 {
                            }
                        }
                        scope 59 {
                            debug residual => _135;
                            scope 60 {
                            }
                        }
                        scope 61 {
                            debug val => _138;
                            scope 62 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _40;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _43;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _31;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _34;
                    scope 16 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _21;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _24;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        StorageLive(_8);
        _8 = ((*_1).0: u64);
        _6 = <u64 as SafeMath>::safe_sub(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: u64);
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _4;
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).22: u8);
        _18 = <u8 as Cast>::cast::<u64>(move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb106;
    }

    bb7: {
        StorageDead(_19);
        _17 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_18);
        _20 = discriminant(_17);
        switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_24);
        _24 = ((_17 as Continue).0: u64);
        _16 = _24;
        StorageDead(_24);
        _14 = std::cmp::min::<u64>(move _15, move _16) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_17);
        goto -> bb105;
    }

    bb12: {
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_17);
        StorageLive(_25);
        _25 = ((*_1).22: u8);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_1).6: i64);
        _28 = <i64 as Cast>::cast::<u64>(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        _27 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u64);
        _26 = _34;
        StorageDead(_34);
        StorageDead(_27);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = ((*_1).7: i64);
        _37 = <i64 as Cast>::cast::<u64>(move _38) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_27);
        goto -> bb104;
    }

    bb18: {
        StorageDead(_38);
        _36 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _37) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_36 as Continue).0: u64);
        _35 = _43;
        StorageDead(_43);
        StorageDead(_36);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _25;
        _45 = Eq(move _46, const 0_u8);
        switchInt(move _45) -> [0: bb24, otherwise: bb23];
    }

    bb21: {
        StorageLive(_40);
        _40 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_36);
        goto -> bb103;
    }

    bb23: {
        StorageDead(_46);
        StorageLive(_48);
        _48 = _35;
        StorageLive(_49);
        _49 = _3;
        StorageLive(_50);
        _50 = ((*_1).17: controller::position::PositionDirection);
        _0 = math::orders::standardize_price(move _48, move _49, move _50) -> [return: bb25, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        _44 = const ();
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_51);
        _52 = discriminant(((*_1).17: controller::position::PositionDirection));
        switchInt(move _52) -> [0: bb27, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb103;
    }

    bb26: {
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _26;
        StorageLive(_105);
        _105 = _35;
        _103 = <u64 as SafeMath>::safe_sub(move _104, move _105) -> [return: bb53, unwind continue];
    }

    bb27: {
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _35;
        StorageLive(_62);
        _62 = _26;
        _60 = <u64 as SafeMath>::safe_sub(move _61, move _62) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_61);
        _59 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _60) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_60);
        _63 = discriminant(_59);
        switchInt(move _63) -> [0: bb30, 1: bb31, otherwise: bb4];
    }

    bb30: {
        StorageLive(_67);
        _67 = ((_59 as Continue).0: u64);
        _58 = _67;
        StorageDead(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _14;
        _70 = <u64 as Cast>::cast::<u64>(move _71) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_64);
        _64 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb101;
    }

    bb33: {
        StorageDead(_71);
        _69 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _70) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_70);
        _72 = discriminant(_69);
        switchInt(move _72) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_76);
        _76 = ((_69 as Continue).0: u64);
        _68 = _76;
        StorageDead(_76);
        _57 = <u64 as SafeMath>::safe_mul(move _58, move _68) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_73);
        _73 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_68);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb99;
    }

    bb38: {
        StorageDead(_68);
        StorageDead(_58);
        _56 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _57) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_57);
        _77 = discriminant(_56);
        switchInt(move _77) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_81);
        _81 = ((_56 as Continue).0: u64);
        _55 = _81;
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _25;
        _84 = <u8 as Cast>::cast::<u64>(move _85) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_78);
        _78 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_80);
        StorageDead(_78);
        goto -> bb99;
    }

    bb43: {
        StorageDead(_85);
        _83 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _84) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_84);
        _86 = discriminant(_83);
        switchInt(move _86) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_90);
        _90 = ((_83 as Continue).0: u64);
        _82 = _90;
        StorageDead(_90);
        _54 = <u64 as SafeMath>::safe_div(move _55, move _82) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_87);
        _87 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_82);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb98;
    }

    bb48: {
        StorageDead(_82);
        StorageDead(_55);
        _53 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _54) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_54);
        _91 = discriminant(_53);
        switchInt(move _91) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_95);
        _95 = ((_53 as Continue).0: u64);
        _51 = _95;
        StorageDead(_95);
        StorageDead(_83);
        StorageDead(_69);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        goto -> bb78;
    }

    bb51: {
        StorageLive(_92);
        _92 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_94);
        StorageDead(_92);
        goto -> bb98;
    }

    bb53: {
        StorageDead(_105);
        StorageDead(_104);
        _102 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _103) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_103);
        _106 = discriminant(_102);
        switchInt(move _106) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_110);
        _110 = ((_102 as Continue).0: u64);
        _101 = _110;
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _14;
        _113 = <u64 as Cast>::cast::<u64>(move _114) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_107);
        _107 = ((_102 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb97;
    }

    bb58: {
        StorageDead(_114);
        _112 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _113) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_113);
        _115 = discriminant(_112);
        switchInt(move _115) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_119);
        _119 = ((_112 as Continue).0: u64);
        _111 = _119;
        StorageDead(_119);
        _100 = <u64 as SafeMath>::safe_mul(move _101, move _111) -> [return: bb63, unwind continue];
    }

    bb61: {
        StorageLive(_116);
        _116 = ((_112 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_111);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb95;
    }

    bb63: {
        StorageDead(_111);
        StorageDead(_101);
        _99 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _100) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_100);
        _120 = discriminant(_99);
        switchInt(move _120) -> [0: bb65, 1: bb66, otherwise: bb4];
    }

    bb65: {
        StorageLive(_124);
        _124 = ((_99 as Continue).0: u64);
        _98 = _124;
        StorageDead(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _25;
        _127 = <u8 as Cast>::cast::<u64>(move _128) -> [return: bb68, unwind continue];
    }

    bb66: {
        StorageLive(_121);
        _121 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_123);
        StorageDead(_121);
        goto -> bb95;
    }

    bb68: {
        StorageDead(_128);
        _126 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _127) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_127);
        _129 = discriminant(_126);
        switchInt(move _129) -> [0: bb70, 1: bb71, otherwise: bb4];
    }

    bb70: {
        StorageLive(_133);
        _133 = ((_126 as Continue).0: u64);
        _125 = _133;
        StorageDead(_133);
        _97 = <u64 as SafeMath>::safe_div(move _98, move _125) -> [return: bb73, unwind continue];
    }

    bb71: {
        StorageLive(_130);
        _130 = ((_126 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_132);
        _132 = _130;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _132) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_125);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb94;
    }

    bb73: {
        StorageDead(_125);
        StorageDead(_98);
        _96 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _97) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_97);
        _134 = discriminant(_96);
        switchInt(move _134) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_138);
        _138 = ((_96 as Continue).0: u64);
        _51 = _138;
        StorageDead(_138);
        StorageDead(_126);
        StorageDead(_112);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_96);
        goto -> bb78;
    }

    bb76: {
        StorageLive(_135);
        _135 = ((_96 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_137);
        _137 = _135;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _137) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_137);
        StorageDead(_135);
        goto -> bb94;
    }

    bb78: {
        StorageLive(_139);
        _140 = discriminant(((*_1).17: controller::position::PositionDirection));
        switchInt(move _140) -> [0: bb80, 1: bb79, otherwise: bb4];
    }

    bb79: {
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = _26;
        StorageLive(_153);
        _153 = _51;
        _151 = <u64 as SafeMath>::safe_sub(move _152, move _153) -> [return: bb86, unwind continue];
    }

    bb80: {
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = _26;
        StorageLive(_144);
        _144 = _51;
        _142 = <u64 as SafeMath>::safe_add(move _143, move _144) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_144);
        StorageDead(_143);
        _141 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _142) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_142);
        _145 = discriminant(_141);
        switchInt(move _145) -> [0: bb83, 1: bb84, otherwise: bb4];
    }

    bb83: {
        StorageLive(_149);
        _149 = ((_141 as Continue).0: u64);
        _139 = _149;
        StorageDead(_149);
        StorageDead(_141);
        goto -> bb91;
    }

    bb84: {
        StorageLive(_146);
        _146 = ((_141 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_141);
        goto -> bb93;
    }

    bb86: {
        StorageDead(_153);
        StorageDead(_152);
        _150 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _151) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_151);
        _154 = discriminant(_150);
        switchInt(move _154) -> [0: bb88, 1: bb89, otherwise: bb4];
    }

    bb88: {
        StorageLive(_158);
        _158 = ((_150 as Continue).0: u64);
        _139 = _158;
        StorageDead(_158);
        StorageDead(_150);
        goto -> bb91;
    }

    bb89: {
        StorageLive(_155);
        _155 = ((_150 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_157);
        _157 = _155;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _157) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_150);
        goto -> bb93;
    }

    bb91: {
        StorageLive(_159);
        _159 = _139;
        StorageLive(_160);
        _160 = _3;
        StorageLive(_161);
        _161 = ((*_1).17: controller::position::PositionDirection);
        _0 = math::orders::standardize_price(move _159, move _160, move _161) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_139);
        StorageDead(_51);
        StorageDead(_35);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb107;
    }

    bb93: {
        StorageDead(_139);
        goto -> bb102;
    }

    bb94: {
        StorageDead(_126);
        goto -> bb96;
    }

    bb95: {
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_112);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_96);
        goto -> bb102;
    }

    bb98: {
        StorageDead(_83);
        goto -> bb100;
    }

    bb99: {
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_69);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_53);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_51);
        goto -> bb103;
    }

    bb103: {
        StorageDead(_35);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_14);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_4);
        goto -> bb107;
    }

    bb107: {
        return;
    }
}
