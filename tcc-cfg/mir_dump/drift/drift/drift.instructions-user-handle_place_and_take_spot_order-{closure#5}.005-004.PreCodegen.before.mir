// MIR for `instructions::user::handle_place_and_take_spot_order::{closure#5}` before PreCodegen

fn instructions::user::handle_place_and_take_spot_order::{closure#5}(_1: {closure@programs/drift/src/macros.rs:70:40: 70:43}, _2: anchor_lang::error::Error) -> error::ErrorCode {
    let mut _0: error::ErrorCode;
    let _3: error::ErrorCode;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let mut _7: &std::string::String;
    let _8: &std::string::String;
    let _9: std::string::String;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[&str; 2];
    let _14: &[&str; 2];
    let _15: [&str; 2];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let mut _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let mut _21: &error::ErrorCode;
    let _22: &error::ErrorCode;
    scope 1 {
        debug error_code => _3;
        let _10: std::string::String;
        let mut _23: &[&str; 2];
        scope 2 {
            debug res => _10;
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = error::ErrorCode::UnableToLoadAccountLoader;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _23 = const _;
        _14 = &(*_23);
        _13 = &(*_14);
        _12 = move _13 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = &_3;
        _21 = &(*_22);
        _20 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _21) -> [return: bb1, unwind: bb9];
    }

    bb1: {
        StorageDead(_21);
        _19 = [move _20];
        StorageDead(_20);
        _18 = &_19;
        _17 = &(*_18);
        _16 = move _17 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_17);
        _11 = Arguments::<'_>::new_v1(move _12, move _16) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_12);
        _10 = format(move _11) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_14);
        _9 = move _10;
        StorageDead(_10);
        _8 = &_9;
        _7 = &(*_8);
        _6 = <String as Deref>::deref(move _7) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _5 = &(*_6);
        StorageDead(_7);
        _4 = solana_program::log::sol_log(move _5) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        StorageDead(_5);
        drop(_9) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_4);
        _0 = _3;
        StorageDead(_3);
        drop(_2) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_9) -> [return: bb9, unwind terminate(cleanup)];
    }

    bb9 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate(cleanup)];
    }

    bb10 (cleanup): {
        resume;
    }
}
