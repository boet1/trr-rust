// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::get_close_perp_params` after PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::get_close_perp_params(_1: &PerpMarket, _2: controller::position::PositionDirection, _3: u64) -> std::result::Result<order_params::OrderParams, error::ErrorCode> {
    debug market => _1;
    debug direction_to_close => _2;
    debug base_asset_amount => _3;
    let mut _0: std::result::Result<state::order_params::OrderParams, error::ErrorCode>;
    let _4: i64;
    let _5: i64;
    let mut _6: (i64, i64);
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _8: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _9: &state::perp_market::PerpMarket;
    let mut _10: controller::position::PositionDirection;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: (i64, i64);
    let mut _17: state::user::MarketType;
    let mut _18: controller::position::PositionDirection;
    let mut _19: state::user::OrderType;
    let mut _20: u16;
    let mut _21: u64;
    let mut _22: std::option::Option<i64>;
    let mut _23: i64;
    let mut _24: std::option::Option<i64>;
    let mut _25: i64;
    let mut _26: std::option::Option<u8>;
    let mut _27: std::option::Option<i32>;
    let mut _28: i32;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _30: std::result::Result<i32, error::ErrorCode>;
    let mut _31: i64;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: state::order_params::OrderParams;
    let mut _38: state::order_params::OrderParams;
    scope 1 {
        debug auction_start_price => _4;
        debug auction_end_price => _5;
        let _16: state::order_params::OrderParams;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: i32;
        scope 6 {
            debug params => _16;
        }
        scope 7 {
            debug residual => _33;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _36;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = _2;
        _8 = order_params::OrderParams::get_perp_baseline_start_end_price_offset(move _9, move _10, const 1_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: (i64, i64));
        _6 = _15;
        StorageDead(_15);
        StorageLive(_4);
        _4 = (_6.0: i64);
        StorageLive(_5);
        _5 = (_6.1: i64);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        _17 = state::user::MarketType::Perp;
        StorageLive(_18);
        _18 = _2;
        StorageLive(_19);
        _19 = state::user::OrderType::Oracle;
        StorageLive(_20);
        _20 = ((*_1).21: u16);
        StorageLive(_21);
        _21 = _3;
        StorageLive(_22);
        StorageLive(_23);
        _23 = _4;
        _22 = Option::<i64>::Some(move _23);
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _5;
        _24 = Option::<i64>::Some(move _25);
        StorageDead(_25);
        StorageLive(_26);
        _26 = Option::<u8>::Some(const 80_u8);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _5;
        _30 = <i64 as Cast>::cast::<i32>(move _31) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb13;
    }

    bb7: {
        StorageDead(_31);
        _29 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _30) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_36);
        _36 = ((_29 as Continue).0: i32);
        _28 = _36;
        StorageDead(_36);
        _27 = Option::<i32>::Some(move _28);
        StorageDead(_28);
        StorageLive(_37);
        _37 = <order_params::OrderParams as Default>::default() -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_33);
        _33 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<order_params::OrderParams, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_29);
        StorageDead(_16);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb13;
    }

    bb12: {
        _16 = order_params::OrderParams { order_type: move _19, market_type: move _17, direction: move _18, user_order_id: (_37.3: u8), base_asset_amount: move _21, price: (_37.5: u64), market_index: move _20, reduce_only: const true, post_only: (_37.8: state::order_params::PostOnlyParam), bit_flags: (_37.9: u8), max_ts: (_37.10: std::option::Option<i64>), trigger_price: (_37.11: std::option::Option<u64>), trigger_condition: (_37.12: state::user::OrderTriggerCondition), oracle_price_offset: move _27, auction_duration: move _26, auction_start_price: move _22, auction_end_price: move _24 };
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_37);
        StorageDead(_29);
        StorageLive(_38);
        _38 = _16;
        _0 = std::result::Result::<order_params::OrderParams, error::ErrorCode>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_16);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
