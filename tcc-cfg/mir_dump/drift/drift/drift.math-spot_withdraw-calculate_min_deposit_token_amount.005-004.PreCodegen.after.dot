digraph Mir_0_2838 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_min_deposit_token_amount(_1: u128, _2: u128) -&gt; std::result::Result&lt;u128, error::ErrorCode&gt;<br align="left"/>let _3: u128;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _6: u128;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: u128;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: u128;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _18: u128;<br align="left"/>let mut _19: u128;<br align="left"/>debug deposit_token_twap =&gt; _1;<br align="left"/>debug withdraw_guard_threshold =&gt; _2;<br align="left"/>debug min_deposit_token =&gt; _3;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>>;
    bb0__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = _1<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _1<br/>_10 = Eq(const 4_u128, const 0_u128)<br/></td></tr><tr><td align="left">assert(!move _10, &quot;attempt to divide `{}` by zero&quot;, _9)</td></tr></table>>];
    bb1__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_8 = Div(move _9, const 4_u128)<br/>StorageDead(_9)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _2<br/>StorageLive(_13)<br/>_13 = _1<br/></td></tr><tr><td align="left">_11 = &lt;u128 as Ord&gt;::min(move _12, move _13)</td></tr></table>>];
    bb2__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_7 = &lt;u128 as Ord&gt;::max(move _8, move _11)</td></tr></table>>];
    bb3__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">_5 = &lt;u128 as SafeMath&gt;::safe_sub(move _6, move _7)</td></tr></table>>];
    bb4__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb5__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_14 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb6__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_4 as Continue).0: u128)<br/>_3 = _18<br/>StorageDead(_18)<br/>StorageDead(_4)<br/>StorageLive(_19)<br/>_19 = _3<br/>_0 = std::result::Result::&lt;u128, error::ErrorCode&gt;::Ok(move _19)<br/>StorageDead(_19)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_17)<br/>_17 = _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb9__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_2838 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2838 -> bb1__0_2838 [label="success"];
    bb1__0_2838 -> bb2__0_2838 [label="return"];
    bb2__0_2838 -> bb3__0_2838 [label="return"];
    bb3__0_2838 -> bb4__0_2838 [label="return"];
    bb4__0_2838 -> bb5__0_2838 [label="return"];
    bb5__0_2838 -> bb6__0_2838 [label="0"];
    bb5__0_2838 -> bb8__0_2838 [label="1"];
    bb5__0_2838 -> bb7__0_2838 [label="otherwise"];
    bb6__0_2838 -> bb10__0_2838 [label=""];
    bb8__0_2838 -> bb9__0_2838 [label="return"];
    bb9__0_2838 -> bb10__0_2838 [label=""];
}
