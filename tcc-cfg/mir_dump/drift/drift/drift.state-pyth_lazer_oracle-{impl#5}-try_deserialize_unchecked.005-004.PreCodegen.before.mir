// MIR for `state::pyth_lazer_oracle::<impl at programs/drift/src/state/pyth_lazer_oracle.rs:12:1: 12:30>::try_deserialize_unchecked` before PreCodegen

fn state::pyth_lazer_oracle::<impl at programs/drift/src/state/pyth_lazer_oracle.rs:12:1: 12:30>::try_deserialize_unchecked(_1: &mut &[u8]) -> std::result::Result<PythLazerOracle, anchor_lang::error::Error> {
    debug buf => _1;
    let mut _0: std::result::Result<state::pyth_lazer_oracle::PythLazerOracle, anchor_lang::error::Error>;
    let _2: &[u8];
    let _3: &[u8];
    let _4: &[u8];
    let mut _5: &[u8];
    let mut _6: std::ops::RangeFrom<usize>;
    let mut _8: &[u8];
    let mut _9: state::pyth_lazer_oracle::PythLazerOracle;
    let mut _10: &[u8];
    scope 1 {
        debug data => _2;
        let _7: &state::pyth_lazer_oracle::PythLazerOracle;
        scope 2 {
            debug account => _7;
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _10 = deref_copy (*_1);
        _5 = &(*_10);
        StorageLive(_6);
        _6 = RangeFrom::<usize> { start: const 8_usize };
        _4 = <[u8] as Index<RangeFrom<usize>>>::index(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_5);
        _3 = &(*_4);
        _2 = &(*_3);
        StorageDead(_3);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_2);
        _7 = bytemuck::from_bytes::<PythLazerOracle>(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = (*_7);
        _0 = std::result::Result::<PythLazerOracle, anchor_lang::error::Error>::Ok(move _9);
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_2);
        return;
    }
}
