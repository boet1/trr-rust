digraph Mir_0_1131 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn admin::handle_update_feature_bit_flags_median_trigger_price(_1: anchor_lang::context::Context&lt;ReErased, ReErased, ReErased, ReErased, instructions::admin::HotAdminUpdateState&lt;ReErased&gt;&gt;, _2: bool) -&gt; std::result::Result&lt;(), anchor_lang::error::Error&gt;<br align="left"/>let _3: &amp;ReErased mut std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let _6: ();<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, ()&gt;;<br align="left"/>let mut _8: std::result::Result&lt;(), error::ErrorCode&gt;;<br align="left"/>let mut _9: bool;<br align="left"/>let mut _10: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _11: anchor_lang::prelude::Pubkey;<br align="left"/>let mut _12: &amp;ReErased anchor_lang::prelude::Signer&lt;ReErased&gt;;<br align="left"/>let mut _13: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _14: &amp;ReErased anchor_lang::prelude::Pubkey;<br align="left"/>let _15: &amp;ReErased state::state::State;<br align="left"/>let mut _16: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _17: ();<br align="left"/>let _18: error::ErrorCode;<br align="left"/>let _19: ();<br align="left"/>let mut _20: &amp;ReErased str;<br align="left"/>let _21: &amp;ReErased str;<br align="left"/>let mut _22: &amp;ReErased std::string::String;<br align="left"/>let _23: &amp;ReErased std::string::String;<br align="left"/>let _24: std::string::String;<br align="left"/>let _25: std::string::String;<br align="left"/>let mut _26: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _27: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _28: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _29: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let _30: [&amp;ReErased str; 2_usize];<br align="left"/>let mut _31: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _32: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _33: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _34: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _35: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _36: &amp;ReErased error::ErrorCode;<br align="left"/>let _37: &amp;ReErased error::ErrorCode;<br align="left"/>let _38: ();<br align="left"/>let mut _39: &amp;ReErased str;<br align="left"/>let _40: &amp;ReErased str;<br align="left"/>let mut _41: error::ErrorCode;<br align="left"/>let mut _42: isize;<br align="left"/>let _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _44: !;<br align="left"/>let mut _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _46: ();<br align="left"/>let _47: ();<br align="left"/>let mut _48: &amp;ReErased str;<br align="left"/>let _49: &amp;ReErased str;<br align="left"/>let mut _50: u8;<br align="left"/>let mut _51: &amp;ReErased state::state::State;<br align="left"/>let mut _52: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _53: u8;<br align="left"/>let mut _54: isize;<br align="left"/>let mut _55: (isize, bool);<br align="left"/>let mut _56: &amp;ReErased mut state::state::State;<br align="left"/>let mut _57: &amp;ReErased mut anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let _58: ();<br align="left"/>let mut _59: &amp;ReErased str;<br align="left"/>let _60: &amp;ReErased str;<br align="left"/>let mut _61: u8;<br align="left"/>let mut _62: &amp;ReErased state::state::State;<br align="left"/>let mut _63: &amp;ReErased anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _64: u8;<br align="left"/>let mut _65: u8;<br align="left"/>let mut _66: isize;<br align="left"/>let mut _67: (isize, bool);<br align="left"/>let mut _68: &amp;ReErased mut state::state::State;<br align="left"/>let mut _69: &amp;ReErased mut anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _70: ();<br align="left"/>let mut _71: &amp;ReErased [&amp;ReErased str; 2_usize];<br align="left"/>let mut _72: &amp;ReErased mut instructions::admin::HotAdminUpdateState&lt;ReErased&gt;;<br align="left"/>let mut _73: &amp;ReErased mut instructions::admin::HotAdminUpdateState&lt;ReErased&gt;;<br align="left"/>let mut _74: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _75: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _76: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _77: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _78: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;, std::alloc::Global&gt;;<br align="left"/>let mut _79: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _80: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _81: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _82: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>let mut _83: *const anchor_lang::prelude::Account&lt;ReErased, state::state::State&gt;;<br align="left"/>debug ctx =&gt; _1;<br align="left"/>debug enable =&gt; _2;<br align="left"/>debug state =&gt; _3;<br align="left"/>debug error_code =&gt; _18;<br align="left"/>debug res =&gt; _25;<br align="left"/>debug residual =&gt; _43;<br align="left"/>debug val =&gt; _46;<br align="left"/>>;
    bb0__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>_72 = deref_copy (_1.1: &amp;mut instructions::admin::HotAdminUpdateState&lt;'_&gt;)<br/>_3 = &amp;mut ((*_72).1: std::boxed::Box&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _2<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_73 = deref_copy (_1.1: &amp;mut instructions::admin::HotAdminUpdateState&lt;'_&gt;)<br/>_12 = &amp;((*_73).0: anchor_lang::prelude::Signer&lt;'_&gt;)<br/></td></tr><tr><td align="left">_11 = &lt;anchor_lang::prelude::Signer&lt;'_&gt; as anchor_lang::Key&gt;::key(move _12)</td></tr></table>>];
    bb2__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_10 = &amp;_11<br/>StorageDead(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_74 = deref_copy (*_3)<br/>_79 = (((_74.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_16 = &amp;(*_79)<br/></td></tr><tr><td align="left">_15 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _16)</td></tr></table>>];
    bb3__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_14 = &amp;((*_15).0: anchor_lang::prelude::Pubkey)<br/>_13 = &amp;(*_14)<br/></td></tr><tr><td align="left">_9 = &lt;anchor_lang::prelude::Pubkey as PartialEq&gt;::eq(move _10, move _13)</td></tr></table>>];
    bb4__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb5__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageLive(_17)<br/>_17 = ()<br/>_8 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _17)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb6__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/>StorageDead(_10)<br/>StorageLive(_18)<br/>_18 = error::ErrorCode::DefaultError<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_71 = const _<br/>_29 = &amp;(*_71)<br/>_28 = &amp;(*_29)<br/>_27 = move _28 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_28)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = &amp;_18<br/>_36 = &amp;(*_37)<br/></td></tr><tr><td align="left">_35 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;error::ErrorCode&gt;(move _36)</td></tr></table>>];
    bb7__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_34 = [move _35]<br/>StorageDead(_35)<br/>_33 = &amp;_34<br/>_32 = &amp;(*_33)<br/>_31 = move _32 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_26 = Arguments::&lt;'_&gt;::new_v1(move _27, move _31)</td></tr></table>>];
    bb8__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">_25 = format(move _26)</td></tr></table>>];
    bb9__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_37)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageDead(_29)<br/>_24 = move _25<br/>StorageDead(_25)<br/>_23 = &amp;_24<br/>_22 = &amp;(*_23)<br/></td></tr><tr><td align="left">_21 = &lt;String as Deref&gt;::deref(move _22)</td></tr></table>>];
    bb10__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_20 = &amp;(*_21)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_19 = solana_program::log::sol_log(move _20)</td></tr></table>>];
    bb11__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/></td></tr><tr><td align="left">drop(_24)</td></tr></table>>];
    bb12__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_19)<br/>StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = const &quot;Only state admin can re-enable after kill switch&quot;<br/>_39 = &amp;(*_40)<br/></td></tr><tr><td align="left">_38 = solana_program::log::sol_log(move _39)</td></tr></table>>];
    bb13__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_40)<br/>StorageDead(_38)<br/>StorageLive(_41)<br/>_41 = _18<br/>_8 = std::result::Result::&lt;(), error::ErrorCode&gt;::Err(move _41)<br/>StorageDead(_41)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb15__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_42 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _42)</td></tr></table>>];
    bb16__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_7 as Continue).0: ())<br/>_6 = _46<br/>StorageDead(_46)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = const &quot;Setting second bit to 1, enabling median trigger price&quot;<br/>_48 = &amp;(*_49)<br/></td></tr><tr><td align="left">_47 = solana_program::log::sol_log(move _48)</td></tr></table>>];
    bb17__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb18__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_45)<br/>_45 = _43<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), anchor_lang::error::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _45)</td></tr></table>>];
    bb19__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_43)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_49)<br/>StorageDead(_47)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_75 = deref_copy (*_3)<br/>_80 = (((_75.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_52 = &amp;(*_80)<br/></td></tr><tr><td align="left">_51 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _52)</td></tr></table>>];
    bb21__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>_50 = ((*_51).24: u8)<br/>StorageLive(_53)<br/>StorageLive(_54)<br/>_55 = CheckedAdd(const _, const 0_isize)<br/></td></tr><tr><td align="left">assert(!move (_55.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const _, const 0_isize)</td></tr></table>>];
    bb22__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">_54 = move (_55.0: isize)<br/>_53 = move _54 as u8 (IntToInt)<br/>StorageDead(_54)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_76 = deref_copy (*_3)<br/>_81 = (((_76.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_57 = &amp;mut (*_81)<br/></td></tr><tr><td align="left">_56 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as DerefMut&gt;::deref_mut(move _57)</td></tr></table>>];
    bb23__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>((*_56).24: u8) = BitOr(move _50, move _53)<br/>StorageDead(_53)<br/>StorageDead(_50)<br/>StorageDead(_56)<br/>StorageDead(_51)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = const &quot;Setting second bit to 0, disabling median trigger price&quot;<br/>_59 = &amp;(*_60)<br/></td></tr><tr><td align="left">_58 = solana_program::log::sol_log(move _59)</td></tr></table>>];
    bb25__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_60)<br/>StorageDead(_58)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_77 = deref_copy (*_3)<br/>_82 = (((_77.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_63 = &amp;(*_82)<br/></td></tr><tr><td align="left">_62 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as Deref&gt;::deref(move _63)</td></tr></table>>];
    bb26__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>_61 = ((*_62).24: u8)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_67 = CheckedAdd(const _, const 0_isize)<br/></td></tr><tr><td align="left">assert(!move (_67.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, const _, const 0_isize)</td></tr></table>>];
    bb27__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">_66 = move (_67.0: isize)<br/>_65 = move _66 as u8 (IntToInt)<br/>StorageDead(_66)<br/>_64 = Not(move _65)<br/>StorageDead(_65)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_78 = deref_copy (*_3)<br/>_83 = (((_78.0: std::ptr::Unique&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: std::ptr::NonNull&lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt;&gt;).0: *const anchor_lang::prelude::Account&lt;'_, state::state::State&gt;)<br/>_69 = &amp;mut (*_83)<br/></td></tr><tr><td align="left">_68 = &lt;anchor_lang::prelude::Account&lt;'_, state::state::State&gt; as DerefMut&gt;::deref_mut(move _69)</td></tr></table>>];
    bb28__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>((*_68).24: u8) = BitAnd(move _61, move _64)<br/>StorageDead(_64)<br/>StorageDead(_61)<br/>StorageDead(_68)<br/>StorageDead(_62)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_70)<br/>_70 = ()<br/>_0 = std::result::Result::&lt;(), anchor_lang::error::Error&gt;::Ok(move _70)<br/>StorageDead(_70)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left">return</td></tr></table>>];
    bb31__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">31 (cleanup)</td></tr><tr><td align="left">drop(_24)</td></tr></table>>];
    bb32__0_1131 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">32 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1131 -> bb24__0_1131 [label="0"];
    bb0__0_1131 -> bb1__0_1131 [label="otherwise"];
    bb1__0_1131 -> bb2__0_1131 [label="return"];
    bb2__0_1131 -> bb3__0_1131 [label="return"];
    bb3__0_1131 -> bb4__0_1131 [label="return"];
    bb4__0_1131 -> bb6__0_1131 [label="0"];
    bb4__0_1131 -> bb5__0_1131 [label="otherwise"];
    bb5__0_1131 -> bb14__0_1131 [label=""];
    bb6__0_1131 -> bb7__0_1131 [label="return"];
    bb7__0_1131 -> bb8__0_1131 [label="return"];
    bb8__0_1131 -> bb9__0_1131 [label="return"];
    bb9__0_1131 -> bb10__0_1131 [label="return"];
    bb9__0_1131 -> bb31__0_1131 [label="unwind"];
    bb10__0_1131 -> bb11__0_1131 [label="return"];
    bb10__0_1131 -> bb31__0_1131 [label="unwind"];
    bb11__0_1131 -> bb12__0_1131 [label="return"];
    bb11__0_1131 -> bb32__0_1131 [label="unwind"];
    bb12__0_1131 -> bb13__0_1131 [label="return"];
    bb13__0_1131 -> bb14__0_1131 [label=""];
    bb14__0_1131 -> bb15__0_1131 [label="return"];
    bb15__0_1131 -> bb16__0_1131 [label="0"];
    bb15__0_1131 -> bb18__0_1131 [label="1"];
    bb15__0_1131 -> bb17__0_1131 [label="otherwise"];
    bb16__0_1131 -> bb20__0_1131 [label="return"];
    bb18__0_1131 -> bb19__0_1131 [label="return"];
    bb19__0_1131 -> bb30__0_1131 [label=""];
    bb20__0_1131 -> bb21__0_1131 [label="return"];
    bb21__0_1131 -> bb22__0_1131 [label="success"];
    bb22__0_1131 -> bb23__0_1131 [label="return"];
    bb23__0_1131 -> bb29__0_1131 [label=""];
    bb24__0_1131 -> bb25__0_1131 [label="return"];
    bb25__0_1131 -> bb26__0_1131 [label="return"];
    bb26__0_1131 -> bb27__0_1131 [label="success"];
    bb27__0_1131 -> bb28__0_1131 [label="return"];
    bb28__0_1131 -> bb29__0_1131 [label=""];
    bb29__0_1131 -> bb30__0_1131 [label=""];
    bb31__0_1131 -> bb32__0_1131 [label="return"];
}
