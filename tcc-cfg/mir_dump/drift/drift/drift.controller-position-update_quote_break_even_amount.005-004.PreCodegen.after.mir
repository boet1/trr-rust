// MIR for `update_quote_break_even_amount` after PreCodegen

fn update_quote_break_even_amount(_1: &mut PerpPosition, _2: &mut PerpMarket, _3: i64) -> std::result::Result<(), error::ErrorCode> {
    debug position => _1;
    debug market => _2;
    debug delta => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: i64;
    let mut _7: bool;
    let mut _8: i64;
    let mut _9: !;
    let mut _10: ();
    let mut _11: i64;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _13: std::result::Result<i64, error::ErrorCode>;
    let mut _14: i64;
    let mut _15: i64;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: i64;
    let _21: ();
    let mut _22: controller::position::PositionDirection;
    let mut _23: &state::user::PerpPosition;
    let mut _24: isize;
    let mut _25: i128;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _27: std::result::Result<i128, error::ErrorCode>;
    let mut _28: i128;
    let mut _29: i128;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _31: std::result::Result<i128, error::ErrorCode>;
    let mut _32: i64;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: i128;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: i128;
    let mut _43: i128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _45: std::result::Result<i128, error::ErrorCode>;
    let mut _46: i128;
    let mut _47: i128;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _49: std::result::Result<i128, error::ErrorCode>;
    let mut _50: i64;
    let mut _51: isize;
    let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _55: i128;
    let mut _56: isize;
    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: i128;
    let mut _61: ();
    scope 1 {
        debug residual => _17;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _20;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _34;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _37;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _39;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _42;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _52;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _55;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _57;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _60;
        scope 20 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = _3;
        _5 = Eq(move _6, const 0_i64);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_6);
        goto -> bb3;
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = ((*_1).1: i64);
        _7 = Eq(move _8, const 0_i64);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageLive(_10);
        _10 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb38;
    }

    bb4: {
        StorageDead(_8);
        _4 = const ();
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = ((*_1).3: i64);
        StorageLive(_15);
        _15 = _3;
        _13 = <i64 as SafeMath>::safe_add(move _14, move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_15);
        StorageDead(_14);
        _12 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_20);
        _20 = ((_12 as Continue).0: i64);
        _11 = _20;
        StorageDead(_20);
        ((*_1).3: i64) = move _11;
        StorageDead(_11);
        StorageDead(_12);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        _22 = PerpPosition::get_direction(move _23) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_17);
        _17 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_11);
        StorageDead(_12);
        goto -> bb38;
    }

    bb11: {
        StorageDead(_23);
        _24 = discriminant(_22);
        switchInt(move _24) -> [0: bb13, 1: bb12, otherwise: bb8];
    }

    bb12: {
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = (((*_2).1: state::perp_market::AMM).22: i128);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _3;
        _49 = <i64 as Cast>::cast::<i128>(move _50) -> [return: bb24, unwind continue];
    }

    bb13: {
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = (((*_2).1: state::perp_market::AMM).21: i128);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _3;
        _31 = <i64 as Cast>::cast::<i128>(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        _30 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_31);
        _33 = discriminant(_30);
        switchInt(move _33) -> [0: bb16, 1: bb17, otherwise: bb8];
    }

    bb16: {
        StorageLive(_37);
        _37 = ((_30 as Continue).0: i128);
        _29 = _37;
        StorageDead(_37);
        _27 = <i128 as SafeMath>::safe_add(move _28, move _29) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_34);
        _34 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb36;
    }

    bb19: {
        StorageDead(_29);
        StorageDead(_28);
        _26 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _27) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_27);
        _38 = discriminant(_26);
        switchInt(move _38) -> [0: bb21, 1: bb22, otherwise: bb8];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_26 as Continue).0: i128);
        _25 = _42;
        StorageDead(_42);
        (((*_2).1: state::perp_market::AMM).21: i128) = move _25;
        _21 = const ();
        StorageDead(_25);
        StorageDead(_30);
        StorageDead(_26);
        goto -> bb34;
    }

    bb22: {
        StorageLive(_39);
        _39 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb36;
    }

    bb24: {
        StorageDead(_50);
        _48 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_49);
        _51 = discriminant(_48);
        switchInt(move _51) -> [0: bb26, 1: bb27, otherwise: bb8];
    }

    bb26: {
        StorageLive(_55);
        _55 = ((_48 as Continue).0: i128);
        _47 = _55;
        StorageDead(_55);
        _45 = <i128 as SafeMath>::safe_add(move _46, move _47) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_52);
        _52 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb35;
    }

    bb29: {
        StorageDead(_47);
        StorageDead(_46);
        _44 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_45);
        _56 = discriminant(_44);
        switchInt(move _56) -> [0: bb31, 1: bb32, otherwise: bb8];
    }

    bb31: {
        StorageLive(_60);
        _60 = ((_44 as Continue).0: i128);
        _43 = _60;
        StorageDead(_60);
        (((*_2).1: state::perp_market::AMM).22: i128) = move _43;
        _21 = const ();
        StorageDead(_43);
        StorageDead(_48);
        StorageDead(_44);
        goto -> bb34;
    }

    bb32: {
        StorageLive(_57);
        _57 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb35;
    }

    bb34: {
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_61);
        _61 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        goto -> bb38;
    }

    bb35: {
        StorageDead(_43);
        StorageDead(_48);
        StorageDead(_44);
        goto -> bb37;
    }

    bb36: {
        StorageDead(_25);
        StorageDead(_30);
        StorageDead(_26);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb38;
    }

    bb38: {
        return;
    }
}
