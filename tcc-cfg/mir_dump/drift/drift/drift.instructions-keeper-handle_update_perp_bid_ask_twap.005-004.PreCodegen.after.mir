// MIR for `keeper::handle_update_perp_bid_ask_twap` after PreCodegen

fn keeper::handle_update_perp_bid_ask_twap(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::UpdatePerpBidAskTwap<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _4: std::result::Result<(), anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _6: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: ();
    let _12: ();
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _14: std::result::Result<(), anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _16: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _21: ();
    let _22: ();
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _24: std::result::Result<(), anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::AccountInfo<'_>;
    let _26: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _27: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _28: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _29: isize;
    let _30: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _31: !;
    let mut _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _33: ();
    let _34: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _35: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _37: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _38: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _40: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _41: isize;
    let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _45: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _48: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle_map::OracleMap<'_>>;
    let mut _59: std::result::Result<state::oracle_map::OracleMap<'_>, error::ErrorCode>;
    let mut _60: &anchor_lang::prelude::AccountInfo<'_>;
    let _61: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _62: u64;
    let mut _63: std::option::Option<state::state::OracleGuardRails>;
    let mut _64: state::state::OracleGuardRails;
    let mut _65: &state::state::State;
    let mut _66: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _74: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _75: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _76: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _77: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _83: ();
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _85: std::result::Result<(), error::ErrorCode>;
    let mut _86: bool;
    let mut _87: &state::user::UserStats;
    let mut _88: &std::cell::Ref<'_, state::user::UserStats>;
    let mut _89: ();
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: &std::string::String;
    let _95: &std::string::String;
    let _96: std::string::String;
    let mut _98: std::fmt::Arguments<'_>;
    let mut _99: &[&str];
    let mut _100: &[&str; 2];
    let _101: &[&str; 2];
    let _102: [&str; 2];
    let mut _103: &[core::fmt::rt::Argument<'_>];
    let mut _104: &[core::fmt::rt::Argument<'_>; 1];
    let _105: &[core::fmt::rt::Argument<'_>; 1];
    let _106: [core::fmt::rt::Argument<'_>; 1];
    let mut _107: core::fmt::rt::Argument<'_>;
    let mut _108: &error::ErrorCode;
    let _109: &error::ErrorCode;
    let _110: ();
    let mut _111: &str;
    let _112: &str;
    let mut _113: error::ErrorCode;
    let mut _114: isize;
    let mut _116: !;
    let mut _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: (u64, bool);
    let _121: ();
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _123: std::result::Result<(), error::ErrorCode>;
    let mut _124: bool;
    let mut _125: u64;
    let mut _126: &state::user::UserStats;
    let mut _127: &std::cell::Ref<'_, state::user::UserStats>;
    let mut _128: u64;
    let mut _129: ();
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: &std::string::String;
    let _135: &std::string::String;
    let _136: std::string::String;
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[&str; 2];
    let _141: &[&str; 2];
    let _142: [&str; 2];
    let mut _143: &[core::fmt::rt::Argument<'_>];
    let mut _144: &[core::fmt::rt::Argument<'_>; 1];
    let _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: [core::fmt::rt::Argument<'_>; 1];
    let mut _147: core::fmt::rt::Argument<'_>;
    let mut _148: &error::ErrorCode;
    let _149: &error::ErrorCode;
    let _150: ();
    let mut _151: &str;
    let _152: &str;
    let mut _153: &std::string::String;
    let _154: &std::string::String;
    let _155: std::string::String;
    let mut _157: std::fmt::Arguments<'_>;
    let mut _158: &[&str];
    let mut _159: &[&str; 2];
    let _160: &[&str; 2];
    let _161: [&str; 2];
    let mut _162: &[core::fmt::rt::Argument<'_>];
    let mut _163: &[core::fmt::rt::Argument<'_>; 2];
    let _164: &[core::fmt::rt::Argument<'_>; 2];
    let _165: [core::fmt::rt::Argument<'_>; 2];
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &u64;
    let _168: &u64;
    let _169: &state::user::UserStats;
    let mut _170: &std::cell::Ref<'_, state::user::UserStats>;
    let mut _171: core::fmt::rt::Argument<'_>;
    let mut _172: &u64;
    let _173: &u64;
    let mut _174: error::ErrorCode;
    let mut _175: isize;
    let mut _177: !;
    let mut _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _181: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _182: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _183: &mut state::oracle_map::OracleMap<'_>;
    let mut _184: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _185: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _186: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _187: &state::perp_market::PerpMarket;
    let _188: &state::perp_market::PerpMarket;
    let mut _189: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::MMOraclePriceData>;
    let mut _197: std::result::Result<state::oracle::MMOraclePriceData, error::ErrorCode>;
    let mut _198: &state::perp_market::PerpMarket;
    let _199: &state::perp_market::PerpMarket;
    let mut _200: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _201: state::oracle::OraclePriceData;
    let mut _202: u64;
    let mut _203: &state::state::ValidityGuardRails;
    let _204: &state::state::ValidityGuardRails;
    let _205: &state::state::State;
    let mut _206: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _207: isize;
    let mut _209: !;
    let mut _210: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _212: i128;
    let mut _213: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _214: std::result::Result<i128, error::ErrorCode>;
    let mut _215: &mut state::perp_market::PerpMarket;
    let mut _216: &mut state::perp_market::PerpMarket;
    let mut _217: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _218: &state::oracle::MMOraclePriceData;
    let _219: &state::oracle::MMOraclePriceData;
    let mut _220: &state::state::State;
    let _221: &state::state::State;
    let mut _222: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _223: i64;
    let mut _224: u64;
    let mut _225: isize;
    let mut _227: !;
    let mut _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _231: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _232: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _233: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _235: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::user_map::UserMap<'_>>;
    let mut _236: std::result::Result<state::user_map::UserMap<'_>, error::ErrorCode>;
    let mut _237: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _238: isize;
    let mut _240: !;
    let mut _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _244: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _245: std::result::Result<u64, error::ErrorCode>;
    let mut _246: &state::perp_market::PerpMarket;
    let _247: &state::perp_market::PerpMarket;
    let mut _248: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _256: (std::vec::Vec<math::orders::Level>, std::vec::Vec<math::orders::Level>);
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::vec::Vec<math::orders::Level>, std::vec::Vec<math::orders::Level>)>;
    let mut _258: std::result::Result<(std::vec::Vec<math::orders::Level>, std::vec::Vec<math::orders::Level>), error::ErrorCode>;
    let mut _259: &state::perp_market::PerpMarket;
    let _260: &state::perp_market::PerpMarket;
    let mut _261: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _262: &state::oracle::OraclePriceData;
    let mut _263: &state::user_map::UserMap<'_>;
    let _264: &state::user_map::UserMap<'_>;
    let mut _265: u64;
    let mut _266: i64;
    let mut _267: isize;
    let mut _269: !;
    let mut _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<u64>>;
    let mut _274: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _275: &std::vec::Vec<math::orders::Level>;
    let _276: &std::vec::Vec<math::orders::Level>;
    let mut _277: u64;
    let mut _278: isize;
    let mut _280: !;
    let mut _281: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _284: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<u64>>;
    let mut _285: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _286: &std::vec::Vec<math::orders::Level>;
    let _287: &std::vec::Vec<math::orders::Level>;
    let mut _288: u64;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _294: ();
    let mut _295: &str;
    let _296: &str;
    let mut _297: &std::string::String;
    let _298: &std::string::String;
    let _299: std::string::String;
    let mut _301: std::fmt::Arguments<'_>;
    let mut _302: &[&str];
    let mut _303: &[&str; 2];
    let _304: &[&str; 2];
    let _305: [&str; 2];
    let mut _306: &[core::fmt::rt::Argument<'_>];
    let mut _307: &[core::fmt::rt::Argument<'_>; 2];
    let _308: &[core::fmt::rt::Argument<'_>; 2];
    let _309: [core::fmt::rt::Argument<'_>; 2];
    let mut _310: core::fmt::rt::Argument<'_>;
    let mut _311: &std::option::Option<u64>;
    let _312: &std::option::Option<u64>;
    let mut _313: core::fmt::rt::Argument<'_>;
    let mut _314: &std::option::Option<u64>;
    let _315: &std::option::Option<u64>;
    let _316: ();
    let mut _317: bool;
    let mut _318: &state::perp_market::ContractType;
    let _319: &state::perp_market::PerpMarket;
    let mut _320: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _321: &state::perp_market::ContractType;
    let _322: state::perp_market::ContractType;
    let mut _323: bool;
    let mut _324: &state::perp_market::PerpMarket;
    let _325: &state::perp_market::PerpMarket;
    let mut _326: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _327: state::paused_operations::PerpOperation;
    let mut _328: bool;
    let mut _329: &std::option::Option<u64>;
    let mut _330: bool;
    let mut _331: &std::option::Option<u64>;
    let mut _332: !;
    let _333: ();
    let mut _334: &str;
    let _335: &str;
    let mut _336: ();
    let mut _338: &state::perp_market::PerpMarket;
    let mut _339: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _341: &state::perp_market::PerpMarket;
    let mut _342: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _344: &state::perp_market::PerpMarket;
    let mut _345: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _347: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<i64>>;
    let mut _348: std::result::Result<std::option::Option<i64>, error::ErrorCode>;
    let mut _349: state::perp_market::PerpMarket;
    let mut _350: &state::perp_market::PerpMarket;
    let mut _351: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _352: isize;
    let mut _354: !;
    let mut _355: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _357: ();
    let mut _358: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _359: std::result::Result<(), error::ErrorCode>;
    let mut _360: &mut state::perp_market::AMM;
    let mut _361: &mut state::perp_market::AMM;
    let mut _362: &mut state::perp_market::PerpMarket;
    let mut _363: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _364: i64;
    let mut _365: &state::oracle::OraclePriceData;
    let mut _366: std::option::Option<u64>;
    let mut _367: std::option::Option<u64>;
    let mut _368: std::option::Option<i64>;
    let mut _369: isize;
    let mut _371: !;
    let mut _372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _374: ();
    let mut _375: &str;
    let _376: &str;
    let mut _377: &std::string::String;
    let _378: &std::string::String;
    let _379: std::string::String;
    let mut _381: std::fmt::Arguments<'_>;
    let mut _382: &[&str];
    let mut _383: &[&str; 6];
    let _384: &[&str; 6];
    let _385: [&str; 6];
    let mut _386: &[core::fmt::rt::Argument<'_>];
    let mut _387: &[core::fmt::rt::Argument<'_>; 6];
    let _388: &[core::fmt::rt::Argument<'_>; 6];
    let _389: [core::fmt::rt::Argument<'_>; 6];
    let mut _390: core::fmt::rt::Argument<'_>;
    let mut _391: &u64;
    let _392: &u64;
    let mut _393: core::fmt::rt::Argument<'_>;
    let mut _394: &u64;
    let _395: &u64;
    let _396: &state::perp_market::PerpMarket;
    let mut _397: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _398: core::fmt::rt::Argument<'_>;
    let mut _399: &u64;
    let _400: &u64;
    let mut _401: core::fmt::rt::Argument<'_>;
    let mut _402: &u64;
    let _403: &u64;
    let _404: &state::perp_market::PerpMarket;
    let mut _405: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _406: core::fmt::rt::Argument<'_>;
    let mut _407: &i64;
    let _408: &i64;
    let mut _409: core::fmt::rt::Argument<'_>;
    let mut _410: &i64;
    let _411: &i64;
    let _412: &state::perp_market::PerpMarket;
    let mut _413: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _414: ();
    let mut _415: bool;
    let mut _416: u64;
    let mut _417: &state::perp_market::PerpMarket;
    let mut _418: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _419: u64;
    let mut _420: bool;
    let mut _421: u64;
    let mut _422: &state::perp_market::PerpMarket;
    let mut _423: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _424: u64;
    let _425: ();
    let mut _426: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _427: std::result::Result<(), error::ErrorCode>;
    let mut _428: bool;
    let mut _429: i64;
    let mut _430: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _431: std::result::Result<i64, error::ErrorCode>;
    let mut _432: i64;
    let mut _433: &state::perp_market::PerpMarket;
    let mut _434: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _435: i64;
    let mut _436: isize;
    let mut _438: !;
    let mut _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _441: bool;
    let mut _442: u64;
    let mut _443: std::option::Option<u64>;
    let mut _444: u64;
    let mut _445: bool;
    let mut _446: u64;
    let mut _447: std::option::Option<u64>;
    let mut _448: u64;
    let mut _449: ();
    let _451: ();
    let mut _452: &str;
    let _453: &str;
    let mut _454: &std::string::String;
    let _455: &std::string::String;
    let _456: std::string::String;
    let mut _458: std::fmt::Arguments<'_>;
    let mut _459: &[&str];
    let mut _460: &[&str; 2];
    let _461: &[&str; 2];
    let _462: [&str; 2];
    let mut _463: &[core::fmt::rt::Argument<'_>];
    let mut _464: &[core::fmt::rt::Argument<'_>; 1];
    let _465: &[core::fmt::rt::Argument<'_>; 1];
    let _466: [core::fmt::rt::Argument<'_>; 1];
    let mut _467: core::fmt::rt::Argument<'_>;
    let mut _468: &error::ErrorCode;
    let _469: &error::ErrorCode;
    let _470: ();
    let mut _471: &str;
    let _472: &str;
    let mut _473: &std::string::String;
    let _474: &std::string::String;
    let _475: std::string::String;
    let mut _477: std::fmt::Arguments<'_>;
    let mut _478: &[&str];
    let mut _479: &[&str; 1];
    let _480: &[&str; 1];
    let _481: [&str; 1];
    let mut _482: error::ErrorCode;
    let mut _483: isize;
    let mut _485: !;
    let mut _486: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _489: bool;
    let mut _490: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _491: std::result::Result<bool, error::ErrorCode>;
    let mut _492: &state::state::State;
    let _493: &state::state::State;
    let mut _494: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _495: isize;
    let mut _497: !;
    let mut _498: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _500: &state::perp_market::PerpMarket;
    let _501: &state::perp_market::PerpMarket;
    let mut _502: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _503: state::paused_operations::PerpOperation;
    let _504: bool;
    let mut _505: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _506: std::result::Result<bool, error::ErrorCode>;
    let mut _507: u16;
    let mut _508: &state::perp_market::PerpMarket;
    let mut _509: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _510: &mut state::perp_market::PerpMarket;
    let mut _511: &mut state::perp_market::PerpMarket;
    let mut _512: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _513: &mut state::oracle_map::OracleMap<'_>;
    let mut _514: &mut state::oracle_map::OracleMap<'_>;
    let mut _515: i64;
    let mut _516: u64;
    let mut _517: &state::state::OracleGuardRails;
    let _518: &state::state::OracleGuardRails;
    let _519: &state::state::State;
    let mut _520: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _521: bool;
    let mut _522: std::option::Option<u64>;
    let mut _523: isize;
    let mut _525: !;
    let mut _526: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _528: ();
    let mut _537: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>;
    let mut _538: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>;
    let mut _539: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _540: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>;
    let mut _541: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>;
    let mut _542: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>;
    let mut _543: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>;
    let mut _544: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>;
    let mut _545: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _546: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>;
    let mut _547: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _548: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _549: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _550: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _551: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _599: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _600: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _601: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _602: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _603: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _18;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _21;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _30;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _33;
        scope 12 {
        }
    }
    scope 13 {
        debug perp_market => _34;
        let _46: anchor_lang::prelude::Clock;
        let _50: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _53: anchor_lang::prelude::Clock;
        scope 18 {
            debug clock => _46;
            let _54: i64;
            scope 23 {
                debug now => _54;
                let _55: u64;
                scope 24 {
                    debug slot => _55;
                    let _56: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                    scope 25 {
                        debug state => _56;
                        let mut _57: state::oracle_map::OracleMap<'_>;
                        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _71: state::oracle_map::OracleMap<'_>;
                        scope 26 {
                            debug oracle_map => _57;
                            let _72: std::cell::Ref<'_, state::user::UserStats>;
                            let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _82: std::cell::Ref<'_, state::user::UserStats>;
                            scope 31 {
                                debug keeper_stats => _72;
                                let _90: error::ErrorCode;
                                let _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _118: ();
                                let _119: u64;
                                scope 36 {
                                    debug error_code => _90;
                                    let _97: std::string::String;
                                    let mut _536: &[&str; 2];
                                    scope 37 {
                                        debug res => _97;
                                    }
                                }
                                scope 38 {
                                    debug residual => _115;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug val => _118;
                                    scope 41 {
                                    }
                                }
                                scope 42 {
                                    debug min_if_stake => _119;
                                    let _130: error::ErrorCode;
                                    let _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _179: ();
                                    let _180: &state::oracle::OraclePriceData;
                                    let _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _194: &state::oracle::OraclePriceData;
                                    scope 43 {
                                        debug error_code => _130;
                                        let _137: std::string::String;
                                        let _156: std::string::String;
                                        let mut _534: &[&str; 2];
                                        let mut _535: &[&str; 2];
                                        scope 44 {
                                            debug res => _137;
                                        }
                                        scope 45 {
                                            debug res => _156;
                                        }
                                    }
                                    scope 46 {
                                        debug residual => _176;
                                        scope 47 {
                                        }
                                    }
                                    scope 48 {
                                        debug val => _179;
                                        scope 49 {
                                        }
                                    }
                                    scope 50 {
                                        debug oracle_price_data => _180;
                                        let _195: state::oracle::MMOraclePriceData;
                                        let _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _211: state::oracle::MMOraclePriceData;
                                        scope 55 {
                                            debug mm_oracle_price_data => _195;
                                            let _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _229: i128;
                                            let _230: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                            scope 60 {
                                                debug residual => _226;
                                                scope 61 {
                                                }
                                            }
                                            scope 62 {
                                                debug val => _229;
                                                scope 63 {
                                                }
                                            }
                                            scope 64 {
                                                debug remaining_accounts_iter => _230;
                                                let _234: state::user_map::UserMap<'_>;
                                                let _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _242: state::user_map::UserMap<'_>;
                                                scope 65 {
                                                    debug makers => _234;
                                                    let _243: u64;
                                                    let _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _253: u64;
                                                    scope 70 {
                                                        debug depth => _243;
                                                        let _254: std::vec::Vec<math::orders::Level>;
                                                        let _255: std::vec::Vec<math::orders::Level>;
                                                        let _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _271: (std::vec::Vec<math::orders::Level>, std::vec::Vec<math::orders::Level>);
                                                        scope 75 {
                                                            debug bids => _254;
                                                            debug asks => _255;
                                                            let _272: std::option::Option<u64>;
                                                            let _279: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _282: std::option::Option<u64>;
                                                            scope 80 {
                                                                debug estimated_bid => _272;
                                                                let _283: std::option::Option<u64>;
                                                                let _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _293: std::option::Option<u64>;
                                                                scope 85 {
                                                                    debug estimated_ask => _283;
                                                                    let _300: std::string::String;
                                                                    let _337: u64;
                                                                    let mut _532: &state::perp_market::ContractType;
                                                                    let mut _533: &[&str; 2];
                                                                    scope 90 {
                                                                        debug res => _300;
                                                                    }
                                                                    scope 91 {
                                                                        debug before_bid_price_twap => _337;
                                                                        let _340: u64;
                                                                        scope 92 {
                                                                            debug before_ask_price_twap => _340;
                                                                            let _343: i64;
                                                                            scope 93 {
                                                                                debug before_mark_twap_ts => _343;
                                                                                let _346: std::option::Option<i64>;
                                                                                let _353: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _356: std::option::Option<i64>;
                                                                                scope 94 {
                                                                                    debug sanitize_clamp_denominator => _346;
                                                                                    let _370: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _373: ();
                                                                                    let _380: std::string::String;
                                                                                    let _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _440: i64;
                                                                                    let _450: error::ErrorCode;
                                                                                    let _484: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _487: ();
                                                                                    let _488: bool;
                                                                                    let _496: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _499: bool;
                                                                                    let mut _531: &[&str; 6];
                                                                                    scope 99 {
                                                                                        debug residual => _370;
                                                                                        scope 100 {
                                                                                        }
                                                                                    }
                                                                                    scope 101 {
                                                                                        debug val => _373;
                                                                                        scope 102 {
                                                                                        }
                                                                                    }
                                                                                    scope 103 {
                                                                                        debug res => _380;
                                                                                    }
                                                                                    scope 104 {
                                                                                        debug residual => _437;
                                                                                        scope 105 {
                                                                                        }
                                                                                    }
                                                                                    scope 106 {
                                                                                        debug val => _440;
                                                                                        scope 107 {
                                                                                        }
                                                                                    }
                                                                                    scope 108 {
                                                                                        debug error_code => _450;
                                                                                        let _457: std::string::String;
                                                                                        let _476: std::string::String;
                                                                                        let mut _529: &[&str; 1];
                                                                                        let mut _530: &[&str; 2];
                                                                                        scope 109 {
                                                                                            debug res => _457;
                                                                                        }
                                                                                        scope 110 {
                                                                                            debug res => _476;
                                                                                        }
                                                                                    }
                                                                                    scope 111 {
                                                                                        debug residual => _484;
                                                                                        scope 112 {
                                                                                        }
                                                                                    }
                                                                                    scope 113 {
                                                                                        debug val => _487;
                                                                                        scope 114 {
                                                                                        }
                                                                                    }
                                                                                    scope 115 {
                                                                                        debug funding_paused => _488;
                                                                                        let _524: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _527: bool;
                                                                                        scope 120 {
                                                                                            debug residual => _524;
                                                                                            scope 121 {
                                                                                            }
                                                                                        }
                                                                                        scope 122 {
                                                                                            debug val => _527;
                                                                                            scope 123 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 116 {
                                                                                        debug residual => _496;
                                                                                        scope 117 {
                                                                                        }
                                                                                    }
                                                                                    scope 118 {
                                                                                        debug val => _499;
                                                                                        scope 119 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 95 {
                                                                                    debug residual => _353;
                                                                                    scope 96 {
                                                                                    }
                                                                                }
                                                                                scope 97 {
                                                                                    debug val => _356;
                                                                                    scope 98 {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 86 {
                                                                    debug residual => _290;
                                                                    scope 87 {
                                                                    }
                                                                }
                                                                scope 88 {
                                                                    debug val => _293;
                                                                    scope 89 {
                                                                    }
                                                                }
                                                            }
                                                            scope 81 {
                                                                debug residual => _279;
                                                                scope 82 {
                                                                }
                                                            }
                                                            scope 83 {
                                                                debug val => _282;
                                                                scope 84 {
                                                                }
                                                            }
                                                        }
                                                        scope 76 {
                                                            debug residual => _268;
                                                            scope 77 {
                                                            }
                                                        }
                                                        scope 78 {
                                                            debug val => _271;
                                                            scope 79 {
                                                            }
                                                        }
                                                    }
                                                    scope 71 {
                                                        debug residual => _250;
                                                        scope 72 {
                                                        }
                                                    }
                                                    scope 73 {
                                                        debug val => _253;
                                                        scope 74 {
                                                        }
                                                    }
                                                }
                                                scope 66 {
                                                    debug residual => _239;
                                                    scope 67 {
                                                    }
                                                }
                                                scope 68 {
                                                    debug val => _242;
                                                    scope 69 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 56 {
                                            debug residual => _208;
                                            scope 57 {
                                            }
                                        }
                                        scope 58 {
                                            debug val => _211;
                                            scope 59 {
                                            }
                                        }
                                    }
                                    scope 51 {
                                        debug residual => _191;
                                        scope 52 {
                                        }
                                    }
                                    scope 53 {
                                        debug val => _194;
                                        scope 54 {
                                        }
                                    }
                                }
                            }
                            scope 32 {
                                debug residual => _79;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _82;
                                scope 35 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _68;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _71;
                            scope 30 {
                            }
                        }
                    }
                }
            }
        }
        scope 19 {
            debug residual => _50;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _53;
            scope 22 {
            }
        }
    }
    scope 14 {
        debug residual => _42;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _45;
        scope 17 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _537 = deref_copy (_1.1: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>);
        _6 = &((*_537).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _5 = &(*_6);
        _4 = constraints::perp_market_valid(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb273];
    }

    bb2: {
        StorageDead(_4);
        _7 = discriminant(_3);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_3 as Continue).0: ());
        _2 = _11;
        StorageDead(_11);
        _552 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _538 = deref_copy (_1.1: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>);
        _16 = &((*_538).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _539 = deref_copy (*_16);
        _598 = (((_539.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _15 = &(*_598);
        _14 = constraints::funding_not_paused(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb282];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _586 = discriminant(_3);
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb259;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb273];
    }

    bb8: {
        StorageDead(_14);
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_13 as Continue).0: ());
        _12 = _21;
        StorageDead(_21);
        _554 = discriminant(_13);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _540 = deref_copy (_1.1: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>);
        _26 = &((*_540).2: anchor_lang::prelude::AccountInfo<'_>);
        _25 = &(*_26);
        StorageLive(_27);
        StorageLive(_28);
        _541 = deref_copy (_1.1: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>);
        _28 = &((*_541).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _27 = &(*_28);
        _24 = constraints::valid_oracle_for_perp_market(move _25, move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _20) -> [return: bb11, unwind: bb281];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _584 = discriminant(_13);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb259;
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_25);
        _23 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _24) -> [return: bb13, unwind: bb273];
    }

    bb13: {
        StorageDead(_24);
        _29 = discriminant(_23);
        switchInt(move _29) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_33);
        _33 = ((_23 as Continue).0: ());
        _22 = _33;
        StorageDead(_33);
        _556 = discriminant(_23);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _542 = deref_copy (_1.1: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>);
        _39 = &((*_542).1: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _38 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _39) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_30);
        _30 = move ((_23 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_32);
        _32 = move _30;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _32) -> [return: bb16, unwind: bb280];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_30);
        _582 = discriminant(_23);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb259;
    }

    bb17: {
        StorageDead(_39);
        StorageLive(_40);
        _40 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _37 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _38, move _40) -> [return: bb18, unwind: bb273];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_38);
        _36 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _37) -> [return: bb19, unwind: bb273];
    }

    bb19: {
        StorageDead(_37);
        _41 = discriminant(_36);
        switchInt(move _41) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_45);
        _45 = move ((_36 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _35 = move _45;
        StorageDead(_45);
        _34 = &mut _35;
        _560 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb23, unwind: bb272];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb22, unwind: bb279];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_42);
        _558 = discriminant(_36);
        StorageDead(_36);
        goto -> bb258;
    }

    bb23: {
        _47 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _48) -> [return: bb24, unwind: bb272];
    }

    bb24: {
        StorageDead(_48);
        _49 = discriminant(_47);
        switchInt(move _49) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_53);
        _53 = move ((_47 as Continue).0: anchor_lang::prelude::Clock);
        _46 = move _53;
        StorageDead(_53);
        _562 = discriminant(_47);
        StorageDead(_47);
        StorageLive(_54);
        _54 = (_46.4: i64);
        StorageLive(_55);
        _55 = (_46.0: u64);
        StorageLive(_56);
        _543 = deref_copy (_1.1: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>);
        _56 = &((*_543).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _544 = deref_copy (_1.1: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>);
        _61 = &((*_544).2: anchor_lang::prelude::AccountInfo<'_>);
        _60 = &(*_61);
        StorageLive(_62);
        _62 = _55;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _545 = deref_copy (*_56);
        _599 = (((_545.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _66 = &(*_599);
        _65 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _66) -> [return: bb28, unwind: bb272];
    }

    bb26: {
        StorageLive(_50);
        _50 = move ((_47 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_52);
        _52 = move _50;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _52) -> [return: bb27, unwind: bb278];
    }

    bb27: {
        StorageDead(_52);
        StorageDead(_50);
        _580 = discriminant(_47);
        StorageDead(_47);
        goto -> bb257;
    }

    bb28: {
        StorageDead(_66);
        _64 = ((*_65).7: state::state::OracleGuardRails);
        _63 = Option::<state::state::OracleGuardRails>::Some(move _64);
        StorageDead(_64);
        _59 = OracleMap::<'_>::load_one(move _60, move _62, move _63) -> [return: bb29, unwind: bb272];
    }

    bb29: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        _58 = <std::result::Result<OracleMap<'_>, error::ErrorCode> as Try>::branch(move _59) -> [return: bb30, unwind: bb272];
    }

    bb30: {
        StorageDead(_59);
        _67 = discriminant(_58);
        switchInt(move _67) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_71);
        _71 = move ((_58 as Continue).0: state::oracle_map::OracleMap<'_>);
        _57 = move _71;
        StorageDead(_71);
        _566 = discriminant(_58);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_58);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _546 = deref_copy (_1.1: &mut instructions::keeper::UpdatePerpBidAskTwap<'_>);
        _76 = &((*_546).3: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _75 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _76) -> [return: bb34, unwind: bb271];
    }

    bb32: {
        StorageLive(_68);
        _68 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb33, unwind: bb277];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_68);
        _564 = discriminant(_58);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_58);
        goto -> bb256;
    }

    bb34: {
        StorageDead(_76);
        StorageLive(_77);
        _77 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _74 = std::result::Result::<Ref<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _75, move _77) -> [return: bb35, unwind: bb271];
    }

    bb35: {
        StorageDead(_77);
        StorageDead(_75);
        _73 = <std::result::Result<Ref<'_, UserStats>, error::ErrorCode> as Try>::branch(move _74) -> [return: bb36, unwind: bb271];
    }

    bb36: {
        StorageDead(_74);
        _78 = discriminant(_73);
        switchInt(move _78) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_82);
        _82 = move ((_73 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _72 = move _82;
        StorageDead(_82);
        _570 = discriminant(_73);
        StorageDead(_73);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = &_72;
        _87 = <Ref<'_, UserStats> as Deref>::deref(move _88) -> [return: bb40, unwind: bb270];
    }

    bb38: {
        StorageLive(_79);
        _79 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb39, unwind: bb276];
    }

    bb39: {
        StorageDead(_81);
        StorageDead(_79);
        _568 = discriminant(_73);
        StorageDead(_73);
        goto -> bb255;
    }

    bb40: {
        StorageDead(_88);
        _86 = ((*_87).14: bool);
        switchInt(move _86) -> [0: bb41, otherwise: bb42];
    }

    bb41: {
        StorageDead(_87);
        StorageLive(_89);
        _89 = ();
        _85 = std::result::Result::<(), error::ErrorCode>::Ok(move _89);
        StorageDead(_89);
        goto -> bb50;
    }

    bb42: {
        StorageDead(_87);
        StorageLive(_90);
        _90 = error::ErrorCode::CantUpdatePerpBidAskTwap;
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _536 = const _;
        _101 = &(*_536);
        _100 = &(*_101);
        _99 = move _100 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &_90;
        _108 = &(*_109);
        _107 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _108) -> [return: bb43, unwind: bb270];
    }

    bb43: {
        StorageDead(_108);
        _106 = [move _107];
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = move _104 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_104);
        _98 = Arguments::<'_>::new_v1(move _99, move _103) -> [return: bb44, unwind: bb270];
    }

    bb44: {
        StorageDead(_103);
        StorageDead(_99);
        _97 = format(move _98) -> [return: bb45, unwind: bb270];
    }

    bb45: {
        StorageDead(_98);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_101);
        _96 = move _97;
        StorageDead(_97);
        _95 = &_96;
        _94 = &(*_95);
        _93 = <String as Deref>::deref(move _94) -> [return: bb46, unwind: bb269];
    }

    bb46: {
        _92 = &(*_93);
        StorageDead(_94);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb47, unwind: bb269];
    }

    bb47: {
        StorageDead(_92);
        drop(_96) -> [return: bb48, unwind: bb270];
    }

    bb48: {
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = const "Keeper stats disable_update_perp_bid_ask_twap is true";
        _111 = &(*_112);
        _110 = solana_program::log::sol_log(move _111) -> [return: bb49, unwind: bb270];
    }

    bb49: {
        StorageDead(_111);
        StorageDead(_112);
        StorageDead(_110);
        StorageLive(_113);
        _113 = _90;
        _85 = std::result::Result::<(), error::ErrorCode>::Err(move _113);
        StorageDead(_113);
        StorageDead(_90);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_86);
        _84 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _85) -> [return: bb51, unwind: bb270];
    }

    bb51: {
        StorageDead(_85);
        _114 = discriminant(_84);
        switchInt(move _114) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_118);
        _118 = ((_84 as Continue).0: ());
        _83 = _118;
        StorageDead(_118);
        StorageDead(_84);
        StorageDead(_83);
        StorageLive(_119);
        _120 = CheckedMul(const 1000_u64, const _);
        assert(!move (_120.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1000_u64, const _) -> [success: bb55, unwind: bb270];
    }

    bb53: {
        StorageLive(_115);
        _115 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_117);
        _117 = _115;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _117) -> [return: bb54, unwind: bb270];
    }

    bb54: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_84);
        StorageDead(_83);
        goto -> bb254;
    }

    bb55: {
        _119 = move (_120.0: u64);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_72;
        _126 = <Ref<'_, UserStats> as Deref>::deref(move _127) -> [return: bb56, unwind: bb270];
    }

    bb56: {
        StorageDead(_127);
        _125 = ((*_126).10: u64);
        StorageLive(_128);
        _128 = _119;
        _124 = Ge(move _125, move _128);
        switchInt(move _124) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_129);
        _129 = ();
        _123 = std::result::Result::<(), error::ErrorCode>::Ok(move _129);
        StorageDead(_129);
        goto -> bb73;
    }

    bb58: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_130);
        _130 = error::ErrorCode::CantUpdatePerpBidAskTwap;
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _535 = const _;
        _141 = &(*_535);
        _140 = &(*_141);
        _139 = move _140 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_130;
        _148 = &(*_149);
        _147 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _148) -> [return: bb59, unwind: bb270];
    }

    bb59: {
        StorageDead(_148);
        _146 = [move _147];
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = move _144 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_144);
        _138 = Arguments::<'_>::new_v1(move _139, move _143) -> [return: bb60, unwind: bb270];
    }

    bb60: {
        StorageDead(_143);
        StorageDead(_139);
        _137 = format(move _138) -> [return: bb61, unwind: bb270];
    }

    bb61: {
        StorageDead(_138);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_141);
        _136 = move _137;
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = <String as Deref>::deref(move _134) -> [return: bb62, unwind: bb268];
    }

    bb62: {
        _132 = &(*_133);
        StorageDead(_134);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb63, unwind: bb268];
    }

    bb63: {
        StorageDead(_132);
        drop(_136) -> [return: bb64, unwind: bb270];
    }

    bb64: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _534 = const _;
        _160 = &(*_534);
        _159 = &(*_160);
        _158 = move _159 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &_72;
        _169 = <Ref<'_, UserStats> as Deref>::deref(move _170) -> [return: bb65, unwind: bb270];
    }

    bb65: {
        StorageDead(_170);
        _168 = &((*_169).10: u64);
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _167) -> [return: bb66, unwind: bb270];
    }

    bb66: {
        StorageDead(_167);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &_119;
        _172 = &(*_173);
        _171 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _172) -> [return: bb67, unwind: bb270];
    }

    bb67: {
        StorageDead(_172);
        _165 = [move _166, move _171];
        StorageDead(_171);
        StorageDead(_166);
        _164 = &_165;
        _163 = &(*_164);
        _162 = move _163 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_163);
        _157 = Arguments::<'_>::new_v1(move _158, move _162) -> [return: bb68, unwind: bb270];
    }

    bb68: {
        StorageDead(_162);
        StorageDead(_158);
        _156 = format(move _157) -> [return: bb69, unwind: bb270];
    }

    bb69: {
        StorageDead(_157);
        StorageDead(_173);
        StorageDead(_169);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_160);
        _155 = move _156;
        StorageDead(_156);
        _154 = &_155;
        _153 = &(*_154);
        _152 = <String as Deref>::deref(move _153) -> [return: bb70, unwind: bb267];
    }

    bb70: {
        _151 = &(*_152);
        StorageDead(_153);
        _150 = solana_program::log::sol_log(move _151) -> [return: bb71, unwind: bb267];
    }

    bb71: {
        StorageDead(_151);
        drop(_155) -> [return: bb72, unwind: bb270];
    }

    bb72: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_150);
        StorageLive(_174);
        _174 = _130;
        _123 = std::result::Result::<(), error::ErrorCode>::Err(move _174);
        StorageDead(_174);
        StorageDead(_130);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_124);
        _122 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _123) -> [return: bb74, unwind: bb270];
    }

    bb74: {
        StorageDead(_123);
        _175 = discriminant(_122);
        switchInt(move _175) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_179);
        _179 = ((_122 as Continue).0: ());
        _121 = _179;
        StorageDead(_179);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &mut _57;
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = &(*_34);
        _188 = <RefMut<'_, PerpMarket> as Deref>::deref(move _189) -> [return: bb78, unwind: bb270];
    }

    bb76: {
        StorageLive(_176);
        _176 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_178);
        _178 = _176;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _178) -> [return: bb77, unwind: bb270];
    }

    bb77: {
        StorageDead(_178);
        StorageDead(_176);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb253;
    }

    bb78: {
        _187 = &(*_188);
        StorageDead(_189);
        _186 = PerpMarket::oracle_id(move _187) -> [return: bb79, unwind: bb270];
    }

    bb79: {
        StorageDead(_187);
        _185 = &_186;
        _184 = &(*_185);
        _182 = OracleMap::<'_>::get_price_data(move _183, move _184) -> [return: bb80, unwind: bb270];
    }

    bb80: {
        StorageDead(_184);
        StorageDead(_183);
        _181 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _182) -> [return: bb81, unwind: bb270];
    }

    bb81: {
        StorageDead(_182);
        _190 = discriminant(_181);
        switchInt(move _190) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_194);
        _194 = ((_181 as Continue).0: &state::oracle::OraclePriceData);
        _180 = _194;
        StorageDead(_194);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_181);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &(*_34);
        _199 = <RefMut<'_, PerpMarket> as Deref>::deref(move _200) -> [return: bb85, unwind: bb270];
    }

    bb83: {
        StorageLive(_191);
        _191 = ((_181 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_193);
        _193 = _191;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _193) -> [return: bb84, unwind: bb270];
    }

    bb84: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_181);
        goto -> bb252;
    }

    bb85: {
        _198 = &(*_199);
        StorageDead(_200);
        StorageLive(_201);
        _201 = (*_180);
        StorageLive(_202);
        _202 = _55;
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        _547 = deref_copy (*_56);
        _600 = (((_547.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _206 = &(*_600);
        _205 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _206) -> [return: bb86, unwind: bb270];
    }

    bb86: {
        StorageDead(_206);
        _204 = &(((*_205).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        _203 = &(*_204);
        _197 = PerpMarket::get_mm_oracle_price_data(move _198, move _201, move _202, move _203) -> [return: bb87, unwind: bb270];
    }

    bb87: {
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_198);
        _196 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as Try>::branch(move _197) -> [return: bb88, unwind: bb270];
    }

    bb88: {
        StorageDead(_197);
        _207 = discriminant(_196);
        switchInt(move _207) -> [0: bb89, 1: bb90, otherwise: bb4];
    }

    bb89: {
        StorageLive(_211);
        _211 = ((_196 as Continue).0: state::oracle::MMOraclePriceData);
        _195 = _211;
        StorageDead(_211);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_199);
        StorageDead(_196);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &mut (*_34);
        _216 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _217) -> [return: bb92, unwind: bb270];
    }

    bb90: {
        StorageLive(_208);
        _208 = ((_196 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_210);
        _210 = _208;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _210) -> [return: bb91, unwind: bb270];
    }

    bb91: {
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_199);
        StorageDead(_196);
        goto -> bb251;
    }

    bb92: {
        _215 = &mut (*_216);
        StorageDead(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &_195;
        _218 = &(*_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _548 = deref_copy (*_56);
        _601 = (((_548.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _222 = &(*_601);
        _221 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _222) -> [return: bb93, unwind: bb270];
    }

    bb93: {
        _220 = &(*_221);
        StorageDead(_222);
        StorageLive(_223);
        _223 = _54;
        StorageLive(_224);
        _224 = _55;
        _214 = _update_amm(move _215, move _218, move _220, move _223, move _224) -> [return: bb94, unwind: bb270];
    }

    bb94: {
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_215);
        _213 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _214) -> [return: bb95, unwind: bb270];
    }

    bb95: {
        StorageDead(_214);
        _225 = discriminant(_213);
        switchInt(move _225) -> [0: bb96, 1: bb97, otherwise: bb4];
    }

    bb96: {
        StorageLive(_229);
        _229 = ((_213 as Continue).0: i128);
        _212 = _229;
        StorageDead(_229);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_212);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _549 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _233 = &(*_549);
        _232 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _233) -> [return: bb99, unwind: bb270];
    }

    bb97: {
        StorageLive(_226);
        _226 = ((_213 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_228);
        _228 = _226;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _228) -> [return: bb98, unwind: bb270];
    }

    bb98: {
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb251;
    }

    bb99: {
        StorageDead(_233);
        _231 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _232) -> [return: bb100, unwind: bb270];
    }

    bb100: {
        StorageDead(_232);
        _230 = &mut _231;
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &mut (*_230);
        _236 = load_user_map::<'_, '_>(move _237, const false) -> [return: bb101, unwind: bb270];
    }

    bb101: {
        StorageDead(_237);
        _235 = <std::result::Result<UserMap<'_>, error::ErrorCode> as Try>::branch(move _236) -> [return: bb102, unwind: bb270];
    }

    bb102: {
        StorageDead(_236);
        _238 = discriminant(_235);
        switchInt(move _238) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_242);
        _242 = move ((_235 as Continue).0: state::user_map::UserMap<'_>);
        _234 = move _242;
        StorageDead(_242);
        _574 = discriminant(_235);
        StorageDead(_235);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &(*_34);
        _247 = <RefMut<'_, PerpMarket> as Deref>::deref(move _248) -> [return: bb106, unwind: bb266];
    }

    bb104: {
        StorageLive(_239);
        _239 = ((_235 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_241);
        _241 = _239;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _241) -> [return: bb105, unwind: bb275];
    }

    bb105: {
        StorageDead(_241);
        StorageDead(_239);
        _572 = discriminant(_235);
        StorageDead(_235);
        goto -> bb250;
    }

    bb106: {
        _246 = &(*_247);
        StorageDead(_248);
        _245 = PerpMarket::get_market_depth_for_funding_rate(move _246) -> [return: bb107, unwind: bb266];
    }

    bb107: {
        StorageDead(_246);
        _244 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _245) -> [return: bb108, unwind: bb266];
    }

    bb108: {
        StorageDead(_245);
        _249 = discriminant(_244);
        switchInt(move _249) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_253);
        _253 = ((_244 as Continue).0: u64);
        _243 = _253;
        StorageDead(_253);
        StorageDead(_247);
        StorageDead(_244);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _261 = &(*_34);
        _260 = <RefMut<'_, PerpMarket> as Deref>::deref(move _261) -> [return: bb112, unwind: bb266];
    }

    bb110: {
        StorageLive(_250);
        _250 = ((_244 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_252);
        _252 = _250;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _252) -> [return: bb111, unwind: bb266];
    }

    bb111: {
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_247);
        StorageDead(_244);
        goto -> bb249;
    }

    bb112: {
        _259 = &(*_260);
        StorageDead(_261);
        StorageLive(_262);
        _262 = &(*_180);
        StorageLive(_263);
        StorageLive(_264);
        _264 = &_234;
        _263 = &(*_264);
        StorageLive(_265);
        _265 = _55;
        StorageLive(_266);
        _266 = _54;
        _258 = find_bids_and_asks_from_users(move _259, move _262, move _263, move _265, move _266) -> [return: bb113, unwind: bb266];
    }

    bb113: {
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_259);
        _257 = <std::result::Result<(Vec<Level>, Vec<Level>), error::ErrorCode> as Try>::branch(move _258) -> [return: bb114, unwind: bb266];
    }

    bb114: {
        StorageDead(_258);
        _267 = discriminant(_257);
        switchInt(move _267) -> [0: bb115, 1: bb116, otherwise: bb4];
    }

    bb115: {
        StorageLive(_271);
        _271 = move ((_257 as Continue).0: (std::vec::Vec<math::orders::Level>, std::vec::Vec<math::orders::Level>));
        _256 = move _271;
        StorageDead(_271);
        StorageLive(_254);
        _254 = move (_256.0: std::vec::Vec<math::orders::Level>);
        StorageLive(_255);
        _255 = move (_256.1: std::vec::Vec<math::orders::Level>);
        _578 = discriminant(_257);
        StorageDead(_264);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &_254;
        _275 = &(*_276);
        StorageLive(_277);
        _277 = _243;
        _274 = estimate_price_from_side(move _275, move _277) -> [return: bb118, unwind: bb264];
    }

    bb116: {
        StorageLive(_268);
        _268 = ((_257 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_270);
        _270 = _268;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _270) -> [return: bb117, unwind: bb274];
    }

    bb117: {
        StorageDead(_270);
        StorageDead(_268);
        _576 = discriminant(_257);
        StorageDead(_264);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        goto -> bb249;
    }

    bb118: {
        StorageDead(_277);
        StorageDead(_275);
        _273 = <std::result::Result<Option<u64>, error::ErrorCode> as Try>::branch(move _274) -> [return: bb119, unwind: bb264];
    }

    bb119: {
        StorageDead(_274);
        _278 = discriminant(_273);
        switchInt(move _278) -> [0: bb120, 1: bb121, otherwise: bb4];
    }

    bb120: {
        StorageLive(_282);
        _282 = ((_273 as Continue).0: std::option::Option<u64>);
        _272 = _282;
        StorageDead(_282);
        StorageDead(_276);
        StorageDead(_273);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_255;
        _286 = &(*_287);
        StorageLive(_288);
        _288 = _243;
        _285 = estimate_price_from_side(move _286, move _288) -> [return: bb123, unwind: bb264];
    }

    bb121: {
        StorageLive(_279);
        _279 = ((_273 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_281);
        _281 = _279;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _281) -> [return: bb122, unwind: bb264];
    }

    bb122: {
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_276);
        StorageDead(_273);
        goto -> bb246;
    }

    bb123: {
        StorageDead(_288);
        StorageDead(_286);
        _284 = <std::result::Result<Option<u64>, error::ErrorCode> as Try>::branch(move _285) -> [return: bb124, unwind: bb264];
    }

    bb124: {
        StorageDead(_285);
        _289 = discriminant(_284);
        switchInt(move _289) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        StorageLive(_293);
        _293 = ((_284 as Continue).0: std::option::Option<u64>);
        _283 = _293;
        StorageDead(_293);
        StorageDead(_287);
        StorageDead(_284);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _533 = const _;
        _304 = &(*_533);
        _303 = &(*_304);
        _302 = move _303 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_303);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        _312 = &_272;
        _311 = &(*_312);
        _310 = core::fmt::rt::Argument::<'_>::new_debug::<Option<u64>>(move _311) -> [return: bb128, unwind: bb264];
    }

    bb126: {
        StorageLive(_290);
        _290 = ((_284 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_292);
        _292 = _290;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _292) -> [return: bb127, unwind: bb264];
    }

    bb127: {
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_287);
        StorageDead(_284);
        goto -> bb245;
    }

    bb128: {
        StorageDead(_311);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = &_283;
        _314 = &(*_315);
        _313 = core::fmt::rt::Argument::<'_>::new_debug::<Option<u64>>(move _314) -> [return: bb129, unwind: bb264];
    }

    bb129: {
        StorageDead(_314);
        _309 = [move _310, move _313];
        StorageDead(_313);
        StorageDead(_310);
        _308 = &_309;
        _307 = &(*_308);
        _306 = move _307 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_307);
        _301 = Arguments::<'_>::new_v1(move _302, move _306) -> [return: bb130, unwind: bb264];
    }

    bb130: {
        StorageDead(_306);
        StorageDead(_302);
        _300 = format(move _301) -> [return: bb131, unwind: bb264];
    }

    bb131: {
        StorageDead(_301);
        StorageDead(_315);
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_304);
        _299 = move _300;
        StorageDead(_300);
        _298 = &_299;
        _297 = &(*_298);
        _296 = <String as Deref>::deref(move _297) -> [return: bb132, unwind: bb263];
    }

    bb132: {
        _295 = &(*_296);
        StorageDead(_297);
        _294 = solana_program::log::sol_log(move _295) -> [return: bb133, unwind: bb263];
    }

    bb133: {
        StorageDead(_295);
        drop(_299) -> [return: bb134, unwind: bb264];
    }

    bb134: {
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_296);
        StorageDead(_294);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &(*_34);
        _319 = <RefMut<'_, PerpMarket> as Deref>::deref(move _320) -> [return: bb135, unwind: bb264];
    }

    bb135: {
        StorageDead(_320);
        _318 = &((*_319).23: state::perp_market::ContractType);
        StorageLive(_321);
        _532 = const _;
        _321 = &(*_532);
        _317 = <ContractType as PartialEq>::eq(move _318, move _321) -> [return: bb136, unwind: bb264];
    }

    bb136: {
        switchInt(move _317) -> [0: bb149, otherwise: bb137];
    }

    bb137: {
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_318);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _326 = &(*_34);
        _325 = <RefMut<'_, PerpMarket> as Deref>::deref(move _326) -> [return: bb138, unwind: bb264];
    }

    bb138: {
        _324 = &(*_325);
        StorageDead(_326);
        StorageLive(_327);
        _327 = PerpOperation::AmmFill;
        _323 = PerpMarket::is_operation_paused(move _324, move _327) -> [return: bb139, unwind: bb264];
    }

    bb139: {
        switchInt(move _323) -> [0: bb148, otherwise: bb140];
    }

    bb140: {
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_324);
        StorageLive(_328);
        StorageLive(_329);
        _329 = &_272;
        _328 = Option::<u64>::is_none(move _329) -> [return: bb141, unwind: bb264];
    }

    bb141: {
        switchInt(move _328) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        StorageDead(_329);
        goto -> bb145;
    }

    bb143: {
        StorageDead(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = &_283;
        _330 = Option::<u64>::is_none(move _331) -> [return: bb144, unwind: bb264];
    }

    bb144: {
        switchInt(move _330) -> [0: bb147, otherwise: bb145];
    }

    bb145: {
        StorageDead(_331);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = const "skipping mark twap update for disabled amm prediction market";
        _334 = &(*_335);
        _333 = solana_program::log::sol_log(move _334) -> [return: bb146, unwind: bb264];
    }

    bb146: {
        StorageDead(_334);
        StorageDead(_335);
        StorageDead(_333);
        StorageLive(_336);
        _336 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _336);
        StorageDead(_336);
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_323);
        StorageDead(_317);
        StorageDead(_316);
        goto -> bb245;
    }

    bb147: {
        StorageDead(_331);
        goto -> bb150;
    }

    bb148: {
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_324);
        goto -> bb150;
    }

    bb149: {
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb150;
    }

    bb150: {
        _316 = const ();
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_323);
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = &(*_34);
        _338 = <RefMut<'_, PerpMarket> as Deref>::deref(move _339) -> [return: bb151, unwind: bb264];
    }

    bb151: {
        StorageDead(_339);
        _337 = (((*_338).1: state::perp_market::AMM).43: u64);
        StorageDead(_338);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &(*_34);
        _341 = <RefMut<'_, PerpMarket> as Deref>::deref(move _342) -> [return: bb152, unwind: bb264];
    }

    bb152: {
        StorageDead(_342);
        _340 = (((*_341).1: state::perp_market::AMM).44: u64);
        StorageDead(_341);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = &(*_34);
        _344 = <RefMut<'_, PerpMarket> as Deref>::deref(move _345) -> [return: bb153, unwind: bb264];
    }

    bb153: {
        StorageDead(_345);
        _343 = (((*_344).1: state::perp_market::AMM).62: i64);
        StorageDead(_344);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = &(*_34);
        _350 = <RefMut<'_, PerpMarket> as Deref>::deref(move _351) -> [return: bb154, unwind: bb264];
    }

    bb154: {
        _349 = (*_350);
        StorageDead(_351);
        _348 = PerpMarket::get_sanitize_clamp_denominator(move _349) -> [return: bb155, unwind: bb264];
    }

    bb155: {
        StorageDead(_349);
        _347 = <std::result::Result<Option<i64>, error::ErrorCode> as Try>::branch(move _348) -> [return: bb156, unwind: bb264];
    }

    bb156: {
        StorageDead(_348);
        _352 = discriminant(_347);
        switchInt(move _352) -> [0: bb157, 1: bb158, otherwise: bb4];
    }

    bb157: {
        StorageLive(_356);
        _356 = ((_347 as Continue).0: std::option::Option<i64>);
        _346 = _356;
        StorageDead(_356);
        StorageDead(_350);
        StorageDead(_347);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        _363 = &mut (*_34);
        _362 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _363) -> [return: bb160, unwind: bb264];
    }

    bb158: {
        StorageLive(_353);
        _353 = ((_347 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_355);
        _355 = _353;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _355) -> [return: bb159, unwind: bb264];
    }

    bb159: {
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_350);
        StorageDead(_347);
        goto -> bb244;
    }

    bb160: {
        StorageDead(_363);
        _361 = &mut ((*_362).1: state::perp_market::AMM);
        _360 = &mut (*_361);
        StorageLive(_364);
        _364 = _54;
        StorageLive(_365);
        _365 = &(*_180);
        StorageLive(_366);
        _366 = _272;
        StorageLive(_367);
        _367 = _283;
        StorageLive(_368);
        _368 = _346;
        _359 = update_mark_twap_crank(move _360, move _364, move _365, move _366, move _367, move _368) -> [return: bb161, unwind: bb264];
    }

    bb161: {
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_366);
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_360);
        _358 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _359) -> [return: bb162, unwind: bb264];
    }

    bb162: {
        StorageDead(_359);
        _369 = discriminant(_358);
        switchInt(move _369) -> [0: bb163, 1: bb164, otherwise: bb4];
    }

    bb163: {
        StorageLive(_373);
        _373 = ((_358 as Continue).0: ());
        _357 = _373;
        StorageDead(_373);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_358);
        StorageDead(_357);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _531 = const _;
        _384 = &(*_531);
        _383 = &(*_384);
        _382 = move _383 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_383);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &_337;
        _391 = &(*_392);
        _390 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _391) -> [return: bb166, unwind: bb264];
    }

    bb164: {
        StorageLive(_370);
        _370 = ((_358 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_372);
        _372 = _370;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _372) -> [return: bb165, unwind: bb264];
    }

    bb165: {
        StorageDead(_372);
        StorageDead(_370);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_358);
        StorageDead(_357);
        goto -> bb244;
    }

    bb166: {
        StorageDead(_391);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        _397 = &(*_34);
        _396 = <RefMut<'_, PerpMarket> as Deref>::deref(move _397) -> [return: bb167, unwind: bb264];
    }

    bb167: {
        StorageDead(_397);
        _395 = &(((*_396).1: state::perp_market::AMM).43: u64);
        _394 = &(*_395);
        _393 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _394) -> [return: bb168, unwind: bb264];
    }

    bb168: {
        StorageDead(_394);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = &_340;
        _399 = &(*_400);
        _398 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _399) -> [return: bb169, unwind: bb264];
    }

    bb169: {
        StorageDead(_399);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        _405 = &(*_34);
        _404 = <RefMut<'_, PerpMarket> as Deref>::deref(move _405) -> [return: bb170, unwind: bb264];
    }

    bb170: {
        StorageDead(_405);
        _403 = &(((*_404).1: state::perp_market::AMM).44: u64);
        _402 = &(*_403);
        _401 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _402) -> [return: bb171, unwind: bb264];
    }

    bb171: {
        StorageDead(_402);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &_343;
        _407 = &(*_408);
        _406 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _407) -> [return: bb172, unwind: bb264];
    }

    bb172: {
        StorageDead(_407);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        _413 = &(*_34);
        _412 = <RefMut<'_, PerpMarket> as Deref>::deref(move _413) -> [return: bb173, unwind: bb264];
    }

    bb173: {
        StorageDead(_413);
        _411 = &(((*_412).1: state::perp_market::AMM).62: i64);
        _410 = &(*_411);
        _409 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _410) -> [return: bb174, unwind: bb264];
    }

    bb174: {
        StorageDead(_410);
        _389 = [move _390, move _393, move _398, move _401, move _406, move _409];
        StorageDead(_409);
        StorageDead(_406);
        StorageDead(_401);
        StorageDead(_398);
        StorageDead(_393);
        StorageDead(_390);
        _388 = &_389;
        _387 = &(*_388);
        _386 = move _387 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_387);
        _381 = Arguments::<'_>::new_v1(move _382, move _386) -> [return: bb175, unwind: bb264];
    }

    bb175: {
        StorageDead(_386);
        StorageDead(_382);
        _380 = format(move _381) -> [return: bb176, unwind: bb264];
    }

    bb176: {
        StorageDead(_381);
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_408);
        StorageDead(_404);
        StorageDead(_403);
        StorageDead(_400);
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_392);
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_384);
        _379 = move _380;
        StorageDead(_380);
        _378 = &_379;
        _377 = &(*_378);
        _376 = <String as Deref>::deref(move _377) -> [return: bb177, unwind: bb262];
    }

    bb177: {
        _375 = &(*_376);
        StorageDead(_377);
        _374 = solana_program::log::sol_log(move _375) -> [return: bb178, unwind: bb262];
    }

    bb178: {
        StorageDead(_375);
        drop(_379) -> [return: bb179, unwind: bb264];
    }

    bb179: {
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_376);
        StorageDead(_374);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &(*_34);
        _417 = <RefMut<'_, PerpMarket> as Deref>::deref(move _418) -> [return: bb180, unwind: bb264];
    }

    bb180: {
        StorageDead(_418);
        _416 = (((*_417).1: state::perp_market::AMM).43: u64);
        StorageLive(_419);
        _419 = _337;
        _415 = Eq(move _416, move _419);
        switchInt(move _415) -> [0: bb182, otherwise: bb181];
    }

    bb181: {
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_416);
        goto -> bb184;
    }

    bb182: {
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_416);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = &(*_34);
        _422 = <RefMut<'_, PerpMarket> as Deref>::deref(move _423) -> [return: bb183, unwind: bb264];
    }

    bb183: {
        StorageDead(_423);
        _421 = (((*_422).1: state::perp_market::AMM).44: u64);
        StorageLive(_424);
        _424 = _340;
        _420 = Eq(move _421, move _424);
        switchInt(move _420) -> [0: bb215, otherwise: bb184];
    }

    bb184: {
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_421);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &(*_34);
        _433 = <RefMut<'_, PerpMarket> as Deref>::deref(move _434) -> [return: bb185, unwind: bb264];
    }

    bb185: {
        StorageDead(_434);
        _432 = (((*_433).1: state::perp_market::AMM).62: i64);
        StorageLive(_435);
        _435 = _343;
        _431 = <i64 as SafeMath>::safe_sub(move _432, move _435) -> [return: bb186, unwind: bb264];
    }

    bb186: {
        StorageDead(_435);
        StorageDead(_432);
        _430 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _431) -> [return: bb187, unwind: bb264];
    }

    bb187: {
        StorageDead(_431);
        _436 = discriminant(_430);
        switchInt(move _436) -> [0: bb188, 1: bb189, otherwise: bb4];
    }

    bb188: {
        StorageLive(_440);
        _440 = ((_430 as Continue).0: i64);
        _429 = _440;
        StorageDead(_440);
        _428 = Ge(move _429, const 60_i64);
        switchInt(move _428) -> [0: bb192, otherwise: bb191];
    }

    bb189: {
        StorageLive(_437);
        _437 = ((_430 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_439);
        _439 = _437;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _439) -> [return: bb190, unwind: bb264];
    }

    bb190: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_427);
        goto -> bb243;
    }

    bb191: {
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_429);
        goto -> bb194;
    }

    bb192: {
        StorageDead(_433);
        StorageDead(_430);
        StorageDead(_429);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = _272;
        _442 = Option::<u64>::unwrap_or(move _443, const 0_u64) -> [return: bb193, unwind: bb264];
    }

    bb193: {
        StorageDead(_443);
        StorageLive(_444);
        _444 = _337;
        _441 = Eq(move _442, move _444);
        switchInt(move _441) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        StorageDead(_444);
        StorageDead(_442);
        goto -> bb197;
    }

    bb195: {
        StorageDead(_444);
        StorageDead(_442);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _447 = _283;
        _446 = Option::<u64>::unwrap_or(move _447, const 0_u64) -> [return: bb196, unwind: bb264];
    }

    bb196: {
        StorageDead(_447);
        StorageLive(_448);
        _448 = _340;
        _445 = Eq(move _446, move _448);
        switchInt(move _445) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        StorageDead(_448);
        StorageDead(_446);
        StorageLive(_449);
        _449 = ();
        _427 = std::result::Result::<(), error::ErrorCode>::Ok(move _449);
        StorageDead(_449);
        goto -> bb210;
    }

    bb198: {
        StorageDead(_448);
        StorageDead(_446);
        StorageLive(_450);
        _450 = error::ErrorCode::CantUpdatePerpBidAskTwap;
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _530 = const _;
        _461 = &(*_530);
        _460 = &(*_461);
        _459 = move _460 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_460);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = &_450;
        _468 = &(*_469);
        _467 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _468) -> [return: bb199, unwind: bb264];
    }

    bb199: {
        StorageDead(_468);
        _466 = [move _467];
        StorageDead(_467);
        _465 = &_466;
        _464 = &(*_465);
        _463 = move _464 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_464);
        _458 = Arguments::<'_>::new_v1(move _459, move _463) -> [return: bb200, unwind: bb264];
    }

    bb200: {
        StorageDead(_463);
        StorageDead(_459);
        _457 = format(move _458) -> [return: bb201, unwind: bb264];
    }

    bb201: {
        StorageDead(_458);
        StorageDead(_469);
        StorageDead(_466);
        StorageDead(_465);
        StorageDead(_461);
        _456 = move _457;
        StorageDead(_457);
        _455 = &_456;
        _454 = &(*_455);
        _453 = <String as Deref>::deref(move _454) -> [return: bb202, unwind: bb261];
    }

    bb202: {
        _452 = &(*_453);
        StorageDead(_454);
        _451 = solana_program::log::sol_log(move _452) -> [return: bb203, unwind: bb261];
    }

    bb203: {
        StorageDead(_452);
        drop(_456) -> [return: bb204, unwind: bb264];
    }

    bb204: {
        StorageDead(_456);
        StorageDead(_455);
        StorageDead(_453);
        StorageDead(_451);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        _529 = const _;
        _480 = &(*_529);
        _479 = &(*_480);
        _478 = move _479 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_479);
        _477 = Arguments::<'_>::new_const(move _478) -> [return: bb205, unwind: bb264];
    }

    bb205: {
        StorageDead(_478);
        _476 = format(move _477) -> [return: bb206, unwind: bb264];
    }

    bb206: {
        StorageDead(_477);
        StorageDead(_480);
        _475 = move _476;
        StorageDead(_476);
        _474 = &_475;
        _473 = &(*_474);
        _472 = <String as Deref>::deref(move _473) -> [return: bb207, unwind: bb260];
    }

    bb207: {
        _471 = &(*_472);
        StorageDead(_473);
        _470 = solana_program::log::sol_log(move _471) -> [return: bb208, unwind: bb260];
    }

    bb208: {
        StorageDead(_471);
        drop(_475) -> [return: bb209, unwind: bb264];
    }

    bb209: {
        StorageDead(_475);
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_470);
        StorageLive(_482);
        _482 = _450;
        _427 = std::result::Result::<(), error::ErrorCode>::Err(move _482);
        StorageDead(_482);
        StorageDead(_450);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_445);
        StorageDead(_441);
        StorageDead(_428);
        _426 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _427) -> [return: bb211, unwind: bb264];
    }

    bb211: {
        StorageDead(_427);
        _483 = discriminant(_426);
        switchInt(move _483) -> [0: bb212, 1: bb213, otherwise: bb4];
    }

    bb212: {
        StorageLive(_487);
        _487 = ((_426 as Continue).0: ());
        _425 = _487;
        StorageDead(_487);
        StorageDead(_426);
        StorageDead(_425);
        _414 = const ();
        goto -> bb216;
    }

    bb213: {
        StorageLive(_484);
        _484 = ((_426 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_486);
        _486 = _484;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _486) -> [return: bb214, unwind: bb264];
    }

    bb214: {
        StorageDead(_486);
        StorageDead(_484);
        goto -> bb243;
    }

    bb215: {
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_421);
        _414 = const ();
        goto -> bb216;
    }

    bb216: {
        StorageDead(_420);
        StorageDead(_415);
        StorageDead(_414);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        _550 = deref_copy (*_56);
        _602 = (((_550.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _494 = &(*_602);
        _493 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _494) -> [return: bb217, unwind: bb264];
    }

    bb217: {
        _492 = &(*_493);
        StorageDead(_494);
        _491 = state::state::State::funding_paused(move _492) -> [return: bb218, unwind: bb264];
    }

    bb218: {
        StorageDead(_492);
        _490 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _491) -> [return: bb219, unwind: bb264];
    }

    bb219: {
        StorageDead(_491);
        _495 = discriminant(_490);
        switchInt(move _495) -> [0: bb220, 1: bb221, otherwise: bb4];
    }

    bb220: {
        StorageLive(_499);
        _499 = ((_490 as Continue).0: bool);
        _489 = _499;
        StorageDead(_499);
        switchInt(move _489) -> [0: bb224, otherwise: bb223];
    }

    bb221: {
        StorageLive(_496);
        _496 = ((_490 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_498);
        _498 = _496;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _498) -> [return: bb222, unwind: bb264];
    }

    bb222: {
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_493);
        StorageDead(_490);
        StorageDead(_489);
        goto -> bb242;
    }

    bb223: {
        StorageDead(_493);
        StorageDead(_490);
        _488 = const true;
        goto -> bb227;
    }

    bb224: {
        StorageDead(_493);
        StorageDead(_490);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _502 = &(*_34);
        _501 = <RefMut<'_, PerpMarket> as Deref>::deref(move _502) -> [return: bb225, unwind: bb264];
    }

    bb225: {
        _500 = &(*_501);
        StorageDead(_502);
        StorageLive(_503);
        _503 = PerpOperation::UpdateFunding;
        _488 = PerpMarket::is_operation_paused(move _500, move _503) -> [return: bb226, unwind: bb264];
    }

    bb226: {
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_500);
        goto -> bb227;
    }

    bb227: {
        StorageDead(_489);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        _509 = &(*_34);
        _508 = <RefMut<'_, PerpMarket> as Deref>::deref(move _509) -> [return: bb228, unwind: bb264];
    }

    bb228: {
        StorageDead(_509);
        _507 = ((*_508).21: u16);
        StorageLive(_510);
        StorageLive(_511);
        StorageLive(_512);
        _512 = &mut (*_34);
        _511 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _512) -> [return: bb229, unwind: bb264];
    }

    bb229: {
        _510 = &mut (*_511);
        StorageDead(_512);
        StorageLive(_513);
        StorageLive(_514);
        _514 = &mut _57;
        _513 = &mut (*_514);
        StorageLive(_515);
        _515 = _54;
        StorageLive(_516);
        _516 = _55;
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _551 = deref_copy (*_56);
        _603 = (((_551.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _520 = &(*_603);
        _519 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _520) -> [return: bb230, unwind: bb264];
    }

    bb230: {
        StorageDead(_520);
        _518 = &((*_519).7: state::state::OracleGuardRails);
        _517 = &(*_518);
        StorageLive(_521);
        _521 = _488;
        StorageLive(_522);
        _522 = Option::<u64>::None;
        _506 = controller::funding::update_funding_rate(move _507, move _510, move _513, move _515, move _516, move _517, move _521, move _522) -> [return: bb231, unwind: bb264];
    }

    bb231: {
        StorageDead(_522);
        StorageDead(_521);
        StorageDead(_517);
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_510);
        StorageDead(_507);
        _505 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _506) -> [return: bb232, unwind: bb264];
    }

    bb232: {
        StorageDead(_506);
        _523 = discriminant(_505);
        switchInt(move _523) -> [0: bb233, 1: bb234, otherwise: bb4];
    }

    bb233: {
        StorageLive(_527);
        _527 = ((_505 as Continue).0: bool);
        _504 = _527;
        StorageDead(_527);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_514);
        StorageDead(_511);
        StorageDead(_508);
        StorageDead(_505);
        StorageDead(_504);
        StorageLive(_528);
        _528 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _528);
        StorageDead(_528);
        StorageDead(_488);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_340);
        StorageDead(_337);
        StorageDead(_283);
        StorageDead(_272);
        drop(_255) -> [return: bb236, unwind: bb265];
    }

    bb234: {
        StorageLive(_524);
        _524 = ((_505 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_526);
        _526 = _524;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _526) -> [return: bb235, unwind: bb264];
    }

    bb235: {
        StorageDead(_526);
        StorageDead(_524);
        StorageDead(_519);
        StorageDead(_518);
        StorageDead(_514);
        StorageDead(_511);
        StorageDead(_508);
        StorageDead(_505);
        StorageDead(_504);
        goto -> bb242;
    }

    bb236: {
        StorageDead(_255);
        drop(_254) -> [return: bb237, unwind: bb266];
    }

    bb237: {
        StorageDead(_254);
        StorageDead(_243);
        drop(_234) -> [return: bb238, unwind: bb270];
    }

    bb238: {
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_195);
        StorageDead(_180);
        StorageDead(_119);
        drop(_72) -> [return: bb239, unwind: bb271];
    }

    bb239: {
        StorageDead(_72);
        drop(_57) -> [return: bb240, unwind: bb272];
    }

    bb240: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_46);
        drop(_35) -> [return: bb241, unwind: bb273];
    }

    bb241: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb259;
    }

    bb242: {
        StorageDead(_488);
        goto -> bb244;
    }

    bb243: {
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_420);
        StorageDead(_415);
        StorageDead(_414);
        goto -> bb244;
    }

    bb244: {
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_340);
        StorageDead(_337);
        goto -> bb245;
    }

    bb245: {
        StorageDead(_283);
        goto -> bb246;
    }

    bb246: {
        StorageDead(_272);
        drop(_255) -> [return: bb247, unwind: bb265];
    }

    bb247: {
        StorageDead(_255);
        drop(_254) -> [return: bb248, unwind: bb266];
    }

    bb248: {
        StorageDead(_254);
        goto -> bb249;
    }

    bb249: {
        StorageDead(_243);
        drop(_234) -> [return: bb250, unwind: bb270];
    }

    bb250: {
        StorageDead(_234);
        StorageDead(_231);
        StorageDead(_230);
        goto -> bb251;
    }

    bb251: {
        StorageDead(_195);
        goto -> bb252;
    }

    bb252: {
        StorageDead(_180);
        goto -> bb253;
    }

    bb253: {
        StorageDead(_119);
        goto -> bb254;
    }

    bb254: {
        drop(_72) -> [return: bb255, unwind: bb271];
    }

    bb255: {
        StorageDead(_72);
        drop(_57) -> [return: bb256, unwind: bb272];
    }

    bb256: {
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb257;
    }

    bb257: {
        StorageDead(_46);
        drop(_35) -> [return: bb258, unwind: bb273];
    }

    bb258: {
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb259;
    }

    bb259: {
        return;
    }

    bb260 (cleanup): {
        drop(_475) -> [return: bb264, unwind terminate(cleanup)];
    }

    bb261 (cleanup): {
        drop(_456) -> [return: bb264, unwind terminate(cleanup)];
    }

    bb262 (cleanup): {
        drop(_379) -> [return: bb264, unwind terminate(cleanup)];
    }

    bb263 (cleanup): {
        drop(_299) -> [return: bb264, unwind terminate(cleanup)];
    }

    bb264 (cleanup): {
        drop(_255) -> [return: bb265, unwind terminate(cleanup)];
    }

    bb265 (cleanup): {
        drop(_254) -> [return: bb266, unwind terminate(cleanup)];
    }

    bb266 (cleanup): {
        drop(_234) -> [return: bb270, unwind terminate(cleanup)];
    }

    bb267 (cleanup): {
        drop(_155) -> [return: bb270, unwind terminate(cleanup)];
    }

    bb268 (cleanup): {
        drop(_136) -> [return: bb270, unwind terminate(cleanup)];
    }

    bb269 (cleanup): {
        drop(_96) -> [return: bb270, unwind terminate(cleanup)];
    }

    bb270 (cleanup): {
        drop(_72) -> [return: bb271, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_57) -> [return: bb272, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_35) -> [return: bb273, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        resume;
    }

    bb274 (cleanup): {
        _589 = discriminant(_257);
        goto -> bb266;
    }

    bb275 (cleanup): {
        _590 = discriminant(_235);
        goto -> bb270;
    }

    bb276 (cleanup): {
        _591 = discriminant(_73);
        goto -> bb271;
    }

    bb277 (cleanup): {
        _592 = discriminant(_58);
        goto -> bb272;
    }

    bb278 (cleanup): {
        _593 = discriminant(_47);
        goto -> bb272;
    }

    bb279 (cleanup): {
        _594 = discriminant(_36);
        goto -> bb273;
    }

    bb280 (cleanup): {
        _595 = discriminant(_23);
        goto -> bb273;
    }

    bb281 (cleanup): {
        _596 = discriminant(_13);
        goto -> bb273;
    }

    bb282 (cleanup): {
        _597 = discriminant(_3);
        goto -> bb273;
    }
}
