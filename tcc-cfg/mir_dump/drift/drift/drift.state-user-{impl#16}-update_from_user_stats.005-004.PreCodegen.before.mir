// MIR for `state::user::<impl at programs/drift/src/state/user.rs:2067:1: 2067:18>::update_from_user_stats` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:2067:1: 2067:18>::update_from_user_stats(_1: &mut FuelOverflow, _2: &UserStats, _3: u32) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug user_stats => _2;
    debug now => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: u128;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u32;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u128;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: u128;
    let mut _22: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _24: std::result::Result<u128, error::ErrorCode>;
    let mut _25: u128;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u32;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: u128;
    let mut _35: isize;
    let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _39: u128;
    let mut _40: u128;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _42: std::result::Result<u128, error::ErrorCode>;
    let mut _43: u128;
    let mut _44: u128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u32;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: u128;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: u128;
    let mut _58: u128;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _60: std::result::Result<u128, error::ErrorCode>;
    let mut _61: u128;
    let mut _62: u128;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _64: std::result::Result<u128, error::ErrorCode>;
    let mut _65: u32;
    let mut _66: isize;
    let _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _68: !;
    let mut _69: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _70: u128;
    let mut _71: isize;
    let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _75: u128;
    let mut _76: u128;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _78: std::result::Result<u128, error::ErrorCode>;
    let mut _79: u128;
    let mut _80: u128;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _82: std::result::Result<u128, error::ErrorCode>;
    let mut _83: u32;
    let mut _84: isize;
    let _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _86: !;
    let mut _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _88: u128;
    let mut _89: isize;
    let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _93: u128;
    let mut _94: u128;
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _96: std::result::Result<u128, error::ErrorCode>;
    let mut _97: u128;
    let mut _98: u128;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _100: std::result::Result<u128, error::ErrorCode>;
    let mut _101: u32;
    let mut _102: isize;
    let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _106: u128;
    let mut _107: isize;
    let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _111: u128;
    let mut _112: u32;
    let mut _113: ();
    scope 1 {
        debug residual => _13;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _16;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _18;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _21;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _31;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _34;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _36;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _39;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _49;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _52;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _54;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _57;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _67;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _70;
        scope 28 {
        }
    }
    scope 29 {
        debug residual => _72;
        scope 30 {
        }
    }
    scope 31 {
        debug val => _75;
        scope 32 {
        }
    }
    scope 33 {
        debug residual => _85;
        scope 34 {
        }
    }
    scope 35 {
        debug val => _88;
        scope 36 {
        }
    }
    scope 37 {
        debug residual => _90;
        scope 38 {
        }
    }
    scope 39 {
        debug val => _93;
        scope 40 {
        }
    }
    scope 41 {
        debug residual => _103;
        scope 42 {
        }
    }
    scope 43 {
        debug val => _106;
        scope 44 {
        }
    }
    scope 45 {
        debug residual => _108;
        scope 46 {
        }
    }
    scope 47 {
        debug val => _111;
        scope 48 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u128);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = ((*_2).17: u32);
        _10 = <u32 as Cast>::cast::<u128>(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: u128);
        _8 = _16;
        StorageDead(_16);
        _6 = <u128 as SafeMath>::safe_add(move _7, move _8) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb67;
    }

    bb7: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_6);
        _17 = discriminant(_5);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_5 as Continue).0: u128);
        _4 = _21;
        StorageDead(_21);
        ((*_1).1: u128) = move _4;
        StorageDead(_4);
        StorageDead(_9);
        StorageDead(_5);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).2: u128);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = ((*_2).18: u32);
        _28 = <u32 as Cast>::cast::<u128>(move _29) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        goto -> bb67;
    }

    bb12: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u128);
        _26 = _34;
        StorageDead(_34);
        _24 = <u128 as SafeMath>::safe_add(move _25, move _26) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb66;
    }

    bb17: {
        StorageDead(_26);
        StorageDead(_25);
        _23 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_24);
        _35 = discriminant(_23);
        switchInt(move _35) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_39);
        _39 = ((_23 as Continue).0: u128);
        _22 = _39;
        StorageDead(_39);
        ((*_1).2: u128) = move _22;
        StorageDead(_22);
        StorageDead(_27);
        StorageDead(_23);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = ((*_1).3: u128);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_2).19: u32);
        _46 = <u32 as Cast>::cast::<u128>(move _47) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_36);
        _36 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_36);
        goto -> bb66;
    }

    bb22: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: u128);
        _44 = _52;
        StorageDead(_52);
        _42 = <u128 as SafeMath>::safe_add(move _43, move _44) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb65;
    }

    bb27: {
        StorageDead(_44);
        StorageDead(_43);
        _41 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_42);
        _53 = discriminant(_41);
        switchInt(move _53) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_57);
        _57 = ((_41 as Continue).0: u128);
        _40 = _57;
        StorageDead(_57);
        ((*_1).3: u128) = move _40;
        StorageDead(_40);
        StorageDead(_45);
        StorageDead(_41);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = ((*_1).4: u128);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = ((*_2).20: u32);
        _64 = <u32 as Cast>::cast::<u128>(move _65) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_54);
        _54 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb65;
    }

    bb32: {
        StorageDead(_65);
        _63 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _64) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_64);
        _66 = discriminant(_63);
        switchInt(move _66) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_70);
        _70 = ((_63 as Continue).0: u128);
        _62 = _70;
        StorageDead(_70);
        _60 = <u128 as SafeMath>::safe_add(move _61, move _62) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_67);
        _67 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_69);
        _69 = _67;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _69) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb64;
    }

    bb37: {
        StorageDead(_62);
        StorageDead(_61);
        _59 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _60) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_60);
        _71 = discriminant(_59);
        switchInt(move _71) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_75);
        _75 = ((_59 as Continue).0: u128);
        _58 = _75;
        StorageDead(_75);
        ((*_1).4: u128) = move _58;
        StorageDead(_58);
        StorageDead(_63);
        StorageDead(_59);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = ((*_1).5: u128);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = ((*_2).21: u32);
        _82 = <u32 as Cast>::cast::<u128>(move _83) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_72);
        _72 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb64;
    }

    bb42: {
        StorageDead(_83);
        _81 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _82) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_82);
        _84 = discriminant(_81);
        switchInt(move _84) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_88);
        _88 = ((_81 as Continue).0: u128);
        _80 = _88;
        StorageDead(_88);
        _78 = <u128 as SafeMath>::safe_add(move _79, move _80) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_85);
        _85 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_87);
        _87 = _85;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _87) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_87);
        StorageDead(_85);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb63;
    }

    bb47: {
        StorageDead(_80);
        StorageDead(_79);
        _77 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _78) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_78);
        _89 = discriminant(_77);
        switchInt(move _89) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_93);
        _93 = ((_77 as Continue).0: u128);
        _76 = _93;
        StorageDead(_93);
        ((*_1).5: u128) = move _76;
        StorageDead(_76);
        StorageDead(_81);
        StorageDead(_77);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = ((*_1).6: u128);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = ((*_2).22: u32);
        _100 = <u32 as Cast>::cast::<u128>(move _101) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_90);
        _90 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_92);
        StorageDead(_90);
        goto -> bb63;
    }

    bb52: {
        StorageDead(_101);
        _99 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _100) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_100);
        _102 = discriminant(_99);
        switchInt(move _102) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_106);
        _106 = ((_99 as Continue).0: u128);
        _98 = _106;
        StorageDead(_106);
        _96 = <u128 as SafeMath>::safe_add(move _97, move _98) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_103);
        _103 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb62;
    }

    bb57: {
        StorageDead(_98);
        StorageDead(_97);
        _95 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _96) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_96);
        _107 = discriminant(_95);
        switchInt(move _107) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_111);
        _111 = ((_95 as Continue).0: u128);
        _94 = _111;
        StorageDead(_111);
        ((*_1).6: u128) = move _94;
        StorageDead(_94);
        StorageDead(_99);
        StorageDead(_95);
        StorageLive(_112);
        _112 = _3;
        ((*_1).7: u32) = move _112;
        StorageDead(_112);
        StorageLive(_113);
        _113 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _113);
        StorageDead(_113);
        goto -> bb68;
    }

    bb60: {
        StorageLive(_108);
        _108 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_110);
        StorageDead(_108);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_94);
        StorageDead(_99);
        StorageDead(_95);
        goto -> bb68;
    }

    bb63: {
        StorageDead(_76);
        StorageDead(_81);
        StorageDead(_77);
        goto -> bb68;
    }

    bb64: {
        StorageDead(_58);
        StorageDead(_63);
        StorageDead(_59);
        goto -> bb68;
    }

    bb65: {
        StorageDead(_40);
        StorageDead(_45);
        StorageDead(_41);
        goto -> bb68;
    }

    bb66: {
        StorageDead(_22);
        StorageDead(_27);
        StorageDead(_23);
        goto -> bb68;
    }

    bb67: {
        StorageDead(_4);
        StorageDead(_9);
        StorageDead(_5);
        goto -> bb68;
    }

    bb68: {
        return;
    }
}
