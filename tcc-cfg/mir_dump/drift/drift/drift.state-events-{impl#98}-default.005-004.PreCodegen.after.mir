// MIR for `state::events::<impl at programs/drift/src/state/events.rs:414:10: 414:17>::default` after PreCodegen

fn state::events::<impl at programs/drift/src/state/events.rs:414:10: 414:17>::default() -> LiquidationRecord {
    let mut _0: state::events::LiquidationRecord;
    let mut _1: i64;
    let mut _2: state::events::LiquidationType;
    let mut _3: anchor_lang::prelude::Pubkey;
    let mut _4: anchor_lang::prelude::Pubkey;
    let mut _5: u128;
    let mut _6: i128;
    let mut _7: u64;
    let mut _8: u16;
    let mut _9: bool;
    let mut _10: std::vec::Vec<u32>;
    let mut _11: state::events::LiquidatePerpRecord;
    let mut _12: state::events::LiquidateSpotRecord;
    let mut _13: state::events::LiquidateBorrowForPerpPnlRecord;
    let mut _14: state::events::LiquidatePerpPnlForDepositRecord;
    let mut _15: state::events::PerpBankruptcyRecord;
    let mut _16: state::events::SpotBankruptcyRecord;

    bb0: {
        StorageLive(_1);
        _1 = <i64 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageLive(_2);
        _2 = <LiquidationType as Default>::default() -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageLive(_3);
        _3 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageLive(_4);
        _4 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageLive(_5);
        _5 = <u128 as Default>::default() -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageLive(_6);
        _6 = <i128 as Default>::default() -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageLive(_7);
        _7 = <u64 as Default>::default() -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageLive(_8);
        _8 = <u16 as Default>::default() -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageLive(_9);
        _9 = <bool as Default>::default() -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageLive(_10);
        _10 = <Vec<u32> as Default>::default() -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageLive(_11);
        _11 = <LiquidatePerpRecord as Default>::default() -> [return: bb11, unwind: bb17];
    }

    bb11: {
        StorageLive(_12);
        _12 = <LiquidateSpotRecord as Default>::default() -> [return: bb12, unwind: bb17];
    }

    bb12: {
        StorageLive(_13);
        _13 = <LiquidateBorrowForPerpPnlRecord as Default>::default() -> [return: bb13, unwind: bb17];
    }

    bb13: {
        StorageLive(_14);
        _14 = <LiquidatePerpPnlForDepositRecord as Default>::default() -> [return: bb14, unwind: bb17];
    }

    bb14: {
        StorageLive(_15);
        _15 = <PerpBankruptcyRecord as Default>::default() -> [return: bb15, unwind: bb17];
    }

    bb15: {
        StorageLive(_16);
        _16 = <SpotBankruptcyRecord as Default>::default() -> [return: bb16, unwind: bb17];
    }

    bb16: {
        _0 = LiquidationRecord { ts: move _1, liquidation_type: move _2, user: move _3, liquidator: move _4, margin_requirement: move _5, total_collateral: move _6, margin_freed: move _7, liquidation_id: move _8, bankrupt: move _9, canceled_order_ids: move _10, liquidate_perp: move _11, liquidate_spot: move _12, liquidate_borrow_for_perp_pnl: move _13, liquidate_perp_pnl_for_deposit: move _14, perp_bankruptcy: move _15, spot_bankruptcy: move _16 };
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }

    bb17 (cleanup): {
        drop(_10) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        resume;
    }
}
