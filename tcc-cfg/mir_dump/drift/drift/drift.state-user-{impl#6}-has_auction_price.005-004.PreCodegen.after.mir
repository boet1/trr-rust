// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::has_auction_price` after PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1263:1: 1263:11>::has_auction_price(_1: &Order, _2: u64, _3: u8, _4: u64) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    debug order_slot => _2;
    debug auction_duration => _3;
    debug slot => _4;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _5: bool;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _7: std::result::Result<bool, error::ErrorCode>;
    let mut _8: u64;
    let mut _9: u8;
    let mut _10: u64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: bool;
    let mut _17: bool;
    let mut _18: i64;
    let mut _19: i64;
    let mut _20: bool;
    let mut _21: bool;
    scope 1 {
        debug auction_complete => _5;
        let _16: bool;
        scope 6 {
            debug has_auction_prices => _16;
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _9 = _3;
        StorageLive(_10);
        _10 = _4;
        _7 = is_auction_complete(move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        _6 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_6 as Continue).0: bool);
        _5 = _15;
        StorageDead(_15);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = ((*_1).6: i64);
        _17 = Ne(move _18, const 0_i64);
        switchInt(move _17) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb13;
    }

    bb7: {
        StorageDead(_18);
        _16 = const true;
        goto -> bb9;
    }

    bb8: {
        StorageDead(_18);
        StorageLive(_19);
        _19 = ((*_1).7: i64);
        _16 = Ne(move _19, const 0_i64);
        StorageDead(_19);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _5;
        switchInt(move _21) -> [0: bb10, otherwise: bb11];
    }

    bb10: {
        _20 = _16;
        goto -> bb12;
    }

    bb11: {
        _20 = const false;
        goto -> bb12;
    }

    bb12: {
        StorageDead(_21);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _20);
        StorageDead(_20);
        StorageDead(_16);
        StorageDead(_5);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
