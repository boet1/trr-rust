digraph Mir_0_742 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn repeg(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;, _3: u128, _4: u64, _5: &amp;ReErased state::state::OracleGuardRails) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let _6: ();<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: u128;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: error::ErrorCode;<br align="left"/>let _12: u64;<br align="left"/>let _13: u128;<br align="left"/>let _14: u128;<br align="left"/>let mut _15: (u64, u128, u128);<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u128, u128)&gt;;<br align="left"/>let mut _17: std::result::Result&lt;(u64, u128, u128), error::ErrorCode&gt;;<br align="left"/>let mut _18: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _19: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _20: isize;<br align="left"/>let _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _22: !;<br align="left"/>let mut _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _24: (u64, u128, u128);<br align="left"/>let _25: state::perp_market::PerpMarket;<br align="left"/>let _26: i128;<br align="left"/>let mut _27: (state::perp_market::PerpMarket, i128);<br align="left"/>let mut _28: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (state::perp_market::PerpMarket, i128)&gt;;<br align="left"/>let mut _29: std::result::Result&lt;(state::perp_market::PerpMarket, i128), error::ErrorCode&gt;;<br align="left"/>let mut _30: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _31: u128;<br align="left"/>let mut _32: isize;<br align="left"/>let _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _34: !;<br align="left"/>let mut _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _36: (state::perp_market::PerpMarket, i128);<br align="left"/>let _37: bool;<br align="left"/>let _38: bool;<br align="left"/>let _39: bool;<br align="left"/>let _40: bool;<br align="left"/>let mut _41: (bool, bool, bool, bool);<br align="left"/>let mut _42: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (bool, bool, bool, bool)&gt;;<br align="left"/>let mut _43: std::result::Result&lt;(bool, bool, bool, bool), error::ErrorCode&gt;;<br align="left"/>let mut _44: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let _45: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _46: &amp;ReErased anchor_lang::prelude::AccountInfo&lt;ReErased&gt;;<br align="left"/>let mut _47: u64;<br align="left"/>let mut _48: u64;<br align="left"/>let mut _49: &amp;ReErased state::state::OracleGuardRails;<br align="left"/>let mut _50: isize;<br align="left"/>let _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _52: !;<br align="left"/>let mut _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _54: (bool, bool, bool, bool);<br align="left"/>let _55: ();<br align="left"/>let mut _56: bool;<br align="left"/>let mut _57: !;<br align="left"/>let mut _58: error::ErrorCode;<br align="left"/>let _59: ();<br align="left"/>let mut _60: bool;<br align="left"/>let mut _61: !;<br align="left"/>let mut _62: error::ErrorCode;<br align="left"/>let _63: ();<br align="left"/>let mut _64: bool;<br align="left"/>let mut _65: !;<br align="left"/>let mut _66: error::ErrorCode;<br align="left"/>let _67: ();<br align="left"/>let mut _68: bool;<br align="left"/>let mut _69: !;<br align="left"/>let mut _70: error::ErrorCode;<br align="left"/>let _71: bool;<br align="left"/>let mut _72: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _73: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _74: &amp;ReErased mut state::perp_market::PerpMarket;<br align="left"/>let mut _75: i128;<br align="left"/>let mut _76: isize;<br align="left"/>let _77: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _78: !;<br align="left"/>let mut _79: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _80: bool;<br align="left"/>let _81: ();<br align="left"/>let mut _82: bool;<br align="left"/>let mut _83: u128;<br align="left"/>let mut _84: !;<br align="left"/>let mut _85: error::ErrorCode;<br align="left"/>let mut _86: i128;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug price_oracle =&gt; _2;<br align="left"/>debug new_peg_candidate =&gt; _3;<br align="left"/>debug clock_slot =&gt; _4;<br align="left"/>debug oracle_guard_rails =&gt; _5;<br align="left"/>debug terminal_price_before =&gt; _12;<br align="left"/>debug _terminal_quote_reserves =&gt; _13;<br align="left"/>debug _terminal_base_reserves =&gt; _14;<br align="left"/>debug residual =&gt; _21;<br align="left"/>debug val =&gt; _24;<br align="left"/>debug repegged_market =&gt; _25;<br align="left"/>debug adjustment_cost =&gt; _26;<br align="left"/>debug residual =&gt; _33;<br align="left"/>debug val =&gt; _36;<br align="left"/>debug oracle_is_valid =&gt; _37;<br align="left"/>debug direction_valid =&gt; _38;<br align="left"/>debug profitability_valid =&gt; _39;<br align="left"/>debug price_impact_valid =&gt; _40;<br align="left"/>debug residual =&gt; _51;<br align="left"/>debug val =&gt; _54;<br align="left"/>debug cost_applied =&gt; _71;<br align="left"/>debug residual =&gt; _77;<br align="left"/>debug val =&gt; _80;<br align="left"/>>;
    bb0__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = _3<br/>StorageLive(_9)<br/>_9 = (((*_1).1: state::perp_market::AMM).11: u128)<br/>_7 = Eq(move _8, move _9)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb1__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_11)<br/>_11 = error::ErrorCode::InvalidRepegRedundant<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Err(move _11)<br/>StorageDead(_11)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/>_6 = const ()<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>_19 = &amp;((*_1).1: state::perp_market::AMM)<br/>_18 = &amp;(*_19)<br/></td></tr><tr><td align="left">_17 = calculate_terminal_price_and_reserves(move _18)</td></tr></table>>];
    bb3__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;std::result::Result&lt;(u64, u128, u128), error::ErrorCode&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb4__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_20 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _20)</td></tr></table>>];
    bb5__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_16 as Continue).0: (u64, u128, u128))<br/>_15 = _24<br/>StorageDead(_24)<br/>StorageLive(_12)<br/>_12 = (_15.0: u64)<br/>StorageLive(_13)<br/>_13 = (_15.1: u128)<br/>StorageLive(_14)<br/>_14 = (_15.2: u128)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = &amp;(*_1)<br/>StorageLive(_31)<br/>_31 = _3<br/></td></tr><tr><td align="left">_29 = adjust_peg_cost(move _30, move _31)</td></tr></table>>];
    bb6__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_21)<br/>_21 = ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_23)<br/>_23 = _21<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _23)</td></tr></table>>];
    bb8__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">_28 = &lt;std::result::Result&lt;(PerpMarket, i128), error::ErrorCode&gt; as Try&gt;::branch(move _29)</td></tr></table>>];
    bb10__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>_32 = discriminant(_28)<br/></td></tr><tr><td align="left">switchInt(move _32)</td></tr></table>>];
    bb11__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_28 as Continue).0: (state::perp_market::PerpMarket, i128))<br/>_27 = _36<br/>StorageDead(_36)<br/>StorageLive(_25)<br/>_25 = (_27.0: state::perp_market::PerpMarket)<br/>StorageLive(_26)<br/>_26 = (_27.1: i128)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = &amp;_25<br/>_44 = &amp;(*_45)<br/>StorageLive(_46)<br/>_46 = &amp;(*_2)<br/>StorageLive(_47)<br/>_47 = _12<br/>StorageLive(_48)<br/>_48 = _4<br/>StorageLive(_49)<br/>_49 = &amp;(*_5)<br/></td></tr><tr><td align="left">_43 = calculate_repeg_validity_from_oracle_account(move _44, move _46, move _47, move _48, move _49)</td></tr></table>>];
    bb12__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_33 = ((_28 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_35)<br/>_35 = _33<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _35)</td></tr></table>>];
    bb13__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_33)<br/>StorageDead(_28)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_48)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">_42 = &lt;std::result::Result&lt;(bool, bool, bool, bool), error::ErrorCode&gt; as Try&gt;::branch(move _43)</td></tr></table>>];
    bb15__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>_50 = discriminant(_42)<br/></td></tr><tr><td align="left">switchInt(move _50)</td></tr></table>>];
    bb16__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_54)<br/>_54 = ((_42 as Continue).0: (bool, bool, bool, bool))<br/>_41 = _54<br/>StorageDead(_54)<br/>StorageLive(_37)<br/>_37 = (_41.0: bool)<br/>StorageLive(_38)<br/>_38 = (_41.1: bool)<br/>StorageLive(_39)<br/>_39 = (_41.2: bool)<br/>StorageLive(_40)<br/>_40 = (_41.3: bool)<br/>StorageDead(_45)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>_56 = _37<br/></td></tr><tr><td align="left">switchInt(move _56)</td></tr></table>>];
    bb17__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = ((_42 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_53)<br/>_53 = _51<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _53)</td></tr></table>>];
    bb18__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_51)<br/>StorageDead(_45)<br/>StorageDead(_42)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_55 = const ()<br/>StorageDead(_56)<br/>StorageDead(_55)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = _38<br/></td></tr><tr><td align="left">switchInt(move _60)</td></tr></table>>];
    bb20__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = error::ErrorCode::InvalidOracle<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Err(move _58)<br/>StorageDead(_58)<br/>StorageDead(_56)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_59 = const ()<br/>StorageDead(_60)<br/>StorageDead(_59)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>_64 = _39<br/></td></tr><tr><td align="left">switchInt(move _64)</td></tr></table>>];
    bb22__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = error::ErrorCode::InvalidRepegDirection<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Err(move _62)<br/>StorageDead(_62)<br/>StorageDead(_60)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">_63 = const ()<br/>StorageDead(_64)<br/>StorageDead(_63)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = _40<br/></td></tr><tr><td align="left">switchInt(move _68)</td></tr></table>>];
    bb24__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = error::ErrorCode::InvalidRepegProfitability<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Err(move _66)<br/>StorageDead(_66)<br/>StorageDead(_64)<br/>StorageDead(_63)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">_67 = const ()<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>_74 = &amp;mut (*_1)<br/>StorageLive(_75)<br/>_75 = _26<br/></td></tr><tr><td align="left">_73 = apply_cost_to_market(move _74, move _75, const true)</td></tr></table>>];
    bb26__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_70)<br/>_70 = error::ErrorCode::InvalidRepegProfitability<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Err(move _70)<br/>StorageDead(_70)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_74)<br/></td></tr><tr><td align="left">_72 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _73)</td></tr></table>>];
    bb28__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/>_76 = discriminant(_72)<br/></td></tr><tr><td align="left">switchInt(move _76)</td></tr></table>>];
    bb29__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_80)<br/>_80 = ((_72 as Continue).0: bool)<br/>_71 = _80<br/>StorageDead(_80)<br/>StorageDead(_72)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>_82 = _71<br/></td></tr><tr><td align="left">switchInt(move _82)</td></tr></table>>];
    bb30__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageLive(_77)<br/>_77 = ((_72 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_79)<br/>_79 = _77<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _79)</td></tr></table>>];
    bb31__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageDead(_77)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_83)<br/>_83 = _3<br/>(((*_1).1: state::perp_market::AMM).11: u128) = move _83<br/>StorageDead(_83)<br/>_81 = const ()<br/>StorageDead(_82)<br/>StorageDead(_81)<br/>StorageLive(_86)<br/>_86 = _26<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Ok(move _86)<br/>StorageDead(_86)<br/>StorageDead(_71)<br/>StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb33__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_85)<br/>_85 = error::ErrorCode::InvalidRepegProfitability<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Err(move _85)<br/>StorageDead(_85)<br/>StorageDead(_82)<br/>StorageDead(_81)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_40)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_742 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_742 -> bb2__0_742 [label="0"];
    bb0__0_742 -> bb1__0_742 [label="otherwise"];
    bb1__0_742 -> bb38__0_742 [label=""];
    bb2__0_742 -> bb3__0_742 [label="return"];
    bb3__0_742 -> bb4__0_742 [label="return"];
    bb4__0_742 -> bb5__0_742 [label="0"];
    bb4__0_742 -> bb7__0_742 [label="1"];
    bb4__0_742 -> bb6__0_742 [label="otherwise"];
    bb5__0_742 -> bb9__0_742 [label="return"];
    bb7__0_742 -> bb8__0_742 [label="return"];
    bb8__0_742 -> bb38__0_742 [label=""];
    bb9__0_742 -> bb10__0_742 [label="return"];
    bb10__0_742 -> bb11__0_742 [label="0"];
    bb10__0_742 -> bb12__0_742 [label="1"];
    bb10__0_742 -> bb6__0_742 [label="otherwise"];
    bb11__0_742 -> bb14__0_742 [label="return"];
    bb12__0_742 -> bb13__0_742 [label="return"];
    bb13__0_742 -> bb37__0_742 [label=""];
    bb14__0_742 -> bb15__0_742 [label="return"];
    bb15__0_742 -> bb16__0_742 [label="0"];
    bb15__0_742 -> bb17__0_742 [label="1"];
    bb15__0_742 -> bb6__0_742 [label="otherwise"];
    bb16__0_742 -> bb20__0_742 [label="0"];
    bb16__0_742 -> bb19__0_742 [label="otherwise"];
    bb17__0_742 -> bb18__0_742 [label="return"];
    bb18__0_742 -> bb36__0_742 [label=""];
    bb19__0_742 -> bb22__0_742 [label="0"];
    bb19__0_742 -> bb21__0_742 [label="otherwise"];
    bb20__0_742 -> bb35__0_742 [label=""];
    bb21__0_742 -> bb24__0_742 [label="0"];
    bb21__0_742 -> bb23__0_742 [label="otherwise"];
    bb22__0_742 -> bb35__0_742 [label=""];
    bb23__0_742 -> bb26__0_742 [label="0"];
    bb23__0_742 -> bb25__0_742 [label="otherwise"];
    bb24__0_742 -> bb35__0_742 [label=""];
    bb25__0_742 -> bb27__0_742 [label="return"];
    bb26__0_742 -> bb35__0_742 [label=""];
    bb27__0_742 -> bb28__0_742 [label="return"];
    bb28__0_742 -> bb29__0_742 [label="0"];
    bb28__0_742 -> bb30__0_742 [label="1"];
    bb28__0_742 -> bb6__0_742 [label="otherwise"];
    bb29__0_742 -> bb33__0_742 [label="0"];
    bb29__0_742 -> bb32__0_742 [label="otherwise"];
    bb30__0_742 -> bb31__0_742 [label="return"];
    bb31__0_742 -> bb34__0_742 [label=""];
    bb32__0_742 -> bb38__0_742 [label=""];
    bb33__0_742 -> bb34__0_742 [label=""];
    bb34__0_742 -> bb35__0_742 [label=""];
    bb35__0_742 -> bb36__0_742 [label=""];
    bb36__0_742 -> bb37__0_742 [label=""];
    bb37__0_742 -> bb38__0_742 [label=""];
}
