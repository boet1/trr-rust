// MIR for `constraints::valid_oracle_for_spot_market` before PreCodegen

fn constraints::valid_oracle_for_spot_market(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: &anchor_lang::prelude::AccountLoader<'_, SpotMarket>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug oracle => _1;
    debug market => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: &anchor_lang::prelude::Pubkey;
    let _8: &state::spot_market::SpotMarket;
    let mut _9: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _10: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _12: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _13: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _18: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _19: &anchor_lang::prelude::Pubkey;
    let mut _20: ();
    let _21: error::ErrorCode;
    let _22: ();
    let mut _23: &str;
    let _24: &str;
    let mut _25: &std::string::String;
    let _26: &std::string::String;
    let _27: std::string::String;
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[&str; 2];
    let _32: &[&str; 2];
    let _33: [&str; 2];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let mut _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: [core::fmt::rt::Argument<'_>; 1];
    let mut _38: core::fmt::rt::Argument<'_>;
    let mut _39: &error::ErrorCode;
    let _40: &error::ErrorCode;
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: error::ErrorCode;
    let mut _45: isize;
    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: ();
    let mut _52: &anchor_lang::prelude::Pubkey;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    let mut _60: isize;
    let mut _61: isize;
    scope 1 {
        debug residual => _15;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _18;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _21;
        let _28: std::string::String;
        let mut _51: &[&str; 2];
        scope 6 {
            debug res => _28;
        }
    }
    scope 7 {
        debug residual => _46;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _49;
        scope 10 {
        }
    }

    bb0: {
        _54 = const false;
        _53 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &(*_2);
        _12 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        _11 = <std::result::Result<Ref<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _12) -> [return: bb2, unwind: bb27];
    }

    bb2: {
        _53 = const true;
        _54 = const true;
        StorageDead(_12);
        _14 = discriminant(_11);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = move ((_11 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _10 = move _18;
        StorageDead(_18);
        _9 = &_10;
        _8 = <Ref<'_, SpotMarket> as Deref>::deref(move _9) -> [return: bb7, unwind: bb26];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_17);
        _17 = move _15;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _17) -> [return: bb6, unwind: bb30];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_9);
        _59 = discriminant(_11);
        _53 = const false;
        _54 = const false;
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb23;
    }

    bb7: {
        StorageDead(_9);
        _7 = &((*_8).1: anchor_lang::prelude::Pubkey);
        StorageLive(_19);
        _52 = deref_copy ((*_1).0: &anchor_lang::prelude::Pubkey);
        _19 = &(*_52);
        _6 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _7, move _19) -> [return: bb8, unwind: bb26];
    }

    bb8: {
        switchInt(move _6) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_19);
        drop(_10) -> [return: bb28, unwind: bb30];
    }

    bb10: {
        StorageDead(_19);
        drop(_10) -> [return: bb29, unwind: bb30];
    }

    bb11: {
        StorageDead(_39);
        _37 = [move _38];
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = move _35 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_35);
        _29 = Arguments::<'_>::new_v1(move _30, move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_30);
        _28 = format(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        _27 = move _28;
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = <String as Deref>::deref(move _25) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _23 = &(*_24);
        StorageDead(_25);
        _22 = solana_program::log::sol_log(move _23) -> [return: bb15, unwind: bb25];
    }

    bb15: {
        StorageDead(_23);
        drop(_27) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const "not valid_oracle_for_spot_market";
        _42 = &(*_43);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_44);
        _44 = _21;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _44);
        StorageDead(_44);
        StorageDead(_21);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_5);
        _45 = discriminant(_4);
        switchInt(move _45) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_49);
        _49 = ((_4 as Continue).0: ());
        _3 = _49;
        StorageDead(_49);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_50);
        _50 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _50);
        StorageDead(_50);
        goto -> bb24;
    }

    bb21: {
        StorageLive(_46);
        _46 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_48);
        StorageDead(_46);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_27) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_10) -> [return: bb30, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }

    bb28: {
        _55 = discriminant(_11);
        _53 = const false;
        _54 = const false;
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_20);
        _20 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _20);
        StorageDead(_20);
        goto -> bb18;
    }

    bb29: {
        _57 = discriminant(_11);
        _53 = const false;
        _54 = const false;
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_21);
        _21 = error::ErrorCode::InvalidOracle;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _51 = const _;
        _32 = &(*_51);
        _31 = &(*_32);
        _30 = move _31 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_21;
        _39 = &(*_40);
        _38 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _39) -> [return: bb11, unwind continue];
    }

    bb30 (cleanup): {
        _61 = discriminant(_11);
        goto -> bb27;
    }
}
