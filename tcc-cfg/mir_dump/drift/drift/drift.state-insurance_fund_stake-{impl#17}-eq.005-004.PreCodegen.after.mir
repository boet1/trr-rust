// MIR for `insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:16:23: 16:32>::eq` after PreCodegen

fn insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:16:23: 16:32>::eq(_1: &InsuranceFundStake, _2: &InsuranceFundStake) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: u128;
    let mut _9: bool;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: bool;
    let mut _13: u128;
    let mut _14: u128;
    let mut _15: bool;
    let mut _16: i64;
    let mut _17: i64;
    let mut _18: bool;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: bool;
    let mut _22: i64;
    let mut _23: i64;
    let mut _24: bool;
    let mut _25: i64;
    let mut _26: i64;
    let mut _27: bool;
    let mut _28: u16;
    let mut _29: u16;
    let mut _30: &[u8; 14];
    let mut _31: &[u8; 14];

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_5);
        _5 = &((*_2).0: anchor_lang::prelude::Pubkey);
        _3 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb19, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).1: u128);
        StorageLive(_8);
        _8 = ((*_2).1: u128);
        _6 = Eq(move _7, move _8);
        switchInt(move _6) -> [0: bb18, otherwise: bb3];
    }

    bb3: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        _10 = ((*_1).2: u128);
        StorageLive(_11);
        _11 = ((*_2).2: u128);
        _9 = Eq(move _10, move _11);
        switchInt(move _9) -> [0: bb17, otherwise: bb4];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).3: u128);
        StorageLive(_14);
        _14 = ((*_2).3: u128);
        _12 = Eq(move _13, move _14);
        switchInt(move _12) -> [0: bb16, otherwise: bb5];
    }

    bb5: {
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).4: i64);
        StorageLive(_17);
        _17 = ((*_2).4: i64);
        _15 = Eq(move _16, move _17);
        switchInt(move _15) -> [0: bb15, otherwise: bb6];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).5: u64);
        StorageLive(_20);
        _20 = ((*_2).5: u64);
        _18 = Eq(move _19, move _20);
        switchInt(move _18) -> [0: bb14, otherwise: bb7];
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        StorageLive(_22);
        _22 = ((*_1).6: i64);
        StorageLive(_23);
        _23 = ((*_2).6: i64);
        _21 = Eq(move _22, move _23);
        switchInt(move _21) -> [0: bb13, otherwise: bb8];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).7: i64);
        StorageLive(_26);
        _26 = ((*_2).7: i64);
        _24 = Eq(move _25, move _26);
        switchInt(move _24) -> [0: bb12, otherwise: bb9];
    }

    bb9: {
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_27);
        StorageLive(_28);
        _28 = ((*_1).8: u16);
        StorageLive(_29);
        _29 = ((*_2).8: u16);
        _27 = Eq(move _28, move _29);
        switchInt(move _27) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_30);
        _30 = &((*_1).9: [u8; 14]);
        StorageLive(_31);
        _31 = &((*_2).9: [u8; 14]);
        _0 = <[u8; 14] as PartialEq>::eq(move _30, move _31) -> [return: bb21, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb20;
    }

    bb12: {
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb20;
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb20;
    }

    bb14: {
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb20;
    }

    bb15: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb20;
    }

    bb16: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb20;
    }

    bb17: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb20;
    }

    bb18: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb20;
    }

    bb19: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb20;
    }

    bb20: {
        _0 = const false;
        goto -> bb22;
    }

    bb21: {
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb22;
    }

    bb22: {
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_3);
        return;
    }
}
