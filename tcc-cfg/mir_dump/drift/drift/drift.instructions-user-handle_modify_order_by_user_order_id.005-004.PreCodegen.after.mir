// MIR for `instructions::user::handle_modify_order_by_user_order_id` after PreCodegen

fn instructions::user::handle_modify_order_by_user_order_id(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::CancelOrder<'_>>, _2: u8, _3: order_params::ModifyOrderParams) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug user_order_id => _2;
    debug modify_order_params => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _8: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _13: ();
    let _14: &anchor_lang::prelude::Clock;
    let _15: anchor_lang::prelude::Clock;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _17: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _22: anchor_lang::prelude::Clock;
    let mut _27: instructions::optional_accounts::AccountMaps<'_>;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _29: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _30: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _31: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _32: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _33: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _34: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _35: &std::collections::BTreeSet<u16>;
    let _36: &std::collections::BTreeSet<u16>;
    let _37: std::collections::BTreeSet<u16>;
    let mut _38: &std::collections::BTreeSet<u16>;
    let _39: &std::collections::BTreeSet<u16>;
    let _40: std::collections::BTreeSet<u16>;
    let mut _41: u64;
    let mut _42: std::option::Option<state::state::OracleGuardRails>;
    let mut _43: state::state::OracleGuardRails;
    let mut _44: &state::state::State;
    let mut _45: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _51: ();
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _53: std::result::Result<(), error::ErrorCode>;
    let mut _54: controller::orders::ModifyOrderId;
    let mut _55: u8;
    let mut _56: state::order_params::ModifyOrderParams;
    let mut _57: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _58: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _59: &state::state::State;
    let _60: &state::state::State;
    let mut _61: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _62: &state::perp_market_map::PerpMarketMap<'_>;
    let _63: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _64: &state::spot_market_map::SpotMarketMap<'_>;
    let _65: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _66: &mut state::oracle_map::OracleMap<'_>;
    let mut _67: &mut state::oracle_map::OracleMap<'_>;
    let mut _68: &anchor_lang::prelude::Clock;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _74: ();
    let mut _75: &mut instructions::user::CancelOrder<'_>;
    let mut _76: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _77: &mut instructions::user::CancelOrder<'_>;
    let mut _78: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _79: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _80: &mut instructions::user::CancelOrder<'_>;
    let mut _81: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    let mut _88: isize;
    let mut _89: isize;
    let mut _90: isize;
    let mut _91: isize;
    let mut _92: isize;
    let mut _93: isize;
    let mut _94: isize;
    let mut _95: isize;
    let mut _96: isize;
    let mut _97: isize;
    let mut _98: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _99: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _100: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _14;
        let _23: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _23;
            let _24: state::perp_market_map::PerpMarketMap<'_>;
            let _25: state::spot_market_map::SpotMarketMap<'_>;
            let mut _26: state::oracle_map::OracleMap<'_>;
            let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _50: instructions::optional_accounts::AccountMaps<'_>;
            scope 11 {
                debug perp_market_map => _24;
                debug spot_market_map => _25;
                debug oracle_map => _26;
                let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _73: ();
                scope 16 {
                    debug residual => _70;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _73;
                    scope 19 {
                    }
                }
            }
            scope 12 {
                debug residual => _47;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _50;
                scope 15 {
                }
            }
        }
    }
    scope 6 {
        debug residual => _19;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _22;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _75 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _8 = &((*_75).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _76 = deref_copy (*_8);
        _98 = (((_76.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _7 = &(*_98);
        _6 = constraints::exchange_not_paused(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb47];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        _82 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_12);
        _12 = move _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _12) -> [return: bb6, unwind: bb50];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        _92 = discriminant(_5);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb40;
    }

    bb7: {
        _16 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _17) -> [return: bb8, unwind: bb47];
    }

    bb8: {
        StorageDead(_17);
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_22);
        _22 = move ((_16 as Continue).0: anchor_lang::prelude::Clock);
        _15 = move _22;
        StorageDead(_22);
        _14 = &_15;
        _84 = discriminant(_16);
        StorageDead(_16);
        StorageLive(_23);
        _77 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _23 = &((*_77).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _78 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _34 = &(*_78);
        _33 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _34) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_19);
        _19 = move ((_16 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_21);
        _21 = move _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _21) -> [return: bb11, unwind: bb49];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_19);
        _90 = discriminant(_16);
        StorageDead(_16);
        goto -> bb39;
    }

    bb12: {
        StorageDead(_34);
        _32 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _33) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_33);
        _31 = &mut _32;
        _30 = &mut (*_31);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = BTreeSet::<u16>::new() -> [return: bb14, unwind continue];
    }

    bb14: {
        _36 = &_37;
        _35 = &(*_36);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = BTreeSet::<u16>::new() -> [return: bb15, unwind: bb46];
    }

    bb15: {
        _39 = &_40;
        _38 = &(*_39);
        StorageLive(_41);
        _41 = ((*_14).0: u64);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _79 = deref_copy (*_23);
        _99 = (((_79.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _45 = &(*_99);
        _44 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _45) -> [return: bb16, unwind: bb45];
    }

    bb16: {
        StorageDead(_45);
        _43 = ((*_44).7: state::state::OracleGuardRails);
        _42 = Option::<state::state::OracleGuardRails>::Some(move _43);
        StorageDead(_43);
        _29 = load_maps(move _30, move _35, move _38, move _41, move _42) -> [return: bb17, unwind: bb45];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_30);
        _28 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _29) -> [return: bb18, unwind: bb45];
    }

    bb18: {
        StorageDead(_29);
        _46 = discriminant(_28);
        switchInt(move _46) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_50);
        _50 = move ((_28 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _27 = move _50;
        StorageDead(_50);
        StorageLive(_24);
        _24 = move (_27.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_25);
        _25 = move (_27.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_26);
        _26 = move (_27.2: state::oracle_map::OracleMap<'_>);
        _88 = discriminant(_28);
        StorageDead(_44);
        drop(_40) -> [return: bb22, unwind: bb41];
    }

    bb20: {
        StorageLive(_47);
        _47 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb21, unwind: bb48];
    }

    bb21: {
        StorageDead(_49);
        StorageDead(_47);
        _86 = discriminant(_28);
        StorageDead(_44);
        drop(_40) -> [return: bb36, unwind: bb46];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_39);
        drop(_37) -> [return: bb23, unwind: bb42];
    }

    bb23: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _2;
        _54 = ModifyOrderId::UserOrderId(move _55);
        StorageDead(_55);
        StorageLive(_56);
        _56 = move _3;
        StorageLive(_57);
        StorageLive(_58);
        _80 = deref_copy (_1.1: &mut instructions::user::CancelOrder<'_>);
        _58 = &((*_80).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _57 = &(*_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _81 = deref_copy (*_23);
        _100 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _61 = &(*_100);
        _60 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _61) -> [return: bb24, unwind: bb42];
    }

    bb24: {
        _59 = &(*_60);
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_24;
        _62 = &(*_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_25;
        _64 = &(*_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = &mut _26;
        _66 = &mut (*_67);
        StorageLive(_68);
        _68 = &(*_14);
        _53 = controller::orders::modify_order(move _54, move _56, move _57, move _59, move _62, move _64, move _66, move _68) -> [return: bb25, unwind: bb42];
    }

    bb25: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_54);
        _52 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _53) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        StorageDead(_53);
        _69 = discriminant(_52);
        switchInt(move _69) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_73);
        _73 = ((_52 as Continue).0: ());
        _51 = _73;
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_74);
        _74 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _74);
        StorageDead(_74);
        drop(_26) -> [return: bb30, unwind: bb43];
    }

    bb28: {
        StorageLive(_70);
        _70 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb29, unwind: bb42];
    }

    bb29: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_52);
        StorageDead(_51);
        drop(_26) -> [return: bb33, unwind: bb43];
    }

    bb30: {
        StorageDead(_26);
        drop(_25) -> [return: bb31, unwind: bb44];
    }

    bb31: {
        StorageDead(_25);
        drop(_24) -> [return: bb32, unwind: bb47];
    }

    bb32: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb40;
    }

    bb33: {
        StorageDead(_26);
        drop(_25) -> [return: bb34, unwind: bb44];
    }

    bb34: {
        StorageDead(_25);
        drop(_24) -> [return: bb35, unwind: bb47];
    }

    bb35: {
        StorageDead(_24);
        goto -> bb38;
    }

    bb36: {
        StorageDead(_40);
        StorageDead(_39);
        drop(_37) -> [return: bb37, unwind: bb47];
    }

    bb37: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_23);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb40;
    }

    bb40: {
        return;
    }

    bb41 (cleanup): {
        drop(_37) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_26) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        drop(_25) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_24) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_40) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_37) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        _95 = discriminant(_28);
        goto -> bb45;
    }

    bb49 (cleanup): {
        _96 = discriminant(_16);
        goto -> bb47;
    }

    bb50 (cleanup): {
        _97 = discriminant(_5);
        goto -> bb47;
    }
}
