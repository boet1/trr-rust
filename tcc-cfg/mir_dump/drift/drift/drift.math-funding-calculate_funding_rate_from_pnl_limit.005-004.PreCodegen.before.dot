digraph Mir_0_2306 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_funding_rate_from_pnl_limit(_1: i128, _2: i128) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;<br align="left"/>let _3: ();<br align="left"/>let mut _4: bool;<br align="left"/>let mut _5: i128;<br align="left"/>let mut _6: !;<br align="left"/>let _7: i128;<br align="left"/>let mut _8: bool;<br align="left"/>let mut _9: i128;<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _11: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _12: i128;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: i128;<br align="left"/>let mut _18: i128;<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _20: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _21: i128;<br align="left"/>let mut _22: isize;<br align="left"/>let _23: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _24: !;<br align="left"/>let mut _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _26: i128;<br align="left"/>let mut _27: i128;<br align="left"/>debug pnl_limit =&gt; _1;<br align="left"/>debug base_asset_amount =&gt; _2;<br align="left"/>debug pnl_limit_biased =&gt; _7;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug residual =&gt; _23;<br align="left"/>debug val =&gt; _26;<br align="left"/>>;
    bb0__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _2<br/>_4 = Eq(move _5, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _4)</td></tr></table>>];
    bb1__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_0 = std::result::Result::&lt;i128, error::ErrorCode&gt;::Ok(const 0_i128)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_3 = const ()<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _1<br/>_8 = Lt(move _9, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _1<br/></td></tr><tr><td align="left">_11 = &lt;i128 as SafeMath&gt;::safe_add(move _12, const 1_i128)</td></tr></table>>];
    bb4__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_7 = _1<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb6__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_13 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb7__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_10 as Continue).0: i128)<br/>_7 = _17<br/>StorageDead(_17)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb9__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb10__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb11__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _7<br/></td></tr><tr><td align="left">_20 = &lt;i128 as SafeMath&gt;::safe_mul(move _21, const _)</td></tr></table>>];
    bb12__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb13__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_22 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _22)</td></tr></table>>];
    bb14__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_19 as Continue).0: i128)<br/>_18 = _26<br/>StorageDead(_26)<br/>StorageLive(_27)<br/>_27 = _2<br/></td></tr><tr><td align="left">_0 = &lt;i128 as SafeMath&gt;::safe_div(move _18, move _27)</td></tr></table>>];
    bb15__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_25)<br/>_25 = _23<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _25)</td></tr></table>>];
    bb16__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_23)<br/>StorageDead(_18)<br/>StorageDead(_7)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_18)<br/>StorageDead(_7)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_2306 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2306 -> bb2__0_2306 [label="0"];
    bb0__0_2306 -> bb1__0_2306 [label="otherwise"];
    bb1__0_2306 -> bb18__0_2306 [label=""];
    bb2__0_2306 -> bb4__0_2306 [label="0"];
    bb2__0_2306 -> bb3__0_2306 [label="otherwise"];
    bb3__0_2306 -> bb5__0_2306 [label="return"];
    bb4__0_2306 -> bb11__0_2306 [label=""];
    bb5__0_2306 -> bb6__0_2306 [label="return"];
    bb6__0_2306 -> bb7__0_2306 [label="0"];
    bb6__0_2306 -> bb9__0_2306 [label="1"];
    bb6__0_2306 -> bb8__0_2306 [label="otherwise"];
    bb7__0_2306 -> bb11__0_2306 [label=""];
    bb9__0_2306 -> bb10__0_2306 [label="return"];
    bb10__0_2306 -> bb18__0_2306 [label=""];
    bb11__0_2306 -> bb12__0_2306 [label="return"];
    bb12__0_2306 -> bb13__0_2306 [label="return"];
    bb13__0_2306 -> bb14__0_2306 [label="0"];
    bb13__0_2306 -> bb15__0_2306 [label="1"];
    bb13__0_2306 -> bb8__0_2306 [label="otherwise"];
    bb14__0_2306 -> bb17__0_2306 [label="return"];
    bb15__0_2306 -> bb16__0_2306 [label="return"];
    bb16__0_2306 -> bb18__0_2306 [label=""];
    bb17__0_2306 -> bb18__0_2306 [label=""];
}
