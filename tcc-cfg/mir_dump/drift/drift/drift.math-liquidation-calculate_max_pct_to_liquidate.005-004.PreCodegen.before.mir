// MIR for `calculate_max_pct_to_liquidate` before PreCodegen

fn calculate_max_pct_to_liquidate(_1: &User, _2: u128, _3: u64, _4: u128, _5: u128) -> std::result::Result<u128, error::ErrorCode> {
    debug user => _1;
    debug margin_shortage => _2;
    debug slot => _3;
    debug initial_pct_to_liquidate => _4;
    debug liquidation_duration => _5;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _6: ();
    let mut _7: bool;
    let mut _8: u128;
    let mut _9: u128;
    let mut _10: (u128, bool);
    let mut _11: !;
    let _12: u64;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _14: std::result::Result<u64, error::ErrorCode>;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: u64;
    let mut _23: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: u128;
    let mut _27: std::result::Result<u128, error::ErrorCode>;
    let mut _28: u128;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _30: std::result::Result<u128, error::ErrorCode>;
    let mut _31: u128;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _33: std::result::Result<u128, error::ErrorCode>;
    let mut _34: u64;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: u128;
    let mut _46: u128;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _54: std::result::Result<u128, error::ErrorCode>;
    let mut _55: u128;
    let mut _56: u128;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _58: std::result::Result<u128, error::ErrorCode>;
    let mut _59: u64;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _72: std::result::Result<u128, error::ErrorCode>;
    let mut _73: u128;
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _75: std::result::Result<u128, error::ErrorCode>;
    let mut _76: u128;
    let mut _77: u128;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: u128;
    let mut _90: u128;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _92: std::result::Result<u128, error::ErrorCode>;
    let mut _93: u64;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: u128;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _101: std::result::Result<u128, error::ErrorCode>;
    let mut _102: u128;
    let mut _103: isize;
    let mut _105: !;
    let mut _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _108: u128;
    scope 1 {
        debug slots_elapsed => _12;
        let _22: u128;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: u128;
        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _44: u128;
        let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _51: u128;
        scope 6 {
            debug pct_freeable => _22;
            let _52: u128;
            let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _64: u128;
            let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _69: u128;
            scope 19 {
                debug total_margin_shortage => _52;
                let _70: u128;
                let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _82: u128;
                let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _87: u128;
                scope 28 {
                    debug max_margin_freed => _70;
                    let _88: u128;
                    let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _98: u128;
                    scope 37 {
                        debug margin_freeable => _88;
                        let _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _107: u128;
                        scope 42 {
                            debug residual => _104;
                            scope 43 {
                            }
                        }
                        scope 44 {
                            debug val => _107;
                            scope 45 {
                            }
                        }
                    }
                    scope 38 {
                        debug residual => _95;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug val => _98;
                        scope 41 {
                        }
                    }
                }
                scope 29 {
                    debug residual => _79;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _82;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug residual => _84;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _87;
                    scope 36 {
                    }
                }
            }
            scope 20 {
                debug residual => _61;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _64;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _66;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _69;
                scope 27 {
                }
            }
        }
        scope 7 {
            debug residual => _36;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _39;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _41;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _44;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _48;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _51;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _10 = CheckedMul(const 50_u128, const _);
        assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", const 50_u128, const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _9 = move (_10.0: u128);
        _7 = Lt(move _8, move _9);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_8);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(const _);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb68;
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _3;
        StorageLive(_16);
        _16 = ((*_1).14: u64);
        _14 = <u64 as SafeMath>::safe_sub(move _15, move _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_14);
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_21);
        _21 = ((_13 as Continue).0: u64);
        _12 = _21;
        StorageDead(_21);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _12;
        _33 = <u64 as Cast>::cast::<u128>(move _34) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_18);
        _18 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_13);
        goto -> bb67;
    }

    bb10: {
        StorageDead(_34);
        _32 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_33);
        _35 = discriminant(_32);
        switchInt(move _35) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        StorageLive(_39);
        _39 = ((_32 as Continue).0: u128);
        _31 = _39;
        StorageDead(_39);
        _30 = <u128 as SafeMath>::safe_mul(move _31, const _) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_36);
        _36 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb64;
    }

    bb15: {
        StorageDead(_31);
        _29 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_30);
        _40 = discriminant(_29);
        switchInt(move _40) -> [0: bb17, 1: bb18, otherwise: bb7];
    }

    bb17: {
        StorageLive(_44);
        _44 = ((_29 as Continue).0: u128);
        _28 = _44;
        StorageDead(_44);
        StorageLive(_45);
        _45 = _5;
        _27 = <u128 as SafeMath>::safe_div(move _28, move _45) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_41);
        _41 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_43);
        StorageDead(_41);
        goto -> bb64;
    }

    bb20: {
        StorageDead(_45);
        StorageDead(_28);
        _26 = std::result::Result::<u128, error::ErrorCode>::unwrap_or(move _27, const _) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_27);
        StorageLive(_46);
        _46 = _4;
        _25 = <u128 as SafeMath>::safe_add(move _26, move _46) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_46);
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_25);
        _47 = discriminant(_24);
        switchInt(move _47) -> [0: bb24, 1: bb25, otherwise: bb7];
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_24 as Continue).0: u128);
        _23 = _51;
        StorageDead(_51);
        _22 = <u128 as Ord>::min(move _23, const _) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_48);
        _48 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_48);
        goto -> bb65;
    }

    bb27: {
        StorageDead(_23);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_24);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _2;
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = ((*_1).13: u64);
        _58 = <u64 as Cast>::cast::<u128>(move _59) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_59);
        _57 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _58) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_58);
        _60 = discriminant(_57);
        switchInt(move _60) -> [0: bb30, 1: bb31, otherwise: bb7];
    }

    bb30: {
        StorageLive(_64);
        _64 = ((_57 as Continue).0: u128);
        _56 = _64;
        StorageDead(_64);
        _54 = <u128 as SafeMath>::safe_add(move _55, move _56) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_61);
        _61 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb62;
    }

    bb33: {
        StorageDead(_56);
        StorageDead(_55);
        _53 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _54) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_54);
        _65 = discriminant(_53);
        switchInt(move _65) -> [0: bb35, 1: bb36, otherwise: bb7];
    }

    bb35: {
        StorageLive(_69);
        _69 = ((_53 as Continue).0: u128);
        _52 = _69;
        StorageDead(_69);
        StorageDead(_57);
        StorageDead(_53);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _52;
        StorageLive(_77);
        _77 = _22;
        _75 = <u128 as SafeMath>::safe_mul(move _76, move _77) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_66);
        _66 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_68);
        StorageDead(_66);
        goto -> bb62;
    }

    bb38: {
        StorageDead(_77);
        StorageDead(_76);
        _74 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _75) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_75);
        _78 = discriminant(_74);
        switchInt(move _78) -> [0: bb40, 1: bb41, otherwise: bb7];
    }

    bb40: {
        StorageLive(_82);
        _82 = ((_74 as Continue).0: u128);
        _73 = _82;
        StorageDead(_82);
        _72 = <u128 as SafeMath>::safe_div(move _73, const _) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_79);
        _79 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb60;
    }

    bb43: {
        StorageDead(_73);
        _71 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _72) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_72);
        _83 = discriminant(_71);
        switchInt(move _83) -> [0: bb45, 1: bb46, otherwise: bb7];
    }

    bb45: {
        StorageLive(_87);
        _87 = ((_71 as Continue).0: u128);
        _70 = _87;
        StorageDead(_87);
        StorageDead(_74);
        StorageDead(_71);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _70;
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = ((*_1).13: u64);
        _92 = <u64 as Cast>::cast::<u128>(move _93) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_84);
        _84 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_86);
        StorageDead(_84);
        goto -> bb60;
    }

    bb48: {
        StorageDead(_93);
        _91 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _92) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_92);
        _94 = discriminant(_91);
        switchInt(move _94) -> [0: bb50, 1: bb51, otherwise: bb7];
    }

    bb50: {
        StorageLive(_98);
        _98 = ((_91 as Continue).0: u128);
        _90 = _98;
        StorageDead(_98);
        _88 = core::num::<impl u128>::saturating_sub(move _89, move _90) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_95);
        _95 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_91);
        StorageDead(_88);
        goto -> bb61;
    }

    bb53: {
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_91);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = _88;
        _101 = <u128 as SafeMath>::safe_mul(move _102, const _) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_102);
        _100 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _101) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_101);
        _103 = discriminant(_100);
        switchInt(move _103) -> [0: bb56, 1: bb57, otherwise: bb7];
    }

    bb56: {
        StorageLive(_107);
        _107 = ((_100 as Continue).0: u128);
        _99 = _107;
        StorageDead(_107);
        StorageLive(_108);
        _108 = _2;
        _0 = <u128 as SafeMath>::safe_div(move _99, move _108) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_104);
        _104 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_106);
        _106 = _104;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _106) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_99);
        StorageDead(_88);
        StorageDead(_70);
        StorageDead(_52);
        StorageDead(_22);
        StorageDead(_12);
        StorageDead(_100);
        goto -> bb68;
    }

    bb59: {
        StorageDead(_108);
        StorageDead(_99);
        StorageDead(_88);
        StorageDead(_70);
        StorageDead(_52);
        StorageDead(_22);
        StorageDead(_12);
        StorageDead(_100);
        goto -> bb68;
    }

    bb60: {
        StorageDead(_74);
        StorageDead(_71);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_70);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_57);
        StorageDead(_53);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_52);
        goto -> bb66;
    }

    bb64: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_23);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_24);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_22);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_12);
        goto -> bb68;
    }

    bb68: {
        return;
    }
}
