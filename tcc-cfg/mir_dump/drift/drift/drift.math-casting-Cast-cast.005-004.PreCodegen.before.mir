// MIR for `Cast::cast` before PreCodegen

fn Cast::cast(_1: Self) -> std::result::Result<T, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<T, error::ErrorCode>;
    let mut _2: std::result::Result<T, <T as std::convert::TryFrom<Self>>::Error>;
    let mut _3: Self;
    let mut _4: isize;
    let _5: T;
    let mut _6: T;
    let _7: &std::panic::Location<'_>;
    let _8: ();
    let mut _9: &str;
    let _10: &str;
    let mut _11: &std::string::String;
    let _12: &std::string::String;
    let _13: std::string::String;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[&str; 2];
    let _18: &[&str; 2];
    let _19: [&str; 2];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let mut _21: &[core::fmt::rt::Argument<'_>; 2];
    let _22: &[core::fmt::rt::Argument<'_>; 2];
    let _23: [core::fmt::rt::Argument<'_>; 2];
    let mut _24: core::fmt::rt::Argument<'_>;
    let mut _25: &&str;
    let _26: &&str;
    let _27: &str;
    let mut _28: &std::panic::Location<'_>;
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &u32;
    let _31: &u32;
    let _32: u32;
    let mut _33: &std::panic::Location<'_>;
    let mut _34: error::ErrorCode;
    let mut _36: bool;
    let mut _37: isize;
    let mut _38: isize;
    let mut _39: isize;
    scope 1 {
        debug result => _5;
    }
    scope 2 {
        debug caller => _7;
        let _14: std::string::String;
        let mut _35: &[&str; 2];
        scope 3 {
            debug res => _14;
        }
    }

    bb0: {
        _36 = const false;
        StorageLive(_2);
        StorageLive(_3);
        _3 = move _1;
        _2 = <Self as TryInto<T>>::try_into(move _3) -> [return: bb1, unwind: bb16];
    }

    bb1: {
        _36 = const true;
        StorageDead(_3);
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_7);
        _7 = Location::<'_>::caller() -> [return: bb5, unwind: bb21];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_5);
        _5 = move ((_2 as Ok).0: T);
        StorageLive(_6);
        _6 = move _5;
        _0 = std::result::Result::<T, error::ErrorCode>::Ok(move _6);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb19;
    }

    bb5: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _35 = const _;
        _18 = &(*_35);
        _17 = &(*_18);
        _16 = move _17 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_17);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &(*_7);
        _27 = Location::<'_>::file(move _28) -> [return: bb6, unwind: bb21];
    }

    bb6: {
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = core::fmt::rt::Argument::<'_>::new_display::<&str>(move _25) -> [return: bb7, unwind: bb21];
    }

    bb7: {
        StorageDead(_25);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &(*_7);
        _32 = Location::<'_>::line(move _33) -> [return: bb8, unwind: bb21];
    }

    bb8: {
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _30) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        StorageDead(_30);
        _23 = [move _24, move _29];
        StorageDead(_29);
        StorageDead(_24);
        _22 = &_23;
        _21 = &(*_22);
        _20 = move _21 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_21);
        _15 = Arguments::<'_>::new_v1(move _16, move _20) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_16);
        _14 = format(move _15) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        StorageDead(_15);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_18);
        _13 = move _14;
        StorageDead(_14);
        _12 = &_13;
        _11 = &(*_12);
        _10 = <String as Deref>::deref(move _11) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        _9 = &(*_10);
        StorageDead(_11);
        _8 = solana_program::log::sol_log(move _9) -> [return: bb13, unwind: bb15];
    }

    bb13: {
        StorageDead(_9);
        drop(_13) -> [return: bb14, unwind: bb21];
    }

    bb14: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_34);
        _34 = error::ErrorCode::CastingFailure;
        _0 = std::result::Result::<T, error::ErrorCode>::Err(move _34);
        StorageDead(_34);
        StorageDead(_7);
        goto -> bb19;
    }

    bb15 (cleanup): {
        drop(_13) -> [return: bb21, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        _36 = const false;
        StorageDead(_2);
        return;
    }

    bb18: {
        drop(_2) -> [return: bb17, unwind: bb16];
    }

    bb19: {
        _37 = discriminant(_2);
        switchInt(move _37) -> [0: bb17, otherwise: bb18];
    }

    bb20 (cleanup): {
        drop(_2) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb21 (cleanup): {
        _39 = discriminant(_2);
        switchInt(move _39) -> [0: bb16, otherwise: bb20];
    }
}
