// MIR for `instruction::<impl at programs/drift/src/lib.rs:69:1: 69:11>::deserialize_reader` after PreCodegen

fn instruction::<impl at programs/drift/src/lib.rs:69:1: 69:11>::deserialize_reader(_1: &mut R) -> std::result::Result<instruction::PlaceSignedMsgTakerOrder, std::io::Error> {
    debug reader => _1;
    let mut _0: std::result::Result<instruction::PlaceSignedMsgTakerOrder, std::io::Error>;
    let mut _2: instruction::PlaceSignedMsgTakerOrder;
    let mut _3: std::vec::Vec<u8>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, std::vec::Vec<u8>>;
    let mut _5: std::result::Result<std::vec::Vec<u8>, std::io::Error>;
    let mut _6: &mut R;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _11: std::vec::Vec<u8>;
    let mut _12: bool;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::io::Error>, bool>;
    let mut _14: std::result::Result<bool, std::io::Error>;
    let mut _15: &mut R;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, std::io::Error>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::io::Error>;
    let _20: bool;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let mut _25: isize;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: isize;
    let mut _29: isize;
    let mut _30: isize;
    let mut _31: isize;
    let mut _32: isize;
    scope 1 {
        debug residual => _8;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }

    bb0: {
        _22 = const false;
        _21 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <Vec<u8> as BorshDeserialize>::deserialize_reader::<R>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<Vec<u8>, std::io::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _21 = const true;
        _22 = const true;
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::vec::Vec<u8>);
        _3 = move _11;
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_1);
        _14 = <bool as BorshDeserialize>::deserialize_reader::<R>(move _15) -> [return: bb7, unwind: bb15];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<instruction::PlaceSignedMsgTakerOrder, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb17;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<bool, std::io::Error> as Try>::branch(move _14) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: bool);
        _12 = _20;
        StorageDead(_20);
        _2 = instruction::PlaceSignedMsgTakerOrder { signed_msg_order_params_message_bytes: move _3, is_delegate_signer: move _12 };
        StorageDead(_12);
        StorageDead(_3);
        _0 = std::result::Result::<instruction::PlaceSignedMsgTakerOrder, std::io::Error>::Ok(move _2);
        StorageDead(_2);
        _23 = discriminant(_13);
        StorageDead(_13);
        _25 = discriminant(_4);
        _21 = const false;
        _22 = const false;
        StorageDead(_4);
        goto -> bb13;
    }

    bb10: {
        StorageLive(_17);
        _17 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, std::io::Error>);
        StorageLive(_19);
        _19 = move _17;
        _0 = <std::result::Result<instruction::PlaceSignedMsgTakerOrder, std::io::Error> as FromResidual<std::result::Result<Infallible, std::io::Error>>>::from_residual(move _19) -> [return: bb11, unwind: bb14];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_12);
        drop(_3) -> [return: bb12, unwind: bb18];
    }

    bb12: {
        StorageDead(_3);
        StorageDead(_2);
        _27 = discriminant(_13);
        StorageDead(_13);
        goto -> bb17;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_3) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        _29 = discriminant(_4);
        _21 = const false;
        _22 = const false;
        StorageDead(_4);
        goto -> bb13;
    }

    bb18 (cleanup): {
        _31 = discriminant(_13);
        goto -> bb19;
    }

    bb19 (cleanup): {
        _32 = discriminant(_4);
        goto -> bb16;
    }
}
