digraph Mir_0_3829 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn AMM::get_max_reference_price_offset(_1: state::perp_market::AMM) -&gt; std::result::Result&lt;i64, error::ErrorCode&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: u8;<br align="left"/>let mut _5: !;<br align="left"/>let _6: i64;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _8: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _9: u8;<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u8&gt;;<br align="left"/>let mut _11: std::result::Result&lt;u8, error::ErrorCode&gt;;<br align="left"/>let mut _12: u8;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: u8;<br align="left"/>let mut _18: isize;<br align="left"/>let _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _22: i64;<br align="left"/>let _23: i64;<br align="left"/>let mut _24: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _25: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _26: i64;<br align="left"/>let mut _27: i64;<br align="left"/>let mut _28: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _29: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: i64;<br align="left"/>let mut _35: bool;<br align="left"/>let mut _36: bool;<br align="left"/>let mut _37: bool;<br align="left"/>let mut _38: bool;<br align="left"/>let mut _39: i64;<br align="left"/>let mut _40: isize;<br align="left"/>let _41: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _42: !;<br align="left"/>let mut _43: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _44: i64;<br align="left"/>let _45: i64;<br align="left"/>let mut _46: i64;<br align="left"/>let mut _47: i64;<br align="left"/>let mut _48: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _49: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _50: u32;<br align="left"/>let mut _51: isize;<br align="left"/>let _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _53: !;<br align="left"/>let mut _54: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _55: i64;<br align="left"/>let mut _56: bool;<br align="left"/>let mut _57: bool;<br align="left"/>let mut _58: bool;<br align="left"/>let mut _59: bool;<br align="left"/>let mut _60: i64;<br align="left"/>let mut _61: i64;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug lower_bound_multiplier =&gt; _6;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug residual =&gt; _19;<br align="left"/>debug val =&gt; _22;<br align="left"/>debug lb_bps =&gt; _23;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug residual =&gt; _41;<br align="left"/>debug val =&gt; _44;<br align="left"/>debug max_offset =&gt; _45;<br align="left"/>debug residual =&gt; _52;<br align="left"/>debug val =&gt; _55;<br align="left"/>>;
    bb0__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = (_1.70: u8)<br/>_3 = Le(move _4, const 100_u8)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_0 = std::result::Result::&lt;i64, error::ErrorCode&gt;::Ok(const 0_i64)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = (_1.70: u8)<br/></td></tr><tr><td align="left">_11 = &lt;u8 as SafeMath&gt;::safe_sub(move _12, const 100_u8)</td></tr></table>>];
    bb3__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;u8, error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb4__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_13 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb5__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_10 as Continue).0: u8)<br/>_9 = _17<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_8 = &lt;u8 as Cast&gt;::cast::&lt;i64&gt;(move _9)</td></tr></table>>];
    bb6__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb8__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb10__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_18 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb11__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_7 as Continue).0: i64)<br/>_6 = _22<br/>StorageDead(_22)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/></td></tr><tr><td align="left">_29 = &lt;u128 as Cast&gt;::cast::&lt;i64&gt;(const _)</td></tr></table>>];
    bb12__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_21)<br/>_21 = _19<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _21)</td></tr></table>>];
    bb13__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left">_28 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _29)</td></tr></table>>];
    bb15__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>_30 = discriminant(_28)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb16__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_28 as Continue).0: i64)<br/>_27 = _34<br/>StorageDead(_34)<br/>_35 = Eq(const 10000_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _35, &quot;attempt to divide `{}` by zero&quot;, _27)</td></tr></table>>];
    bb17__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_28 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb18__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">_36 = Eq(const 10000_i64, const -1_i64)<br/>_37 = Eq(_27, const i64::MIN)<br/>_38 = BitAnd(move _36, move _37)<br/></td></tr><tr><td align="left">assert(!move _38, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _27, const 10000_i64)</td></tr></table>>];
    bb20__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_26 = Div(move _27, const 10000_i64)<br/>StorageDead(_27)<br/>StorageLive(_39)<br/>_39 = _6<br/></td></tr><tr><td align="left">_25 = &lt;i64 as SafeMath&gt;::safe_mul(move _26, move _39)</td></tr></table>>];
    bb21__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _25)</td></tr></table>>];
    bb22__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_40 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _40)</td></tr></table>>];
    bb23__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_44)<br/>_44 = ((_24 as Continue).0: i64)<br/>_23 = _44<br/>StorageDead(_44)<br/>StorageDead(_28)<br/>StorageDead(_24)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>_50 = (_1.64: u32)<br/></td></tr><tr><td align="left">_49 = &lt;u32 as Cast&gt;::cast::&lt;i64&gt;(move _50)</td></tr></table>>];
    bb24__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_41)<br/>_41 = ((_24 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_43)<br/>_43 = _41<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _43)</td></tr></table>>];
    bb25__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_41)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/></td></tr><tr><td align="left">_48 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _49)</td></tr></table>>];
    bb27__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>_51 = discriminant(_48)<br/></td></tr><tr><td align="left">switchInt(move _51)</td></tr></table>>];
    bb28__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = ((_48 as Continue).0: i64)<br/>_47 = _55<br/>StorageDead(_55)<br/>_56 = Eq(const 2_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _56, &quot;attempt to divide `{}` by zero&quot;, _47)</td></tr></table>>];
    bb29__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_48 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_54)<br/>_54 = _52<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _54)</td></tr></table>>];
    bb30__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_52)<br/>StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_48)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_57 = Eq(const 2_i64, const -1_i64)<br/>_58 = Eq(_47, const i64::MIN)<br/>_59 = BitAnd(move _57, move _58)<br/></td></tr><tr><td align="left">assert(!move _59, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _47, const 2_i64)</td></tr></table>>];
    bb32__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_46 = Div(move _47, const 2_i64)<br/>StorageDead(_47)<br/>StorageLive(_60)<br/>_60 = _23<br/></td></tr><tr><td align="left">_45 = &lt;i64 as Ord&gt;::max(move _46, move _60)</td></tr></table>>];
    bb33__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>StorageDead(_46)<br/>StorageDead(_48)<br/>StorageLive(_61)<br/>_61 = _45<br/>_0 = std::result::Result::&lt;i64, error::ErrorCode&gt;::Ok(move _61)<br/>StorageDead(_61)<br/>StorageDead(_45)<br/>StorageDead(_23)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_3829 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3829 -> bb2__0_3829 [label="0"];
    bb0__0_3829 -> bb1__0_3829 [label="otherwise"];
    bb1__0_3829 -> bb38__0_3829 [label=""];
    bb2__0_3829 -> bb3__0_3829 [label="return"];
    bb3__0_3829 -> bb4__0_3829 [label="return"];
    bb4__0_3829 -> bb5__0_3829 [label="0"];
    bb4__0_3829 -> bb7__0_3829 [label="1"];
    bb4__0_3829 -> bb6__0_3829 [label="otherwise"];
    bb5__0_3829 -> bb9__0_3829 [label="return"];
    bb7__0_3829 -> bb8__0_3829 [label="return"];
    bb8__0_3829 -> bb36__0_3829 [label=""];
    bb9__0_3829 -> bb10__0_3829 [label="return"];
    bb10__0_3829 -> bb11__0_3829 [label="0"];
    bb10__0_3829 -> bb12__0_3829 [label="1"];
    bb10__0_3829 -> bb6__0_3829 [label="otherwise"];
    bb11__0_3829 -> bb14__0_3829 [label="return"];
    bb12__0_3829 -> bb13__0_3829 [label="return"];
    bb13__0_3829 -> bb36__0_3829 [label=""];
    bb14__0_3829 -> bb15__0_3829 [label="return"];
    bb15__0_3829 -> bb16__0_3829 [label="0"];
    bb15__0_3829 -> bb17__0_3829 [label="1"];
    bb15__0_3829 -> bb6__0_3829 [label="otherwise"];
    bb16__0_3829 -> bb19__0_3829 [label="success"];
    bb17__0_3829 -> bb18__0_3829 [label="return"];
    bb18__0_3829 -> bb34__0_3829 [label=""];
    bb19__0_3829 -> bb20__0_3829 [label="success"];
    bb20__0_3829 -> bb21__0_3829 [label="return"];
    bb21__0_3829 -> bb22__0_3829 [label="return"];
    bb22__0_3829 -> bb23__0_3829 [label="0"];
    bb22__0_3829 -> bb24__0_3829 [label="1"];
    bb22__0_3829 -> bb6__0_3829 [label="otherwise"];
    bb23__0_3829 -> bb26__0_3829 [label="return"];
    bb24__0_3829 -> bb25__0_3829 [label="return"];
    bb25__0_3829 -> bb34__0_3829 [label=""];
    bb26__0_3829 -> bb27__0_3829 [label="return"];
    bb27__0_3829 -> bb28__0_3829 [label="0"];
    bb27__0_3829 -> bb29__0_3829 [label="1"];
    bb27__0_3829 -> bb6__0_3829 [label="otherwise"];
    bb28__0_3829 -> bb31__0_3829 [label="success"];
    bb29__0_3829 -> bb30__0_3829 [label="return"];
    bb30__0_3829 -> bb35__0_3829 [label=""];
    bb31__0_3829 -> bb32__0_3829 [label="success"];
    bb32__0_3829 -> bb33__0_3829 [label="return"];
    bb33__0_3829 -> bb38__0_3829 [label=""];
    bb34__0_3829 -> bb35__0_3829 [label=""];
    bb35__0_3829 -> bb37__0_3829 [label=""];
    bb36__0_3829 -> bb37__0_3829 [label=""];
    bb37__0_3829 -> bb38__0_3829 [label=""];
}
