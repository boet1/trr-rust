// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::has_too_much_drawdown` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::has_too_much_drawdown(_1: &PerpMarket) -> std::result::Result<bool, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _2: bool;
    let mut _3: isize;
    let mut _4: i64;
    let mut _5: i64;
    let mut _6: (i64, bool);
    let mut _7: i64;
    let mut _8: i64;
    let mut _9: (i64, bool);
    let _10: ();
    let mut _11: bool;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _14: std::result::Result<i128, error::ErrorCode>;
    let mut _15: i128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _17: std::result::Result<i128, error::ErrorCode>;
    let mut _18: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: i64;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: i128;
    let mut _33: i128;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: isize;
    let mut _41: i128;
    let mut _42: i128;
    let mut _43: i128;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: i128;
    let mut _50: i128;
    let mut _51: i128;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: i128;
    let mut _58: i128;
    let mut _59: i128;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: i128;
    let mut _66: i128;
    let mut _67: i128;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: !;
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: &std::string::String;
    let _79: &std::string::String;
    let _80: std::string::String;
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[&str; 3];
    let _85: &[&str; 3];
    let _86: [&str; 3];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let mut _88: &[core::fmt::rt::Argument<'_>; 2];
    let _89: &[core::fmt::rt::Argument<'_>; 2];
    let _90: [core::fmt::rt::Argument<'_>; 2];
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &i128;
    let _93: &i128;
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &i64;
    let _96: &i64;
    scope 1 {
        debug quote_drawdown_limit_breached => _2;
        let _12: i128;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: i128;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: i128;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: i128;
        scope 2 {
            debug percent_drawdown => _12;
            let _39: bool;
            scope 15 {
                debug percent_drawdown_limit_breached => _39;
                let _81: std::string::String;
                let mut _97: &[&str; 3];
                scope 16 {
                    debug res => _81;
                }
            }
        }
        scope 3 {
            debug residual => _23;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _26;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _28;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _31;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _35;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _38;
            scope 14 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        _3 = discriminant(((*_1).24: state::perp_market::ContractTier));
        switchInt(move _3) -> [0: bb2, 1: bb2, otherwise: bb1];
    }

    bb1: {
        StorageLive(_7);
        _7 = (((*_1).1: state::perp_market::AMM).49: i64);
        StorageLive(_8);
        _9 = CheckedMul(const _, const 200_i64);
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 200_i64) -> [success: bb4, unwind continue];
    }

    bb2: {
        StorageLive(_4);
        _4 = (((*_1).1: state::perp_market::AMM).49: i64);
        StorageLive(_5);
        _6 = CheckedMul(const _, const 400_i64);
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", const _, const 400_i64) -> [success: bb3, unwind continue];
    }

    bb3: {
        _5 = move (_6.0: i64);
        _2 = Le(move _4, move _5);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb5;
    }

    bb4: {
        _8 = move (_9.0: i64);
        _2 = Le(move _7, move _8);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb5;
    }

    bb5: {
        StorageLive(_10);
        StorageLive(_11);
        _11 = _2;
        switchInt(move _11) -> [0: bb50, otherwise: bb6];
    }

    bb6: {
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = (((*_1).1: state::perp_market::AMM).49: i64);
        _20 = <i64 as Cast>::cast::<i128>(move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_19 as Continue).0: i128);
        _18 = _26;
        StorageDead(_26);
        _17 = <i128 as SafeMath>::safe_mul(move _18, const _) -> [return: bb13, unwind continue];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb52;
    }

    bb13: {
        StorageDead(_18);
        _16 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_17);
        _27 = discriminant(_16);
        switchInt(move _27) -> [0: bb15, 1: bb16, otherwise: bb10];
    }

    bb15: {
        StorageLive(_31);
        _31 = ((_16 as Continue).0: i128);
        _15 = _31;
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = (((*_1).1: state::perp_market::AMM).31: i128);
        _32 = <i128 as Ord>::max(move _33, const 1_i128) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_28);
        _28 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_28);
        goto -> bb52;
    }

    bb18: {
        StorageDead(_33);
        _14 = <i128 as SafeMath>::safe_div(move _15, move _32) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_15);
        _13 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_14);
        _34 = discriminant(_13);
        switchInt(move _34) -> [0: bb21, 1: bb22, otherwise: bb10];
    }

    bb21: {
        StorageLive(_38);
        _38 = ((_13 as Continue).0: i128);
        _12 = _38;
        StorageDead(_38);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageLive(_39);
        _40 = discriminant(((*_1).24: state::perp_market::ContractTier));
        switchInt(move _40) -> [0: bb25, 1: bb29, 2: bb33, otherwise: bb24];
    }

    bb22: {
        StorageLive(_35);
        _35 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_37);
        StorageDead(_35);
        goto -> bb53;
    }

    bb24: {
        StorageLive(_65);
        _65 = _12;
        StorageLive(_66);
        StorageLive(_67);
        _68 = Eq(const _, const i128::MIN);
        assert(!move _68, "attempt to negate `{}`, which would overflow", const _) -> [success: bb37, unwind continue];
    }

    bb25: {
        StorageLive(_41);
        _41 = _12;
        StorageLive(_42);
        StorageLive(_43);
        _44 = Eq(const _, const i128::MIN);
        assert(!move _44, "attempt to negate `{}`, which would overflow", const _) -> [success: bb26, unwind continue];
    }

    bb26: {
        _43 = Neg(const _);
        _45 = Eq(const 50_i128, const 0_i128);
        assert(!move _45, "attempt to divide `{}` by zero", _43) -> [success: bb27, unwind continue];
    }

    bb27: {
        _46 = Eq(const 50_i128, const -1_i128);
        _47 = Eq(_43, const i128::MIN);
        _48 = BitAnd(move _46, move _47);
        assert(!move _48, "attempt to compute `{} / {}`, which would overflow", _43, const 50_i128) -> [success: bb28, unwind continue];
    }

    bb28: {
        _42 = Div(move _43, const 50_i128);
        StorageDead(_43);
        _39 = Le(move _41, move _42);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb40;
    }

    bb29: {
        StorageLive(_49);
        _49 = _12;
        StorageLive(_50);
        StorageLive(_51);
        _52 = Eq(const _, const i128::MIN);
        assert(!move _52, "attempt to negate `{}`, which would overflow", const _) -> [success: bb30, unwind continue];
    }

    bb30: {
        _51 = Neg(const _);
        _53 = Eq(const 33_i128, const 0_i128);
        assert(!move _53, "attempt to divide `{}` by zero", _51) -> [success: bb31, unwind continue];
    }

    bb31: {
        _54 = Eq(const 33_i128, const -1_i128);
        _55 = Eq(_51, const i128::MIN);
        _56 = BitAnd(move _54, move _55);
        assert(!move _56, "attempt to compute `{} / {}`, which would overflow", _51, const 33_i128) -> [success: bb32, unwind continue];
    }

    bb32: {
        _50 = Div(move _51, const 33_i128);
        StorageDead(_51);
        _39 = Le(move _49, move _50);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb40;
    }

    bb33: {
        StorageLive(_57);
        _57 = _12;
        StorageLive(_58);
        StorageLive(_59);
        _60 = Eq(const _, const i128::MIN);
        assert(!move _60, "attempt to negate `{}`, which would overflow", const _) -> [success: bb34, unwind continue];
    }

    bb34: {
        _59 = Neg(const _);
        _61 = Eq(const 25_i128, const 0_i128);
        assert(!move _61, "attempt to divide `{}` by zero", _59) -> [success: bb35, unwind continue];
    }

    bb35: {
        _62 = Eq(const 25_i128, const -1_i128);
        _63 = Eq(_59, const i128::MIN);
        _64 = BitAnd(move _62, move _63);
        assert(!move _64, "attempt to compute `{} / {}`, which would overflow", _59, const 25_i128) -> [success: bb36, unwind continue];
    }

    bb36: {
        _58 = Div(move _59, const 25_i128);
        StorageDead(_59);
        _39 = Le(move _57, move _58);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb40;
    }

    bb37: {
        _67 = Neg(const _);
        _69 = Eq(const 20_i128, const 0_i128);
        assert(!move _69, "attempt to divide `{}` by zero", _67) -> [success: bb38, unwind continue];
    }

    bb38: {
        _70 = Eq(const 20_i128, const -1_i128);
        _71 = Eq(_67, const i128::MIN);
        _72 = BitAnd(move _70, move _71);
        assert(!move _72, "attempt to compute `{} / {}`, which would overflow", _67, const 20_i128) -> [success: bb39, unwind continue];
    }

    bb39: {
        _66 = Div(move _67, const 20_i128);
        StorageDead(_67);
        _39 = Le(move _65, move _66);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb40;
    }

    bb40: {
        StorageLive(_73);
        _73 = _39;
        switchInt(move _73) -> [0: bb49, otherwise: bb41];
    }

    bb41: {
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _97 = const _;
        _85 = &(*_97);
        _84 = &(*_85);
        _83 = move _84 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_12;
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _92) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_92);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(((*_1).1: state::perp_market::AMM).49: i64);
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _95) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_95);
        _90 = [move _91, move _94];
        StorageDead(_94);
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = move _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_88);
        _82 = Arguments::<'_>::new_v1(move _83, move _87) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_87);
        StorageDead(_83);
        _81 = format(move _82) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_82);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        _80 = move _81;
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = <String as Deref>::deref(move _78) -> [return: bb46, unwind: bb56];
    }

    bb46: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb47, unwind: bb56];
    }

    bb47: {
        StorageDead(_76);
        drop(_80) -> [return: bb48, unwind: bb57];
    }

    bb48: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_73);
        StorageDead(_39);
        goto -> bb54;
    }

    bb49: {
        _10 = const ();
        StorageDead(_73);
        StorageDead(_39);
        StorageDead(_12);
        goto -> bb51;
    }

    bb50: {
        _10 = const ();
        goto -> bb51;
    }

    bb51: {
        StorageDead(_11);
        StorageDead(_10);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const false);
        StorageDead(_2);
        goto -> bb55;
    }

    bb52: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_2);
        goto -> bb55;
    }

    bb55: {
        return;
    }

    bb56 (cleanup): {
        drop(_80) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }
}
