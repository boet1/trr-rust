// MIR for `calculate_spot_if_fee` after PreCodegen

fn calculate_spot_if_fee(_1: u128, _2: u128, _3: u32, _4: u32, _5: u32, _6: u32, _7: u32, _8: i64, _9: u32) -> std::result::Result<u32, error::ErrorCode> {
    debug margin_shortage => _1;
    debug token_amount => _2;
    debug asset_weight => _3;
    debug asset_liquidation_multiplier => _4;
    debug liability_weight => _5;
    debug liability_liquidation_multiplier => _6;
    debug liability_decimals => _7;
    debug liability_price => _8;
    debug max_if_fee => _9;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _10: ();
    let mut _11: bool;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: bool;
    let mut _15: i64;
    let mut _16: bool;
    let mut _17: u128;
    let mut _18: bool;
    let mut _19: u32;
    let mut _20: !;
    let _21: u128;
    let mut _22: u32;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: u128;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _28: std::result::Result<u128, error::ErrorCode>;
    let mut _29: u32;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: bool;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _44: std::result::Result<u128, error::ErrorCode>;
    let mut _45: u128;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _47: std::result::Result<u128, error::ErrorCode>;
    let mut _48: u32;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: u128;
    let mut _55: bool;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: std::result::Result<u32, error::ErrorCode>;
    let mut _63: u128;
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _65: std::result::Result<u128, error::ErrorCode>;
    let mut _66: u128;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _68: std::result::Result<u128, error::ErrorCode>;
    let mut _69: u128;
    let mut _70: u128;
    let mut _71: u128;
    let mut _72: u128;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _74: std::result::Result<u128, error::ErrorCode>;
    let mut _75: u128;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _77: std::result::Result<u128, error::ErrorCode>;
    let mut _78: u128;
    let mut _79: u128;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _81: std::result::Result<u128, error::ErrorCode>;
    let mut _82: u32;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: isize;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _93: u128;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _95: std::result::Result<u128, error::ErrorCode>;
    let mut _96: u32;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: isize;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _107: u128;
    let mut _108: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _109: std::result::Result<u128, error::ErrorCode>;
    let mut _110: u128;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _112: std::result::Result<u128, error::ErrorCode>;
    let mut _113: u128;
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _115: std::result::Result<u128, error::ErrorCode>;
    let mut _116: u128;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _118: std::result::Result<u128, error::ErrorCode>;
    let mut _119: u128;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _125: u128;
    let mut _126: isize;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _131: u128;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _137: u128;
    let mut _138: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _139: std::result::Result<u128, error::ErrorCode>;
    let mut _140: i64;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: isize;
    let mut _148: !;
    let mut _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _156: u128;
    let mut _157: isize;
    let mut _159: !;
    let mut _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _162: u32;
    let mut _163: u32;
    let mut _164: u32;
    scope 1 {
        debug token_precision => _21;
        let _23: u128;
        let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _34: u128;
        let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _41: u128;
        scope 2 {
            debug liability_weight => _23;
            let _42: u128;
            let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _53: u128;
            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _60: u128;
            scope 11 {
                debug asset_weight => _42;
                let _61: u32;
                let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _87: u128;
                let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _92: u128;
                let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _101: u128;
                let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _106: u128;
                let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _124: u128;
                let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _130: u128;
                let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _136: u128;
                let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _145: u128;
                let _147: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _150: u128;
                let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _155: u128;
                let _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _161: u128;
                scope 20 {
                    debug implied_if_fee => _61;
                }
                scope 21 {
                    debug residual => _84;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _87;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug residual => _89;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _92;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug residual => _98;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _101;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug residual => _103;
                    scope 34 {
                    }
                }
                scope 35 {
                    debug val => _106;
                    scope 36 {
                    }
                }
                scope 37 {
                    debug residual => _121;
                    scope 38 {
                    }
                }
                scope 39 {
                    debug val => _124;
                    scope 40 {
                    }
                }
                scope 41 {
                    debug residual => _127;
                    scope 42 {
                    }
                }
                scope 43 {
                    debug val => _130;
                    scope 44 {
                    }
                }
                scope 45 {
                    debug residual => _133;
                    scope 46 {
                    }
                }
                scope 47 {
                    debug val => _136;
                    scope 48 {
                    }
                }
                scope 49 {
                    debug residual => _142;
                    scope 50 {
                    }
                }
                scope 51 {
                    debug val => _145;
                    scope 52 {
                    }
                }
                scope 53 {
                    debug residual => _147;
                    scope 54 {
                    }
                }
                scope 55 {
                    debug val => _150;
                    scope 56 {
                    }
                }
                scope 57 {
                    debug residual => _152;
                    scope 58 {
                    }
                }
                scope 59 {
                    debug val => _155;
                    scope 60 {
                    }
                }
                scope 61 {
                    debug residual => _158;
                    scope 62 {
                    }
                }
                scope 63 {
                    debug val => _161;
                    scope 64 {
                    }
                }
            }
            scope 12 {
                debug residual => _50;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _53;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _57;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _60;
                scope 19 {
                }
            }
        }
        scope 3 {
            debug residual => _31;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _34;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _38;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _41;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = _3;
        StorageLive(_13);
        _13 = _5;
        _11 = Ge(move _12, move _13);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb3;
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _8;
        _14 = Eq(move _15, const 0_i64);
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_15);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _2;
        _16 = Eq(move _17, const 0_u128);
        switchInt(move _16) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_17);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _6;
        _18 = Eq(move _19, const 0_u32);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        StorageDead(_19);
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(const 0_u32);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb107;
    }

    bb8: {
        StorageDead(_19);
        _10 = const ();
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_10);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _7;
        _21 = core::num::<impl u128>::pow(const 10_u128, move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _5;
        _28 = <u32 as Cast>::cast::<u128>(move _29) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_29);
        _27 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        _30 = discriminant(_27);
        switchInt(move _30) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_34);
        _34 = ((_27 as Continue).0: u128);
        _26 = _34;
        StorageDead(_34);
        StorageLive(_35);
        _36 = Eq(const _, const 0_u128);
        assert(!move _36, "attempt to divide `{}` by zero", const _) -> [success: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb105;
    }

    bb16: {
        _35 = Div(const _, const _);
        _25 = <u128 as SafeMath>::safe_mul(move _26, move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_25);
        _37 = discriminant(_24);
        switchInt(move _37) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        StorageLive(_41);
        _41 = ((_24 as Continue).0: u128);
        _23 = _41;
        StorageDead(_41);
        StorageDead(_27);
        StorageDead(_24);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _3;
        _47 = <u32 as Cast>::cast::<u128>(move _48) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_38);
        _38 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_40);
        StorageDead(_38);
        goto -> bb105;
    }

    bb22: {
        StorageDead(_48);
        _46 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _47) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_47);
        _49 = discriminant(_46);
        switchInt(move _49) -> [0: bb24, 1: bb25, otherwise: bb13];
    }

    bb24: {
        StorageLive(_53);
        _53 = ((_46 as Continue).0: u128);
        _45 = _53;
        StorageDead(_53);
        StorageLive(_54);
        _55 = Eq(const _, const 0_u128);
        assert(!move _55, "attempt to divide `{}` by zero", const _) -> [success: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_50);
        _50 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_45);
        StorageDead(_44);
        goto -> bb103;
    }

    bb27: {
        _54 = Div(const _, const _);
        _44 = <u128 as SafeMath>::safe_mul(move _45, move _54) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_54);
        StorageDead(_45);
        _43 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _44) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_44);
        _56 = discriminant(_43);
        switchInt(move _56) -> [0: bb30, 1: bb31, otherwise: bb13];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_43 as Continue).0: u128);
        _42 = _60;
        StorageDead(_60);
        StorageDead(_46);
        StorageDead(_43);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _23;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _42;
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _4;
        _81 = <u32 as Cast>::cast::<u128>(move _82) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_57);
        _57 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_59);
        StorageDead(_57);
        goto -> bb103;
    }

    bb33: {
        StorageDead(_82);
        _80 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb35, 1: bb36, otherwise: bb13];
    }

    bb35: {
        StorageLive(_87);
        _87 = ((_80 as Continue).0: u128);
        _79 = _87;
        StorageDead(_87);
        _77 = <u128 as SafeMath>::safe_mul(move _78, move _79) -> [return: bb38, unwind continue];
    }

    bb36: {
        StorageLive(_84);
        _84 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb101;
    }

    bb38: {
        StorageDead(_79);
        StorageDead(_78);
        _76 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _77) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_77);
        _88 = discriminant(_76);
        switchInt(move _88) -> [0: bb40, 1: bb41, otherwise: bb13];
    }

    bb40: {
        StorageLive(_92);
        _92 = ((_76 as Continue).0: u128);
        _75 = _92;
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _6;
        _95 = <u32 as Cast>::cast::<u128>(move _96) -> [return: bb43, unwind continue];
    }

    bb41: {
        StorageLive(_89);
        _89 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_91);
        StorageDead(_89);
        goto -> bb101;
    }

    bb43: {
        StorageDead(_96);
        _94 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _95) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb45, 1: bb46, otherwise: bb13];
    }

    bb45: {
        StorageLive(_101);
        _101 = ((_94 as Continue).0: u128);
        _93 = _101;
        StorageDead(_101);
        _74 = <u128 as SafeMath>::safe_div(move _75, move _93) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_98);
        _98 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb99;
    }

    bb48: {
        StorageDead(_93);
        StorageDead(_75);
        _73 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_74);
        _102 = discriminant(_73);
        switchInt(move _102) -> [0: bb50, 1: bb51, otherwise: bb13];
    }

    bb50: {
        StorageLive(_106);
        _106 = ((_73 as Continue).0: u128);
        _72 = _106;
        StorageDead(_106);
        _70 = core::num::<impl u128>::saturating_sub(move _71, move _72) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_103);
        _103 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_105);
        StorageDead(_103);
        goto -> bb99;
    }

    bb53: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = _1;
        _118 = <u128 as SafeMath>::safe_mul(move _119, const _) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_119);
        _117 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _118) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_118);
        _120 = discriminant(_117);
        switchInt(move _120) -> [0: bb56, 1: bb57, otherwise: bb13];
    }

    bb56: {
        StorageLive(_124);
        _124 = ((_117 as Continue).0: u128);
        _116 = _124;
        StorageDead(_124);
        StorageLive(_125);
        _125 = _21;
        _115 = <u128 as SafeMath>::safe_mul(move _116, move _125) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_121);
        _121 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb96;
    }

    bb59: {
        StorageDead(_125);
        StorageDead(_116);
        _114 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _115) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_115);
        _126 = discriminant(_114);
        switchInt(move _126) -> [0: bb61, 1: bb62, otherwise: bb13];
    }

    bb61: {
        StorageLive(_130);
        _130 = ((_114 as Continue).0: u128);
        _113 = _130;
        StorageDead(_130);
        StorageLive(_131);
        _131 = _2;
        _112 = <u128 as SafeMath>::safe_div(move _113, move _131) -> [return: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_127);
        _127 = ((_114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_129);
        StorageDead(_127);
        goto -> bb96;
    }

    bb64: {
        StorageDead(_131);
        StorageDead(_113);
        _111 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _112) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_112);
        _132 = discriminant(_111);
        switchInt(move _132) -> [0: bb66, 1: bb67, otherwise: bb13];
    }

    bb66: {
        StorageLive(_136);
        _136 = ((_111 as Continue).0: u128);
        _110 = _136;
        StorageDead(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = _8;
        _139 = <i64 as Cast>::cast::<u128>(move _140) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_133);
        _133 = ((_111 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_135);
        StorageDead(_133);
        goto -> bb97;
    }

    bb69: {
        StorageDead(_140);
        _138 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _139) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_139);
        _141 = discriminant(_138);
        switchInt(move _141) -> [0: bb71, 1: bb72, otherwise: bb13];
    }

    bb71: {
        StorageLive(_145);
        _145 = ((_138 as Continue).0: u128);
        _137 = _145;
        StorageDead(_145);
        _109 = <u128 as SafeMath>::safe_div(move _110, move _137) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_142);
        _142 = ((_138 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_137);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb93;
    }

    bb74: {
        StorageDead(_137);
        StorageDead(_110);
        _108 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _109) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_109);
        _146 = discriminant(_108);
        switchInt(move _146) -> [0: bb76, 1: bb77, otherwise: bb13];
    }

    bb76: {
        StorageLive(_150);
        _150 = ((_108 as Continue).0: u128);
        _107 = _150;
        StorageDead(_150);
        _69 = core::num::<impl u128>::saturating_sub(move _70, move _107) -> [return: bb79, unwind continue];
    }

    bb77: {
        StorageLive(_147);
        _147 = ((_108 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_149);
        _149 = _147;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _149) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_149);
        StorageDead(_147);
        goto -> bb93;
    }

    bb79: {
        StorageDead(_107);
        StorageDead(_70);
        _68 = <u128 as SafeMath>::safe_mul(move _69, const _) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_69);
        _67 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _68) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_68);
        _151 = discriminant(_67);
        switchInt(move _151) -> [0: bb82, 1: bb83, otherwise: bb13];
    }

    bb82: {
        StorageLive(_155);
        _155 = ((_67 as Continue).0: u128);
        _66 = _155;
        StorageDead(_155);
        StorageLive(_156);
        _156 = _23;
        _65 = <u128 as SafeMath>::safe_div(move _66, move _156) -> [return: bb85, unwind continue];
    }

    bb83: {
        StorageLive(_152);
        _152 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_154);
        StorageDead(_152);
        goto -> bb94;
    }

    bb85: {
        StorageDead(_156);
        StorageDead(_66);
        _64 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _65) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_65);
        _157 = discriminant(_64);
        switchInt(move _157) -> [0: bb87, 1: bb88, otherwise: bb13];
    }

    bb87: {
        StorageLive(_161);
        _161 = ((_64 as Continue).0: u128);
        _63 = _161;
        StorageDead(_161);
        _62 = <u128 as Cast>::cast::<u32>(move _63) -> [return: bb90, unwind continue];
    }

    bb88: {
        StorageLive(_158);
        _158 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_160);
        _160 = _158;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _160) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_160);
        StorageDead(_158);
        goto -> bb95;
    }

    bb90: {
        StorageDead(_63);
        _61 = std::result::Result::<u32, error::ErrorCode>::unwrap_or(move _62, const _) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_62);
        StorageDead(_138);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_94);
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_64);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _9;
        StorageLive(_164);
        _164 = _61;
        _162 = <u32 as Ord>::min(move _163, move _164) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_164);
        StorageDead(_163);
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _162);
        StorageDead(_162);
        StorageDead(_61);
        StorageDead(_42);
        StorageDead(_23);
        StorageDead(_21);
        goto -> bb107;
    }

    bb93: {
        StorageDead(_107);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_138);
        goto -> bb98;
    }

    bb96: {
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_108);
        goto -> bb100;
    }

    bb99: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_94);
        goto -> bb102;
    }

    bb101: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_80);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_61);
        goto -> bb104;
    }

    bb103: {
        StorageDead(_46);
        StorageDead(_43);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_42);
        goto -> bb106;
    }

    bb105: {
        StorageDead(_27);
        StorageDead(_24);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_23);
        StorageDead(_21);
        goto -> bb107;
    }

    bb107: {
        return;
    }
}
