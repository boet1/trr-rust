// MIR for `update_amm_and_check_validity` before PreCodegen

fn update_amm_and_check_validity(_1: &mut PerpMarket, _2: &MMOraclePriceData, _3: &state::state::State, _4: i64, _5: u64, _6: Option<DriftAction>) -> std::result::Result<(), error::ErrorCode> {
    debug market => _1;
    debug mm_oracle_price_data => _2;
    debug state => _3;
    debug now => _4;
    debug clock_slot => _5;
    debug action => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: i128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _9: std::result::Result<i128, error::ErrorCode>;
    let mut _10: &mut state::perp_market::PerpMarket;
    let mut _11: &state::oracle::MMOraclePriceData;
    let mut _12: &state::state::State;
    let mut _13: i64;
    let mut _14: u64;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: i128;
    let _20: i64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::oracle::OracleValidity>;
    let mut _23: std::result::Result<math::oracle::OracleValidity, error::ErrorCode>;
    let mut _24: state::user::MarketType;
    let mut _25: u16;
    let mut _26: i64;
    let mut _27: &state::oracle::OraclePriceData;
    let _28: &state::oracle::OraclePriceData;
    let _29: state::oracle::OraclePriceData;
    let mut _30: &state::oracle::MMOraclePriceData;
    let mut _31: &state::state::ValidityGuardRails;
    let _32: &state::state::ValidityGuardRails;
    let mut _33: u64;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _35: std::result::Result<u64, error::ErrorCode>;
    let mut _36: state::perp_market::PerpMarket;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: &state::oracle::OracleSource;
    let _43: &state::oracle::OracleSource;
    let mut _44: math::oracle::LogMode;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _52: std::result::Result<(), error::ErrorCode>;
    let mut _53: bool;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _55: std::result::Result<bool, error::ErrorCode>;
    let mut _56: math::oracle::OracleValidity;
    let mut _57: std::option::Option<math::oracle::DriftAction>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: ();
    let _65: ();
    let mut _66: &str;
    let _67: &str;
    let mut _68: &std::string::String;
    let _69: &std::string::String;
    let _70: std::string::String;
    let mut _72: std::fmt::Arguments<'_>;
    let mut _73: &[&str];
    let mut _74: &[&str; 2];
    let _75: &[&str; 2];
    let _76: [&str; 2];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let mut _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: &[core::fmt::rt::Argument<'_>; 1];
    let _80: [core::fmt::rt::Argument<'_>; 1];
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &error::ErrorCode;
    let _83: &error::ErrorCode;
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: &std::string::String;
    let _88: &std::string::String;
    let _89: std::string::String;
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let mut _93: &[&str; 4];
    let _94: &[&str; 4];
    let _95: [&str; 4];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let mut _97: &[core::fmt::rt::Argument<'_>; 4];
    let _98: &[core::fmt::rt::Argument<'_>; 4];
    let _99: [core::fmt::rt::Argument<'_>; 4];
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: &state::oracle::OraclePriceData;
    let _102: &state::oracle::OraclePriceData;
    let _103: state::oracle::OraclePriceData;
    let mut _104: &state::oracle::MMOraclePriceData;
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &i64;
    let _107: &i64;
    let mut _108: core::fmt::rt::Argument<'_>;
    let mut _109: &u16;
    let _110: &u16;
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &std::option::Option<math::oracle::DriftAction>;
    let _113: &std::option::Option<math::oracle::DriftAction>;
    let mut _114: error::ErrorCode;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: ();
    scope 1 {
        debug residual => _16;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _19;
        scope 4 {
        }
    }
    scope 5 {
        debug risk_ema_price => _20;
        let _21: math::oracle::OracleValidity;
        let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _41: u64;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: math::oracle::OracleValidity;
        scope 6 {
            debug oracle_validity => _21;
            let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _62: bool;
            let _64: error::ErrorCode;
            let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _119: ();
            scope 15 {
                debug residual => _59;
                scope 16 {
                }
            }
            scope 17 {
                debug val => _62;
                scope 18 {
                }
            }
            scope 19 {
                debug error_code => _64;
                let _71: std::string::String;
                let _90: std::string::String;
                let mut _121: &[&str; 4];
                let mut _122: &[&str; 2];
                scope 20 {
                    debug res => _71;
                }
                scope 21 {
                    debug res => _90;
                }
            }
            scope 22 {
                debug residual => _116;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _119;
                scope 25 {
                }
            }
        }
        scope 7 {
            debug residual => _38;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _41;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _46;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _49;
            scope 14 {
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut (*_1);
        StorageLive(_11);
        _11 = &(*_2);
        StorageLive(_12);
        _12 = &(*_3);
        StorageLive(_13);
        _13 = _4;
        StorageLive(_14);
        _14 = _5;
        _9 = _update_amm(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _15 = discriminant(_8);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = ((_8 as Continue).0: i128);
        _7 = _19;
        StorageDead(_19);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_20);
        _20 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = state::user::MarketType::Perp;
        StorageLive(_25);
        _25 = ((*_1).21: u16);
        StorageLive(_26);
        _26 = _20;
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(*_2);
        _29 = MMOraclePriceData::get_safe_oracle_price_data(move _30) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb49;
    }

    bb7: {
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(((*_3).7: state::state::OracleGuardRails).1: state::state::ValidityGuardRails);
        _31 = &(*_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = (*_1);
        _35 = PerpMarket::get_max_confidence_interval_multiplier(move _36) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_36);
        _34 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _35) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_41);
        _41 = ((_34 as Continue).0: u64);
        _33 = _41;
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &(((*_1).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _42 = &(*_43);
        StorageLive(_44);
        _44 = LogMode::SafeMMOracle;
        _23 = oracle_validity(move _24, move _25, move _26, move _27, move _31, move _33, move _42, move _44, const 0_i8) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_38);
        _38 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb47;
    }

    bb13: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<OracleValidity, error::ErrorCode> as Try>::branch(move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_23);
        _45 = discriminant(_22);
        switchInt(move _45) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_49);
        _49 = ((_22 as Continue).0: math::oracle::OracleValidity);
        _21 = _49;
        StorageDead(_49);
        StorageDead(_43);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_22);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _21;
        StorageLive(_57);
        _57 = _6;
        _55 = is_oracle_valid_for_action(move _56, move _57) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_46);
        _46 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_43);
        goto -> bb47;
    }

    bb18: {
        StorageDead(_57);
        StorageDead(_56);
        _54 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _55) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_55);
        _58 = discriminant(_54);
        switchInt(move _58) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_62);
        _62 = ((_54 as Continue).0: bool);
        _53 = _62;
        StorageDead(_62);
        switchInt(move _53) -> [0: bb24, otherwise: bb23];
    }

    bb21: {
        StorageLive(_59);
        _59 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb46;
    }

    bb23: {
        StorageDead(_54);
        StorageLive(_63);
        _63 = ();
        _52 = std::result::Result::<(), error::ErrorCode>::Ok(move _63);
        StorageDead(_63);
        goto -> bb41;
    }

    bb24: {
        StorageDead(_54);
        StorageLive(_64);
        _64 = error::ErrorCode::InvalidOracle;
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _122 = const _;
        _75 = &(*_122);
        _74 = &(*_75);
        _73 = move _74 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_74);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_64;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _82) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_82);
        _80 = [move _81];
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = move _78 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_78);
        _72 = Arguments::<'_>::new_v1(move _73, move _77) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_77);
        StorageDead(_73);
        _71 = format(move _72) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_75);
        _70 = move _71;
        StorageDead(_71);
        _69 = &_70;
        _68 = &(*_69);
        _67 = <String as Deref>::deref(move _68) -> [return: bb28, unwind: bb51];
    }

    bb28: {
        _66 = &(*_67);
        StorageDead(_68);
        _65 = solana_program::log::sol_log(move _66) -> [return: bb29, unwind: bb51];
    }

    bb29: {
        StorageDead(_66);
        drop(_70) -> [return: bb30, unwind: bb52];
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_67);
        StorageDead(_65);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _121 = const _;
        _94 = &(*_121);
        _93 = &(*_94);
        _92 = move _93 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &(*_2);
        _103 = MMOraclePriceData::get_safe_oracle_price_data(move _104) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        _100 = core::fmt::rt::Argument::<'_>::new_debug::<OraclePriceData>(move _101) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_101);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_20;
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _106) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_106);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &((*_1).21: u16);
        _109 = &(*_110);
        _108 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _109) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_6;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_debug::<Option<DriftAction>>(move _112) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_112);
        _99 = [move _100, move _105, move _108, move _111];
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = move _97 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_97);
        _91 = Arguments::<'_>::new_v1(move _92, move _96) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_96);
        StorageDead(_92);
        _90 = format(move _91) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_91);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        _89 = move _90;
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = <String as Deref>::deref(move _87) -> [return: bb38, unwind: bb50];
    }

    bb38: {
        _85 = &(*_86);
        StorageDead(_87);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb39, unwind: bb50];
    }

    bb39: {
        StorageDead(_85);
        drop(_89) -> [return: bb40, unwind: bb52];
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_114);
        _114 = _64;
        _52 = std::result::Result::<(), error::ErrorCode>::Err(move _114);
        StorageDead(_114);
        StorageDead(_64);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_53);
        _51 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _52) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_52);
        _115 = discriminant(_51);
        switchInt(move _115) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_119);
        _119 = ((_51 as Continue).0: ());
        _50 = _119;
        StorageDead(_119);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_120);
        _120 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _120);
        StorageDead(_120);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb49;
    }

    bb44: {
        StorageLive(_116);
        _116 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_118);
        StorageDead(_116);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb48;
    }

    bb47: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_22);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb49;
    }

    bb49: {
        return;
    }

    bb50 (cleanup): {
        drop(_89) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb51 (cleanup): {
        drop(_70) -> [return: bb52, unwind terminate(cleanup)];
    }

    bb52 (cleanup): {
        resume;
    }
}
