// MIR for `phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:186:1: 186:46>::new` before PreCodegen

fn phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:186:1: 186:46>::new(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>, _2: &state::state::State, _3: &SpotMarket, _4: &SpotMarket) -> std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> {
    debug account_info_iter => _1;
    debug state => _2;
    debug base_market => _3;
    debug quote_market => _4;
    let mut _0: std::result::Result<state::fulfillment_params::phoenix::PhoenixFulfillmentParams<'_, '_>, error::ErrorCode>;
    let _5: std::vec::Vec<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _6: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _10: &[&anchor_lang::prelude::AccountInfo<'_>];
    let mut _11: &std::vec::Vec<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _12: std::ops::Range<usize>;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: (usize, bool);
    let mut _17: &[&anchor_lang::prelude::AccountInfo<'_>];
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>>;
    let mut _30: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, error::ErrorCode>;
    let mut _31: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _32: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _33: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:200:73: 200:76};
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>>;
    let mut _41: std::result::Result<std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, error::ErrorCode>;
    let mut _42: std::result::Result<std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>;
    let mut _43: &anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _44: {closure@programs/drift/src/macros.rs:70:40: 70:43};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _50: ();
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _52: std::result::Result<(), error::ErrorCode>;
    let mut _53: bool;
    let mut _54: &&anchor_lang::prelude::Pubkey;
    let _55: &anchor_lang::prelude::Pubkey;
    let _56: &state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _57: &std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _58: &&anchor_lang::prelude::Pubkey;
    let mut _59: ();
    let _61: ();
    let mut _62: &str;
    let _63: &str;
    let mut _64: &std::string::String;
    let _65: &std::string::String;
    let _66: std::string::String;
    let mut _68: std::fmt::Arguments<'_>;
    let mut _69: &[&str];
    let mut _70: &[&str; 2];
    let _71: &[&str; 2];
    let _72: [&str; 2];
    let mut _73: &[core::fmt::rt::Argument<'_>];
    let mut _74: &[core::fmt::rt::Argument<'_>; 1];
    let _75: &[core::fmt::rt::Argument<'_>; 1];
    let _76: [core::fmt::rt::Argument<'_>; 1];
    let mut _77: core::fmt::rt::Argument<'_>;
    let mut _78: &error::ErrorCode;
    let _79: &error::ErrorCode;
    let mut _80: error::ErrorCode;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _88: std::result::Result<(), error::ErrorCode>;
    let mut _89: bool;
    let mut _90: &&anchor_lang::prelude::Pubkey;
    let mut _91: &&anchor_lang::prelude::Pubkey;
    let _92: &anchor_lang::prelude::Pubkey;
    let _93: anchor_lang::prelude::Pubkey;
    let mut _94: ();
    let _96: ();
    let mut _97: &str;
    let _98: &str;
    let mut _99: &std::string::String;
    let _100: &std::string::String;
    let _101: std::string::String;
    let mut _103: std::fmt::Arguments<'_>;
    let mut _104: &[&str];
    let mut _105: &[&str; 2];
    let _106: &[&str; 2];
    let _107: [&str; 2];
    let mut _108: &[core::fmt::rt::Argument<'_>];
    let mut _109: &[core::fmt::rt::Argument<'_>; 1];
    let _110: &[core::fmt::rt::Argument<'_>; 1];
    let _111: [core::fmt::rt::Argument<'_>; 1];
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &error::ErrorCode;
    let _114: &error::ErrorCode;
    let mut _115: error::ErrorCode;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _121: ();
    let mut _122: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _123: std::result::Result<(), error::ErrorCode>;
    let mut _124: bool;
    let mut _125: &state::spot_market::SpotFulfillmentConfigStatus;
    let _126: &state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _127: &std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _128: &state::spot_market::SpotFulfillmentConfigStatus;
    let _129: state::spot_market::SpotFulfillmentConfigStatus;
    let mut _130: ();
    let _132: ();
    let mut _133: &str;
    let _134: &str;
    let mut _135: &std::string::String;
    let _136: &std::string::String;
    let _137: std::string::String;
    let mut _139: std::fmt::Arguments<'_>;
    let mut _140: &[&str];
    let mut _141: &[&str; 2];
    let _142: &[&str; 2];
    let _143: [&str; 2];
    let mut _144: &[core::fmt::rt::Argument<'_>];
    let mut _145: &[core::fmt::rt::Argument<'_>; 1];
    let _146: &[core::fmt::rt::Argument<'_>; 1];
    let _147: [core::fmt::rt::Argument<'_>; 1];
    let mut _148: core::fmt::rt::Argument<'_>;
    let mut _149: &error::ErrorCode;
    let _150: &error::ErrorCode;
    let mut _151: error::ErrorCode;
    let mut _152: isize;
    let mut _154: !;
    let mut _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _157: ();
    let mut _158: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _159: std::result::Result<(), error::ErrorCode>;
    let mut _160: bool;
    let mut _161: &&anchor_lang::prelude::Pubkey;
    let _162: &anchor_lang::prelude::Pubkey;
    let mut _163: &&anchor_lang::prelude::Pubkey;
    let mut _164: ();
    let _166: ();
    let mut _167: &str;
    let _168: &str;
    let mut _169: &std::string::String;
    let _170: &std::string::String;
    let _171: std::string::String;
    let mut _173: std::fmt::Arguments<'_>;
    let mut _174: &[&str];
    let mut _175: &[&str; 2];
    let _176: &[&str; 2];
    let _177: [&str; 2];
    let mut _178: &[core::fmt::rt::Argument<'_>];
    let mut _179: &[core::fmt::rt::Argument<'_>; 1];
    let _180: &[core::fmt::rt::Argument<'_>; 1];
    let _181: [core::fmt::rt::Argument<'_>; 1];
    let mut _182: core::fmt::rt::Argument<'_>;
    let mut _183: &error::ErrorCode;
    let _184: &error::ErrorCode;
    let mut _185: error::ErrorCode;
    let mut _186: isize;
    let mut _188: !;
    let mut _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _191: ();
    let mut _192: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _193: std::result::Result<(), error::ErrorCode>;
    let mut _194: bool;
    let mut _195: u16;
    let mut _196: &state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _197: &std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _198: u16;
    let mut _199: ();
    let _201: ();
    let mut _202: &str;
    let _203: &str;
    let mut _204: &std::string::String;
    let _205: &std::string::String;
    let _206: std::string::String;
    let mut _208: std::fmt::Arguments<'_>;
    let mut _209: &[&str];
    let mut _210: &[&str; 2];
    let _211: &[&str; 2];
    let _212: [&str; 2];
    let mut _213: &[core::fmt::rt::Argument<'_>];
    let mut _214: &[core::fmt::rt::Argument<'_>; 1];
    let _215: &[core::fmt::rt::Argument<'_>; 1];
    let _216: [core::fmt::rt::Argument<'_>; 1];
    let mut _217: core::fmt::rt::Argument<'_>;
    let mut _218: &error::ErrorCode;
    let _219: &error::ErrorCode;
    let _220: ();
    let mut _221: &str;
    let _222: &str;
    let mut _223: &std::string::String;
    let _224: &std::string::String;
    let _225: std::string::String;
    let mut _227: std::fmt::Arguments<'_>;
    let mut _228: &[&str];
    let mut _229: &[&str; 2];
    let _230: &[&str; 2];
    let _231: [&str; 2];
    let mut _232: &[core::fmt::rt::Argument<'_>];
    let mut _233: &[core::fmt::rt::Argument<'_>; 2];
    let _234: &[core::fmt::rt::Argument<'_>; 2];
    let _235: [core::fmt::rt::Argument<'_>; 2];
    let mut _236: core::fmt::rt::Argument<'_>;
    let mut _237: &u16;
    let _238: &u16;
    let _239: &state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _240: &std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _241: core::fmt::rt::Argument<'_>;
    let mut _242: &u16;
    let _243: &u16;
    let mut _244: error::ErrorCode;
    let mut _245: isize;
    let mut _247: !;
    let mut _248: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _250: ();
    let mut _251: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _252: std::result::Result<(), error::ErrorCode>;
    let mut _253: bool;
    let mut _254: &&anchor_lang::prelude::Pubkey;
    let _255: &anchor_lang::prelude::Pubkey;
    let mut _256: &&anchor_lang::prelude::Pubkey;
    let mut _257: ();
    let _259: ();
    let mut _260: &str;
    let _261: &str;
    let mut _262: &std::string::String;
    let _263: &std::string::String;
    let _264: std::string::String;
    let mut _266: std::fmt::Arguments<'_>;
    let mut _267: &[&str];
    let mut _268: &[&str; 2];
    let _269: &[&str; 2];
    let _270: [&str; 2];
    let mut _271: &[core::fmt::rt::Argument<'_>];
    let mut _272: &[core::fmt::rt::Argument<'_>; 1];
    let _273: &[core::fmt::rt::Argument<'_>; 1];
    let _274: [core::fmt::rt::Argument<'_>; 1];
    let mut _275: core::fmt::rt::Argument<'_>;
    let mut _276: &error::ErrorCode;
    let _277: &error::ErrorCode;
    let mut _278: error::ErrorCode;
    let mut _279: isize;
    let mut _281: !;
    let mut _282: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _284: ();
    let mut _285: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _286: std::result::Result<(), error::ErrorCode>;
    let mut _287: bool;
    let mut _288: &&anchor_lang::prelude::Pubkey;
    let _289: &anchor_lang::prelude::Pubkey;
    let mut _290: &&anchor_lang::prelude::Pubkey;
    let mut _291: ();
    let _293: ();
    let mut _294: &str;
    let _295: &str;
    let mut _296: &std::string::String;
    let _297: &std::string::String;
    let _298: std::string::String;
    let mut _300: std::fmt::Arguments<'_>;
    let mut _301: &[&str];
    let mut _302: &[&str; 2];
    let _303: &[&str; 2];
    let _304: [&str; 2];
    let mut _305: &[core::fmt::rt::Argument<'_>];
    let mut _306: &[core::fmt::rt::Argument<'_>; 1];
    let _307: &[core::fmt::rt::Argument<'_>; 1];
    let _308: [core::fmt::rt::Argument<'_>; 1];
    let mut _309: core::fmt::rt::Argument<'_>;
    let mut _310: &error::ErrorCode;
    let _311: &error::ErrorCode;
    let mut _312: error::ErrorCode;
    let mut _313: isize;
    let mut _315: !;
    let mut _316: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _319: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>>;
    let mut _320: std::result::Result<state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>, error::ErrorCode>;
    let mut _321: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _322: isize;
    let mut _324: !;
    let mut _325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _327: ();
    let mut _328: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _329: std::result::Result<(), error::ErrorCode>;
    let mut _330: bool;
    let mut _331: &&anchor_lang::prelude::Pubkey;
    let _332: &anchor_lang::prelude::Pubkey;
    let _333: &state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _334: &std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _335: &&anchor_lang::prelude::Pubkey;
    let mut _336: ();
    let _338: ();
    let mut _339: &str;
    let _340: &str;
    let mut _341: &std::string::String;
    let _342: &std::string::String;
    let _343: std::string::String;
    let mut _345: std::fmt::Arguments<'_>;
    let mut _346: &[&str];
    let mut _347: &[&str; 2];
    let _348: &[&str; 2];
    let _349: [&str; 2];
    let mut _350: &[core::fmt::rt::Argument<'_>];
    let mut _351: &[core::fmt::rt::Argument<'_>; 1];
    let _352: &[core::fmt::rt::Argument<'_>; 1];
    let _353: [core::fmt::rt::Argument<'_>; 1];
    let mut _354: core::fmt::rt::Argument<'_>;
    let mut _355: &error::ErrorCode;
    let _356: &error::ErrorCode;
    let _357: ();
    let mut _358: &str;
    let _359: &str;
    let mut _360: error::ErrorCode;
    let mut _361: isize;
    let mut _363: !;
    let mut _364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _366: ();
    let mut _367: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _368: std::result::Result<(), error::ErrorCode>;
    let mut _369: bool;
    let mut _370: &&anchor_lang::prelude::Pubkey;
    let _371: &anchor_lang::prelude::Pubkey;
    let _372: &state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _373: &std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _374: &&anchor_lang::prelude::Pubkey;
    let mut _375: ();
    let _377: ();
    let mut _378: &str;
    let _379: &str;
    let mut _380: &std::string::String;
    let _381: &std::string::String;
    let _382: std::string::String;
    let mut _384: std::fmt::Arguments<'_>;
    let mut _385: &[&str];
    let mut _386: &[&str; 2];
    let _387: &[&str; 2];
    let _388: [&str; 2];
    let mut _389: &[core::fmt::rt::Argument<'_>];
    let mut _390: &[core::fmt::rt::Argument<'_>; 1];
    let _391: &[core::fmt::rt::Argument<'_>; 1];
    let _392: [core::fmt::rt::Argument<'_>; 1];
    let mut _393: core::fmt::rt::Argument<'_>;
    let mut _394: &error::ErrorCode;
    let _395: &error::ErrorCode;
    let _396: ();
    let mut _397: &str;
    let _398: &str;
    let mut _399: error::ErrorCode;
    let mut _400: isize;
    let mut _402: !;
    let mut _403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _405: ();
    let mut _406: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _407: std::result::Result<(), error::ErrorCode>;
    let mut _408: bool;
    let mut _409: &&anchor_lang::prelude::Pubkey;
    let _410: &anchor_lang::prelude::Pubkey;
    let _411: &state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig;
    let mut _412: &std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
    let mut _413: &&anchor_lang::prelude::Pubkey;
    let mut _414: ();
    let _416: ();
    let mut _417: &str;
    let _418: &str;
    let mut _419: &std::string::String;
    let _420: &std::string::String;
    let _421: std::string::String;
    let mut _423: std::fmt::Arguments<'_>;
    let mut _424: &[&str];
    let mut _425: &[&str; 2];
    let _426: &[&str; 2];
    let _427: [&str; 2];
    let mut _428: &[core::fmt::rt::Argument<'_>];
    let mut _429: &[core::fmt::rt::Argument<'_>; 1];
    let _430: &[core::fmt::rt::Argument<'_>; 1];
    let _431: [core::fmt::rt::Argument<'_>; 1];
    let mut _432: core::fmt::rt::Argument<'_>;
    let mut _433: &error::ErrorCode;
    let _434: &error::ErrorCode;
    let mut _435: error::ErrorCode;
    let mut _436: isize;
    let mut _438: !;
    let mut _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _442: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _443: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _444: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let mut _445: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>;
    let mut _446: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _447: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:264:67: 264:70};
    let mut _448: isize;
    let mut _450: !;
    let mut _451: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _454: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _455: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _456: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode>;
    let mut _457: std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>;
    let mut _458: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _459: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:269:68: 269:71};
    let mut _460: isize;
    let mut _462: !;
    let mut _463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _466: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::Program<'_, anchor_spl::token::Token>>;
    let mut _467: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, error::ErrorCode>;
    let mut _468: std::result::Result<anchor_lang::prelude::Program<'_, anchor_spl::token::Token>, anchor_lang::error::Error>;
    let mut _469: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _470: {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:274:87: 274:90};
    let mut _471: isize;
    let mut _473: !;
    let mut _474: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _476: state::fulfillment_params::phoenix::PhoenixFulfillmentParams<'_, '_>;
    let mut _477: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _478: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _479: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _480: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _481: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _482: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _483: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _484: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _485: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _486: u8;
    let mut _499: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _500: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _501: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _502: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _503: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _504: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _505: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _506: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _507: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _508: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _509: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _510: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _511: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _512: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _513: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _514: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _515: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    scope 1 {
        debug account_info_vec => _5;
        let _7: &[&anchor_lang::prelude::AccountInfo<'_>; 10];
        let _8: usize;
        scope 2 {
            debug account_infos => _7;
            let _18: &&anchor_lang::prelude::AccountInfo<'_>;
            let _19: &&anchor_lang::prelude::AccountInfo<'_>;
            let _20: &&anchor_lang::prelude::AccountInfo<'_>;
            let _21: &&anchor_lang::prelude::AccountInfo<'_>;
            let _22: &&anchor_lang::prelude::AccountInfo<'_>;
            let _23: &&anchor_lang::prelude::AccountInfo<'_>;
            let _24: &&anchor_lang::prelude::AccountInfo<'_>;
            let _25: &&anchor_lang::prelude::AccountInfo<'_>;
            let _26: &&anchor_lang::prelude::AccountInfo<'_>;
            let _27: &&anchor_lang::prelude::AccountInfo<'_>;
            scope 7 {
                debug phoenix_fulfillment_config => _18;
                debug phoenix_program => _19;
                debug phoenix_log_authority => _20;
                debug phoenix_market => _21;
                debug drift_signer => _22;
                debug phoenix_base_vault => _23;
                debug phoenix_quote_vault => _24;
                debug base_market_vault => _25;
                debug quote_market_vault => _26;
                debug token_program => _27;
                let _28: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
                let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _38: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
                scope 8 {
                    debug phoenix_fulfillment_config_loader => _28;
                    let _39: std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
                    let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _49: std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>;
                    scope 13 {
                        debug phoenix_fulfillment_config => _39;
                        let _60: error::ErrorCode;
                        let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _85: ();
                        let _95: error::ErrorCode;
                        let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _120: ();
                        let _131: error::ErrorCode;
                        let _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _156: ();
                        let _165: error::ErrorCode;
                        let _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _190: ();
                        let _200: error::ErrorCode;
                        let _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _249: ();
                        let _258: error::ErrorCode;
                        let _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _283: ();
                        let _292: error::ErrorCode;
                        let _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _317: ();
                        let _318: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
                        let _323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _326: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
                        let mut _496: &state::spot_market::SpotFulfillmentConfigStatus;
                        scope 18 {
                            debug error_code => _60;
                            let _67: std::string::String;
                            let mut _498: &[&str; 2];
                            scope 19 {
                                debug res => _67;
                            }
                        }
                        scope 20 {
                            debug residual => _82;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug val => _85;
                            scope 23 {
                            }
                        }
                        scope 24 {
                            debug error_code => _95;
                            let _102: std::string::String;
                            let mut _497: &[&str; 2];
                            scope 25 {
                                debug res => _102;
                            }
                        }
                        scope 26 {
                            debug residual => _117;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _120;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug error_code => _131;
                            let _138: std::string::String;
                            let mut _495: &[&str; 2];
                            scope 31 {
                                debug res => _138;
                            }
                        }
                        scope 32 {
                            debug residual => _153;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug val => _156;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug error_code => _165;
                            let _172: std::string::String;
                            let mut _494: &[&str; 2];
                            scope 37 {
                                debug res => _172;
                            }
                        }
                        scope 38 {
                            debug residual => _187;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _190;
                            scope 41 {
                            }
                        }
                        scope 42 {
                            debug error_code => _200;
                            let _207: std::string::String;
                            let _226: std::string::String;
                            let mut _492: &[&str; 2];
                            let mut _493: &[&str; 2];
                            scope 43 {
                                debug res => _207;
                            }
                            scope 44 {
                                debug res => _226;
                            }
                        }
                        scope 45 {
                            debug residual => _246;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug val => _249;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug error_code => _258;
                            let _265: std::string::String;
                            let mut _491: &[&str; 2];
                            scope 50 {
                                debug res => _265;
                            }
                        }
                        scope 51 {
                            debug residual => _280;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug val => _283;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug error_code => _292;
                            let _299: std::string::String;
                            let mut _490: &[&str; 2];
                            scope 56 {
                                debug res => _299;
                            }
                        }
                        scope 57 {
                            debug residual => _314;
                            scope 58 {
                            }
                        }
                        scope 59 {
                            debug val => _317;
                            scope 60 {
                            }
                        }
                        scope 61 {
                            debug phoenix_market_context => _318;
                            let _337: error::ErrorCode;
                            let _362: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _365: ();
                            let _376: error::ErrorCode;
                            let _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _404: ();
                            let _415: error::ErrorCode;
                            let _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _440: ();
                            let _441: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
                            let _449: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _452: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
                            scope 66 {
                                debug error_code => _337;
                                let _344: std::string::String;
                                let mut _489: &[&str; 2];
                                scope 67 {
                                    debug res => _344;
                                }
                            }
                            scope 68 {
                                debug residual => _362;
                                scope 69 {
                                }
                            }
                            scope 70 {
                                debug val => _365;
                                scope 71 {
                                }
                            }
                            scope 72 {
                                debug error_code => _376;
                                let _383: std::string::String;
                                let mut _488: &[&str; 2];
                                scope 73 {
                                    debug res => _383;
                                }
                            }
                            scope 74 {
                                debug residual => _401;
                                scope 75 {
                                }
                            }
                            scope 76 {
                                debug val => _404;
                                scope 77 {
                                }
                            }
                            scope 78 {
                                debug error_code => _415;
                                let _422: std::string::String;
                                let mut _487: &[&str; 2];
                                scope 79 {
                                    debug res => _422;
                                }
                            }
                            scope 80 {
                                debug residual => _437;
                                scope 81 {
                                }
                            }
                            scope 82 {
                                debug val => _440;
                                scope 83 {
                                }
                            }
                            scope 84 {
                                debug base_market_vault => _441;
                                let _453: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
                                let _461: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _464: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
                                scope 89 {
                                    debug quote_market_vault => _453;
                                    let _465: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                    let _472: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _475: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
                                    scope 94 {
                                        debug token_program => _465;
                                    }
                                    scope 95 {
                                        debug residual => _472;
                                        scope 96 {
                                        }
                                    }
                                    scope 97 {
                                        debug val => _475;
                                        scope 98 {
                                        }
                                    }
                                }
                                scope 90 {
                                    debug residual => _461;
                                    scope 91 {
                                    }
                                }
                                scope 92 {
                                    debug val => _464;
                                    scope 93 {
                                    }
                                }
                            }
                            scope 85 {
                                debug residual => _449;
                                scope 86 {
                                }
                            }
                            scope 87 {
                                debug val => _452;
                                scope 88 {
                                }
                            }
                        }
                        scope 62 {
                            debug residual => _323;
                            scope 63 {
                            }
                        }
                        scope 64 {
                            debug val => _326;
                            scope 65 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _46;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _49;
                        scope 17 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _35;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _38;
                    scope 12 {
                    }
                }
            }
        }
        scope 3 {
            debug offset => _8;
            let _9: &[&anchor_lang::prelude::AccountInfo<'_>];
            scope 4 {
                debug slice => _9;
                scope 5 {
                    scope 6 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = &mut (*_1);
        _5 = <&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Iterator>::collect::<Vec<&anchor_lang::prelude::AccountInfo<'_>>>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = const 0_usize;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &_5;
        StorageLive(_12);
        StorageLive(_13);
        _13 = _8;
        StorageLive(_14);
        StorageLive(_15);
        _15 = _8;
        _16 = CheckedAdd(_15, const 10_usize);
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", move _15, const 10_usize) -> [success: bb2, unwind: bb223];
    }

    bb2: {
        _14 = move (_16.0: usize);
        StorageDead(_15);
        _12 = std::ops::Range::<usize> { start: move _13, end: move _14 };
        StorageDead(_14);
        StorageDead(_13);
        _10 = <Vec<&anchor_lang::prelude::AccountInfo<'_>> as Index<std::ops::Range<usize>>>::index(move _11, move _12) -> [return: bb3, unwind: bb223];
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = &(*_10);
        StorageLive(_17);
        _17 = &(*_9);
        _7 = PhoenixFulfillmentParams::<'a, 'b>::new::as_array::<&anchor_lang::prelude::AccountInfo<'_>>(move _17) -> [return: bb4, unwind: bb223];
    }

    bb4: {
        StorageDead(_17);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_18);
        _18 = &(*_7)[0 of 10];
        StorageLive(_19);
        _19 = &(*_7)[1 of 10];
        StorageLive(_20);
        _20 = &(*_7)[2 of 10];
        StorageLive(_21);
        _21 = &(*_7)[3 of 10];
        StorageLive(_22);
        _22 = &(*_7)[4 of 10];
        StorageLive(_23);
        _23 = &(*_7)[5 of 10];
        StorageLive(_24);
        _24 = &(*_7)[6 of 10];
        StorageLive(_25);
        _25 = &(*_7)[7 of 10];
        StorageLive(_26);
        _26 = &(*_7)[8 of 10];
        StorageLive(_27);
        _27 = &(*_7)[9 of 10];
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _499 = deref_copy (*_18);
        _32 = &(*_499);
        _31 = anchor_lang::prelude::AccountLoader::<'_, PhoenixV1FulfillmentConfig>::try_from(move _32) -> [return: bb5, unwind: bb223];
    }

    bb5: {
        StorageDead(_32);
        StorageLive(_33);
        _33 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:200:73: 200:76};
        _30 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:200:73: 200:76}>(move _31, move _33) -> [return: bb6, unwind: bb223];
    }

    bb6: {
        StorageDead(_33);
        StorageDead(_31);
        _29 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PhoenixV1FulfillmentConfig>, error::ErrorCode> as Try>::branch(move _30) -> [return: bb7, unwind: bb223];
    }

    bb7: {
        StorageDead(_30);
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_38);
        _38 = move ((_29 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>);
        _28 = move _38;
        StorageDead(_38);
        StorageDead(_29);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_28;
        _42 = anchor_lang::prelude::AccountLoader::<'_, PhoenixV1FulfillmentConfig>::load(move _43) -> [return: bb12, unwind: bb223];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_35);
        _35 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb11, unwind: bb223];
    }

    bb11: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_29);
        goto -> bb206;
    }

    bb12: {
        StorageDead(_43);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/macros.rs:70:40: 70:43};
        _41 = std::result::Result::<Ref<'_, PhoenixV1FulfillmentConfig>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:70:40: 70:43}>(move _42, move _44) -> [return: bb13, unwind: bb223];
    }

    bb13: {
        StorageDead(_44);
        StorageDead(_42);
        _40 = <std::result::Result<Ref<'_, PhoenixV1FulfillmentConfig>, error::ErrorCode> as Try>::branch(move _41) -> [return: bb14, unwind: bb223];
    }

    bb14: {
        StorageDead(_41);
        _45 = discriminant(_40);
        switchInt(move _45) -> [0: bb15, 1: bb16, otherwise: bb9];
    }

    bb15: {
        StorageLive(_49);
        _49 = move ((_40 as Continue).0: std::cell::Ref<'_, state::fulfillment_params::phoenix::PhoenixV1FulfillmentConfig>);
        _39 = move _49;
        StorageDead(_49);
        _518 = discriminant(_40);
        StorageDead(_40);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_39;
        _56 = <Ref<'_, PhoenixV1FulfillmentConfig> as Deref>::deref(move _57) -> [return: bb18, unwind: bb222];
    }

    bb16: {
        StorageLive(_46);
        _46 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb17, unwind: bb225];
    }

    bb17: {
        StorageDead(_48);
        StorageDead(_46);
        _516 = discriminant(_40);
        StorageDead(_40);
        goto -> bb205;
    }

    bb18: {
        StorageDead(_57);
        _55 = &((*_56).1: anchor_lang::prelude::Pubkey);
        _54 = &_55;
        StorageLive(_58);
        _500 = deref_copy (*_19);
        _58 = &((*_500).0: &anchor_lang::prelude::Pubkey);
        _53 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _54, move _58) -> [return: bb19, unwind: bb222];
    }

    bb19: {
        switchInt(move _53) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = ();
        _52 = std::result::Result::<(), error::ErrorCode>::Ok(move _59);
        StorageDead(_59);
        goto -> bb28;
    }

    bb21: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_60);
        _60 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _498 = const _;
        _71 = &(*_498);
        _70 = &(*_71);
        _69 = move _70 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_70);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_60;
        _78 = &(*_79);
        _77 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _78) -> [return: bb22, unwind: bb222];
    }

    bb22: {
        StorageDead(_78);
        _76 = [move _77];
        StorageDead(_77);
        _75 = &_76;
        _74 = &(*_75);
        _73 = move _74 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_74);
        _68 = Arguments::<'_>::new_v1(move _69, move _73) -> [return: bb23, unwind: bb222];
    }

    bb23: {
        StorageDead(_73);
        StorageDead(_69);
        _67 = format(move _68) -> [return: bb24, unwind: bb222];
    }

    bb24: {
        StorageDead(_68);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_71);
        _66 = move _67;
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = <String as Deref>::deref(move _64) -> [return: bb25, unwind: bb221];
    }

    bb25: {
        _62 = &(*_63);
        StorageDead(_64);
        _61 = solana_program::log::sol_log(move _62) -> [return: bb26, unwind: bb221];
    }

    bb26: {
        StorageDead(_62);
        drop(_66) -> [return: bb27, unwind: bb222];
    }

    bb27: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_61);
        StorageLive(_80);
        _80 = _60;
        _52 = std::result::Result::<(), error::ErrorCode>::Err(move _80);
        StorageDead(_80);
        StorageDead(_60);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_53);
        _51 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _52) -> [return: bb29, unwind: bb222];
    }

    bb29: {
        StorageDead(_52);
        _81 = discriminant(_51);
        switchInt(move _81) -> [0: bb30, 1: bb31, otherwise: bb9];
    }

    bb30: {
        StorageLive(_85);
        _85 = ((_51 as Continue).0: ());
        _50 = _85;
        StorageDead(_85);
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _501 = deref_copy (*_20);
        _90 = &((*_501).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = phoenix::phoenix_log_authority::id() -> [return: bb33, unwind: bb222];
    }

    bb31: {
        StorageLive(_82);
        _82 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb32, unwind: bb222];
    }

    bb32: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb204;
    }

    bb33: {
        _92 = &_93;
        _91 = &_92;
        _89 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _90, move _91) -> [return: bb34, unwind: bb222];
    }

    bb34: {
        switchInt(move _89) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_94);
        _94 = ();
        _88 = std::result::Result::<(), error::ErrorCode>::Ok(move _94);
        StorageDead(_94);
        goto -> bb43;
    }

    bb36: {
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_95);
        _95 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _497 = const _;
        _106 = &(*_497);
        _105 = &(*_106);
        _104 = move _105 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_105);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &_95;
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _113) -> [return: bb37, unwind: bb222];
    }

    bb37: {
        StorageDead(_113);
        _111 = [move _112];
        StorageDead(_112);
        _110 = &_111;
        _109 = &(*_110);
        _108 = move _109 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_109);
        _103 = Arguments::<'_>::new_v1(move _104, move _108) -> [return: bb38, unwind: bb222];
    }

    bb38: {
        StorageDead(_108);
        StorageDead(_104);
        _102 = format(move _103) -> [return: bb39, unwind: bb222];
    }

    bb39: {
        StorageDead(_103);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_106);
        _101 = move _102;
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = <String as Deref>::deref(move _99) -> [return: bb40, unwind: bb220];
    }

    bb40: {
        _97 = &(*_98);
        StorageDead(_99);
        _96 = solana_program::log::sol_log(move _97) -> [return: bb41, unwind: bb220];
    }

    bb41: {
        StorageDead(_97);
        drop(_101) -> [return: bb42, unwind: bb222];
    }

    bb42: {
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_96);
        StorageLive(_115);
        _115 = _95;
        _88 = std::result::Result::<(), error::ErrorCode>::Err(move _115);
        StorageDead(_115);
        StorageDead(_95);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_89);
        _87 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _88) -> [return: bb44, unwind: bb222];
    }

    bb44: {
        StorageDead(_88);
        _116 = discriminant(_87);
        switchInt(move _116) -> [0: bb45, 1: bb46, otherwise: bb9];
    }

    bb45: {
        StorageLive(_120);
        _120 = ((_87 as Continue).0: ());
        _86 = _120;
        StorageDead(_120);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = &_39;
        _126 = <Ref<'_, PhoenixV1FulfillmentConfig> as Deref>::deref(move _127) -> [return: bb48, unwind: bb222];
    }

    bb46: {
        StorageLive(_117);
        _117 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb47, unwind: bb222];
    }

    bb47: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb204;
    }

    bb48: {
        StorageDead(_127);
        _125 = &((*_126).8: state::spot_market::SpotFulfillmentConfigStatus);
        StorageLive(_128);
        _496 = const _;
        _128 = &(*_496);
        _124 = <state::spot_market::SpotFulfillmentConfigStatus as PartialEq>::eq(move _125, move _128) -> [return: bb49, unwind: bb222];
    }

    bb49: {
        switchInt(move _124) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_130);
        _130 = ();
        _123 = std::result::Result::<(), error::ErrorCode>::Ok(move _130);
        StorageDead(_130);
        goto -> bb58;
    }

    bb51: {
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_125);
        StorageLive(_131);
        _131 = error::ErrorCode::SpotFulfillmentConfigDisabled;
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _495 = const _;
        _142 = &(*_495);
        _141 = &(*_142);
        _140 = move _141 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_141);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_131;
        _149 = &(*_150);
        _148 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _149) -> [return: bb52, unwind: bb222];
    }

    bb52: {
        StorageDead(_149);
        _147 = [move _148];
        StorageDead(_148);
        _146 = &_147;
        _145 = &(*_146);
        _144 = move _145 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_145);
        _139 = Arguments::<'_>::new_v1(move _140, move _144) -> [return: bb53, unwind: bb222];
    }

    bb53: {
        StorageDead(_144);
        StorageDead(_140);
        _138 = format(move _139) -> [return: bb54, unwind: bb222];
    }

    bb54: {
        StorageDead(_139);
        StorageDead(_150);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_142);
        _137 = move _138;
        StorageDead(_138);
        _136 = &_137;
        _135 = &(*_136);
        _134 = <String as Deref>::deref(move _135) -> [return: bb55, unwind: bb219];
    }

    bb55: {
        _133 = &(*_134);
        StorageDead(_135);
        _132 = solana_program::log::sol_log(move _133) -> [return: bb56, unwind: bb219];
    }

    bb56: {
        StorageDead(_133);
        drop(_137) -> [return: bb57, unwind: bb222];
    }

    bb57: {
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_151);
        _151 = _131;
        _123 = std::result::Result::<(), error::ErrorCode>::Err(move _151);
        StorageDead(_151);
        StorageDead(_131);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_124);
        _122 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _123) -> [return: bb59, unwind: bb222];
    }

    bb59: {
        StorageDead(_123);
        _152 = discriminant(_122);
        switchInt(move _152) -> [0: bb60, 1: bb61, otherwise: bb9];
    }

    bb60: {
        StorageLive(_156);
        _156 = ((_122 as Continue).0: ());
        _121 = _156;
        StorageDead(_156);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &((*_2).3: anchor_lang::prelude::Pubkey);
        _161 = &_162;
        StorageLive(_163);
        _502 = deref_copy (*_22);
        _163 = &((*_502).0: &anchor_lang::prelude::Pubkey);
        _160 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _161, move _163) -> [return: bb63, unwind: bb222];
    }

    bb61: {
        StorageLive(_153);
        _153 = ((_122 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_155);
        _155 = _153;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _155) -> [return: bb62, unwind: bb222];
    }

    bb62: {
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb204;
    }

    bb63: {
        switchInt(move _160) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_164);
        _164 = ();
        _159 = std::result::Result::<(), error::ErrorCode>::Ok(move _164);
        StorageDead(_164);
        goto -> bb72;
    }

    bb65: {
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageLive(_165);
        _165 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _494 = const _;
        _176 = &(*_494);
        _175 = &(*_176);
        _174 = move _175 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_175);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &_165;
        _183 = &(*_184);
        _182 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _183) -> [return: bb66, unwind: bb222];
    }

    bb66: {
        StorageDead(_183);
        _181 = [move _182];
        StorageDead(_182);
        _180 = &_181;
        _179 = &(*_180);
        _178 = move _179 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_179);
        _173 = Arguments::<'_>::new_v1(move _174, move _178) -> [return: bb67, unwind: bb222];
    }

    bb67: {
        StorageDead(_178);
        StorageDead(_174);
        _172 = format(move _173) -> [return: bb68, unwind: bb222];
    }

    bb68: {
        StorageDead(_173);
        StorageDead(_184);
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_176);
        _171 = move _172;
        StorageDead(_172);
        _170 = &_171;
        _169 = &(*_170);
        _168 = <String as Deref>::deref(move _169) -> [return: bb69, unwind: bb218];
    }

    bb69: {
        _167 = &(*_168);
        StorageDead(_169);
        _166 = solana_program::log::sol_log(move _167) -> [return: bb70, unwind: bb218];
    }

    bb70: {
        StorageDead(_167);
        drop(_171) -> [return: bb71, unwind: bb222];
    }

    bb71: {
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageLive(_185);
        _185 = _165;
        _159 = std::result::Result::<(), error::ErrorCode>::Err(move _185);
        StorageDead(_185);
        StorageDead(_165);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_160);
        _158 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _159) -> [return: bb73, unwind: bb222];
    }

    bb73: {
        StorageDead(_159);
        _186 = discriminant(_158);
        switchInt(move _186) -> [0: bb74, 1: bb75, otherwise: bb9];
    }

    bb74: {
        StorageLive(_190);
        _190 = ((_158 as Continue).0: ());
        _157 = _190;
        StorageDead(_190);
        StorageDead(_158);
        StorageDead(_157);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &_39;
        _196 = <Ref<'_, PhoenixV1FulfillmentConfig> as Deref>::deref(move _197) -> [return: bb77, unwind: bb222];
    }

    bb75: {
        StorageLive(_187);
        _187 = ((_158 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_189);
        _189 = _187;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _189) -> [return: bb76, unwind: bb222];
    }

    bb76: {
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb204;
    }

    bb77: {
        StorageDead(_197);
        _195 = ((*_196).6: u16);
        StorageLive(_198);
        _198 = ((*_3).42: u16);
        _194 = Eq(move _195, move _198);
        switchInt(move _194) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_199);
        _199 = ();
        _193 = std::result::Result::<(), error::ErrorCode>::Ok(move _199);
        StorageDead(_199);
        goto -> bb94;
    }

    bb79: {
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_200);
        _200 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _493 = const _;
        _211 = &(*_493);
        _210 = &(*_211);
        _209 = move _210 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_210);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &_200;
        _218 = &(*_219);
        _217 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _218) -> [return: bb80, unwind: bb222];
    }

    bb80: {
        StorageDead(_218);
        _216 = [move _217];
        StorageDead(_217);
        _215 = &_216;
        _214 = &(*_215);
        _213 = move _214 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_214);
        _208 = Arguments::<'_>::new_v1(move _209, move _213) -> [return: bb81, unwind: bb222];
    }

    bb81: {
        StorageDead(_213);
        StorageDead(_209);
        _207 = format(move _208) -> [return: bb82, unwind: bb222];
    }

    bb82: {
        StorageDead(_208);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_211);
        _206 = move _207;
        StorageDead(_207);
        _205 = &_206;
        _204 = &(*_205);
        _203 = <String as Deref>::deref(move _204) -> [return: bb83, unwind: bb217];
    }

    bb83: {
        _202 = &(*_203);
        StorageDead(_204);
        _201 = solana_program::log::sol_log(move _202) -> [return: bb84, unwind: bb217];
    }

    bb84: {
        StorageDead(_202);
        drop(_206) -> [return: bb85, unwind: bb222];
    }

    bb85: {
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_201);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _492 = const _;
        _230 = &(*_492);
        _229 = &(*_230);
        _228 = move _229 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_229);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_39;
        _239 = <Ref<'_, PhoenixV1FulfillmentConfig> as Deref>::deref(move _240) -> [return: bb86, unwind: bb222];
    }

    bb86: {
        StorageDead(_240);
        _238 = &((*_239).6: u16);
        _237 = &(*_238);
        _236 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _237) -> [return: bb87, unwind: bb222];
    }

    bb87: {
        StorageDead(_237);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = &((*_3).42: u16);
        _242 = &(*_243);
        _241 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _242) -> [return: bb88, unwind: bb222];
    }

    bb88: {
        StorageDead(_242);
        _235 = [move _236, move _241];
        StorageDead(_241);
        StorageDead(_236);
        _234 = &_235;
        _233 = &(*_234);
        _232 = move _233 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_233);
        _227 = Arguments::<'_>::new_v1(move _228, move _232) -> [return: bb89, unwind: bb222];
    }

    bb89: {
        StorageDead(_232);
        StorageDead(_228);
        _226 = format(move _227) -> [return: bb90, unwind: bb222];
    }

    bb90: {
        StorageDead(_227);
        StorageDead(_243);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_230);
        _225 = move _226;
        StorageDead(_226);
        _224 = &_225;
        _223 = &(*_224);
        _222 = <String as Deref>::deref(move _223) -> [return: bb91, unwind: bb216];
    }

    bb91: {
        _221 = &(*_222);
        StorageDead(_223);
        _220 = solana_program::log::sol_log(move _221) -> [return: bb92, unwind: bb216];
    }

    bb92: {
        StorageDead(_221);
        drop(_225) -> [return: bb93, unwind: bb222];
    }

    bb93: {
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_220);
        StorageLive(_244);
        _244 = _200;
        _193 = std::result::Result::<(), error::ErrorCode>::Err(move _244);
        StorageDead(_244);
        StorageDead(_200);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_194);
        _192 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _193) -> [return: bb95, unwind: bb222];
    }

    bb95: {
        StorageDead(_193);
        _245 = discriminant(_192);
        switchInt(move _245) -> [0: bb96, 1: bb97, otherwise: bb9];
    }

    bb96: {
        StorageLive(_249);
        _249 = ((_192 as Continue).0: ());
        _191 = _249;
        StorageDead(_249);
        StorageDead(_192);
        StorageDead(_191);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &((*_3).3: anchor_lang::prelude::Pubkey);
        _254 = &_255;
        StorageLive(_256);
        _503 = deref_copy (*_25);
        _256 = &((*_503).0: &anchor_lang::prelude::Pubkey);
        _253 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _254, move _256) -> [return: bb99, unwind: bb222];
    }

    bb97: {
        StorageLive(_246);
        _246 = ((_192 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_248);
        _248 = _246;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _248) -> [return: bb98, unwind: bb222];
    }

    bb98: {
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb204;
    }

    bb99: {
        switchInt(move _253) -> [0: bb101, otherwise: bb100];
    }

    bb100: {
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        StorageLive(_257);
        _257 = ();
        _252 = std::result::Result::<(), error::ErrorCode>::Ok(move _257);
        StorageDead(_257);
        goto -> bb108;
    }

    bb101: {
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        StorageLive(_258);
        _258 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _491 = const _;
        _269 = &(*_491);
        _268 = &(*_269);
        _267 = move _268 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_268);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = &_258;
        _276 = &(*_277);
        _275 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _276) -> [return: bb102, unwind: bb222];
    }

    bb102: {
        StorageDead(_276);
        _274 = [move _275];
        StorageDead(_275);
        _273 = &_274;
        _272 = &(*_273);
        _271 = move _272 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_272);
        _266 = Arguments::<'_>::new_v1(move _267, move _271) -> [return: bb103, unwind: bb222];
    }

    bb103: {
        StorageDead(_271);
        StorageDead(_267);
        _265 = format(move _266) -> [return: bb104, unwind: bb222];
    }

    bb104: {
        StorageDead(_266);
        StorageDead(_277);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_269);
        _264 = move _265;
        StorageDead(_265);
        _263 = &_264;
        _262 = &(*_263);
        _261 = <String as Deref>::deref(move _262) -> [return: bb105, unwind: bb215];
    }

    bb105: {
        _260 = &(*_261);
        StorageDead(_262);
        _259 = solana_program::log::sol_log(move _260) -> [return: bb106, unwind: bb215];
    }

    bb106: {
        StorageDead(_260);
        drop(_264) -> [return: bb107, unwind: bb222];
    }

    bb107: {
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_259);
        StorageLive(_278);
        _278 = _258;
        _252 = std::result::Result::<(), error::ErrorCode>::Err(move _278);
        StorageDead(_278);
        StorageDead(_258);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_253);
        _251 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _252) -> [return: bb109, unwind: bb222];
    }

    bb109: {
        StorageDead(_252);
        _279 = discriminant(_251);
        switchInt(move _279) -> [0: bb110, 1: bb111, otherwise: bb9];
    }

    bb110: {
        StorageLive(_283);
        _283 = ((_251 as Continue).0: ());
        _250 = _283;
        StorageDead(_283);
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &((*_4).3: anchor_lang::prelude::Pubkey);
        _288 = &_289;
        StorageLive(_290);
        _504 = deref_copy (*_26);
        _290 = &((*_504).0: &anchor_lang::prelude::Pubkey);
        _287 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _288, move _290) -> [return: bb113, unwind: bb222];
    }

    bb111: {
        StorageLive(_280);
        _280 = ((_251 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_282);
        _282 = _280;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _282) -> [return: bb112, unwind: bb222];
    }

    bb112: {
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb204;
    }

    bb113: {
        switchInt(move _287) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_291);
        _291 = ();
        _286 = std::result::Result::<(), error::ErrorCode>::Ok(move _291);
        StorageDead(_291);
        goto -> bb122;
    }

    bb115: {
        StorageDead(_290);
        StorageDead(_289);
        StorageDead(_288);
        StorageLive(_292);
        _292 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _490 = const _;
        _303 = &(*_490);
        _302 = &(*_303);
        _301 = move _302 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_302);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = &_292;
        _310 = &(*_311);
        _309 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _310) -> [return: bb116, unwind: bb222];
    }

    bb116: {
        StorageDead(_310);
        _308 = [move _309];
        StorageDead(_309);
        _307 = &_308;
        _306 = &(*_307);
        _305 = move _306 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_306);
        _300 = Arguments::<'_>::new_v1(move _301, move _305) -> [return: bb117, unwind: bb222];
    }

    bb117: {
        StorageDead(_305);
        StorageDead(_301);
        _299 = format(move _300) -> [return: bb118, unwind: bb222];
    }

    bb118: {
        StorageDead(_300);
        StorageDead(_311);
        StorageDead(_308);
        StorageDead(_307);
        StorageDead(_303);
        _298 = move _299;
        StorageDead(_299);
        _297 = &_298;
        _296 = &(*_297);
        _295 = <String as Deref>::deref(move _296) -> [return: bb119, unwind: bb214];
    }

    bb119: {
        _294 = &(*_295);
        StorageDead(_296);
        _293 = solana_program::log::sol_log(move _294) -> [return: bb120, unwind: bb214];
    }

    bb120: {
        StorageDead(_294);
        drop(_298) -> [return: bb121, unwind: bb222];
    }

    bb121: {
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_293);
        StorageLive(_312);
        _312 = _292;
        _286 = std::result::Result::<(), error::ErrorCode>::Err(move _312);
        StorageDead(_312);
        StorageDead(_292);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_287);
        _285 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _286) -> [return: bb123, unwind: bb222];
    }

    bb123: {
        StorageDead(_286);
        _313 = discriminant(_285);
        switchInt(move _313) -> [0: bb124, 1: bb125, otherwise: bb9];
    }

    bb124: {
        StorageLive(_317);
        _317 = ((_285 as Continue).0: ());
        _284 = _317;
        StorageDead(_317);
        StorageDead(_285);
        StorageDead(_284);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _505 = deref_copy (*_21);
        _321 = &(*_505);
        _320 = PhoenixMarketContext::<'_, '_>::new(move _321) -> [return: bb127, unwind: bb222];
    }

    bb125: {
        StorageLive(_314);
        _314 = ((_285 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_316);
        _316 = _314;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _316) -> [return: bb126, unwind: bb222];
    }

    bb126: {
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_285);
        StorageDead(_284);
        goto -> bb204;
    }

    bb127: {
        StorageDead(_321);
        _319 = <std::result::Result<PhoenixMarketContext<'_, '_>, error::ErrorCode> as Try>::branch(move _320) -> [return: bb128, unwind: bb222];
    }

    bb128: {
        StorageDead(_320);
        _322 = discriminant(_319);
        switchInt(move _322) -> [0: bb129, 1: bb130, otherwise: bb9];
    }

    bb129: {
        StorageLive(_326);
        _326 = move ((_319 as Continue).0: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>);
        _318 = move _326;
        StorageDead(_326);
        StorageDead(_319);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _334 = &_39;
        _333 = <Ref<'_, PhoenixV1FulfillmentConfig> as Deref>::deref(move _334) -> [return: bb132, unwind: bb222];
    }

    bb130: {
        StorageLive(_323);
        _323 = ((_319 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_325);
        _325 = _323;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _325) -> [return: bb131, unwind: bb222];
    }

    bb131: {
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_319);
        goto -> bb203;
    }

    bb132: {
        StorageDead(_334);
        _332 = &((*_333).4: anchor_lang::prelude::Pubkey);
        _331 = &_332;
        StorageLive(_335);
        _506 = deref_copy (*_23);
        _335 = &((*_506).0: &anchor_lang::prelude::Pubkey);
        _330 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _331, move _335) -> [return: bb133, unwind: bb222];
    }

    bb133: {
        switchInt(move _330) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        StorageDead(_335);
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_331);
        StorageLive(_336);
        _336 = ();
        _329 = std::result::Result::<(), error::ErrorCode>::Ok(move _336);
        StorageDead(_336);
        goto -> bb143;
    }

    bb135: {
        StorageDead(_335);
        StorageDead(_333);
        StorageDead(_332);
        StorageDead(_331);
        StorageLive(_337);
        _337 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _489 = const _;
        _348 = &(*_489);
        _347 = &(*_348);
        _346 = move _347 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_347);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        _356 = &_337;
        _355 = &(*_356);
        _354 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _355) -> [return: bb136, unwind: bb222];
    }

    bb136: {
        StorageDead(_355);
        _353 = [move _354];
        StorageDead(_354);
        _352 = &_353;
        _351 = &(*_352);
        _350 = move _351 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_351);
        _345 = Arguments::<'_>::new_v1(move _346, move _350) -> [return: bb137, unwind: bb222];
    }

    bb137: {
        StorageDead(_350);
        StorageDead(_346);
        _344 = format(move _345) -> [return: bb138, unwind: bb222];
    }

    bb138: {
        StorageDead(_345);
        StorageDead(_356);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_348);
        _343 = move _344;
        StorageDead(_344);
        _342 = &_343;
        _341 = &(*_342);
        _340 = <String as Deref>::deref(move _341) -> [return: bb139, unwind: bb213];
    }

    bb139: {
        _339 = &(*_340);
        StorageDead(_341);
        _338 = solana_program::log::sol_log(move _339) -> [return: bb140, unwind: bb213];
    }

    bb140: {
        StorageDead(_339);
        drop(_343) -> [return: bb141, unwind: bb222];
    }

    bb141: {
        StorageDead(_343);
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_338);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = const "Phoenix base vault key does not match market header";
        _358 = &(*_359);
        _357 = solana_program::log::sol_log(move _358) -> [return: bb142, unwind: bb222];
    }

    bb142: {
        StorageDead(_358);
        StorageDead(_359);
        StorageDead(_357);
        StorageLive(_360);
        _360 = _337;
        _329 = std::result::Result::<(), error::ErrorCode>::Err(move _360);
        StorageDead(_360);
        StorageDead(_337);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_330);
        _328 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _329) -> [return: bb144, unwind: bb222];
    }

    bb144: {
        StorageDead(_329);
        _361 = discriminant(_328);
        switchInt(move _361) -> [0: bb145, 1: bb146, otherwise: bb9];
    }

    bb145: {
        StorageLive(_365);
        _365 = ((_328 as Continue).0: ());
        _327 = _365;
        StorageDead(_365);
        StorageDead(_328);
        StorageDead(_327);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        _373 = &_39;
        _372 = <Ref<'_, PhoenixV1FulfillmentConfig> as Deref>::deref(move _373) -> [return: bb148, unwind: bb222];
    }

    bb146: {
        StorageLive(_362);
        _362 = ((_328 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_364);
        _364 = _362;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _364) -> [return: bb147, unwind: bb222];
    }

    bb147: {
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_328);
        StorageDead(_327);
        goto -> bb203;
    }

    bb148: {
        StorageDead(_373);
        _371 = &((*_372).5: anchor_lang::prelude::Pubkey);
        _370 = &_371;
        StorageLive(_374);
        _507 = deref_copy (*_24);
        _374 = &((*_507).0: &anchor_lang::prelude::Pubkey);
        _369 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _370, move _374) -> [return: bb149, unwind: bb222];
    }

    bb149: {
        switchInt(move _369) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_375);
        _375 = ();
        _368 = std::result::Result::<(), error::ErrorCode>::Ok(move _375);
        StorageDead(_375);
        goto -> bb159;
    }

    bb151: {
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_376);
        _376 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _488 = const _;
        _387 = &(*_488);
        _386 = &(*_387);
        _385 = move _386 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_386);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        _395 = &_376;
        _394 = &(*_395);
        _393 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _394) -> [return: bb152, unwind: bb222];
    }

    bb152: {
        StorageDead(_394);
        _392 = [move _393];
        StorageDead(_393);
        _391 = &_392;
        _390 = &(*_391);
        _389 = move _390 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_390);
        _384 = Arguments::<'_>::new_v1(move _385, move _389) -> [return: bb153, unwind: bb222];
    }

    bb153: {
        StorageDead(_389);
        StorageDead(_385);
        _383 = format(move _384) -> [return: bb154, unwind: bb222];
    }

    bb154: {
        StorageDead(_384);
        StorageDead(_395);
        StorageDead(_392);
        StorageDead(_391);
        StorageDead(_387);
        _382 = move _383;
        StorageDead(_383);
        _381 = &_382;
        _380 = &(*_381);
        _379 = <String as Deref>::deref(move _380) -> [return: bb155, unwind: bb212];
    }

    bb155: {
        _378 = &(*_379);
        StorageDead(_380);
        _377 = solana_program::log::sol_log(move _378) -> [return: bb156, unwind: bb212];
    }

    bb156: {
        StorageDead(_378);
        drop(_382) -> [return: bb157, unwind: bb222];
    }

    bb157: {
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_377);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        _398 = const "Phoenix quote vault key does not match market header";
        _397 = &(*_398);
        _396 = solana_program::log::sol_log(move _397) -> [return: bb158, unwind: bb222];
    }

    bb158: {
        StorageDead(_397);
        StorageDead(_398);
        StorageDead(_396);
        StorageLive(_399);
        _399 = _376;
        _368 = std::result::Result::<(), error::ErrorCode>::Err(move _399);
        StorageDead(_399);
        StorageDead(_376);
        goto -> bb159;
    }

    bb159: {
        StorageDead(_369);
        _367 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _368) -> [return: bb160, unwind: bb222];
    }

    bb160: {
        StorageDead(_368);
        _400 = discriminant(_367);
        switchInt(move _400) -> [0: bb161, 1: bb162, otherwise: bb9];
    }

    bb161: {
        StorageLive(_404);
        _404 = ((_367 as Continue).0: ());
        _366 = _404;
        StorageDead(_404);
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        _412 = &_39;
        _411 = <Ref<'_, PhoenixV1FulfillmentConfig> as Deref>::deref(move _412) -> [return: bb164, unwind: bb222];
    }

    bb162: {
        StorageLive(_401);
        _401 = ((_367 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_403);
        _403 = _401;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _403) -> [return: bb163, unwind: bb222];
    }

    bb163: {
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb203;
    }

    bb164: {
        StorageDead(_412);
        _410 = &((*_411).3: anchor_lang::prelude::Pubkey);
        _409 = &_410;
        StorageLive(_413);
        _508 = deref_copy (*_21);
        _413 = &((*_508).0: &anchor_lang::prelude::Pubkey);
        _408 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _409, move _413) -> [return: bb165, unwind: bb222];
    }

    bb165: {
        switchInt(move _408) -> [0: bb167, otherwise: bb166];
    }

    bb166: {
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_410);
        StorageDead(_409);
        StorageLive(_414);
        _414 = ();
        _407 = std::result::Result::<(), error::ErrorCode>::Ok(move _414);
        StorageDead(_414);
        goto -> bb174;
    }

    bb167: {
        StorageDead(_413);
        StorageDead(_411);
        StorageDead(_410);
        StorageDead(_409);
        StorageLive(_415);
        _415 = error::ErrorCode::InvalidFulfillmentConfig;
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _487 = const _;
        _426 = &(*_487);
        _425 = &(*_426);
        _424 = move _425 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_425);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &_415;
        _433 = &(*_434);
        _432 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _433) -> [return: bb168, unwind: bb222];
    }

    bb168: {
        StorageDead(_433);
        _431 = [move _432];
        StorageDead(_432);
        _430 = &_431;
        _429 = &(*_430);
        _428 = move _429 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_429);
        _423 = Arguments::<'_>::new_v1(move _424, move _428) -> [return: bb169, unwind: bb222];
    }

    bb169: {
        StorageDead(_428);
        StorageDead(_424);
        _422 = format(move _423) -> [return: bb170, unwind: bb222];
    }

    bb170: {
        StorageDead(_423);
        StorageDead(_434);
        StorageDead(_431);
        StorageDead(_430);
        StorageDead(_426);
        _421 = move _422;
        StorageDead(_422);
        _420 = &_421;
        _419 = &(*_420);
        _418 = <String as Deref>::deref(move _419) -> [return: bb171, unwind: bb211];
    }

    bb171: {
        _417 = &(*_418);
        StorageDead(_419);
        _416 = solana_program::log::sol_log(move _417) -> [return: bb172, unwind: bb211];
    }

    bb172: {
        StorageDead(_417);
        drop(_421) -> [return: bb173, unwind: bb222];
    }

    bb173: {
        StorageDead(_421);
        StorageDead(_420);
        StorageDead(_418);
        StorageDead(_416);
        StorageLive(_435);
        _435 = _415;
        _407 = std::result::Result::<(), error::ErrorCode>::Err(move _435);
        StorageDead(_435);
        StorageDead(_415);
        goto -> bb174;
    }

    bb174: {
        StorageDead(_408);
        _406 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _407) -> [return: bb175, unwind: bb222];
    }

    bb175: {
        StorageDead(_407);
        _436 = discriminant(_406);
        switchInt(move _436) -> [0: bb176, 1: bb177, otherwise: bb9];
    }

    bb176: {
        StorageLive(_440);
        _440 = ((_406 as Continue).0: ());
        _405 = _440;
        StorageDead(_440);
        StorageDead(_406);
        StorageDead(_405);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _509 = deref_copy (*_25);
        _446 = &(*_509);
        _445 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::try_from(move _446) -> [return: bb179, unwind: bb222];
    }

    bb177: {
        StorageLive(_437);
        _437 = ((_406 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_439);
        _439 = _437;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _439) -> [return: bb178, unwind: bb222];
    }

    bb178: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_406);
        StorageDead(_405);
        goto -> bb203;
    }

    bb179: {
        StorageDead(_446);
        StorageLive(_447);
        _447 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:264:67: 264:70};
        _444 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:264:67: 264:70}>(move _445, move _447) -> [return: bb180, unwind: bb222];
    }

    bb180: {
        StorageDead(_447);
        StorageDead(_445);
        _443 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as Try>::branch(move _444) -> [return: bb181, unwind: bb222];
    }

    bb181: {
        StorageDead(_444);
        _448 = discriminant(_443);
        switchInt(move _448) -> [0: bb182, 1: bb183, otherwise: bb9];
    }

    bb182: {
        StorageLive(_452);
        _452 = move ((_443 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _442 = move _452;
        StorageDead(_452);
        _441 = Box::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>::new(move _442) -> [return: bb185, unwind: bb222];
    }

    bb183: {
        StorageLive(_449);
        _449 = ((_443 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_451);
        _451 = _449;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _451) -> [return: bb184, unwind: bb222];
    }

    bb184: {
        StorageDead(_451);
        StorageDead(_449);
        StorageDead(_442);
        StorageDead(_443);
        goto -> bb202;
    }

    bb185: {
        StorageDead(_442);
        StorageDead(_443);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _510 = deref_copy (*_26);
        _458 = &(*_510);
        _457 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::try_from(move _458) -> [return: bb186, unwind: bb210];
    }

    bb186: {
        StorageDead(_458);
        StorageLive(_459);
        _459 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:269:68: 269:71};
        _456 = std::result::Result::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:269:68: 269:71}>(move _457, move _459) -> [return: bb187, unwind: bb210];
    }

    bb187: {
        StorageDead(_459);
        StorageDead(_457);
        _455 = <std::result::Result<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>, error::ErrorCode> as Try>::branch(move _456) -> [return: bb188, unwind: bb210];
    }

    bb188: {
        StorageDead(_456);
        _460 = discriminant(_455);
        switchInt(move _460) -> [0: bb189, 1: bb190, otherwise: bb9];
    }

    bb189: {
        StorageLive(_464);
        _464 = move ((_455 as Continue).0: anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _454 = move _464;
        StorageDead(_464);
        _453 = Box::<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>::new(move _454) -> [return: bb192, unwind: bb210];
    }

    bb190: {
        StorageLive(_461);
        _461 = ((_455 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_463);
        _463 = _461;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _463) -> [return: bb191, unwind: bb210];
    }

    bb191: {
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_454);
        StorageDead(_455);
        goto -> bb201;
    }

    bb192: {
        StorageDead(_454);
        StorageDead(_455);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        StorageLive(_469);
        _469 = (*_27);
        _468 = <anchor_lang::prelude::Program<'_, Token> as TryFrom<&anchor_lang::prelude::AccountInfo<'_>>>::try_from(move _469) -> [return: bb193, unwind: bb209];
    }

    bb193: {
        StorageDead(_469);
        StorageLive(_470);
        _470 = {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:274:87: 274:90};
        _467 = std::result::Result::<anchor_lang::prelude::Program<'_, Token>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/phoenix.rs:274:87: 274:90}>(move _468, move _470) -> [return: bb194, unwind: bb209];
    }

    bb194: {
        StorageDead(_470);
        StorageDead(_468);
        _466 = <std::result::Result<anchor_lang::prelude::Program<'_, Token>, error::ErrorCode> as Try>::branch(move _467) -> [return: bb195, unwind: bb209];
    }

    bb195: {
        StorageDead(_467);
        _471 = discriminant(_466);
        switchInt(move _471) -> [0: bb196, 1: bb197, otherwise: bb9];
    }

    bb196: {
        StorageLive(_475);
        _475 = move ((_466 as Continue).0: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _465 = move _475;
        StorageDead(_475);
        StorageDead(_466);
        StorageLive(_476);
        StorageLive(_477);
        _511 = deref_copy (*_22);
        _477 = &(*_511);
        StorageLive(_478);
        _512 = deref_copy (*_19);
        _478 = &(*_512);
        StorageLive(_479);
        _479 = move _318;
        StorageLive(_480);
        _513 = deref_copy (*_20);
        _480 = &(*_513);
        StorageLive(_481);
        _514 = deref_copy (*_23);
        _481 = &(*_514);
        StorageLive(_482);
        _515 = deref_copy (*_24);
        _482 = &(*_515);
        StorageLive(_483);
        _483 = move _465;
        StorageLive(_484);
        _484 = move _441;
        StorageLive(_485);
        _485 = move _453;
        StorageLive(_486);
        _486 = ((*_2).15: u8);
        _476 = PhoenixFulfillmentParams::<'_, '_> { phoenix_program: move _478, phoenix_log_authority: move _480, phoenix_market: move _479, drift_signer: move _477, phoenix_base_vault: move _481, phoenix_quote_vault: move _482, base_market_vault: move _484, quote_market_vault: move _485, token_program: move _483, signer_nonce: move _486 };
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_482);
        StorageDead(_481);
        StorageDead(_480);
        StorageDead(_479);
        StorageDead(_478);
        StorageDead(_477);
        _0 = std::result::Result::<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode>::Ok(move _476);
        StorageDead(_476);
        StorageDead(_465);
        StorageDead(_453);
        StorageDead(_441);
        StorageDead(_318);
        drop(_39) -> [return: bb199, unwind: bb223];
    }

    bb197: {
        StorageLive(_472);
        _472 = ((_466 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_474);
        _474 = _472;
        _0 = <std::result::Result<PhoenixFulfillmentParams<'_, '_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _474) -> [return: bb198, unwind: bb209];
    }

    bb198: {
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_466);
        StorageDead(_465);
        drop(_453) -> [return: bb201, unwind: bb210];
    }

    bb199: {
        StorageDead(_39);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_7);
        drop(_5) -> [return: bb200, unwind: bb224];
    }

    bb200: {
        StorageDead(_5);
        goto -> bb208;
    }

    bb201: {
        StorageDead(_453);
        drop(_441) -> [return: bb202, unwind: bb222];
    }

    bb202: {
        StorageDead(_441);
        goto -> bb203;
    }

    bb203: {
        StorageDead(_318);
        goto -> bb204;
    }

    bb204: {
        drop(_39) -> [return: bb205, unwind: bb223];
    }

    bb205: {
        StorageDead(_39);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_7);
        drop(_5) -> [return: bb207, unwind: bb224];
    }

    bb207: {
        StorageDead(_5);
        goto -> bb208;
    }

    bb208: {
        return;
    }

    bb209 (cleanup): {
        drop(_453) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        drop(_441) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        drop(_421) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_382) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        drop(_343) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        drop(_298) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        drop(_264) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        drop(_225) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        drop(_206) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        drop(_171) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        drop(_137) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_101) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_66) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_39) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        drop(_5) -> [return: bb224, unwind terminate(cleanup)];
    }

    bb224 (cleanup): {
        resume;
    }

    bb225 (cleanup): {
        _520 = discriminant(_40);
        goto -> bb223;
    }
}
