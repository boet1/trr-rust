// MIR for `receive` before PreCodegen

fn receive(_1: &anchor_lang::prelude::Interface<'_, TokenInterface>, _2: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, _3: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>, _4: &anchor_lang::prelude::AccountInfo<'_>, _5: u64, _6: &Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, _7: Option<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug token_program => _1;
    debug from => _2;
    debug to => _3;
    debug authority => _4;
    debug amount => _5;
    debug mint => _6;
    debug remaining_accounts => _7;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: isize;
    let mut _10: isize;
    let mut _12: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _13: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _14: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _15: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _16: u64;
    let mut _17: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let mut _18: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _19: &[&[&[u8]]];
    let mut _20: &[&[&[u8]]; 0];
    let _21: &[&[&[u8]]; 0];
    let _22: [&[&[u8]]; 0];
    let mut _24: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _27: std::result::Result<(), anchor_lang::error::Error>;
    let mut _28: &anchor_lang::prelude::AccountInfo<'_>;
    let _29: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: anchor_lang::prelude::AccountInfo<'_>;
    let mut _37: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _38: anchor_lang::prelude::AccountInfo<'_>;
    let mut _39: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _40: anchor_lang::prelude::AccountInfo<'_>;
    let mut _41: anchor_lang::prelude::AccountInfo<'_>;
    let mut _42: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _44: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _46: anchor_lang::prelude::AccountInfo<'_>;
    let mut _47: anchor_spl::token_2022::TransferChecked<'_>;
    let mut _48: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
    let mut _49: u64;
    let mut _50: u8;
    let mut _51: &anchor_spl::token_2022::spl_token_2022::state::Mint;
    let mut _52: &anchor_spl::token_interface::Mint;
    let _53: &anchor_spl::token_interface::Mint;
    let mut _54: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
    let _55: anchor_spl::token_2022::Transfer<'_>;
    let mut _56: anchor_lang::prelude::AccountInfo<'_>;
    let mut _57: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _58: anchor_lang::prelude::AccountInfo<'_>;
    let mut _59: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _60: anchor_lang::prelude::AccountInfo<'_>;
    let mut _61: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _63: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _65: anchor_lang::prelude::AccountInfo<'_>;
    let mut _66: anchor_spl::token_2022::Transfer<'_>;
    let mut _67: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::Transfer<'_>>;
    let mut _68: u64;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    let mut _78: isize;
    scope 1 {
        debug mint => _9;
        let _9: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>;
        let _23: anchor_lang::prelude::AccountInfo<'_>;
        scope 2 {
            debug remaining_account_metas => _11;
            let _11: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            let mut _69: &[&[&[u8]]; 0];
        }
        scope 3 {
            debug mint_account_info => _23;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: ();
            let _35: anchor_spl::token_2022::TransferChecked<'_>;
            scope 4 {
                debug residual => _31;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _34;
                scope 7 {
                }
            }
            scope 8 {
                debug cpi_accounts => _35;
                let _43: anchor_lang::prelude::AccountInfo<'_>;
                scope 9 {
                    debug cpi_program => _43;
                    let _45: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>;
                    scope 10 {
                        debug cpi_context => _45;
                    }
                }
            }
        }
    }
    scope 11 {
        debug cpi_accounts => _55;
        let _62: anchor_lang::prelude::AccountInfo<'_>;
        scope 12 {
            debug cpi_program => _62;
            let _64: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_spl::token_2022::Transfer<'_>>;
            scope 13 {
                debug cpi_context => _64;
                scope 14 {
                }
            }
        }
    }

    bb0: {
        _73 = const false;
        _72 = const false;
        _71 = const false;
        _70 = const false;
        _8 = discriminant((*_6));
        switchInt(move _8) -> [1: bb1, otherwise: bb21];
    }

    bb1: {
        StorageLive(_9);
        _9 = &(((*_6) as Some).0: anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>);
        _10 = discriminant(_7);
        switchInt(move _10) -> [1: bb2, otherwise: bb4];
    }

    bb2: {
        StorageLive(_11);
        _11 = move ((_7 as Some).0: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>);
        StorageLive(_12);
        _12 = &(*_1);
        StorageLive(_13);
        _13 = &(*_2);
        StorageLive(_14);
        _14 = &(*_3);
        StorageLive(_15);
        _15 = &(*_4);
        StorageLive(_16);
        _16 = _5;
        StorageLive(_17);
        _17 = &(*_9);
        StorageLive(_18);
        _18 = &mut (*_11);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _69 = const _;
        _21 = &(*_69);
        _20 = &(*_21);
        _19 = move _20 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_20);
        _0 = transfer_checked_with_transfer_hook(move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_21);
        StorageDead(_11);
        goto -> bb20;
    }

    bb4: {
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_9);
        _73 = const true;
        _23 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _24) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_23;
        _28 = &(*_29);
        _27 = validate_mint_fee(move _28) -> [return: bb6, unwind: bb44];
    }

    bb6: {
        StorageDead(_28);
        _26 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _27) -> [return: bb7, unwind: bb44];
    }

    bb7: {
        StorageDead(_27);
        _30 = discriminant(_26);
        switchInt(move _30) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_34);
        _34 = ((_26 as Continue).0: ());
        _25 = _34;
        StorageDead(_34);
        _74 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_2);
        _36 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _37) -> [return: bb12, unwind: bb44];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_31);
        _31 = move ((_26 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb11, unwind: bb42];
    }

    bb11: {
        StorageDead(_33);
        StorageDead(_31);
        _76 = discriminant(_26);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_25);
        drop(_23) -> [return: bb28, unwind: bb35];
    }

    bb12: {
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_3);
        _38 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _39) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        StorageDead(_39);
        StorageLive(_40);
        _73 = const false;
        _40 = move _23;
        StorageLive(_41);
        StorageLive(_42);
        _42 = &(*_4);
        _41 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _42) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        StorageDead(_42);
        _72 = const true;
        _35 = anchor_spl::token_2022::TransferChecked::<'_> { from: move _36, mint: move _40, to: move _38, authority: move _41 };
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_36);
        StorageLive(_43);
        StorageLive(_44);
        _44 = &(*_1);
        _43 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _44) -> [return: bb15, unwind: bb41];
    }

    bb15: {
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = move _43;
        StorageLive(_47);
        _72 = const false;
        _47 = move _35;
        _45 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::TransferChecked<'_>>::new(move _46, move _47) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_48);
        _71 = const true;
        _48 = move _45;
        StorageLive(_49);
        _49 = _5;
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_9);
        _53 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint> as Deref>::deref(move _54) -> [return: bb17, unwind: bb39];
    }

    bb17: {
        _52 = &(*_53);
        _51 = <anchor_spl::token_interface::Mint as Deref>::deref(move _52) -> [return: bb18, unwind: bb39];
    }

    bb18: {
        StorageDead(_54);
        StorageDead(_52);
        _50 = ((*_51).2: u8);
        _71 = const false;
        _0 = anchor_spl::token_2022::transfer_checked(move _48, move _49, move _50) -> [return: bb19, unwind: bb39];
    }

    bb19: {
        StorageDead(_50);
        StorageDead(_49);
        _71 = const false;
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_43);
        _72 = const false;
        StorageDead(_35);
        _73 = const false;
        StorageDead(_23);
        StorageDead(_53);
        StorageDead(_51);
        goto -> bb20;
    }

    bb20: {
        StorageDead(_9);
        goto -> bb29;
    }

    bb21: {
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &(*_2);
        _56 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _57) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &(*_3);
        _58 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _59) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        StorageDead(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_4);
        _60 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _61) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        StorageDead(_61);
        _70 = const true;
        _55 = anchor_spl::token_2022::Transfer::<'_> { from: move _56, to: move _58, authority: move _60 };
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_56);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &(*_1);
        _62 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _63) -> [return: bb25, unwind: bb37];
    }

    bb25: {
        StorageDead(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = move _62;
        StorageLive(_66);
        _70 = const false;
        _66 = move _55;
        _64 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_spl::token_2022::Transfer<'_>>::new(move _65, move _66) -> [return: bb26, unwind: bb37];
    }

    bb26: {
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_67);
        _67 = move _64;
        StorageLive(_68);
        _68 = _5;
        _0 = anchor_spl::token_2022::transfer(move _67, move _68) -> [return: bb27, unwind: bb37];
    }

    bb27: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_62);
        _70 = const false;
        StorageDead(_55);
        goto -> bb29;
    }

    bb28: {
        _73 = const false;
        StorageDead(_23);
        StorageDead(_9);
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_58) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_56) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_40) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        drop(_38) -> [return: bb34, unwind terminate(cleanup)];
    }

    bb34 (cleanup): {
        drop(_36) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        resume;
    }

    bb36 (cleanup): {
        drop(_55) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        switchInt(_70) -> [0: bb35, otherwise: bb36];
    }

    bb38 (cleanup): {
        drop(_48) -> [return: bb41, unwind terminate(cleanup)];
    }

    bb39 (cleanup): {
        switchInt(_71) -> [0: bb41, otherwise: bb38];
    }

    bb40 (cleanup): {
        drop(_35) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        switchInt(_72) -> [0: bb44, otherwise: bb40];
    }

    bb42 (cleanup): {
        _78 = discriminant(_26);
        goto -> bb44;
    }

    bb43 (cleanup): {
        drop(_23) -> [return: bb35, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        switchInt(_73) -> [0: bb35, otherwise: bb43];
    }
}
