digraph Mir_0_4420 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn UserStats::increment_total_referrer_reward(_1: &amp;ReErased mut state::user::UserStats, _2: u64, _3: i64) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let mut _4: u64;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: isize;<br align="left"/>let _10: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _11: !;<br align="left"/>let mut _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _13: u64;<br align="left"/>let mut _14: u64;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _16: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _17: u64;<br align="left"/>let mut _18: u64;<br align="left"/>let mut _19: isize;<br align="left"/>let _20: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _21: !;<br align="left"/>let mut _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _23: u64;<br align="left"/>let _24: ();<br align="left"/>let mut _25: bool;<br align="left"/>let mut _26: i64;<br align="left"/>let mut _27: i64;<br align="left"/>let _28: i64;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _30: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _31: i64;<br align="left"/>let mut _32: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _33: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _34: i64;<br align="left"/>let mut _35: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _36: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _37: i64;<br align="left"/>let mut _38: i64;<br align="left"/>let mut _39: isize;<br align="left"/>let _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _41: !;<br align="left"/>let mut _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _43: i64;<br align="left"/>let mut _44: isize;<br align="left"/>let _45: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _46: !;<br align="left"/>let mut _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _48: i64;<br align="left"/>let mut _49: isize;<br align="left"/>let _50: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _51: !;<br align="left"/>let mut _52: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _53: i64;<br align="left"/>let mut _54: i64;<br align="left"/>let mut _55: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _56: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _57: i64;<br align="left"/>let mut _58: i64;<br align="left"/>let mut _59: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _60: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _61: i64;<br align="left"/>let mut _62: isize;<br align="left"/>let _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _64: !;<br align="left"/>let mut _65: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _66: i64;<br align="left"/>let mut _67: isize;<br align="left"/>let _68: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _69: !;<br align="left"/>let mut _70: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _71: i64;<br align="left"/>let mut _72: ();<br align="left"/>debug self =&gt; _1;<br align="left"/>debug reward =&gt; _2;<br align="left"/>debug now =&gt; _3;<br align="left"/>debug residual =&gt; _10;<br align="left"/>debug val =&gt; _13;<br align="left"/>debug residual =&gt; _20;<br align="left"/>debug val =&gt; _23;<br align="left"/>debug n_epoch_durations =&gt; _28;<br align="left"/>debug residual =&gt; _40;<br align="left"/>debug val =&gt; _43;<br align="left"/>debug residual =&gt; _45;<br align="left"/>debug val =&gt; _48;<br align="left"/>debug residual =&gt; _50;<br align="left"/>debug val =&gt; _53;<br align="left"/>debug residual =&gt; _63;<br align="left"/>debug val =&gt; _66;<br align="left"/>debug residual =&gt; _68;<br align="left"/>debug val =&gt; _71;<br align="left"/>>;
    bb0__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = (((*_1).2: state::user::UserFees).4: u64)<br/>StorageLive(_8)<br/>_8 = _2<br/></td></tr><tr><td align="left">_6 = &lt;u64 as SafeMath&gt;::safe_add(move _7, move _8)</td></tr></table>>];
    bb1__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb2__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_9 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _9)</td></tr></table>>];
    bb3__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_5 as Continue).0: u64)<br/>_4 = _13<br/>StorageDead(_13)<br/>(((*_1).2: state::user::UserFees).4: u64) = move _4<br/>StorageDead(_4)<br/>StorageDead(_5)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = (((*_1).2: state::user::UserFees).5: u64)<br/>StorageLive(_18)<br/>_18 = _2<br/></td></tr><tr><td align="left">_16 = &lt;u64 as SafeMath&gt;::safe_add(move _17, move _18)</td></tr></table>>];
    bb4__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_10)<br/>_10 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_12)<br/>_12 = _10<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _12)</td></tr></table>>];
    bb6__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_10)<br/>StorageDead(_4)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb8__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_19 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb9__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_23)<br/>_23 = ((_15 as Continue).0: u64)<br/>_14 = _23<br/>StorageDead(_23)<br/>(((*_1).2: state::user::UserFees).5: u64) = move _14<br/>StorageDead(_14)<br/>StorageDead(_15)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _3<br/>StorageLive(_27)<br/>_27 = ((*_1).3: i64)<br/>_25 = Gt(move _26, move _27)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb10__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_22)<br/>_22 = _20<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _22)</td></tr></table>>];
    bb11__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/>StorageDead(_14)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = _3<br/>StorageLive(_38)<br/>_38 = ((*_1).3: i64)<br/></td></tr><tr><td align="left">_36 = &lt;i64 as SafeMath&gt;::safe_sub(move _37, move _38)</td></tr></table>>];
    bb13__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/>_24 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">_35 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _36)</td></tr></table>>];
    bb15__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_36)<br/>_39 = discriminant(_35)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb16__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_35 as Continue).0: i64)<br/>_34 = _43<br/>StorageDead(_43)<br/></td></tr><tr><td align="left">_33 = &lt;i64 as SafeMath&gt;::safe_div(move _34, const _)</td></tr></table>>];
    bb17__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_35 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_42)<br/>_42 = _40<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _42)</td></tr></table>>];
    bb18__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/></td></tr><tr><td align="left">_32 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _33)</td></tr></table>>];
    bb20__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>_44 = discriminant(_32)<br/></td></tr><tr><td align="left">switchInt(move _44)</td></tr></table>>];
    bb21__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_48)<br/>_48 = ((_32 as Continue).0: i64)<br/>_31 = _48<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">_30 = &lt;i64 as SafeMath&gt;::safe_add(move _31, const 1_i64)</td></tr></table>>];
    bb22__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_32 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_47)<br/>_47 = _45<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _47)</td></tr></table>>];
    bb23__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb25__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_49 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _49)</td></tr></table>>];
    bb26__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_29 as Continue).0: i64)<br/>_28 = _53<br/>StorageDead(_53)<br/>StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/>StorageLive(_54)<br/>StorageLive(_55)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = ((*_1).3: i64)<br/>StorageLive(_58)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>_61 = _28<br/></td></tr><tr><td align="left">_60 = &lt;i64 as SafeMath&gt;::safe_mul(const _, move _61)</td></tr></table>>];
    bb27__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_52)<br/>_52 = _50<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _52)</td></tr></table>>];
    bb28__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/></td></tr><tr><td align="left">_59 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _60)</td></tr></table>>];
    bb30__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/>_62 = discriminant(_59)<br/></td></tr><tr><td align="left">switchInt(move _62)</td></tr></table>>];
    bb31__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_66)<br/>_66 = ((_59 as Continue).0: i64)<br/>_58 = _66<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_56 = &lt;i64 as SafeMath&gt;::safe_add(move _57, move _58)</td></tr></table>>];
    bb32__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_63)<br/>_63 = ((_59 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_65)<br/>_65 = _63<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _65)</td></tr></table>>];
    bb33__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_63)<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>StorageDead(_56)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_58)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">_55 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _56)</td></tr></table>>];
    bb35__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>_67 = discriminant(_55)<br/></td></tr><tr><td align="left">switchInt(move _67)</td></tr></table>>];
    bb36__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_71)<br/>_71 = ((_55 as Continue).0: i64)<br/>_54 = _71<br/>StorageDead(_71)<br/>((*_1).3: i64) = move _54<br/>StorageDead(_54)<br/>StorageDead(_59)<br/>StorageDead(_55)<br/>(((*_1).2: state::user::UserFees).5: u64) = const 0_u64<br/>_24 = const ()<br/>StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_68)<br/>_68 = ((_55 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_70)<br/>_70 = _68<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _70)</td></tr></table>>];
    bb38__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_68)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>StorageDead(_24)<br/>StorageLive(_72)<br/>_72 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _72)<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_54)<br/>StorageDead(_59)<br/>StorageDead(_55)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_25)<br/>StorageDead(_24)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_4420 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4420 -> bb1__0_4420 [label="return"];
    bb1__0_4420 -> bb2__0_4420 [label="return"];
    bb2__0_4420 -> bb3__0_4420 [label="0"];
    bb2__0_4420 -> bb5__0_4420 [label="1"];
    bb2__0_4420 -> bb4__0_4420 [label="otherwise"];
    bb3__0_4420 -> bb7__0_4420 [label="return"];
    bb5__0_4420 -> bb6__0_4420 [label="return"];
    bb6__0_4420 -> bb44__0_4420 [label=""];
    bb7__0_4420 -> bb8__0_4420 [label="return"];
    bb8__0_4420 -> bb9__0_4420 [label="0"];
    bb8__0_4420 -> bb10__0_4420 [label="1"];
    bb8__0_4420 -> bb4__0_4420 [label="otherwise"];
    bb9__0_4420 -> bb13__0_4420 [label="0"];
    bb9__0_4420 -> bb12__0_4420 [label="otherwise"];
    bb10__0_4420 -> bb11__0_4420 [label="return"];
    bb11__0_4420 -> bb44__0_4420 [label=""];
    bb12__0_4420 -> bb14__0_4420 [label="return"];
    bb13__0_4420 -> bb39__0_4420 [label=""];
    bb14__0_4420 -> bb15__0_4420 [label="return"];
    bb15__0_4420 -> bb16__0_4420 [label="0"];
    bb15__0_4420 -> bb17__0_4420 [label="1"];
    bb15__0_4420 -> bb4__0_4420 [label="otherwise"];
    bb16__0_4420 -> bb19__0_4420 [label="return"];
    bb17__0_4420 -> bb18__0_4420 [label="return"];
    bb18__0_4420 -> bb41__0_4420 [label=""];
    bb19__0_4420 -> bb20__0_4420 [label="return"];
    bb20__0_4420 -> bb21__0_4420 [label="0"];
    bb20__0_4420 -> bb22__0_4420 [label="1"];
    bb20__0_4420 -> bb4__0_4420 [label="otherwise"];
    bb21__0_4420 -> bb24__0_4420 [label="return"];
    bb22__0_4420 -> bb23__0_4420 [label="return"];
    bb23__0_4420 -> bb41__0_4420 [label=""];
    bb24__0_4420 -> bb25__0_4420 [label="return"];
    bb25__0_4420 -> bb26__0_4420 [label="0"];
    bb25__0_4420 -> bb27__0_4420 [label="1"];
    bb25__0_4420 -> bb4__0_4420 [label="otherwise"];
    bb26__0_4420 -> bb29__0_4420 [label="return"];
    bb27__0_4420 -> bb28__0_4420 [label="return"];
    bb28__0_4420 -> bb42__0_4420 [label=""];
    bb29__0_4420 -> bb30__0_4420 [label="return"];
    bb30__0_4420 -> bb31__0_4420 [label="0"];
    bb30__0_4420 -> bb32__0_4420 [label="1"];
    bb30__0_4420 -> bb4__0_4420 [label="otherwise"];
    bb31__0_4420 -> bb34__0_4420 [label="return"];
    bb32__0_4420 -> bb33__0_4420 [label="return"];
    bb33__0_4420 -> bb40__0_4420 [label=""];
    bb34__0_4420 -> bb35__0_4420 [label="return"];
    bb35__0_4420 -> bb36__0_4420 [label="0"];
    bb35__0_4420 -> bb37__0_4420 [label="1"];
    bb35__0_4420 -> bb4__0_4420 [label="otherwise"];
    bb36__0_4420 -> bb39__0_4420 [label=""];
    bb37__0_4420 -> bb38__0_4420 [label="return"];
    bb38__0_4420 -> bb40__0_4420 [label=""];
    bb39__0_4420 -> bb44__0_4420 [label=""];
    bb40__0_4420 -> bb43__0_4420 [label=""];
    bb41__0_4420 -> bb42__0_4420 [label=""];
    bb42__0_4420 -> bb43__0_4420 [label=""];
    bb43__0_4420 -> bb44__0_4420 [label=""];
}
