// MIR for `calculate_free_collateral_delta_for_spot` before PreCodegen

fn calculate_free_collateral_delta_for_spot(_1: &SpotMarket, _2: u128, _3: &StrictOraclePrice, _4: controller::position::PositionDirection, _5: u32, _6: u32) -> std::result::Result<u32, error::ErrorCode> {
    debug spot_market => _1;
    debug worst_case_token_amount => _2;
    debug strict_oracle_price => _3;
    debug order_direction => _4;
    debug user_custom_liability_weight => _5;
    debug user_custom_asset_weight => _6;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let mut _7: u32;
    let mut _8: bool;
    let mut _9: &controller::position::PositionDirection;
    let mut _10: &controller::position::PositionDirection;
    let _11: controller::position::PositionDirection;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _15: std::result::Result<u32, error::ErrorCode>;
    let mut _16: &state::spot_market::SpotMarket;
    let mut _17: u128;
    let mut _18: i64;
    let mut _19: &math::margin::MarginRequirementType;
    let _20: &math::margin::MarginRequirementType;
    let _21: math::margin::MarginRequirementType;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u32;
    let mut _27: u32;
    let mut _28: u32;
    let mut _29: u32;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _31: std::result::Result<u32, error::ErrorCode>;
    let mut _32: &state::spot_market::SpotMarket;
    let mut _33: u128;
    let mut _34: &math::margin::MarginRequirementType;
    let _35: &math::margin::MarginRequirementType;
    let _36: math::margin::MarginRequirementType;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: u32;
    let mut _42: u32;
    let mut _43: &math::margin::MarginRequirementType;
    let mut _44: &math::margin::MarginRequirementType;
    let mut _45: &controller::position::PositionDirection;
    scope 1 {
        debug residual => _23;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _26;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _38;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _41;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &_4;
        StorageLive(_10);
        _45 = const _;
        _10 = &(*_45);
        _8 = <controller::position::PositionDirection as PartialEq>::eq(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _8) -> [0: bb11, otherwise: bb2];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = &(*_1);
        StorageLive(_17);
        _17 = _2;
        StorageLive(_18);
        _18 = ((*_3).0: i64);
        StorageLive(_19);
        StorageLive(_20);
        _43 = const _;
        _20 = &(*_43);
        _19 = &(*_20);
        _15 = SpotMarket::get_asset_weight(move _16, move _17, move _18, move _19) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        _14 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        _22 = discriminant(_14);
        switchInt(move _22) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_26);
        _26 = ((_14 as Continue).0: u32);
        _13 = _26;
        StorageDead(_26);
        StorageLive(_27);
        _27 = _6;
        _12 = <u32 as Ord>::min(move _13, move _27) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_23);
        _23 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_20);
        StorageDead(_14);
        goto -> bb20;
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_13);
        _7 = <u32 as Sub>::sub(const _, move _12) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_12);
        StorageDead(_20);
        StorageDead(_14);
        goto -> bb19;
    }

    bb11: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &(*_1);
        StorageLive(_33);
        _33 = _2;
        StorageLive(_34);
        StorageLive(_35);
        _44 = const _;
        _35 = &(*_44);
        _34 = &(*_35);
        _31 = SpotMarket::get_liability_weight(move _32, move _33, move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        _30 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _31) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_31);
        _37 = discriminant(_30);
        switchInt(move _37) -> [0: bb14, 1: bb15, otherwise: bb6];
    }

    bb14: {
        StorageLive(_41);
        _41 = ((_30 as Continue).0: u32);
        _29 = _41;
        StorageDead(_41);
        StorageLive(_42);
        _42 = _5;
        _28 = <u32 as Ord>::max(move _29, move _42) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_35);
        StorageDead(_30);
        goto -> bb20;
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_29);
        _7 = <u32 as Sub>::sub(move _28, const _) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_28);
        StorageDead(_35);
        StorageDead(_30);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_8);
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb21;
    }

    bb21: {
        return;
    }
}
