// MIR for `update_mark_twap` before PreCodegen

fn update_mark_twap(_1: &mut AMM, _2: i64, _3: u64, _4: u64, _5: Option<u64>, _6: Option<i64>) -> std::result::Result<u64, error::ErrorCode> {
    debug amm => _1;
    debug now => _2;
    debug bid_price => _3;
    debug ask_price => _4;
    debug precomputed_trade_price => _5;
    debug sanitize_clamp => _6;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _7: i64;
    let _8: i64;
    let mut _9: (i64, i64);
    let mut _10: i64;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _12: std::result::Result<i64, error::ErrorCode>;
    let mut _13: i64;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _15: std::result::Result<i64, error::ErrorCode>;
    let mut _16: u64;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: i64;
    let mut _22: i64;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _24: std::result::Result<i64, error::ErrorCode>;
    let mut _25: u64;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: i64;
    let mut _31: std::option::Option<i64>;
    let mut _32: isize;
    let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: i64;
    let mut _37: i64;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _39: std::result::Result<i64, error::ErrorCode>;
    let mut _40: i64;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _42: std::result::Result<i64, error::ErrorCode>;
    let mut _43: u64;
    let mut _44: isize;
    let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: i64;
    let mut _49: i64;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _51: std::result::Result<i64, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: i64;
    let mut _58: std::option::Option<i64>;
    let mut _59: isize;
    let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _63: i64;
    let _64: ();
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _66: std::result::Result<(), error::ErrorCode>;
    let mut _67: bool;
    let mut _68: i64;
    let mut _69: i64;
    let mut _70: ();
    let _72: ();
    let mut _73: &str;
    let _74: &str;
    let mut _75: &std::string::String;
    let _76: &std::string::String;
    let _77: std::string::String;
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _81: &[&str; 2];
    let _82: &[&str; 2];
    let _83: [&str; 2];
    let mut _84: &[core::fmt::rt::Argument<'_>];
    let mut _85: &[core::fmt::rt::Argument<'_>; 1];
    let _86: &[core::fmt::rt::Argument<'_>; 1];
    let _87: [core::fmt::rt::Argument<'_>; 1];
    let mut _88: core::fmt::rt::Argument<'_>;
    let mut _89: &error::ErrorCode;
    let _90: &error::ErrorCode;
    let _91: ();
    let mut _92: &str;
    let _93: &str;
    let mut _94: error::ErrorCode;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _102: std::result::Result<i64, error::ErrorCode>;
    let mut _103: i64;
    let mut _104: i64;
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: (i64, i64);
    let mut _113: bool;
    let mut _114: i64;
    let mut _115: i64;
    let mut _116: i64;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _118: std::result::Result<i64, error::ErrorCode>;
    let mut _119: i64;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _125: i64;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _127: std::result::Result<i64, error::ErrorCode>;
    let mut _128: isize;
    let mut _130: !;
    let mut _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _133: ();
    let mut _134: &str;
    let _135: &str;
    let mut _136: &std::string::String;
    let _137: &std::string::String;
    let _138: std::string::String;
    let mut _140: std::fmt::Arguments<'_>;
    let mut _141: &[&str];
    let mut _142: &[&str; 2];
    let _143: &[&str; 2];
    let _144: [&str; 2];
    let mut _145: &[core::fmt::rt::Argument<'_>];
    let mut _146: &[core::fmt::rt::Argument<'_>; 1];
    let _147: &[core::fmt::rt::Argument<'_>; 1];
    let _148: [core::fmt::rt::Argument<'_>; 1];
    let mut _149: core::fmt::rt::Argument<'_>;
    let mut _150: &i64;
    let _151: &i64;
    let mut _153: i64;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _155: std::result::Result<i64, error::ErrorCode>;
    let mut _156: i64;
    let mut _157: i64;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _163: i64;
    let mut _164: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _165: std::result::Result<i64, error::ErrorCode>;
    let mut _166: i64;
    let mut _167: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _168: std::result::Result<i64, error::ErrorCode>;
    let mut _169: i64;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _175: i64;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _177: std::result::Result<i64, error::ErrorCode>;
    let mut _178: u64;
    let mut _179: isize;
    let mut _181: !;
    let mut _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _184: i64;
    let mut _185: i64;
    let mut _186: std::option::Option<i64>;
    let mut _187: i64;
    let mut _188: i64;
    let mut _189: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _190: std::result::Result<i64, error::ErrorCode>;
    let mut _191: i64;
    let mut _192: i64;
    let mut _193: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _194: std::result::Result<i64, error::ErrorCode>;
    let mut _195: u64;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _206: isize;
    let mut _208: !;
    let mut _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _211: i64;
    let mut _212: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _213: std::result::Result<i64, error::ErrorCode>;
    let mut _214: i64;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _216: std::result::Result<i64, error::ErrorCode>;
    let mut _217: i64;
    let mut _218: isize;
    let mut _220: !;
    let mut _221: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _223: i64;
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _225: std::result::Result<i64, error::ErrorCode>;
    let mut _226: u64;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _232: i64;
    let mut _233: i64;
    let mut _234: std::option::Option<i64>;
    let mut _235: i64;
    let mut _236: i64;
    let mut _237: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _238: std::result::Result<i64, error::ErrorCode>;
    let mut _239: i64;
    let mut _240: i64;
    let mut _241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _242: std::result::Result<i64, error::ErrorCode>;
    let mut _243: u64;
    let mut _244: isize;
    let mut _246: !;
    let mut _247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _249: isize;
    let mut _251: !;
    let mut _252: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _254: isize;
    let mut _256: !;
    let mut _257: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _259: i64;
    let mut _260: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _261: std::result::Result<i64, error::ErrorCode>;
    let mut _262: u64;
    let mut _263: isize;
    let mut _265: !;
    let mut _266: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _268: i64;
    let mut _269: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _270: std::result::Result<i64, error::ErrorCode>;
    let mut _271: u64;
    let mut _272: isize;
    let mut _274: !;
    let mut _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _278: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _279: std::result::Result<i64, error::ErrorCode>;
    let mut _280: i64;
    let mut _281: i64;
    let mut _282: i64;
    let mut _283: i64;
    let mut _284: i64;
    let mut _285: isize;
    let mut _287: !;
    let mut _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _290: u64;
    let mut _291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _292: std::result::Result<u64, error::ErrorCode>;
    let mut _293: i64;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _300: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _301: std::result::Result<i64, error::ErrorCode>;
    let mut _302: i64;
    let mut _303: i64;
    let mut _304: i64;
    let mut _305: i64;
    let mut _306: i64;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _312: u64;
    let mut _313: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _314: std::result::Result<u64, error::ErrorCode>;
    let mut _315: i64;
    let mut _316: isize;
    let mut _318: !;
    let mut _319: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _322: i64;
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _324: std::result::Result<i64, error::ErrorCode>;
    let mut _325: i64;
    let mut _326: i64;
    let mut _327: isize;
    let mut _329: !;
    let mut _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _332: bool;
    let mut _333: bool;
    let mut _334: bool;
    let mut _335: bool;
    let mut _337: isize;
    let mut _339: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _340: std::result::Result<u64, error::ErrorCode>;
    let mut _341: u64;
    let mut _342: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _343: std::result::Result<u64, error::ErrorCode>;
    let mut _344: u64;
    let mut _345: u64;
    let mut _346: isize;
    let mut _348: !;
    let mut _349: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _351: isize;
    let mut _353: !;
    let mut _354: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _356: bool;
    let mut _357: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _358: std::result::Result<bool, error::ErrorCode>;
    let mut _359: &mut state::perp_market::AMM;
    let mut _360: i64;
    let mut _361: u64;
    let mut _362: u64;
    let mut _363: u64;
    let mut _364: isize;
    let mut _366: !;
    let mut _367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _369: u64;
    let mut _370: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _371: std::result::Result<u64, error::ErrorCode>;
    let mut _372: i64;
    let mut _373: isize;
    let mut _375: !;
    let mut _376: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _378: u64;
    let mut _379: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _380: std::result::Result<u64, error::ErrorCode>;
    let mut _381: i64;
    let mut _382: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _383: std::result::Result<i64, error::ErrorCode>;
    let mut _384: i64;
    let mut _385: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _386: std::result::Result<i64, error::ErrorCode>;
    let mut _387: i64;
    let mut _388: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _389: std::result::Result<i64, error::ErrorCode>;
    let mut _390: i64;
    let mut _391: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _392: std::result::Result<i64, error::ErrorCode>;
    let mut _393: i64;
    let mut _394: i64;
    let mut _395: isize;
    let mut _397: !;
    let mut _398: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _400: isize;
    let mut _402: !;
    let mut _403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _405: isize;
    let mut _407: !;
    let mut _408: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _410: i64;
    let mut _411: i64;
    let mut _412: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _413: std::result::Result<i64, error::ErrorCode>;
    let mut _414: u64;
    let mut _415: isize;
    let mut _417: !;
    let mut _418: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _420: i64;
    let mut _421: i64;
    let mut _422: isize;
    let mut _424: !;
    let mut _425: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _427: isize;
    let mut _429: !;
    let mut _430: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _432: i64;
    let mut _433: i64;
    scope 1 {
        debug bid_price_capped_update => _7;
        debug ask_price_capped_update => _8;
        let _71: error::ErrorCode;
        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _99: ();
        let _100: i64;
        let _106: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _109: i64;
        scope 26 {
            debug error_code => _71;
            let _78: std::string::String;
            let mut _435: &[&str; 2];
            scope 27 {
                debug res => _78;
            }
        }
        scope 28 {
            debug residual => _96;
            scope 29 {
            }
        }
        scope 30 {
            debug val => _99;
            scope 31 {
            }
        }
        scope 32 {
            debug last_valid_trade_since_oracle_twap_update => _100;
            let _110: i64;
            let _111: i64;
            let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _124: i64;
            let _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _132: i64;
            let _139: std::string::String;
            let _152: i64;
            let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _162: i64;
            let _264: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _267: i64;
            let _273: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _276: i64;
            let mut _434: &[&str; 2];
            scope 37 {
                debug last_bid_price_twap => _110;
                debug last_ask_price_twap => _111;
                let _277: i64;
                let _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _289: i64;
                scope 100 {
                    debug bid_twap => _277;
                    let _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _298: u64;
                    let _299: i64;
                    let _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _311: i64;
                    scope 105 {
                        debug residual => _295;
                        scope 106 {
                        }
                    }
                    scope 107 {
                        debug val => _298;
                        scope 108 {
                        }
                    }
                    scope 109 {
                        debug ask_twap => _299;
                        let _317: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _320: u64;
                        let _321: i64;
                        let _328: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _331: i64;
                        scope 114 {
                            debug residual => _317;
                            scope 115 {
                            }
                        }
                        scope 116 {
                            debug val => _320;
                            scope 117 {
                            }
                        }
                        scope 118 {
                            debug mid_twap => _321;
                            let _336: u64;
                            let _338: u64;
                            let _347: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _350: u64;
                            let _352: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _355: u64;
                            scope 123 {
                                debug trade_price => _336;
                                let _365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _368: bool;
                                let _374: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _377: u64;
                                let _396: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _399: i64;
                                let _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _404: i64;
                                let _406: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _409: i64;
                                let _416: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _419: i64;
                                let _423: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _426: i64;
                                let _428: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _431: u64;
                                scope 133 {
                                    debug residual => _365;
                                    scope 134 {
                                    }
                                }
                                scope 135 {
                                    debug val => _368;
                                    scope 136 {
                                    }
                                }
                                scope 137 {
                                    debug residual => _374;
                                    scope 138 {
                                    }
                                }
                                scope 139 {
                                    debug val => _377;
                                    scope 140 {
                                    }
                                }
                                scope 141 {
                                    debug residual => _396;
                                    scope 142 {
                                    }
                                }
                                scope 143 {
                                    debug val => _399;
                                    scope 144 {
                                    }
                                }
                                scope 145 {
                                    debug residual => _401;
                                    scope 146 {
                                    }
                                }
                                scope 147 {
                                    debug val => _404;
                                    scope 148 {
                                    }
                                }
                                scope 149 {
                                    debug residual => _406;
                                    scope 150 {
                                    }
                                }
                                scope 151 {
                                    debug val => _409;
                                    scope 152 {
                                    }
                                }
                                scope 153 {
                                    debug residual => _416;
                                    scope 154 {
                                    }
                                }
                                scope 155 {
                                    debug val => _419;
                                    scope 156 {
                                    }
                                }
                                scope 157 {
                                    debug residual => _423;
                                    scope 158 {
                                    }
                                }
                                scope 159 {
                                    debug val => _426;
                                    scope 160 {
                                    }
                                }
                                scope 161 {
                                    debug residual => _428;
                                    scope 162 {
                                    }
                                }
                                scope 163 {
                                    debug val => _431;
                                    scope 164 {
                                    }
                                }
                            }
                            scope 124 {
                                debug trade_price => _338;
                            }
                            scope 125 {
                                debug residual => _347;
                                scope 126 {
                                }
                            }
                            scope 127 {
                                debug val => _350;
                                scope 128 {
                                }
                            }
                            scope 129 {
                                debug residual => _352;
                                scope 130 {
                                }
                            }
                            scope 131 {
                                debug val => _355;
                                scope 132 {
                                }
                            }
                        }
                        scope 119 {
                            debug residual => _328;
                            scope 120 {
                            }
                        }
                        scope 121 {
                            debug val => _331;
                            scope 122 {
                            }
                        }
                    }
                    scope 110 {
                        debug residual => _308;
                        scope 111 {
                        }
                    }
                    scope 112 {
                        debug val => _311;
                        scope 113 {
                        }
                    }
                }
                scope 101 {
                    debug residual => _286;
                    scope 102 {
                    }
                }
                scope 103 {
                    debug val => _289;
                    scope 104 {
                    }
                }
            }
            scope 38 {
                debug residual => _121;
                scope 39 {
                }
            }
            scope 40 {
                debug val => _124;
                scope 41 {
                }
            }
            scope 42 {
                debug residual => _129;
                scope 43 {
                }
            }
            scope 44 {
                debug val => _132;
                scope 45 {
                }
            }
            scope 46 {
                debug res => _139;
            }
            scope 47 {
                debug from_start_valid => _152;
                let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _174: i64;
                let _180: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _183: i64;
                let _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _200: i64;
                let _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _205: i64;
                let _207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _210: i64;
                let _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _222: i64;
                let _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _231: i64;
                let _245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _248: i64;
                let _250: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _253: i64;
                let _255: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _258: i64;
                scope 52 {
                    debug residual => _171;
                    scope 53 {
                    }
                }
                scope 54 {
                    debug val => _174;
                    scope 55 {
                    }
                }
                scope 56 {
                    debug residual => _180;
                    scope 57 {
                    }
                }
                scope 58 {
                    debug val => _183;
                    scope 59 {
                    }
                }
                scope 60 {
                    debug residual => _197;
                    scope 61 {
                    }
                }
                scope 62 {
                    debug val => _200;
                    scope 63 {
                    }
                }
                scope 64 {
                    debug residual => _202;
                    scope 65 {
                    }
                }
                scope 66 {
                    debug val => _205;
                    scope 67 {
                    }
                }
                scope 68 {
                    debug residual => _207;
                    scope 69 {
                    }
                }
                scope 70 {
                    debug val => _210;
                    scope 71 {
                    }
                }
                scope 72 {
                    debug residual => _219;
                    scope 73 {
                    }
                }
                scope 74 {
                    debug val => _222;
                    scope 75 {
                    }
                }
                scope 76 {
                    debug residual => _228;
                    scope 77 {
                    }
                }
                scope 78 {
                    debug val => _231;
                    scope 79 {
                    }
                }
                scope 80 {
                    debug residual => _245;
                    scope 81 {
                    }
                }
                scope 82 {
                    debug val => _248;
                    scope 83 {
                    }
                }
                scope 84 {
                    debug residual => _250;
                    scope 85 {
                    }
                }
                scope 86 {
                    debug val => _253;
                    scope 87 {
                    }
                }
                scope 88 {
                    debug residual => _255;
                    scope 89 {
                    }
                }
                scope 90 {
                    debug val => _258;
                    scope 91 {
                    }
                }
            }
            scope 48 {
                debug residual => _159;
                scope 49 {
                }
            }
            scope 50 {
                debug val => _162;
                scope 51 {
                }
            }
            scope 92 {
                debug residual => _264;
                scope 93 {
                }
            }
            scope 94 {
                debug val => _267;
                scope 95 {
                }
            }
            scope 96 {
                debug residual => _273;
                scope 97 {
                }
            }
            scope 98 {
                debug val => _276;
                scope 99 {
                }
            }
        }
        scope 33 {
            debug residual => _106;
            scope 34 {
            }
        }
        scope 35 {
            debug val => _109;
            scope 36 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _27;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _30;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _33;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _36;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _45;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _48;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _54;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _57;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _60;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _63;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _3;
        _15 = <u64 as Cast>::cast::<i64>(move _16) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_16);
        _14 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: i64);
        _13 = _21;
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = ((*_1).43: u64);
        _24 = <u64 as Cast>::cast::<i64>(move _25) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        goto -> bb248;
    }

    bb7: {
        StorageDead(_25);
        _23 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: i64);
        _22 = _30;
        StorageDead(_30);
        StorageLive(_31);
        _31 = _6;
        _12 = sanitize_new_price(move _13, move _22, move _31) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb246;
    }

    bb12: {
        StorageDead(_31);
        StorageDead(_22);
        StorageDead(_13);
        _11 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _12) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_12);
        _32 = discriminant(_11);
        switchInt(move _32) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_36);
        _36 = ((_11 as Continue).0: i64);
        _10 = _36;
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _4;
        _42 = <u64 as Cast>::cast::<i64>(move _43) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_33);
        _33 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb246;
    }

    bb17: {
        StorageDead(_43);
        _41 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_48);
        _48 = ((_41 as Continue).0: i64);
        _40 = _48;
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = ((*_1).44: u64);
        _51 = <u64 as Cast>::cast::<i64>(move _52) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_10);
        goto -> bb245;
    }

    bb22: {
        StorageDead(_52);
        _50 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _51) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_57);
        _57 = ((_50 as Continue).0: i64);
        _49 = _57;
        StorageDead(_57);
        StorageLive(_58);
        _58 = _6;
        _39 = sanitize_new_price(move _40, move _49, move _58) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_54);
        _54 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_40);
        StorageDead(_39);
        goto -> bb244;
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_49);
        StorageDead(_40);
        _38 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _39) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_39);
        _59 = discriminant(_38);
        switchInt(move _59) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_63);
        _63 = ((_38 as Continue).0: i64);
        _37 = _63;
        StorageDead(_63);
        _9 = (move _10, move _37);
        StorageDead(_37);
        StorageDead(_10);
        StorageLive(_7);
        _7 = (_9.0: i64);
        StorageLive(_8);
        _8 = (_9.1: i64);
        StorageDead(_50);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _7;
        StorageLive(_69);
        _69 = _8;
        _67 = Le(move _68, move _69);
        switchInt(move _67) -> [0: bb33, otherwise: bb32];
    }

    bb30: {
        StorageLive(_60);
        _60 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_62);
        StorageDead(_60);
        goto -> bb244;
    }

    bb32: {
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_70);
        _70 = ();
        _66 = std::result::Result::<(), error::ErrorCode>::Ok(move _70);
        StorageDead(_70);
        goto -> bb41;
    }

    bb33: {
        StorageDead(_69);
        StorageDead(_68);
        StorageLive(_71);
        _71 = error::ErrorCode::InvalidMarkTwapUpdateDetected;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _435 = const _;
        _82 = &(*_435);
        _81 = &(*_82);
        _80 = move _81 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_81);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &_71;
        _89 = &(*_90);
        _88 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _89) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_89);
        _87 = [move _88];
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = move _85 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_85);
        _79 = Arguments::<'_>::new_v1(move _80, move _84) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_84);
        StorageDead(_80);
        _78 = format(move _79) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_79);
        StorageDead(_90);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_82);
        _77 = move _78;
        StorageDead(_78);
        _76 = &_77;
        _75 = &(*_76);
        _74 = <String as Deref>::deref(move _75) -> [return: bb37, unwind: bb251];
    }

    bb37: {
        _73 = &(*_74);
        StorageDead(_75);
        _72 = solana_program::log::sol_log(move _73) -> [return: bb38, unwind: bb251];
    }

    bb38: {
        StorageDead(_73);
        drop(_77) -> [return: bb39, unwind: bb252];
    }

    bb39: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = const "bid_price_capped_update not <= ask_price_capped_update,";
        _92 = &(*_93);
        _91 = solana_program::log::sol_log(move _92) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_92);
        StorageDead(_93);
        StorageDead(_91);
        StorageLive(_94);
        _94 = _71;
        _66 = std::result::Result::<(), error::ErrorCode>::Err(move _94);
        StorageDead(_94);
        StorageDead(_71);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_67);
        _65 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _66) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_66);
        _95 = discriminant(_65);
        switchInt(move _95) -> [0: bb43, 1: bb44, otherwise: bb4];
    }

    bb43: {
        StorageLive(_99);
        _99 = ((_65 as Continue).0: ());
        _64 = _99;
        StorageDead(_99);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = (((*_1).1: state::oracle::HistoricalOracleData).5: i64);
        StorageLive(_104);
        _104 = ((*_1).62: i64);
        _102 = <i64 as SafeMath>::safe_sub(move _103, move _104) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_96);
        _96 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb243;
    }

    bb46: {
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _102) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_102);
        _105 = discriminant(_101);
        switchInt(move _105) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_109);
        _109 = ((_101 as Continue).0: i64);
        _100 = _109;
        StorageDead(_109);
        StorageDead(_101);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = _100;
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = ((*_1).51: i64);
        _118 = <i64 as SafeMath>::safe_div(move _119, const 60_i64) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_106);
        _106 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_108);
        _108 = _106;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _108) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_101);
        goto -> bb242;
    }

    bb51: {
        StorageDead(_119);
        _117 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _118) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_118);
        _120 = discriminant(_117);
        switchInt(move _120) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_124);
        _124 = ((_117 as Continue).0: i64);
        _116 = _124;
        StorageDead(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = <i128 as Cast>::cast::<i64>(const _) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_121);
        _121 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_116);
        goto -> bb240;
    }

    bb56: {
        _126 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _127) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_127);
        _128 = discriminant(_126);
        switchInt(move _128) -> [0: bb58, 1: bb59, otherwise: bb4];
    }

    bb58: {
        StorageLive(_132);
        _132 = ((_126 as Continue).0: i64);
        _125 = _132;
        StorageDead(_132);
        _115 = <i64 as Ord>::max(move _116, move _125) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_129);
        _129 = ((_126 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_131);
        _131 = _129;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _131) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_125);
        StorageDead(_116);
        StorageDead(_126);
        goto -> bb240;
    }

    bb61: {
        StorageDead(_125);
        StorageDead(_116);
        _113 = Gt(move _114, move _115);
        switchInt(move _113) -> [0: bb127, otherwise: bb62];
    }

    bb62: {
        StorageDead(_126);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _434 = const _;
        _143 = &(*_434);
        _142 = &(*_143);
        _141 = move _142 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_100;
        _150 = &(*_151);
        _149 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _150) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_150);
        _148 = [move _149];
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = move _146 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_146);
        _140 = Arguments::<'_>::new_v1(move _141, move _145) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_145);
        StorageDead(_141);
        _139 = format(move _140) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_140);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        _138 = move _139;
        StorageDead(_139);
        _137 = &_138;
        _136 = &(*_137);
        _135 = <String as Deref>::deref(move _136) -> [return: bb66, unwind: bb250];
    }

    bb66: {
        _134 = &(*_135);
        StorageDead(_136);
        _133 = solana_program::log::sol_log(move _134) -> [return: bb67, unwind: bb250];
    }

    bb67: {
        StorageDead(_134);
        drop(_138) -> [return: bb68, unwind: bb252];
    }

    bb68: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = ((*_1).51: i64);
        StorageLive(_157);
        _157 = _100;
        _155 = <i64 as SafeMath>::safe_sub(move _156, move _157) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_157);
        StorageDead(_156);
        _154 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _155) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_155);
        _158 = discriminant(_154);
        switchInt(move _158) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        StorageLive(_162);
        _162 = ((_154 as Continue).0: i64);
        _153 = _162;
        StorageDead(_162);
        _152 = std::cmp::max::<i64>(const 0_i64, move _153) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_159);
        _159 = ((_154 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_153);
        StorageDead(_154);
        StorageDead(_152);
        goto -> bb241;
    }

    bb74: {
        StorageDead(_153);
        StorageDead(_154);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = (((*_1).1: state::oracle::HistoricalOracleData).3: i64);
        _168 = <i64 as Cast>::cast::<i64>(move _169) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_169);
        _167 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _168) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_168);
        _170 = discriminant(_167);
        switchInt(move _170) -> [0: bb77, 1: bb78, otherwise: bb4];
    }

    bb77: {
        StorageLive(_174);
        _174 = ((_167 as Continue).0: i64);
        _166 = _174;
        StorageDead(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = ((*_1).43: u64);
        _177 = <u64 as Cast>::cast::<i64>(move _178) -> [return: bb80, unwind continue];
    }

    bb78: {
        StorageLive(_171);
        _171 = ((_167 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_152);
        goto -> bb239;
    }

    bb80: {
        StorageDead(_178);
        _176 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _177) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_177);
        _179 = discriminant(_176);
        switchInt(move _179) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_183);
        _183 = ((_176 as Continue).0: i64);
        _175 = _183;
        StorageDead(_183);
        StorageLive(_184);
        _184 = _100;
        StorageLive(_185);
        _185 = _152;
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = (((*_1).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = ((*_1).43: u64);
        _194 = <u64 as Cast>::cast::<i64>(move _195) -> [return: bb85, unwind continue];
    }

    bb83: {
        StorageLive(_180);
        _180 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_182);
        _182 = _180;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _182) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_182);
        StorageDead(_180);
        StorageDead(_175);
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_152);
        goto -> bb238;
    }

    bb85: {
        StorageDead(_195);
        _193 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _194) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_194);
        _196 = discriminant(_193);
        switchInt(move _196) -> [0: bb87, 1: bb88, otherwise: bb4];
    }

    bb87: {
        StorageLive(_200);
        _200 = ((_193 as Continue).0: i64);
        _192 = _200;
        StorageDead(_200);
        _190 = <i64 as SafeMath>::safe_sub(move _191, move _192) -> [return: bb90, unwind continue];
    }

    bb88: {
        StorageLive(_197);
        _197 = ((_193 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_199);
        _199 = _197;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _199) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        goto -> bb235;
    }

    bb90: {
        StorageDead(_192);
        StorageDead(_191);
        _189 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _190) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_190);
        _201 = discriminant(_189);
        switchInt(move _201) -> [0: bb92, 1: bb93, otherwise: bb4];
    }

    bb92: {
        StorageLive(_205);
        _205 = ((_189 as Continue).0: i64);
        _188 = _205;
        StorageDead(_205);
        _187 = core::num::<impl i64>::signum(move _188) -> [return: bb95, unwind continue];
    }

    bb93: {
        StorageLive(_202);
        _202 = ((_189 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_204);
        _204 = _202;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _204) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_204);
        StorageDead(_202);
        goto -> bb235;
    }

    bb95: {
        StorageDead(_188);
        _186 = Option::<i64>::Some(move _187);
        StorageDead(_187);
        _165 = calculate_weighted_average(move _166, move _175, move _184, move _185, move _186) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_175);
        StorageDead(_166);
        _164 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _165) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_165);
        _206 = discriminant(_164);
        switchInt(move _206) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_210);
        _210 = ((_164 as Continue).0: i64);
        _163 = _210;
        StorageDead(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = (((*_1).1: state::oracle::HistoricalOracleData).3: i64);
        _216 = <i64 as Cast>::cast::<i64>(move _217) -> [return: bb101, unwind continue];
    }

    bb99: {
        StorageLive(_207);
        _207 = ((_164 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_209);
        _209 = _207;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _209) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_209);
        StorageDead(_207);
        goto -> bb236;
    }

    bb101: {
        StorageDead(_217);
        _215 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _216) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_216);
        _218 = discriminant(_215);
        switchInt(move _218) -> [0: bb103, 1: bb104, otherwise: bb4];
    }

    bb103: {
        StorageLive(_222);
        _222 = ((_215 as Continue).0: i64);
        _214 = _222;
        StorageDead(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = ((*_1).44: u64);
        _225 = <u64 as Cast>::cast::<i64>(move _226) -> [return: bb106, unwind continue];
    }

    bb104: {
        StorageLive(_219);
        _219 = ((_215 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_221);
        _221 = _219;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _221) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_163);
        StorageDead(_152);
        goto -> bb234;
    }

    bb106: {
        StorageDead(_226);
        _224 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _225) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_225);
        _227 = discriminant(_224);
        switchInt(move _227) -> [0: bb108, 1: bb109, otherwise: bb4];
    }

    bb108: {
        StorageLive(_231);
        _231 = ((_224 as Continue).0: i64);
        _223 = _231;
        StorageDead(_231);
        StorageLive(_232);
        _232 = _100;
        StorageLive(_233);
        _233 = _152;
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _239 = (((*_1).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        _243 = ((*_1).44: u64);
        _242 = <u64 as Cast>::cast::<i64>(move _243) -> [return: bb111, unwind continue];
    }

    bb109: {
        StorageLive(_228);
        _228 = ((_224 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_230);
        _230 = _228;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _230) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_223);
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_163);
        StorageDead(_152);
        goto -> bb233;
    }

    bb111: {
        StorageDead(_243);
        _241 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _242) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_242);
        _244 = discriminant(_241);
        switchInt(move _244) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_248);
        _248 = ((_241 as Continue).0: i64);
        _240 = _248;
        StorageDead(_248);
        _238 = <i64 as SafeMath>::safe_sub(move _239, move _240) -> [return: bb116, unwind continue];
    }

    bb114: {
        StorageLive(_245);
        _245 = ((_241 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_247);
        _247 = _245;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _247) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_247);
        StorageDead(_245);
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb231;
    }

    bb116: {
        StorageDead(_240);
        StorageDead(_239);
        _237 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _238) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_238);
        _249 = discriminant(_237);
        switchInt(move _249) -> [0: bb118, 1: bb119, otherwise: bb4];
    }

    bb118: {
        StorageLive(_253);
        _253 = ((_237 as Continue).0: i64);
        _236 = _253;
        StorageDead(_253);
        _235 = core::num::<impl i64>::signum(move _236) -> [return: bb121, unwind continue];
    }

    bb119: {
        StorageLive(_250);
        _250 = ((_237 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_252);
        _252 = _250;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _252) -> [return: bb120, unwind continue];
    }

    bb120: {
        StorageDead(_252);
        StorageDead(_250);
        goto -> bb231;
    }

    bb121: {
        StorageDead(_236);
        _234 = Option::<i64>::Some(move _235);
        StorageDead(_235);
        _213 = calculate_weighted_average(move _214, move _223, move _232, move _233, move _234) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_223);
        StorageDead(_214);
        _212 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _213) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_213);
        _254 = discriminant(_212);
        switchInt(move _254) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_258);
        _258 = ((_212 as Continue).0: i64);
        _211 = _258;
        StorageDead(_258);
        _112 = (move _163, move _211);
        StorageDead(_211);
        StorageDead(_163);
        StorageDead(_152);
        StorageDead(_241);
        StorageDead(_237);
        StorageDead(_224);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_193);
        StorageDead(_189);
        StorageDead(_176);
        StorageDead(_167);
        StorageDead(_164);
        goto -> bb138;
    }

    bb125: {
        StorageLive(_255);
        _255 = ((_212 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_257);
        _257 = _255;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _257) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_257);
        StorageDead(_255);
        goto -> bb232;
    }

    bb127: {
        StorageDead(_126);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        _262 = ((*_1).43: u64);
        _261 = <u64 as Cast>::cast::<i64>(move _262) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_262);
        _260 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _261) -> [return: bb129, unwind continue];
    }

    bb129: {
        StorageDead(_261);
        _263 = discriminant(_260);
        switchInt(move _263) -> [0: bb130, 1: bb131, otherwise: bb4];
    }

    bb130: {
        StorageLive(_267);
        _267 = ((_260 as Continue).0: i64);
        _259 = _267;
        StorageDead(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = ((*_1).44: u64);
        _270 = <u64 as Cast>::cast::<i64>(move _271) -> [return: bb133, unwind continue];
    }

    bb131: {
        StorageLive(_264);
        _264 = ((_260 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_266);
        _266 = _264;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _266) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_259);
        goto -> bb230;
    }

    bb133: {
        StorageDead(_271);
        _269 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _270) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_270);
        _272 = discriminant(_269);
        switchInt(move _272) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        StorageLive(_276);
        _276 = ((_269 as Continue).0: i64);
        _268 = _276;
        StorageDead(_276);
        _112 = (move _259, move _268);
        StorageDead(_268);
        StorageDead(_259);
        StorageDead(_269);
        StorageDead(_260);
        goto -> bb138;
    }

    bb136: {
        StorageLive(_273);
        _273 = ((_269 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_275);
        _275 = _273;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _275) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_268);
        StorageDead(_259);
        StorageDead(_269);
        goto -> bb230;
    }

    bb138: {
        StorageDead(_113);
        StorageLive(_110);
        _110 = (_112.0: i64);
        StorageLive(_111);
        _111 = (_112.1: i64);
        StorageDead(_112);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        _280 = _7;
        StorageLive(_281);
        _281 = _2;
        StorageLive(_282);
        _282 = _110;
        StorageLive(_283);
        _283 = ((*_1).62: i64);
        StorageLive(_284);
        _284 = ((*_1).51: i64);
        _279 = calculate_new_twap(move _280, move _281, move _282, move _283, move _284) -> [return: bb139, unwind continue];
    }

    bb139: {
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_280);
        _278 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _279) -> [return: bb140, unwind continue];
    }

    bb140: {
        StorageDead(_279);
        _285 = discriminant(_278);
        switchInt(move _285) -> [0: bb141, 1: bb142, otherwise: bb4];
    }

    bb141: {
        StorageLive(_289);
        _289 = ((_278 as Continue).0: i64);
        _277 = _289;
        StorageDead(_289);
        StorageDead(_278);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = _277;
        _292 = <i64 as Cast>::cast::<u64>(move _293) -> [return: bb144, unwind continue];
    }

    bb142: {
        StorageLive(_286);
        _286 = ((_278 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_288);
        _288 = _286;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _288) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_288);
        StorageDead(_286);
        StorageDead(_278);
        goto -> bb229;
    }

    bb144: {
        StorageDead(_293);
        _291 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _292) -> [return: bb145, unwind continue];
    }

    bb145: {
        StorageDead(_292);
        _294 = discriminant(_291);
        switchInt(move _294) -> [0: bb146, 1: bb147, otherwise: bb4];
    }

    bb146: {
        StorageLive(_298);
        _298 = ((_291 as Continue).0: u64);
        _290 = _298;
        StorageDead(_298);
        ((*_1).43: u64) = move _290;
        StorageDead(_290);
        StorageDead(_291);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = _8;
        StorageLive(_303);
        _303 = _2;
        StorageLive(_304);
        _304 = _111;
        StorageLive(_305);
        _305 = ((*_1).62: i64);
        StorageLive(_306);
        _306 = ((*_1).51: i64);
        _301 = calculate_new_twap(move _302, move _303, move _304, move _305, move _306) -> [return: bb149, unwind continue];
    }

    bb147: {
        StorageLive(_295);
        _295 = ((_291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_297);
        _297 = _295;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _297) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_290);
        StorageDead(_291);
        goto -> bb229;
    }

    bb149: {
        StorageDead(_306);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_302);
        _300 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _301) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_301);
        _307 = discriminant(_300);
        switchInt(move _307) -> [0: bb151, 1: bb152, otherwise: bb4];
    }

    bb151: {
        StorageLive(_311);
        _311 = ((_300 as Continue).0: i64);
        _299 = _311;
        StorageDead(_311);
        StorageDead(_300);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = _299;
        _314 = <i64 as Cast>::cast::<u64>(move _315) -> [return: bb154, unwind continue];
    }

    bb152: {
        StorageLive(_308);
        _308 = ((_300 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_310);
        _310 = _308;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _310) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_310);
        StorageDead(_308);
        StorageDead(_300);
        goto -> bb228;
    }

    bb154: {
        StorageDead(_315);
        _313 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _314) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_314);
        _316 = discriminant(_313);
        switchInt(move _316) -> [0: bb156, 1: bb157, otherwise: bb4];
    }

    bb156: {
        StorageLive(_320);
        _320 = ((_313 as Continue).0: u64);
        _312 = _320;
        StorageDead(_320);
        ((*_1).44: u64) = move _312;
        StorageDead(_312);
        StorageDead(_313);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = _277;
        StorageLive(_326);
        _326 = _299;
        _324 = <i64 as SafeMath>::safe_add(move _325, move _326) -> [return: bb159, unwind continue];
    }

    bb157: {
        StorageLive(_317);
        _317 = ((_313 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_319);
        _319 = _317;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _319) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_319);
        StorageDead(_317);
        StorageDead(_312);
        StorageDead(_313);
        goto -> bb228;
    }

    bb159: {
        StorageDead(_326);
        StorageDead(_325);
        _323 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _324) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_324);
        _327 = discriminant(_323);
        switchInt(move _327) -> [0: bb161, 1: bb162, otherwise: bb4];
    }

    bb161: {
        StorageLive(_331);
        _331 = ((_323 as Continue).0: i64);
        _322 = _331;
        StorageDead(_331);
        _332 = Eq(const 2_i64, const 0_i64);
        assert(!move _332, "attempt to divide `{}` by zero", _322) -> [success: bb164, unwind continue];
    }

    bb162: {
        StorageLive(_328);
        _328 = ((_323 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_330);
        _330 = _328;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _330) -> [return: bb163, unwind continue];
    }

    bb163: {
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_322);
        StorageDead(_323);
        goto -> bb227;
    }

    bb164: {
        _333 = Eq(const 2_i64, const -1_i64);
        _334 = Eq(_322, const i64::MIN);
        _335 = BitAnd(move _333, move _334);
        assert(!move _335, "attempt to compute `{} / {}`, which would overflow", _322, const 2_i64) -> [success: bb165, unwind continue];
    }

    bb165: {
        _321 = Div(move _322, const 2_i64);
        StorageDead(_322);
        StorageDead(_323);
        StorageLive(_336);
        _337 = discriminant(_5);
        switchInt(move _337) -> [0: bb166, 1: bb167, otherwise: bb4];
    }

    bb166: {
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _344 = _3;
        StorageLive(_345);
        _345 = _4;
        _343 = <u64 as SafeMath>::safe_add(move _344, move _345) -> [return: bb168, unwind continue];
    }

    bb167: {
        StorageLive(_338);
        _338 = ((_5 as Some).0: u64);
        _336 = _338;
        StorageDead(_338);
        goto -> bb178;
    }

    bb168: {
        StorageDead(_345);
        StorageDead(_344);
        _342 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _343) -> [return: bb169, unwind continue];
    }

    bb169: {
        StorageDead(_343);
        _346 = discriminant(_342);
        switchInt(move _346) -> [0: bb170, 1: bb171, otherwise: bb4];
    }

    bb170: {
        StorageLive(_350);
        _350 = ((_342 as Continue).0: u64);
        _341 = _350;
        StorageDead(_350);
        _340 = <u64 as SafeMath>::safe_div(move _341, const 2_u64) -> [return: bb173, unwind continue];
    }

    bb171: {
        StorageLive(_347);
        _347 = ((_342 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_349);
        _349 = _347;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _349) -> [return: bb172, unwind continue];
    }

    bb172: {
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb225;
    }

    bb173: {
        StorageDead(_341);
        _339 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _340) -> [return: bb174, unwind continue];
    }

    bb174: {
        StorageDead(_340);
        _351 = discriminant(_339);
        switchInt(move _351) -> [0: bb175, 1: bb176, otherwise: bb4];
    }

    bb175: {
        StorageLive(_355);
        _355 = ((_339 as Continue).0: u64);
        _336 = _355;
        StorageDead(_355);
        StorageDead(_342);
        StorageDead(_339);
        goto -> bb178;
    }

    bb176: {
        StorageLive(_352);
        _352 = ((_339 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_354);
        _354 = _352;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _354) -> [return: bb177, unwind continue];
    }

    bb177: {
        StorageDead(_354);
        StorageDead(_352);
        goto -> bb225;
    }

    bb178: {
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &mut (*_1);
        StorageLive(_360);
        _360 = _2;
        StorageLive(_361);
        _361 = _336;
        StorageLive(_362);
        _362 = ((*_1).45: u64);
        StorageLive(_363);
        _363 = ((*_1).46: u64);
        _358 = update_amm_mark_std(move _359, move _360, move _361, move _362, move _363) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_359);
        _357 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _358) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_358);
        _364 = discriminant(_357);
        switchInt(move _364) -> [0: bb181, 1: bb182, otherwise: bb4];
    }

    bb181: {
        StorageLive(_368);
        _368 = ((_357 as Continue).0: bool);
        _356 = _368;
        StorageDead(_368);
        StorageDead(_357);
        StorageDead(_356);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        _372 = _321;
        _371 = <i64 as Cast>::cast::<u64>(move _372) -> [return: bb184, unwind continue];
    }

    bb182: {
        StorageLive(_365);
        _365 = ((_357 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_367);
        _367 = _365;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _367) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_357);
        StorageDead(_356);
        goto -> bb226;
    }

    bb184: {
        StorageDead(_372);
        _370 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _371) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_371);
        _373 = discriminant(_370);
        switchInt(move _373) -> [0: bb186, 1: bb187, otherwise: bb4];
    }

    bb186: {
        StorageLive(_377);
        _377 = ((_370 as Continue).0: u64);
        _369 = _377;
        StorageDead(_377);
        ((*_1).45: u64) = move _369;
        StorageDead(_369);
        StorageDead(_370);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        _393 = _7;
        StorageLive(_394);
        _394 = _8;
        _392 = <i64 as SafeMath>::safe_add(move _393, move _394) -> [return: bb189, unwind continue];
    }

    bb187: {
        StorageLive(_374);
        _374 = ((_370 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_376);
        _376 = _374;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _376) -> [return: bb188, unwind continue];
    }

    bb188: {
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_369);
        StorageDead(_370);
        goto -> bb226;
    }

    bb189: {
        StorageDead(_394);
        StorageDead(_393);
        _391 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _392) -> [return: bb190, unwind continue];
    }

    bb190: {
        StorageDead(_392);
        _395 = discriminant(_391);
        switchInt(move _395) -> [0: bb191, 1: bb192, otherwise: bb4];
    }

    bb191: {
        StorageLive(_399);
        _399 = ((_391 as Continue).0: i64);
        _390 = _399;
        StorageDead(_399);
        _389 = <i64 as SafeMath>::safe_div(move _390, const 2_i64) -> [return: bb194, unwind continue];
    }

    bb192: {
        StorageLive(_396);
        _396 = ((_391 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_398);
        _398 = _396;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _398) -> [return: bb193, unwind continue];
    }

    bb193: {
        StorageDead(_398);
        StorageDead(_396);
        StorageDead(_390);
        StorageDead(_389);
        goto -> bb222;
    }

    bb194: {
        StorageDead(_390);
        _388 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _389) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_389);
        _400 = discriminant(_388);
        switchInt(move _400) -> [0: bb196, 1: bb197, otherwise: bb4];
    }

    bb196: {
        StorageLive(_404);
        _404 = ((_388 as Continue).0: i64);
        _387 = _404;
        StorageDead(_404);
        _386 = <i64 as Cast>::cast::<i64>(move _387) -> [return: bb199, unwind continue];
    }

    bb197: {
        StorageLive(_401);
        _401 = ((_388 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_403);
        _403 = _401;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _403) -> [return: bb198, unwind continue];
    }

    bb198: {
        StorageDead(_403);
        StorageDead(_401);
        goto -> bb222;
    }

    bb199: {
        StorageDead(_387);
        _385 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _386) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_386);
        _405 = discriminant(_385);
        switchInt(move _405) -> [0: bb201, 1: bb202, otherwise: bb4];
    }

    bb201: {
        StorageLive(_409);
        _409 = ((_385 as Continue).0: i64);
        _384 = _409;
        StorageDead(_409);
        StorageLive(_410);
        _410 = _2;
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = ((*_1).46: u64);
        _413 = <u64 as Cast>::cast::<i64>(move _414) -> [return: bb204, unwind continue];
    }

    bb202: {
        StorageLive(_406);
        _406 = ((_385 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_408);
        _408 = _406;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _408) -> [return: bb203, unwind continue];
    }

    bb203: {
        StorageDead(_408);
        StorageDead(_406);
        goto -> bb223;
    }

    bb204: {
        StorageDead(_414);
        _412 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _413) -> [return: bb205, unwind continue];
    }

    bb205: {
        StorageDead(_413);
        _415 = discriminant(_412);
        switchInt(move _415) -> [0: bb206, 1: bb207, otherwise: bb4];
    }

    bb206: {
        StorageLive(_419);
        _419 = ((_412 as Continue).0: i64);
        _411 = _419;
        StorageDead(_419);
        StorageLive(_420);
        _420 = ((*_1).62: i64);
        StorageLive(_421);
        _421 = const _ as i64 (IntToInt);
        _383 = calculate_new_twap(move _384, move _410, move _411, move _420, move _421) -> [return: bb209, unwind continue];
    }

    bb207: {
        StorageLive(_416);
        _416 = ((_412 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_418);
        _418 = _416;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _418) -> [return: bb208, unwind continue];
    }

    bb208: {
        StorageDead(_418);
        StorageDead(_416);
        StorageDead(_411);
        StorageDead(_410);
        StorageDead(_384);
        StorageDead(_383);
        goto -> bb220;
    }

    bb209: {
        StorageDead(_421);
        StorageDead(_420);
        StorageDead(_411);
        StorageDead(_410);
        StorageDead(_384);
        _382 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _383) -> [return: bb210, unwind continue];
    }

    bb210: {
        StorageDead(_383);
        _422 = discriminant(_382);
        switchInt(move _422) -> [0: bb211, 1: bb212, otherwise: bb4];
    }

    bb211: {
        StorageLive(_426);
        _426 = ((_382 as Continue).0: i64);
        _381 = _426;
        StorageDead(_426);
        _380 = <i64 as Cast>::cast::<u64>(move _381) -> [return: bb214, unwind continue];
    }

    bb212: {
        StorageLive(_423);
        _423 = ((_382 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_425);
        _425 = _423;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _425) -> [return: bb213, unwind continue];
    }

    bb213: {
        StorageDead(_425);
        StorageDead(_423);
        goto -> bb220;
    }

    bb214: {
        StorageDead(_381);
        _379 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _380) -> [return: bb215, unwind continue];
    }

    bb215: {
        StorageDead(_380);
        _427 = discriminant(_379);
        switchInt(move _427) -> [0: bb216, 1: bb217, otherwise: bb4];
    }

    bb216: {
        StorageLive(_431);
        _431 = ((_379 as Continue).0: u64);
        _378 = _431;
        StorageDead(_431);
        ((*_1).46: u64) = move _378;
        StorageDead(_378);
        StorageDead(_412);
        StorageDead(_391);
        StorageDead(_388);
        StorageDead(_385);
        StorageDead(_382);
        StorageDead(_379);
        StorageLive(_432);
        _432 = _2;
        ((*_1).62: i64) = move _432;
        StorageDead(_432);
        StorageLive(_433);
        _433 = _321;
        _0 = <i64 as Cast>::cast::<u64>(move _433) -> [return: bb219, unwind continue];
    }

    bb217: {
        StorageLive(_428);
        _428 = ((_379 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_430);
        _430 = _428;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _430) -> [return: bb218, unwind continue];
    }

    bb218: {
        StorageDead(_430);
        StorageDead(_428);
        goto -> bb221;
    }

    bb219: {
        StorageDead(_433);
        StorageDead(_336);
        StorageDead(_321);
        StorageDead(_299);
        StorageDead(_277);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_100);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb249;
    }

    bb220: {
        StorageDead(_381);
        StorageDead(_380);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_378);
        StorageDead(_412);
        goto -> bb224;
    }

    bb222: {
        StorageDead(_387);
        StorageDead(_386);
        goto -> bb223;
    }

    bb223: {
        StorageDead(_384);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageDead(_378);
        goto -> bb224;
    }

    bb224: {
        StorageDead(_391);
        StorageDead(_388);
        StorageDead(_385);
        StorageDead(_382);
        StorageDead(_379);
        goto -> bb226;
    }

    bb225: {
        StorageDead(_342);
        StorageDead(_339);
        goto -> bb226;
    }

    bb226: {
        StorageDead(_336);
        goto -> bb227;
    }

    bb227: {
        StorageDead(_321);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_299);
        goto -> bb229;
    }

    bb229: {
        StorageDead(_277);
        StorageDead(_111);
        StorageDead(_110);
        goto -> bb242;
    }

    bb230: {
        StorageDead(_260);
        goto -> bb241;
    }

    bb231: {
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_223);
        StorageDead(_214);
        StorageDead(_213);
        goto -> bb232;
    }

    bb232: {
        StorageDead(_211);
        StorageDead(_163);
        StorageDead(_152);
        StorageDead(_241);
        StorageDead(_237);
        goto -> bb233;
    }

    bb233: {
        StorageDead(_224);
        goto -> bb234;
    }

    bb234: {
        StorageDead(_215);
        StorageDead(_212);
        goto -> bb237;
    }

    bb235: {
        StorageDead(_188);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_175);
        StorageDead(_166);
        StorageDead(_165);
        goto -> bb236;
    }

    bb236: {
        StorageDead(_163);
        StorageDead(_152);
        goto -> bb237;
    }

    bb237: {
        StorageDead(_193);
        StorageDead(_189);
        goto -> bb238;
    }

    bb238: {
        StorageDead(_176);
        goto -> bb239;
    }

    bb239: {
        StorageDead(_167);
        StorageDead(_164);
        goto -> bb241;
    }

    bb240: {
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb241;
    }

    bb241: {
        StorageDead(_113);
        StorageDead(_112);
        goto -> bb242;
    }

    bb242: {
        StorageDead(_100);
        goto -> bb243;
    }

    bb243: {
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb249;
    }

    bb244: {
        StorageDead(_37);
        StorageDead(_10);
        StorageDead(_50);
        goto -> bb245;
    }

    bb245: {
        StorageDead(_41);
        StorageDead(_38);
        goto -> bb247;
    }

    bb246: {
        StorageDead(_10);
        goto -> bb247;
    }

    bb247: {
        StorageDead(_23);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_9);
        goto -> bb249;
    }

    bb249: {
        return;
    }

    bb250 (cleanup): {
        drop(_138) -> [return: bb252, unwind terminate(cleanup)];
    }

    bb251 (cleanup): {
        drop(_77) -> [return: bb252, unwind terminate(cleanup)];
    }

    bb252 (cleanup): {
        resume;
    }
}
