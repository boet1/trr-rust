digraph Mir_0_2262 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_insurance_fuel_bonus(_1: &amp;ReErased state::spot_market::SpotMarket, _2: u64, _3: i64, _4: u32) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: u64;<br align="left"/>let mut _7: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _8: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _9: u128;<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _11: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _12: u128;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _14: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _15: u128;<br align="left"/>let mut _16: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _17: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _18: u128;<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _20: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _21: u64;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: i64;<br align="left"/>let mut _25: isize;<br align="left"/>let _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _27: !;<br align="left"/>let mut _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _29: u128;<br align="left"/>let mut _30: u128;<br align="left"/>let mut _31: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _32: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _33: u32;<br align="left"/>let mut _34: isize;<br align="left"/>let _35: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _36: !;<br align="left"/>let mut _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _38: u128;<br align="left"/>let mut _39: isize;<br align="left"/>let _40: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _41: !;<br align="left"/>let mut _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _43: u128;<br align="left"/>let mut _44: u128;<br align="left"/>let mut _45: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _46: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _47: u8;<br align="left"/>let mut _48: isize;<br align="left"/>let _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _50: !;<br align="left"/>let mut _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _52: u128;<br align="left"/>let mut _53: isize;<br align="left"/>let _54: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _55: !;<br align="left"/>let mut _56: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _57: u128;<br align="left"/>let mut _58: isize;<br align="left"/>let _59: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _60: !;<br align="left"/>let mut _61: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _62: u128;<br align="left"/>let mut _63: isize;<br align="left"/>let _64: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _65: !;<br align="left"/>let mut _66: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _67: u64;<br align="left"/>let mut _68: u64;<br align="left"/>let mut _69: bool;<br align="left"/>let mut _70: bool;<br align="left"/>debug spot_market =&gt; _1;<br align="left"/>debug stake_amount =&gt; _2;<br align="left"/>debug stake_amount_delta =&gt; _3;<br align="left"/>debug fuel_bonus_numerator =&gt; _4;<br align="left"/>debug residual =&gt; _26;<br align="left"/>debug val =&gt; _29;<br align="left"/>debug residual =&gt; _35;<br align="left"/>debug val =&gt; _38;<br align="left"/>debug residual =&gt; _40;<br align="left"/>debug val =&gt; _43;<br align="left"/>debug residual =&gt; _49;<br align="left"/>debug val =&gt; _52;<br align="left"/>debug residual =&gt; _54;<br align="left"/>debug val =&gt; _57;<br align="left"/>debug residual =&gt; _59;<br align="left"/>debug val =&gt; _62;<br align="left"/>debug residual =&gt; _64;<br align="left"/>debug val =&gt; _67;<br align="left"/>>;
    bb0__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _2<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _3<br/></td></tr><tr><td align="left">_23 = core::num::&lt;impl i64&gt;::unsigned_abs(move _24)</td></tr></table>>];
    bb1__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">_21 = core::num::&lt;impl u64&gt;::saturating_sub(move _22, move _23)</td></tr></table>>];
    bb2__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">_20 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _21)</td></tr></table>>];
    bb3__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb4__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_25 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb5__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_19 as Continue).0: u128)<br/>_18 = _29<br/>StorageDead(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>StorageLive(_33)<br/>_33 = _4<br/></td></tr><tr><td align="left">_32 = &lt;u32 as Cast&gt;::cast::&lt;u128&gt;(move _33)</td></tr></table>>];
    bb6__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb7__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_28)<br/>_28 = _26<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _28)</td></tr></table>>];
    bb8__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_26)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/></td></tr><tr><td align="left">_31 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _32)</td></tr></table>>];
    bb10__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>_34 = discriminant(_31)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb11__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>_38 = ((_31 as Continue).0: u128)<br/>_30 = _38<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_17 = &lt;u128 as SafeMath&gt;::safe_mul(move _18, move _30)</td></tr></table>>];
    bb12__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_31 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_37)<br/>_37 = _35<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _37)</td></tr></table>>];
    bb13__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_35)<br/>StorageDead(_30)<br/>StorageDead(_18)<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">_16 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _17)</td></tr></table>>];
    bb15__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>_39 = discriminant(_16)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb16__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageLive(_43)<br/>_43 = ((_16 as Continue).0: u128)<br/>_15 = _43<br/>StorageDead(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>_47 = ((*_1).60: u8)<br/></td></tr><tr><td align="left">_46 = &lt;u8 as Cast&gt;::cast::&lt;u128&gt;(move _47)</td></tr></table>>];
    bb17__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_16 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_42)<br/>_42 = _40<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _42)</td></tr></table>>];
    bb18__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/></td></tr><tr><td align="left">_45 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _46)</td></tr></table>>];
    bb20__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/>_48 = discriminant(_45)<br/></td></tr><tr><td align="left">switchInt(move _48)</td></tr></table>>];
    bb21__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_52)<br/>_52 = ((_45 as Continue).0: u128)<br/>_44 = _52<br/>StorageDead(_52)<br/></td></tr><tr><td align="left">_14 = &lt;u128 as SafeMath&gt;::safe_mul(move _15, move _44)</td></tr></table>>];
    bb22__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_45 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_51)<br/>_51 = _49<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _51)</td></tr></table>>];
    bb23__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_51)<br/>StorageDead(_49)<br/>StorageDead(_44)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb25__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_53 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _53)</td></tr></table>>];
    bb26__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_57)<br/>_57 = ((_13 as Continue).0: u128)<br/>_12 = _57<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">_11 = &lt;u128 as SafeMath&gt;::safe_div(move _12, const _)</td></tr></table>>];
    bb27__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_54)<br/>_54 = ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_56)<br/>_56 = _54<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _56)</td></tr></table>>];
    bb28__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_56)<br/>StorageDead(_54)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb30__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_58 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _58)</td></tr></table>>];
    bb31__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_62)<br/>_62 = ((_10 as Continue).0: u128)<br/>_9 = _62<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">_8 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _9)</td></tr></table>>];
    bb32__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>_59 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_61)<br/>_61 = _59<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _61)</td></tr></table>>];
    bb33__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_61)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/></td></tr><tr><td align="left">_7 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _8)</td></tr></table>>];
    bb35__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>_63 = discriminant(_7)<br/></td></tr><tr><td align="left">switchInt(move _63)</td></tr></table>>];
    bb36__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageLive(_67)<br/>_67 = ((_7 as Continue).0: u64)<br/>_6 = _67<br/>StorageDead(_67)<br/>StorageLive(_68)<br/>_69 = Eq(const 10_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _69, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb37__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_64)<br/>_64 = ((_7 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_66)<br/>_66 = _64<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _66)</td></tr></table>>];
    bb38__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>StorageDead(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb39__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">_68 = Div(const _, const 10_u64)<br/>_70 = Eq(_68, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _70, &quot;attempt to divide `{}` by zero&quot;, _6)</td></tr></table>>];
    bb40__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">_5 = Div(move _6, move _68)<br/>StorageDead(_68)<br/>StorageDead(_6)<br/>_0 = std::result::Result::&lt;u64, error::ErrorCode&gt;::Ok(move _5)<br/>StorageDead(_5)<br/>StorageDead(_45)<br/>StorageDead(_31)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb41__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb44__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_13)<br/>StorageDead(_10)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_2262 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2262 -> bb1__0_2262 [label="return"];
    bb1__0_2262 -> bb2__0_2262 [label="return"];
    bb2__0_2262 -> bb3__0_2262 [label="return"];
    bb3__0_2262 -> bb4__0_2262 [label="return"];
    bb4__0_2262 -> bb5__0_2262 [label="0"];
    bb4__0_2262 -> bb7__0_2262 [label="1"];
    bb4__0_2262 -> bb6__0_2262 [label="otherwise"];
    bb5__0_2262 -> bb9__0_2262 [label="return"];
    bb7__0_2262 -> bb8__0_2262 [label="return"];
    bb8__0_2262 -> bb46__0_2262 [label=""];
    bb9__0_2262 -> bb10__0_2262 [label="return"];
    bb10__0_2262 -> bb11__0_2262 [label="0"];
    bb10__0_2262 -> bb12__0_2262 [label="1"];
    bb10__0_2262 -> bb6__0_2262 [label="otherwise"];
    bb11__0_2262 -> bb14__0_2262 [label="return"];
    bb12__0_2262 -> bb13__0_2262 [label="return"];
    bb13__0_2262 -> bb44__0_2262 [label=""];
    bb14__0_2262 -> bb15__0_2262 [label="return"];
    bb15__0_2262 -> bb16__0_2262 [label="0"];
    bb15__0_2262 -> bb17__0_2262 [label="1"];
    bb15__0_2262 -> bb6__0_2262 [label="otherwise"];
    bb16__0_2262 -> bb19__0_2262 [label="return"];
    bb17__0_2262 -> bb18__0_2262 [label="return"];
    bb18__0_2262 -> bb44__0_2262 [label=""];
    bb19__0_2262 -> bb20__0_2262 [label="return"];
    bb20__0_2262 -> bb21__0_2262 [label="0"];
    bb20__0_2262 -> bb22__0_2262 [label="1"];
    bb20__0_2262 -> bb6__0_2262 [label="otherwise"];
    bb21__0_2262 -> bb24__0_2262 [label="return"];
    bb22__0_2262 -> bb23__0_2262 [label="return"];
    bb23__0_2262 -> bb41__0_2262 [label=""];
    bb24__0_2262 -> bb25__0_2262 [label="return"];
    bb25__0_2262 -> bb26__0_2262 [label="0"];
    bb25__0_2262 -> bb27__0_2262 [label="1"];
    bb25__0_2262 -> bb6__0_2262 [label="otherwise"];
    bb26__0_2262 -> bb29__0_2262 [label="return"];
    bb27__0_2262 -> bb28__0_2262 [label="return"];
    bb28__0_2262 -> bb41__0_2262 [label=""];
    bb29__0_2262 -> bb30__0_2262 [label="return"];
    bb30__0_2262 -> bb31__0_2262 [label="0"];
    bb30__0_2262 -> bb32__0_2262 [label="1"];
    bb30__0_2262 -> bb6__0_2262 [label="otherwise"];
    bb31__0_2262 -> bb34__0_2262 [label="return"];
    bb32__0_2262 -> bb33__0_2262 [label="return"];
    bb33__0_2262 -> bb42__0_2262 [label=""];
    bb34__0_2262 -> bb35__0_2262 [label="return"];
    bb35__0_2262 -> bb36__0_2262 [label="0"];
    bb35__0_2262 -> bb37__0_2262 [label="1"];
    bb35__0_2262 -> bb6__0_2262 [label="otherwise"];
    bb36__0_2262 -> bb39__0_2262 [label="success"];
    bb37__0_2262 -> bb38__0_2262 [label="return"];
    bb38__0_2262 -> bb43__0_2262 [label=""];
    bb39__0_2262 -> bb40__0_2262 [label="success"];
    bb40__0_2262 -> bb47__0_2262 [label=""];
    bb41__0_2262 -> bb42__0_2262 [label=""];
    bb42__0_2262 -> bb43__0_2262 [label=""];
    bb43__0_2262 -> bb45__0_2262 [label=""];
    bb44__0_2262 -> bb45__0_2262 [label=""];
    bb45__0_2262 -> bb46__0_2262 [label=""];
    bb46__0_2262 -> bb47__0_2262 [label=""];
}
