// MIR for `calculate_base_asset_amount_to_trade_to_price` after PreCodegen

fn calculate_base_asset_amount_to_trade_to_price(_1: &AMM, _2: u64, _3: controller::position::PositionDirection) -> std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> {
    debug amm => _1;
    debug limit_price => _2;
    debug direction => _3;
    let mut _0: std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode>;
    let _4: math::bn::U192;
    let mut _5: u128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _8: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _9: math::bn::U192;
    let mut _10: math::bn::U192;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: bool;
    let mut _20: u64;
    let mut _21: ();
    let _23: ();
    let mut _24: &str;
    let _25: &str;
    let mut _26: &std::string::String;
    let _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[&str; 2];
    let _33: &[&str; 2];
    let _34: [&str; 2];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let mut _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &error::ErrorCode;
    let _41: &error::ErrorCode;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: error::ErrorCode;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _53: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _54: math::bn::U192;
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _56: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _57: math::bn::U192;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _59: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _60: math::bn::U192;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _62: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _63: math::bn::U192;
    let mut _64: math::bn::U192;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: math::bn::U192;
    let mut _71: u64;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: math::bn::U192;
    let mut _78: u128;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: math::bn::U192;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _92: std::result::Result<u128, error::ErrorCode>;
    let mut _93: math::bn::U192;
    let mut _94: &math::bn::U192;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: bool;
    let mut _102: u32;
    let mut _104: (u128, u128);
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _106: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _107: &state::perp_market::AMM;
    let mut _108: controller::position::PositionDirection;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _114: bool;
    let mut _115: u128;
    let mut _116: u128;
    let mut _118: std::result::Result<u64, error::ErrorCode>;
    let mut _119: u128;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _121: std::result::Result<u128, error::ErrorCode>;
    let mut _122: u128;
    let mut _123: u128;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _129: (u64, controller::position::PositionDirection);
    let mut _130: u64;
    let mut _131: controller::position::PositionDirection;
    let mut _133: std::result::Result<u64, error::ErrorCode>;
    let mut _134: u128;
    let mut _135: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _136: std::result::Result<u128, error::ErrorCode>;
    let mut _137: u128;
    let mut _138: u128;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _144: (u64, controller::position::PositionDirection);
    let mut _145: u64;
    let mut _146: controller::position::PositionDirection;
    scope 1 {
        debug invariant_sqrt_u192 => _4;
        let _6: math::bn::U192;
        let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _15: math::bn::U192;
        scope 2 {
            debug invariant => _6;
            let _22: error::ErrorCode;
            let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _50: ();
            let _51: math::bn::U192;
            let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _69: math::bn::U192;
            let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _76: math::bn::U192;
            let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _83: math::bn::U192;
            let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _89: math::bn::U192;
            scope 7 {
                debug error_code => _22;
                let _29: std::string::String;
                let mut _147: &[&str; 2];
                scope 8 {
                    debug res => _29;
                }
            }
            scope 9 {
                debug residual => _47;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _50;
                scope 12 {
                }
            }
            scope 13 {
                debug new_base_asset_reserve_squared => _51;
                let _90: u128;
                let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _99: u128;
                scope 30 {
                    debug new_base_asset_reserve => _90;
                    let _100: u128;
                    let _103: u128;
                    let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _113: (u128, u128);
                    scope 35 {
                        debug base_asset_reserve_before => _100;
                        let _117: u64;
                        let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _128: u128;
                        let _132: u64;
                        let _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _143: u128;
                        scope 41 {
                            debug max_trade_amount => _117;
                        }
                        scope 42 {
                            debug residual => _125;
                            scope 43 {
                            }
                        }
                        scope 44 {
                            debug val => _128;
                            scope 45 {
                            }
                        }
                        scope 46 {
                            debug max_trade_amount => _132;
                        }
                        scope 47 {
                            debug residual => _140;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug val => _143;
                            scope 50 {
                            }
                        }
                    }
                    scope 36 {
                        debug spread_base_asset_reserve => _103;
                    }
                    scope 37 {
                        debug residual => _110;
                        scope 38 {
                        }
                    }
                    scope 39 {
                        debug val => _113;
                        scope 40 {
                        }
                    }
                }
                scope 31 {
                    debug residual => _96;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug val => _99;
                    scope 34 {
                    }
                }
            }
            scope 14 {
                debug residual => _66;
                scope 15 {
                }
            }
            scope 16 {
                debug val => _69;
                scope 17 {
                }
            }
            scope 18 {
                debug residual => _73;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _76;
                scope 21 {
                }
            }
            scope 22 {
                debug residual => _80;
                scope 23 {
                }
            }
            scope 24 {
                debug val => _83;
                scope 25 {
                }
            }
            scope 26 {
                debug residual => _86;
                scope 27 {
                }
            }
            scope 28 {
                debug val => _89;
                scope 29 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).10: u128);
        _4 = <U192 as From<u128>>::from(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _4;
        StorageLive(_10);
        _10 = _4;
        _8 = <U192 as SafeMath>::safe_mul(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: math::bn::U192);
        _6 = _15;
        StorageDead(_15);
        StorageDead(_7);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _2;
        _19 = Gt(move _20, const 0_u64);
        switchInt(move _19) -> [0: bb9, otherwise: bb8];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb84;
    }

    bb8: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = ();
        _18 = std::result::Result::<(), error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        goto -> bb17;
    }

    bb9: {
        StorageDead(_20);
        StorageLive(_22);
        _22 = error::ErrorCode::InvalidOrderLimitPrice;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _147 = const _;
        _33 = &(*_147);
        _32 = &(*_33);
        _31 = move _32 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_22;
        _40 = &(*_41);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _40) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_40);
        _38 = [move _39];
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = move _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_36);
        _30 = Arguments::<'_>::new_v1(move _31, move _35) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_35);
        StorageDead(_31);
        _29 = format(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        _28 = move _29;
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = <String as Deref>::deref(move _26) -> [return: bb13, unwind: bb86];
    }

    bb13: {
        _24 = &(*_25);
        StorageDead(_26);
        _23 = solana_program::log::sol_log(move _24) -> [return: bb14, unwind: bb86];
    }

    bb14: {
        StorageDead(_24);
        drop(_28) -> [return: bb15, unwind: bb87];
    }

    bb15: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = const "limit_price <= 0";
        _43 = &(*_44);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_43);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_45);
        _45 = _22;
        _18 = std::result::Result::<(), error::ErrorCode>::Err(move _45);
        StorageDead(_45);
        StorageDead(_22);
        goto -> bb17;
    }

    bb17: {
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_18);
        _46 = discriminant(_17);
        switchInt(move _46) -> [0: bb19, 1: bb20, otherwise: bb5];
    }

    bb19: {
        StorageLive(_50);
        _50 = ((_17 as Continue).0: ());
        _16 = _50;
        StorageDead(_50);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _6;
        StorageLive(_64);
        _64 = <U192 as From<u128>>::from(const _) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_47);
        _47 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb84;
    }

    bb22: {
        _62 = <U192 as SafeMath>::safe_mul(move _63, move _64) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_64);
        StorageDead(_63);
        _61 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _62) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_62);
        _65 = discriminant(_61);
        switchInt(move _65) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_69);
        _69 = ((_61 as Continue).0: math::bn::U192);
        _60 = _69;
        StorageDead(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _2;
        _70 = <U192 as From<u64>>::from(move _71) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_66);
        _66 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb80;
    }

    bb28: {
        StorageDead(_71);
        _59 = <U192 as SafeMath>::safe_div(move _60, move _70) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_60);
        _58 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _59) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_59);
        _72 = discriminant(_58);
        switchInt(move _72) -> [0: bb31, 1: bb32, otherwise: bb5];
    }

    bb31: {
        StorageLive(_76);
        _76 = ((_58 as Continue).0: math::bn::U192);
        _57 = _76;
        StorageDead(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = ((*_1).11: u128);
        _77 = <U192 as From<u128>>::from(move _78) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_73);
        _73 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_75);
        StorageDead(_73);
        goto -> bb80;
    }

    bb34: {
        StorageDead(_78);
        _56 = <U192 as SafeMath>::safe_mul(move _57, move _77) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_77);
        StorageDead(_57);
        _55 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _56) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_56);
        _79 = discriminant(_55);
        switchInt(move _79) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_83);
        _83 = ((_55 as Continue).0: math::bn::U192);
        _54 = _83;
        StorageDead(_83);
        StorageLive(_84);
        _84 = <U192 as From<u128>>::from(const _) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_80);
        _80 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_82);
        StorageDead(_80);
        goto -> bb81;
    }

    bb40: {
        _53 = <U192 as SafeMath>::safe_div(move _54, move _84) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_84);
        StorageDead(_54);
        _52 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _53) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_53);
        _85 = discriminant(_52);
        switchInt(move _85) -> [0: bb43, 1: bb44, otherwise: bb5];
    }

    bb43: {
        StorageLive(_89);
        _89 = ((_52 as Continue).0: math::bn::U192);
        _51 = _89;
        StorageDead(_89);
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_51;
        _93 = U192::integer_sqrt(move _94) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_86);
        _86 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_88);
        StorageDead(_86);
        goto -> bb82;
    }

    bb46: {
        StorageDead(_94);
        _92 = U192::try_to_u128(move _93) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_93);
        _91 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _92) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_92);
        _95 = discriminant(_91);
        switchInt(move _95) -> [0: bb49, 1: bb50, otherwise: bb5];
    }

    bb49: {
        StorageLive(_99);
        _99 = ((_91 as Continue).0: u128);
        _90 = _99;
        StorageDead(_99);
        StorageDead(_91);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = ((*_1).63: u32);
        _101 = Gt(move _102, const 0_u32);
        switchInt(move _101) -> [0: bb53, otherwise: bb52];
    }

    bb50: {
        StorageLive(_96);
        _96 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_91);
        goto -> bb79;
    }

    bb52: {
        StorageDead(_102);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &(*_1);
        StorageLive(_108);
        _108 = _3;
        _106 = get_spread_reserves(move _107, move _108) -> [return: bb54, unwind continue];
    }

    bb53: {
        StorageDead(_102);
        _100 = ((*_1).5: u128);
        goto -> bb59;
    }

    bb54: {
        StorageDead(_108);
        StorageDead(_107);
        _105 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _106) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_106);
        _109 = discriminant(_105);
        switchInt(move _109) -> [0: bb56, 1: bb57, otherwise: bb5];
    }

    bb56: {
        StorageLive(_113);
        _113 = ((_105 as Continue).0: (u128, u128));
        _104 = _113;
        StorageDead(_113);
        StorageLive(_103);
        _103 = (_104.0: u128);
        StorageDead(_105);
        StorageDead(_104);
        _100 = _103;
        StorageDead(_103);
        goto -> bb59;
    }

    bb57: {
        StorageLive(_110);
        _110 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_101);
        goto -> bb78;
    }

    bb59: {
        StorageDead(_101);
        StorageLive(_114);
        StorageLive(_115);
        _115 = _90;
        StorageLive(_116);
        _116 = _100;
        _114 = Gt(move _115, move _116);
        switchInt(move _114) -> [0: bb68, otherwise: bb60];
    }

    bb60: {
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = _90;
        StorageLive(_123);
        _123 = _100;
        _121 = <u128 as SafeMath>::safe_sub(move _122, move _123) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_123);
        StorageDead(_122);
        _120 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _121) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_121);
        _124 = discriminant(_120);
        switchInt(move _124) -> [0: bb63, 1: bb64, otherwise: bb5];
    }

    bb63: {
        StorageLive(_128);
        _128 = ((_120 as Continue).0: u128);
        _119 = _128;
        StorageDead(_128);
        _118 = <u128 as Cast>::cast::<u64>(move _119) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_125);
        _125 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_120);
        StorageDead(_117);
        goto -> bb77;
    }

    bb66: {
        StorageDead(_119);
        _117 = std::result::Result::<u64, error::ErrorCode>::unwrap_or(move _118, const _) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_118);
        StorageDead(_120);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _117;
        StorageLive(_131);
        _131 = controller::position::PositionDirection::Short;
        _129 = (move _130, move _131);
        StorageDead(_131);
        StorageDead(_130);
        _0 = std::result::Result::<(u64, controller::position::PositionDirection), error::ErrorCode>::Ok(move _129);
        StorageDead(_129);
        StorageDead(_117);
        goto -> bb76;
    }

    bb68: {
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = _100;
        StorageLive(_138);
        _138 = _90;
        _136 = <u128 as SafeMath>::safe_sub(move _137, move _138) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_138);
        StorageDead(_137);
        _135 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _136) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_136);
        _139 = discriminant(_135);
        switchInt(move _139) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_143);
        _143 = ((_135 as Continue).0: u128);
        _134 = _143;
        StorageDead(_143);
        _133 = <u128 as Cast>::cast::<u64>(move _134) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_140);
        _140 = ((_135 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_142);
        _142 = _140;
        _0 = <std::result::Result<(u64, controller::position::PositionDirection), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _142) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_135);
        StorageDead(_132);
        goto -> bb77;
    }

    bb74: {
        StorageDead(_134);
        _132 = std::result::Result::<u64, error::ErrorCode>::unwrap_or(move _133, const _) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_133);
        StorageDead(_135);
        StorageLive(_144);
        StorageLive(_145);
        _145 = _132;
        StorageLive(_146);
        _146 = controller::position::PositionDirection::Long;
        _144 = (move _145, move _146);
        StorageDead(_146);
        StorageDead(_145);
        _0 = std::result::Result::<(u64, controller::position::PositionDirection), error::ErrorCode>::Ok(move _144);
        StorageDead(_144);
        StorageDead(_132);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_114);
        StorageDead(_100);
        StorageDead(_90);
        StorageDead(_51);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb85;
    }

    bb77: {
        StorageDead(_114);
        goto -> bb78;
    }

    bb78: {
        StorageDead(_100);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_90);
        goto -> bb83;
    }

    bb80: {
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_52);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_51);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb85;
    }

    bb85: {
        return;
    }

    bb86 (cleanup): {
        drop(_28) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        resume;
    }
}
