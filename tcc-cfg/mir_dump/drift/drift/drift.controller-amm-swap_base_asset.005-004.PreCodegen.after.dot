digraph Mir_0_83 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn swap_base_asset(_1: &amp;ReErased mut state::perp_market::PerpMarket, _2: u64, _3: controller::amm::SwapDirection) -&gt; std::result::Result&lt;(u64, i64), error::ErrorCode&gt;<br align="left"/>let _4: u128;<br align="left"/>let _5: u128;<br align="left"/>let _6: u64;<br align="left"/>let _7: u64;<br align="left"/>let mut _8: (u128, u128, u64, u64);<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u128, u128, u64, u64)&gt;;<br align="left"/>let mut _10: std::result::Result&lt;(u128, u128, u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _11: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _12: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _13: u64;<br align="left"/>let mut _14: controller::amm::SwapDirection;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: (u128, u128, u64, u64);<br align="left"/>let mut _20: u128;<br align="left"/>let mut _21: u128;<br align="left"/>let mut _22: (u64, i64);<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: i64;<br align="left"/>let mut _25: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _26: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _27: u64;<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _32: i64;<br align="left"/>debug market =&gt; _1;<br align="left"/>debug base_asset_swap_amount =&gt; _2;<br align="left"/>debug direction =&gt; _3;<br align="left"/>debug new_base_asset_reserve =&gt; _4;<br align="left"/>debug new_quote_asset_reserve =&gt; _5;<br align="left"/>debug quote_asset_amount =&gt; _6;<br align="left"/>debug quote_asset_amount_surplus =&gt; _7;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>>;
    bb0__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;((*_1).1: state::perp_market::AMM)<br/>_11 = &amp;(*_12)<br/>StorageLive(_13)<br/>_13 = _2<br/>StorageLive(_14)<br/>_14 = _3<br/></td></tr><tr><td align="left">_10 = calculate_base_swap_output_with_spread(move _11, move _13, move _14)</td></tr></table>>];
    bb1__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;(u128, u128, u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb2__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_15 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb3__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_9 as Continue).0: (u128, u128, u64, u64))<br/>_8 = _19<br/>StorageDead(_19)<br/>StorageLive(_4)<br/>_4 = (_8.0: u128)<br/>StorageLive(_5)<br/>_5 = (_8.1: u128)<br/>StorageLive(_6)<br/>_6 = (_8.2: u64)<br/>StorageLive(_7)<br/>_7 = (_8.3: u64)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageLive(_20)<br/>_20 = _4<br/>(((*_1).1: state::perp_market::AMM).5: u128) = move _20<br/>StorageDead(_20)<br/>StorageLive(_21)<br/>_21 = _5<br/>(((*_1).1: state::perp_market::AMM).6: u128) = move _21<br/>StorageDead(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _6<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _7<br/></td></tr><tr><td align="left">_26 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _27)</td></tr></table>>];
    bb4__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb6__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_12)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/></td></tr><tr><td align="left">_25 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _26)</td></tr></table>>];
    bb8__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_28 = discriminant(_25)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb9__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_25 as Continue).0: i64)<br/>_24 = _32<br/>StorageDead(_32)<br/>_22 = (move _23, move _24)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>_0 = std::result::Result::&lt;(u64, i64), error::ErrorCode&gt;::Ok(move _22)<br/>StorageDead(_22)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_25 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_31)<br/>_31 = _29<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, i64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb11__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_83 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_83 -> bb1__0_83 [label="return"];
    bb1__0_83 -> bb2__0_83 [label="return"];
    bb2__0_83 -> bb3__0_83 [label="0"];
    bb2__0_83 -> bb5__0_83 [label="1"];
    bb2__0_83 -> bb4__0_83 [label="otherwise"];
    bb3__0_83 -> bb7__0_83 [label="return"];
    bb5__0_83 -> bb6__0_83 [label="return"];
    bb6__0_83 -> bb12__0_83 [label=""];
    bb7__0_83 -> bb8__0_83 [label="return"];
    bb8__0_83 -> bb9__0_83 [label="0"];
    bb8__0_83 -> bb10__0_83 [label="1"];
    bb8__0_83 -> bb4__0_83 [label="otherwise"];
    bb9__0_83 -> bb12__0_83 [label=""];
    bb10__0_83 -> bb11__0_83 [label="return"];
    bb11__0_83 -> bb12__0_83 [label=""];
}
