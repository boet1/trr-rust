digraph Mir_0_2491 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn calculate_fill_for_matched_orders(_1: u64, _2: u64, _3: u64, _4: u32, _5: controller::position::PositionDirection) -&gt; std::result::Result&lt;(u64, u64), error::ErrorCode&gt;<br align="left"/>let _6: u64;<br align="left"/>let mut _7: u64;<br align="left"/>let mut _8: u64;<br align="left"/>let _9: u64;<br align="left"/>let mut _10: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _11: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _12: u64;<br align="left"/>let mut _13: u64;<br align="left"/>let mut _14: u32;<br align="left"/>let mut _15: controller::position::PositionDirection;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _20: u64;<br align="left"/>let mut _21: (u64, u64);<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: u64;<br align="left"/>debug maker_base_asset_amount =&gt; _1;<br align="left"/>debug maker_price =&gt; _2;<br align="left"/>debug taker_base_asset_amount =&gt; _3;<br align="left"/>debug base_decimals =&gt; _4;<br align="left"/>debug maker_direction =&gt; _5;<br align="left"/>debug base_asset_amount =&gt; _6;<br align="left"/>debug quote_asset_amount =&gt; _9;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>>;
    bb0__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _1<br/>StorageLive(_8)<br/>_8 = _3<br/></td></tr><tr><td align="left">_6 = std::cmp::min::&lt;u64&gt;(move _7, move _8)</td></tr></table>>];
    bb1__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_7)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = _6<br/>StorageLive(_13)<br/>_13 = _2<br/>StorageLive(_14)<br/>_14 = _4<br/>StorageLive(_15)<br/>_15 = _5<br/></td></tr><tr><td align="left">_11 = calculate_quote_asset_amount_for_maker_order(move _12, move _13, move _14, move _15)</td></tr></table>>];
    bb2__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _11)</td></tr></table>>];
    bb3__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_16 = discriminant(_10)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb4__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_10 as Continue).0: u64)<br/>_9 = _20<br/>StorageDead(_20)<br/>StorageDead(_10)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>_22 = _6<br/>StorageLive(_23)<br/>_23 = _9<br/>_21 = (move _22, move _23)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>_0 = std::result::Result::&lt;(u64, u64), error::ErrorCode&gt;::Ok(move _21)<br/>StorageDead(_21)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb5__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_10 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_19)<br/>_19 = _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb7__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb8__0_2491 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2491 -> bb1__0_2491 [label="return"];
    bb1__0_2491 -> bb2__0_2491 [label="return"];
    bb2__0_2491 -> bb3__0_2491 [label="return"];
    bb3__0_2491 -> bb4__0_2491 [label="0"];
    bb3__0_2491 -> bb6__0_2491 [label="1"];
    bb3__0_2491 -> bb5__0_2491 [label="otherwise"];
    bb4__0_2491 -> bb8__0_2491 [label=""];
    bb6__0_2491 -> bb7__0_2491 [label="return"];
    bb7__0_2491 -> bb8__0_2491 [label=""];
}
