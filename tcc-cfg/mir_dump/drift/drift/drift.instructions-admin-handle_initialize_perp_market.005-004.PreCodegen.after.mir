// MIR for `admin::handle_initialize_perp_market` after PreCodegen

fn admin::handle_initialize_perp_market(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializePerpMarket<'_>>, _2: u16, _3: u128, _4: u128, _5: i64, _6: u128, _7: state::oracle::OracleSource, _8: state::perp_market::ContractTier, _9: u32, _10: u32, _11: u32, _12: u32, _13: u32, _14: bool, _15: u32, _16: u32, _17: u128, _18: u64, _19: u64, _20: u64, _21: u64, _22: u64, _23: u128, _24: u8, _25: u8, _26: [u8; 32]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    debug amm_base_asset_reserve => _3;
    debug amm_quote_asset_reserve => _4;
    debug amm_periodicity => _5;
    debug amm_peg_multiplier => _6;
    debug oracle_source => _7;
    debug contract_tier => _8;
    debug margin_ratio_initial => _9;
    debug margin_ratio_maintenance => _10;
    debug liquidator_fee => _11;
    debug if_liquidation_fee => _12;
    debug imf_factor => _13;
    debug active_status => _14;
    debug base_spread => _15;
    debug max_spread => _16;
    debug max_open_interest => _17;
    debug max_revenue_withdraw_per_period => _18;
    debug quote_max_insurance => _19;
    debug order_step_size => _20;
    debug order_tick_size => _21;
    debug min_order_size => _22;
    debug concentration_coef_scale => _23;
    debug curve_update_intensity => _24;
    debug amm_jit_intensity => _25;
    debug name => _26;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let _33: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 1];
    let _37: &[&str; 1];
    let _38: [&str; 1];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &u16;
    let _45: &u16;
    let _46: &anchor_lang::prelude::Pubkey;
    let mut _47: anchor_lang::prelude::AccountInfo<'_>;
    let mut _48: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _50: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _52: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _53: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _61: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _69: ();
    let mut _70: bool;
    let mut _71: u128;
    let mut _72: u128;
    let mut _73: !;
    let mut _74: anchor_lang::error::Error;
    let mut _75: error::ErrorCode;
    let _76: ();
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _78: std::result::Result<(), error::ErrorCode>;
    let mut _79: bool;
    let mut _80: &std::ops::RangeInclusive<u8>;
    let _81: std::ops::RangeInclusive<u8>;
    let mut _82: &u8;
    let _83: &u8;
    let mut _84: ();
    let _86: ();
    let mut _87: &str;
    let _88: &str;
    let mut _89: &std::string::String;
    let _90: &std::string::String;
    let _91: std::string::String;
    let mut _93: std::fmt::Arguments<'_>;
    let mut _94: &[&str];
    let mut _95: &[&str; 2];
    let _96: &[&str; 2];
    let _97: [&str; 2];
    let mut _98: &[core::fmt::rt::Argument<'_>];
    let mut _99: &[core::fmt::rt::Argument<'_>; 1];
    let _100: &[core::fmt::rt::Argument<'_>; 1];
    let _101: [core::fmt::rt::Argument<'_>; 1];
    let mut _102: core::fmt::rt::Argument<'_>;
    let mut _103: &error::ErrorCode;
    let _104: &error::ErrorCode;
    let _105: ();
    let mut _106: &str;
    let _107: &str;
    let mut _108: &std::string::String;
    let _109: &std::string::String;
    let _110: std::string::String;
    let mut _112: std::fmt::Arguments<'_>;
    let mut _113: &[&str];
    let mut _114: &[&str; 1];
    let _115: &[&str; 1];
    let _116: [&str; 1];
    let mut _117: error::ErrorCode;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _123: ();
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _125: std::result::Result<(), error::ErrorCode>;
    let mut _126: bool;
    let mut _127: &std::ops::RangeInclusive<u8>;
    let _128: std::ops::RangeInclusive<u8>;
    let mut _129: &u8;
    let _130: &u8;
    let mut _131: ();
    let _133: ();
    let mut _134: &str;
    let _135: &str;
    let mut _136: &std::string::String;
    let _137: &std::string::String;
    let _138: std::string::String;
    let mut _140: std::fmt::Arguments<'_>;
    let mut _141: &[&str];
    let mut _142: &[&str; 2];
    let _143: &[&str; 2];
    let _144: [&str; 2];
    let mut _145: &[core::fmt::rt::Argument<'_>];
    let mut _146: &[core::fmt::rt::Argument<'_>; 1];
    let _147: &[core::fmt::rt::Argument<'_>; 1];
    let _148: [core::fmt::rt::Argument<'_>; 1];
    let mut _149: core::fmt::rt::Argument<'_>;
    let mut _150: &error::ErrorCode;
    let _151: &error::ErrorCode;
    let _152: ();
    let mut _153: &str;
    let _154: &str;
    let mut _155: &std::string::String;
    let _156: &std::string::String;
    let _157: std::string::String;
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let mut _161: &[&str; 1];
    let _162: &[&str; 1];
    let _163: [&str; 1];
    let mut _164: error::ErrorCode;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _171: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _172: std::result::Result<u64, error::ErrorCode>;
    let mut _173: u128;
    let mut _174: u128;
    let mut _175: u128;
    let mut _176: isize;
    let mut _178: !;
    let mut _179: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _181: ();
    let mut _182: (&u128, &u128);
    let mut _183: &u128;
    let mut _184: &u128;
    let _185: u128;
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _187: std::result::Result<u128, error::ErrorCode>;
    let mut _188: u64;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _196: bool;
    let mut _197: u128;
    let mut _198: u128;
    let mut _199: !;
    let _201: !;
    let mut _202: core::panicking::AssertKind;
    let mut _203: &u128;
    let _204: &u128;
    let mut _205: &u128;
    let _206: &u128;
    let mut _207: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _210: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _211: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _212: math::bn::U192;
    let mut _213: u128;
    let mut _214: math::bn::U192;
    let mut _215: u128;
    let mut _216: isize;
    let mut _218: !;
    let mut _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _223: (u128, u128);
    let mut _224: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _225: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _226: u128;
    let mut _227: u128;
    let mut _228: isize;
    let mut _230: !;
    let mut _231: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _233: ();
    let mut _234: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _235: std::result::Result<(), error::ErrorCode>;
    let mut _236: &anchor_lang::prelude::AccountInfo<'_>;
    let _237: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _238: isize;
    let mut _240: !;
    let mut _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _246: (i64, i64, i64);
    let mut _247: isize;
    let mut _250: state::oracle::OraclePriceData;
    let mut _251: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _252: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _253: &anchor_lang::prelude::AccountInfo<'_>;
    let _254: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _255: u64;
    let mut _256: &state::oracle::OracleSource;
    let _257: &state::oracle::OracleSource;
    let _258: state::oracle::OracleSource;
    let mut _259: isize;
    let mut _261: !;
    let mut _262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _265: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _266: std::result::Result<i64, error::ErrorCode>;
    let mut _267: &state::perp_market::AMM;
    let _268: &state::perp_market::PerpMarket;
    let mut _269: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _270: &anchor_lang::prelude::AccountInfo<'_>;
    let _271: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _272: &state::oracle::OracleSource;
    let _273: &state::oracle::OracleSource;
    let _274: state::oracle::OracleSource;
    let mut _275: isize;
    let mut _277: !;
    let mut _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _280: i64;
    let mut _281: i64;
    let mut _282: i64;
    let mut _285: state::oracle::OraclePriceData;
    let mut _286: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _287: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _288: &anchor_lang::prelude::AccountInfo<'_>;
    let _289: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _290: u64;
    let mut _291: &state::oracle::OracleSource;
    let _292: &state::oracle::OracleSource;
    let _293: state::oracle::OracleSource;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _300: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _301: std::result::Result<i64, error::ErrorCode>;
    let mut _302: &state::perp_market::AMM;
    let _303: &state::perp_market::PerpMarket;
    let mut _304: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _305: &anchor_lang::prelude::AccountInfo<'_>;
    let _306: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _307: &state::oracle::OracleSource;
    let _308: &state::oracle::OracleSource;
    let _309: state::oracle::OracleSource;
    let mut _310: isize;
    let mut _312: !;
    let mut _313: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _315: i64;
    let mut _316: i64;
    let mut _317: i64;
    let mut _320: state::oracle::OraclePriceData;
    let mut _321: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _322: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _323: &anchor_lang::prelude::AccountInfo<'_>;
    let _324: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _325: u64;
    let mut _326: &state::oracle::OracleSource;
    let _327: &state::oracle::OracleSource;
    let _328: state::oracle::OracleSource;
    let mut _329: isize;
    let mut _331: !;
    let mut _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _335: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _336: std::result::Result<i64, error::ErrorCode>;
    let mut _337: &state::perp_market::AMM;
    let _338: &state::perp_market::PerpMarket;
    let mut _339: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _340: &anchor_lang::prelude::AccountInfo<'_>;
    let _341: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _342: &state::oracle::OracleSource;
    let _343: &state::oracle::OracleSource;
    let _344: state::oracle::OracleSource;
    let mut _345: isize;
    let mut _347: !;
    let mut _348: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _350: i64;
    let mut _351: i64;
    let mut _352: i64;
    let mut _355: state::oracle::OraclePriceData;
    let mut _356: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _357: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _358: &anchor_lang::prelude::AccountInfo<'_>;
    let _359: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _360: u64;
    let mut _361: &state::oracle::OracleSource;
    let _362: &state::oracle::OracleSource;
    let _363: state::oracle::OracleSource;
    let mut _364: isize;
    let mut _366: !;
    let mut _367: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _369: i64;
    let mut _370: i64;
    let mut _373: state::oracle::OraclePriceData;
    let mut _374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _375: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _376: &anchor_lang::prelude::AccountInfo<'_>;
    let _377: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _378: u64;
    let mut _379: isize;
    let mut _381: !;
    let mut _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _384: i64;
    let mut _385: i64;
    let mut _386: i64;
    let mut _387: !;
    let _388: ();
    let mut _389: &str;
    let _390: &str;
    let mut _391: anchor_lang::error::Error;
    let mut _392: error::ErrorCode;
    let mut _395: state::oracle::OraclePriceData;
    let mut _396: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _397: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _398: &anchor_lang::prelude::AccountInfo<'_>;
    let _399: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _400: u64;
    let mut _401: isize;
    let mut _403: !;
    let mut _404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _406: i64;
    let mut _407: i64;
    let mut _408: i64;
    let mut _411: state::oracle::OraclePriceData;
    let mut _412: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _413: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _414: &anchor_lang::prelude::AccountInfo<'_>;
    let _415: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _416: u64;
    let mut _417: &state::oracle::OracleSource;
    let _418: &state::oracle::OracleSource;
    let _419: state::oracle::OracleSource;
    let mut _420: isize;
    let mut _422: !;
    let mut _423: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _426: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _427: std::result::Result<i64, error::ErrorCode>;
    let mut _428: &state::perp_market::AMM;
    let _429: &state::perp_market::PerpMarket;
    let mut _430: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _431: &anchor_lang::prelude::AccountInfo<'_>;
    let _432: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _433: &state::oracle::OracleSource;
    let _434: &state::oracle::OracleSource;
    let _435: state::oracle::OracleSource;
    let mut _436: isize;
    let mut _438: !;
    let mut _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _441: i64;
    let mut _442: i64;
    let mut _443: i64;
    let mut _446: state::oracle::OraclePriceData;
    let mut _447: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _448: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _449: &anchor_lang::prelude::AccountInfo<'_>;
    let _450: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _451: u64;
    let mut _452: &state::oracle::OracleSource;
    let _453: &state::oracle::OracleSource;
    let _454: state::oracle::OracleSource;
    let mut _455: isize;
    let mut _457: !;
    let mut _458: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _461: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _462: std::result::Result<i64, error::ErrorCode>;
    let mut _463: &state::perp_market::AMM;
    let _464: &state::perp_market::PerpMarket;
    let mut _465: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _466: &anchor_lang::prelude::AccountInfo<'_>;
    let _467: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _468: &state::oracle::OracleSource;
    let _469: &state::oracle::OracleSource;
    let _470: state::oracle::OracleSource;
    let mut _471: isize;
    let mut _473: !;
    let mut _474: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _476: i64;
    let mut _477: i64;
    let mut _478: i64;
    let mut _481: state::oracle::OraclePriceData;
    let mut _482: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _483: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _484: &anchor_lang::prelude::AccountInfo<'_>;
    let _485: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _486: u64;
    let mut _487: &state::oracle::OracleSource;
    let _488: &state::oracle::OracleSource;
    let _489: state::oracle::OracleSource;
    let mut _490: isize;
    let mut _492: !;
    let mut _493: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _496: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _497: std::result::Result<i64, error::ErrorCode>;
    let mut _498: &state::perp_market::AMM;
    let _499: &state::perp_market::PerpMarket;
    let mut _500: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _501: &anchor_lang::prelude::AccountInfo<'_>;
    let _502: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _503: &state::oracle::OracleSource;
    let _504: &state::oracle::OracleSource;
    let _505: state::oracle::OracleSource;
    let mut _506: isize;
    let mut _508: !;
    let mut _509: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _511: i64;
    let mut _512: i64;
    let mut _513: i64;
    let mut _516: state::oracle::OraclePriceData;
    let mut _517: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _518: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _519: &anchor_lang::prelude::AccountInfo<'_>;
    let _520: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _521: u64;
    let mut _522: &state::oracle::OracleSource;
    let _523: &state::oracle::OracleSource;
    let _524: state::oracle::OracleSource;
    let mut _525: isize;
    let mut _527: !;
    let mut _528: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _530: i64;
    let mut _531: i64;
    let mut _534: state::oracle::OraclePriceData;
    let mut _535: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _536: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _537: &anchor_lang::prelude::AccountInfo<'_>;
    let _538: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _539: u64;
    let mut _540: isize;
    let mut _542: !;
    let mut _543: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _545: i64;
    let mut _546: i64;
    let mut _547: i64;
    let mut _550: state::oracle::OraclePriceData;
    let mut _551: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _552: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _553: &anchor_lang::prelude::AccountInfo<'_>;
    let _554: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _555: u64;
    let mut _556: &state::oracle::OracleSource;
    let _557: &state::oracle::OracleSource;
    let _558: state::oracle::OracleSource;
    let mut _559: isize;
    let mut _561: !;
    let mut _562: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _565: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _566: std::result::Result<i64, error::ErrorCode>;
    let mut _567: &state::perp_market::AMM;
    let _568: &state::perp_market::PerpMarket;
    let mut _569: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _570: &anchor_lang::prelude::AccountInfo<'_>;
    let _571: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _572: &state::oracle::OracleSource;
    let _573: &state::oracle::OracleSource;
    let _574: state::oracle::OracleSource;
    let mut _575: isize;
    let mut _577: !;
    let mut _578: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _580: i64;
    let mut _581: i64;
    let mut _582: i64;
    let mut _585: state::oracle::OraclePriceData;
    let mut _586: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _587: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _588: &anchor_lang::prelude::AccountInfo<'_>;
    let _589: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _590: u64;
    let mut _591: &state::oracle::OracleSource;
    let _592: &state::oracle::OracleSource;
    let _593: state::oracle::OracleSource;
    let mut _594: isize;
    let mut _596: !;
    let mut _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _600: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _601: std::result::Result<i64, error::ErrorCode>;
    let mut _602: &state::perp_market::AMM;
    let _603: &state::perp_market::PerpMarket;
    let mut _604: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _605: &anchor_lang::prelude::AccountInfo<'_>;
    let _606: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _607: &state::oracle::OracleSource;
    let _608: &state::oracle::OracleSource;
    let _609: state::oracle::OracleSource;
    let mut _610: isize;
    let mut _612: !;
    let mut _613: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _615: i64;
    let mut _616: i64;
    let mut _617: i64;
    let mut _620: state::oracle::OraclePriceData;
    let mut _621: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _622: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _623: &anchor_lang::prelude::AccountInfo<'_>;
    let _624: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _625: u64;
    let mut _626: &state::oracle::OracleSource;
    let _627: &state::oracle::OracleSource;
    let _628: state::oracle::OracleSource;
    let mut _629: isize;
    let mut _631: !;
    let mut _632: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _635: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _636: std::result::Result<i64, error::ErrorCode>;
    let mut _637: &state::perp_market::AMM;
    let _638: &state::perp_market::PerpMarket;
    let mut _639: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _640: &anchor_lang::prelude::AccountInfo<'_>;
    let _641: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _642: &state::oracle::OracleSource;
    let _643: &state::oracle::OracleSource;
    let _644: state::oracle::OracleSource;
    let mut _645: isize;
    let mut _647: !;
    let mut _648: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _650: i64;
    let mut _651: i64;
    let mut _652: i64;
    let mut _655: state::oracle::OraclePriceData;
    let mut _656: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _657: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _658: &anchor_lang::prelude::AccountInfo<'_>;
    let _659: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _660: u64;
    let mut _661: &state::oracle::OracleSource;
    let _662: &state::oracle::OracleSource;
    let _663: state::oracle::OracleSource;
    let mut _664: isize;
    let mut _666: !;
    let mut _667: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _669: i64;
    let mut _670: i64;
    let _671: ();
    let mut _672: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _673: std::result::Result<(), error::ErrorCode>;
    let mut _674: u32;
    let mut _675: u32;
    let mut _676: u32;
    let mut _677: u32;
    let mut _678: isize;
    let mut _680: !;
    let mut _681: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _684: ();
    let mut _685: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _686: std::result::Result<(), error::ErrorCode>;
    let mut _687: bool;
    let mut _688: u16;
    let mut _689: u16;
    let mut _690: &state::state::State;
    let mut _691: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _692: ();
    let _694: ();
    let mut _695: &str;
    let _696: &str;
    let mut _697: &std::string::String;
    let _698: &std::string::String;
    let _699: std::string::String;
    let mut _701: std::fmt::Arguments<'_>;
    let mut _702: &[&str];
    let mut _703: &[&str; 2];
    let _704: &[&str; 2];
    let _705: [&str; 2];
    let mut _706: &[core::fmt::rt::Argument<'_>];
    let mut _707: &[core::fmt::rt::Argument<'_>; 1];
    let _708: &[core::fmt::rt::Argument<'_>; 1];
    let _709: [core::fmt::rt::Argument<'_>; 1];
    let mut _710: core::fmt::rt::Argument<'_>;
    let mut _711: &error::ErrorCode;
    let _712: &error::ErrorCode;
    let _713: ();
    let mut _714: &str;
    let _715: &str;
    let mut _716: &std::string::String;
    let _717: &std::string::String;
    let _718: std::string::String;
    let mut _720: std::fmt::Arguments<'_>;
    let mut _721: &[&str];
    let mut _722: &[&str; 2];
    let _723: &[&str; 2];
    let _724: [&str; 2];
    let mut _725: &[core::fmt::rt::Argument<'_>];
    let mut _726: &[core::fmt::rt::Argument<'_>; 2];
    let _727: &[core::fmt::rt::Argument<'_>; 2];
    let _728: [core::fmt::rt::Argument<'_>; 2];
    let mut _729: core::fmt::rt::Argument<'_>;
    let mut _730: &u16;
    let _731: &u16;
    let mut _732: core::fmt::rt::Argument<'_>;
    let mut _733: &u16;
    let _734: &u16;
    let _735: &state::state::State;
    let mut _736: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _737: error::ErrorCode;
    let mut _738: isize;
    let mut _740: !;
    let mut _741: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _743: ();
    let mut _744: bool;
    let _745: ();
    let mut _746: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _747: std::result::Result<(), error::ErrorCode>;
    let mut _748: bool;
    let mut _749: &anchor_lang::prelude::Pubkey;
    let _750: anchor_lang::prelude::Pubkey;
    let mut _751: &anchor_lang::prelude::Signer<'_>;
    let mut _752: &anchor_lang::prelude::Pubkey;
    let _753: &state::state::State;
    let mut _754: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _755: ();
    let _757: ();
    let mut _758: &str;
    let _759: &str;
    let mut _760: &std::string::String;
    let _761: &std::string::String;
    let _762: std::string::String;
    let mut _764: std::fmt::Arguments<'_>;
    let mut _765: &[&str];
    let mut _766: &[&str; 2];
    let _767: &[&str; 2];
    let _768: [&str; 2];
    let mut _769: &[core::fmt::rt::Argument<'_>];
    let mut _770: &[core::fmt::rt::Argument<'_>; 1];
    let _771: &[core::fmt::rt::Argument<'_>; 1];
    let _772: [core::fmt::rt::Argument<'_>; 1];
    let mut _773: core::fmt::rt::Argument<'_>;
    let mut _774: &error::ErrorCode;
    let _775: &error::ErrorCode;
    let _776: ();
    let mut _777: &str;
    let _778: &str;
    let mut _779: error::ErrorCode;
    let mut _780: isize;
    let mut _782: !;
    let mut _783: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _785: state::perp_market::PerpMarket;
    let mut _786: state::perp_market::ContractType;
    let mut _787: state::perp_market::ContractTier;
    let mut _788: state::perp_market::MarketStatus;
    let mut _789: bool;
    let mut _790: [u8; 32];
    let mut _791: anchor_lang::prelude::Pubkey;
    let mut _792: u16;
    let mut _793: u32;
    let mut _794: u32;
    let mut _795: u32;
    let mut _796: state::perp_market::PoolBalance;
    let mut _797: state::perp_market::InsuranceClaim;
    let mut _798: u64;
    let mut _799: u64;
    let mut _800: state::perp_market::InsuranceClaim;
    let mut _801: u32;
    let mut _802: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _803: std::result::Result<u32, error::ErrorCode>;
    let mut _804: isize;
    let mut _806: !;
    let mut _807: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _809: u32;
    let mut _810: u32;
    let mut _811: [u8; 24];
    let mut _812: state::perp_market::AMM;
    let mut _813: anchor_lang::prelude::Pubkey;
    let mut _814: state::oracle::OracleSource;
    let mut _815: u128;
    let mut _816: u128;
    let mut _817: u128;
    let mut _818: u128;
    let mut _819: u128;
    let mut _820: u128;
    let mut _821: u128;
    let mut _822: i64;
    let mut _823: i64;
    let mut _824: u64;
    let mut _825: u64;
    let mut _826: i64;
    let mut _827: u128;
    let mut _828: u128;
    let mut _829: u128;
    let mut _830: u128;
    let mut _831: u128;
    let mut _832: state::oracle::HistoricalOracleData;
    let mut _833: i64;
    let mut _834: i64;
    let mut _835: i64;
    let mut _836: i64;
    let mut _837: i64;
    let mut _838: state::oracle::HistoricalOracleData;
    let mut _839: i64;
    let mut _840: u64;
    let mut _841: u64;
    let mut _842: u64;
    let mut _843: u32;
    let mut _844: u32;
    let mut _845: u64;
    let mut _846: u64;
    let mut _847: u128;
    let mut _848: i64;
    let mut _849: u8;
    let mut _850: state::perp_market::PoolBalance;
    let mut _851: u64;
    let mut _852: u8;
    let mut _853: [u8; 3];
    let mut _854: &mut state::perp_market::PerpMarket;
    let mut _855: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _856: ();
    let mut _857: u16;
    let mut _858: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _859: std::result::Result<u16, error::ErrorCode>;
    let mut _860: std::option::Option<u16>;
    let mut _861: u16;
    let mut _862: &state::state::State;
    let mut _863: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _864: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _865: isize;
    let mut _867: !;
    let mut _868: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _870: &mut state::state::State;
    let mut _871: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let _872: ();
    let mut _873: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _874: std::result::Result<(), error::ErrorCode>;
    let mut _875: &mut state::perp_market::PerpMarket;
    let mut _876: &mut state::perp_market::PerpMarket;
    let mut _877: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _878: u128;
    let mut _879: isize;
    let mut _881: !;
    let mut _882: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _884: ();
    let _885: ();
    let mut _886: &str;
    let _887: &str;
    let mut _888: &std::string::String;
    let _889: &std::string::String;
    let _890: std::string::String;
    let mut _892: std::fmt::Arguments<'_>;
    let mut _893: &[&str];
    let mut _894: &[&str; 1];
    let _895: &[&str; 1];
    let _896: [&str; 1];
    let mut _897: &[core::fmt::rt::Argument<'_>];
    let mut _898: &[core::fmt::rt::Argument<'_>; 1];
    let _899: &[core::fmt::rt::Argument<'_>; 1];
    let _900: [core::fmt::rt::Argument<'_>; 1];
    let mut _901: core::fmt::rt::Argument<'_>;
    let mut _902: &i64;
    let _903: &i64;
    let mut _906: (i128, i128);
    let mut _907: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _908: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _909: &state::perp_market::AMM;
    let _910: &state::perp_market::AMM;
    let _911: &state::perp_market::PerpMarket;
    let mut _912: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _913: isize;
    let mut _915: !;
    let mut _916: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _918: ();
    let _919: ();
    let mut _920: &str;
    let _921: &str;
    let mut _922: &std::string::String;
    let _923: &std::string::String;
    let _924: std::string::String;
    let mut _926: std::fmt::Arguments<'_>;
    let mut _927: &[&str];
    let mut _928: &[&str; 1];
    let _929: &[&str; 1];
    let _930: [&str; 1];
    let mut _931: &[core::fmt::rt::Argument<'_>];
    let mut _932: &[core::fmt::rt::Argument<'_>; 1];
    let _933: &[core::fmt::rt::Argument<'_>; 1];
    let _934: [core::fmt::rt::Argument<'_>; 1];
    let mut _935: core::fmt::rt::Argument<'_>;
    let mut _936: &i128;
    let _937: &i128;
    let _938: ();
    let mut _939: &str;
    let _940: &str;
    let mut _941: &std::string::String;
    let _942: &std::string::String;
    let _943: std::string::String;
    let mut _945: std::fmt::Arguments<'_>;
    let mut _946: &[&str];
    let mut _947: &[&str; 1];
    let _948: &[&str; 1];
    let _949: [&str; 1];
    let mut _950: &[core::fmt::rt::Argument<'_>];
    let mut _951: &[core::fmt::rt::Argument<'_>; 1];
    let _952: &[core::fmt::rt::Argument<'_>; 1];
    let _953: [core::fmt::rt::Argument<'_>; 1];
    let mut _954: core::fmt::rt::Argument<'_>;
    let mut _955: &i128;
    let _956: &i128;
    let mut _958: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _959: std::result::Result<u64, error::ErrorCode>;
    let mut _960: &state::perp_market::AMM;
    let _961: &state::perp_market::PerpMarket;
    let mut _962: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _963: isize;
    let mut _965: !;
    let mut _966: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _970: (u64, u64);
    let mut _971: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _972: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _973: &state::perp_market::AMM;
    let _974: &state::perp_market::PerpMarket;
    let mut _975: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _976: u64;
    let mut _977: isize;
    let mut _979: !;
    let mut _980: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _982: ();
    let _983: ();
    let mut _984: &str;
    let _985: &str;
    let mut _986: &std::string::String;
    let _987: &std::string::String;
    let _988: std::string::String;
    let mut _990: std::fmt::Arguments<'_>;
    let mut _991: &[&str];
    let mut _992: &[&str; 1];
    let _993: &[&str; 1];
    let _994: [&str; 1];
    let mut _995: &[core::fmt::rt::Argument<'_>];
    let mut _996: &[core::fmt::rt::Argument<'_>; 1];
    let _997: &[core::fmt::rt::Argument<'_>; 1];
    let _998: [core::fmt::rt::Argument<'_>; 1];
    let mut _999: core::fmt::rt::Argument<'_>;
    let mut _1000: &u64;
    let _1001: &u64;
    let _1002: ();
    let mut _1003: &str;
    let _1004: &str;
    let mut _1005: &std::string::String;
    let _1006: &std::string::String;
    let _1007: std::string::String;
    let mut _1009: std::fmt::Arguments<'_>;
    let mut _1010: &[&str];
    let mut _1011: &[&str; 1];
    let _1012: &[&str; 1];
    let _1013: [&str; 1];
    let mut _1014: &[core::fmt::rt::Argument<'_>];
    let mut _1015: &[core::fmt::rt::Argument<'_>; 1];
    let _1016: &[core::fmt::rt::Argument<'_>; 1];
    let _1017: [core::fmt::rt::Argument<'_>; 1];
    let mut _1018: core::fmt::rt::Argument<'_>;
    let mut _1019: &u64;
    let _1020: &u64;
    let _1021: ();
    let mut _1022: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1023: std::result::Result<(), error::ErrorCode>;
    let mut _1024: &state::perp_market::PerpMarket;
    let _1025: &state::perp_market::PerpMarket;
    let mut _1026: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _1027: isize;
    let mut _1029: !;
    let mut _1030: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1032: ();
    let mut _1068: &[&str; 1];
    let mut _1069: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1070: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1071: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1072: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1073: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1074: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1075: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1076: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1077: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1078: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1079: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1080: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1081: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1082: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1083: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1084: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1085: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1086: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1087: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1088: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1089: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1090: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1091: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1092: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1093: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1094: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1095: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1096: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1097: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1098: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1099: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1100: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1101: &mut instructions::admin::InitializePerpMarket<'_>;
    let mut _1102: &anchor_lang::prelude::Pubkey;
    let mut _1103: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1104: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _1105: isize;
    let mut _1106: isize;
    let mut _1107: isize;
    let mut _1108: isize;
    let mut _1109: isize;
    let mut _1110: isize;
    let mut _1111: isize;
    let mut _1112: isize;
    let mut _1113: isize;
    let mut _1114: isize;
    let mut _1115: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1116: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1117: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1118: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _1119: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug res => _33;
    }
    scope 2 {
        debug perp_market_pubkey => _46;
        let _49: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
        let _55: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _58: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
        scope 3 {
            debug perp_market => _49;
            let _59: anchor_lang::prelude::Clock;
            let _63: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _66: anchor_lang::prelude::Clock;
            scope 8 {
                debug clock => _59;
                let _67: i64;
                scope 13 {
                    debug now => _67;
                    let _68: u64;
                    scope 14 {
                        debug clock_slot => _68;
                        let _85: error::ErrorCode;
                        let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _122: ();
                        let _132: error::ErrorCode;
                        let _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _169: ();
                        let _170: u64;
                        let _177: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _180: u64;
                        let mut _1064: &std::ops::RangeInclusive<u8>;
                        let mut _1067: &std::ops::RangeInclusive<u8>;
                        scope 15 {
                            debug error_code => _85;
                            let _92: std::string::String;
                            let _111: std::string::String;
                            let mut _1065: &[&str; 1];
                            let mut _1066: &[&str; 2];
                            scope 16 {
                                debug res => _92;
                            }
                            scope 17 {
                                debug res => _111;
                            }
                        }
                        scope 18 {
                            debug residual => _119;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug val => _122;
                            scope 21 {
                            }
                        }
                        scope 22 {
                            debug error_code => _132;
                            let _139: std::string::String;
                            let _158: std::string::String;
                            let mut _1062: &[&str; 1];
                            let mut _1063: &[&str; 2];
                            scope 23 {
                                debug res => _139;
                            }
                            scope 24 {
                                debug res => _158;
                            }
                        }
                        scope 25 {
                            debug residual => _166;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug val => _169;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug init_reserve_price => _170;
                            let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _193: u128;
                            let _194: &u128;
                            let _195: &u128;
                            let _208: u128;
                            scope 34 {
                                debug residual => _190;
                                scope 35 {
                                }
                            }
                            scope 36 {
                                debug val => _193;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug left_val => _194;
                                debug right_val => _195;
                                let _200: core::panicking::AssertKind;
                                scope 39 {
                                    debug kind => _200;
                                }
                            }
                            scope 40 {
                                debug concentration_coef => _208;
                                let _209: math::bn::U192;
                                let _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _220: math::bn::U192;
                                scope 41 {
                                    debug _k => _209;
                                    let _221: u128;
                                    let _222: u128;
                                    let _229: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _232: (u128, u128);
                                    scope 46 {
                                        debug min_base_asset_reserve => _221;
                                        debug max_base_asset_reserve => _222;
                                        let _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _242: ();
                                        let _243: i64;
                                        let _244: i64;
                                        let _245: i64;
                                        let _248: i64;
                                        let _249: i64;
                                        let _260: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _263: state::oracle::OraclePriceData;
                                        let _283: i64;
                                        let _284: i64;
                                        let _295: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _298: state::oracle::OraclePriceData;
                                        let _318: i64;
                                        let _319: i64;
                                        let _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _333: state::oracle::OraclePriceData;
                                        let _353: i64;
                                        let _354: i64;
                                        let _365: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _368: state::oracle::OraclePriceData;
                                        let _371: i64;
                                        let _372: i64;
                                        let _380: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _383: state::oracle::OraclePriceData;
                                        let _393: i64;
                                        let _394: i64;
                                        let _402: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _405: state::oracle::OraclePriceData;
                                        let _409: i64;
                                        let _410: i64;
                                        let _421: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _424: state::oracle::OraclePriceData;
                                        let _444: i64;
                                        let _445: i64;
                                        let _456: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _459: state::oracle::OraclePriceData;
                                        let _479: i64;
                                        let _480: i64;
                                        let _491: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _494: state::oracle::OraclePriceData;
                                        let _514: i64;
                                        let _515: i64;
                                        let _526: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _529: state::oracle::OraclePriceData;
                                        let _532: i64;
                                        let _533: i64;
                                        let _541: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _544: state::oracle::OraclePriceData;
                                        let _548: i64;
                                        let _549: i64;
                                        let _560: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _563: state::oracle::OraclePriceData;
                                        let _583: i64;
                                        let _584: i64;
                                        let _595: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _598: state::oracle::OraclePriceData;
                                        let _618: i64;
                                        let _619: i64;
                                        let _630: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _633: state::oracle::OraclePriceData;
                                        let _653: i64;
                                        let _654: i64;
                                        let _665: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _668: state::oracle::OraclePriceData;
                                        let mut _1041: &state::oracle::OracleSource;
                                        let mut _1043: &state::oracle::OracleSource;
                                        let mut _1045: &state::oracle::OracleSource;
                                        let mut _1047: &state::oracle::OracleSource;
                                        let mut _1048: &state::oracle::OracleSource;
                                        let mut _1050: &state::oracle::OracleSource;
                                        let mut _1052: &state::oracle::OracleSource;
                                        let mut _1054: &state::oracle::OracleSource;
                                        let mut _1055: &state::oracle::OracleSource;
                                        let mut _1057: &state::oracle::OracleSource;
                                        let mut _1059: &state::oracle::OracleSource;
                                        let mut _1061: &state::oracle::OracleSource;
                                        scope 51 {
                                            debug residual => _239;
                                            scope 52 {
                                            }
                                        }
                                        scope 53 {
                                            debug val => _242;
                                            scope 54 {
                                            }
                                        }
                                        scope 55 {
                                            debug oracle_price => _243;
                                            debug oracle_delay => _244;
                                            debug last_oracle_price_twap => _245;
                                            let _679: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _682: ();
                                            let _683: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                                            scope 176 {
                                                debug residual => _679;
                                                scope 177 {
                                                }
                                            }
                                            scope 178 {
                                                debug val => _682;
                                                scope 179 {
                                                }
                                            }
                                            scope 180 {
                                                debug state => _683;
                                                let _693: error::ErrorCode;
                                                let _739: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _742: ();
                                                let _756: error::ErrorCode;
                                                let _781: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _784: ();
                                                let _805: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _808: u32;
                                                let _866: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _869: u16;
                                                let _880: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _883: ();
                                                let _891: std::string::String;
                                                let _904: i128;
                                                let _905: i128;
                                                let _914: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _917: (i128, i128);
                                                let mut _1037: &[&str; 1];
                                                scope 181 {
                                                    debug error_code => _693;
                                                    let _700: std::string::String;
                                                    let _719: std::string::String;
                                                    let mut _1039: &[&str; 2];
                                                    let mut _1040: &[&str; 2];
                                                    scope 182 {
                                                        debug res => _700;
                                                    }
                                                    scope 183 {
                                                        debug res => _719;
                                                    }
                                                }
                                                scope 184 {
                                                    debug residual => _739;
                                                    scope 185 {
                                                    }
                                                }
                                                scope 186 {
                                                    debug val => _742;
                                                    scope 187 {
                                                    }
                                                }
                                                scope 188 {
                                                    debug error_code => _756;
                                                    let _763: std::string::String;
                                                    let mut _1038: &[&str; 2];
                                                    scope 189 {
                                                        debug res => _763;
                                                    }
                                                }
                                                scope 190 {
                                                    debug residual => _781;
                                                    scope 191 {
                                                    }
                                                }
                                                scope 192 {
                                                    debug val => _784;
                                                    scope 193 {
                                                    }
                                                }
                                                scope 194 {
                                                    debug residual => _805;
                                                    scope 195 {
                                                    }
                                                }
                                                scope 196 {
                                                    debug val => _808;
                                                    scope 197 {
                                                    }
                                                }
                                                scope 198 {
                                                    debug residual => _866;
                                                    scope 199 {
                                                    }
                                                }
                                                scope 200 {
                                                    debug val => _869;
                                                    scope 201 {
                                                    }
                                                }
                                                scope 202 {
                                                    debug residual => _880;
                                                    scope 203 {
                                                    }
                                                }
                                                scope 204 {
                                                    debug val => _883;
                                                    scope 205 {
                                                    }
                                                }
                                                scope 206 {
                                                    debug res => _891;
                                                }
                                                scope 207 {
                                                    debug amm_bid_size => _904;
                                                    debug amm_ask_size => _905;
                                                    let _925: std::string::String;
                                                    let _944: std::string::String;
                                                    let _957: u64;
                                                    let _964: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _967: u64;
                                                    let mut _1035: &[&str; 1];
                                                    let mut _1036: &[&str; 1];
                                                    scope 212 {
                                                        debug res => _925;
                                                    }
                                                    scope 213 {
                                                        debug res => _944;
                                                    }
                                                    scope 214 {
                                                        debug mrk => _957;
                                                        let _968: u64;
                                                        let _969: u64;
                                                        let _978: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _981: (u64, u64);
                                                        scope 219 {
                                                            debug amm_bid_price => _968;
                                                            debug amm_ask_price => _969;
                                                            let _989: std::string::String;
                                                            let _1008: std::string::String;
                                                            let _1028: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _1031: ();
                                                            let mut _1033: &[&str; 1];
                                                            let mut _1034: &[&str; 1];
                                                            scope 224 {
                                                                debug res => _989;
                                                            }
                                                            scope 225 {
                                                                debug res => _1008;
                                                            }
                                                            scope 226 {
                                                                debug residual => _1028;
                                                                scope 227 {
                                                                }
                                                            }
                                                            scope 228 {
                                                                debug val => _1031;
                                                                scope 229 {
                                                                }
                                                            }
                                                        }
                                                        scope 220 {
                                                            debug residual => _978;
                                                            scope 221 {
                                                            }
                                                        }
                                                        scope 222 {
                                                            debug val => _981;
                                                            scope 223 {
                                                            }
                                                        }
                                                    }
                                                    scope 215 {
                                                        debug residual => _964;
                                                        scope 216 {
                                                        }
                                                    }
                                                    scope 217 {
                                                        debug val => _967;
                                                        scope 218 {
                                                        }
                                                    }
                                                }
                                                scope 208 {
                                                    debug residual => _914;
                                                    scope 209 {
                                                    }
                                                }
                                                scope 210 {
                                                    debug val => _917;
                                                    scope 211 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 56 {
                                            debug oracle_price => _248;
                                            debug oracle_delay => _249;
                                            let _264: i64;
                                            let _276: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _279: i64;
                                            let mut _1060: &state::oracle::OracleSource;
                                            scope 61 {
                                                debug last_oracle_price_twap => _264;
                                            }
                                            scope 62 {
                                                debug residual => _276;
                                                scope 63 {
                                                }
                                            }
                                            scope 64 {
                                                debug val => _279;
                                                scope 65 {
                                                }
                                            }
                                        }
                                        scope 57 {
                                            debug residual => _260;
                                            scope 58 {
                                            }
                                        }
                                        scope 59 {
                                            debug val => _263;
                                            scope 60 {
                                            }
                                        }
                                        scope 66 {
                                            debug oracle_price => _283;
                                            debug oracle_delay => _284;
                                            let _299: i64;
                                            let _311: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _314: i64;
                                            let mut _1058: &state::oracle::OracleSource;
                                            scope 71 {
                                                debug last_oracle_price_twap => _299;
                                            }
                                            scope 72 {
                                                debug residual => _311;
                                                scope 73 {
                                                }
                                            }
                                            scope 74 {
                                                debug val => _314;
                                                scope 75 {
                                                }
                                            }
                                        }
                                        scope 67 {
                                            debug residual => _295;
                                            scope 68 {
                                            }
                                        }
                                        scope 69 {
                                            debug val => _298;
                                            scope 70 {
                                            }
                                        }
                                        scope 76 {
                                            debug oracle_price => _318;
                                            debug oracle_delay => _319;
                                            let _334: i64;
                                            let _346: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _349: i64;
                                            let mut _1056: &state::oracle::OracleSource;
                                            scope 81 {
                                                debug last_oracle_price_twap => _334;
                                            }
                                            scope 82 {
                                                debug residual => _346;
                                                scope 83 {
                                                }
                                            }
                                            scope 84 {
                                                debug val => _349;
                                                scope 85 {
                                                }
                                            }
                                        }
                                        scope 77 {
                                            debug residual => _330;
                                            scope 78 {
                                            }
                                        }
                                        scope 79 {
                                            debug val => _333;
                                            scope 80 {
                                            }
                                        }
                                        scope 86 {
                                            debug oracle_price => _353;
                                            debug oracle_delay => _354;
                                        }
                                        scope 87 {
                                            debug residual => _365;
                                            scope 88 {
                                            }
                                        }
                                        scope 89 {
                                            debug val => _368;
                                            scope 90 {
                                            }
                                        }
                                        scope 91 {
                                            debug oracle_price => _371;
                                            debug oracle_delay => _372;
                                        }
                                        scope 92 {
                                            debug residual => _380;
                                            scope 93 {
                                            }
                                        }
                                        scope 94 {
                                            debug val => _383;
                                            scope 95 {
                                            }
                                        }
                                        scope 96 {
                                            debug oracle_price => _393;
                                            debug oracle_delay => _394;
                                        }
                                        scope 97 {
                                            debug residual => _402;
                                            scope 98 {
                                            }
                                        }
                                        scope 99 {
                                            debug val => _405;
                                            scope 100 {
                                            }
                                        }
                                        scope 101 {
                                            debug oracle_price => _409;
                                            debug oracle_delay => _410;
                                            let _425: i64;
                                            let _437: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _440: i64;
                                            let mut _1053: &state::oracle::OracleSource;
                                            scope 106 {
                                                debug last_oracle_price_twap => _425;
                                            }
                                            scope 107 {
                                                debug residual => _437;
                                                scope 108 {
                                                }
                                            }
                                            scope 109 {
                                                debug val => _440;
                                                scope 110 {
                                                }
                                            }
                                        }
                                        scope 102 {
                                            debug residual => _421;
                                            scope 103 {
                                            }
                                        }
                                        scope 104 {
                                            debug val => _424;
                                            scope 105 {
                                            }
                                        }
                                        scope 111 {
                                            debug oracle_price => _444;
                                            debug oracle_delay => _445;
                                            let _460: i64;
                                            let _472: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _475: i64;
                                            let mut _1051: &state::oracle::OracleSource;
                                            scope 116 {
                                                debug last_oracle_price_twap => _460;
                                            }
                                            scope 117 {
                                                debug residual => _472;
                                                scope 118 {
                                                }
                                            }
                                            scope 119 {
                                                debug val => _475;
                                                scope 120 {
                                                }
                                            }
                                        }
                                        scope 112 {
                                            debug residual => _456;
                                            scope 113 {
                                            }
                                        }
                                        scope 114 {
                                            debug val => _459;
                                            scope 115 {
                                            }
                                        }
                                        scope 121 {
                                            debug oracle_price => _479;
                                            debug oracle_delay => _480;
                                            let _495: i64;
                                            let _507: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _510: i64;
                                            let mut _1049: &state::oracle::OracleSource;
                                            scope 126 {
                                                debug last_oracle_price_twap => _495;
                                            }
                                            scope 127 {
                                                debug residual => _507;
                                                scope 128 {
                                                }
                                            }
                                            scope 129 {
                                                debug val => _510;
                                                scope 130 {
                                                }
                                            }
                                        }
                                        scope 122 {
                                            debug residual => _491;
                                            scope 123 {
                                            }
                                        }
                                        scope 124 {
                                            debug val => _494;
                                            scope 125 {
                                            }
                                        }
                                        scope 131 {
                                            debug oracle_price => _514;
                                            debug oracle_delay => _515;
                                        }
                                        scope 132 {
                                            debug residual => _526;
                                            scope 133 {
                                            }
                                        }
                                        scope 134 {
                                            debug val => _529;
                                            scope 135 {
                                            }
                                        }
                                        scope 136 {
                                            debug oracle_price => _532;
                                            debug oracle_delay => _533;
                                        }
                                        scope 137 {
                                            debug residual => _541;
                                            scope 138 {
                                            }
                                        }
                                        scope 139 {
                                            debug val => _544;
                                            scope 140 {
                                            }
                                        }
                                        scope 141 {
                                            debug oracle_price => _548;
                                            debug oracle_delay => _549;
                                            let _564: i64;
                                            let _576: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _579: i64;
                                            let mut _1046: &state::oracle::OracleSource;
                                            scope 146 {
                                                debug last_oracle_price_twap => _564;
                                            }
                                            scope 147 {
                                                debug residual => _576;
                                                scope 148 {
                                                }
                                            }
                                            scope 149 {
                                                debug val => _579;
                                                scope 150 {
                                                }
                                            }
                                        }
                                        scope 142 {
                                            debug residual => _560;
                                            scope 143 {
                                            }
                                        }
                                        scope 144 {
                                            debug val => _563;
                                            scope 145 {
                                            }
                                        }
                                        scope 151 {
                                            debug oracle_price => _583;
                                            debug oracle_delay => _584;
                                            let _599: i64;
                                            let _611: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _614: i64;
                                            let mut _1044: &state::oracle::OracleSource;
                                            scope 156 {
                                                debug last_oracle_price_twap => _599;
                                            }
                                            scope 157 {
                                                debug residual => _611;
                                                scope 158 {
                                                }
                                            }
                                            scope 159 {
                                                debug val => _614;
                                                scope 160 {
                                                }
                                            }
                                        }
                                        scope 152 {
                                            debug residual => _595;
                                            scope 153 {
                                            }
                                        }
                                        scope 154 {
                                            debug val => _598;
                                            scope 155 {
                                            }
                                        }
                                        scope 161 {
                                            debug oracle_price => _618;
                                            debug oracle_delay => _619;
                                            let _634: i64;
                                            let _646: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _649: i64;
                                            let mut _1042: &state::oracle::OracleSource;
                                            scope 166 {
                                                debug last_oracle_price_twap => _634;
                                            }
                                            scope 167 {
                                                debug residual => _646;
                                                scope 168 {
                                                }
                                            }
                                            scope 169 {
                                                debug val => _649;
                                                scope 170 {
                                                }
                                            }
                                        }
                                        scope 162 {
                                            debug residual => _630;
                                            scope 163 {
                                            }
                                        }
                                        scope 164 {
                                            debug val => _633;
                                            scope 165 {
                                            }
                                        }
                                        scope 171 {
                                            debug oracle_price => _653;
                                            debug oracle_delay => _654;
                                        }
                                        scope 172 {
                                            debug residual => _665;
                                            scope 173 {
                                            }
                                        }
                                        scope 174 {
                                            debug val => _668;
                                            scope 175 {
                                            }
                                        }
                                    }
                                    scope 47 {
                                        debug residual => _229;
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug val => _232;
                                        scope 50 {
                                        }
                                    }
                                }
                                scope 42 {
                                    debug residual => _217;
                                    scope 43 {
                                    }
                                }
                                scope 44 {
                                    debug val => _220;
                                    scope 45 {
                                    }
                                }
                            }
                        }
                        scope 30 {
                            debug residual => _177;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _180;
                            scope 33 {
                            }
                        }
                    }
                }
            }
            scope 9 {
                debug residual => _63;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _66;
                scope 12 {
                }
            }
        }
        scope 4 {
            debug residual => _55;
            scope 5 {
            }
        }
        scope 6 {
            debug val => _58;
            scope 7 {
            }
        }
    }

    bb0: {
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _1068 = const _;
        _37 = &(*_1068);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = &_2;
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _44) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_44);
        _42 = [move _43];
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_34);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb4, unwind: bb391];
    }

    bb4: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb5, unwind: bb391];
    }

    bb5: {
        StorageDead(_28);
        drop(_32) -> [return: bb6, unwind: bb392];
    }

    bb6: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _1069 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _48 = &((*_1069).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _47 = <anchor_lang::prelude::AccountLoader<'_, PerpMarket> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _48) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_48);
        _46 = (_47.0: &anchor_lang::prelude::Pubkey);
        drop(_47) -> [return: bb8, unwind: bb392];
    }

    bb8: {
        StorageDead(_47);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _1070 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _53 = &((*_1070).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _52 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_init(move _53) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_53);
        _51 = <std::result::Result<RefMut<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb10, unwind: bb392];
    }

    bb10: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb11, 1: bb13, otherwise: bb12];
    }

    bb11: {
        StorageLive(_58);
        _58 = move ((_51 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _50 = move _58;
        StorageDead(_58);
        _49 = &mut _50;
        _1105 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb15, unwind: bb390];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        StorageLive(_55);
        _55 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_57);
        _57 = move _55;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _57) -> [return: bb14, unwind: bb394];
    }

    bb14: {
        StorageDead(_57);
        StorageDead(_55);
        _1111 = discriminant(_51);
        StorageDead(_51);
        goto -> bb376;
    }

    bb15: {
        _60 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _61) -> [return: bb16, unwind: bb390];
    }

    bb16: {
        StorageDead(_61);
        _62 = discriminant(_60);
        switchInt(move _62) -> [0: bb17, 1: bb18, otherwise: bb12];
    }

    bb17: {
        StorageLive(_66);
        _66 = move ((_60 as Continue).0: anchor_lang::prelude::Clock);
        _59 = move _66;
        StorageDead(_66);
        _1107 = discriminant(_60);
        StorageDead(_60);
        StorageLive(_67);
        _67 = (_59.4: i64);
        StorageLive(_68);
        _68 = (_59.0: u64);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _3;
        StorageLive(_72);
        _72 = _4;
        _70 = Ne(move _71, move _72);
        switchInt(move _70) -> [0: bb22, otherwise: bb20];
    }

    bb18: {
        StorageLive(_63);
        _63 = move ((_60 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_65);
        _65 = move _63;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _65) -> [return: bb19, unwind: bb393];
    }

    bb19: {
        StorageDead(_65);
        StorageDead(_63);
        _1109 = discriminant(_60);
        StorageDead(_60);
        goto -> bb375;
    }

    bb20: {
        StorageDead(_72);
        StorageDead(_71);
        StorageLive(_74);
        StorageLive(_75);
        _75 = error::ErrorCode::InvalidInitialPeg;
        _74 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _75) -> [return: bb21, unwind: bb390];
    }

    bb21: {
        StorageDead(_75);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _74);
        StorageDead(_74);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb374;
    }

    bb22: {
        StorageDead(_72);
        StorageDead(_71);
        _69 = const ();
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _1067 = const _;
        _80 = &(*_1067);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_24;
        _82 = &(*_83);
        _79 = RangeInclusive::<u8>::contains::<u8>(move _80, move _82) -> [return: bb23, unwind: bb390];
    }

    bb23: {
        switchInt(move _79) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageLive(_84);
        _84 = ();
        _78 = std::result::Result::<(), error::ErrorCode>::Ok(move _84);
        StorageDead(_84);
        goto -> bb37;
    }

    bb25: {
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageLive(_85);
        _85 = error::ErrorCode::DefaultError;
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _1066 = const _;
        _96 = &(*_1066);
        _95 = &(*_96);
        _94 = move _95 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_95);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = &_85;
        _103 = &(*_104);
        _102 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _103) -> [return: bb26, unwind: bb390];
    }

    bb26: {
        StorageDead(_103);
        _101 = [move _102];
        StorageDead(_102);
        _100 = &_101;
        _99 = &(*_100);
        _98 = move _99 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_99);
        _93 = Arguments::<'_>::new_v1(move _94, move _98) -> [return: bb27, unwind: bb390];
    }

    bb27: {
        StorageDead(_98);
        StorageDead(_94);
        _92 = format(move _93) -> [return: bb28, unwind: bb390];
    }

    bb28: {
        StorageDead(_93);
        StorageDead(_104);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_96);
        _91 = move _92;
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = <String as Deref>::deref(move _89) -> [return: bb29, unwind: bb389];
    }

    bb29: {
        _87 = &(*_88);
        StorageDead(_89);
        _86 = solana_program::log::sol_log(move _87) -> [return: bb30, unwind: bb389];
    }

    bb30: {
        StorageDead(_87);
        drop(_91) -> [return: bb31, unwind: bb390];
    }

    bb31: {
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_86);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _1065 = const _;
        _115 = &(*_1065);
        _114 = &(*_115);
        _113 = move _114 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_114);
        _112 = Arguments::<'_>::new_const(move _113) -> [return: bb32, unwind: bb390];
    }

    bb32: {
        StorageDead(_113);
        _111 = format(move _112) -> [return: bb33, unwind: bb390];
    }

    bb33: {
        StorageDead(_112);
        StorageDead(_115);
        _110 = move _111;
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = <String as Deref>::deref(move _108) -> [return: bb34, unwind: bb388];
    }

    bb34: {
        _106 = &(*_107);
        StorageDead(_108);
        _105 = solana_program::log::sol_log(move _106) -> [return: bb35, unwind: bb388];
    }

    bb35: {
        StorageDead(_106);
        drop(_110) -> [return: bb36, unwind: bb390];
    }

    bb36: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_105);
        StorageLive(_117);
        _117 = _85;
        _78 = std::result::Result::<(), error::ErrorCode>::Err(move _117);
        StorageDead(_117);
        StorageDead(_85);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_79);
        _77 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _78) -> [return: bb38, unwind: bb390];
    }

    bb38: {
        StorageDead(_78);
        _118 = discriminant(_77);
        switchInt(move _118) -> [0: bb39, 1: bb40, otherwise: bb12];
    }

    bb39: {
        StorageLive(_122);
        _122 = ((_77 as Continue).0: ());
        _76 = _122;
        StorageDead(_122);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _1064 = const _;
        _127 = &(*_1064);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &_25;
        _129 = &(*_130);
        _126 = RangeInclusive::<u8>::contains::<u8>(move _127, move _129) -> [return: bb42, unwind: bb390];
    }

    bb40: {
        StorageLive(_119);
        _119 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb41, unwind: bb390];
    }

    bb41: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb374;
    }

    bb42: {
        switchInt(move _126) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_131);
        _131 = ();
        _125 = std::result::Result::<(), error::ErrorCode>::Ok(move _131);
        StorageDead(_131);
        goto -> bb56;
    }

    bb44: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_132);
        _132 = error::ErrorCode::DefaultError;
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _1063 = const _;
        _143 = &(*_1063);
        _142 = &(*_143);
        _141 = move _142 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_132;
        _150 = &(*_151);
        _149 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _150) -> [return: bb45, unwind: bb390];
    }

    bb45: {
        StorageDead(_150);
        _148 = [move _149];
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = move _146 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_146);
        _140 = Arguments::<'_>::new_v1(move _141, move _145) -> [return: bb46, unwind: bb390];
    }

    bb46: {
        StorageDead(_145);
        StorageDead(_141);
        _139 = format(move _140) -> [return: bb47, unwind: bb390];
    }

    bb47: {
        StorageDead(_140);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        _138 = move _139;
        StorageDead(_139);
        _137 = &_138;
        _136 = &(*_137);
        _135 = <String as Deref>::deref(move _136) -> [return: bb48, unwind: bb387];
    }

    bb48: {
        _134 = &(*_135);
        StorageDead(_136);
        _133 = solana_program::log::sol_log(move _134) -> [return: bb49, unwind: bb387];
    }

    bb49: {
        StorageDead(_134);
        drop(_138) -> [return: bb50, unwind: bb390];
    }

    bb50: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _1062 = const _;
        _162 = &(*_1062);
        _161 = &(*_162);
        _160 = move _161 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_161);
        _159 = Arguments::<'_>::new_const(move _160) -> [return: bb51, unwind: bb390];
    }

    bb51: {
        StorageDead(_160);
        _158 = format(move _159) -> [return: bb52, unwind: bb390];
    }

    bb52: {
        StorageDead(_159);
        StorageDead(_162);
        _157 = move _158;
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = <String as Deref>::deref(move _155) -> [return: bb53, unwind: bb386];
    }

    bb53: {
        _153 = &(*_154);
        StorageDead(_155);
        _152 = solana_program::log::sol_log(move _153) -> [return: bb54, unwind: bb386];
    }

    bb54: {
        StorageDead(_153);
        drop(_157) -> [return: bb55, unwind: bb390];
    }

    bb55: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_152);
        StorageLive(_164);
        _164 = _132;
        _125 = std::result::Result::<(), error::ErrorCode>::Err(move _164);
        StorageDead(_164);
        StorageDead(_132);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_126);
        _124 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _125) -> [return: bb57, unwind: bb390];
    }

    bb57: {
        StorageDead(_125);
        _165 = discriminant(_124);
        switchInt(move _165) -> [0: bb58, 1: bb59, otherwise: bb12];
    }

    bb58: {
        StorageLive(_169);
        _169 = ((_124 as Continue).0: ());
        _123 = _169;
        StorageDead(_169);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _4;
        StorageLive(_174);
        _174 = _3;
        StorageLive(_175);
        _175 = _6;
        _172 = calculate_price(move _173, move _174, move _175) -> [return: bb61, unwind: bb390];
    }

    bb59: {
        StorageLive(_166);
        _166 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_168);
        _168 = _166;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _168) -> [return: bb60, unwind: bb390];
    }

    bb60: {
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb374;
    }

    bb61: {
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_173);
        _171 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _172) -> [return: bb62, unwind: bb390];
    }

    bb62: {
        StorageDead(_172);
        _176 = discriminant(_171);
        switchInt(move _176) -> [0: bb63, 1: bb64, otherwise: bb12];
    }

    bb63: {
        StorageLive(_180);
        _180 = ((_171 as Continue).0: u64);
        _170 = _180;
        StorageDead(_180);
        StorageDead(_171);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &_6;
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = _170;
        _187 = <u64 as Cast>::cast::<u128>(move _188) -> [return: bb66, unwind: bb390];
    }

    bb64: {
        StorageLive(_177);
        _177 = ((_171 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_179);
        _179 = _177;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _179) -> [return: bb65, unwind: bb390];
    }

    bb65: {
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_171);
        goto -> bb373;
    }

    bb66: {
        StorageDead(_188);
        _186 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _187) -> [return: bb67, unwind: bb390];
    }

    bb67: {
        StorageDead(_187);
        _189 = discriminant(_186);
        switchInt(move _189) -> [0: bb68, 1: bb69, otherwise: bb12];
    }

    bb68: {
        StorageLive(_193);
        _193 = ((_186 as Continue).0: u128);
        _185 = _193;
        StorageDead(_193);
        _184 = &_185;
        _182 = (move _183, move _184);
        StorageDead(_184);
        StorageDead(_183);
        StorageLive(_194);
        _194 = (_182.0: &u128);
        StorageLive(_195);
        _195 = (_182.1: &u128);
        StorageLive(_196);
        StorageLive(_197);
        _197 = (*_194);
        StorageLive(_198);
        _198 = (*_195);
        _196 = Eq(move _197, move _198);
        switchInt(move _196) -> [0: bb72, otherwise: bb71];
    }

    bb69: {
        StorageLive(_190);
        _190 = ((_186 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb70, unwind: bb390];
    }

    bb70: {
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb373;
    }

    bb71: {
        StorageDead(_198);
        StorageDead(_197);
        _181 = const ();
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_194);
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_208);
        _208 = const _;
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = _3;
        _212 = <U192 as From<u128>>::from(move _213) -> [return: bb73, unwind: bb390];
    }

    bb72: {
        StorageDead(_198);
        StorageDead(_197);
        StorageLive(_200);
        _200 = core::panicking::AssertKind::Eq;
        StorageLive(_201);
        StorageLive(_202);
        _202 = move _200;
        StorageLive(_203);
        StorageLive(_204);
        _204 = &(*_194);
        _203 = &(*_204);
        StorageLive(_205);
        StorageLive(_206);
        _206 = &(*_195);
        _205 = &(*_206);
        StorageLive(_207);
        _207 = Option::<Arguments<'_>>::None;
        _201 = assert_failed::<u128, u128>(move _202, move _203, move _205, move _207) -> bb390;
    }

    bb73: {
        StorageDead(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = _4;
        _214 = <U192 as From<u128>>::from(move _215) -> [return: bb74, unwind: bb390];
    }

    bb74: {
        StorageDead(_215);
        _211 = <U192 as SafeMath>::safe_mul(move _212, move _214) -> [return: bb75, unwind: bb390];
    }

    bb75: {
        StorageDead(_214);
        StorageDead(_212);
        _210 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _211) -> [return: bb76, unwind: bb390];
    }

    bb76: {
        StorageDead(_211);
        _216 = discriminant(_210);
        switchInt(move _216) -> [0: bb77, 1: bb78, otherwise: bb12];
    }

    bb77: {
        StorageLive(_220);
        _220 = ((_210 as Continue).0: math::bn::U192);
        _209 = _220;
        StorageDead(_220);
        StorageDead(_210);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = _208;
        StorageLive(_227);
        _227 = _3;
        _225 = calculate_bid_ask_bounds(move _226, move _227) -> [return: bb80, unwind: bb390];
    }

    bb78: {
        StorageLive(_217);
        _217 = ((_210 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_219);
        _219 = _217;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _219) -> [return: bb79, unwind: bb390];
    }

    bb79: {
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_210);
        goto -> bb372;
    }

    bb80: {
        StorageDead(_227);
        StorageDead(_226);
        _224 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _225) -> [return: bb81, unwind: bb390];
    }

    bb81: {
        StorageDead(_225);
        _228 = discriminant(_224);
        switchInt(move _228) -> [0: bb82, 1: bb83, otherwise: bb12];
    }

    bb82: {
        StorageLive(_232);
        _232 = ((_224 as Continue).0: (u128, u128));
        _223 = _232;
        StorageDead(_232);
        StorageLive(_221);
        _221 = (_223.0: u128);
        StorageLive(_222);
        _222 = (_223.1: u128);
        StorageDead(_224);
        StorageDead(_223);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _1071 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _237 = &((*_1071).3: anchor_lang::prelude::AccountInfo<'_>);
        _236 = &(*_237);
        _235 = OracleMap::<'_>::validate_oracle_account_info(move _236) -> [return: bb85, unwind: bb390];
    }

    bb83: {
        StorageLive(_229);
        _229 = ((_224 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_231);
        _231 = _229;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _231) -> [return: bb84, unwind: bb390];
    }

    bb84: {
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_224);
        StorageDead(_223);
        goto -> bb372;
    }

    bb85: {
        StorageDead(_236);
        _234 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _235) -> [return: bb86, unwind: bb390];
    }

    bb86: {
        StorageDead(_235);
        _238 = discriminant(_234);
        switchInt(move _238) -> [0: bb87, 1: bb88, otherwise: bb12];
    }

    bb87: {
        StorageLive(_242);
        _242 = ((_234 as Continue).0: ());
        _233 = _242;
        StorageDead(_242);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_246);
        _247 = discriminant(_7);
        switchInt(move _247) -> [0: bb91, 1: bb133, 2: bb139, 3: bb103, 4: bb115, 5: bb127, 6: bb142, 7: bb148, 8: bb160, 9: bb172, 10: bb184, 11: bb190, 12: bb196, 13: bb208, 14: bb220, 15: bb90, otherwise: bb12];
    }

    bb88: {
        StorageLive(_239);
        _239 = ((_234 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_241);
        _241 = _239;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _241) -> [return: bb89, unwind: bb390];
    }

    bb89: {
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_237);
        StorageDead(_234);
        StorageDead(_233);
        goto -> bb371;
    }

    bb90: {
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        StorageLive(_658);
        StorageLive(_659);
        _1072 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _659 = &((*_1072).3: anchor_lang::prelude::AccountInfo<'_>);
        _658 = &(*_659);
        StorageLive(_660);
        _660 = _68;
        StorageLive(_661);
        StorageLive(_662);
        _1041 = const _;
        _662 = &(*_1041);
        _661 = &(*_662);
        _657 = get_pyth_price(move _658, move _660, move _661) -> [return: bb232, unwind: bb390];
    }

    bb91: {
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _1073 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _254 = &((*_1073).3: anchor_lang::prelude::AccountInfo<'_>);
        _253 = &(*_254);
        StorageLive(_255);
        _255 = _68;
        StorageLive(_256);
        StorageLive(_257);
        _1061 = const _;
        _257 = &(*_1061);
        _256 = &(*_257);
        _252 = get_pyth_price(move _253, move _255, move _256) -> [return: bb92, unwind: bb390];
    }

    bb92: {
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_253);
        _251 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _252) -> [return: bb93, unwind: bb390];
    }

    bb93: {
        StorageDead(_252);
        _259 = discriminant(_251);
        switchInt(move _259) -> [0: bb94, 1: bb95, otherwise: bb12];
    }

    bb94: {
        StorageLive(_263);
        _263 = ((_251 as Continue).0: state::oracle::OraclePriceData);
        _250 = _263;
        StorageDead(_263);
        StorageLive(_248);
        _248 = (_250.0: i64);
        StorageLive(_249);
        _249 = (_250.2: i64);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = &(*_49);
        _268 = <RefMut<'_, PerpMarket> as Deref>::deref(move _269) -> [return: bb97, unwind: bb390];
    }

    bb95: {
        StorageLive(_260);
        _260 = ((_251 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_262);
        _262 = _260;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _262) -> [return: bb96, unwind: bb390];
    }

    bb96: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_250);
        goto -> bb370;
    }

    bb97: {
        StorageDead(_269);
        _267 = &((*_268).1: state::perp_market::AMM);
        StorageLive(_270);
        StorageLive(_271);
        _1074 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _271 = &((*_1074).3: anchor_lang::prelude::AccountInfo<'_>);
        _270 = &(*_271);
        StorageLive(_272);
        StorageLive(_273);
        _1060 = const _;
        _273 = &(*_1060);
        _272 = &(*_273);
        _266 = AMM::get_pyth_twap(move _267, move _270, move _272) -> [return: bb98, unwind: bb390];
    }

    bb98: {
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_267);
        _265 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _266) -> [return: bb99, unwind: bb390];
    }

    bb99: {
        StorageDead(_266);
        _275 = discriminant(_265);
        switchInt(move _275) -> [0: bb100, 1: bb101, otherwise: bb12];
    }

    bb100: {
        StorageLive(_279);
        _279 = ((_265 as Continue).0: i64);
        _264 = _279;
        StorageDead(_279);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_268);
        StorageDead(_265);
        StorageLive(_280);
        _280 = _248;
        StorageLive(_281);
        _281 = _249;
        StorageLive(_282);
        _282 = _264;
        _246 = (move _280, move _281, move _282);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_264);
        StorageDead(_249);
        StorageDead(_248);
        goto -> bb237;
    }

    bb101: {
        StorageLive(_276);
        _276 = ((_265 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_278);
        _278 = _276;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _278) -> [return: bb102, unwind: bb390];
    }

    bb102: {
        StorageDead(_278);
        StorageDead(_276);
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_268);
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_249);
        StorageDead(_248);
        goto -> bb370;
    }

    bb103: {
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _1075 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _289 = &((*_1075).3: anchor_lang::prelude::AccountInfo<'_>);
        _288 = &(*_289);
        StorageLive(_290);
        _290 = _68;
        StorageLive(_291);
        StorageLive(_292);
        _1059 = const _;
        _292 = &(*_1059);
        _291 = &(*_292);
        _287 = get_pyth_price(move _288, move _290, move _291) -> [return: bb104, unwind: bb390];
    }

    bb104: {
        StorageDead(_291);
        StorageDead(_290);
        StorageDead(_288);
        _286 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _287) -> [return: bb105, unwind: bb390];
    }

    bb105: {
        StorageDead(_287);
        _294 = discriminant(_286);
        switchInt(move _294) -> [0: bb106, 1: bb107, otherwise: bb12];
    }

    bb106: {
        StorageLive(_298);
        _298 = ((_286 as Continue).0: state::oracle::OraclePriceData);
        _285 = _298;
        StorageDead(_298);
        StorageLive(_283);
        _283 = (_285.0: i64);
        StorageLive(_284);
        _284 = (_285.2: i64);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_285);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &(*_49);
        _303 = <RefMut<'_, PerpMarket> as Deref>::deref(move _304) -> [return: bb109, unwind: bb390];
    }

    bb107: {
        StorageLive(_295);
        _295 = ((_286 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_297);
        _297 = _295;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _297) -> [return: bb108, unwind: bb390];
    }

    bb108: {
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_292);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_285);
        goto -> bb370;
    }

    bb109: {
        StorageDead(_304);
        _302 = &((*_303).1: state::perp_market::AMM);
        StorageLive(_305);
        StorageLive(_306);
        _1076 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _306 = &((*_1076).3: anchor_lang::prelude::AccountInfo<'_>);
        _305 = &(*_306);
        StorageLive(_307);
        StorageLive(_308);
        _1058 = const _;
        _308 = &(*_1058);
        _307 = &(*_308);
        _301 = AMM::get_pyth_twap(move _302, move _305, move _307) -> [return: bb110, unwind: bb390];
    }

    bb110: {
        StorageDead(_307);
        StorageDead(_305);
        StorageDead(_302);
        _300 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _301) -> [return: bb111, unwind: bb390];
    }

    bb111: {
        StorageDead(_301);
        _310 = discriminant(_300);
        switchInt(move _310) -> [0: bb112, 1: bb113, otherwise: bb12];
    }

    bb112: {
        StorageLive(_314);
        _314 = ((_300 as Continue).0: i64);
        _299 = _314;
        StorageDead(_314);
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_303);
        StorageDead(_300);
        StorageLive(_315);
        _315 = _283;
        StorageLive(_316);
        _316 = _284;
        StorageLive(_317);
        _317 = _299;
        _246 = (move _315, move _316, move _317);
        StorageDead(_317);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_299);
        StorageDead(_284);
        StorageDead(_283);
        goto -> bb237;
    }

    bb113: {
        StorageLive(_311);
        _311 = ((_300 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_313);
        _313 = _311;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _313) -> [return: bb114, unwind: bb390];
    }

    bb114: {
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_303);
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_284);
        StorageDead(_283);
        goto -> bb370;
    }

    bb115: {
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        _1077 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _324 = &((*_1077).3: anchor_lang::prelude::AccountInfo<'_>);
        _323 = &(*_324);
        StorageLive(_325);
        _325 = _68;
        StorageLive(_326);
        StorageLive(_327);
        _1057 = const _;
        _327 = &(*_1057);
        _326 = &(*_327);
        _322 = get_pyth_price(move _323, move _325, move _326) -> [return: bb116, unwind: bb390];
    }

    bb116: {
        StorageDead(_326);
        StorageDead(_325);
        StorageDead(_323);
        _321 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _322) -> [return: bb117, unwind: bb390];
    }

    bb117: {
        StorageDead(_322);
        _329 = discriminant(_321);
        switchInt(move _329) -> [0: bb118, 1: bb119, otherwise: bb12];
    }

    bb118: {
        StorageLive(_333);
        _333 = ((_321 as Continue).0: state::oracle::OraclePriceData);
        _320 = _333;
        StorageDead(_333);
        StorageLive(_318);
        _318 = (_320.0: i64);
        StorageLive(_319);
        _319 = (_320.2: i64);
        StorageDead(_327);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_320);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = &(*_49);
        _338 = <RefMut<'_, PerpMarket> as Deref>::deref(move _339) -> [return: bb121, unwind: bb390];
    }

    bb119: {
        StorageLive(_330);
        _330 = ((_321 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_332);
        _332 = _330;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _332) -> [return: bb120, unwind: bb390];
    }

    bb120: {
        StorageDead(_332);
        StorageDead(_330);
        StorageDead(_327);
        StorageDead(_324);
        StorageDead(_321);
        StorageDead(_320);
        goto -> bb370;
    }

    bb121: {
        StorageDead(_339);
        _337 = &((*_338).1: state::perp_market::AMM);
        StorageLive(_340);
        StorageLive(_341);
        _1078 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _341 = &((*_1078).3: anchor_lang::prelude::AccountInfo<'_>);
        _340 = &(*_341);
        StorageLive(_342);
        StorageLive(_343);
        _1056 = const _;
        _343 = &(*_1056);
        _342 = &(*_343);
        _336 = AMM::get_pyth_twap(move _337, move _340, move _342) -> [return: bb122, unwind: bb390];
    }

    bb122: {
        StorageDead(_342);
        StorageDead(_340);
        StorageDead(_337);
        _335 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _336) -> [return: bb123, unwind: bb390];
    }

    bb123: {
        StorageDead(_336);
        _345 = discriminant(_335);
        switchInt(move _345) -> [0: bb124, 1: bb125, otherwise: bb12];
    }

    bb124: {
        StorageLive(_349);
        _349 = ((_335 as Continue).0: i64);
        _334 = _349;
        StorageDead(_349);
        StorageDead(_343);
        StorageDead(_341);
        StorageDead(_338);
        StorageDead(_335);
        StorageLive(_350);
        _350 = _318;
        StorageLive(_351);
        _351 = _319;
        StorageLive(_352);
        _352 = _334;
        _246 = (move _350, move _351, move _352);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_334);
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb237;
    }

    bb125: {
        StorageLive(_346);
        _346 = ((_335 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_348);
        _348 = _346;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _348) -> [return: bb126, unwind: bb390];
    }

    bb126: {
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_341);
        StorageDead(_338);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb370;
    }

    bb127: {
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _1079 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _359 = &((*_1079).3: anchor_lang::prelude::AccountInfo<'_>);
        _358 = &(*_359);
        StorageLive(_360);
        _360 = _68;
        StorageLive(_361);
        StorageLive(_362);
        _1055 = const _;
        _362 = &(*_1055);
        _361 = &(*_362);
        _357 = get_pyth_price(move _358, move _360, move _361) -> [return: bb128, unwind: bb390];
    }

    bb128: {
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_358);
        _356 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _357) -> [return: bb129, unwind: bb390];
    }

    bb129: {
        StorageDead(_357);
        _364 = discriminant(_356);
        switchInt(move _364) -> [0: bb130, 1: bb131, otherwise: bb12];
    }

    bb130: {
        StorageLive(_368);
        _368 = ((_356 as Continue).0: state::oracle::OraclePriceData);
        _355 = _368;
        StorageDead(_368);
        StorageLive(_353);
        _353 = (_355.0: i64);
        StorageLive(_354);
        _354 = (_355.2: i64);
        StorageDead(_362);
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_355);
        StorageLive(_369);
        _369 = _353;
        StorageLive(_370);
        _370 = _354;
        _246 = (move _369, move _370, const _);
        StorageDead(_370);
        StorageDead(_369);
        StorageDead(_354);
        StorageDead(_353);
        goto -> bb237;
    }

    bb131: {
        StorageLive(_365);
        _365 = ((_356 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_367);
        _367 = _365;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _367) -> [return: bb132, unwind: bb390];
    }

    bb132: {
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_362);
        StorageDead(_359);
        StorageDead(_356);
        StorageDead(_355);
        goto -> bb370;
    }

    bb133: {
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _1080 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _377 = &((*_1080).3: anchor_lang::prelude::AccountInfo<'_>);
        _376 = &(*_377);
        StorageLive(_378);
        _378 = _68;
        _375 = get_switchboard_price(move _376, move _378) -> [return: bb134, unwind: bb390];
    }

    bb134: {
        StorageDead(_378);
        StorageDead(_376);
        _374 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _375) -> [return: bb135, unwind: bb390];
    }

    bb135: {
        StorageDead(_375);
        _379 = discriminant(_374);
        switchInt(move _379) -> [0: bb136, 1: bb137, otherwise: bb12];
    }

    bb136: {
        StorageLive(_383);
        _383 = ((_374 as Continue).0: state::oracle::OraclePriceData);
        _373 = _383;
        StorageDead(_383);
        StorageLive(_371);
        _371 = (_373.0: i64);
        StorageLive(_372);
        _372 = (_373.2: i64);
        StorageDead(_377);
        StorageDead(_374);
        StorageDead(_373);
        StorageLive(_384);
        _384 = _371;
        StorageLive(_385);
        _385 = _372;
        StorageLive(_386);
        _386 = _371;
        _246 = (move _384, move _385, move _386);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_372);
        StorageDead(_371);
        goto -> bb237;
    }

    bb137: {
        StorageLive(_380);
        _380 = ((_374 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_382);
        _382 = _380;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _382) -> [return: bb138, unwind: bb390];
    }

    bb138: {
        StorageDead(_382);
        StorageDead(_380);
        StorageDead(_377);
        StorageDead(_374);
        StorageDead(_373);
        goto -> bb370;
    }

    bb139: {
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = const "Quote asset oracle cant be used for perp market";
        _389 = &(*_390);
        _388 = solana_program::log::sol_log(move _389) -> [return: bb140, unwind: bb390];
    }

    bb140: {
        StorageDead(_389);
        StorageDead(_390);
        StorageDead(_388);
        StorageLive(_391);
        StorageLive(_392);
        _392 = error::ErrorCode::InvalidOracle;
        _391 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _392) -> [return: bb141, unwind: bb390];
    }

    bb141: {
        StorageDead(_392);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _391);
        StorageDead(_391);
        goto -> bb370;
    }

    bb142: {
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _1081 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _399 = &((*_1081).3: anchor_lang::prelude::AccountInfo<'_>);
        _398 = &(*_399);
        StorageLive(_400);
        _400 = _68;
        _397 = get_prelaunch_price(move _398, move _400) -> [return: bb143, unwind: bb390];
    }

    bb143: {
        StorageDead(_400);
        StorageDead(_398);
        _396 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _397) -> [return: bb144, unwind: bb390];
    }

    bb144: {
        StorageDead(_397);
        _401 = discriminant(_396);
        switchInt(move _401) -> [0: bb145, 1: bb146, otherwise: bb12];
    }

    bb145: {
        StorageLive(_405);
        _405 = ((_396 as Continue).0: state::oracle::OraclePriceData);
        _395 = _405;
        StorageDead(_405);
        StorageLive(_393);
        _393 = (_395.0: i64);
        StorageLive(_394);
        _394 = (_395.2: i64);
        StorageDead(_399);
        StorageDead(_396);
        StorageDead(_395);
        StorageLive(_406);
        _406 = _393;
        StorageLive(_407);
        _407 = _394;
        StorageLive(_408);
        _408 = _393;
        _246 = (move _406, move _407, move _408);
        StorageDead(_408);
        StorageDead(_407);
        StorageDead(_406);
        StorageDead(_394);
        StorageDead(_393);
        goto -> bb237;
    }

    bb146: {
        StorageLive(_402);
        _402 = ((_396 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_404);
        _404 = _402;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _404) -> [return: bb147, unwind: bb390];
    }

    bb147: {
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_399);
        StorageDead(_396);
        StorageDead(_395);
        goto -> bb370;
    }

    bb148: {
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _1082 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _415 = &((*_1082).3: anchor_lang::prelude::AccountInfo<'_>);
        _414 = &(*_415);
        StorageLive(_416);
        _416 = _68;
        StorageLive(_417);
        StorageLive(_418);
        _1054 = const _;
        _418 = &(*_1054);
        _417 = &(*_418);
        _413 = get_pyth_price(move _414, move _416, move _417) -> [return: bb149, unwind: bb390];
    }

    bb149: {
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_414);
        _412 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _413) -> [return: bb150, unwind: bb390];
    }

    bb150: {
        StorageDead(_413);
        _420 = discriminant(_412);
        switchInt(move _420) -> [0: bb151, 1: bb152, otherwise: bb12];
    }

    bb151: {
        StorageLive(_424);
        _424 = ((_412 as Continue).0: state::oracle::OraclePriceData);
        _411 = _424;
        StorageDead(_424);
        StorageLive(_409);
        _409 = (_411.0: i64);
        StorageLive(_410);
        _410 = (_411.2: i64);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_412);
        StorageDead(_411);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = &(*_49);
        _429 = <RefMut<'_, PerpMarket> as Deref>::deref(move _430) -> [return: bb154, unwind: bb390];
    }

    bb152: {
        StorageLive(_421);
        _421 = ((_412 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_423);
        _423 = _421;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _423) -> [return: bb153, unwind: bb390];
    }

    bb153: {
        StorageDead(_423);
        StorageDead(_421);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_412);
        StorageDead(_411);
        goto -> bb370;
    }

    bb154: {
        StorageDead(_430);
        _428 = &((*_429).1: state::perp_market::AMM);
        StorageLive(_431);
        StorageLive(_432);
        _1083 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _432 = &((*_1083).3: anchor_lang::prelude::AccountInfo<'_>);
        _431 = &(*_432);
        StorageLive(_433);
        StorageLive(_434);
        _1053 = const _;
        _434 = &(*_1053);
        _433 = &(*_434);
        _427 = AMM::get_pyth_twap(move _428, move _431, move _433) -> [return: bb155, unwind: bb390];
    }

    bb155: {
        StorageDead(_433);
        StorageDead(_431);
        StorageDead(_428);
        _426 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _427) -> [return: bb156, unwind: bb390];
    }

    bb156: {
        StorageDead(_427);
        _436 = discriminant(_426);
        switchInt(move _436) -> [0: bb157, 1: bb158, otherwise: bb12];
    }

    bb157: {
        StorageLive(_440);
        _440 = ((_426 as Continue).0: i64);
        _425 = _440;
        StorageDead(_440);
        StorageDead(_434);
        StorageDead(_432);
        StorageDead(_429);
        StorageDead(_426);
        StorageLive(_441);
        _441 = _409;
        StorageLive(_442);
        _442 = _410;
        StorageLive(_443);
        _443 = _425;
        _246 = (move _441, move _442, move _443);
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_441);
        StorageDead(_425);
        StorageDead(_410);
        StorageDead(_409);
        goto -> bb237;
    }

    bb158: {
        StorageLive(_437);
        _437 = ((_426 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_439);
        _439 = _437;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _439) -> [return: bb159, unwind: bb390];
    }

    bb159: {
        StorageDead(_439);
        StorageDead(_437);
        StorageDead(_434);
        StorageDead(_432);
        StorageDead(_429);
        StorageDead(_426);
        StorageDead(_425);
        StorageDead(_410);
        StorageDead(_409);
        goto -> bb370;
    }

    bb160: {
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        _1084 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _450 = &((*_1084).3: anchor_lang::prelude::AccountInfo<'_>);
        _449 = &(*_450);
        StorageLive(_451);
        _451 = _68;
        StorageLive(_452);
        StorageLive(_453);
        _1052 = const _;
        _453 = &(*_1052);
        _452 = &(*_453);
        _448 = get_pyth_price(move _449, move _451, move _452) -> [return: bb161, unwind: bb390];
    }

    bb161: {
        StorageDead(_452);
        StorageDead(_451);
        StorageDead(_449);
        _447 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _448) -> [return: bb162, unwind: bb390];
    }

    bb162: {
        StorageDead(_448);
        _455 = discriminant(_447);
        switchInt(move _455) -> [0: bb163, 1: bb164, otherwise: bb12];
    }

    bb163: {
        StorageLive(_459);
        _459 = ((_447 as Continue).0: state::oracle::OraclePriceData);
        _446 = _459;
        StorageDead(_459);
        StorageLive(_444);
        _444 = (_446.0: i64);
        StorageLive(_445);
        _445 = (_446.2: i64);
        StorageDead(_453);
        StorageDead(_450);
        StorageDead(_447);
        StorageDead(_446);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &(*_49);
        _464 = <RefMut<'_, PerpMarket> as Deref>::deref(move _465) -> [return: bb166, unwind: bb390];
    }

    bb164: {
        StorageLive(_456);
        _456 = ((_447 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_458);
        _458 = _456;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _458) -> [return: bb165, unwind: bb390];
    }

    bb165: {
        StorageDead(_458);
        StorageDead(_456);
        StorageDead(_453);
        StorageDead(_450);
        StorageDead(_447);
        StorageDead(_446);
        goto -> bb370;
    }

    bb166: {
        StorageDead(_465);
        _463 = &((*_464).1: state::perp_market::AMM);
        StorageLive(_466);
        StorageLive(_467);
        _1085 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _467 = &((*_1085).3: anchor_lang::prelude::AccountInfo<'_>);
        _466 = &(*_467);
        StorageLive(_468);
        StorageLive(_469);
        _1051 = const _;
        _469 = &(*_1051);
        _468 = &(*_469);
        _462 = AMM::get_pyth_twap(move _463, move _466, move _468) -> [return: bb167, unwind: bb390];
    }

    bb167: {
        StorageDead(_468);
        StorageDead(_466);
        StorageDead(_463);
        _461 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _462) -> [return: bb168, unwind: bb390];
    }

    bb168: {
        StorageDead(_462);
        _471 = discriminant(_461);
        switchInt(move _471) -> [0: bb169, 1: bb170, otherwise: bb12];
    }

    bb169: {
        StorageLive(_475);
        _475 = ((_461 as Continue).0: i64);
        _460 = _475;
        StorageDead(_475);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_464);
        StorageDead(_461);
        StorageLive(_476);
        _476 = _444;
        StorageLive(_477);
        _477 = _445;
        StorageLive(_478);
        _478 = _460;
        _246 = (move _476, move _477, move _478);
        StorageDead(_478);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_460);
        StorageDead(_445);
        StorageDead(_444);
        goto -> bb237;
    }

    bb170: {
        StorageLive(_472);
        _472 = ((_461 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_474);
        _474 = _472;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _474) -> [return: bb171, unwind: bb390];
    }

    bb171: {
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_464);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_445);
        StorageDead(_444);
        goto -> bb370;
    }

    bb172: {
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        _1086 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _485 = &((*_1086).3: anchor_lang::prelude::AccountInfo<'_>);
        _484 = &(*_485);
        StorageLive(_486);
        _486 = _68;
        StorageLive(_487);
        StorageLive(_488);
        _1050 = const _;
        _488 = &(*_1050);
        _487 = &(*_488);
        _483 = get_pyth_price(move _484, move _486, move _487) -> [return: bb173, unwind: bb390];
    }

    bb173: {
        StorageDead(_487);
        StorageDead(_486);
        StorageDead(_484);
        _482 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _483) -> [return: bb174, unwind: bb390];
    }

    bb174: {
        StorageDead(_483);
        _490 = discriminant(_482);
        switchInt(move _490) -> [0: bb175, 1: bb176, otherwise: bb12];
    }

    bb175: {
        StorageLive(_494);
        _494 = ((_482 as Continue).0: state::oracle::OraclePriceData);
        _481 = _494;
        StorageDead(_494);
        StorageLive(_479);
        _479 = (_481.0: i64);
        StorageLive(_480);
        _480 = (_481.2: i64);
        StorageDead(_488);
        StorageDead(_485);
        StorageDead(_482);
        StorageDead(_481);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        _500 = &(*_49);
        _499 = <RefMut<'_, PerpMarket> as Deref>::deref(move _500) -> [return: bb178, unwind: bb390];
    }

    bb176: {
        StorageLive(_491);
        _491 = ((_482 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_493);
        _493 = _491;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _493) -> [return: bb177, unwind: bb390];
    }

    bb177: {
        StorageDead(_493);
        StorageDead(_491);
        StorageDead(_488);
        StorageDead(_485);
        StorageDead(_482);
        StorageDead(_481);
        goto -> bb370;
    }

    bb178: {
        StorageDead(_500);
        _498 = &((*_499).1: state::perp_market::AMM);
        StorageLive(_501);
        StorageLive(_502);
        _1087 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _502 = &((*_1087).3: anchor_lang::prelude::AccountInfo<'_>);
        _501 = &(*_502);
        StorageLive(_503);
        StorageLive(_504);
        _1049 = const _;
        _504 = &(*_1049);
        _503 = &(*_504);
        _497 = AMM::get_pyth_twap(move _498, move _501, move _503) -> [return: bb179, unwind: bb390];
    }

    bb179: {
        StorageDead(_503);
        StorageDead(_501);
        StorageDead(_498);
        _496 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _497) -> [return: bb180, unwind: bb390];
    }

    bb180: {
        StorageDead(_497);
        _506 = discriminant(_496);
        switchInt(move _506) -> [0: bb181, 1: bb182, otherwise: bb12];
    }

    bb181: {
        StorageLive(_510);
        _510 = ((_496 as Continue).0: i64);
        _495 = _510;
        StorageDead(_510);
        StorageDead(_504);
        StorageDead(_502);
        StorageDead(_499);
        StorageDead(_496);
        StorageLive(_511);
        _511 = _479;
        StorageLive(_512);
        _512 = _480;
        StorageLive(_513);
        _513 = _495;
        _246 = (move _511, move _512, move _513);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_511);
        StorageDead(_495);
        StorageDead(_480);
        StorageDead(_479);
        goto -> bb237;
    }

    bb182: {
        StorageLive(_507);
        _507 = ((_496 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_509);
        _509 = _507;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _509) -> [return: bb183, unwind: bb390];
    }

    bb183: {
        StorageDead(_509);
        StorageDead(_507);
        StorageDead(_504);
        StorageDead(_502);
        StorageDead(_499);
        StorageDead(_496);
        StorageDead(_495);
        StorageDead(_480);
        StorageDead(_479);
        goto -> bb370;
    }

    bb184: {
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _1088 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _520 = &((*_1088).3: anchor_lang::prelude::AccountInfo<'_>);
        _519 = &(*_520);
        StorageLive(_521);
        _521 = _68;
        StorageLive(_522);
        StorageLive(_523);
        _1048 = const _;
        _523 = &(*_1048);
        _522 = &(*_523);
        _518 = get_pyth_price(move _519, move _521, move _522) -> [return: bb185, unwind: bb390];
    }

    bb185: {
        StorageDead(_522);
        StorageDead(_521);
        StorageDead(_519);
        _517 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _518) -> [return: bb186, unwind: bb390];
    }

    bb186: {
        StorageDead(_518);
        _525 = discriminant(_517);
        switchInt(move _525) -> [0: bb187, 1: bb188, otherwise: bb12];
    }

    bb187: {
        StorageLive(_529);
        _529 = ((_517 as Continue).0: state::oracle::OraclePriceData);
        _516 = _529;
        StorageDead(_529);
        StorageLive(_514);
        _514 = (_516.0: i64);
        StorageLive(_515);
        _515 = (_516.2: i64);
        StorageDead(_523);
        StorageDead(_520);
        StorageDead(_517);
        StorageDead(_516);
        StorageLive(_530);
        _530 = _514;
        StorageLive(_531);
        _531 = _515;
        _246 = (move _530, move _531, const _);
        StorageDead(_531);
        StorageDead(_530);
        StorageDead(_515);
        StorageDead(_514);
        goto -> bb237;
    }

    bb188: {
        StorageLive(_526);
        _526 = ((_517 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_528);
        _528 = _526;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _528) -> [return: bb189, unwind: bb390];
    }

    bb189: {
        StorageDead(_528);
        StorageDead(_526);
        StorageDead(_523);
        StorageDead(_520);
        StorageDead(_517);
        StorageDead(_516);
        goto -> bb370;
    }

    bb190: {
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _1089 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _538 = &((*_1089).3: anchor_lang::prelude::AccountInfo<'_>);
        _537 = &(*_538);
        StorageLive(_539);
        _539 = _68;
        _536 = get_sb_on_demand_price(move _537, move _539) -> [return: bb191, unwind: bb390];
    }

    bb191: {
        StorageDead(_539);
        StorageDead(_537);
        _535 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _536) -> [return: bb192, unwind: bb390];
    }

    bb192: {
        StorageDead(_536);
        _540 = discriminant(_535);
        switchInt(move _540) -> [0: bb193, 1: bb194, otherwise: bb12];
    }

    bb193: {
        StorageLive(_544);
        _544 = ((_535 as Continue).0: state::oracle::OraclePriceData);
        _534 = _544;
        StorageDead(_544);
        StorageLive(_532);
        _532 = (_534.0: i64);
        StorageLive(_533);
        _533 = (_534.2: i64);
        StorageDead(_538);
        StorageDead(_535);
        StorageDead(_534);
        StorageLive(_545);
        _545 = _532;
        StorageLive(_546);
        _546 = _533;
        StorageLive(_547);
        _547 = _532;
        _246 = (move _545, move _546, move _547);
        StorageDead(_547);
        StorageDead(_546);
        StorageDead(_545);
        StorageDead(_533);
        StorageDead(_532);
        goto -> bb237;
    }

    bb194: {
        StorageLive(_541);
        _541 = ((_535 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_543);
        _543 = _541;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _543) -> [return: bb195, unwind: bb390];
    }

    bb195: {
        StorageDead(_543);
        StorageDead(_541);
        StorageDead(_538);
        StorageDead(_535);
        StorageDead(_534);
        goto -> bb370;
    }

    bb196: {
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        _1090 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _554 = &((*_1090).3: anchor_lang::prelude::AccountInfo<'_>);
        _553 = &(*_554);
        StorageLive(_555);
        _555 = _68;
        StorageLive(_556);
        StorageLive(_557);
        _1047 = const _;
        _557 = &(*_1047);
        _556 = &(*_557);
        _552 = get_pyth_price(move _553, move _555, move _556) -> [return: bb197, unwind: bb390];
    }

    bb197: {
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_553);
        _551 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _552) -> [return: bb198, unwind: bb390];
    }

    bb198: {
        StorageDead(_552);
        _559 = discriminant(_551);
        switchInt(move _559) -> [0: bb199, 1: bb200, otherwise: bb12];
    }

    bb199: {
        StorageLive(_563);
        _563 = ((_551 as Continue).0: state::oracle::OraclePriceData);
        _550 = _563;
        StorageDead(_563);
        StorageLive(_548);
        _548 = (_550.0: i64);
        StorageLive(_549);
        _549 = (_550.2: i64);
        StorageDead(_557);
        StorageDead(_554);
        StorageDead(_551);
        StorageDead(_550);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        StorageLive(_569);
        _569 = &(*_49);
        _568 = <RefMut<'_, PerpMarket> as Deref>::deref(move _569) -> [return: bb202, unwind: bb390];
    }

    bb200: {
        StorageLive(_560);
        _560 = ((_551 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_562);
        _562 = _560;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _562) -> [return: bb201, unwind: bb390];
    }

    bb201: {
        StorageDead(_562);
        StorageDead(_560);
        StorageDead(_557);
        StorageDead(_554);
        StorageDead(_551);
        StorageDead(_550);
        goto -> bb370;
    }

    bb202: {
        StorageDead(_569);
        _567 = &((*_568).1: state::perp_market::AMM);
        StorageLive(_570);
        StorageLive(_571);
        _1091 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _571 = &((*_1091).3: anchor_lang::prelude::AccountInfo<'_>);
        _570 = &(*_571);
        StorageLive(_572);
        StorageLive(_573);
        _1046 = const _;
        _573 = &(*_1046);
        _572 = &(*_573);
        _566 = AMM::get_pyth_twap(move _567, move _570, move _572) -> [return: bb203, unwind: bb390];
    }

    bb203: {
        StorageDead(_572);
        StorageDead(_570);
        StorageDead(_567);
        _565 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _566) -> [return: bb204, unwind: bb390];
    }

    bb204: {
        StorageDead(_566);
        _575 = discriminant(_565);
        switchInt(move _575) -> [0: bb205, 1: bb206, otherwise: bb12];
    }

    bb205: {
        StorageLive(_579);
        _579 = ((_565 as Continue).0: i64);
        _564 = _579;
        StorageDead(_579);
        StorageDead(_573);
        StorageDead(_571);
        StorageDead(_568);
        StorageDead(_565);
        StorageLive(_580);
        _580 = _548;
        StorageLive(_581);
        _581 = _549;
        StorageLive(_582);
        _582 = _564;
        _246 = (move _580, move _581, move _582);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_564);
        StorageDead(_549);
        StorageDead(_548);
        goto -> bb237;
    }

    bb206: {
        StorageLive(_576);
        _576 = ((_565 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_578);
        _578 = _576;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _578) -> [return: bb207, unwind: bb390];
    }

    bb207: {
        StorageDead(_578);
        StorageDead(_576);
        StorageDead(_573);
        StorageDead(_571);
        StorageDead(_568);
        StorageDead(_565);
        StorageDead(_564);
        StorageDead(_549);
        StorageDead(_548);
        goto -> bb370;
    }

    bb208: {
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        _1092 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _589 = &((*_1092).3: anchor_lang::prelude::AccountInfo<'_>);
        _588 = &(*_589);
        StorageLive(_590);
        _590 = _68;
        StorageLive(_591);
        StorageLive(_592);
        _1045 = const _;
        _592 = &(*_1045);
        _591 = &(*_592);
        _587 = get_pyth_price(move _588, move _590, move _591) -> [return: bb209, unwind: bb390];
    }

    bb209: {
        StorageDead(_591);
        StorageDead(_590);
        StorageDead(_588);
        _586 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _587) -> [return: bb210, unwind: bb390];
    }

    bb210: {
        StorageDead(_587);
        _594 = discriminant(_586);
        switchInt(move _594) -> [0: bb211, 1: bb212, otherwise: bb12];
    }

    bb211: {
        StorageLive(_598);
        _598 = ((_586 as Continue).0: state::oracle::OraclePriceData);
        _585 = _598;
        StorageDead(_598);
        StorageLive(_583);
        _583 = (_585.0: i64);
        StorageLive(_584);
        _584 = (_585.2: i64);
        StorageDead(_592);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_585);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = &(*_49);
        _603 = <RefMut<'_, PerpMarket> as Deref>::deref(move _604) -> [return: bb214, unwind: bb390];
    }

    bb212: {
        StorageLive(_595);
        _595 = ((_586 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_597);
        _597 = _595;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _597) -> [return: bb213, unwind: bb390];
    }

    bb213: {
        StorageDead(_597);
        StorageDead(_595);
        StorageDead(_592);
        StorageDead(_589);
        StorageDead(_586);
        StorageDead(_585);
        goto -> bb370;
    }

    bb214: {
        StorageDead(_604);
        _602 = &((*_603).1: state::perp_market::AMM);
        StorageLive(_605);
        StorageLive(_606);
        _1093 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _606 = &((*_1093).3: anchor_lang::prelude::AccountInfo<'_>);
        _605 = &(*_606);
        StorageLive(_607);
        StorageLive(_608);
        _1044 = const _;
        _608 = &(*_1044);
        _607 = &(*_608);
        _601 = AMM::get_pyth_twap(move _602, move _605, move _607) -> [return: bb215, unwind: bb390];
    }

    bb215: {
        StorageDead(_607);
        StorageDead(_605);
        StorageDead(_602);
        _600 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _601) -> [return: bb216, unwind: bb390];
    }

    bb216: {
        StorageDead(_601);
        _610 = discriminant(_600);
        switchInt(move _610) -> [0: bb217, 1: bb218, otherwise: bb12];
    }

    bb217: {
        StorageLive(_614);
        _614 = ((_600 as Continue).0: i64);
        _599 = _614;
        StorageDead(_614);
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_603);
        StorageDead(_600);
        StorageLive(_615);
        _615 = _583;
        StorageLive(_616);
        _616 = _584;
        StorageLive(_617);
        _617 = _599;
        _246 = (move _615, move _616, move _617);
        StorageDead(_617);
        StorageDead(_616);
        StorageDead(_615);
        StorageDead(_599);
        StorageDead(_584);
        StorageDead(_583);
        goto -> bb237;
    }

    bb218: {
        StorageLive(_611);
        _611 = ((_600 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_613);
        _613 = _611;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _613) -> [return: bb219, unwind: bb390];
    }

    bb219: {
        StorageDead(_613);
        StorageDead(_611);
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_603);
        StorageDead(_600);
        StorageDead(_599);
        StorageDead(_584);
        StorageDead(_583);
        goto -> bb370;
    }

    bb220: {
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        StorageLive(_624);
        _1094 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _624 = &((*_1094).3: anchor_lang::prelude::AccountInfo<'_>);
        _623 = &(*_624);
        StorageLive(_625);
        _625 = _68;
        StorageLive(_626);
        StorageLive(_627);
        _1043 = const _;
        _627 = &(*_1043);
        _626 = &(*_627);
        _622 = get_pyth_price(move _623, move _625, move _626) -> [return: bb221, unwind: bb390];
    }

    bb221: {
        StorageDead(_626);
        StorageDead(_625);
        StorageDead(_623);
        _621 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _622) -> [return: bb222, unwind: bb390];
    }

    bb222: {
        StorageDead(_622);
        _629 = discriminant(_621);
        switchInt(move _629) -> [0: bb223, 1: bb224, otherwise: bb12];
    }

    bb223: {
        StorageLive(_633);
        _633 = ((_621 as Continue).0: state::oracle::OraclePriceData);
        _620 = _633;
        StorageDead(_633);
        StorageLive(_618);
        _618 = (_620.0: i64);
        StorageLive(_619);
        _619 = (_620.2: i64);
        StorageDead(_627);
        StorageDead(_624);
        StorageDead(_621);
        StorageDead(_620);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        StorageLive(_639);
        _639 = &(*_49);
        _638 = <RefMut<'_, PerpMarket> as Deref>::deref(move _639) -> [return: bb226, unwind: bb390];
    }

    bb224: {
        StorageLive(_630);
        _630 = ((_621 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_632);
        _632 = _630;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _632) -> [return: bb225, unwind: bb390];
    }

    bb225: {
        StorageDead(_632);
        StorageDead(_630);
        StorageDead(_627);
        StorageDead(_624);
        StorageDead(_621);
        StorageDead(_620);
        goto -> bb370;
    }

    bb226: {
        StorageDead(_639);
        _637 = &((*_638).1: state::perp_market::AMM);
        StorageLive(_640);
        StorageLive(_641);
        _1095 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _641 = &((*_1095).3: anchor_lang::prelude::AccountInfo<'_>);
        _640 = &(*_641);
        StorageLive(_642);
        StorageLive(_643);
        _1042 = const _;
        _643 = &(*_1042);
        _642 = &(*_643);
        _636 = AMM::get_pyth_twap(move _637, move _640, move _642) -> [return: bb227, unwind: bb390];
    }

    bb227: {
        StorageDead(_642);
        StorageDead(_640);
        StorageDead(_637);
        _635 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _636) -> [return: bb228, unwind: bb390];
    }

    bb228: {
        StorageDead(_636);
        _645 = discriminant(_635);
        switchInt(move _645) -> [0: bb229, 1: bb230, otherwise: bb12];
    }

    bb229: {
        StorageLive(_649);
        _649 = ((_635 as Continue).0: i64);
        _634 = _649;
        StorageDead(_649);
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_638);
        StorageDead(_635);
        StorageLive(_650);
        _650 = _618;
        StorageLive(_651);
        _651 = _619;
        StorageLive(_652);
        _652 = _634;
        _246 = (move _650, move _651, move _652);
        StorageDead(_652);
        StorageDead(_651);
        StorageDead(_650);
        StorageDead(_634);
        StorageDead(_619);
        StorageDead(_618);
        goto -> bb237;
    }

    bb230: {
        StorageLive(_646);
        _646 = ((_635 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_648);
        _648 = _646;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _648) -> [return: bb231, unwind: bb390];
    }

    bb231: {
        StorageDead(_648);
        StorageDead(_646);
        StorageDead(_643);
        StorageDead(_641);
        StorageDead(_638);
        StorageDead(_635);
        StorageDead(_634);
        StorageDead(_619);
        StorageDead(_618);
        goto -> bb370;
    }

    bb232: {
        StorageDead(_661);
        StorageDead(_660);
        StorageDead(_658);
        _656 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _657) -> [return: bb233, unwind: bb390];
    }

    bb233: {
        StorageDead(_657);
        _664 = discriminant(_656);
        switchInt(move _664) -> [0: bb234, 1: bb235, otherwise: bb12];
    }

    bb234: {
        StorageLive(_668);
        _668 = ((_656 as Continue).0: state::oracle::OraclePriceData);
        _655 = _668;
        StorageDead(_668);
        StorageLive(_653);
        _653 = (_655.0: i64);
        StorageLive(_654);
        _654 = (_655.2: i64);
        StorageDead(_662);
        StorageDead(_659);
        StorageDead(_656);
        StorageDead(_655);
        StorageLive(_669);
        _669 = _653;
        StorageLive(_670);
        _670 = _654;
        _246 = (move _669, move _670, const _);
        StorageDead(_670);
        StorageDead(_669);
        StorageDead(_654);
        StorageDead(_653);
        goto -> bb237;
    }

    bb235: {
        StorageLive(_665);
        _665 = ((_656 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_667);
        _667 = _665;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _667) -> [return: bb236, unwind: bb390];
    }

    bb236: {
        StorageDead(_667);
        StorageDead(_665);
        StorageDead(_662);
        StorageDead(_659);
        StorageDead(_656);
        StorageDead(_655);
        goto -> bb370;
    }

    bb237: {
        StorageLive(_243);
        _243 = (_246.0: i64);
        StorageLive(_244);
        _244 = (_246.1: i64);
        StorageLive(_245);
        _245 = (_246.2: i64);
        StorageDead(_246);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        _674 = _9;
        StorageLive(_675);
        _675 = _10;
        StorageLive(_676);
        _676 = _11;
        StorageLive(_677);
        _677 = _16;
        _673 = validate_margin(move _674, move _675, const 0_u32, const 0_u32, move _676, move _677) -> [return: bb238, unwind: bb390];
    }

    bb238: {
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_675);
        StorageDead(_674);
        _672 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _673) -> [return: bb239, unwind: bb390];
    }

    bb239: {
        StorageDead(_673);
        _678 = discriminant(_672);
        switchInt(move _678) -> [0: bb240, 1: bb241, otherwise: bb12];
    }

    bb240: {
        StorageLive(_682);
        _682 = ((_672 as Continue).0: ());
        _671 = _682;
        StorageDead(_682);
        StorageDead(_672);
        StorageDead(_671);
        StorageLive(_683);
        _1096 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _683 = &mut ((*_1096).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        _688 = _2;
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        _1097 = deref_copy (*_683);
        _1115 = (((_1097.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _691 = &(*_1115);
        _690 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _691) -> [return: bb243, unwind: bb390];
    }

    bb241: {
        StorageLive(_679);
        _679 = ((_672 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_681);
        _681 = _679;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _681) -> [return: bb242, unwind: bb390];
    }

    bb242: {
        StorageDead(_681);
        StorageDead(_679);
        StorageDead(_672);
        StorageDead(_671);
        goto -> bb369;
    }

    bb243: {
        StorageDead(_691);
        _689 = ((*_690).13: u16);
        _687 = Eq(move _688, move _689);
        switchInt(move _687) -> [0: bb245, otherwise: bb244];
    }

    bb244: {
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_688);
        StorageLive(_692);
        _692 = ();
        _686 = std::result::Result::<(), error::ErrorCode>::Ok(move _692);
        StorageDead(_692);
        goto -> bb260;
    }

    bb245: {
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_688);
        StorageLive(_693);
        _693 = error::ErrorCode::MarketIndexAlreadyInitialized;
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        _1040 = const _;
        _704 = &(*_1040);
        _703 = &(*_704);
        _702 = move _703 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_703);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        StorageLive(_711);
        StorageLive(_712);
        _712 = &_693;
        _711 = &(*_712);
        _710 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _711) -> [return: bb246, unwind: bb390];
    }

    bb246: {
        StorageDead(_711);
        _709 = [move _710];
        StorageDead(_710);
        _708 = &_709;
        _707 = &(*_708);
        _706 = move _707 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_707);
        _701 = Arguments::<'_>::new_v1(move _702, move _706) -> [return: bb247, unwind: bb390];
    }

    bb247: {
        StorageDead(_706);
        StorageDead(_702);
        _700 = format(move _701) -> [return: bb248, unwind: bb390];
    }

    bb248: {
        StorageDead(_701);
        StorageDead(_712);
        StorageDead(_709);
        StorageDead(_708);
        StorageDead(_704);
        _699 = move _700;
        StorageDead(_700);
        _698 = &_699;
        _697 = &(*_698);
        _696 = <String as Deref>::deref(move _697) -> [return: bb249, unwind: bb385];
    }

    bb249: {
        _695 = &(*_696);
        StorageDead(_697);
        _694 = solana_program::log::sol_log(move _695) -> [return: bb250, unwind: bb385];
    }

    bb250: {
        StorageDead(_695);
        drop(_699) -> [return: bb251, unwind: bb390];
    }

    bb251: {
        StorageDead(_699);
        StorageDead(_698);
        StorageDead(_696);
        StorageDead(_694);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        _1039 = const _;
        _723 = &(*_1039);
        _722 = &(*_723);
        _721 = move _722 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_722);
        StorageLive(_725);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        StorageLive(_731);
        _731 = &_2;
        _730 = &(*_731);
        _729 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _730) -> [return: bb252, unwind: bb390];
    }

    bb252: {
        StorageDead(_730);
        StorageLive(_732);
        StorageLive(_733);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        _1098 = deref_copy (*_683);
        _1116 = (((_1098.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _736 = &(*_1116);
        _735 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _736) -> [return: bb253, unwind: bb390];
    }

    bb253: {
        StorageDead(_736);
        _734 = &((*_735).13: u16);
        _733 = &(*_734);
        _732 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _733) -> [return: bb254, unwind: bb390];
    }

    bb254: {
        StorageDead(_733);
        _728 = [move _729, move _732];
        StorageDead(_732);
        StorageDead(_729);
        _727 = &_728;
        _726 = &(*_727);
        _725 = move _726 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_726);
        _720 = Arguments::<'_>::new_v1(move _721, move _725) -> [return: bb255, unwind: bb390];
    }

    bb255: {
        StorageDead(_725);
        StorageDead(_721);
        _719 = format(move _720) -> [return: bb256, unwind: bb390];
    }

    bb256: {
        StorageDead(_720);
        StorageDead(_735);
        StorageDead(_734);
        StorageDead(_731);
        StorageDead(_728);
        StorageDead(_727);
        StorageDead(_723);
        _718 = move _719;
        StorageDead(_719);
        _717 = &_718;
        _716 = &(*_717);
        _715 = <String as Deref>::deref(move _716) -> [return: bb257, unwind: bb384];
    }

    bb257: {
        _714 = &(*_715);
        StorageDead(_716);
        _713 = solana_program::log::sol_log(move _714) -> [return: bb258, unwind: bb384];
    }

    bb258: {
        StorageDead(_714);
        drop(_718) -> [return: bb259, unwind: bb390];
    }

    bb259: {
        StorageDead(_718);
        StorageDead(_717);
        StorageDead(_715);
        StorageDead(_713);
        StorageLive(_737);
        _737 = _693;
        _686 = std::result::Result::<(), error::ErrorCode>::Err(move _737);
        StorageDead(_737);
        StorageDead(_693);
        goto -> bb260;
    }

    bb260: {
        StorageDead(_687);
        _685 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _686) -> [return: bb261, unwind: bb390];
    }

    bb261: {
        StorageDead(_686);
        _738 = discriminant(_685);
        switchInt(move _738) -> [0: bb262, 1: bb263, otherwise: bb12];
    }

    bb262: {
        StorageLive(_742);
        _742 = ((_685 as Continue).0: ());
        _684 = _742;
        StorageDead(_742);
        StorageDead(_685);
        StorageDead(_684);
        StorageLive(_743);
        StorageLive(_744);
        _744 = _14;
        switchInt(move _744) -> [0: bb266, otherwise: bb265];
    }

    bb263: {
        StorageLive(_739);
        _739 = ((_685 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_741);
        _741 = _739;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _741) -> [return: bb264, unwind: bb390];
    }

    bb264: {
        StorageDead(_741);
        StorageDead(_739);
        StorageDead(_685);
        StorageDead(_684);
        goto -> bb368;
    }

    bb265: {
        StorageLive(_745);
        StorageLive(_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        _1099 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _751 = &((*_1099).0: anchor_lang::prelude::Signer<'_>);
        _750 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _751) -> [return: bb267, unwind: bb390];
    }

    bb266: {
        _743 = const ();
        goto -> bb284;
    }

    bb267: {
        _749 = &_750;
        StorageDead(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        _1100 = deref_copy (*_683);
        _1117 = (((_1100.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _754 = &(*_1117);
        _753 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _754) -> [return: bb268, unwind: bb390];
    }

    bb268: {
        StorageDead(_754);
        _752 = &((*_753).0: anchor_lang::prelude::Pubkey);
        _748 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _749, move _752) -> [return: bb269, unwind: bb390];
    }

    bb269: {
        switchInt(move _748) -> [0: bb271, otherwise: bb270];
    }

    bb270: {
        StorageDead(_753);
        StorageDead(_752);
        StorageDead(_750);
        StorageDead(_749);
        StorageLive(_755);
        _755 = ();
        _747 = std::result::Result::<(), error::ErrorCode>::Ok(move _755);
        StorageDead(_755);
        goto -> bb279;
    }

    bb271: {
        StorageDead(_753);
        StorageDead(_752);
        StorageDead(_750);
        StorageDead(_749);
        StorageLive(_756);
        _756 = error::ErrorCode::DefaultError;
        StorageLive(_757);
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        StorageLive(_762);
        StorageLive(_763);
        StorageLive(_764);
        StorageLive(_765);
        StorageLive(_766);
        StorageLive(_767);
        _1038 = const _;
        _767 = &(*_1038);
        _766 = &(*_767);
        _765 = move _766 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_766);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        StorageLive(_773);
        StorageLive(_774);
        StorageLive(_775);
        _775 = &_756;
        _774 = &(*_775);
        _773 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _774) -> [return: bb272, unwind: bb390];
    }

    bb272: {
        StorageDead(_774);
        _772 = [move _773];
        StorageDead(_773);
        _771 = &_772;
        _770 = &(*_771);
        _769 = move _770 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_770);
        _764 = Arguments::<'_>::new_v1(move _765, move _769) -> [return: bb273, unwind: bb390];
    }

    bb273: {
        StorageDead(_769);
        StorageDead(_765);
        _763 = format(move _764) -> [return: bb274, unwind: bb390];
    }

    bb274: {
        StorageDead(_764);
        StorageDead(_775);
        StorageDead(_772);
        StorageDead(_771);
        StorageDead(_767);
        _762 = move _763;
        StorageDead(_763);
        _761 = &_762;
        _760 = &(*_761);
        _759 = <String as Deref>::deref(move _760) -> [return: bb275, unwind: bb383];
    }

    bb275: {
        _758 = &(*_759);
        StorageDead(_760);
        _757 = solana_program::log::sol_log(move _758) -> [return: bb276, unwind: bb383];
    }

    bb276: {
        StorageDead(_758);
        drop(_762) -> [return: bb277, unwind: bb390];
    }

    bb277: {
        StorageDead(_762);
        StorageDead(_761);
        StorageDead(_759);
        StorageDead(_757);
        StorageLive(_776);
        StorageLive(_777);
        StorageLive(_778);
        _778 = const "admin must be state admin";
        _777 = &(*_778);
        _776 = solana_program::log::sol_log(move _777) -> [return: bb278, unwind: bb390];
    }

    bb278: {
        StorageDead(_777);
        StorageDead(_778);
        StorageDead(_776);
        StorageLive(_779);
        _779 = _756;
        _747 = std::result::Result::<(), error::ErrorCode>::Err(move _779);
        StorageDead(_779);
        StorageDead(_756);
        goto -> bb279;
    }

    bb279: {
        StorageDead(_748);
        _746 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _747) -> [return: bb280, unwind: bb390];
    }

    bb280: {
        StorageDead(_747);
        _780 = discriminant(_746);
        switchInt(move _780) -> [0: bb281, 1: bb282, otherwise: bb12];
    }

    bb281: {
        StorageLive(_784);
        _784 = ((_746 as Continue).0: ());
        _745 = _784;
        StorageDead(_784);
        StorageDead(_746);
        StorageDead(_745);
        _743 = const ();
        goto -> bb284;
    }

    bb282: {
        StorageLive(_781);
        _781 = ((_746 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_783);
        _783 = _781;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _783) -> [return: bb283, unwind: bb390];
    }

    bb283: {
        StorageDead(_783);
        StorageDead(_781);
        StorageDead(_746);
        StorageDead(_745);
        StorageDead(_744);
        StorageDead(_743);
        goto -> bb368;
    }

    bb284: {
        StorageDead(_744);
        StorageDead(_743);
        StorageLive(_785);
        StorageLive(_786);
        _786 = ContractType::Perpetual;
        StorageLive(_787);
        _787 = _8;
        StorageLive(_788);
        StorageLive(_789);
        _789 = _14;
        switchInt(move _789) -> [0: bb286, otherwise: bb285];
    }

    bb285: {
        _788 = state::perp_market::MarketStatus::Active;
        goto -> bb287;
    }

    bb286: {
        _788 = state::perp_market::MarketStatus::Initialized;
        goto -> bb287;
    }

    bb287: {
        StorageDead(_789);
        StorageLive(_790);
        _790 = _26;
        StorageLive(_791);
        _791 = (*_46);
        StorageLive(_792);
        _792 = _2;
        StorageLive(_793);
        _793 = _9;
        StorageLive(_794);
        _794 = _10;
        StorageLive(_795);
        _795 = _13;
        StorageLive(_796);
        _796 = <PoolBalance as Default>::default() -> [return: bb288, unwind: bb390];
    }

    bb288: {
        StorageLive(_797);
        StorageLive(_798);
        _798 = _18;
        StorageLive(_799);
        _799 = _19;
        StorageLive(_800);
        _800 = <InsuranceClaim as Default>::default() -> [return: bb289, unwind: bb390];
    }

    bb289: {
        _797 = InsuranceClaim { revenue_withdraw_since_last_settle: (_800.0: i64), max_revenue_withdraw_per_period: move _798, quote_max_insurance: move _799, quote_settled_insurance: (_800.3: u64), last_revenue_withdraw_ts: (_800.4: i64) };
        StorageDead(_799);
        StorageDead(_798);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        _803 = <u32 as Cast>::cast::<u32>(const _) -> [return: bb290, unwind: bb390];
    }

    bb290: {
        _802 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _803) -> [return: bb291, unwind: bb390];
    }

    bb291: {
        StorageDead(_803);
        _804 = discriminant(_802);
        switchInt(move _804) -> [0: bb292, 1: bb293, otherwise: bb12];
    }

    bb292: {
        StorageLive(_808);
        _808 = ((_802 as Continue).0: u32);
        _801 = _808;
        StorageDead(_808);
        StorageLive(_809);
        _809 = _11;
        StorageLive(_810);
        _810 = _12;
        StorageLive(_811);
        _811 = [const 0_u8; 24];
        StorageLive(_812);
        StorageLive(_813);
        _1101 = deref_copy (_1.1: &mut instructions::admin::InitializePerpMarket<'_>);
        _1102 = deref_copy (((*_1101).3: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        _813 = (*_1102);
        StorageLive(_814);
        _814 = _7;
        StorageLive(_815);
        _815 = _3;
        StorageLive(_816);
        _816 = _4;
        StorageLive(_817);
        _817 = _4;
        StorageLive(_818);
        _818 = _3;
        StorageLive(_819);
        _819 = _4;
        StorageLive(_820);
        _820 = _3;
        StorageLive(_821);
        _821 = _4;
        StorageLive(_822);
        _822 = _67;
        StorageLive(_823);
        _823 = _5;
        StorageLive(_824);
        _824 = _170;
        StorageLive(_825);
        _825 = _170;
        StorageLive(_826);
        _826 = _67;
        StorageLive(_827);
        _827 = _3;
        StorageLive(_828);
        _828 = _208;
        StorageLive(_829);
        _829 = _221;
        StorageLive(_830);
        _830 = _222;
        StorageLive(_831);
        _831 = _6;
        StorageLive(_832);
        StorageLive(_833);
        _833 = _243;
        StorageLive(_834);
        _834 = _244;
        StorageLive(_835);
        _835 = _245;
        StorageLive(_836);
        _836 = _243;
        StorageLive(_837);
        _837 = _67;
        StorageLive(_838);
        _838 = <HistoricalOracleData as Default>::default() -> [return: bb295, unwind: bb390];
    }

    bb293: {
        StorageLive(_805);
        _805 = ((_802 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_807);
        _807 = _805;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _807) -> [return: bb294, unwind: bb390];
    }

    bb294: {
        StorageDead(_807);
        StorageDead(_805);
        StorageDead(_801);
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_794);
        StorageDead(_793);
        StorageDead(_792);
        StorageDead(_791);
        StorageDead(_790);
        StorageDead(_788);
        StorageDead(_787);
        StorageDead(_786);
        StorageDead(_785);
        StorageDead(_802);
        StorageDead(_800);
        goto -> bb368;
    }

    bb295: {
        _832 = HistoricalOracleData { last_oracle_price: move _833, last_oracle_conf: (_838.1: u64), last_oracle_delay: move _834, last_oracle_price_twap: move _835, last_oracle_price_twap_5min: move _836, last_oracle_price_twap_ts: move _837 };
        StorageDead(_837);
        StorageDead(_836);
        StorageDead(_835);
        StorageDead(_834);
        StorageDead(_833);
        StorageLive(_839);
        _839 = _243;
        StorageLive(_840);
        _840 = _20;
        StorageLive(_841);
        _841 = _21;
        StorageLive(_842);
        _842 = _22;
        StorageLive(_843);
        _843 = _15;
        StorageLive(_844);
        _844 = _16;
        StorageLive(_845);
        _845 = _170;
        StorageLive(_846);
        _846 = _170;
        StorageLive(_847);
        _847 = _17;
        StorageLive(_848);
        _848 = _67;
        StorageLive(_849);
        _849 = _24;
        StorageLive(_850);
        _850 = <PoolBalance as Default>::default() -> [return: bb296, unwind: bb390];
    }

    bb296: {
        StorageLive(_851);
        _851 = _68;
        StorageLive(_852);
        _852 = _25;
        StorageLive(_853);
        _853 = [const 0_u8; 3];
        _812 = AMM { oracle: move _813, historical_oracle_data: move _832, base_asset_amount_per_lp: const 0_i128, quote_asset_amount_per_lp: const 0_i128, fee_pool: move _850, base_asset_reserve: move _815, quote_asset_reserve: move _816, concentration_coef: move _828, min_base_asset_reserve: move _829, max_base_asset_reserve: move _830, sqrt_k: move _827, peg_multiplier: move _831, terminal_quote_asset_reserve: move _817, base_asset_amount_long: const 0_i128, base_asset_amount_short: const 0_i128, base_asset_amount_with_amm: const 0_i128, base_asset_amount_with_unsettled_lp: const 0_i128, max_open_interest: move _847, quote_asset_amount: const 0_i128, quote_entry_amount_long: const 0_i128, quote_entry_amount_short: const 0_i128, quote_break_even_amount_long: const 0_i128, quote_break_even_amount_short: const 0_i128, user_lp_shares: const 0_u128, last_funding_rate: const 0_i64, last_funding_rate_long: const 0_i64, last_funding_rate_short: const 0_i64, last_24h_avg_funding_rate: const 0_i64, total_fee: const 0_i128, total_mm_fee: const 0_i128, total_exchange_fee: const 0_u128, total_fee_minus_distributions: const 0_i128, total_fee_withdrawn: const 0_u128, total_liquidation_fee: const 0_u128, cumulative_funding_rate_long: const 0_i128, cumulative_funding_rate_short: const 0_i128, total_social_loss: const 0_u128, ask_base_asset_reserve: move _818, ask_quote_asset_reserve: move _819, bid_base_asset_reserve: move _820, bid_quote_asset_reserve: move _821, last_oracle_normalised_price: move _839, last_oracle_reserve_price_spread_pct: const 0_i64, last_bid_price_twap: move _845, last_ask_price_twap: move _846, last_mark_price_twap: move _824, last_mark_price_twap_5min: move _825, last_update_slot: move _851, last_oracle_conf_pct: const 0_u64, net_revenue_since_last_funding: const 0_i64, last_funding_rate_ts: move _822, funding_period: move _823, order_step_size: move _840, order_tick_size: move _841, min_order_size: move _842, mm_oracle_slot: const 0_u64, volume_24h: const 0_u64, long_intensity_volume: const 0_u64, short_intensity_volume: const 0_u64, last_trade_ts: move _848, mark_std: const 0_u64, oracle_std: const 0_u64, last_mark_price_twap_ts: move _826, base_spread: move _843, max_spread: move _844, long_spread: const 0_u32, short_spread: const 0_u32, mm_oracle_price: const 0_i64, max_fill_reserve_fraction: const 100_u16, max_slippage_ratio: const 50_u16, curve_update_intensity: move _849, amm_jit_intensity: move _852, oracle_source: move _814, last_oracle_valid: const false, target_base_asset_amount_per_lp: const 0_i32, per_lp_base: const 0_i8, taker_speed_bump_override: const 0_i8, amm_spread_adjustment: const 0_i8, oracle_slot_delay_override: const 0_i8, mm_oracle_sequence_id: const 0_u64, net_unsettled_funding_pnl: const 0_i64, quote_asset_amount_with_unsettled_lp: const 0_i64, reference_price_offset: const 0_i32, amm_inventory_spread_adjustment: const 0_i8, padding: move _853, last_funding_oracle_twap: const 0_i64 };
        StorageDead(_853);
        StorageDead(_852);
        StorageDead(_851);
        StorageDead(_850);
        StorageDead(_849);
        StorageDead(_848);
        StorageDead(_847);
        StorageDead(_846);
        StorageDead(_845);
        StorageDead(_844);
        StorageDead(_843);
        StorageDead(_842);
        StorageDead(_841);
        StorageDead(_840);
        StorageDead(_839);
        StorageDead(_832);
        StorageDead(_831);
        StorageDead(_830);
        StorageDead(_829);
        StorageDead(_828);
        StorageDead(_827);
        StorageDead(_826);
        StorageDead(_825);
        StorageDead(_824);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_821);
        StorageDead(_820);
        StorageDead(_819);
        StorageDead(_818);
        StorageDead(_817);
        StorageDead(_816);
        StorageDead(_815);
        StorageDead(_814);
        StorageDead(_813);
        _785 = PerpMarket { pubkey: move _791, amm: move _812, pnl_pool: move _796, name: move _790, insurance_claim: move _797, unrealized_pnl_max_imbalance: const 0_u64, expiry_ts: const 0_i64, expiry_price: const 0_i64, next_fill_record_id: const 1_u64, next_funding_rate_record_id: const 1_u64, next_curve_record_id: const 1_u64, imf_factor: move _795, unrealized_pnl_imf_factor: const 0_u32, liquidator_fee: move _809, if_liquidation_fee: move _810, margin_ratio_initial: move _793, margin_ratio_maintenance: move _794, unrealized_pnl_initial_asset_weight: const 0_u32, unrealized_pnl_maintenance_asset_weight: move _801, number_of_users_with_base: const 0_u32, number_of_users: const 0_u32, market_index: move _792, status: move _788, contract_type: move _786, contract_tier: move _787, paused_operations: const 0_u8, quote_spot_market_index: const _, fee_adjustment: const 0_i16, fuel_boost_position: const 0_u8, fuel_boost_taker: const 1_u8, fuel_boost_maker: const 1_u8, pool_id: const 0_u8, high_leverage_margin_ratio_initial: const 0_u16, high_leverage_margin_ratio_maintenance: const 0_u16, protected_maker_limit_price_divisor: const 0_u8, protected_maker_dynamic_divisor: const 0_u8, padding1: const 0_u32, last_fill_price: const 0_u64, padding: move _811 };
        StorageDead(_812);
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_809);
        StorageDead(_801);
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_795);
        StorageDead(_794);
        StorageDead(_793);
        StorageDead(_792);
        StorageDead(_791);
        StorageDead(_790);
        StorageDead(_788);
        StorageDead(_787);
        StorageDead(_786);
        StorageLive(_854);
        StorageLive(_855);
        _855 = &mut (*_49);
        _854 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _855) -> [return: bb297, unwind: bb390];
    }

    bb297: {
        StorageDead(_855);
        (*_854) = move _785;
        StorageDead(_785);
        StorageDead(_854);
        StorageDead(_838);
        StorageDead(_802);
        StorageDead(_800);
        StorageLive(_856);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        StorageLive(_861);
        StorageLive(_862);
        StorageLive(_863);
        _1103 = deref_copy (*_683);
        _1118 = (((_1103.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _863 = &(*_1118);
        _862 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _863) -> [return: bb298, unwind: bb390];
    }

    bb298: {
        StorageDead(_863);
        _861 = ((*_862).13: u16);
        _860 = core::num::<impl u16>::checked_add(move _861, const 1_u16) -> [return: bb299, unwind: bb390];
    }

    bb299: {
        StorageDead(_861);
        StorageLive(_864);
        _864 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _859 = Option::<u16>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _860, move _864) -> [return: bb300, unwind: bb390];
    }

    bb300: {
        StorageDead(_864);
        StorageDead(_860);
        _858 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _859) -> [return: bb301, unwind: bb390];
    }

    bb301: {
        StorageDead(_859);
        _865 = discriminant(_858);
        switchInt(move _865) -> [0: bb302, 1: bb303, otherwise: bb12];
    }

    bb302: {
        StorageLive(_869);
        _869 = ((_858 as Continue).0: u16);
        _857 = _869;
        StorageDead(_869);
        StorageLive(_870);
        StorageLive(_871);
        _1104 = deref_copy (*_683);
        _1119 = (((_1104.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _871 = &mut (*_1119);
        _870 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _871) -> [return: bb305, unwind: bb390];
    }

    bb303: {
        StorageLive(_866);
        _866 = ((_858 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_868);
        _868 = _866;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _868) -> [return: bb304, unwind: bb390];
    }

    bb304: {
        StorageDead(_868);
        StorageDead(_866);
        StorageDead(_857);
        StorageDead(_862);
        StorageDead(_858);
        StorageDead(_856);
        goto -> bb368;
    }

    bb305: {
        StorageDead(_871);
        ((*_870).13: u16) = move _857;
        _856 = const ();
        StorageDead(_857);
        StorageDead(_870);
        StorageDead(_862);
        StorageDead(_858);
        StorageDead(_856);
        StorageLive(_872);
        StorageLive(_873);
        StorageLive(_874);
        StorageLive(_875);
        StorageLive(_876);
        StorageLive(_877);
        _877 = &mut (*_49);
        _876 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _877) -> [return: bb306, unwind: bb390];
    }

    bb306: {
        _875 = &mut (*_876);
        StorageDead(_877);
        StorageLive(_878);
        _878 = _23;
        _874 = update_concentration_coef(move _875, move _878) -> [return: bb307, unwind: bb390];
    }

    bb307: {
        StorageDead(_878);
        StorageDead(_875);
        _873 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _874) -> [return: bb308, unwind: bb390];
    }

    bb308: {
        StorageDead(_874);
        _879 = discriminant(_873);
        switchInt(move _879) -> [0: bb309, 1: bb310, otherwise: bb12];
    }

    bb309: {
        StorageLive(_883);
        _883 = ((_873 as Continue).0: ());
        _872 = _883;
        StorageDead(_883);
        StorageDead(_876);
        StorageDead(_873);
        StorageDead(_872);
        StorageLive(_884);
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        StorageLive(_888);
        StorageLive(_889);
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        _1037 = const _;
        _895 = &(*_1037);
        _894 = &(*_895);
        _893 = move _894 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_894);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        StorageLive(_901);
        StorageLive(_902);
        StorageLive(_903);
        _903 = &_243;
        _902 = &(*_903);
        _901 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _902) -> [return: bb312, unwind: bb390];
    }

    bb310: {
        StorageLive(_880);
        _880 = ((_873 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_882);
        _882 = _880;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _882) -> [return: bb311, unwind: bb390];
    }

    bb311: {
        StorageDead(_882);
        StorageDead(_880);
        StorageDead(_876);
        StorageDead(_873);
        StorageDead(_872);
        goto -> bb368;
    }

    bb312: {
        StorageDead(_902);
        _900 = [move _901];
        StorageDead(_901);
        _899 = &_900;
        _898 = &(*_899);
        _897 = move _898 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_898);
        _892 = Arguments::<'_>::new_v1(move _893, move _897) -> [return: bb313, unwind: bb390];
    }

    bb313: {
        StorageDead(_897);
        StorageDead(_893);
        _891 = format(move _892) -> [return: bb314, unwind: bb390];
    }

    bb314: {
        StorageDead(_892);
        StorageDead(_903);
        StorageDead(_900);
        StorageDead(_899);
        StorageDead(_895);
        _890 = move _891;
        StorageDead(_891);
        _889 = &_890;
        _888 = &(*_889);
        _887 = <String as Deref>::deref(move _888) -> [return: bb315, unwind: bb382];
    }

    bb315: {
        _886 = &(*_887);
        StorageDead(_888);
        _885 = solana_program::log::sol_log(move _886) -> [return: bb316, unwind: bb382];
    }

    bb316: {
        StorageDead(_886);
        drop(_890) -> [return: bb317, unwind: bb390];
    }

    bb317: {
        StorageDead(_890);
        StorageDead(_889);
        StorageDead(_887);
        StorageDead(_885);
        _884 = const ();
        StorageDead(_884);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        _912 = &(*_49);
        _911 = <RefMut<'_, PerpMarket> as Deref>::deref(move _912) -> [return: bb318, unwind: bb390];
    }

    bb318: {
        StorageDead(_912);
        _910 = &((*_911).1: state::perp_market::AMM);
        _909 = &(*_910);
        _908 = calculate_market_open_bids_asks(move _909) -> [return: bb319, unwind: bb390];
    }

    bb319: {
        StorageDead(_909);
        _907 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _908) -> [return: bb320, unwind: bb390];
    }

    bb320: {
        StorageDead(_908);
        _913 = discriminant(_907);
        switchInt(move _913) -> [0: bb321, 1: bb322, otherwise: bb12];
    }

    bb321: {
        StorageLive(_917);
        _917 = ((_907 as Continue).0: (i128, i128));
        _906 = _917;
        StorageDead(_917);
        StorageLive(_904);
        _904 = (_906.0: i128);
        StorageLive(_905);
        _905 = (_906.1: i128);
        StorageDead(_911);
        StorageDead(_910);
        StorageDead(_907);
        StorageDead(_906);
        StorageLive(_918);
        StorageLive(_919);
        StorageLive(_920);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        StorageLive(_928);
        StorageLive(_929);
        _1036 = const _;
        _929 = &(*_1036);
        _928 = &(*_929);
        _927 = move _928 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_928);
        StorageLive(_931);
        StorageLive(_932);
        StorageLive(_933);
        StorageLive(_934);
        StorageLive(_935);
        StorageLive(_936);
        StorageLive(_937);
        _937 = &_904;
        _936 = &(*_937);
        _935 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _936) -> [return: bb324, unwind: bb390];
    }

    bb322: {
        StorageLive(_914);
        _914 = ((_907 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_916);
        _916 = _914;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _916) -> [return: bb323, unwind: bb390];
    }

    bb323: {
        StorageDead(_916);
        StorageDead(_914);
        StorageDead(_911);
        StorageDead(_910);
        StorageDead(_907);
        StorageDead(_906);
        goto -> bb368;
    }

    bb324: {
        StorageDead(_936);
        _934 = [move _935];
        StorageDead(_935);
        _933 = &_934;
        _932 = &(*_933);
        _931 = move _932 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_932);
        _926 = Arguments::<'_>::new_v1(move _927, move _931) -> [return: bb325, unwind: bb390];
    }

    bb325: {
        StorageDead(_931);
        StorageDead(_927);
        _925 = format(move _926) -> [return: bb326, unwind: bb390];
    }

    bb326: {
        StorageDead(_926);
        StorageDead(_937);
        StorageDead(_934);
        StorageDead(_933);
        StorageDead(_929);
        _924 = move _925;
        StorageDead(_925);
        _923 = &_924;
        _922 = &(*_923);
        _921 = <String as Deref>::deref(move _922) -> [return: bb327, unwind: bb381];
    }

    bb327: {
        _920 = &(*_921);
        StorageDead(_922);
        _919 = solana_program::log::sol_log(move _920) -> [return: bb328, unwind: bb381];
    }

    bb328: {
        StorageDead(_920);
        drop(_924) -> [return: bb329, unwind: bb390];
    }

    bb329: {
        StorageDead(_924);
        StorageDead(_923);
        StorageDead(_921);
        StorageDead(_919);
        StorageLive(_938);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        StorageLive(_946);
        StorageLive(_947);
        StorageLive(_948);
        _1035 = const _;
        _948 = &(*_1035);
        _947 = &(*_948);
        _946 = move _947 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_947);
        StorageLive(_950);
        StorageLive(_951);
        StorageLive(_952);
        StorageLive(_953);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        _956 = &_905;
        _955 = &(*_956);
        _954 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _955) -> [return: bb330, unwind: bb390];
    }

    bb330: {
        StorageDead(_955);
        _953 = [move _954];
        StorageDead(_954);
        _952 = &_953;
        _951 = &(*_952);
        _950 = move _951 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_951);
        _945 = Arguments::<'_>::new_v1(move _946, move _950) -> [return: bb331, unwind: bb390];
    }

    bb331: {
        StorageDead(_950);
        StorageDead(_946);
        _944 = format(move _945) -> [return: bb332, unwind: bb390];
    }

    bb332: {
        StorageDead(_945);
        StorageDead(_956);
        StorageDead(_953);
        StorageDead(_952);
        StorageDead(_948);
        _943 = move _944;
        StorageDead(_944);
        _942 = &_943;
        _941 = &(*_942);
        _940 = <String as Deref>::deref(move _941) -> [return: bb333, unwind: bb380];
    }

    bb333: {
        _939 = &(*_940);
        StorageDead(_941);
        _938 = solana_program::log::sol_log(move _939) -> [return: bb334, unwind: bb380];
    }

    bb334: {
        StorageDead(_939);
        drop(_943) -> [return: bb335, unwind: bb390];
    }

    bb335: {
        StorageDead(_943);
        StorageDead(_942);
        StorageDead(_940);
        StorageDead(_938);
        _918 = const ();
        StorageDead(_918);
        StorageLive(_957);
        StorageLive(_958);
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        StorageLive(_962);
        _962 = &(*_49);
        _961 = <RefMut<'_, PerpMarket> as Deref>::deref(move _962) -> [return: bb336, unwind: bb390];
    }

    bb336: {
        StorageDead(_962);
        _960 = &((*_961).1: state::perp_market::AMM);
        _959 = AMM::reserve_price(move _960) -> [return: bb337, unwind: bb390];
    }

    bb337: {
        StorageDead(_960);
        _958 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _959) -> [return: bb338, unwind: bb390];
    }

    bb338: {
        StorageDead(_959);
        _963 = discriminant(_958);
        switchInt(move _963) -> [0: bb339, 1: bb340, otherwise: bb12];
    }

    bb339: {
        StorageLive(_967);
        _967 = ((_958 as Continue).0: u64);
        _957 = _967;
        StorageDead(_967);
        StorageDead(_961);
        StorageDead(_958);
        StorageLive(_970);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        StorageLive(_975);
        _975 = &(*_49);
        _974 = <RefMut<'_, PerpMarket> as Deref>::deref(move _975) -> [return: bb342, unwind: bb390];
    }

    bb340: {
        StorageLive(_964);
        _964 = ((_958 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_966);
        _966 = _964;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _966) -> [return: bb341, unwind: bb390];
    }

    bb341: {
        StorageDead(_966);
        StorageDead(_964);
        StorageDead(_961);
        StorageDead(_958);
        goto -> bb367;
    }

    bb342: {
        StorageDead(_975);
        _973 = &((*_974).1: state::perp_market::AMM);
        StorageLive(_976);
        _976 = _957;
        _972 = AMM::bid_ask_price(move _973, move _976) -> [return: bb343, unwind: bb390];
    }

    bb343: {
        StorageDead(_976);
        StorageDead(_973);
        _971 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _972) -> [return: bb344, unwind: bb390];
    }

    bb344: {
        StorageDead(_972);
        _977 = discriminant(_971);
        switchInt(move _977) -> [0: bb345, 1: bb346, otherwise: bb12];
    }

    bb345: {
        StorageLive(_981);
        _981 = ((_971 as Continue).0: (u64, u64));
        _970 = _981;
        StorageDead(_981);
        StorageLive(_968);
        _968 = (_970.0: u64);
        StorageLive(_969);
        _969 = (_970.1: u64);
        StorageDead(_974);
        StorageDead(_971);
        StorageDead(_970);
        StorageLive(_982);
        StorageLive(_983);
        StorageLive(_984);
        StorageLive(_985);
        StorageLive(_986);
        StorageLive(_987);
        StorageLive(_988);
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        StorageLive(_992);
        StorageLive(_993);
        _1034 = const _;
        _993 = &(*_1034);
        _992 = &(*_993);
        _991 = move _992 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_992);
        StorageLive(_995);
        StorageLive(_996);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        StorageLive(_1000);
        StorageLive(_1001);
        _1001 = &_968;
        _1000 = &(*_1001);
        _999 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1000) -> [return: bb348, unwind: bb390];
    }

    bb346: {
        StorageLive(_978);
        _978 = ((_971 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_980);
        _980 = _978;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _980) -> [return: bb347, unwind: bb390];
    }

    bb347: {
        StorageDead(_980);
        StorageDead(_978);
        StorageDead(_974);
        StorageDead(_971);
        StorageDead(_970);
        goto -> bb367;
    }

    bb348: {
        StorageDead(_1000);
        _998 = [move _999];
        StorageDead(_999);
        _997 = &_998;
        _996 = &(*_997);
        _995 = move _996 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_996);
        _990 = Arguments::<'_>::new_v1(move _991, move _995) -> [return: bb349, unwind: bb390];
    }

    bb349: {
        StorageDead(_995);
        StorageDead(_991);
        _989 = format(move _990) -> [return: bb350, unwind: bb390];
    }

    bb350: {
        StorageDead(_990);
        StorageDead(_1001);
        StorageDead(_998);
        StorageDead(_997);
        StorageDead(_993);
        _988 = move _989;
        StorageDead(_989);
        _987 = &_988;
        _986 = &(*_987);
        _985 = <String as Deref>::deref(move _986) -> [return: bb351, unwind: bb379];
    }

    bb351: {
        _984 = &(*_985);
        StorageDead(_986);
        _983 = solana_program::log::sol_log(move _984) -> [return: bb352, unwind: bb379];
    }

    bb352: {
        StorageDead(_984);
        drop(_988) -> [return: bb353, unwind: bb390];
    }

    bb353: {
        StorageDead(_988);
        StorageDead(_987);
        StorageDead(_985);
        StorageDead(_983);
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        StorageLive(_1011);
        StorageLive(_1012);
        _1033 = const _;
        _1012 = &(*_1033);
        _1011 = &(*_1012);
        _1010 = move _1011 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_1011);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        StorageLive(_1020);
        _1020 = &_969;
        _1019 = &(*_1020);
        _1018 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _1019) -> [return: bb354, unwind: bb390];
    }

    bb354: {
        StorageDead(_1019);
        _1017 = [move _1018];
        StorageDead(_1018);
        _1016 = &_1017;
        _1015 = &(*_1016);
        _1014 = move _1015 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_1015);
        _1009 = Arguments::<'_>::new_v1(move _1010, move _1014) -> [return: bb355, unwind: bb390];
    }

    bb355: {
        StorageDead(_1014);
        StorageDead(_1010);
        _1008 = format(move _1009) -> [return: bb356, unwind: bb390];
    }

    bb356: {
        StorageDead(_1009);
        StorageDead(_1020);
        StorageDead(_1017);
        StorageDead(_1016);
        StorageDead(_1012);
        _1007 = move _1008;
        StorageDead(_1008);
        _1006 = &_1007;
        _1005 = &(*_1006);
        _1004 = <String as Deref>::deref(move _1005) -> [return: bb357, unwind: bb378];
    }

    bb357: {
        _1003 = &(*_1004);
        StorageDead(_1005);
        _1002 = solana_program::log::sol_log(move _1003) -> [return: bb358, unwind: bb378];
    }

    bb358: {
        StorageDead(_1003);
        drop(_1007) -> [return: bb359, unwind: bb390];
    }

    bb359: {
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1004);
        StorageDead(_1002);
        _982 = const ();
        StorageDead(_982);
        StorageLive(_1021);
        StorageLive(_1022);
        StorageLive(_1023);
        StorageLive(_1024);
        StorageLive(_1025);
        StorageLive(_1026);
        _1026 = &(*_49);
        _1025 = <RefMut<'_, PerpMarket> as Deref>::deref(move _1026) -> [return: bb360, unwind: bb390];
    }

    bb360: {
        _1024 = &(*_1025);
        StorageDead(_1026);
        _1023 = validate_perp_market(move _1024) -> [return: bb361, unwind: bb390];
    }

    bb361: {
        StorageDead(_1024);
        _1022 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1023) -> [return: bb362, unwind: bb390];
    }

    bb362: {
        StorageDead(_1023);
        _1027 = discriminant(_1022);
        switchInt(move _1027) -> [0: bb363, 1: bb364, otherwise: bb12];
    }

    bb363: {
        StorageLive(_1031);
        _1031 = ((_1022 as Continue).0: ());
        _1021 = _1031;
        StorageDead(_1031);
        StorageDead(_1025);
        StorageDead(_1022);
        StorageDead(_1021);
        StorageLive(_1032);
        _1032 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _1032);
        StorageDead(_1032);
        StorageDead(_969);
        StorageDead(_968);
        StorageDead(_957);
        StorageDead(_905);
        StorageDead(_904);
        StorageDead(_683);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_170);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_59);
        drop(_50) -> [return: bb366, unwind: bb392];
    }

    bb364: {
        StorageLive(_1028);
        _1028 = ((_1022 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1030);
        _1030 = _1028;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1030) -> [return: bb365, unwind: bb390];
    }

    bb365: {
        StorageDead(_1030);
        StorageDead(_1028);
        StorageDead(_1025);
        StorageDead(_1022);
        StorageDead(_1021);
        StorageDead(_969);
        StorageDead(_968);
        goto -> bb367;
    }

    bb366: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_46);
        goto -> bb377;
    }

    bb367: {
        StorageDead(_957);
        StorageDead(_905);
        StorageDead(_904);
        goto -> bb368;
    }

    bb368: {
        StorageDead(_683);
        goto -> bb369;
    }

    bb369: {
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_243);
        goto -> bb371;
    }

    bb370: {
        StorageDead(_246);
        goto -> bb371;
    }

    bb371: {
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb372;
    }

    bb372: {
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb373;
    }

    bb373: {
        StorageDead(_170);
        goto -> bb374;
    }

    bb374: {
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb375;
    }

    bb375: {
        StorageDead(_59);
        drop(_50) -> [return: bb376, unwind: bb392];
    }

    bb376: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_46);
        goto -> bb377;
    }

    bb377: {
        return;
    }

    bb378 (cleanup): {
        drop(_1007) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb379 (cleanup): {
        drop(_988) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb380 (cleanup): {
        drop(_943) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb381 (cleanup): {
        drop(_924) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb382 (cleanup): {
        drop(_890) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb383 (cleanup): {
        drop(_762) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb384 (cleanup): {
        drop(_718) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb385 (cleanup): {
        drop(_699) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb386 (cleanup): {
        drop(_157) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb387 (cleanup): {
        drop(_138) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb388 (cleanup): {
        drop(_110) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb389 (cleanup): {
        drop(_91) -> [return: bb390, unwind terminate(cleanup)];
    }

    bb390 (cleanup): {
        drop(_50) -> [return: bb392, unwind terminate(cleanup)];
    }

    bb391 (cleanup): {
        drop(_32) -> [return: bb392, unwind terminate(cleanup)];
    }

    bb392 (cleanup): {
        resume;
    }

    bb393 (cleanup): {
        _1113 = discriminant(_60);
        goto -> bb390;
    }

    bb394 (cleanup): {
        _1114 = discriminant(_51);
        goto -> bb392;
    }
}
