// MIR for `phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:294:1: 294:46>::to_account_infos` before PreCodegen

fn phoenix::<impl at programs/drift/src/state/fulfillment_params/phoenix.rs:294:1: 294:46>::to_account_infos(_1: &PhoenixFulfillmentParams<'_, '_>) -> [anchor_lang::prelude::AccountInfo<'_>; 9] {
    debug self => _1;
    let mut _0: [anchor_lang::prelude::AccountInfo<'_>; 9];
    let mut _2: anchor_lang::prelude::AccountInfo<'_>;
    let mut _3: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _4: anchor_lang::prelude::AccountInfo<'_>;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let _8: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _9: &state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>;
    let mut _10: anchor_lang::prelude::AccountInfo<'_>;
    let mut _11: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _12: anchor_lang::prelude::AccountInfo<'_>;
    let mut _13: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _14: anchor_lang::prelude::AccountInfo<'_>;
    let mut _15: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _16: anchor_lang::prelude::AccountInfo<'_>;
    let mut _17: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _18: anchor_lang::prelude::AccountInfo<'_>;
    let mut _19: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _20: anchor_lang::prelude::AccountInfo<'_>;
    let mut _21: &anchor_lang::prelude::Program<'_, anchor_spl::token::Token>;
    let mut _22: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _23: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _24: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _26: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _27: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _28: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _29: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _30: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _22 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _3 = &(*_22);
        _2 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        _23 = deref_copy ((*_1).1: &anchor_lang::prelude::AccountInfo<'_>);
        _5 = &(*_23);
        _4 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _5) -> [return: bb2, unwind: bb18];
    }

    bb2: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).2: state::fulfillment_params::phoenix::PhoenixMarketContext<'_, '_>);
        _8 = <PhoenixMarketContext<'_, '_> as Deref>::deref(move _9) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _7 = &(*_8);
        StorageDead(_9);
        _6 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _7) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        _24 = deref_copy ((*_1).3: &anchor_lang::prelude::AccountInfo<'_>);
        _11 = &(*_24);
        _10 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _11) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _25 = deref_copy ((*_1).6: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _29 = (((_25.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _13 = &(*_29);
        _12 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _13) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _26 = deref_copy ((*_1).7: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _30 = (((_26.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _15 = &(*_30);
        _14 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _15) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        _27 = deref_copy ((*_1).4: &anchor_lang::prelude::AccountInfo<'_>);
        _17 = &(*_27);
        _16 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _17) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        _28 = deref_copy ((*_1).5: &anchor_lang::prelude::AccountInfo<'_>);
        _19 = &(*_28);
        _18 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _19) -> [return: bb9, unwind: bb12];
    }

    bb9: {
        StorageDead(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).8: anchor_lang::prelude::Program<'_, anchor_spl::token::Token>);
        _20 = <anchor_lang::prelude::Program<'_, Token> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _21) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        StorageDead(_21);
        _0 = [move _2, move _4, move _6, move _10, move _12, move _14, move _16, move _18, move _20];
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_6);
        StorageDead(_4);
        StorageDead(_2);
        StorageDead(_8);
        return;
    }

    bb11 (cleanup): {
        drop(_18) -> [return: bb12, unwind terminate(cleanup)];
    }

    bb12 (cleanup): {
        drop(_16) -> [return: bb13, unwind terminate(cleanup)];
    }

    bb13 (cleanup): {
        drop(_14) -> [return: bb14, unwind terminate(cleanup)];
    }

    bb14 (cleanup): {
        drop(_12) -> [return: bb15, unwind terminate(cleanup)];
    }

    bb15 (cleanup): {
        drop(_10) -> [return: bb16, unwind terminate(cleanup)];
    }

    bb16 (cleanup): {
        drop(_6) -> [return: bb17, unwind terminate(cleanup)];
    }

    bb17 (cleanup): {
        drop(_4) -> [return: bb18, unwind terminate(cleanup)];
    }

    bb18 (cleanup): {
        drop(_2) -> [return: bb19, unwind terminate(cleanup)];
    }

    bb19 (cleanup): {
        resume;
    }
}
