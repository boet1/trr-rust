// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4513:10: 4513:18>::try_accounts` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4513:10: 4513:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut SwapBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _9: <instructions::user::Swap<'info> as anchor_lang::Accounts<'info, instructions::user::SwapBumps>>::try_accounts::__Args;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::Swap<'info> as anchor_lang::Accounts<'info, instructions::user::SwapBumps>>::try_accounts::__Args>;
    let mut _11: std::result::Result<<instructions::user::Swap<'info> as anchor_lang::Accounts<'info, instructions::user::SwapBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _12: std::result::Result<<instructions::user::Swap<'info> as anchor_lang::Accounts<'info, instructions::user::SwapBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _13: &mut &[u8];
    let mut _14: &mut &[u8];
    let mut _15: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::user::SwapBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _38: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::user::SwapBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::user::SwapBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::user::SwapBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _83: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut instructions::user::SwapBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _98: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut instructions::user::SwapBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _113: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut instructions::user::SwapBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _128: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut instructions::user::SwapBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _143: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut instructions::user::SwapBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _158: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut instructions::user::SwapBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _173: std::result::Result<anchor_lang::prelude::UncheckedAccount<'_>, anchor_lang::error::Error>;
    let mut _174: std::result::Result<anchor_lang::prelude::UncheckedAccount<'_>, anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[u8];
    let mut _178: &mut instructions::user::SwapBumps;
    let mut _179: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _180: {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _186: ();
    let mut _187: bool;
    let mut _188: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _189: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _190: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _191: !;
    let mut _192: anchor_lang::error::Error;
    let mut _193: anchor_lang::error::Error;
    let mut _194: anchor_lang::error::ErrorCode;
    let _195: ();
    let mut _196: bool;
    let mut _197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _198: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _199: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _200: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _201: &anchor_lang::prelude::Signer<'_>;
    let _202: &anchor_lang::prelude::Signer<'_>;
    let mut _203: isize;
    let mut _205: !;
    let mut _206: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _208: !;
    let mut _209: anchor_lang::error::Error;
    let mut _210: anchor_lang::error::Error;
    let mut _211: anchor_lang::error::ErrorCode;
    let _212: ();
    let mut _213: bool;
    let mut _214: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _215: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _216: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _217: !;
    let mut _218: anchor_lang::error::Error;
    let mut _219: anchor_lang::error::Error;
    let mut _220: anchor_lang::error::ErrorCode;
    let _221: ();
    let mut _222: bool;
    let mut _223: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _224: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _225: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _226: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _227: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _228: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _229: isize;
    let mut _231: !;
    let mut _232: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _234: !;
    let mut _235: anchor_lang::error::Error;
    let mut _236: anchor_lang::error::Error;
    let mut _237: anchor_lang::error::ErrorCode;
    let mut _240: (anchor_lang::prelude::Pubkey, u8);
    let mut _241: &[&[u8]];
    let mut _242: &[&[u8]; 2];
    let _243: &[&[u8]; 2];
    let _244: [&[u8]; 2];
    let mut _245: &[u8];
    let _246: &[u8];
    let mut _247: &[u8; 17];
    let _248: &[u8; 17];
    let mut _249: &[u8];
    let _250: &[u8];
    let mut _251: &[u8; 2];
    let _252: [u8; 2];
    let mut _253: u16;
    let mut _254: &anchor_lang::prelude::Pubkey;
    let _255: &&anchor_lang::prelude::Pubkey;
    let mut _256: u8;
    let _257: ();
    let mut _258: bool;
    let mut _259: &anchor_lang::prelude::Pubkey;
    let _260: anchor_lang::prelude::Pubkey;
    let mut _261: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _262: &anchor_lang::prelude::Pubkey;
    let mut _263: !;
    let mut _264: anchor_lang::error::Error;
    let mut _265: anchor_lang::error::Error;
    let mut _266: anchor_lang::error::Error;
    let mut _267: anchor_lang::error::ErrorCode;
    let mut _268: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _269: anchor_lang::prelude::Pubkey;
    let mut _270: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _271: anchor_lang::prelude::Pubkey;
    let _272: ();
    let mut _273: bool;
    let mut _274: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _275: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _276: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _277: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _278: !;
    let mut _279: anchor_lang::error::Error;
    let mut _280: anchor_lang::error::Error;
    let mut _281: anchor_lang::error::ErrorCode;
    let mut _284: (anchor_lang::prelude::Pubkey, u8);
    let mut _285: &[&[u8]];
    let mut _286: &[&[u8]; 2];
    let _287: &[&[u8]; 2];
    let _288: [&[u8]; 2];
    let mut _289: &[u8];
    let _290: &[u8];
    let mut _291: &[u8; 17];
    let _292: &[u8; 17];
    let mut _293: &[u8];
    let _294: &[u8];
    let mut _295: &[u8; 2];
    let _296: [u8; 2];
    let mut _297: u16;
    let mut _298: &anchor_lang::prelude::Pubkey;
    let _299: &&anchor_lang::prelude::Pubkey;
    let mut _300: u8;
    let _301: ();
    let mut _302: bool;
    let mut _303: &anchor_lang::prelude::Pubkey;
    let _304: anchor_lang::prelude::Pubkey;
    let mut _305: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _306: &anchor_lang::prelude::Pubkey;
    let mut _307: !;
    let mut _308: anchor_lang::error::Error;
    let mut _309: anchor_lang::error::Error;
    let mut _310: anchor_lang::error::Error;
    let mut _311: anchor_lang::error::ErrorCode;
    let mut _312: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _313: anchor_lang::prelude::Pubkey;
    let mut _314: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _315: anchor_lang::prelude::Pubkey;
    let _316: ();
    let mut _317: bool;
    let mut _318: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _319: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _320: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _321: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _322: !;
    let mut _323: anchor_lang::error::Error;
    let mut _324: anchor_lang::error::Error;
    let mut _325: anchor_lang::error::ErrorCode;
    let _326: ();
    let mut _327: bool;
    let mut _328: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _329: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _330: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _331: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _332: !;
    let mut _333: anchor_lang::error::Error;
    let mut _334: anchor_lang::error::Error;
    let mut _335: anchor_lang::error::ErrorCode;
    let _336: ();
    let mut _337: bool;
    let mut _338: &bool;
    let _339: bool;
    let mut _340: &anchor_lang::prelude::Pubkey;
    let _341: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _342: &anchor_spl::token_interface::TokenAccount;
    let _343: &anchor_spl::token_interface::TokenAccount;
    let mut _344: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _345: &anchor_lang::prelude::Pubkey;
    let _346: &anchor_lang::prelude::Pubkey;
    let _347: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _348: &anchor_spl::token_interface::TokenAccount;
    let _349: &anchor_spl::token_interface::TokenAccount;
    let mut _350: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _351: !;
    let mut _352: anchor_lang::error::Error;
    let mut _353: anchor_lang::error::Error;
    let mut _354: anchor_lang::error::ErrorCode;
    let _355: ();
    let mut _356: bool;
    let mut _357: &anchor_lang::prelude::Pubkey;
    let _358: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _359: &anchor_spl::token_interface::TokenAccount;
    let _360: &anchor_spl::token_interface::TokenAccount;
    let mut _361: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _362: &anchor_lang::prelude::Pubkey;
    let _363: anchor_lang::prelude::Pubkey;
    let mut _364: &anchor_lang::prelude::Signer<'_>;
    let mut _365: !;
    let mut _366: anchor_lang::error::Error;
    let mut _367: anchor_lang::error::ErrorCode;
    let _368: ();
    let mut _369: bool;
    let mut _370: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _371: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _372: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _373: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _374: !;
    let mut _375: anchor_lang::error::Error;
    let mut _376: anchor_lang::error::Error;
    let mut _377: anchor_lang::error::ErrorCode;
    let _378: ();
    let mut _379: bool;
    let mut _380: &bool;
    let _381: bool;
    let mut _382: &anchor_lang::prelude::Pubkey;
    let _383: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _384: &anchor_spl::token_interface::TokenAccount;
    let _385: &anchor_spl::token_interface::TokenAccount;
    let mut _386: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _387: &anchor_lang::prelude::Pubkey;
    let _388: &anchor_lang::prelude::Pubkey;
    let _389: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _390: &anchor_spl::token_interface::TokenAccount;
    let _391: &anchor_spl::token_interface::TokenAccount;
    let mut _392: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _393: !;
    let mut _394: anchor_lang::error::Error;
    let mut _395: anchor_lang::error::Error;
    let mut _396: anchor_lang::error::ErrorCode;
    let _397: ();
    let mut _398: bool;
    let mut _399: &anchor_lang::prelude::Pubkey;
    let _400: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _401: &anchor_spl::token_interface::TokenAccount;
    let _402: &anchor_spl::token_interface::TokenAccount;
    let mut _403: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _404: &anchor_lang::prelude::Pubkey;
    let _405: anchor_lang::prelude::Pubkey;
    let mut _406: &anchor_lang::prelude::Signer<'_>;
    let mut _407: !;
    let mut _408: anchor_lang::error::Error;
    let mut _409: anchor_lang::error::ErrorCode;
    let _410: ();
    let mut _411: bool;
    let mut _412: &anchor_lang::prelude::Pubkey;
    let _413: &state::state::State;
    let mut _414: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _415: &anchor_lang::prelude::Pubkey;
    let _416: &anchor_lang::prelude::Pubkey;
    let _417: anchor_lang::prelude::Pubkey;
    let mut _418: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _419: !;
    let mut _420: anchor_lang::error::Error;
    let mut _421: anchor_lang::error::Error;
    let mut _422: anchor_lang::error::ErrorCode;
    let _423: ();
    let mut _425: &anchor_lang::prelude::UncheckedAccount<'_>;
    let mut _427: bool;
    let mut _428: &anchor_lang::prelude::Pubkey;
    let mut _429: &anchor_lang::prelude::Pubkey;
    let mut _430: !;
    let mut _431: anchor_lang::error::Error;
    let mut _432: anchor_lang::error::Error;
    let mut _433: anchor_lang::error::Error;
    let mut _434: anchor_lang::error::ErrorCode;
    let mut _435: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _436: anchor_lang::prelude::Pubkey;
    let mut _437: anchor_lang::prelude::Pubkey;
    let mut _438: instructions::user::Swap<'_>;
    let mut _439: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _440: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _441: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _442: anchor_lang::prelude::Signer<'_>;
    let mut _443: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _444: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _445: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _446: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _447: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _448: anchor_lang::prelude::AccountInfo<'_>;
    let mut _449: anchor_lang::prelude::UncheckedAccount<'_>;
    let mut _450: &anchor_lang::prelude::Pubkey;
    let mut _451: &anchor_lang::prelude::Pubkey;
    let mut _452: bool;
    let mut _453: bool;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    let mut _478: isize;
    let mut _479: isize;
    let mut _480: isize;
    let mut _481: isize;
    let mut _482: isize;
    let mut _483: isize;
    let mut _484: isize;
    let mut _485: isize;
    let mut _486: isize;
    let mut _487: isize;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _524: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _525: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _526: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _527: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _528: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _529: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _530: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _531: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _532: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _533: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _8: u16;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _20: <instructions::user::Swap<'info> as anchor_lang::Accounts<'info, instructions::user::SwapBumps>>::try_accounts::__Args;
        scope 2 {
            debug in_market_index => _7;
            debug out_market_index => _8;
            let _21: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _35: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 7 {
                debug state => _21;
                let _36: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _50: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                scope 12 {
                    debug user => _36;
                    let _51: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _65: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    scope 17 {
                        debug user_stats => _51;
                        let _66: anchor_lang::prelude::Signer<'_>;
                        let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _80: anchor_lang::prelude::Signer<'_>;
                        scope 22 {
                            debug authority => _66;
                            let _81: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _95: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                            scope 27 {
                                debug out_spot_market_vault => _81;
                                let _96: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _110: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                scope 32 {
                                    debug in_spot_market_vault => _96;
                                    let _111: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _125: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    scope 37 {
                                        debug out_token_account => _111;
                                        let _126: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _140: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        scope 42 {
                                            debug in_token_account => _126;
                                            let _141: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                            let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _155: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                            scope 47 {
                                                debug token_program => _141;
                                                let _156: anchor_lang::prelude::AccountInfo<'_>;
                                                let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _170: anchor_lang::prelude::AccountInfo<'_>;
                                                scope 52 {
                                                    debug drift_signer => _156;
                                                    let _171: anchor_lang::prelude::UncheckedAccount<'_>;
                                                    let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _185: anchor_lang::prelude::UncheckedAccount<'_>;
                                                    scope 57 {
                                                        debug instructions => _171;
                                                        let _204: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _207: bool;
                                                        let _230: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _233: bool;
                                                        let _238: anchor_lang::prelude::Pubkey;
                                                        let _239: u8;
                                                        scope 62 {
                                                            debug residual => _204;
                                                            scope 63 {
                                                            }
                                                        }
                                                        scope 64 {
                                                            debug val => _207;
                                                            scope 65 {
                                                            }
                                                        }
                                                        scope 66 {
                                                            debug residual => _230;
                                                            scope 67 {
                                                            }
                                                        }
                                                        scope 68 {
                                                            debug val => _233;
                                                            scope 69 {
                                                            }
                                                        }
                                                        scope 70 {
                                                            debug __pda_address => _238;
                                                            debug __bump => _239;
                                                            let _282: anchor_lang::prelude::Pubkey;
                                                            let _283: u8;
                                                            scope 71 {
                                                                debug __pda_address => _282;
                                                                debug __bump => _283;
                                                                let _424: anchor_lang::prelude::Pubkey;
                                                                scope 72 {
                                                                    debug actual => _424;
                                                                    let _426: anchor_lang::prelude::Pubkey;
                                                                    scope 73 {
                                                                        debug expected => _426;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 58 {
                                                        debug residual => _182;
                                                        scope 59 {
                                                        }
                                                    }
                                                    scope 60 {
                                                        debug val => _185;
                                                        scope 61 {
                                                        }
                                                    }
                                                }
                                                scope 53 {
                                                    debug residual => _167;
                                                    scope 54 {
                                                    }
                                                }
                                                scope 55 {
                                                    debug val => _170;
                                                    scope 56 {
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _152;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _155;
                                                scope 51 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _137;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _140;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _122;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _125;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _107;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _110;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _92;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _95;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _77;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _80;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _62;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _65;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _47;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _50;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _32;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _35;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _17;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _20;
            scope 6 {
            }
        }
    }

    bb0: {
        _453 = const false;
        _452 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _6;
        _13 = &mut (*_14);
        _12 = <<instructions::user::Swap<'info> as anchor_lang::Accounts<'info, SwapBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _11 = std::result::Result::<<instructions::user::Swap<'info> as anchor_lang::Accounts<'info, SwapBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _12, move _15) -> [return: bb2, unwind: bb217];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_12);
        _10 = <std::result::Result<<instructions::user::Swap<'info> as anchor_lang::Accounts<'info, SwapBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _16 = discriminant(_10);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_10 as Continue).0: <instructions::user::Swap<'info> as anchor_lang::Accounts<'info, instructions::user::SwapBumps>>::try_accounts::__Args);
        _9 = move _20;
        StorageDead(_20);
        StorageLive(_7);
        _7 = (_9.0: u16);
        StorageLive(_8);
        _8 = (_9.1: u16);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_6);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb209;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _23 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _24, move _30) -> [return: bb9, unwind: bb217];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb217];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _21 = move _35;
        StorageDead(_35);
        _454 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_6);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb216];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb238];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _508 = discriminant(_22);
        StorageDead(_22);
        goto -> bb208;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _38 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _39, move _45) -> [return: bb15, unwind: bb216];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb216];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _36 = move _50;
        StorageDead(_50);
        _456 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_6);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb216];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb237];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _506 = discriminant(_37);
        StorageDead(_37);
        goto -> bb207;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _54, move _60) -> [return: bb21, unwind: bb216];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb216];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _51 = move _65;
        StorageDead(_65);
        _458 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_6);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb216];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb236];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _504 = discriminant(_52);
        StorageDead(_52);
        goto -> bb206;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _68 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _69, move _75) -> [return: bb27, unwind: bb216];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb216];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _66 = move _80;
        StorageDead(_80);
        _460 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_6);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb216];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb235];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _502 = discriminant(_67);
        StorageDead(_67);
        goto -> bb205;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _83 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _84, move _90) -> [return: bb33, unwind: bb216];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb216];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _81 = move _95;
        StorageDead(_95);
        _462 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_6);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb215];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb234];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _500 = discriminant(_82);
        StorageDead(_82);
        goto -> bb204;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _98 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _99, move _105) -> [return: bb39, unwind: bb215];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb215];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _96 = move _110;
        StorageDead(_110);
        _464 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_6);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb214];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb233];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _498 = discriminant(_97);
        StorageDead(_97);
        goto -> bb203;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _113 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _114, move _120) -> [return: bb45, unwind: bb214];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb214];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _111 = move _125;
        StorageDead(_125);
        _466 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_6);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb213];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb232];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _496 = discriminant(_112);
        StorageDead(_112);
        goto -> bb202;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _128 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _129, move _135) -> [return: bb51, unwind: bb213];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb213];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _126 = move _140;
        StorageDead(_140);
        _468 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_6);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb212];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb231];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _494 = discriminant(_127);
        StorageDead(_127);
        goto -> bb201;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _143 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _144, move _150) -> [return: bb57, unwind: bb212];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb212];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _141 = move _155;
        StorageDead(_155);
        _470 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_6);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb212];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb230];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _492 = discriminant(_142);
        StorageDead(_142);
        goto -> bb200;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _158 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _159, move _165) -> [return: bb63, unwind: bb212];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb212];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _156 = move _170;
        StorageDead(_170);
        _472 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &mut (*_2);
        StorageLive(_177);
        _177 = &(*_6);
        StorageLive(_178);
        _178 = &mut (*_4);
        StorageLive(_179);
        _179 = &mut (*_5);
        _174 = <anchor_lang::prelude::UncheckedAccount<'_> as anchor_lang::Accounts<'_, SwapBumps>>::try_accounts(move _175, move _176, move _177, move _178, move _179) -> [return: bb68, unwind: bb211];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb229];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _490 = discriminant(_157);
        StorageDead(_157);
        goto -> bb199;
    }

    bb68: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        _180 = {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18};
        _173 = std::result::Result::<anchor_lang::prelude::UncheckedAccount<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4513:10: 4513:18}>(move _174, move _180) -> [return: bb69, unwind: bb211];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_174);
        _172 = <std::result::Result<anchor_lang::prelude::UncheckedAccount<'_>, anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb70, unwind: bb211];
    }

    bb70: {
        StorageDead(_173);
        _181 = discriminant(_172);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_185);
        _185 = move ((_172 as Continue).0: anchor_lang::prelude::UncheckedAccount<'_>);
        _171 = move _185;
        StorageDead(_185);
        _474 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_36;
        _189 = &(*_190);
        _188 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _189) -> [return: bb74, unwind: bb211];
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb228];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _488 = discriminant(_172);
        StorageDead(_172);
        goto -> bb198;
    }

    bb74: {
        StorageDead(_189);
        _187 = ((*_188).6: bool);
        switchInt(move _187) -> [0: bb75, otherwise: bb78];
    }

    bb75: {
        StorageDead(_190);
        StorageDead(_188);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = ConstraintMut;
        _193 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _194) -> [return: bb76, unwind: bb211];
    }

    bb76: {
        StorageDead(_194);
        _192 = anchor_lang::error::Error::with_account_name::<&str>(move _193, const "user") -> [return: bb77, unwind: bb211];
    }

    bb77: {
        StorageDead(_193);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _192);
        StorageDead(_192);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb198;
    }

    bb78: {
        StorageDead(_190);
        StorageDead(_188);
        _186 = const ();
        StorageDead(_187);
        StorageDead(_186);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &_36;
        _199 = &(*_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_66;
        _201 = &(*_202);
        _198 = constraints::can_sign_for_user(move _199, move _201) -> [return: bb79, unwind: bb211];
    }

    bb79: {
        StorageDead(_201);
        StorageDead(_199);
        _197 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _198) -> [return: bb80, unwind: bb211];
    }

    bb80: {
        StorageDead(_198);
        _203 = discriminant(_197);
        switchInt(move _203) -> [0: bb81, 1: bb82, otherwise: bb5];
    }

    bb81: {
        StorageLive(_207);
        _207 = ((_197 as Continue).0: bool);
        _196 = _207;
        StorageDead(_207);
        switchInt(move _196) -> [0: bb219, otherwise: bb218];
    }

    bb82: {
        StorageLive(_204);
        _204 = move ((_197 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_206);
        _206 = move _204;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _206) -> [return: bb83, unwind: bb227];
    }

    bb83: {
        StorageDead(_206);
        StorageDead(_204);
        _486 = discriminant(_197);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_197);
        goto -> bb197;
    }

    bb84: {
        StorageDead(_211);
        _209 = anchor_lang::error::Error::with_account_name::<&str>(move _210, const "user") -> [return: bb85, unwind: bb211];
    }

    bb85: {
        StorageDead(_210);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _209);
        StorageDead(_209);
        goto -> bb197;
    }

    bb86: {
        StorageDead(_215);
        _213 = ((*_214).6: bool);
        switchInt(move _213) -> [0: bb87, otherwise: bb90];
    }

    bb87: {
        StorageDead(_216);
        StorageDead(_214);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = ConstraintMut;
        _219 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _220) -> [return: bb88, unwind: bb211];
    }

    bb88: {
        StorageDead(_220);
        _218 = anchor_lang::error::Error::with_account_name::<&str>(move _219, const "user_stats") -> [return: bb89, unwind: bb211];
    }

    bb89: {
        StorageDead(_219);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _218);
        StorageDead(_218);
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb198;
    }

    bb90: {
        StorageDead(_216);
        StorageDead(_214);
        _212 = const ();
        StorageDead(_213);
        StorageDead(_212);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &_36;
        _225 = &(*_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &_51;
        _227 = &(*_228);
        _224 = constraints::is_stats_for_user(move _225, move _227) -> [return: bb91, unwind: bb211];
    }

    bb91: {
        StorageDead(_227);
        StorageDead(_225);
        _223 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _224) -> [return: bb92, unwind: bb211];
    }

    bb92: {
        StorageDead(_224);
        _229 = discriminant(_223);
        switchInt(move _229) -> [0: bb93, 1: bb94, otherwise: bb5];
    }

    bb93: {
        StorageLive(_233);
        _233 = ((_223 as Continue).0: bool);
        _222 = _233;
        StorageDead(_233);
        switchInt(move _222) -> [0: bb221, otherwise: bb220];
    }

    bb94: {
        StorageLive(_230);
        _230 = move ((_223 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_232);
        _232 = move _230;
        _0 = <std::result::Result<instructions::user::Swap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _232) -> [return: bb95, unwind: bb226];
    }

    bb95: {
        StorageDead(_232);
        StorageDead(_230);
        _484 = discriminant(_223);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_223);
        goto -> bb196;
    }

    bb96: {
        StorageDead(_237);
        _235 = anchor_lang::error::Error::with_account_name::<&str>(move _236, const "user_stats") -> [return: bb97, unwind: bb211];
    }

    bb97: {
        StorageDead(_236);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _235);
        StorageDead(_235);
        goto -> bb196;
    }

    bb98: {
        _245 = &(*_246);
        StorageDead(_247);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        _253 = _8;
        _252 = core::num::<impl u16>::to_le_bytes(move _253) -> [return: bb99, unwind: bb211];
    }

    bb99: {
        _251 = &_252;
        StorageDead(_253);
        _250 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _251) -> [return: bb100, unwind: bb211];
    }

    bb100: {
        _249 = &(*_250);
        StorageDead(_251);
        _244 = [move _245, move _249];
        StorageDead(_249);
        StorageDead(_245);
        _243 = &_244;
        _242 = &(*_243);
        _241 = move _242 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_242);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &_1;
        _450 = deref_copy (*_255);
        _254 = &(*_450);
        _240 = anchor_lang::prelude::Pubkey::find_program_address(move _241, move _254) -> [return: bb101, unwind: bb211];
    }

    bb101: {
        StorageDead(_254);
        StorageDead(_241);
        StorageLive(_238);
        _238 = (_240.0: anchor_lang::prelude::Pubkey);
        StorageLive(_239);
        _239 = (_240.1: u8);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_248);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_240);
        StorageLive(_256);
        _256 = _239;
        ((*_4).0: u8) = move _256;
        StorageDead(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        _523 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _261 = &(*_523);
        _260 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _261) -> [return: bb102, unwind: bb211];
    }

    bb102: {
        _259 = &_260;
        StorageDead(_261);
        StorageLive(_262);
        _262 = &_238;
        _258 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _259, move _262) -> [return: bb103, unwind: bb211];
    }

    bb103: {
        switchInt(move _258) -> [0: bb109, otherwise: bb104];
    }

    bb104: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_259);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = ConstraintSeeds;
        _266 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _267) -> [return: bb105, unwind: bb211];
    }

    bb105: {
        StorageDead(_267);
        _265 = anchor_lang::error::Error::with_account_name::<&str>(move _266, const "out_spot_market_vault") -> [return: bb106, unwind: bb211];
    }

    bb106: {
        _453 = const true;
        StorageDead(_266);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _524 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _270 = &(*_524);
        _269 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _270) -> [return: bb107, unwind: bb225];
    }

    bb107: {
        StorageDead(_270);
        StorageLive(_271);
        _271 = _238;
        _268 = (move _269, move _271);
        StorageDead(_271);
        StorageDead(_269);
        _453 = const false;
        _264 = anchor_lang::error::Error::with_pubkeys(move _265, move _268) -> [return: bb108, unwind: bb225];
    }

    bb108: {
        StorageDead(_268);
        _453 = const false;
        StorageDead(_265);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _264);
        StorageDead(_264);
        StorageDead(_258);
        StorageDead(_257);
        goto -> bb195;
    }

    bb109: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_259);
        _257 = const ();
        StorageDead(_258);
        StorageDead(_257);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        _277 = &_81;
        _276 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _277) -> [return: bb110, unwind: bb211];
    }

    bb110: {
        _275 = &(*_276);
        StorageDead(_277);
        _274 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _275) -> [return: bb111, unwind: bb211];
    }

    bb111: {
        StorageDead(_275);
        _273 = ((*_274).6: bool);
        switchInt(move _273) -> [0: bb112, otherwise: bb115];
    }

    bb112: {
        StorageDead(_276);
        StorageDead(_274);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = ConstraintMut;
        _280 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _281) -> [return: bb113, unwind: bb211];
    }

    bb113: {
        StorageDead(_281);
        _279 = anchor_lang::error::Error::with_account_name::<&str>(move _280, const "out_spot_market_vault") -> [return: bb114, unwind: bb211];
    }

    bb114: {
        StorageDead(_280);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _279);
        StorageDead(_279);
        StorageDead(_273);
        StorageDead(_272);
        goto -> bb195;
    }

    bb115: {
        StorageDead(_276);
        StorageDead(_274);
        _272 = const ();
        StorageDead(_273);
        StorageDead(_272);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _292 = const b"spot_market_vault";
        _291 = &(*_292);
        _290 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _291) -> [return: bb116, unwind: bb211];
    }

    bb116: {
        _289 = &(*_290);
        StorageDead(_291);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = _7;
        _296 = core::num::<impl u16>::to_le_bytes(move _297) -> [return: bb117, unwind: bb211];
    }

    bb117: {
        _295 = &_296;
        StorageDead(_297);
        _294 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _295) -> [return: bb118, unwind: bb211];
    }

    bb118: {
        _293 = &(*_294);
        StorageDead(_295);
        _288 = [move _289, move _293];
        StorageDead(_293);
        StorageDead(_289);
        _287 = &_288;
        _286 = &(*_287);
        _285 = move _286 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_286);
        StorageLive(_298);
        StorageLive(_299);
        _299 = &_1;
        _451 = deref_copy (*_299);
        _298 = &(*_451);
        _284 = anchor_lang::prelude::Pubkey::find_program_address(move _285, move _298) -> [return: bb119, unwind: bb211];
    }

    bb119: {
        StorageDead(_298);
        StorageDead(_285);
        StorageLive(_282);
        _282 = (_284.0: anchor_lang::prelude::Pubkey);
        StorageLive(_283);
        _283 = (_284.1: u8);
        StorageDead(_299);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_284);
        StorageLive(_300);
        _300 = _283;
        ((*_4).1: u8) = move _300;
        StorageDead(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        _525 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _305 = &(*_525);
        _304 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _305) -> [return: bb120, unwind: bb211];
    }

    bb120: {
        _303 = &_304;
        StorageDead(_305);
        StorageLive(_306);
        _306 = &_282;
        _302 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _303, move _306) -> [return: bb121, unwind: bb211];
    }

    bb121: {
        switchInt(move _302) -> [0: bb127, otherwise: bb122];
    }

    bb122: {
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_303);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = ConstraintSeeds;
        _310 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _311) -> [return: bb123, unwind: bb211];
    }

    bb123: {
        StorageDead(_311);
        _309 = anchor_lang::error::Error::with_account_name::<&str>(move _310, const "in_spot_market_vault") -> [return: bb124, unwind: bb211];
    }

    bb124: {
        _452 = const true;
        StorageDead(_310);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _526 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _314 = &(*_526);
        _313 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _314) -> [return: bb125, unwind: bb223];
    }

    bb125: {
        StorageDead(_314);
        StorageLive(_315);
        _315 = _282;
        _312 = (move _313, move _315);
        StorageDead(_315);
        StorageDead(_313);
        _452 = const false;
        _308 = anchor_lang::error::Error::with_pubkeys(move _309, move _312) -> [return: bb126, unwind: bb223];
    }

    bb126: {
        StorageDead(_312);
        _452 = const false;
        StorageDead(_309);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _308);
        StorageDead(_308);
        StorageDead(_302);
        StorageDead(_301);
        goto -> bb194;
    }

    bb127: {
        StorageDead(_306);
        StorageDead(_304);
        StorageDead(_303);
        _301 = const ();
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = &_96;
        _320 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _321) -> [return: bb128, unwind: bb211];
    }

    bb128: {
        _319 = &(*_320);
        StorageDead(_321);
        _318 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _319) -> [return: bb129, unwind: bb211];
    }

    bb129: {
        StorageDead(_319);
        _317 = ((*_318).6: bool);
        switchInt(move _317) -> [0: bb130, otherwise: bb133];
    }

    bb130: {
        StorageDead(_320);
        StorageDead(_318);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = ConstraintMut;
        _324 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _325) -> [return: bb131, unwind: bb211];
    }

    bb131: {
        StorageDead(_325);
        _323 = anchor_lang::error::Error::with_account_name::<&str>(move _324, const "in_spot_market_vault") -> [return: bb132, unwind: bb211];
    }

    bb132: {
        StorageDead(_324);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _323);
        StorageDead(_323);
        StorageDead(_317);
        StorageDead(_316);
        goto -> bb194;
    }

    bb133: {
        StorageDead(_320);
        StorageDead(_318);
        _316 = const ();
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = &_111;
        _330 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _331) -> [return: bb134, unwind: bb211];
    }

    bb134: {
        _329 = &(*_330);
        StorageDead(_331);
        _328 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _329) -> [return: bb135, unwind: bb211];
    }

    bb135: {
        StorageDead(_329);
        _327 = ((*_328).6: bool);
        switchInt(move _327) -> [0: bb136, otherwise: bb139];
    }

    bb136: {
        StorageDead(_330);
        StorageDead(_328);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = ConstraintMut;
        _334 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _335) -> [return: bb137, unwind: bb211];
    }

    bb137: {
        StorageDead(_335);
        _333 = anchor_lang::error::Error::with_account_name::<&str>(move _334, const "out_token_account") -> [return: bb138, unwind: bb211];
    }

    bb138: {
        StorageDead(_334);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _333);
        StorageDead(_333);
        StorageDead(_327);
        StorageDead(_326);
        goto -> bb194;
    }

    bb139: {
        StorageDead(_330);
        StorageDead(_328);
        _326 = const ();
        StorageDead(_327);
        StorageDead(_326);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        _527 = (((_81.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _344 = &(*_527);
        _343 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _344) -> [return: bb140, unwind: bb211];
    }

    bb140: {
        _342 = &(*_343);
        _341 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _342) -> [return: bb141, unwind: bb211];
    }

    bb141: {
        StorageDead(_344);
        StorageDead(_342);
        _340 = &((*_341).0: anchor_lang::prelude::Pubkey);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _528 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _350 = &(*_528);
        _349 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _350) -> [return: bb142, unwind: bb211];
    }

    bb142: {
        _348 = &(*_349);
        _347 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _348) -> [return: bb143, unwind: bb211];
    }

    bb143: {
        StorageDead(_350);
        StorageDead(_348);
        _346 = &((*_347).0: anchor_lang::prelude::Pubkey);
        _345 = &(*_346);
        _339 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _340, move _345) -> [return: bb144, unwind: bb211];
    }

    bb144: {
        StorageDead(_345);
        StorageDead(_340);
        _338 = &_339;
        _337 = <&bool as Not>::not(move _338) -> [return: bb145, unwind: bb211];
    }

    bb145: {
        switchInt(move _337) -> [0: bb149, otherwise: bb146];
    }

    bb146: {
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_338);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = ConstraintRaw;
        _353 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _354) -> [return: bb147, unwind: bb211];
    }

    bb147: {
        StorageDead(_354);
        _352 = anchor_lang::error::Error::with_account_name::<&str>(move _353, const "out_token_account") -> [return: bb148, unwind: bb211];
    }

    bb148: {
        StorageDead(_353);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _352);
        StorageDead(_352);
        StorageDead(_337);
        StorageDead(_336);
        goto -> bb194;
    }

    bb149: {
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_346);
        StorageDead(_343);
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_338);
        _336 = const ();
        StorageDead(_337);
        StorageDead(_336);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        _529 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _361 = &(*_529);
        _360 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _361) -> [return: bb150, unwind: bb211];
    }

    bb150: {
        _359 = &(*_360);
        _358 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _359) -> [return: bb151, unwind: bb211];
    }

    bb151: {
        StorageDead(_361);
        StorageDead(_359);
        _357 = &((*_358).1: anchor_lang::prelude::Pubkey);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = &_66;
        _363 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _364) -> [return: bb152, unwind: bb211];
    }

    bb152: {
        _362 = &_363;
        StorageDead(_364);
        _356 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _357, move _362) -> [return: bb153, unwind: bb211];
    }

    bb153: {
        switchInt(move _356) -> [0: bb156, otherwise: bb154];
    }

    bb154: {
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_357);
        StorageLive(_366);
        StorageLive(_367);
        _367 = ConstraintTokenOwner;
        _366 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _367) -> [return: bb155, unwind: bb211];
    }

    bb155: {
        StorageDead(_367);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _366);
        StorageDead(_366);
        StorageDead(_356);
        StorageDead(_355);
        goto -> bb194;
    }

    bb156: {
        StorageDead(_363);
        StorageDead(_362);
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_357);
        _355 = const ();
        StorageDead(_356);
        StorageDead(_355);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        _373 = &_126;
        _372 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _373) -> [return: bb157, unwind: bb211];
    }

    bb157: {
        _371 = &(*_372);
        StorageDead(_373);
        _370 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _371) -> [return: bb158, unwind: bb211];
    }

    bb158: {
        StorageDead(_371);
        _369 = ((*_370).6: bool);
        switchInt(move _369) -> [0: bb159, otherwise: bb162];
    }

    bb159: {
        StorageDead(_372);
        StorageDead(_370);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = ConstraintMut;
        _376 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _377) -> [return: bb160, unwind: bb211];
    }

    bb160: {
        StorageDead(_377);
        _375 = anchor_lang::error::Error::with_account_name::<&str>(move _376, const "in_token_account") -> [return: bb161, unwind: bb211];
    }

    bb161: {
        StorageDead(_376);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _375);
        StorageDead(_375);
        StorageDead(_369);
        StorageDead(_368);
        goto -> bb194;
    }

    bb162: {
        StorageDead(_372);
        StorageDead(_370);
        _368 = const ();
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        _530 = (((_96.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _386 = &(*_530);
        _385 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _386) -> [return: bb163, unwind: bb211];
    }

    bb163: {
        _384 = &(*_385);
        _383 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _384) -> [return: bb164, unwind: bb211];
    }

    bb164: {
        StorageDead(_386);
        StorageDead(_384);
        _382 = &((*_383).0: anchor_lang::prelude::Pubkey);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _531 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _392 = &(*_531);
        _391 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _392) -> [return: bb165, unwind: bb211];
    }

    bb165: {
        _390 = &(*_391);
        _389 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _390) -> [return: bb166, unwind: bb211];
    }

    bb166: {
        StorageDead(_392);
        StorageDead(_390);
        _388 = &((*_389).0: anchor_lang::prelude::Pubkey);
        _387 = &(*_388);
        _381 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _382, move _387) -> [return: bb167, unwind: bb211];
    }

    bb167: {
        StorageDead(_387);
        StorageDead(_382);
        _380 = &_381;
        _379 = <&bool as Not>::not(move _380) -> [return: bb168, unwind: bb211];
    }

    bb168: {
        switchInt(move _379) -> [0: bb172, otherwise: bb169];
    }

    bb169: {
        StorageDead(_391);
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_385);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = ConstraintRaw;
        _395 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _396) -> [return: bb170, unwind: bb211];
    }

    bb170: {
        StorageDead(_396);
        _394 = anchor_lang::error::Error::with_account_name::<&str>(move _395, const "in_token_account") -> [return: bb171, unwind: bb211];
    }

    bb171: {
        StorageDead(_395);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _394);
        StorageDead(_394);
        StorageDead(_379);
        StorageDead(_378);
        goto -> bb194;
    }

    bb172: {
        StorageDead(_391);
        StorageDead(_389);
        StorageDead(_388);
        StorageDead(_385);
        StorageDead(_383);
        StorageDead(_381);
        StorageDead(_380);
        _378 = const ();
        StorageDead(_379);
        StorageDead(_378);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        _532 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _403 = &(*_532);
        _402 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _403) -> [return: bb173, unwind: bb211];
    }

    bb173: {
        _401 = &(*_402);
        _400 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _401) -> [return: bb174, unwind: bb211];
    }

    bb174: {
        StorageDead(_403);
        StorageDead(_401);
        _399 = &((*_400).1: anchor_lang::prelude::Pubkey);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = &_66;
        _405 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _406) -> [return: bb175, unwind: bb211];
    }

    bb175: {
        _404 = &_405;
        StorageDead(_406);
        _398 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _399, move _404) -> [return: bb176, unwind: bb211];
    }

    bb176: {
        switchInt(move _398) -> [0: bb179, otherwise: bb177];
    }

    bb177: {
        StorageDead(_405);
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_400);
        StorageDead(_399);
        StorageLive(_408);
        StorageLive(_409);
        _409 = ConstraintTokenOwner;
        _408 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _409) -> [return: bb178, unwind: bb211];
    }

    bb178: {
        StorageDead(_409);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _408);
        StorageDead(_408);
        StorageDead(_398);
        StorageDead(_397);
        goto -> bb194;
    }

    bb179: {
        StorageDead(_405);
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_400);
        StorageDead(_399);
        _397 = const ();
        StorageDead(_398);
        StorageDead(_397);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _533 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _414 = &(*_533);
        _413 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _414) -> [return: bb180, unwind: bb211];
    }

    bb180: {
        StorageDead(_414);
        _412 = &((*_413).3: anchor_lang::prelude::Pubkey);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &_156;
        _417 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _418) -> [return: bb181, unwind: bb211];
    }

    bb181: {
        StorageDead(_418);
        _416 = &_417;
        _415 = &(*_416);
        _411 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _412, move _415) -> [return: bb182, unwind: bb211];
    }

    bb182: {
        switchInt(move _411) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        StorageDead(_415);
        StorageDead(_412);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_413);
        _410 = const ();
        StorageDead(_411);
        StorageDead(_410);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        _425 = &_171;
        _424 = <anchor_lang::prelude::UncheckedAccount<'_> as anchor_lang::Key>::key(move _425) -> [return: bb187, unwind: bb211];
    }

    bb184: {
        StorageDead(_415);
        StorageDead(_412);
        StorageDead(_417);
        StorageDead(_416);
        StorageDead(_413);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = ConstraintRaw;
        _421 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _422) -> [return: bb185, unwind: bb211];
    }

    bb185: {
        StorageDead(_422);
        _420 = anchor_lang::error::Error::with_account_name::<&str>(move _421, const "drift_signer") -> [return: bb186, unwind: bb211];
    }

    bb186: {
        StorageDead(_421);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _420);
        StorageDead(_420);
        StorageDead(_411);
        StorageDead(_410);
        goto -> bb194;
    }

    bb187: {
        StorageDead(_425);
        StorageLive(_426);
        _426 = const _;
        StorageLive(_427);
        StorageLive(_428);
        _428 = &_424;
        StorageLive(_429);
        _429 = &_426;
        _427 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _428, move _429) -> [return: bb188, unwind: bb211];
    }

    bb188: {
        switchInt(move _427) -> [0: bb193, otherwise: bb189];
    }

    bb189: {
        StorageDead(_429);
        StorageDead(_428);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = ConstraintAddress;
        _433 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _434) -> [return: bb190, unwind: bb211];
    }

    bb190: {
        StorageDead(_434);
        _432 = anchor_lang::error::Error::with_account_name::<&str>(move _433, const "instructions") -> [return: bb191, unwind: bb211];
    }

    bb191: {
        StorageDead(_433);
        StorageLive(_435);
        StorageLive(_436);
        _436 = _424;
        StorageLive(_437);
        _437 = _426;
        _435 = (move _436, move _437);
        StorageDead(_437);
        StorageDead(_436);
        _431 = anchor_lang::error::Error::with_pubkeys(move _432, move _435) -> [return: bb192, unwind: bb211];
    }

    bb192: {
        StorageDead(_435);
        StorageDead(_432);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Err(move _431);
        StorageDead(_431);
        StorageDead(_427);
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_423);
        goto -> bb194;
    }

    bb193: {
        StorageDead(_429);
        StorageDead(_428);
        _423 = const ();
        StorageDead(_427);
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_423);
        StorageLive(_438);
        StorageLive(_439);
        _439 = move _21;
        StorageLive(_440);
        _440 = move _36;
        StorageLive(_441);
        _441 = move _51;
        StorageLive(_442);
        _442 = move _66;
        StorageLive(_443);
        _443 = move _81;
        StorageLive(_444);
        _444 = move _96;
        StorageLive(_445);
        _445 = move _111;
        StorageLive(_446);
        _446 = move _126;
        StorageLive(_447);
        _447 = move _141;
        StorageLive(_448);
        _448 = move _156;
        StorageLive(_449);
        _449 = move _171;
        _438 = instructions::user::Swap::<'_> { state: move _439, user: move _440, user_stats: move _441, authority: move _442, out_spot_market_vault: move _443, in_spot_market_vault: move _444, out_token_account: move _445, in_token_account: move _446, token_program: move _447, drift_signer: move _448, instructions: move _449 };
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_445);
        StorageDead(_444);
        StorageDead(_443);
        StorageDead(_442);
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_439);
        _0 = std::result::Result::<instructions::user::Swap<'_>, anchor_lang::error::Error>::Ok(move _438);
        StorageDead(_438);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb210;
    }

    bb194: {
        StorageDead(_283);
        StorageDead(_282);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb198;
    }

    bb196: {
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb198;
    }

    bb197: {
        StorageDead(_196);
        StorageDead(_195);
        goto -> bb198;
    }

    bb198: {
        StorageDead(_171);
        drop(_156) -> [return: bb199, unwind: bb212];
    }

    bb199: {
        StorageDead(_156);
        goto -> bb200;
    }

    bb200: {
        StorageDead(_141);
        drop(_126) -> [return: bb201, unwind: bb213];
    }

    bb201: {
        StorageDead(_126);
        drop(_111) -> [return: bb202, unwind: bb214];
    }

    bb202: {
        StorageDead(_111);
        drop(_96) -> [return: bb203, unwind: bb215];
    }

    bb203: {
        StorageDead(_96);
        drop(_81) -> [return: bb204, unwind: bb216];
    }

    bb204: {
        StorageDead(_81);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_66);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_51);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_36);
        drop(_21) -> [return: bb208, unwind: bb217];
    }

    bb208: {
        StorageDead(_21);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_6);
        goto -> bb210;
    }

    bb210: {
        return;
    }

    bb211 (cleanup): {
        drop(_156) -> [return: bb212, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_126) -> [return: bb213, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        drop(_111) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        drop(_96) -> [return: bb215, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        drop(_81) -> [return: bb216, unwind terminate(cleanup)];
    }

    bb216 (cleanup): {
        drop(_21) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        resume;
    }

    bb218: {
        _476 = discriminant(_197);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_197);
        _195 = const ();
        StorageDead(_196);
        StorageDead(_195);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &_51;
        _215 = &(*_216);
        _214 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _215) -> [return: bb86, unwind: bb211];
    }

    bb219: {
        _478 = discriminant(_197);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_197);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = ConstraintRaw;
        _210 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _211) -> [return: bb84, unwind: bb211];
    }

    bb220: {
        _480 = discriminant(_223);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_223);
        _221 = const ();
        StorageDead(_222);
        StorageDead(_221);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = const b"spot_market_vault";
        _247 = &(*_248);
        _246 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _247) -> [return: bb98, unwind: bb211];
    }

    bb221: {
        _482 = discriminant(_223);
        StorageDead(_228);
        StorageDead(_226);
        StorageDead(_223);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = ConstraintRaw;
        _236 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _237) -> [return: bb96, unwind: bb211];
    }

    bb222 (cleanup): {
        drop(_309) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        switchInt(_452) -> [0: bb211, otherwise: bb222];
    }

    bb224 (cleanup): {
        drop(_265) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb225 (cleanup): {
        switchInt(_453) -> [0: bb211, otherwise: bb224];
    }

    bb226 (cleanup): {
        _510 = discriminant(_223);
        goto -> bb211;
    }

    bb227 (cleanup): {
        _511 = discriminant(_197);
        goto -> bb211;
    }

    bb228 (cleanup): {
        _512 = discriminant(_172);
        goto -> bb211;
    }

    bb229 (cleanup): {
        _513 = discriminant(_157);
        goto -> bb212;
    }

    bb230 (cleanup): {
        _514 = discriminant(_142);
        goto -> bb212;
    }

    bb231 (cleanup): {
        _515 = discriminant(_127);
        goto -> bb213;
    }

    bb232 (cleanup): {
        _516 = discriminant(_112);
        goto -> bb214;
    }

    bb233 (cleanup): {
        _517 = discriminant(_97);
        goto -> bb215;
    }

    bb234 (cleanup): {
        _518 = discriminant(_82);
        goto -> bb216;
    }

    bb235 (cleanup): {
        _519 = discriminant(_67);
        goto -> bb216;
    }

    bb236 (cleanup): {
        _520 = discriminant(_52);
        goto -> bb216;
    }

    bb237 (cleanup): {
        _521 = discriminant(_37);
        goto -> bb216;
    }

    bb238 (cleanup): {
        _522 = discriminant(_22);
        goto -> bb217;
    }
}

alloc318 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc317 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}
