digraph Mir_0_1813 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn is_oracle_mark_too_divergent(_1: i64, _2: &amp;ReErased state::state::PriceDivergenceGuardRails) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _3: u64;<br align="left"/>let mut _4: u64;<br align="left"/>let mut _5: u64;<br align="left"/>let mut _6: bool;<br align="left"/>let mut _7: bool;<br align="left"/>let mut _8: u64;<br align="left"/>let mut _9: i64;<br align="left"/>let mut _10: u64;<br align="left"/>debug price_spread_pct =&gt; _1;<br align="left"/>debug oracle_guard_rails =&gt; _2;<br align="left"/>debug max_divergence =&gt; _3;<br align="left"/>>;
    bb0__0_1813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = ((*_2).0: u64)<br/>StorageLive(_5)<br/>_6 = Eq(const 10_u64, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _6, &quot;attempt to divide `{}` by zero&quot;, const _)</td></tr></table>>];
    bb1__0_1813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">_5 = Div(const _, const 10_u64)<br/></td></tr><tr><td align="left">_3 = &lt;u64 as Ord&gt;::max(move _4, move _5)</td></tr></table>>];
    bb2__0_1813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>_9 = _1<br/></td></tr><tr><td align="left">_8 = core::num::&lt;impl i64&gt;::unsigned_abs(move _9)</td></tr></table>>];
    bb3__0_1813 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>StorageLive(_10)<br/>_10 = _3<br/>_7 = Gt(move _8, move _10)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(move _7)<br/>StorageDead(_7)<br/>StorageDead(_3)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1813 -> bb1__0_1813 [label="success"];
    bb1__0_1813 -> bb2__0_1813 [label="return"];
    bb2__0_1813 -> bb3__0_1813 [label="return"];
}
