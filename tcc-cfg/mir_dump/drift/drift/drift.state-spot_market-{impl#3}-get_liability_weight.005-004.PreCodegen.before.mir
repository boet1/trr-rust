// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_liability_weight` before PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_liability_weight(_1: &SpotMarket, _2: u128, _3: &math::margin::MarginRequirementType) -> std::result::Result<u32, error::ErrorCode> {
    debug self => _1;
    debug size => _2;
    debug margin_requirement_type => _3;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let _4: u128;
    let mut _5: u32;
    let mut _7: bool;
    let mut _8: u128;
    let mut _9: u128;
    let mut _10: u128;
    let mut _11: u128;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: u128;
    let mut _15: u128;
    let mut _16: (u128, bool);
    let mut _17: u128;
    let mut _18: bool;
    let mut _20: isize;
    let mut _21: u32;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _23: std::result::Result<u32, error::ErrorCode>;
    let mut _24: u32;
    let mut _25: u32;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: bool;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _34: std::result::Result<u32, error::ErrorCode>;
    let mut _35: u128;
    let mut _36: u32;
    let mut _37: u32;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: u32;
    let mut _45: u32;
    let mut _46: u32;
    scope 1 {
        debug size_precision => _4;
        let _6: u128;
        scope 2 {
            debug size_in_amm_reserve_precision => _6;
            let _19: u32;
            let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _30: u32;
            scope 3 {
                debug default_liability_weight => _19;
                let _32: u32;
                let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _42: u32;
                scope 8 {
                    debug size_based_liability_weight => _32;
                    let _43: u32;
                    scope 13 {
                        debug liability_weight => _43;
                    }
                }
                scope 9 {
                    debug residual => _39;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _42;
                    scope 12 {
                    }
                }
            }
            scope 4 {
                debug residual => _27;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _30;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).41: u32);
        _4 = core::num::<impl u128>::pow(const 10_u128, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _4;
        _7 = Gt(move _8, const _);
        switchInt(move _7) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = _2;
        StorageLive(_10);
        StorageLive(_11);
        _11 = _4;
        _12 = Eq(const _, const 0_u128);
        assert(!move _12, "attempt to divide `{}` by zero", _11) -> [success: bb3, unwind continue];
    }

    bb3: {
        _10 = Div(move _11, const _);
        StorageDead(_11);
        _13 = Eq(_10, const 0_u128);
        assert(!move _13, "attempt to divide `{}` by zero", _9) -> [success: bb4, unwind continue];
    }

    bb4: {
        _6 = Div(move _9, move _10);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb8;
    }

    bb5: {
        StorageDead(_8);
        StorageLive(_14);
        StorageLive(_15);
        _15 = _2;
        _16 = CheckedMul(_15, const _);
        assert(!move (_16.1: bool), "attempt to compute `{} * {}`, which would overflow", move _15, const _) -> [success: bb6, unwind continue];
    }

    bb6: {
        _14 = move (_16.0: u128);
        StorageDead(_15);
        StorageLive(_17);
        _17 = _4;
        _18 = Eq(_17, const 0_u128);
        assert(!move _18, "attempt to divide `{}` by zero", _14) -> [success: bb7, unwind continue];
    }

    bb7: {
        _6 = Div(move _14, move _17);
        StorageDead(_17);
        StorageDead(_14);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_7);
        StorageLive(_19);
        _20 = discriminant((*_3));
        switchInt(move _20) -> [0: bb11, 1: bb12, 2: bb9, otherwise: bb10];
    }

    bb9: {
        _19 = ((*_1).34: u32);
        goto -> bb19;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _19 = ((*_1).33: u32);
        goto -> bb19;
    }

    bb12: {
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = ((*_1).33: u32);
        StorageLive(_25);
        _25 = ((*_1).34: u32);
        _23 = <u32 as SafeMath>::safe_add(move _24, move _25) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _23) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_23);
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb15, 1: bb16, otherwise: bb10];
    }

    bb15: {
        StorageLive(_30);
        _30 = ((_22 as Continue).0: u32);
        _21 = _30;
        StorageDead(_30);
        _31 = Eq(const 2_u32, const 0_u32);
        assert(!move _31, "attempt to divide `{}` by zero", _21) -> [success: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_27);
        _27 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_22);
        goto -> bb26;
    }

    bb18: {
        _19 = Div(move _21, const 2_u32);
        StorageDead(_21);
        StorageDead(_22);
        goto -> bb19;
    }

    bb19: {
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _6;
        StorageLive(_36);
        _36 = ((*_1).35: u32);
        StorageLive(_37);
        _37 = _19;
        _34 = calculate_size_premium_liability_weight(move _35, move _36, move _37, const _) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        _38 = discriminant(_33);
        switchInt(move _38) -> [0: bb22, 1: bb23, otherwise: bb10];
    }

    bb22: {
        StorageLive(_42);
        _42 = ((_33 as Continue).0: u32);
        _32 = _42;
        StorageDead(_42);
        StorageDead(_33);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _32;
        StorageLive(_45);
        _45 = _19;
        _43 = <u32 as Ord>::max(move _44, move _45) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_39);
        _39 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb26;
    }

    bb25: {
        StorageDead(_45);
        StorageDead(_44);
        StorageLive(_46);
        _46 = _43;
        _0 = std::result::Result::<u32, error::ErrorCode>::Ok(move _46);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_32);
        StorageDead(_19);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_19);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}
