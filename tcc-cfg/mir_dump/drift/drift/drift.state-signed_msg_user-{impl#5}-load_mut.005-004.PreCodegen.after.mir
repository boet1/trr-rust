// MIR for `signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:176:1: 176:59>::load_mut` after PreCodegen

fn signed_msg_user::<impl at programs/drift/src/state/signed_msg_user.rs:176:1: 176:59>::load_mut(_1: &anchor_lang::prelude::AccountInfo<'_>) -> std::result::Result<SignedMsgUserOrdersZeroCopyMut<'_>, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<state::signed_msg_user::SignedMsgUserOrdersZeroCopyMut<'_>, error::ErrorCode>;
    let _2: &anchor_lang::prelude::Pubkey;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: &&anchor_lang::prelude::Pubkey;
    let mut _8: &&anchor_lang::prelude::Pubkey;
    let _9: &anchor_lang::prelude::Pubkey;
    let _10: &anchor_lang::prelude::Pubkey;
    let mut _11: ();
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: &std::string::String;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[&str; 2];
    let _23: &[&str; 2];
    let _24: [&str; 2];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let mut _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &error::ErrorCode;
    let _31: &error::ErrorCode;
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 1];
    let _42: &[&str; 1];
    let _43: [&str; 1];
    let mut _44: error::ErrorCode;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, &mut [u8]>>;
    let mut _52: std::result::Result<std::cell::RefMut<'_, &mut [u8]>, error::ErrorCode>;
    let mut _53: std::result::Result<std::cell::RefMut<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _54: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: (std::cell::RefMut<'_, [u8]>, std::cell::RefMut<'_, [u8]>);
    let mut _63: std::cell::RefMut<'_, &mut [u8]>;
    let mut _64: {closure@programs/drift/src/state/signed_msg_user.rs:213:61: 213:64};
    let _65: ();
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _67: std::result::Result<(), error::ErrorCode>;
    let mut _68: bool;
    let mut _69: &[u8];
    let _70: &[u8];
    let mut _71: &std::cell::RefMut<'_, [u8]>;
    let mut _72: &[u8; 8];
    let _73: [u8; 8];
    let mut _74: ();
    let _76: ();
    let mut _77: &str;
    let _78: &str;
    let mut _79: &std::string::String;
    let _80: &std::string::String;
    let _81: std::string::String;
    let mut _83: std::fmt::Arguments<'_>;
    let mut _84: &[&str];
    let mut _85: &[&str; 2];
    let _86: &[&str; 2];
    let _87: [&str; 2];
    let mut _88: &[core::fmt::rt::Argument<'_>];
    let mut _89: &[core::fmt::rt::Argument<'_>; 1];
    let _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: [core::fmt::rt::Argument<'_>; 1];
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &error::ErrorCode;
    let _94: &error::ErrorCode;
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: &std::string::String;
    let _99: &std::string::String;
    let _100: std::string::String;
    let mut _102: std::fmt::Arguments<'_>;
    let mut _103: &[&str];
    let mut _104: &[&str; 1];
    let _105: &[&str; 1];
    let _106: [&str; 1];
    let mut _107: error::ErrorCode;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: (std::cell::RefMut<'_, [u8]>, std::cell::RefMut<'_, [u8]>);
    let mut _116: std::cell::RefMut<'_, [u8]>;
    let mut _117: {closure@programs/drift/src/state/signed_msg_user.rs:220:53: 220:56};
    let mut _118: state::signed_msg_user::SignedMsgUserOrdersZeroCopyMut<'_>;
    let mut _119: std::cell::RefMut<'_, state::signed_msg_user::SignedMsgUserOrdersFixed>;
    let mut _120: std::cell::RefMut<'_, [u8]>;
    let mut _121: {closure@programs/drift/src/state/signed_msg_user.rs:222:39: 222:42};
    let mut _122: std::cell::RefMut<'_, [u8]>;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: isize;
    let mut _131: isize;
    let mut _132: isize;
    let mut _133: isize;
    let mut _134: isize;
    scope 1 {
        debug owner => _2;
        let _12: error::ErrorCode;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: ();
        let _50: std::cell::RefMut<'_, &mut [u8]>;
        let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _59: std::cell::RefMut<'_, &mut [u8]>;
        scope 2 {
            debug error_code => _12;
            let _19: std::string::String;
            let _38: std::string::String;
            let mut _125: &[&str; 1];
            let mut _126: &[&str; 2];
            scope 3 {
                debug res => _19;
            }
            scope 4 {
                debug res => _38;
            }
        }
        scope 5 {
            debug residual => _46;
            scope 6 {
            }
        }
        scope 7 {
            debug val => _49;
            scope 8 {
            }
        }
        scope 9 {
            debug data => _50;
            let _60: std::cell::RefMut<'_, [u8]>;
            let _61: std::cell::RefMut<'_, [u8]>;
            scope 14 {
                debug discriminator => _60;
                debug data => _61;
                let _75: error::ErrorCode;
                let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _112: ();
                let _113: std::cell::RefMut<'_, [u8]>;
                let _114: std::cell::RefMut<'_, [u8]>;
                scope 15 {
                    debug error_code => _75;
                    let _82: std::string::String;
                    let _101: std::string::String;
                    let mut _123: &[&str; 1];
                    let mut _124: &[&str; 2];
                    scope 16 {
                        debug res => _82;
                    }
                    scope 17 {
                        debug res => _101;
                    }
                }
                scope 18 {
                    debug residual => _109;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _112;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug fixed => _113;
                    debug data => _114;
                }
            }
        }
        scope 10 {
            debug residual => _56;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _59;
            scope 13 {
            }
        }
    }

    bb0: {
        _129 = const false;
        _128 = const false;
        _127 = const false;
        StorageLive(_2);
        _2 = ((*_1).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_2;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = const {alloc266: &anchor_lang::prelude::Pubkey};
        _9 = &(*_10);
        _8 = &_9;
        _6 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_11);
        _11 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _11);
        StorageDead(_11);
        goto -> bb15;
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_12);
        _12 = error::ErrorCode::DefaultError;
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _126 = const _;
        _23 = &(*_126);
        _22 = &(*_23);
        _21 = move _22 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_12;
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _30) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_30);
        _28 = [move _29];
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = move _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_26);
        _20 = Arguments::<'_>::new_v1(move _21, move _25) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_25);
        StorageDead(_21);
        _19 = format(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        _18 = move _19;
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = <String as Deref>::deref(move _16) -> [return: bb7, unwind: bb63];
    }

    bb7: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb8, unwind: bb63];
    }

    bb8: {
        StorageDead(_14);
        drop(_18) -> [return: bb9, unwind: bb64];
    }

    bb9: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _125 = const _;
        _42 = &(*_125);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        _39 = Arguments::<'_>::new_const(move _40) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_39);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <String as Deref>::deref(move _35) -> [return: bb12, unwind: bb62];
    }

    bb12: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb13, unwind: bb62];
    }

    bb13: {
        StorageDead(_33);
        drop(_37) -> [return: bb14, unwind: bb64];
    }

    bb14: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_44);
        _44 = _12;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _44);
        StorageDead(_44);
        StorageDead(_12);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_5);
        _45 = discriminant(_4);
        switchInt(move _45) -> [0: bb17, 1: bb19, otherwise: bb18];
    }

    bb17: {
        StorageLive(_49);
        _49 = ((_4 as Continue).0: ());
        _3 = _49;
        StorageDead(_49);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        _53 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_mut_data(move _54) -> [return: bb21, unwind continue];
    }

    bb18: {
        unreachable;
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<SignedMsgUserOrdersZeroCopyMut<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb55;
    }

    bb21: {
        StorageDead(_54);
        _52 = <std::result::Result<RefMut<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as SafeUnwrap>::safe_unwrap(move _53) -> [return: bb22, unwind: bb64];
    }

    bb22: {
        StorageDead(_53);
        _51 = <std::result::Result<RefMut<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb23, unwind: bb64];
    }

    bb23: {
        StorageDead(_52);
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb24, 1: bb25, otherwise: bb18];
    }

    bb24: {
        StorageLive(_59);
        _59 = move ((_51 as Continue).0: std::cell::RefMut<'_, &mut [u8]>);
        _129 = const true;
        _50 = move _59;
        StorageDead(_59);
        _132 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_62);
        StorageLive(_63);
        _129 = const false;
        _63 = move _50;
        StorageLive(_64);
        _64 = {closure@programs/drift/src/state/signed_msg_user.rs:213:61: 213:64};
        _62 = RefMut::<'_, &mut [u8]>::map_split::<[u8], [u8], {closure@programs/drift/src/state/signed_msg_user.rs:213:61: 213:64}>(move _63, move _64) -> [return: bb27, unwind: bb69];
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<SignedMsgUserOrdersZeroCopyMut<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb26, unwind: bb70];
    }

    bb26: {
        StorageDead(_58);
        StorageDead(_56);
        _130 = discriminant(_51);
        StorageDead(_51);
        goto -> bb54;
    }

    bb27: {
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_60);
        _60 = move (_62.0: std::cell::RefMut<'_, [u8]>);
        StorageLive(_61);
        _128 = const true;
        _61 = move (_62.1: std::cell::RefMut<'_, [u8]>);
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_60;
        _70 = <RefMut<'_, [u8]> as Deref>::deref(move _71) -> [return: bb28, unwind: bb67];
    }

    bb28: {
        _69 = &(*_70);
        StorageDead(_71);
        StorageLive(_72);
        StorageLive(_73);
        _73 = <SignedMsgUserOrders as anchor_lang::Discriminator>::discriminator() -> [return: bb29, unwind: bb67];
    }

    bb29: {
        _72 = &_73;
        _68 = <[u8] as PartialEq<[u8; 8]>>::eq(move _69, move _72) -> [return: bb30, unwind: bb67];
    }

    bb30: {
        switchInt(move _68) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = ();
        _67 = std::result::Result::<(), error::ErrorCode>::Ok(move _74);
        StorageDead(_74);
        goto -> bb44;
    }

    bb32: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_75);
        _75 = error::ErrorCode::DefaultError;
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _124 = const _;
        _86 = &(*_124);
        _85 = &(*_86);
        _84 = move _85 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_85);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_75;
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _93) -> [return: bb33, unwind: bb67];
    }

    bb33: {
        StorageDead(_93);
        _91 = [move _92];
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = move _89 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_89);
        _83 = Arguments::<'_>::new_v1(move _84, move _88) -> [return: bb34, unwind: bb67];
    }

    bb34: {
        StorageDead(_88);
        StorageDead(_84);
        _82 = format(move _83) -> [return: bb35, unwind: bb67];
    }

    bb35: {
        StorageDead(_83);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        _81 = move _82;
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = <String as Deref>::deref(move _79) -> [return: bb36, unwind: bb60];
    }

    bb36: {
        _77 = &(*_78);
        StorageDead(_79);
        _76 = solana_program::log::sol_log(move _77) -> [return: bb37, unwind: bb60];
    }

    bb37: {
        StorageDead(_77);
        drop(_81) -> [return: bb38, unwind: bb67];
    }

    bb38: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_76);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _123 = const _;
        _105 = &(*_123);
        _104 = &(*_105);
        _103 = move _104 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_104);
        _102 = Arguments::<'_>::new_const(move _103) -> [return: bb39, unwind: bb67];
    }

    bb39: {
        StorageDead(_103);
        _101 = format(move _102) -> [return: bb40, unwind: bb67];
    }

    bb40: {
        StorageDead(_102);
        StorageDead(_105);
        _100 = move _101;
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = <String as Deref>::deref(move _98) -> [return: bb41, unwind: bb59];
    }

    bb41: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb42, unwind: bb59];
    }

    bb42: {
        StorageDead(_96);
        drop(_100) -> [return: bb43, unwind: bb67];
    }

    bb43: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_107);
        _107 = _75;
        _67 = std::result::Result::<(), error::ErrorCode>::Err(move _107);
        StorageDead(_107);
        StorageDead(_75);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_68);
        _66 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _67) -> [return: bb45, unwind: bb67];
    }

    bb45: {
        StorageDead(_67);
        _108 = discriminant(_66);
        switchInt(move _108) -> [0: bb46, 1: bb47, otherwise: bb18];
    }

    bb46: {
        StorageLive(_112);
        _112 = ((_66 as Continue).0: ());
        _65 = _112;
        StorageDead(_112);
        StorageDead(_66);
        StorageDead(_65);
        StorageLive(_115);
        StorageLive(_116);
        _128 = const false;
        _116 = move _61;
        StorageLive(_117);
        _117 = {closure@programs/drift/src/state/signed_msg_user.rs:220:53: 220:56};
        _115 = RefMut::<'_, [u8]>::map_split::<[u8], [u8], {closure@programs/drift/src/state/signed_msg_user.rs:220:53: 220:56}>(move _116, move _117) -> [return: bb49, unwind: bb67];
    }

    bb47: {
        StorageLive(_109);
        _109 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<SignedMsgUserOrdersZeroCopyMut<'_>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb48, unwind: bb67];
    }

    bb48: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_66);
        StorageDead(_65);
        drop(_61) -> [return: bb52, unwind: bb61];
    }

    bb49: {
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_113);
        _127 = const true;
        _113 = move (_115.0: std::cell::RefMut<'_, [u8]>);
        StorageLive(_114);
        _114 = move (_115.1: std::cell::RefMut<'_, [u8]>);
        StorageDead(_115);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _127 = const false;
        _120 = move _113;
        StorageLive(_121);
        _121 = {closure@programs/drift/src/state/signed_msg_user.rs:222:39: 222:42};
        _119 = RefMut::<'_, [u8]>::map::<SignedMsgUserOrdersFixed, {closure@programs/drift/src/state/signed_msg_user.rs:222:39: 222:42}>(move _120, move _121) -> [return: bb50, unwind: bb57];
    }

    bb50: {
        StorageDead(_121);
        StorageDead(_120);
        StorageLive(_122);
        _122 = move _114;
        _118 = SignedMsgUserOrdersZeroCopyMut::<'_> { fixed: move _119, data: move _122 };
        StorageDead(_122);
        StorageDead(_119);
        _0 = std::result::Result::<SignedMsgUserOrdersZeroCopyMut<'_>, error::ErrorCode>::Ok(move _118);
        StorageDead(_118);
        StorageDead(_114);
        _127 = const false;
        StorageDead(_113);
        _128 = const false;
        StorageDead(_61);
        drop(_60) -> [return: bb51, unwind: bb69];
    }

    bb51: {
        StorageDead(_60);
        _129 = const false;
        StorageDead(_50);
        StorageDead(_2);
        goto -> bb56;
    }

    bb52: {
        _128 = const false;
        StorageDead(_61);
        drop(_60) -> [return: bb53, unwind: bb69];
    }

    bb53: {
        StorageDead(_60);
        goto -> bb54;
    }

    bb54: {
        _129 = const false;
        StorageDead(_50);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_2);
        goto -> bb56;
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_114) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        switchInt(_127) -> [0: bb67, otherwise: bb65];
    }

    bb59 (cleanup): {
        drop(_100) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb60 (cleanup): {
        drop(_81) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb61 (cleanup): {
        drop(_60) -> [return: bb69, unwind terminate(cleanup)];
    }

    bb62 (cleanup): {
        drop(_37) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb63 (cleanup): {
        drop(_18) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb64 (cleanup): {
        resume;
    }

    bb65 (cleanup): {
        drop(_113) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_61) -> [return: bb61, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        switchInt(_128) -> [0: bb61, otherwise: bb66];
    }

    bb68 (cleanup): {
        drop(_50) -> [return: bb64, unwind terminate(cleanup)];
    }

    bb69 (cleanup): {
        switchInt(_129) -> [0: bb64, otherwise: bb68];
    }

    bb70 (cleanup): {
        _134 = discriminant(_51);
        goto -> bb64;
    }
}

alloc266 (static: ID, size: 32, align: 1) {
    0x00 │ 09 54 db be 9e c9 60 c9 8a 7a 29 3f e2 13 36 96 │ .T....`..z)?..6.
    0x10 │ 6f e1 80 d1 51 ae 4b 81 79 56 1f 89 85 4a 53 f6 │ o...Q.K.yV...JS.
}
