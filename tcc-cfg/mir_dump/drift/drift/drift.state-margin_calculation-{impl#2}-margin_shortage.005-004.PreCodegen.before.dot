digraph Mir_0_3456 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn MarginCalculation::margin_shortage(_1: &amp;ReErased state::margin_calculation::MarginCalculation) -&gt; std::result::Result&lt;u128, error::ErrorCode&gt;<br align="left"/>let _2: ();<br align="left"/>let mut _3: bool;<br align="left"/>let mut _4: u128;<br align="left"/>let mut _5: !;<br align="left"/>let _6: ();<br align="left"/>let mut _7: &amp;ReErased str;<br align="left"/>let _8: &amp;ReErased str;<br align="left"/>let mut _9: error::ErrorCode;<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: i128;<br align="left"/>let mut _12: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _13: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _14: i128;<br align="left"/>let mut _15: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _16: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _17: u128;<br align="left"/>let mut _18: isize;<br align="left"/>let _19: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _20: !;<br align="left"/>let mut _21: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _22: i128;<br align="left"/>let mut _23: i128;<br align="left"/>let mut _24: &amp;ReErased state::margin_calculation::MarginCalculation;<br align="left"/>let mut _25: isize;<br align="left"/>let _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _27: !;<br align="left"/>let mut _28: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _29: i128;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug residual =&gt; _19;<br align="left"/>debug val =&gt; _22;<br align="left"/>debug residual =&gt; _26;<br align="left"/>debug val =&gt; _29;<br align="left"/>>;
    bb0__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>_4 = (((*_1).0: state::margin_calculation::MarginContext).4: u128)<br/>_3 = Eq(move _4, const 0_u128)<br/></td></tr><tr><td align="left">switchInt(move _3)</td></tr></table>>];
    bb1__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>_8 = const &quot;margin buffer mode not enabled&quot;<br/>_7 = &amp;(*_8)<br/></td></tr><tr><td align="left">_6 = solana_program::log::sol_log(move _7)</td></tr></table>>];
    bb2__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageLive(_9)<br/>_9 = error::ErrorCode::InvalidMarginCalculation<br/>_0 = std::result::Result::&lt;u128, error::ErrorCode&gt;::Err(move _9)<br/>StorageDead(_9)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>_2 = const ()<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = ((*_1).4: u128)<br/></td></tr><tr><td align="left">_16 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _17)</td></tr></table>>];
    bb4__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">_15 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _16)</td></tr></table>>];
    bb5__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>_18 = discriminant(_15)<br/></td></tr><tr><td align="left">switchInt(move _18)</td></tr></table>>];
    bb6__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_15 as Continue).0: i128)<br/>_14 = _22<br/>StorageDead(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;(*_1)<br/></td></tr><tr><td align="left">_23 = MarginCalculation::get_total_collateral_plus_buffer(move _24)</td></tr></table>>];
    bb7__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_15 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_21)<br/>_21 = _19<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _21)</td></tr></table>>];
    bb9__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_21)<br/>StorageDead(_19)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/></td></tr><tr><td align="left">_13 = &lt;i128 as SafeMath&gt;::safe_sub(move _14, move _23)</td></tr></table>>];
    bb11__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _13)</td></tr></table>>];
    bb12__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>_25 = discriminant(_12)<br/></td></tr><tr><td align="left">switchInt(move _25)</td></tr></table>>];
    bb13__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_12 as Continue).0: i128)<br/>_11 = _29<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">_10 = core::num::&lt;impl i128&gt;::unsigned_abs(move _11)</td></tr></table>>];
    bb14__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_26)<br/>_26 = ((_12 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_28)<br/>_28 = _26<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _28)</td></tr></table>>];
    bb15__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>_0 = std::result::Result::&lt;u128, error::ErrorCode&gt;::Ok(move _10)<br/>StorageDead(_10)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_15)<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb18__0_3456 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3456 -> bb3__0_3456 [label="0"];
    bb0__0_3456 -> bb1__0_3456 [label="otherwise"];
    bb1__0_3456 -> bb2__0_3456 [label="return"];
    bb2__0_3456 -> bb18__0_3456 [label=""];
    bb3__0_3456 -> bb4__0_3456 [label="return"];
    bb4__0_3456 -> bb5__0_3456 [label="return"];
    bb5__0_3456 -> bb6__0_3456 [label="0"];
    bb5__0_3456 -> bb8__0_3456 [label="1"];
    bb5__0_3456 -> bb7__0_3456 [label="otherwise"];
    bb6__0_3456 -> bb10__0_3456 [label="return"];
    bb8__0_3456 -> bb9__0_3456 [label="return"];
    bb9__0_3456 -> bb17__0_3456 [label=""];
    bb10__0_3456 -> bb11__0_3456 [label="return"];
    bb11__0_3456 -> bb12__0_3456 [label="return"];
    bb12__0_3456 -> bb13__0_3456 [label="0"];
    bb12__0_3456 -> bb14__0_3456 [label="1"];
    bb12__0_3456 -> bb7__0_3456 [label="otherwise"];
    bb13__0_3456 -> bb16__0_3456 [label="return"];
    bb14__0_3456 -> bb15__0_3456 [label="return"];
    bb15__0_3456 -> bb17__0_3456 [label=""];
    bb16__0_3456 -> bb18__0_3456 [label=""];
    bb17__0_3456 -> bb18__0_3456 [label=""];
}
