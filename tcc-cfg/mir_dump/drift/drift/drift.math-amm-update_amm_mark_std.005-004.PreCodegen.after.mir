// MIR for `update_amm_mark_std` after PreCodegen

fn update_amm_mark_std(_1: &mut AMM, _2: i64, _3: u64, _4: u64, _5: u64) -> std::result::Result<bool, error::ErrorCode> {
    debug amm => _1;
    debug now => _2;
    debug price => _3;
    debug ewma => _4;
    debug ewma_5min => _5;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _6: i64;
    let mut _7: i64;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _9: std::result::Result<i64, error::ErrorCode>;
    let mut _10: i64;
    let mut _11: i64;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: i64;
    let mut _18: u64;
    let mut _19: i64;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _21: std::result::Result<i64, error::ErrorCode>;
    let mut _22: i64;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _24: std::result::Result<i64, error::ErrorCode>;
    let mut _25: u64;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: i64;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _33: std::result::Result<i64, error::ErrorCode>;
    let mut _34: u64;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _45: u64;
    let mut _46: i64;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _48: std::result::Result<i64, error::ErrorCode>;
    let mut _49: i64;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _51: std::result::Result<i64, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: i64;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _60: std::result::Result<i64, error::ErrorCode>;
    let mut _61: u64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: u64;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _74: std::result::Result<u64, error::ErrorCode>;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: i64;
    let mut _78: i64;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug since_last => _6;
        let _17: u64;
        let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _30: i64;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: i64;
        let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _44: i64;
        let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _57: i64;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: i64;
        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _71: i64;
        scope 6 {
            debug price_change_abs => _17;
            let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _83: u64;
            scope 31 {
                debug residual => _80;
                scope 32 {
                }
            }
            scope 33 {
                debug val => _83;
                scope 34 {
                }
            }
        }
        scope 7 {
            debug residual => _27;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _30;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _36;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _39;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _41;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _44;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _54;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _57;
            scope 22 {
            }
        }
        scope 23 {
            debug residual => _63;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _66;
            scope 26 {
            }
        }
        scope 27 {
            debug residual => _68;
            scope 28 {
            }
        }
        scope 29 {
            debug val => _71;
            scope 30 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = _2;
        StorageLive(_11);
        _11 = ((*_1).62: i64);
        _9 = <i64 as SafeMath>::safe_sub(move _10, move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _12 = discriminant(_8);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_8 as Continue).0: i64);
        _7 = _16;
        StorageDead(_16);
        _6 = std::cmp::max::<i64>(const 1_i64, move _7) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_8);
        goto -> bb53;
    }

    bb7: {
        StorageDead(_7);
        StorageDead(_8);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _3;
        _24 = <u64 as Cast>::cast::<i64>(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        _23 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: i64);
        _22 = _30;
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _4;
        _33 = <u64 as Cast>::cast::<i64>(move _34) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb51;
    }

    bb13: {
        StorageDead(_34);
        _32 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_33);
        _35 = discriminant(_32);
        switchInt(move _35) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_39);
        _39 = ((_32 as Continue).0: i64);
        _31 = _39;
        StorageDead(_39);
        _21 = <i64 as SafeMath>::safe_sub(move _22, move _31) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_36);
        _36 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb49;
    }

    bb18: {
        StorageDead(_31);
        StorageDead(_22);
        _20 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _21) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_21);
        _40 = discriminant(_20);
        switchInt(move _40) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_44);
        _44 = ((_20 as Continue).0: i64);
        _19 = _44;
        StorageDead(_44);
        _18 = core::num::<impl i64>::unsigned_abs(move _19) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_41);
        _41 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_41);
        goto -> bb49;
    }

    bb23: {
        StorageDead(_19);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _3;
        _51 = <u64 as Cast>::cast::<i64>(move _52) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_52);
        _50 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _51) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_57);
        _57 = ((_50 as Continue).0: i64);
        _49 = _57;
        StorageDead(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _5;
        _60 = <u64 as Cast>::cast::<i64>(move _61) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_54);
        _54 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_18);
        goto -> bb48;
    }

    bb29: {
        StorageDead(_61);
        _59 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _60) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_60);
        _62 = discriminant(_59);
        switchInt(move _62) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_66);
        _66 = ((_59 as Continue).0: i64);
        _58 = _66;
        StorageDead(_66);
        _48 = <i64 as SafeMath>::safe_sub(move _49, move _58) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_63);
        _63 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_58);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb47;
    }

    bb34: {
        StorageDead(_58);
        StorageDead(_49);
        _47 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _48) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_48);
        _67 = discriminant(_47);
        switchInt(move _67) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_71);
        _71 = ((_47 as Continue).0: i64);
        _46 = _71;
        StorageDead(_71);
        _45 = core::num::<impl i64>::unsigned_abs(move _46) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_68);
        _68 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb47;
    }

    bb39: {
        StorageDead(_46);
        _17 = <u64 as Ord>::max(move _18, move _45) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_45);
        StorageDead(_18);
        StorageDead(_59);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_32);
        StorageDead(_23);
        StorageDead(_20);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = ((*_1).60: u64);
        StorageLive(_76);
        _76 = _17;
        StorageLive(_77);
        StorageLive(_78);
        _78 = _6;
        _77 = std::cmp::max::<i64>(const _, move _78) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_78);
        _74 = calculate_rolling_sum(move _75, move _76, move _77, const _) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _74) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_74);
        _79 = discriminant(_73);
        switchInt(move _79) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_83);
        _83 = ((_73 as Continue).0: u64);
        _72 = _83;
        StorageDead(_83);
        ((*_1).60: u64) = move _72;
        StorageDead(_72);
        StorageDead(_73);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_17);
        StorageDead(_6);
        goto -> bb54;
    }

    bb45: {
        StorageLive(_80);
        _80 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_72);
        StorageDead(_73);
        goto -> bb52;
    }

    bb47: {
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_18);
        StorageDead(_59);
        goto -> bb48;
    }

    bb48: {
        StorageDead(_50);
        StorageDead(_47);
        goto -> bb50;
    }

    bb49: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_32);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_23);
        StorageDead(_20);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_17);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_6);
        goto -> bb54;
    }

    bb54: {
        return;
    }
}
