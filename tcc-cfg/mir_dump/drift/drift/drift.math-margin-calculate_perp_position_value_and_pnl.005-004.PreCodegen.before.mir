// MIR for `calculate_perp_position_value_and_pnl` before PreCodegen

fn calculate_perp_position_value_and_pnl(_1: &PerpPosition, _2: &PerpMarket, _3: &OraclePriceData, _4: &StrictOraclePrice, _5: math::margin::MarginRequirementType, _6: u32, _7: bool, _8: bool) -> std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> {
    debug market_position => _1;
    debug market => _2;
    debug oracle_price_data => _3;
    debug strict_quote_price => _4;
    debug margin_requirement_type => _5;
    debug user_custom_margin_ratio => _6;
    debug user_high_leverage_mode => _7;
    debug track_open_order_fraction => _8;
    let mut _0: std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode>;
    let _9: i64;
    let mut _10: bool;
    let mut _11: &state::perp_market::MarketStatus;
    let mut _12: &state::perp_market::MarketStatus;
    let _13: state::perp_market::MarketStatus;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _16: std::result::Result<i64, error::ErrorCode>;
    let mut _17: i128;
    let mut _18: bool;
    let mut _19: i64;
    let mut _20: &state::user::PerpPosition;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: (u128, i128);
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128)>;
    let mut _30: std::result::Result<(u128, i128), error::ErrorCode>;
    let mut _31: &state::user::PerpPosition;
    let _32: &&state::user::PerpPosition;
    let mut _33: i64;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _41: std::result::Result<i128, error::ErrorCode>;
    let mut _42: i128;
    let mut _43: i128;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _45: std::result::Result<i128, error::ErrorCode>;
    let mut _46: i64;
    let mut _47: isize;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: (i128, u128);
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, u128)>;
    let mut _61: std::result::Result<(i128, u128), error::ErrorCode>;
    let mut _62: &state::user::PerpPosition;
    let mut _63: i64;
    let mut _64: state::perp_market::ContractType;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _71: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _72: std::result::Result<u128, error::ErrorCode>;
    let mut _73: u128;
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _75: std::result::Result<u128, error::ErrorCode>;
    let mut _76: u128;
    let mut _77: u128;
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _79: std::result::Result<u128, error::ErrorCode>;
    let mut _80: i64;
    let mut _81: &state::oracle::StrictOraclePrice;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: bool;
    let mut _99: &state::perp_market::MarketStatus;
    let mut _100: &state::perp_market::MarketStatus;
    let _101: state::perp_market::MarketStatus;
    let mut _103: u32;
    let mut _104: u32;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _106: std::result::Result<u32, error::ErrorCode>;
    let mut _107: &state::perp_market::PerpMarket;
    let mut _108: u128;
    let mut _109: i128;
    let mut _110: math::margin::MarginRequirementType;
    let mut _111: bool;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _118: std::result::Result<u128, error::ErrorCode>;
    let mut _119: u128;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _121: std::result::Result<u128, error::ErrorCode>;
    let mut _122: u128;
    let mut _123: u128;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _125: std::result::Result<u128, error::ErrorCode>;
    let mut _126: u32;
    let mut _127: isize;
    let mut _129: !;
    let mut _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: u128;
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _144: std::result::Result<u128, error::ErrorCode>;
    let mut _145: u128;
    let mut _146: u128;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _148: std::result::Result<u128, error::ErrorCode>;
    let mut _149: &state::user::PerpPosition;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _155: isize;
    let mut _157: !;
    let mut _158: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _162: std::result::Result<u32, error::ErrorCode>;
    let mut _163: &state::perp_market::PerpMarket;
    let mut _164: i128;
    let mut _165: math::margin::MarginRequirementType;
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _172: bool;
    let mut _173: i128;
    let mut _174: &state::oracle::StrictOraclePrice;
    let mut _175: bool;
    let mut _176: i128;
    let mut _177: &state::oracle::StrictOraclePrice;
    let _179: ();
    let mut _180: bool;
    let mut _181: u32;
    let mut _182: i128;
    let mut _183: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _184: std::result::Result<i128, error::ErrorCode>;
    let mut _185: i128;
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _187: std::result::Result<i128, error::ErrorCode>;
    let mut _188: i128;
    let mut _189: i128;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _191: std::result::Result<i128, error::ErrorCode>;
    let mut _192: u32;
    let mut _193: isize;
    let mut _195: !;
    let mut _196: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _198: isize;
    let mut _200: !;
    let mut _201: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _203: i128;
    let mut _204: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _205: std::result::Result<i128, error::ErrorCode>;
    let mut _206: isize;
    let mut _208: !;
    let mut _209: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _216: ();
    let mut _217: bool;
    let mut _218: i64;
    let mut _219: i128;
    let mut _220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _221: std::result::Result<i128, error::ErrorCode>;
    let mut _222: i128;
    let mut _223: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _224: std::result::Result<i128, error::ErrorCode>;
    let mut _225: i128;
    let mut _226: i128;
    let mut _227: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _228: std::result::Result<i128, error::ErrorCode>;
    let mut _229: i64;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _235: isize;
    let mut _237: !;
    let mut _238: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _240: isize;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _245: ();
    let mut _246: bool;
    let mut _247: &math::margin::MarginRequirementType;
    let mut _248: &math::margin::MarginRequirementType;
    let _249: math::margin::MarginRequirementType;
    let mut _250: i128;
    let mut _251: i128;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: i128;
    let mut _257: i128;
    let mut _258: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _259: std::result::Result<u128, error::ErrorCode>;
    let mut _260: u128;
    let mut _261: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _262: std::result::Result<u128, error::ErrorCode>;
    let mut _263: u128;
    let mut _264: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _265: std::result::Result<u128, error::ErrorCode>;
    let mut _266: u128;
    let mut _267: u128;
    let mut _268: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _269: std::result::Result<u128, error::ErrorCode>;
    let mut _270: u64;
    let mut _271: i64;
    let mut _272: isize;
    let mut _274: !;
    let mut _275: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _282: u128;
    let mut _283: isize;
    let mut _285: !;
    let mut _286: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _288: u128;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _294: (u128, i128, u128, u128, u128);
    let mut _295: u128;
    let mut _296: i128;
    let mut _297: u128;
    let mut _298: u128;
    let mut _299: u128;
    let mut _302: &state::perp_market::MarketStatus;
    let mut _303: &state::user::PerpPosition;
    scope 1 {
        debug valuation_price => _9;
        let _14: i64;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: i64;
        scope 2 {
            debug unrealized_funding => _14;
            let _26: u128;
            let _27: i128;
            let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _38: (u128, i128);
            scope 7 {
                debug base_asset_value => _26;
                debug unrealized_pnl => _27;
                let _39: i128;
                let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _51: i128;
                let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _56: i128;
                scope 12 {
                    debug total_unrealized_pnl => _39;
                    let _57: i128;
                    let _58: u128;
                    let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _69: (i128, u128);
                    scope 21 {
                        debug worst_case_base_asset_amount => _57;
                        debug worse_case_liability_value => _58;
                        let _70: u128;
                        let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _86: u128;
                        let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _91: u128;
                        let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _96: u128;
                        scope 26 {
                            debug worse_case_liability_value => _70;
                            let mut _97: u128;
                            let _102: u32;
                            let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _116: u32;
                            let mut _301: &state::perp_market::MarketStatus;
                            scope 39 {
                                debug margin_requirement => _97;
                                let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _154: u128;
                                let _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _159: u128;
                                let _160: u32;
                                let _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _170: u32;
                                scope 57 {
                                    debug residual => _151;
                                    scope 58 {
                                    }
                                }
                                scope 59 {
                                    debug val => _154;
                                    scope 60 {
                                    }
                                }
                                scope 61 {
                                    debug residual => _156;
                                    scope 62 {
                                    }
                                }
                                scope 63 {
                                    debug val => _159;
                                    scope 64 {
                                    }
                                }
                                scope 65 {
                                    debug unrealized_asset_weight => _160;
                                    let _171: i64;
                                    scope 70 {
                                        debug quote_price => _171;
                                        let mut _178: i128;
                                        scope 71 {
                                            debug weighted_unrealized_pnl => _178;
                                            let _194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _197: i128;
                                            let _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _202: i128;
                                            let _207: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _210: i128;
                                            let _212: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _215: i128;
                                            let _231: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _234: i128;
                                            let _236: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _239: i128;
                                            let _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _244: i128;
                                            let _252: u128;
                                            let _256: u128;
                                            let mut _300: &math::margin::MarginRequirementType;
                                            scope 72 {
                                                debug residual => _194;
                                                scope 73 {
                                                }
                                            }
                                            scope 74 {
                                                debug val => _197;
                                                scope 75 {
                                                }
                                            }
                                            scope 76 {
                                                debug residual => _199;
                                                scope 77 {
                                                }
                                            }
                                            scope 78 {
                                                debug val => _202;
                                                scope 79 {
                                                }
                                            }
                                            scope 80 {
                                                debug residual => _207;
                                                scope 81 {
                                                }
                                            }
                                            scope 82 {
                                                debug val => _210;
                                                scope 83 {
                                                }
                                            }
                                            scope 84 {
                                                debug residual => _212;
                                                scope 85 {
                                                }
                                            }
                                            scope 86 {
                                                debug val => _215;
                                                scope 87 {
                                                }
                                            }
                                            scope 88 {
                                                debug residual => _231;
                                                scope 89 {
                                                }
                                            }
                                            scope 90 {
                                                debug val => _234;
                                                scope 91 {
                                                }
                                            }
                                            scope 92 {
                                                debug residual => _236;
                                                scope 93 {
                                                }
                                            }
                                            scope 94 {
                                                debug val => _239;
                                                scope 95 {
                                                }
                                            }
                                            scope 96 {
                                                debug residual => _241;
                                                scope 97 {
                                                }
                                            }
                                            scope 98 {
                                                debug val => _244;
                                                scope 99 {
                                                }
                                            }
                                            scope 100 {
                                                debug open_order_margin_requirement => _252;
                                            }
                                            scope 101 {
                                                debug worst_case_base_asset_amount => _256;
                                                let _273: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _276: u128;
                                                let _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _281: u128;
                                                let _284: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _287: u128;
                                                let _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _293: u128;
                                                scope 102 {
                                                    debug residual => _273;
                                                    scope 103 {
                                                    }
                                                }
                                                scope 104 {
                                                    debug val => _276;
                                                    scope 105 {
                                                    }
                                                }
                                                scope 106 {
                                                    debug residual => _278;
                                                    scope 107 {
                                                    }
                                                }
                                                scope 108 {
                                                    debug val => _281;
                                                    scope 109 {
                                                    }
                                                }
                                                scope 110 {
                                                    debug residual => _284;
                                                    scope 111 {
                                                    }
                                                }
                                                scope 112 {
                                                    debug val => _287;
                                                    scope 113 {
                                                    }
                                                }
                                                scope 114 {
                                                    debug residual => _290;
                                                    scope 115 {
                                                    }
                                                }
                                                scope 116 {
                                                    debug val => _293;
                                                    scope 117 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                scope 66 {
                                    debug residual => _167;
                                    scope 67 {
                                    }
                                }
                                scope 68 {
                                    debug val => _170;
                                    scope 69 {
                                    }
                                }
                            }
                            scope 40 {
                                debug margin_ratio => _102;
                                let _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _131: u128;
                                let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _136: u128;
                                let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _141: u128;
                                scope 45 {
                                    debug residual => _128;
                                    scope 46 {
                                    }
                                }
                                scope 47 {
                                    debug val => _131;
                                    scope 48 {
                                    }
                                }
                                scope 49 {
                                    debug residual => _133;
                                    scope 50 {
                                    }
                                }
                                scope 51 {
                                    debug val => _136;
                                    scope 52 {
                                    }
                                }
                                scope 53 {
                                    debug residual => _138;
                                    scope 54 {
                                    }
                                }
                                scope 55 {
                                    debug val => _141;
                                    scope 56 {
                                    }
                                }
                            }
                            scope 41 {
                                debug residual => _113;
                                scope 42 {
                                }
                            }
                            scope 43 {
                                debug val => _116;
                                scope 44 {
                                }
                            }
                        }
                        scope 27 {
                            debug residual => _83;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _86;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug residual => _88;
                            scope 32 {
                            }
                        }
                        scope 33 {
                            debug val => _91;
                            scope 34 {
                            }
                        }
                        scope 35 {
                            debug residual => _93;
                            scope 36 {
                            }
                        }
                        scope 37 {
                            debug val => _96;
                            scope 38 {
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _66;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _69;
                        scope 25 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _48;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _51;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug residual => _53;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _56;
                    scope 20 {
                    }
                }
            }
            scope 8 {
                debug residual => _35;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _38;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _22;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _25;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_2).22: state::perp_market::MarketStatus);
        StorageLive(_12);
        _302 = const _;
        _12 = &(*_302);
        _10 = <state::perp_market::MarketStatus as PartialEq>::eq(move _11, move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = ((*_2).7: i64);
        goto -> bb4;
    }

    bb3: {
        StorageDead(_12);
        StorageDead(_11);
        _9 = ((*_3).0: i64);
        goto -> bb4;
    }

    bb4: {
        StorageDead(_10);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).1: i64);
        _18 = Gt(move _19, const 0_i64);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_19);
        _17 = (((*_2).1: state::perp_market::AMM).34: i128);
        goto -> bb7;
    }

    bb6: {
        StorageDead(_19);
        _17 = (((*_2).1: state::perp_market::AMM).35: i128);
        goto -> bb7;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_20);
        _20 = &(*_1);
        _16 = calculate_funding_payment(move _17, move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_17);
        _15 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_16);
        _21 = discriminant(_15);
        switchInt(move _21) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_25);
        _25 = ((_15 as Continue).0: i64);
        _14 = _25;
        StorageDead(_25);
        StorageDead(_15);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &_1;
        _303 = deref_copy (*_32);
        _31 = &(*_303);
        StorageLive(_33);
        _33 = _9;
        _30 = calculate_base_asset_value_and_pnl_with_oracle_price(move _31, move _33) -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_22);
        _22 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_15);
        goto -> bb192;
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_31);
        _29 = <std::result::Result<(u128, i128), error::ErrorCode> as Try>::branch(move _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_30);
        _34 = discriminant(_29);
        switchInt(move _34) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_38);
        _38 = ((_29 as Continue).0: (u128, i128));
        _28 = _38;
        StorageDead(_38);
        StorageLive(_26);
        _26 = (_28.0: u128);
        StorageLive(_27);
        _27 = (_28.1: i128);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _27;
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = _14;
        _45 = <i64 as Cast>::cast::<i128>(move _46) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_35);
        _35 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_32);
        StorageDead(_29);
        StorageDead(_28);
        goto -> bb192;
    }

    bb19: {
        StorageDead(_46);
        _44 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_45);
        _47 = discriminant(_44);
        switchInt(move _47) -> [0: bb21, 1: bb22, otherwise: bb11];
    }

    bb21: {
        StorageLive(_51);
        _51 = ((_44 as Continue).0: i128);
        _43 = _51;
        StorageDead(_51);
        _41 = <i128 as SafeMath>::safe_add(move _42, move _43) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_48);
        _48 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb190;
    }

    bb24: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _41) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_41);
        _52 = discriminant(_40);
        switchInt(move _52) -> [0: bb26, 1: bb27, otherwise: bb11];
    }

    bb26: {
        StorageLive(_56);
        _56 = ((_40 as Continue).0: i128);
        _39 = _56;
        StorageDead(_56);
        StorageDead(_44);
        StorageDead(_40);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &(*_1);
        StorageLive(_63);
        _63 = ((*_3).0: i64);
        StorageLive(_64);
        _64 = ((*_2).23: state::perp_market::ContractType);
        _61 = PerpPosition::worst_case_liability_value(move _62, move _63, move _64) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_53);
        _53 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb190;
    }

    bb29: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<(i128, u128), error::ErrorCode> as Try>::branch(move _61) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_61);
        _65 = discriminant(_60);
        switchInt(move _65) -> [0: bb31, 1: bb32, otherwise: bb11];
    }

    bb31: {
        StorageLive(_69);
        _69 = ((_60 as Continue).0: (i128, u128));
        _59 = _69;
        StorageDead(_69);
        StorageLive(_57);
        _57 = (_59.0: i128);
        StorageLive(_58);
        _58 = (_59.1: u128);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _58;
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_4);
        _80 = StrictOraclePrice::max(move _81) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_66);
        _66 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb191;
    }

    bb34: {
        StorageDead(_81);
        _79 = <i64 as Cast>::cast::<u128>(move _80) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_80);
        _78 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _79) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_79);
        _82 = discriminant(_78);
        switchInt(move _82) -> [0: bb37, 1: bb38, otherwise: bb11];
    }

    bb37: {
        StorageLive(_86);
        _86 = ((_78 as Continue).0: u128);
        _77 = _86;
        StorageDead(_86);
        _75 = <u128 as SafeMath>::safe_mul(move _76, move _77) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_83);
        _83 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb187;
    }

    bb40: {
        StorageDead(_77);
        StorageDead(_76);
        _74 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _75) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_75);
        _87 = discriminant(_74);
        switchInt(move _87) -> [0: bb42, 1: bb43, otherwise: bb11];
    }

    bb42: {
        StorageLive(_91);
        _91 = ((_74 as Continue).0: u128);
        _73 = _91;
        StorageDead(_91);
        _72 = <u128 as SafeMath>::safe_div(move _73, const _) -> [return: bb45, unwind continue];
    }

    bb43: {
        StorageLive(_88);
        _88 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_90);
        StorageDead(_88);
        goto -> bb187;
    }

    bb45: {
        StorageDead(_73);
        _71 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _72) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_72);
        _92 = discriminant(_71);
        switchInt(move _92) -> [0: bb47, 1: bb48, otherwise: bb11];
    }

    bb47: {
        StorageLive(_96);
        _96 = ((_71 as Continue).0: u128);
        _70 = _96;
        StorageDead(_96);
        StorageDead(_78);
        StorageDead(_74);
        StorageDead(_71);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &((*_2).22: state::perp_market::MarketStatus);
        StorageLive(_100);
        _301 = const _;
        _100 = &(*_301);
        _98 = <state::perp_market::MarketStatus as PartialEq>::eq(move _99, move _100) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_93);
        _93 = ((_71 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_95);
        StorageDead(_93);
        goto -> bb188;
    }

    bb50: {
        switchInt(move _98) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        StorageDead(_100);
        StorageDead(_99);
        _97 = const 0_u128;
        goto -> bb75;
    }

    bb52: {
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _6;
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &(*_2);
        StorageLive(_108);
        StorageLive(_109);
        _109 = _57;
        _108 = core::num::<impl i128>::unsigned_abs(move _109) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_109);
        StorageLive(_110);
        _110 = _5;
        StorageLive(_111);
        _111 = _7;
        _106 = PerpMarket::get_margin_ratio(move _107, move _108, move _110, move _111) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_107);
        _105 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _106) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_106);
        _112 = discriminant(_105);
        switchInt(move _112) -> [0: bb56, 1: bb57, otherwise: bb11];
    }

    bb56: {
        StorageLive(_116);
        _116 = ((_105 as Continue).0: u32);
        _104 = _116;
        StorageDead(_116);
        _102 = <u32 as Ord>::max(move _103, move _104) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_113);
        _113 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_105);
        StorageDead(_102);
        goto -> bb185;
    }

    bb59: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_105);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = _70;
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _102;
        _125 = <u32 as Cast>::cast::<u128>(move _126) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_126);
        _124 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _125) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_125);
        _127 = discriminant(_124);
        switchInt(move _127) -> [0: bb62, 1: bb63, otherwise: bb11];
    }

    bb62: {
        StorageLive(_131);
        _131 = ((_124 as Continue).0: u128);
        _123 = _131;
        StorageDead(_131);
        _121 = <u128 as SafeMath>::safe_mul(move _122, move _123) -> [return: bb65, unwind continue];
    }

    bb63: {
        StorageLive(_128);
        _128 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_130);
        _130 = _128;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _130) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb183;
    }

    bb65: {
        StorageDead(_123);
        StorageDead(_122);
        _120 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _121) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_121);
        _132 = discriminant(_120);
        switchInt(move _132) -> [0: bb67, 1: bb68, otherwise: bb11];
    }

    bb67: {
        StorageLive(_136);
        _136 = ((_120 as Continue).0: u128);
        _119 = _136;
        StorageDead(_136);
        _118 = <u128 as SafeMath>::safe_div(move _119, const _) -> [return: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_133);
        _133 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_135);
        StorageDead(_133);
        goto -> bb183;
    }

    bb70: {
        StorageDead(_119);
        _117 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _118) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_118);
        _137 = discriminant(_117);
        switchInt(move _137) -> [0: bb72, 1: bb73, otherwise: bb11];
    }

    bb72: {
        StorageLive(_141);
        _141 = ((_117 as Continue).0: u128);
        _97 = _141;
        StorageDead(_141);
        StorageDead(_102);
        StorageDead(_124);
        StorageDead(_120);
        StorageDead(_117);
        goto -> bb75;
    }

    bb73: {
        StorageLive(_138);
        _138 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_140);
        StorageDead(_138);
        goto -> bb184;
    }

    bb75: {
        StorageDead(_98);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = _97;
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &(*_1);
        _148 = PerpPosition::margin_requirement_for_open_orders(move _149) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_149);
        _147 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _148) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_148);
        _150 = discriminant(_147);
        switchInt(move _150) -> [0: bb78, 1: bb79, otherwise: bb11];
    }

    bb78: {
        StorageLive(_154);
        _154 = ((_147 as Continue).0: u128);
        _146 = _154;
        StorageDead(_154);
        _144 = <u128 as SafeMath>::safe_add(move _145, move _146) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_151);
        _151 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_153);
        StorageDead(_151);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb182;
    }

    bb81: {
        StorageDead(_146);
        StorageDead(_145);
        _143 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _144) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_144);
        _155 = discriminant(_143);
        switchInt(move _155) -> [0: bb83, 1: bb84, otherwise: bb11];
    }

    bb83: {
        StorageLive(_159);
        _159 = ((_143 as Continue).0: u128);
        _142 = _159;
        StorageDead(_159);
        _97 = move _142;
        StorageDead(_142);
        StorageDead(_147);
        StorageDead(_143);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &(*_2);
        StorageLive(_164);
        _164 = _39;
        StorageLive(_165);
        _165 = _5;
        _162 = PerpMarket::get_unrealized_asset_weight(move _163, move _164, move _165) -> [return: bb86, unwind continue];
    }

    bb84: {
        StorageLive(_156);
        _156 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_158);
        _158 = _156;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _158) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_158);
        StorageDead(_156);
        goto -> bb182;
    }

    bb86: {
        StorageDead(_165);
        StorageDead(_164);
        StorageDead(_163);
        _161 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _162) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_162);
        _166 = discriminant(_161);
        switchInt(move _166) -> [0: bb88, 1: bb89, otherwise: bb11];
    }

    bb88: {
        StorageLive(_170);
        _170 = ((_161 as Continue).0: u32);
        _160 = _170;
        StorageDead(_170);
        StorageDead(_161);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _39;
        _172 = Gt(move _173, const 0_i128);
        switchInt(move _172) -> [0: bb92, otherwise: bb91];
    }

    bb89: {
        StorageLive(_167);
        _167 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_169);
        _169 = _167;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _169) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_169);
        StorageDead(_167);
        StorageDead(_161);
        goto -> bb181;
    }

    bb91: {
        StorageDead(_173);
        StorageLive(_174);
        _174 = &(*_4);
        _171 = StrictOraclePrice::min(move _174) -> [return: bb93, unwind continue];
    }

    bb92: {
        StorageDead(_173);
        StorageLive(_175);
        StorageLive(_176);
        _176 = _39;
        _175 = Lt(move _176, const 0_i128);
        switchInt(move _175) -> [0: bb95, otherwise: bb94];
    }

    bb93: {
        StorageDead(_174);
        goto -> bb98;
    }

    bb94: {
        StorageDead(_176);
        StorageLive(_177);
        _177 = &(*_4);
        _171 = StrictOraclePrice::max(move _177) -> [return: bb96, unwind continue];
    }

    bb95: {
        StorageDead(_176);
        _171 = ((*_4).0: i64);
        goto -> bb97;
    }

    bb96: {
        StorageDead(_177);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_175);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_172);
        StorageLive(_178);
        _178 = _39;
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = _160;
        _180 = Ne(move _181, const _);
        switchInt(move _180) -> [0: bb120, otherwise: bb99];
    }

    bb99: {
        StorageDead(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = _178;
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = _160;
        _191 = <u32 as Cast>::cast::<i128>(move _192) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_192);
        _190 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _191) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_191);
        _193 = discriminant(_190);
        switchInt(move _193) -> [0: bb102, 1: bb103, otherwise: bb11];
    }

    bb102: {
        StorageLive(_197);
        _197 = ((_190 as Continue).0: i128);
        _189 = _197;
        StorageDead(_197);
        _187 = <i128 as SafeMath>::safe_mul(move _188, move _189) -> [return: bb105, unwind continue];
    }

    bb103: {
        StorageLive(_194);
        _194 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_196);
        _196 = _194;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _196) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_189);
        StorageDead(_188);
        StorageDead(_187);
        goto -> bb178;
    }

    bb105: {
        StorageDead(_189);
        StorageDead(_188);
        _186 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _187) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_187);
        _198 = discriminant(_186);
        switchInt(move _198) -> [0: bb107, 1: bb108, otherwise: bb11];
    }

    bb107: {
        StorageLive(_202);
        _202 = ((_186 as Continue).0: i128);
        _185 = _202;
        StorageDead(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = <u32 as Cast>::cast::<i128>(const _) -> [return: bb110, unwind continue];
    }

    bb108: {
        StorageLive(_199);
        _199 = ((_186 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_201);
        _201 = _199;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _201) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_201);
        StorageDead(_199);
        goto -> bb178;
    }

    bb110: {
        _204 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _205) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_205);
        _206 = discriminant(_204);
        switchInt(move _206) -> [0: bb112, 1: bb113, otherwise: bb11];
    }

    bb112: {
        StorageLive(_210);
        _210 = ((_204 as Continue).0: i128);
        _203 = _210;
        StorageDead(_210);
        _184 = <i128 as SafeMath>::safe_div(move _185, move _203) -> [return: bb115, unwind continue];
    }

    bb113: {
        StorageLive(_207);
        _207 = ((_204 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_209);
        _209 = _207;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _209) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_203);
        StorageDead(_185);
        StorageDead(_184);
        goto -> bb177;
    }

    bb115: {
        StorageDead(_203);
        StorageDead(_185);
        _183 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _184) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_184);
        _211 = discriminant(_183);
        switchInt(move _211) -> [0: bb117, 1: bb118, otherwise: bb11];
    }

    bb117: {
        StorageLive(_215);
        _215 = ((_183 as Continue).0: i128);
        _182 = _215;
        StorageDead(_215);
        _178 = move _182;
        StorageDead(_182);
        StorageDead(_204);
        StorageDead(_190);
        StorageDead(_186);
        StorageDead(_183);
        _179 = const ();
        goto -> bb121;
    }

    bb118: {
        StorageLive(_212);
        _212 = ((_183 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_214);
        _214 = _212;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _214) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_214);
        StorageDead(_212);
        goto -> bb177;
    }

    bb120: {
        StorageDead(_181);
        _179 = const ();
        goto -> bb121;
    }

    bb121: {
        StorageDead(_180);
        StorageDead(_179);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = _171;
        _217 = Ne(move _218, const _);
        switchInt(move _217) -> [0: bb138, otherwise: bb122];
    }

    bb122: {
        StorageDead(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _225 = _178;
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = _171;
        _228 = <i64 as Cast>::cast::<i128>(move _229) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_229);
        _227 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _228) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_228);
        _230 = discriminant(_227);
        switchInt(move _230) -> [0: bb125, 1: bb126, otherwise: bb11];
    }

    bb125: {
        StorageLive(_234);
        _234 = ((_227 as Continue).0: i128);
        _226 = _234;
        StorageDead(_234);
        _224 = <i128 as SafeMath>::safe_mul(move _225, move _226) -> [return: bb128, unwind continue];
    }

    bb126: {
        StorageLive(_231);
        _231 = ((_227 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_233);
        _233 = _231;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _233) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        goto -> bb175;
    }

    bb128: {
        StorageDead(_226);
        StorageDead(_225);
        _223 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _224) -> [return: bb129, unwind continue];
    }

    bb129: {
        StorageDead(_224);
        _235 = discriminant(_223);
        switchInt(move _235) -> [0: bb130, 1: bb131, otherwise: bb11];
    }

    bb130: {
        StorageLive(_239);
        _239 = ((_223 as Continue).0: i128);
        _222 = _239;
        StorageDead(_239);
        _221 = <i128 as SafeMath>::safe_div(move _222, const _) -> [return: bb133, unwind continue];
    }

    bb131: {
        StorageLive(_236);
        _236 = ((_223 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_238);
        _238 = _236;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _238) -> [return: bb132, unwind continue];
    }

    bb132: {
        StorageDead(_238);
        StorageDead(_236);
        goto -> bb175;
    }

    bb133: {
        StorageDead(_222);
        _220 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _221) -> [return: bb134, unwind continue];
    }

    bb134: {
        StorageDead(_221);
        _240 = discriminant(_220);
        switchInt(move _240) -> [0: bb135, 1: bb136, otherwise: bb11];
    }

    bb135: {
        StorageLive(_244);
        _244 = ((_220 as Continue).0: i128);
        _219 = _244;
        StorageDead(_244);
        _178 = move _219;
        StorageDead(_219);
        StorageDead(_227);
        StorageDead(_223);
        StorageDead(_220);
        _216 = const ();
        goto -> bb139;
    }

    bb136: {
        StorageLive(_241);
        _241 = ((_220 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_243);
        _243 = _241;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _243) -> [return: bb137, unwind continue];
    }

    bb137: {
        StorageDead(_243);
        StorageDead(_241);
        goto -> bb176;
    }

    bb138: {
        StorageDead(_218);
        _216 = const ();
        goto -> bb139;
    }

    bb139: {
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_5;
        StorageLive(_248);
        _300 = const _;
        _248 = &(*_300);
        _246 = <math::margin::MarginRequirementType as PartialEq>::eq(move _247, move _248) -> [return: bb140, unwind continue];
    }

    bb140: {
        switchInt(move _246) -> [0: bb143, otherwise: bb141];
    }

    bb141: {
        StorageDead(_248);
        StorageDead(_247);
        StorageLive(_250);
        StorageLive(_251);
        _251 = _178;
        _250 = <i128 as Ord>::min(move _251, const _) -> [return: bb142, unwind continue];
    }

    bb142: {
        StorageDead(_251);
        _178 = move _250;
        StorageDead(_250);
        _245 = const ();
        goto -> bb144;
    }

    bb143: {
        StorageDead(_248);
        StorageDead(_247);
        _245 = const ();
        goto -> bb144;
    }

    bb144: {
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_252);
        StorageLive(_253);
        _253 = _8;
        switchInt(move _253) -> [0: bb170, otherwise: bb145];
    }

    bb145: {
        StorageLive(_254);
        StorageLive(_255);
        _255 = _57;
        _254 = Ne(move _255, const 0_i128);
        switchInt(move _254) -> [0: bb169, otherwise: bb146];
    }

    bb146: {
        StorageDead(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = _57;
        _256 = core::num::<impl i128>::unsigned_abs(move _257) -> [return: bb147, unwind continue];
    }

    bb147: {
        StorageDead(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = _256;
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _271 = ((*_1).1: i64);
        _270 = core::num::<impl i64>::unsigned_abs(move _271) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_271);
        _269 = <u64 as Cast>::cast::<u128>(move _270) -> [return: bb149, unwind continue];
    }

    bb149: {
        StorageDead(_270);
        _268 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _269) -> [return: bb150, unwind continue];
    }

    bb150: {
        StorageDead(_269);
        _272 = discriminant(_268);
        switchInt(move _272) -> [0: bb151, 1: bb152, otherwise: bb11];
    }

    bb151: {
        StorageLive(_276);
        _276 = ((_268 as Continue).0: u128);
        _267 = _276;
        StorageDead(_276);
        _265 = <u128 as SafeMath>::safe_sub(move _266, move _267) -> [return: bb154, unwind continue];
    }

    bb152: {
        StorageLive(_273);
        _273 = ((_268 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_275);
        _275 = _273;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _275) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_275);
        StorageDead(_273);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb172;
    }

    bb154: {
        StorageDead(_267);
        StorageDead(_266);
        _264 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _265) -> [return: bb155, unwind continue];
    }

    bb155: {
        StorageDead(_265);
        _277 = discriminant(_264);
        switchInt(move _277) -> [0: bb156, 1: bb157, otherwise: bb11];
    }

    bb156: {
        StorageLive(_281);
        _281 = ((_264 as Continue).0: u128);
        _263 = _281;
        StorageDead(_281);
        StorageLive(_282);
        _282 = _97;
        _262 = <u128 as SafeMath>::safe_mul(move _263, move _282) -> [return: bb159, unwind continue];
    }

    bb157: {
        StorageLive(_278);
        _278 = ((_264 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_280);
        _280 = _278;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _280) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_280);
        StorageDead(_278);
        goto -> bb172;
    }

    bb159: {
        StorageDead(_282);
        StorageDead(_263);
        _261 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _262) -> [return: bb160, unwind continue];
    }

    bb160: {
        StorageDead(_262);
        _283 = discriminant(_261);
        switchInt(move _283) -> [0: bb161, 1: bb162, otherwise: bb11];
    }

    bb161: {
        StorageLive(_287);
        _287 = ((_261 as Continue).0: u128);
        _260 = _287;
        StorageDead(_287);
        StorageLive(_288);
        _288 = _256;
        _259 = <u128 as SafeMath>::safe_div(move _260, move _288) -> [return: bb164, unwind continue];
    }

    bb162: {
        StorageLive(_284);
        _284 = ((_261 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_286);
        _286 = _284;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _286) -> [return: bb163, unwind continue];
    }

    bb163: {
        StorageDead(_286);
        StorageDead(_284);
        goto -> bb173;
    }

    bb164: {
        StorageDead(_288);
        StorageDead(_260);
        _258 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _259) -> [return: bb165, unwind continue];
    }

    bb165: {
        StorageDead(_259);
        _289 = discriminant(_258);
        switchInt(move _289) -> [0: bb166, 1: bb167, otherwise: bb11];
    }

    bb166: {
        StorageLive(_293);
        _293 = ((_258 as Continue).0: u128);
        _252 = _293;
        StorageDead(_293);
        StorageDead(_256);
        StorageDead(_268);
        StorageDead(_264);
        StorageDead(_261);
        StorageDead(_258);
        goto -> bb171;
    }

    bb167: {
        StorageLive(_290);
        _290 = ((_258 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_292);
        _292 = _290;
        _0 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _292) -> [return: bb168, unwind continue];
    }

    bb168: {
        StorageDead(_292);
        StorageDead(_290);
        goto -> bb174;
    }

    bb169: {
        StorageDead(_255);
        goto -> bb170;
    }

    bb170: {
        _252 = const 0_u128;
        goto -> bb171;
    }

    bb171: {
        StorageDead(_254);
        StorageDead(_253);
        StorageLive(_294);
        StorageLive(_295);
        _295 = _97;
        StorageLive(_296);
        _296 = _178;
        StorageLive(_297);
        _297 = _70;
        StorageLive(_298);
        _298 = _252;
        StorageLive(_299);
        _299 = _26;
        _294 = (move _295, move _296, move _297, move _298, move _299);
        StorageDead(_299);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_295);
        _0 = std::result::Result::<(u128, i128, u128, u128, u128), error::ErrorCode>::Ok(move _294);
        StorageDead(_294);
        StorageDead(_252);
        StorageDead(_178);
        StorageDead(_171);
        StorageDead(_160);
        StorageDead(_97);
        StorageDead(_70);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_39);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_14);
        StorageDead(_9);
        goto -> bb193;
    }

    bb172: {
        StorageDead(_263);
        StorageDead(_262);
        goto -> bb173;
    }

    bb173: {
        StorageDead(_260);
        StorageDead(_259);
        goto -> bb174;
    }

    bb174: {
        StorageDead(_256);
        StorageDead(_268);
        StorageDead(_264);
        StorageDead(_261);
        StorageDead(_258);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb180;
    }

    bb175: {
        StorageDead(_222);
        StorageDead(_221);
        goto -> bb176;
    }

    bb176: {
        StorageDead(_219);
        StorageDead(_227);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb180;
    }

    bb177: {
        StorageDead(_182);
        StorageDead(_204);
        goto -> bb179;
    }

    bb178: {
        StorageDead(_185);
        StorageDead(_184);
        StorageDead(_182);
        goto -> bb179;
    }

    bb179: {
        StorageDead(_190);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb180;
    }

    bb180: {
        StorageDead(_178);
        StorageDead(_171);
        goto -> bb181;
    }

    bb181: {
        StorageDead(_160);
        goto -> bb186;
    }

    bb182: {
        StorageDead(_142);
        StorageDead(_147);
        StorageDead(_143);
        goto -> bb186;
    }

    bb183: {
        StorageDead(_119);
        StorageDead(_118);
        goto -> bb184;
    }

    bb184: {
        StorageDead(_102);
        StorageDead(_124);
        StorageDead(_120);
        StorageDead(_117);
        goto -> bb185;
    }

    bb185: {
        StorageDead(_98);
        goto -> bb186;
    }

    bb186: {
        StorageDead(_97);
        goto -> bb189;
    }

    bb187: {
        StorageDead(_73);
        StorageDead(_72);
        goto -> bb188;
    }

    bb188: {
        StorageDead(_78);
        StorageDead(_74);
        StorageDead(_71);
        goto -> bb189;
    }

    bb189: {
        StorageDead(_70);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb191;
    }

    bb190: {
        StorageDead(_44);
        StorageDead(_40);
        goto -> bb191;
    }

    bb191: {
        StorageDead(_39);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb192;
    }

    bb192: {
        StorageDead(_14);
        StorageDead(_9);
        goto -> bb193;
    }

    bb193: {
        return;
    }
}
