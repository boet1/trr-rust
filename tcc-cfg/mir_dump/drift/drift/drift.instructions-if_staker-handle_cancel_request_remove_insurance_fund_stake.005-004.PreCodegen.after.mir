// MIR for `if_staker::handle_cancel_request_remove_insurance_fund_stake` after PreCodegen

fn if_staker::handle_cancel_request_remove_insurance_fund_stake(_1: anchor_lang::context::Context<'_, '_, '_, '_, if_staker::RequestRemoveInsuranceFundStake<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: anchor_lang::prelude::Clock;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _5: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _10: anchor_lang::prelude::Clock;
    let mut _13: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>>;
    let mut _15: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, error::ErrorCode>;
    let mut _16: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _17: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _18: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _27: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _28: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _29: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _30: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _39: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _40: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _41: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _42: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: ();
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _50: std::result::Result<(), error::ErrorCode>;
    let mut _51: bool;
    let mut _52: u16;
    let mut _53: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _54: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _55: u16;
    let mut _56: ();
    let _58: ();
    let mut _59: &str;
    let _60: &str;
    let mut _61: &std::string::String;
    let _62: &std::string::String;
    let _63: std::string::String;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[&str; 2];
    let _68: &[&str; 2];
    let _69: [&str; 2];
    let mut _70: &[core::fmt::rt::Argument<'_>];
    let mut _71: &[core::fmt::rt::Argument<'_>; 1];
    let _72: &[core::fmt::rt::Argument<'_>; 1];
    let _73: [core::fmt::rt::Argument<'_>; 1];
    let mut _74: core::fmt::rt::Argument<'_>;
    let mut _75: &error::ErrorCode;
    let _76: &error::ErrorCode;
    let _77: ();
    let mut _78: &str;
    let _79: &str;
    let mut _80: error::ErrorCode;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _86: ();
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _88: std::result::Result<(), error::ErrorCode>;
    let mut _89: bool;
    let mut _90: u128;
    let mut _91: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _92: &std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _93: ();
    let _95: ();
    let mut _96: &str;
    let _97: &str;
    let mut _98: &std::string::String;
    let _99: &std::string::String;
    let _100: std::string::String;
    let mut _102: std::fmt::Arguments<'_>;
    let mut _103: &[&str];
    let mut _104: &[&str; 2];
    let _105: &[&str; 2];
    let _106: [&str; 2];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let mut _108: &[core::fmt::rt::Argument<'_>; 1];
    let _109: &[core::fmt::rt::Argument<'_>; 1];
    let _110: [core::fmt::rt::Argument<'_>; 1];
    let mut _111: core::fmt::rt::Argument<'_>;
    let mut _112: &error::ErrorCode;
    let _113: &error::ErrorCode;
    let _114: ();
    let mut _115: &str;
    let _116: &str;
    let mut _117: error::ErrorCode;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _123: ();
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _125: std::result::Result<(), error::ErrorCode>;
    let mut _126: u64;
    let mut _127: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _128: &anchor_spl::token_interface::TokenAccount;
    let _129: &anchor_spl::token_interface::TokenAccount;
    let mut _130: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _131: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _132: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _133: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _134: &mut state::user::UserStats;
    let mut _135: &mut state::user::UserStats;
    let mut _136: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _137: &mut state::spot_market::SpotMarket;
    let mut _138: &mut state::spot_market::SpotMarket;
    let mut _139: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _140: i64;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: ();
    let mut _149: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _150: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _151: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _152: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>;
    let mut _153: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _154: isize;
    let mut _155: isize;
    let mut _156: isize;
    let mut _157: isize;
    let mut _158: isize;
    let mut _159: isize;
    let mut _160: isize;
    let mut _161: isize;
    let mut _162: isize;
    let mut _163: isize;
    let mut _164: isize;
    let mut _165: isize;
    let mut _166: isize;
    let mut _167: isize;
    let mut _168: isize;
    let mut _169: isize;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug clock => _3;
        let _11: i64;
        scope 6 {
            debug now => _11;
            let _12: &mut std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
            let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _23: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>;
            scope 7 {
                debug insurance_fund_stake => _12;
                let _24: &mut std::cell::RefMut<'_, state::user::UserStats>;
                let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _35: std::cell::RefMut<'_, state::user::UserStats>;
                scope 12 {
                    debug user_stats => _24;
                    let _36: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _47: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                    scope 17 {
                        debug spot_market => _36;
                        let _57: error::ErrorCode;
                        let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _85: ();
                        let _94: error::ErrorCode;
                        let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _122: ();
                        let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _145: ();
                        scope 22 {
                            debug error_code => _57;
                            let _64: std::string::String;
                            let mut _148: &[&str; 2];
                            scope 23 {
                                debug res => _64;
                            }
                        }
                        scope 24 {
                            debug residual => _82;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug val => _85;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug error_code => _94;
                            let _101: std::string::String;
                            let mut _147: &[&str; 2];
                            scope 29 {
                                debug res => _101;
                            }
                        }
                        scope 30 {
                            debug residual => _119;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _122;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug residual => _142;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _145;
                            scope 37 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _44;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _47;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _32;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _35;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _20;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _23;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb2, unwind: bb79];
    }

    bb2: {
        StorageDead(_5);
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_4 as Continue).0: anchor_lang::prelude::Clock);
        _3 = move _10;
        StorageDead(_10);
        _154 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_11);
        _11 = (_3.4: i64);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _149 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _17 = &((*_149).1: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _16 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::load_mut(move _17) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _9) -> [return: bb6, unwind: bb83];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _168 = discriminant(_4);
        StorageDead(_4);
        goto -> bb72;
    }

    bb7: {
        StorageDead(_17);
        StorageLive(_18);
        _18 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _15 = std::result::Result::<RefMut<'_, InsuranceFundStake>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _16, move _18) -> [return: bb8, unwind: bb79];
    }

    bb8: {
        StorageDead(_18);
        StorageDead(_16);
        _14 = <std::result::Result<RefMut<'_, InsuranceFundStake>, error::ErrorCode> as Try>::branch(move _15) -> [return: bb9, unwind: bb79];
    }

    bb9: {
        StorageDead(_15);
        _19 = discriminant(_14);
        switchInt(move _19) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_23);
        _23 = move ((_14 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _13 = move _23;
        StorageDead(_23);
        _12 = &mut _13;
        _158 = discriminant(_14);
        StorageDead(_14);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _150 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _29 = &((*_150).2: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _28 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _29) -> [return: bb13, unwind: bb78];
    }

    bb11: {
        StorageLive(_20);
        _20 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb12, unwind: bb82];
    }

    bb12: {
        StorageDead(_22);
        StorageDead(_20);
        _156 = discriminant(_14);
        StorageDead(_14);
        goto -> bb71;
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _27 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _28, move _30) -> [return: bb14, unwind: bb78];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        _26 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _27) -> [return: bb15, unwind: bb78];
    }

    bb15: {
        StorageDead(_27);
        _31 = discriminant(_26);
        switchInt(move _31) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_35);
        _35 = move ((_26 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _25 = move _35;
        StorageDead(_35);
        _24 = &mut _25;
        _162 = discriminant(_26);
        StorageDead(_26);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _151 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _41 = &((*_151).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _40 = anchor_lang::prelude::AccountLoader::<'_, SpotMarket>::load_mut(move _41) -> [return: bb19, unwind: bb77];
    }

    bb17: {
        StorageLive(_32);
        _32 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb18, unwind: bb81];
    }

    bb18: {
        StorageDead(_34);
        StorageDead(_32);
        _160 = discriminant(_26);
        StorageDead(_26);
        goto -> bb70;
    }

    bb19: {
        StorageDead(_41);
        StorageLive(_42);
        _42 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _39 = std::result::Result::<RefMut<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _40, move _42) -> [return: bb20, unwind: bb77];
    }

    bb20: {
        StorageDead(_42);
        StorageDead(_40);
        _38 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _39) -> [return: bb21, unwind: bb77];
    }

    bb21: {
        StorageDead(_39);
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_47);
        _47 = move ((_38 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _37 = move _47;
        StorageDead(_47);
        _36 = &mut _37;
        _166 = discriminant(_38);
        StorageDead(_38);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_12);
        _53 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _54) -> [return: bb25, unwind: bb76];
    }

    bb23: {
        StorageLive(_44);
        _44 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb24, unwind: bb80];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        _164 = discriminant(_38);
        StorageDead(_38);
        goto -> bb69;
    }

    bb25: {
        StorageDead(_54);
        _52 = ((*_53).8: u16);
        StorageLive(_55);
        _55 = _2;
        _51 = Eq(move _52, move _55);
        switchInt(move _51) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_56);
        _56 = ();
        _50 = std::result::Result::<(), error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        goto -> bb35;
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_57);
        _57 = error::ErrorCode::IncorrectSpotMarketAccountPassed;
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _148 = const _;
        _68 = &(*_148);
        _67 = &(*_68);
        _66 = move _67 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_67);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_57;
        _75 = &(*_76);
        _74 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _75) -> [return: bb28, unwind: bb76];
    }

    bb28: {
        StorageDead(_75);
        _73 = [move _74];
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = move _71 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_71);
        _65 = Arguments::<'_>::new_v1(move _66, move _70) -> [return: bb29, unwind: bb76];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_66);
        _64 = format(move _65) -> [return: bb30, unwind: bb76];
    }

    bb30: {
        StorageDead(_65);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_68);
        _63 = move _64;
        StorageDead(_64);
        _62 = &_63;
        _61 = &(*_62);
        _60 = <String as Deref>::deref(move _61) -> [return: bb31, unwind: bb75];
    }

    bb31: {
        _59 = &(*_60);
        StorageDead(_61);
        _58 = solana_program::log::sol_log(move _59) -> [return: bb32, unwind: bb75];
    }

    bb32: {
        StorageDead(_59);
        drop(_63) -> [return: bb33, unwind: bb76];
    }

    bb33: {
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_58);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = const "insurance_fund_stake does not match market_index";
        _78 = &(*_79);
        _77 = solana_program::log::sol_log(move _78) -> [return: bb34, unwind: bb76];
    }

    bb34: {
        StorageDead(_78);
        StorageDead(_79);
        StorageDead(_77);
        StorageLive(_80);
        _80 = _57;
        _50 = std::result::Result::<(), error::ErrorCode>::Err(move _80);
        StorageDead(_80);
        StorageDead(_57);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_51);
        _49 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _50) -> [return: bb36, unwind: bb76];
    }

    bb36: {
        StorageDead(_50);
        _81 = discriminant(_49);
        switchInt(move _81) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_85);
        _85 = ((_49 as Continue).0: ());
        _48 = _85;
        StorageDead(_85);
        StorageDead(_49);
        StorageDead(_48);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_12);
        _91 = <RefMut<'_, InsuranceFundStake> as Deref>::deref(move _92) -> [return: bb40, unwind: bb76];
    }

    bb38: {
        StorageLive(_82);
        _82 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb39, unwind: bb76];
    }

    bb39: {
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb68;
    }

    bb40: {
        StorageDead(_92);
        _90 = ((*_91).2: u128);
        _89 = Ne(move _90, const 0_u128);
        switchInt(move _89) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_93);
        _93 = ();
        _88 = std::result::Result::<(), error::ErrorCode>::Ok(move _93);
        StorageDead(_93);
        goto -> bb50;
    }

    bb42: {
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_94);
        _94 = error::ErrorCode::NoIFWithdrawRequestInProgress;
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _147 = const _;
        _105 = &(*_147);
        _104 = &(*_105);
        _103 = move _104 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_104);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_94;
        _112 = &(*_113);
        _111 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _112) -> [return: bb43, unwind: bb76];
    }

    bb43: {
        StorageDead(_112);
        _110 = [move _111];
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_108);
        _102 = Arguments::<'_>::new_v1(move _103, move _107) -> [return: bb44, unwind: bb76];
    }

    bb44: {
        StorageDead(_107);
        StorageDead(_103);
        _101 = format(move _102) -> [return: bb45, unwind: bb76];
    }

    bb45: {
        StorageDead(_102);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_105);
        _100 = move _101;
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        _97 = <String as Deref>::deref(move _98) -> [return: bb46, unwind: bb74];
    }

    bb46: {
        _96 = &(*_97);
        StorageDead(_98);
        _95 = solana_program::log::sol_log(move _96) -> [return: bb47, unwind: bb74];
    }

    bb47: {
        StorageDead(_96);
        drop(_100) -> [return: bb48, unwind: bb76];
    }

    bb48: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_95);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = const "No withdraw request in progress";
        _115 = &(*_116);
        _114 = solana_program::log::sol_log(move _115) -> [return: bb49, unwind: bb76];
    }

    bb49: {
        StorageDead(_115);
        StorageDead(_116);
        StorageDead(_114);
        StorageLive(_117);
        _117 = _94;
        _88 = std::result::Result::<(), error::ErrorCode>::Err(move _117);
        StorageDead(_117);
        StorageDead(_94);
        goto -> bb50;
    }

    bb50: {
        StorageDead(_89);
        _87 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _88) -> [return: bb51, unwind: bb76];
    }

    bb51: {
        StorageDead(_88);
        _118 = discriminant(_87);
        switchInt(move _118) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_122);
        _122 = ((_87 as Continue).0: ());
        _86 = _122;
        StorageDead(_122);
        StorageDead(_87);
        StorageDead(_86);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _152 = deref_copy (_1.1: &mut instructions::if_staker::RequestRemoveInsuranceFundStake<'_>);
        _153 = deref_copy ((*_152).4: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _174 = (((_153.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _130 = &(*_174);
        _129 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _130) -> [return: bb55, unwind: bb76];
    }

    bb53: {
        StorageLive(_119);
        _119 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb54, unwind: bb76];
    }

    bb54: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_87);
        StorageDead(_86);
        goto -> bb68;
    }

    bb55: {
        _128 = &(*_129);
        _127 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _128) -> [return: bb56, unwind: bb76];
    }

    bb56: {
        StorageDead(_130);
        StorageDead(_128);
        _126 = ((*_127).2: u64);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &mut (*_12);
        _132 = <RefMut<'_, InsuranceFundStake> as DerefMut>::deref_mut(move _133) -> [return: bb57, unwind: bb76];
    }

    bb57: {
        _131 = &mut (*_132);
        StorageDead(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _136 = &mut (*_24);
        _135 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _136) -> [return: bb58, unwind: bb76];
    }

    bb58: {
        _134 = &mut (*_135);
        StorageDead(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &mut (*_36);
        _138 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _139) -> [return: bb59, unwind: bb76];
    }

    bb59: {
        _137 = &mut (*_138);
        StorageDead(_139);
        StorageLive(_140);
        _140 = _11;
        _125 = controller::insurance::cancel_request_remove_insurance_fund_stake(move _126, move _131, move _134, move _137, move _140) -> [return: bb60, unwind: bb76];
    }

    bb60: {
        StorageDead(_140);
        StorageDead(_137);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_126);
        _124 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _125) -> [return: bb61, unwind: bb76];
    }

    bb61: {
        StorageDead(_125);
        _141 = discriminant(_124);
        switchInt(move _141) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_145);
        _145 = ((_124 as Continue).0: ());
        _123 = _145;
        StorageDead(_145);
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_146);
        _146 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _146);
        StorageDead(_146);
        drop(_37) -> [return: bb65, unwind: bb77];
    }

    bb63: {
        StorageLive(_142);
        _142 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb64, unwind: bb76];
    }

    bb64: {
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_138);
        StorageDead(_135);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb68;
    }

    bb65: {
        StorageDead(_37);
        StorageDead(_36);
        drop(_25) -> [return: bb66, unwind: bb78];
    }

    bb66: {
        StorageDead(_25);
        StorageDead(_24);
        drop(_13) -> [return: bb67, unwind: bb79];
    }

    bb67: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_3);
        goto -> bb73;
    }

    bb68: {
        drop(_37) -> [return: bb69, unwind: bb77];
    }

    bb69: {
        StorageDead(_37);
        StorageDead(_36);
        drop(_25) -> [return: bb70, unwind: bb78];
    }

    bb70: {
        StorageDead(_25);
        StorageDead(_24);
        drop(_13) -> [return: bb71, unwind: bb79];
    }

    bb71: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_3);
        goto -> bb73;
    }

    bb73: {
        return;
    }

    bb74 (cleanup): {
        drop(_100) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb75 (cleanup): {
        drop(_63) -> [return: bb76, unwind terminate(cleanup)];
    }

    bb76 (cleanup): {
        drop(_37) -> [return: bb77, unwind terminate(cleanup)];
    }

    bb77 (cleanup): {
        drop(_25) -> [return: bb78, unwind terminate(cleanup)];
    }

    bb78 (cleanup): {
        drop(_13) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        resume;
    }

    bb80 (cleanup): {
        _170 = discriminant(_38);
        goto -> bb77;
    }

    bb81 (cleanup): {
        _171 = discriminant(_26);
        goto -> bb78;
    }

    bb82 (cleanup): {
        _172 = discriminant(_14);
        goto -> bb79;
    }

    bb83 (cleanup): {
        _173 = discriminant(_4);
        goto -> bb79;
    }
}
