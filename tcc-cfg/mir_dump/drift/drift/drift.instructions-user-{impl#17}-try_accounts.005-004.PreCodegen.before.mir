// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:3960:10: 3960:18>::try_accounts` before PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:3960:10: 3960:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeUserStatsBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>;
    let _6: ();
    let mut _7: bool;
    let mut _8: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _9: !;
    let mut _10: anchor_lang::error::Error;
    let mut _11: anchor_lang::error::ErrorCode;
    let _12: &anchor_lang::prelude::AccountInfo<'_>;
    let _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: &[anchor_lang::prelude::AccountInfo<'_>];
    let _17: &[anchor_lang::prelude::AccountInfo<'_>];
    let _18: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _19: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _20: std::ops::RangeFrom<usize>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::user::InitializeUserStatsBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::user::InitializeUserStatsBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _53: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::user::InitializeUserStatsBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _68: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::user::InitializeUserStatsBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _83: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut instructions::user::InitializeUserStatsBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _98: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _106: (anchor_lang::prelude::Pubkey, u8);
    let mut _107: &[&[u8]];
    let mut _108: &[&[u8]; 2];
    let _109: &[&[u8]; 2];
    let _110: [&[u8]; 2];
    let mut _111: &[u8];
    let mut _112: &[u8; 10];
    let _113: &[u8; 10];
    let mut _114: &[u8];
    let _115: &[u8];
    let mut _116: &anchor_lang::prelude::Pubkey;
    let _117: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _118: &anchor_lang::prelude::Signer<'_>;
    let mut _119: &anchor_lang::prelude::Pubkey;
    let mut _120: u8;
    let _121: ();
    let mut _122: bool;
    let mut _123: &anchor_lang::prelude::Pubkey;
    let _124: anchor_lang::prelude::Pubkey;
    let mut _125: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _126: &anchor_lang::prelude::Pubkey;
    let mut _127: !;
    let mut _128: anchor_lang::error::Error;
    let mut _129: anchor_lang::error::Error;
    let mut _130: anchor_lang::error::Error;
    let mut _131: anchor_lang::error::ErrorCode;
    let mut _132: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _133: anchor_lang::prelude::Pubkey;
    let mut _134: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _135: anchor_lang::prelude::Pubkey;
    let mut _138: &&anchor_lang::prelude::AccountInfo<'_>;
    let _139: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: &&anchor_lang::prelude::Pubkey;
    let mut _146: &&anchor_lang::prelude::Pubkey;
    let _147: &anchor_lang::prelude::Pubkey;
    let _148: anchor_lang::prelude::Pubkey;
    let mut _150: &anchor_lang::prelude::AccountInfo<'_>;
    let _151: ();
    let mut _152: bool;
    let mut _153: u64;
    let mut _156: &anchor_lang::prelude::Rent;
    let mut _157: usize;
    let mut _159: anchor_lang::prelude::AccountInfo<'_>;
    let mut _160: &anchor_lang::prelude::Signer<'_>;
    let mut _161: anchor_lang::prelude::AccountInfo<'_>;
    let mut _162: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _164: anchor_lang::prelude::AccountInfo<'_>;
    let mut _165: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _166: anchor_lang::system_program::CreateAccount<'_>;
    let _167: ();
    let mut _168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _169: std::result::Result<(), anchor_lang::error::Error>;
    let mut _170: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _171: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _172: &[&[&[u8]]];
    let mut _173: &[&[&[u8]]; 1];
    let _174: &[&[&[u8]]; 1];
    let _175: [&[&[u8]]; 1];
    let mut _176: &[&[u8]];
    let _177: &[&[u8]];
    let _178: &[&[u8]];
    let mut _179: &[&[u8]; 3];
    let _180: [&[u8]; 3];
    let mut _181: &[u8];
    let mut _182: &[u8; 10];
    let _183: &[u8; 10];
    let mut _184: &[u8];
    let mut _185: &anchor_lang::prelude::Pubkey;
    let _186: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _187: &anchor_lang::prelude::Signer<'_>;
    let mut _188: &[u8];
    let _189: &[u8];
    let _190: &[u8];
    let mut _191: &[u8; 1];
    let _192: [u8; 1];
    let mut _193: u8;
    let mut _194: std::ops::RangeFull;
    let mut _195: std::ops::RangeFull;
    let mut _196: u64;
    let mut _197: u64;
    let mut _198: usize;
    let mut _199: &anchor_lang::prelude::Pubkey;
    let mut _200: isize;
    let mut _202: !;
    let mut _203: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _205: ();
    let mut _206: bool;
    let mut _207: &anchor_lang::prelude::Pubkey;
    let _208: anchor_lang::prelude::Pubkey;
    let mut _209: &anchor_lang::prelude::Signer<'_>;
    let mut _210: &anchor_lang::prelude::Pubkey;
    let _211: anchor_lang::prelude::Pubkey;
    let mut _212: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _213: !;
    let mut _214: anchor_lang::error::Error;
    let mut _215: anchor_lang::error::Error;
    let mut _216: anchor_lang::error::AnchorError;
    let mut _217: std::string::String;
    let mut _218: &anchor_lang::error::ErrorCode;
    let _219: anchor_lang::error::ErrorCode;
    let mut _220: u32;
    let mut _221: anchor_lang::error::ErrorCode;
    let mut _222: std::string::String;
    let mut _223: &anchor_lang::error::ErrorCode;
    let _224: anchor_lang::error::ErrorCode;
    let mut _225: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _226: anchor_lang::error::ErrorOrigin;
    let mut _227: anchor_lang::error::Source;
    let mut _228: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _229: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _230: anchor_lang::prelude::Pubkey;
    let mut _231: &anchor_lang::prelude::Signer<'_>;
    let mut _232: anchor_lang::prelude::Pubkey;
    let mut _233: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _235: u64;
    let mut _236: u64;
    let mut _237: &anchor_lang::prelude::Rent;
    let mut _238: usize;
    let mut _239: u64;
    let _240: ();
    let mut _241: bool;
    let mut _242: u64;
    let mut _244: anchor_lang::prelude::AccountInfo<'_>;
    let mut _245: &anchor_lang::prelude::Signer<'_>;
    let mut _246: anchor_lang::prelude::AccountInfo<'_>;
    let mut _247: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _249: anchor_lang::prelude::AccountInfo<'_>;
    let mut _250: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _251: anchor_lang::system_program::Transfer<'_>;
    let _252: ();
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _254: std::result::Result<(), anchor_lang::error::Error>;
    let mut _255: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _256: u64;
    let mut _257: isize;
    let mut _259: !;
    let mut _260: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _263: anchor_lang::prelude::AccountInfo<'_>;
    let mut _264: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _266: anchor_lang::prelude::AccountInfo<'_>;
    let mut _267: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _268: anchor_lang::system_program::Allocate<'_>;
    let _269: ();
    let mut _270: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _271: std::result::Result<(), anchor_lang::error::Error>;
    let mut _272: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _273: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _274: &[&[&[u8]]];
    let mut _275: &[&[&[u8]]; 1];
    let _276: &[&[&[u8]]; 1];
    let _277: [&[&[u8]]; 1];
    let mut _278: &[&[u8]];
    let _279: &[&[u8]];
    let _280: &[&[u8]];
    let mut _281: &[&[u8]; 3];
    let _282: [&[u8]; 3];
    let mut _283: &[u8];
    let mut _284: &[u8; 10];
    let _285: &[u8; 10];
    let mut _286: &[u8];
    let mut _287: &anchor_lang::prelude::Pubkey;
    let _288: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _289: &anchor_lang::prelude::Signer<'_>;
    let mut _290: &[u8];
    let _291: &[u8];
    let _292: &[u8];
    let mut _293: &[u8; 1];
    let _294: [u8; 1];
    let mut _295: u8;
    let mut _296: std::ops::RangeFull;
    let mut _297: std::ops::RangeFull;
    let mut _298: u64;
    let mut _299: usize;
    let mut _300: isize;
    let mut _302: !;
    let mut _303: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _306: anchor_lang::prelude::AccountInfo<'_>;
    let mut _307: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _309: anchor_lang::prelude::AccountInfo<'_>;
    let mut _310: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _311: anchor_lang::system_program::Assign<'_>;
    let _312: ();
    let mut _313: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _314: std::result::Result<(), anchor_lang::error::Error>;
    let mut _315: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _316: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _317: &[&[&[u8]]];
    let mut _318: &[&[&[u8]]; 1];
    let _319: &[&[&[u8]]; 1];
    let _320: [&[&[u8]]; 1];
    let mut _321: &[&[u8]];
    let _322: &[&[u8]];
    let _323: &[&[u8]];
    let mut _324: &[&[u8]; 3];
    let _325: [&[u8]; 3];
    let mut _326: &[u8];
    let mut _327: &[u8; 10];
    let _328: &[u8; 10];
    let mut _329: &[u8];
    let mut _330: &anchor_lang::prelude::Pubkey;
    let _331: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _332: &anchor_lang::prelude::Signer<'_>;
    let mut _333: &[u8];
    let _334: &[u8];
    let _335: &[u8];
    let mut _336: &[u8; 1];
    let _337: [u8; 1];
    let mut _338: u8;
    let mut _339: std::ops::RangeFull;
    let mut _340: std::ops::RangeFull;
    let mut _341: &anchor_lang::prelude::Pubkey;
    let mut _342: isize;
    let mut _344: !;
    let mut _345: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _347: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _348: &anchor_lang::prelude::Pubkey;
    let mut _349: &anchor_lang::prelude::AccountInfo<'_>;
    let _350: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _351: isize;
    let mut _354: !;
    let mut _355: anchor_lang::error::Error;
    let mut _356: anchor_lang::error::Error;
    let mut _357: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _358: &anchor_lang::prelude::AccountInfo<'_>;
    let _359: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _360: isize;
    let mut _363: !;
    let mut _364: anchor_lang::error::Error;
    let mut _365: anchor_lang::error::Error;
    let _366: ();
    let mut _367: bool;
    let _368: ();
    let mut _369: bool;
    let mut _370: usize;
    let mut _371: usize;
    let mut _372: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _373: !;
    let mut _374: anchor_lang::error::Error;
    let mut _375: anchor_lang::error::Error;
    let mut _376: anchor_lang::error::Error;
    let mut _377: anchor_lang::error::ErrorCode;
    let mut _378: (usize, usize);
    let mut _379: usize;
    let mut _380: usize;
    let mut _381: &anchor_lang::prelude::AccountInfo<'_>;
    let _382: ();
    let mut _383: bool;
    let mut _384: &&anchor_lang::prelude::Pubkey;
    let mut _385: &&anchor_lang::prelude::Pubkey;
    let mut _386: !;
    let mut _387: anchor_lang::error::Error;
    let mut _388: anchor_lang::error::Error;
    let mut _389: anchor_lang::error::Error;
    let mut _390: anchor_lang::error::ErrorCode;
    let mut _391: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _392: anchor_lang::prelude::Pubkey;
    let mut _393: anchor_lang::prelude::Pubkey;
    let mut _395: &anchor_lang::prelude::Rent;
    let mut _396: usize;
    let mut _397: bool;
    let mut _398: u64;
    let mut _399: &anchor_lang::prelude::AccountInfo<'_>;
    let _400: anchor_lang::prelude::AccountInfo<'_>;
    let mut _401: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _402: u64;
    let mut _403: !;
    let mut _404: anchor_lang::error::Error;
    let mut _405: anchor_lang::error::Error;
    let mut _406: anchor_lang::error::ErrorCode;
    let _407: ();
    let mut _408: bool;
    let mut _409: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _410: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _411: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _412: !;
    let mut _413: anchor_lang::error::Error;
    let mut _414: anchor_lang::error::Error;
    let mut _415: anchor_lang::error::ErrorCode;
    let _416: ();
    let mut _417: bool;
    let mut _418: &anchor_lang::prelude::Rent;
    let mut _419: u64;
    let mut _420: &anchor_lang::prelude::AccountInfo<'_>;
    let _421: anchor_lang::prelude::AccountInfo<'_>;
    let mut _422: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _423: usize;
    let mut _424: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _425: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _426: &anchor_lang::prelude::AccountInfo<'_>;
    let _427: anchor_lang::prelude::AccountInfo<'_>;
    let mut _428: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _429: isize;
    let mut _431: !;
    let mut _432: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _434: !;
    let mut _435: anchor_lang::error::Error;
    let mut _436: anchor_lang::error::Error;
    let mut _437: anchor_lang::error::ErrorCode;
    let _438: ();
    let mut _439: bool;
    let mut _440: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _441: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _442: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _443: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _444: !;
    let mut _445: anchor_lang::error::Error;
    let mut _446: anchor_lang::error::Error;
    let mut _447: anchor_lang::error::ErrorCode;
    let _448: ();
    let mut _449: bool;
    let mut _450: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _451: &anchor_lang::prelude::Signer<'_>;
    let _452: &anchor_lang::prelude::Signer<'_>;
    let mut _453: !;
    let mut _454: anchor_lang::error::Error;
    let mut _455: anchor_lang::error::Error;
    let mut _456: anchor_lang::error::ErrorCode;
    let mut _457: instructions::user::InitializeUserStats<'_>;
    let mut _458: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _459: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _460: anchor_lang::prelude::Signer<'_>;
    let mut _461: anchor_lang::prelude::Signer<'_>;
    let mut _462: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _463: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _467: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _468: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _469: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _470: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _471: &anchor_lang::prelude::Pubkey;
    let mut _472: &anchor_lang::prelude::Pubkey;
    let mut _473: &anchor_lang::prelude::Pubkey;
    let mut _474: &anchor_lang::prelude::Pubkey;
    let mut _475: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _476: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _477: bool;
    let mut _478: bool;
    let mut _479: bool;
    let mut _480: bool;
    let mut _481: bool;
    let mut _482: bool;
    let mut _483: bool;
    let mut _484: bool;
    let mut _485: bool;
    let mut _486: bool;
    let mut _487: bool;
    let mut _488: isize;
    let mut _489: isize;
    let mut _490: isize;
    let mut _491: isize;
    let mut _492: isize;
    let mut _493: isize;
    let mut _494: isize;
    let mut _495: isize;
    let mut _496: isize;
    let mut _497: isize;
    let mut _498: isize;
    let mut _499: isize;
    let mut _500: isize;
    let mut _501: isize;
    let mut _502: isize;
    let mut _503: isize;
    let mut _504: isize;
    let mut _505: isize;
    let mut _506: isize;
    let mut _507: isize;
    let mut _508: isize;
    let mut _509: isize;
    let mut _510: isize;
    let mut _511: isize;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    scope 1 {
        debug user_stats => _12;
        let _21: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
        let _35: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 2 {
            debug state => _21;
            let _36: anchor_lang::prelude::Signer<'_>;
            let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _50: anchor_lang::prelude::Signer<'_>;
            scope 7 {
                debug authority => _36;
                let _51: anchor_lang::prelude::Signer<'_>;
                let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _65: anchor_lang::prelude::Signer<'_>;
                scope 12 {
                    debug payer => _51;
                    let _66: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _80: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                    scope 17 {
                        debug rent => _66;
                        let _81: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _95: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                        scope 22 {
                            debug system_program => _81;
                            let _96: anchor_lang::prelude::Rent;
                            let _100: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                            let _103: anchor_lang::prelude::Rent;
                            scope 27 {
                                debug __anchor_rent => _96;
                                let _104: anchor_lang::prelude::Pubkey;
                                let _105: u8;
                                scope 32 {
                                    debug __pda_address => _104;
                                    debug __bump => _105;
                                    let _136: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                    let _137: &anchor_lang::prelude::AccountInfo<'_>;
                                    scope 33 {
                                        debug user_stats => _136;
                                        let _430: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                        let _433: usize;
                                        scope 71 {
                                            debug residual => _430;
                                            scope 72 {
                                            }
                                        }
                                        scope 73 {
                                            debug val => _433;
                                            scope 74 {
                                            }
                                        }
                                    }
                                    scope 34 {
                                        debug actual_field => _137;
                                        let _140: &anchor_lang::prelude::Pubkey;
                                        scope 35 {
                                            debug actual_owner => _140;
                                            let _141: usize;
                                            scope 36 {
                                                debug space => _141;
                                                let _142: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                                let _149: u64;
                                                let _361: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                                let _362: anchor_lang::error::Error;
                                                let mut _466: &&anchor_lang::prelude::Pubkey;
                                                scope 37 {
                                                    debug pa => _142;
                                                    let _394: u64;
                                                    scope 70 {
                                                        debug required_lamports => _394;
                                                    }
                                                }
                                                scope 38 {
                                                    debug __current_lamports => _149;
                                                    let _154: usize;
                                                    let _234: u64;
                                                    let _352: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                                    let _353: anchor_lang::error::Error;
                                                    let mut _464: &anchor_lang::error::ErrorCode;
                                                    let mut _465: &anchor_lang::error::ErrorCode;
                                                    scope 39 {
                                                        debug space => _154;
                                                        let _155: u64;
                                                        scope 40 {
                                                            debug lamports => _155;
                                                            let _158: anchor_lang::system_program::CreateAccount<'_>;
                                                            scope 41 {
                                                                debug cpi_accounts => _158;
                                                                let _163: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                scope 42 {
                                                                    debug cpi_context => _163;
                                                                    let _201: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                    let _204: ();
                                                                    scope 43 {
                                                                        debug residual => _201;
                                                                        scope 44 {
                                                                        }
                                                                    }
                                                                    scope 45 {
                                                                        debug val => _204;
                                                                        scope 46 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug required_lamports => _234;
                                                        let _243: anchor_lang::system_program::Transfer<'_>;
                                                        let _262: anchor_lang::system_program::Allocate<'_>;
                                                        scope 48 {
                                                            debug cpi_accounts => _243;
                                                            let _248: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                            scope 49 {
                                                                debug cpi_context => _248;
                                                                let _258: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _261: ();
                                                                scope 50 {
                                                                    debug residual => _258;
                                                                    scope 51 {
                                                                    }
                                                                }
                                                                scope 52 {
                                                                    debug val => _261;
                                                                    scope 53 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 54 {
                                                            debug cpi_accounts => _262;
                                                            let _265: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                            scope 55 {
                                                                debug cpi_context => _265;
                                                                let _301: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _304: ();
                                                                let _305: anchor_lang::system_program::Assign<'_>;
                                                                scope 56 {
                                                                    debug residual => _301;
                                                                    scope 57 {
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug val => _304;
                                                                    scope 59 {
                                                                    }
                                                                }
                                                                scope 60 {
                                                                    debug cpi_accounts => _305;
                                                                    let _308: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                    scope 61 {
                                                                        debug cpi_context => _308;
                                                                        let _343: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                        let _346: ();
                                                                        scope 62 {
                                                                            debug residual => _343;
                                                                            scope 63 {
                                                                            }
                                                                        }
                                                                        scope 64 {
                                                                            debug val => _346;
                                                                            scope 65 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 66 {
                                                        debug val => _352;
                                                    }
                                                    scope 67 {
                                                        debug e => _353;
                                                    }
                                                }
                                                scope 68 {
                                                    debug val => _361;
                                                }
                                                scope 69 {
                                                    debug e => _362;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _100;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _103;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _92;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _95;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _77;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _80;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _62;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _65;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _47;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _50;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _32;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _35;
            scope 6 {
            }
        }
    }

    bb0: {
        _487 = const false;
        _486 = const false;
        _485 = const false;
        _484 = const false;
        _483 = const false;
        _482 = const false;
        _481 = const false;
        _480 = const false;
        _479 = const false;
        _478 = const false;
        _477 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _467 = deref_copy (*_2);
        _8 = &(*_467);
        _7 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _7) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_8);
        StorageLive(_10);
        StorageLive(_11);
        _11 = AccountNotEnoughKeys;
        _10 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _10);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb215;
    }

    bb4: {
        StorageDead(_8);
        _6 = const ();
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_12);
        StorageLive(_13);
        _13 = const 0_usize;
        _468 = deref_copy (*_2);
        _14 = Len((*_468));
        _15 = Lt(_13, _14);
        assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb5, unwind continue];
    }

    bb5: {
        _469 = deref_copy (*_2);
        _12 = &(*_469)[_13];
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _470 = deref_copy (*_2);
        _19 = &(*_470);
        StorageLive(_20);
        _20 = RangeFrom::<usize> { start: const 1_usize };
        _18 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _19, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = &(*_18);
        _16 = &(*_17);
        (*_2) = move _16;
        StorageDead(_16);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_3);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializeUserStatsBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
        _23 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18}>(move _24, move _30) -> [return: bb8, unwind: bb223];
    }

    bb8: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb9, unwind: bb223];
    }

    bb9: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _21 = move _35;
        StorageDead(_35);
        _488 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_3);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeUserStatsBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb222];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb256];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _540 = discriminant(_22);
        StorageDead(_22);
        goto -> bb214;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
        _38 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18}>(move _39, move _45) -> [return: bb15, unwind: bb222];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb222];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb11];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _36 = move _50;
        StorageDead(_50);
        _490 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_3);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeUserStatsBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb222];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb255];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _538 = discriminant(_37);
        StorageDead(_37);
        goto -> bb213;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
        _53 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18}>(move _54, move _60) -> [return: bb21, unwind: bb222];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb222];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb11];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _51 = move _65;
        StorageDead(_65);
        _492 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_3);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeUserStatsBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb222];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb254];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _536 = discriminant(_52);
        StorageDead(_52);
        goto -> bb212;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
        _68 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18}>(move _69, move _75) -> [return: bb27, unwind: bb222];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb222];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb11];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _66 = move _80;
        StorageDead(_80);
        _494 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_3);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeUserStatsBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb222];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb253];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _534 = discriminant(_67);
        StorageDead(_67);
        goto -> bb211;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18};
        _83 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:3960:10: 3960:18}>(move _84, move _90) -> [return: bb33, unwind: bb222];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb222];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb11];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _81 = move _95;
        StorageDead(_95);
        _496 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb38, unwind: bb222];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb252];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _532 = discriminant(_82);
        StorageDead(_82);
        goto -> bb210;
    }

    bb38: {
        _97 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _98) -> [return: bb39, unwind: bb222];
    }

    bb39: {
        StorageDead(_98);
        _99 = discriminant(_97);
        switchInt(move _99) -> [0: bb40, 1: bb41, otherwise: bb11];
    }

    bb40: {
        StorageLive(_103);
        _103 = ((_97 as Continue).0: anchor_lang::prelude::Rent);
        _96 = _103;
        StorageDead(_103);
        _498 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = const b"user_stats";
        _112 = &(*_113);
        _111 = move _112 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_112);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &_36;
        _117 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _118) -> [return: bb43, unwind: bb222];
    }

    bb41: {
        StorageLive(_100);
        _100 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_102);
        _102 = move _100;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _102) -> [return: bb42, unwind: bb251];
    }

    bb42: {
        StorageDead(_102);
        StorageDead(_100);
        _530 = discriminant(_97);
        StorageDead(_97);
        goto -> bb209;
    }

    bb43: {
        StorageDead(_118);
        _471 = deref_copy ((*_117).0: &anchor_lang::prelude::Pubkey);
        _116 = &(*_471);
        _115 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _116) -> [return: bb44, unwind: bb222];
    }

    bb44: {
        _114 = &(*_115);
        StorageDead(_116);
        _110 = [move _111, move _114];
        StorageDead(_114);
        StorageDead(_111);
        _109 = &_110;
        _108 = &(*_109);
        _107 = move _108 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_108);
        StorageLive(_119);
        _119 = &(*_1);
        _106 = anchor_lang::prelude::Pubkey::find_program_address(move _107, move _119) -> [return: bb45, unwind: bb222];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_107);
        StorageLive(_104);
        _104 = (_106.0: anchor_lang::prelude::Pubkey);
        StorageLive(_105);
        _105 = (_106.1: u8);
        StorageDead(_117);
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_106);
        StorageLive(_120);
        _120 = _105;
        ((*_4).0: u8) = move _120;
        StorageDead(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &(*_12);
        _124 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _125) -> [return: bb46, unwind: bb222];
    }

    bb46: {
        _123 = &_124;
        StorageDead(_125);
        StorageLive(_126);
        _126 = &_104;
        _122 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _123, move _126) -> [return: bb47, unwind: bb222];
    }

    bb47: {
        switchInt(move _122) -> [0: bb53, otherwise: bb48];
    }

    bb48: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = ConstraintSeeds;
        _130 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _131) -> [return: bb49, unwind: bb222];
    }

    bb49: {
        StorageDead(_131);
        _129 = anchor_lang::error::Error::with_account_name::<&str>(move _130, const "user_stats") -> [return: bb50, unwind: bb222];
    }

    bb50: {
        _487 = const true;
        StorageDead(_130);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &(*_12);
        _133 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _134) -> [return: bb51, unwind: bb250];
    }

    bb51: {
        StorageDead(_134);
        StorageLive(_135);
        _135 = _104;
        _132 = (move _133, move _135);
        StorageDead(_135);
        StorageDead(_133);
        _487 = const false;
        _128 = anchor_lang::error::Error::with_pubkeys(move _129, move _132) -> [return: bb52, unwind: bb250];
    }

    bb52: {
        StorageDead(_132);
        _487 = const false;
        StorageDead(_129);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _128);
        StorageDead(_128);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb208;
    }

    bb53: {
        StorageDead(_126);
        StorageDead(_124);
        StorageDead(_123);
        _121 = const ();
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_12;
        _138 = &(*_139);
        _137 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _138) -> [return: bb54, unwind: bb222];
    }

    bb54: {
        StorageDead(_138);
        StorageDead(_139);
        StorageLive(_140);
        _140 = ((*_137).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_141);
        _141 = const _;
        StorageLive(_142);
        StorageLive(_143);
        _143 = const false;
        switchInt(move _143) -> [0: bb57, otherwise: bb55];
    }

    bb55: {
        StorageLive(_144);
        StorageLive(_145);
        _145 = &_140;
        StorageLive(_146);
        _466 = const _;
        _146 = &(*_466);
        _144 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _145, move _146) -> [return: bb56, unwind: bb222];
    }

    bb56: {
        switchInt(move _144) -> [0: bb134, otherwise: bb57];
    }

    bb57: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(*_12);
        _149 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _150) -> [return: bb58, unwind: bb222];
    }

    bb58: {
        StorageDead(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = _149;
        _152 = Eq(move _153, const 0_u64);
        switchInt(move _152) -> [0: bb75, otherwise: bb59];
    }

    bb59: {
        StorageDead(_153);
        StorageLive(_154);
        _154 = _141;
        StorageLive(_155);
        StorageLive(_156);
        _156 = &_96;
        StorageLive(_157);
        _157 = _154;
        _155 = anchor_lang::prelude::Rent::minimum_balance(move _156, move _157) -> [return: bb60, unwind: bb222];
    }

    bb60: {
        StorageDead(_157);
        StorageDead(_156);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &_51;
        _159 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _160) -> [return: bb61, unwind: bb222];
    }

    bb61: {
        StorageDead(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &(*_12);
        _161 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _162) -> [return: bb62, unwind: bb221];
    }

    bb62: {
        StorageDead(_162);
        _486 = const true;
        _158 = anchor_lang::system_program::CreateAccount::<'_> { from: move _159, to: move _161 };
        StorageDead(_161);
        StorageDead(_159);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_81;
        _164 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _165) -> [return: bb63, unwind: bb248];
    }

    bb63: {
        StorageDead(_165);
        StorageLive(_166);
        _486 = const false;
        _166 = move _158;
        _163 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _164, move _166) -> [return: bb64, unwind: bb248];
    }

    bb64: {
        StorageDead(_166);
        StorageDead(_164);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _485 = const true;
        _171 = move _163;
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = const b"user_stats";
        _182 = &(*_183);
        _181 = move _182 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_182);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_36;
        _186 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _187) -> [return: bb65, unwind: bb246];
    }

    bb65: {
        StorageDead(_187);
        _472 = deref_copy ((*_186).0: &anchor_lang::prelude::Pubkey);
        _185 = &(*_472);
        _184 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _185) -> [return: bb66, unwind: bb246];
    }

    bb66: {
        StorageDead(_185);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = _105;
        _192 = [move _193];
        _191 = &_192;
        StorageDead(_193);
        StorageLive(_194);
        _194 = RangeFull;
        _190 = <[u8; 1] as Index<RangeFull>>::index(move _191, move _194) -> [return: bb67, unwind: bb246];
    }

    bb67: {
        StorageDead(_194);
        StorageDead(_191);
        _189 = &(*_190);
        _188 = &(*_189);
        _180 = [move _181, move _184, move _188];
        _179 = &_180;
        StorageDead(_188);
        StorageDead(_184);
        StorageDead(_181);
        StorageLive(_195);
        _195 = RangeFull;
        _178 = <[&[u8]; 3] as Index<RangeFull>>::index(move _179, move _195) -> [return: bb68, unwind: bb246];
    }

    bb68: {
        StorageDead(_195);
        StorageDead(_179);
        _177 = &(*_178);
        _176 = &(*_177);
        _175 = [move _176];
        StorageDead(_176);
        _174 = &_175;
        _173 = &(*_174);
        _172 = move _173 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_173);
        _485 = const false;
        _170 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _171, move _172) -> [return: bb69, unwind: bb246];
    }

    bb69: {
        StorageDead(_172);
        _485 = const false;
        StorageDead(_171);
        StorageLive(_196);
        _196 = _155;
        StorageLive(_197);
        StorageLive(_198);
        _198 = _154;
        _197 = move _198 as u64 (IntToInt);
        StorageDead(_198);
        StorageLive(_199);
        _199 = &(*_1);
        _169 = anchor_lang::system_program::create_account(move _170, move _196, move _197, move _199) -> [return: bb70, unwind: bb248];
    }

    bb70: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_170);
        _168 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _169) -> [return: bb71, unwind: bb248];
    }

    bb71: {
        StorageDead(_169);
        _200 = discriminant(_168);
        switchInt(move _200) -> [0: bb72, 1: bb73, otherwise: bb11];
    }

    bb72: {
        StorageLive(_204);
        _204 = ((_168 as Continue).0: ());
        _167 = _204;
        StorageDead(_204);
        _500 = discriminant(_168);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_168);
        StorageDead(_167);
        _151 = const ();
        StorageDead(_163);
        _486 = const false;
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb129;
    }

    bb73: {
        StorageLive(_201);
        _201 = move ((_168 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_203);
        _203 = move _201;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _203) -> [return: bb74, unwind: bb244];
    }

    bb74: {
        StorageDead(_203);
        StorageDead(_201);
        _528 = discriminant(_168);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        StorageDead(_183);
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_175);
        StorageDead(_174);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_163);
        _486 = const false;
        StorageDead(_158);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb204;
    }

    bb75: {
        StorageDead(_153);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_51;
        _208 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _209) -> [return: bb76, unwind: bb222];
    }

    bb76: {
        _207 = &_208;
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &(*_12);
        _211 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _212) -> [return: bb77, unwind: bb222];
    }

    bb77: {
        _210 = &_211;
        StorageDead(_212);
        _206 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _207, move _210) -> [return: bb78, unwind: bb222];
    }

    bb78: {
        switchInt(move _206) -> [0: bb87, otherwise: bb79];
    }

    bb79: {
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_207);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _465 = const _;
        _218 = &(*_465);
        _217 = anchor_lang::error::ErrorCode::name(move _218) -> [return: bb80, unwind: bb222];
    }

    bb80: {
        StorageDead(_218);
        StorageLive(_220);
        StorageLive(_221);
        _221 = TryingToInitPayerAsProgramAccount;
        _220 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _221) -> [return: bb81, unwind: bb220];
    }

    bb81: {
        StorageDead(_221);
        StorageLive(_222);
        StorageLive(_223);
        _464 = const _;
        _223 = &(*_464);
        _222 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _223) -> [return: bb82, unwind: bb220];
    }

    bb82: {
        StorageDead(_223);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/user.rs", line: const 3960_u32 };
        _226 = anchor_lang::error::ErrorOrigin::Source(move _227);
        StorageDead(_227);
        _225 = Option::<ErrorOrigin>::Some(move _226);
        StorageDead(_226);
        StorageLive(_228);
        _228 = Option::<ComparedValues>::None;
        _216 = anchor_lang::error::AnchorError { error_name: move _217, error_code_number: move _220, error_msg: move _222, error_origin: move _225, compared_values: move _228 };
        StorageDead(_228);
        StorageDead(_225);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_217);
        _215 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _216) -> [return: bb83, unwind: bb222];
    }

    bb83: {
        _484 = const true;
        StorageDead(_216);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = &_51;
        _230 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _231) -> [return: bb84, unwind: bb243];
    }

    bb84: {
        StorageDead(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &(*_12);
        _232 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _233) -> [return: bb85, unwind: bb243];
    }

    bb85: {
        StorageDead(_233);
        _229 = (move _230, move _232);
        StorageDead(_232);
        StorageDead(_230);
        _484 = const false;
        _214 = anchor_lang::error::Error::with_pubkeys(move _215, move _229) -> [return: bb86, unwind: bb243];
    }

    bb86: {
        StorageDead(_229);
        _484 = const false;
        StorageDead(_215);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _214);
        StorageDead(_214);
        StorageDead(_206);
        StorageDead(_205);
        goto -> bb204;
    }

    bb87: {
        StorageDead(_211);
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_207);
        _205 = const ();
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        _237 = &_96;
        StorageLive(_238);
        _238 = _141;
        _236 = anchor_lang::prelude::Rent::minimum_balance(move _237, move _238) -> [return: bb88, unwind: bb222];
    }

    bb88: {
        StorageDead(_238);
        StorageDead(_237);
        _235 = <u64 as Ord>::max(move _236, const 1_u64) -> [return: bb89, unwind: bb222];
    }

    bb89: {
        StorageDead(_236);
        StorageLive(_239);
        _239 = _149;
        _234 = core::num::<impl u64>::saturating_sub(move _235, move _239) -> [return: bb90, unwind: bb222];
    }

    bb90: {
        StorageDead(_239);
        StorageDead(_235);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = _234;
        _241 = Gt(move _242, const 0_u64);
        switchInt(move _241) -> [0: bb101, otherwise: bb91];
    }

    bb91: {
        StorageDead(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        _245 = &_51;
        _244 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _245) -> [return: bb92, unwind: bb222];
    }

    bb92: {
        StorageDead(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &(*_12);
        _246 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _247) -> [return: bb93, unwind: bb219];
    }

    bb93: {
        StorageDead(_247);
        _483 = const true;
        _243 = anchor_lang::system_program::Transfer::<'_> { from: move _244, to: move _246 };
        StorageDead(_246);
        StorageDead(_244);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &_81;
        _249 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _250) -> [return: bb94, unwind: bb241];
    }

    bb94: {
        StorageDead(_250);
        StorageLive(_251);
        _483 = const false;
        _251 = move _243;
        _248 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _249, move _251) -> [return: bb95, unwind: bb241];
    }

    bb95: {
        StorageDead(_251);
        StorageDead(_249);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = move _248;
        StorageLive(_256);
        _256 = _234;
        _254 = anchor_lang::system_program::transfer(move _255, move _256) -> [return: bb96, unwind: bb241];
    }

    bb96: {
        StorageDead(_256);
        StorageDead(_255);
        _253 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _254) -> [return: bb97, unwind: bb241];
    }

    bb97: {
        StorageDead(_254);
        _257 = discriminant(_253);
        switchInt(move _257) -> [0: bb98, 1: bb99, otherwise: bb11];
    }

    bb98: {
        StorageLive(_261);
        _261 = ((_253 as Continue).0: ());
        _252 = _261;
        StorageDead(_261);
        _502 = discriminant(_253);
        StorageDead(_253);
        StorageDead(_252);
        _240 = const ();
        StorageDead(_248);
        _483 = const false;
        StorageDead(_243);
        goto -> bb102;
    }

    bb99: {
        StorageLive(_258);
        _258 = move ((_253 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_260);
        _260 = move _258;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _260) -> [return: bb100, unwind: bb239];
    }

    bb100: {
        StorageDead(_260);
        StorageDead(_258);
        _526 = discriminant(_253);
        StorageDead(_253);
        StorageDead(_252);
        StorageDead(_248);
        _483 = const false;
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_240);
        goto -> bb203;
    }

    bb101: {
        StorageDead(_242);
        _240 = const ();
        goto -> bb102;
    }

    bb102: {
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = &(*_12);
        _263 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _264) -> [return: bb103, unwind: bb222];
    }

    bb103: {
        StorageDead(_264);
        _482 = const true;
        _262 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _263 };
        StorageDead(_263);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = &_81;
        _266 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _267) -> [return: bb104, unwind: bb238];
    }

    bb104: {
        StorageDead(_267);
        StorageLive(_268);
        _482 = const false;
        _268 = move _262;
        _265 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _266, move _268) -> [return: bb105, unwind: bb238];
    }

    bb105: {
        StorageDead(_268);
        StorageDead(_266);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _481 = const true;
        _273 = move _265;
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = const b"user_stats";
        _284 = &(*_285);
        _283 = move _284 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_284);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &_36;
        _288 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _289) -> [return: bb106, unwind: bb236];
    }

    bb106: {
        StorageDead(_289);
        _473 = deref_copy ((*_288).0: &anchor_lang::prelude::Pubkey);
        _287 = &(*_473);
        _286 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _287) -> [return: bb107, unwind: bb236];
    }

    bb107: {
        StorageDead(_287);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        _295 = _105;
        _294 = [move _295];
        _293 = &_294;
        StorageDead(_295);
        StorageLive(_296);
        _296 = RangeFull;
        _292 = <[u8; 1] as Index<RangeFull>>::index(move _293, move _296) -> [return: bb108, unwind: bb236];
    }

    bb108: {
        StorageDead(_296);
        StorageDead(_293);
        _291 = &(*_292);
        _290 = &(*_291);
        _282 = [move _283, move _286, move _290];
        _281 = &_282;
        StorageDead(_290);
        StorageDead(_286);
        StorageDead(_283);
        StorageLive(_297);
        _297 = RangeFull;
        _280 = <[&[u8]; 3] as Index<RangeFull>>::index(move _281, move _297) -> [return: bb109, unwind: bb236];
    }

    bb109: {
        StorageDead(_297);
        StorageDead(_281);
        _279 = &(*_280);
        _278 = &(*_279);
        _277 = [move _278];
        StorageDead(_278);
        _276 = &_277;
        _275 = &(*_276);
        _274 = move _275 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_275);
        _481 = const false;
        _272 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _273, move _274) -> [return: bb110, unwind: bb236];
    }

    bb110: {
        StorageDead(_274);
        _481 = const false;
        StorageDead(_273);
        StorageLive(_298);
        StorageLive(_299);
        _299 = _141;
        _298 = move _299 as u64 (IntToInt);
        StorageDead(_299);
        _271 = anchor_lang::system_program::allocate(move _272, move _298) -> [return: bb111, unwind: bb238];
    }

    bb111: {
        StorageDead(_298);
        StorageDead(_272);
        _270 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _271) -> [return: bb112, unwind: bb238];
    }

    bb112: {
        StorageDead(_271);
        _300 = discriminant(_270);
        switchInt(move _300) -> [0: bb113, 1: bb114, otherwise: bb11];
    }

    bb113: {
        StorageLive(_304);
        _304 = ((_270 as Continue).0: ());
        _269 = _304;
        StorageDead(_304);
        _504 = discriminant(_270);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_270);
        StorageDead(_269);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        _307 = &(*_12);
        _306 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _307) -> [return: bb116, unwind: bb238];
    }

    bb114: {
        StorageLive(_301);
        _301 = move ((_270 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_303);
        _303 = move _301;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _303) -> [return: bb115, unwind: bb234];
    }

    bb115: {
        StorageDead(_303);
        StorageDead(_301);
        _524 = discriminant(_270);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_291);
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_282);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_270);
        StorageDead(_269);
        goto -> bb202;
    }

    bb116: {
        StorageDead(_307);
        _480 = const true;
        _305 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _306 };
        StorageDead(_306);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &_81;
        _309 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _310) -> [return: bb117, unwind: bb233];
    }

    bb117: {
        StorageDead(_310);
        StorageLive(_311);
        _480 = const false;
        _311 = move _305;
        _308 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _309, move _311) -> [return: bb118, unwind: bb233];
    }

    bb118: {
        StorageDead(_311);
        StorageDead(_309);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _479 = const true;
        _316 = move _308;
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        _328 = const b"user_stats";
        _327 = &(*_328);
        _326 = move _327 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_327);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = &_36;
        _331 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _332) -> [return: bb119, unwind: bb231];
    }

    bb119: {
        StorageDead(_332);
        _474 = deref_copy ((*_331).0: &anchor_lang::prelude::Pubkey);
        _330 = &(*_474);
        _329 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _330) -> [return: bb120, unwind: bb231];
    }

    bb120: {
        StorageDead(_330);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = _105;
        _337 = [move _338];
        _336 = &_337;
        StorageDead(_338);
        StorageLive(_339);
        _339 = RangeFull;
        _335 = <[u8; 1] as Index<RangeFull>>::index(move _336, move _339) -> [return: bb121, unwind: bb231];
    }

    bb121: {
        StorageDead(_339);
        StorageDead(_336);
        _334 = &(*_335);
        _333 = &(*_334);
        _325 = [move _326, move _329, move _333];
        _324 = &_325;
        StorageDead(_333);
        StorageDead(_329);
        StorageDead(_326);
        StorageLive(_340);
        _340 = RangeFull;
        _323 = <[&[u8]; 3] as Index<RangeFull>>::index(move _324, move _340) -> [return: bb122, unwind: bb231];
    }

    bb122: {
        StorageDead(_340);
        StorageDead(_324);
        _322 = &(*_323);
        _321 = &(*_322);
        _320 = [move _321];
        StorageDead(_321);
        _319 = &_320;
        _318 = &(*_319);
        _317 = move _318 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_318);
        _479 = const false;
        _315 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _316, move _317) -> [return: bb123, unwind: bb231];
    }

    bb123: {
        StorageDead(_317);
        _479 = const false;
        StorageDead(_316);
        StorageLive(_341);
        _341 = &(*_1);
        _314 = anchor_lang::system_program::assign(move _315, move _341) -> [return: bb124, unwind: bb233];
    }

    bb124: {
        StorageDead(_341);
        StorageDead(_315);
        _313 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _314) -> [return: bb125, unwind: bb233];
    }

    bb125: {
        StorageDead(_314);
        _342 = discriminant(_313);
        switchInt(move _342) -> [0: bb126, 1: bb127, otherwise: bb11];
    }

    bb126: {
        StorageLive(_346);
        _346 = ((_313 as Continue).0: ());
        _312 = _346;
        StorageDead(_346);
        _506 = discriminant(_313);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_328);
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_313);
        StorageDead(_312);
        _151 = const ();
        StorageDead(_308);
        _480 = const false;
        StorageDead(_305);
        StorageDead(_265);
        _482 = const false;
        StorageDead(_262);
        StorageDead(_234);
        goto -> bb129;
    }

    bb127: {
        StorageLive(_343);
        _343 = move ((_313 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_345);
        _345 = move _343;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _345) -> [return: bb128, unwind: bb229];
    }

    bb128: {
        StorageDead(_345);
        StorageDead(_343);
        _522 = discriminant(_313);
        StorageDead(_337);
        StorageDead(_335);
        StorageDead(_334);
        StorageDead(_331);
        StorageDead(_328);
        StorageDead(_325);
        StorageDead(_323);
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_313);
        StorageDead(_312);
        StorageDead(_308);
        _480 = const false;
        StorageDead(_305);
        goto -> bb202;
    }

    bb129: {
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_347);
        StorageLive(_348);
        _348 = &(*_1);
        StorageLive(_349);
        StorageLive(_350);
        _350 = &_12;
        _475 = deref_copy (*_350);
        _349 = &(*_475);
        _347 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::try_from_unchecked(move _348, move _349) -> [return: bb130, unwind: bb222];
    }

    bb130: {
        StorageDead(_349);
        StorageDead(_348);
        _351 = discriminant(_347);
        switchInt(move _351) -> [0: bb132, 1: bb131, otherwise: bb11];
    }

    bb131: {
        StorageLive(_353);
        _353 = move ((_347 as Err).0: anchor_lang::error::Error);
        StorageLive(_355);
        StorageLive(_356);
        _356 = move _353;
        _355 = anchor_lang::error::Error::with_account_name::<&str>(move _356, const "user_stats") -> [return: bb133, unwind: bb228];
    }

    bb132: {
        StorageLive(_352);
        _352 = move ((_347 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _142 = move _352;
        StorageDead(_352);
        StorageDead(_149);
        _508 = discriminant(_347);
        StorageDead(_350);
        StorageDead(_347);
        goto -> bb139;
    }

    bb133: {
        StorageDead(_356);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _355);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_149);
        _520 = discriminant(_347);
        StorageDead(_350);
        StorageDead(_347);
        goto -> bb205;
    }

    bb134: {
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        _359 = &_12;
        _476 = deref_copy (*_359);
        _358 = &(*_476);
        _357 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::try_from(move _358) -> [return: bb135, unwind: bb222];
    }

    bb135: {
        StorageDead(_358);
        _360 = discriminant(_357);
        switchInt(move _360) -> [0: bb137, 1: bb136, otherwise: bb11];
    }

    bb136: {
        StorageLive(_362);
        _362 = move ((_357 as Err).0: anchor_lang::error::Error);
        StorageLive(_364);
        StorageLive(_365);
        _365 = move _362;
        _364 = anchor_lang::error::Error::with_account_name::<&str>(move _365, const "user_stats") -> [return: bb138, unwind: bb227];
    }

    bb137: {
        StorageLive(_361);
        _361 = move ((_357 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _142 = move _361;
        StorageDead(_361);
        _510 = discriminant(_357);
        StorageDead(_359);
        StorageDead(_357);
        goto -> bb139;
    }

    bb138: {
        StorageDead(_365);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _364);
        StorageDead(_364);
        StorageDead(_362);
        _518 = discriminant(_357);
        StorageDead(_359);
        StorageDead(_357);
        goto -> bb205;
    }

    bb139: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_366);
        StorageLive(_367);
        _367 = const false;
        switchInt(move _367) -> [0: bb163, otherwise: bb140];
    }

    bb140: {
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = _141;
        StorageLive(_371);
        StorageLive(_372);
        _372 = &(*_137);
        _371 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _372) -> [return: bb141, unwind: bb222];
    }

    bb141: {
        StorageDead(_372);
        _369 = Ne(move _370, move _371);
        switchInt(move _369) -> [0: bb147, otherwise: bb142];
    }

    bb142: {
        StorageDead(_371);
        StorageDead(_370);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = ConstraintSpace;
        _376 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _377) -> [return: bb143, unwind: bb222];
    }

    bb143: {
        StorageDead(_377);
        _375 = anchor_lang::error::Error::with_account_name::<&str>(move _376, const "user_stats") -> [return: bb144, unwind: bb222];
    }

    bb144: {
        _478 = const true;
        StorageDead(_376);
        StorageLive(_378);
        StorageLive(_379);
        _379 = _141;
        StorageLive(_380);
        StorageLive(_381);
        _381 = &(*_137);
        _380 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _381) -> [return: bb145, unwind: bb226];
    }

    bb145: {
        StorageDead(_381);
        _378 = (move _379, move _380);
        StorageDead(_380);
        StorageDead(_379);
        _478 = const false;
        _374 = anchor_lang::error::Error::with_values::<usize, usize>(move _375, move _378) -> [return: bb146, unwind: bb226];
    }

    bb146: {
        StorageDead(_378);
        _478 = const false;
        StorageDead(_375);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _374);
        StorageDead(_374);
        StorageDead(_369);
        StorageDead(_368);
        goto -> bb201;
    }

    bb147: {
        StorageDead(_371);
        StorageDead(_370);
        _368 = const ();
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        _384 = &_140;
        StorageLive(_385);
        _385 = &_1;
        _383 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _384, move _385) -> [return: bb148, unwind: bb222];
    }

    bb148: {
        switchInt(move _383) -> [0: bb153, otherwise: bb149];
    }

    bb149: {
        StorageDead(_385);
        StorageDead(_384);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = ConstraintOwner;
        _389 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _390) -> [return: bb150, unwind: bb222];
    }

    bb150: {
        StorageDead(_390);
        _388 = anchor_lang::error::Error::with_account_name::<&str>(move _389, const "user_stats") -> [return: bb151, unwind: bb222];
    }

    bb151: {
        StorageDead(_389);
        StorageLive(_391);
        StorageLive(_392);
        _392 = (*_140);
        StorageLive(_393);
        _393 = (*_1);
        _391 = (move _392, move _393);
        StorageDead(_393);
        StorageDead(_392);
        _387 = anchor_lang::error::Error::with_pubkeys(move _388, move _391) -> [return: bb152, unwind: bb222];
    }

    bb152: {
        StorageDead(_391);
        StorageDead(_388);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _387);
        StorageDead(_387);
        StorageDead(_383);
        StorageDead(_382);
        goto -> bb201;
    }

    bb153: {
        StorageDead(_385);
        StorageDead(_384);
        _382 = const ();
        StorageDead(_383);
        StorageDead(_382);
        StorageLive(_394);
        StorageLive(_395);
        _395 = &_96;
        StorageLive(_396);
        _396 = _141;
        _394 = anchor_lang::prelude::Rent::minimum_balance(move _395, move _396) -> [return: bb154, unwind: bb222];
    }

    bb154: {
        StorageDead(_396);
        StorageDead(_395);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        _401 = &_142;
        _400 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _401) -> [return: bb155, unwind: bb222];
    }

    bb155: {
        _399 = &_400;
        StorageDead(_401);
        _398 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _399) -> [return: bb156, unwind: bb218];
    }

    bb156: {
        StorageDead(_399);
        StorageLive(_402);
        _402 = _394;
        _397 = Lt(move _398, move _402);
        switchInt(move _397) -> [0: bb161, otherwise: bb157];
    }

    bb157: {
        StorageDead(_402);
        drop(_400) -> [return: bb158, unwind: bb222];
    }

    bb158: {
        StorageDead(_400);
        StorageDead(_398);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        _406 = ConstraintRentExempt;
        _405 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _406) -> [return: bb159, unwind: bb222];
    }

    bb159: {
        StorageDead(_406);
        _404 = anchor_lang::error::Error::with_account_name::<&str>(move _405, const "user_stats") -> [return: bb160, unwind: bb222];
    }

    bb160: {
        StorageDead(_405);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _404);
        StorageDead(_404);
        StorageDead(_397);
        StorageDead(_394);
        goto -> bb201;
    }

    bb161: {
        StorageDead(_402);
        drop(_400) -> [return: bb162, unwind: bb222];
    }

    bb162: {
        StorageDead(_400);
        StorageDead(_398);
        _366 = const ();
        StorageDead(_397);
        StorageDead(_394);
        goto -> bb164;
    }

    bb163: {
        _366 = const ();
        goto -> bb164;
    }

    bb164: {
        StorageDead(_367);
        StorageDead(_366);
        _136 = move _142;
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_137);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &_136;
        _410 = &(*_411);
        _409 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _410) -> [return: bb165, unwind: bb222];
    }

    bb165: {
        StorageDead(_410);
        _408 = ((*_409).6: bool);
        switchInt(move _408) -> [0: bb166, otherwise: bb169];
    }

    bb166: {
        StorageDead(_411);
        StorageDead(_409);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _415 = ConstraintMut;
        _414 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _415) -> [return: bb167, unwind: bb222];
    }

    bb167: {
        StorageDead(_415);
        _413 = anchor_lang::error::Error::with_account_name::<&str>(move _414, const "user_stats") -> [return: bb168, unwind: bb222];
    }

    bb168: {
        StorageDead(_414);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _413);
        StorageDead(_413);
        StorageDead(_408);
        StorageDead(_407);
        goto -> bb207;
    }

    bb169: {
        StorageDead(_411);
        StorageDead(_409);
        _407 = const ();
        StorageDead(_408);
        StorageDead(_407);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &_96;
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = &_136;
        _421 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _422) -> [return: bb170, unwind: bb222];
    }

    bb170: {
        _420 = &_421;
        StorageDead(_422);
        _419 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _420) -> [return: bb171, unwind: bb217];
    }

    bb171: {
        StorageDead(_420);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        StorageLive(_428);
        _428 = &_136;
        _427 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _428) -> [return: bb172, unwind: bb217];
    }

    bb172: {
        _426 = &_427;
        StorageDead(_428);
        _425 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _426) -> [return: bb173, unwind: bb216];
    }

    bb173: {
        StorageDead(_426);
        _424 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _425) -> [return: bb174, unwind: bb216];
    }

    bb174: {
        _477 = const true;
        StorageDead(_425);
        _429 = discriminant(_424);
        switchInt(move _429) -> [0: bb175, 1: bb176, otherwise: bb11];
    }

    bb175: {
        StorageLive(_433);
        _433 = ((_424 as Continue).0: usize);
        _423 = _433;
        StorageDead(_433);
        _417 = anchor_lang::prelude::Rent::is_exempt(move _418, move _419, move _423) -> [return: bb178, unwind: bb224];
    }

    bb176: {
        StorageLive(_430);
        _430 = move ((_424 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_432);
        _432 = move _430;
        _0 = <std::result::Result<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _432) -> [return: bb177, unwind: bb224];
    }

    bb177: {
        StorageDead(_432);
        StorageDead(_430);
        StorageDead(_423);
        StorageDead(_419);
        StorageDead(_418);
        _516 = discriminant(_424);
        drop(_427) -> [return: bb198, unwind: bb217];
    }

    bb178: {
        switchInt(move _417) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        StorageDead(_423);
        StorageDead(_419);
        StorageDead(_418);
        _512 = discriminant(_424);
        drop(_427) -> [return: bb185, unwind: bb217];
    }

    bb180: {
        StorageDead(_423);
        StorageDead(_419);
        StorageDead(_418);
        _514 = discriminant(_424);
        drop(_427) -> [return: bb181, unwind: bb217];
    }

    bb181: {
        StorageDead(_427);
        _477 = const false;
        StorageDead(_424);
        drop(_421) -> [return: bb182, unwind: bb222];
    }

    bb182: {
        StorageDead(_421);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _437 = ConstraintRentExempt;
        _436 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _437) -> [return: bb183, unwind: bb222];
    }

    bb183: {
        StorageDead(_437);
        _435 = anchor_lang::error::Error::with_account_name::<&str>(move _436, const "user_stats") -> [return: bb184, unwind: bb222];
    }

    bb184: {
        StorageDead(_436);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _435);
        StorageDead(_435);
        goto -> bb200;
    }

    bb185: {
        StorageDead(_427);
        _477 = const false;
        StorageDead(_424);
        drop(_421) -> [return: bb186, unwind: bb222];
    }

    bb186: {
        StorageDead(_421);
        _416 = const ();
        StorageDead(_417);
        StorageDead(_416);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        StorageLive(_443);
        _443 = &_21;
        _442 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as AsRef<anchor_lang::prelude::Account<'_, state::state::State>>>::as_ref(move _443) -> [return: bb187, unwind: bb222];
    }

    bb187: {
        _441 = &(*_442);
        StorageDead(_443);
        _440 = <anchor_lang::prelude::Account<'_, state::state::State> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _441) -> [return: bb188, unwind: bb222];
    }

    bb188: {
        StorageDead(_441);
        _439 = ((*_440).6: bool);
        switchInt(move _439) -> [0: bb189, otherwise: bb192];
    }

    bb189: {
        StorageDead(_442);
        StorageDead(_440);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        _447 = ConstraintMut;
        _446 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _447) -> [return: bb190, unwind: bb222];
    }

    bb190: {
        StorageDead(_447);
        _445 = anchor_lang::error::Error::with_account_name::<&str>(move _446, const "state") -> [return: bb191, unwind: bb222];
    }

    bb191: {
        StorageDead(_446);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _445);
        StorageDead(_445);
        StorageDead(_439);
        StorageDead(_438);
        goto -> bb207;
    }

    bb192: {
        StorageDead(_442);
        StorageDead(_440);
        _438 = const ();
        StorageDead(_439);
        StorageDead(_438);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        _452 = &_51;
        _451 = &(*_452);
        _450 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _451) -> [return: bb193, unwind: bb222];
    }

    bb193: {
        StorageDead(_451);
        _449 = ((*_450).6: bool);
        switchInt(move _449) -> [0: bb194, otherwise: bb197];
    }

    bb194: {
        StorageDead(_452);
        StorageDead(_450);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        _456 = ConstraintMut;
        _455 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _456) -> [return: bb195, unwind: bb222];
    }

    bb195: {
        StorageDead(_456);
        _454 = anchor_lang::error::Error::with_account_name::<&str>(move _455, const "payer") -> [return: bb196, unwind: bb222];
    }

    bb196: {
        StorageDead(_455);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Err(move _454);
        StorageDead(_454);
        StorageDead(_449);
        StorageDead(_448);
        goto -> bb207;
    }

    bb197: {
        StorageDead(_452);
        StorageDead(_450);
        _448 = const ();
        StorageDead(_449);
        StorageDead(_448);
        StorageLive(_457);
        StorageLive(_458);
        _458 = move _136;
        StorageLive(_459);
        _459 = move _21;
        StorageLive(_460);
        _460 = move _36;
        StorageLive(_461);
        _461 = move _51;
        StorageLive(_462);
        _462 = move _66;
        StorageLive(_463);
        _463 = move _81;
        _457 = instructions::user::InitializeUserStats::<'_> { user_stats: move _458, state: move _459, authority: move _460, payer: move _461, rent: move _462, system_program: move _463 };
        StorageDead(_463);
        StorageDead(_462);
        StorageDead(_461);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_458);
        _0 = std::result::Result::<instructions::user::InitializeUserStats<'_>, anchor_lang::error::Error>::Ok(move _457);
        StorageDead(_457);
        StorageDead(_136);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb215;
    }

    bb198: {
        StorageDead(_427);
        _477 = const false;
        StorageDead(_424);
        drop(_421) -> [return: bb199, unwind: bb222];
    }

    bb199: {
        StorageDead(_421);
        goto -> bb200;
    }

    bb200: {
        StorageDead(_417);
        StorageDead(_416);
        goto -> bb207;
    }

    bb201: {
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb206;
    }

    bb202: {
        StorageDead(_265);
        _482 = const false;
        StorageDead(_262);
        goto -> bb203;
    }

    bb203: {
        StorageDead(_234);
        goto -> bb204;
    }

    bb204: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        goto -> bb205;
    }

    bb205: {
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb206;
    }

    bb206: {
        StorageDead(_142);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_137);
        goto -> bb207;
    }

    bb207: {
        StorageDead(_136);
        goto -> bb208;
    }

    bb208: {
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb209;
    }

    bb209: {
        StorageDead(_96);
        goto -> bb210;
    }

    bb210: {
        StorageDead(_81);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_66);
        goto -> bb212;
    }

    bb212: {
        StorageDead(_51);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_36);
        drop(_21) -> [return: bb214, unwind: bb223];
    }

    bb214: {
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb215;
    }

    bb215: {
        return;
    }

    bb216 (cleanup): {
        drop(_427) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        drop(_421) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb218 (cleanup): {
        drop(_400) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb219 (cleanup): {
        drop(_244) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb220 (cleanup): {
        drop(_217) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb221 (cleanup): {
        drop(_159) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb222 (cleanup): {
        drop(_21) -> [return: bb223, unwind terminate(cleanup)];
    }

    bb223 (cleanup): {
        resume;
    }

    bb224 (cleanup): {
        _542 = discriminant(_424);
        goto -> bb216;
    }

    bb225 (cleanup): {
        drop(_375) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb226 (cleanup): {
        switchInt(_478) -> [0: bb222, otherwise: bb225];
    }

    bb227 (cleanup): {
        _543 = discriminant(_357);
        goto -> bb222;
    }

    bb228 (cleanup): {
        _544 = discriminant(_347);
        goto -> bb222;
    }

    bb229 (cleanup): {
        _545 = discriminant(_313);
        goto -> bb233;
    }

    bb230 (cleanup): {
        drop(_316) -> [return: bb233, unwind terminate(cleanup)];
    }

    bb231 (cleanup): {
        switchInt(_479) -> [0: bb233, otherwise: bb230];
    }

    bb232 (cleanup): {
        drop(_305) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        switchInt(_480) -> [0: bb238, otherwise: bb232];
    }

    bb234 (cleanup): {
        _546 = discriminant(_270);
        goto -> bb238;
    }

    bb235 (cleanup): {
        drop(_273) -> [return: bb238, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        switchInt(_481) -> [0: bb238, otherwise: bb235];
    }

    bb237 (cleanup): {
        drop(_262) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        switchInt(_482) -> [0: bb222, otherwise: bb237];
    }

    bb239 (cleanup): {
        _547 = discriminant(_253);
        goto -> bb241;
    }

    bb240 (cleanup): {
        drop(_243) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        switchInt(_483) -> [0: bb222, otherwise: bb240];
    }

    bb242 (cleanup): {
        drop(_215) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb243 (cleanup): {
        switchInt(_484) -> [0: bb222, otherwise: bb242];
    }

    bb244 (cleanup): {
        _548 = discriminant(_168);
        goto -> bb248;
    }

    bb245 (cleanup): {
        drop(_171) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb246 (cleanup): {
        switchInt(_485) -> [0: bb248, otherwise: bb245];
    }

    bb247 (cleanup): {
        drop(_158) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        switchInt(_486) -> [0: bb222, otherwise: bb247];
    }

    bb249 (cleanup): {
        drop(_129) -> [return: bb222, unwind terminate(cleanup)];
    }

    bb250 (cleanup): {
        switchInt(_487) -> [0: bb222, otherwise: bb249];
    }

    bb251 (cleanup): {
        _549 = discriminant(_97);
        goto -> bb222;
    }

    bb252 (cleanup): {
        _550 = discriminant(_82);
        goto -> bb222;
    }

    bb253 (cleanup): {
        _551 = discriminant(_67);
        goto -> bb222;
    }

    bb254 (cleanup): {
        _552 = discriminant(_52);
        goto -> bb222;
    }

    bb255 (cleanup): {
        _553 = discriminant(_37);
        goto -> bb222;
    }

    bb256 (cleanup): {
        _554 = discriminant(_22);
        goto -> bb223;
    }
}

alloc298 (size: 10, align: 1) {
    75 73 65 72 5f 73 74 61 74 73                   │ user_stats
}

alloc297 (size: 10, align: 1) {
    75 73 65 72 5f 73 74 61 74 73                   │ user_stats
}

alloc296 (size: 10, align: 1) {
    75 73 65 72 5f 73 74 61 74 73                   │ user_stats
}

alloc295 (size: 10, align: 1) {
    75 73 65 72 5f 73 74 61 74 73                   │ user_stats
}
