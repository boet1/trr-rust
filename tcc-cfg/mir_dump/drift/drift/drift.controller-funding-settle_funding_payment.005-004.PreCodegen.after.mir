// MIR for `controller::funding::settle_funding_payment` after PreCodegen

fn controller::funding::settle_funding_payment(_1: &mut User, _2: &anchor_lang::prelude::Pubkey, _3: &mut PerpMarket, _4: i64) -> std::result::Result<(), error::ErrorCode> {
    debug user => _1;
    debug user_key => _2;
    debug market => _3;
    debug now => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: usize;
    let mut _6: std::result::Result<usize, error::ErrorCode>;
    let mut _7: &[state::user::PerpPosition; 8];
    let _8: &[state::user::PerpPosition; 8];
    let mut _9: u16;
    let mut _10: isize;
    let _11: usize;
    let mut _12: !;
    let mut _13: ();
    let _14: ();
    let mut _15: bool;
    let mut _16: i64;
    let _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let mut _20: !;
    let mut _21: ();
    let _23: &state::perp_market::AMM;
    let mut _25: bool;
    let mut _26: i64;
    let _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    let _30: ();
    let mut _31: bool;
    let mut _32: i128;
    let mut _33: i128;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _35: std::result::Result<i128, error::ErrorCode>;
    let mut _36: i64;
    let _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: isize;
    let mut _42: !;
    let mut _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _47: std::result::Result<i64, error::ErrorCode>;
    let mut _48: i128;
    let mut _49: &state::user::PerpPosition;
    let _50: &state::user::PerpPosition;
    let _51: usize;
    let mut _52: usize;
    let mut _53: bool;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _61: std::result::Result<(), error::ErrorCode>;
    let mut _62: &mut state::user::User;
    let mut _63: i64;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _70: usize;
    let mut _71: usize;
    let mut _72: bool;
    let _73: ();
    let _74: ();
    let mut _75: &[&[u8]];
    let mut _76: &[&[u8]; 1];
    let _77: &[&[u8]; 1];
    let _78: [&[u8]; 1];
    let mut _79: &[u8];
    let _80: &[u8];
    let mut _81: &std::vec::Vec<u8>;
    let _82: &std::vec::Vec<u8>;
    let _83: std::vec::Vec<u8>;
    let mut _84: &state::events::FundingPaymentRecord;
    let _85: &state::events::FundingPaymentRecord;
    let _86: state::events::FundingPaymentRecord;
    let mut _87: i64;
    let mut _88: anchor_lang::prelude::Pubkey;
    let mut _89: anchor_lang::prelude::Pubkey;
    let mut _90: u16;
    let mut _91: i64;
    let mut _92: i64;
    let mut _93: i128;
    let mut _94: i128;
    let mut _95: i64;
    let mut _96: i64;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _98: std::result::Result<i64, error::ErrorCode>;
    let mut _99: i128;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _105: ();
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _107: std::result::Result<(), error::ErrorCode>;
    let mut _108: &mut state::user::PerpPosition;
    let mut _109: &mut state::perp_market::PerpMarket;
    let mut _110: i64;
    let mut _111: isize;
    let mut _113: !;
    let mut _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _116: i64;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _118: std::result::Result<i64, error::ErrorCode>;
    let mut _119: i64;
    let mut _120: i64;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: ();
    scope 1 {
        debug position_index => _5;
        let _22: &state::perp_market::AMM;
        scope 3 {
            debug amm => _22;
            let _24: i128;
            scope 4 {
                debug amm_cumulative_funding_rate => _24;
                let _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _44: i128;
                let _45: i64;
                let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _58: i64;
                scope 5 {
                    debug residual => _41;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _44;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug market_funding_payment => _45;
                    let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _68: ();
                    let _69: &mut state::user::PerpPosition;
                    scope 14 {
                        debug residual => _65;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _68;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug market_position => _69;
                        let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _104: i64;
                        let _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _115: ();
                        let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _125: i64;
                        scope 19 {
                            debug residual => _101;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _104;
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug residual => _112;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _115;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug residual => _122;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _125;
                            scope 30 {
                            }
                        }
                    }
                }
                scope 10 {
                    debug residual => _55;
                    scope 11 {
                    }
                }
                scope 12 {
                    debug val => _58;
                    scope 13 {
                    }
                }
            }
        }
    }
    scope 2 {
        debug position_index => _11;
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).4: [state::user::PerpPosition; 8]);
        _7 = &(*_8);
        StorageLive(_9);
        _9 = ((*_3).21: u16);
        _6 = get_position_index(move _7, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_13);
        _13 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_6);
        goto -> bb55;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_11);
        _11 = ((_6 as Ok).0: usize);
        _5 = _11;
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _5;
        _18 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _19 = Lt(_17, _18);
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb5, unwind continue];
    }

    bb5: {
        _16 = (((*_1).4: [state::user::PerpPosition; 8])[_17].1: i64);
        _15 = Eq(move _16, const 0_i64);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_21);
        _21 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb55;
    }

    bb7: {
        StorageDead(_17);
        StorageDead(_16);
        _14 = const ();
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &((*_3).1: state::perp_market::AMM);
        _22 = &(*_23);
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _5;
        _28 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _29 = Lt(_27, _28);
        assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb8, unwind continue];
    }

    bb8: {
        _26 = (((*_1).4: [state::user::PerpPosition; 8])[_27].1: i64);
        _25 = Gt(move _26, const 0_i64);
        switchInt(move _25) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = ((*_22).34: i128);
        goto -> bb11;
    }

    bb10: {
        StorageDead(_27);
        StorageDead(_26);
        _24 = ((*_22).35: i128);
        goto -> bb11;
    }

    bb11: {
        StorageDead(_25);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = _24;
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = _5;
        _38 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _39 = Lt(_37, _38);
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> [success: bb12, unwind continue];
    }

    bb12: {
        _36 = (((*_1).4: [state::user::PerpPosition; 8])[_37].0: i64);
        _35 = <i64 as Cast>::cast::<i128>(move _36) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_36);
        _34 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        _40 = discriminant(_34);
        switchInt(move _40) -> [0: bb15, 1: bb16, otherwise: bb3];
    }

    bb15: {
        StorageLive(_44);
        _44 = ((_34 as Continue).0: i128);
        _33 = _44;
        StorageDead(_44);
        _31 = Ne(move _32, move _33);
        switchInt(move _31) -> [0: bb19, otherwise: bb18];
    }

    bb16: {
        StorageLive(_41);
        _41 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_43);
        _43 = _41;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb54;
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _24;
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = _5;
        _52 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _53 = Lt(_51, _52);
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> [success: bb20, unwind continue];
    }

    bb19: {
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_32);
        _30 = const ();
        goto -> bb51;
    }

    bb20: {
        _50 = &((*_1).4: [state::user::PerpPosition; 8])[_51];
        _49 = &(*_50);
        _47 = calculate_funding_payment(move _48, move _49) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _47) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_47);
        _54 = discriminant(_46);
        switchInt(move _54) -> [0: bb23, 1: bb24, otherwise: bb3];
    }

    bb23: {
        StorageLive(_58);
        _58 = ((_46 as Continue).0: i64);
        _45 = _58;
        StorageDead(_58);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &mut (*_1);
        StorageLive(_63);
        _63 = _45;
        _61 = User::update_cumulative_perp_funding(move _62, move _63) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_55);
        _55 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_46);
        goto -> bb53;
    }

    bb26: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _61) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_61);
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb28, 1: bb29, otherwise: bb3];
    }

    bb28: {
        StorageLive(_68);
        _68 = ((_60 as Continue).0: ());
        _59 = _68;
        StorageDead(_68);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _5;
        _71 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _72 = Lt(_70, _71);
        assert(move _72, "index out of bounds: the length is {} but the index is {}", move _71, _70) -> [success: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_65);
        _65 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb53;
    }

    bb31: {
        _69 = &mut ((*_1).4: [state::user::PerpPosition; 8])[_70];
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = _4;
        StorageLive(_88);
        _88 = ((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_89);
        _89 = (*_2);
        StorageLive(_90);
        _90 = ((*_69).13: u16);
        StorageLive(_91);
        _91 = _45;
        StorageLive(_92);
        _92 = ((*_69).0: i64);
        StorageLive(_93);
        _93 = ((*_22).34: i128);
        StorageLive(_94);
        _94 = ((*_22).35: i128);
        StorageLive(_95);
        _95 = ((*_69).1: i64);
        _86 = FundingPaymentRecord { ts: move _87, user_authority: move _88, user: move _89, market_index: move _90, funding_payment: move _91, base_asset_amount: move _95, user_last_cumulative_funding: move _92, amm_cumulative_funding_long: move _93, amm_cumulative_funding_short: move _94 };
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        _85 = &_86;
        _84 = &(*_85);
        _83 = <FundingPaymentRecord as anchor_lang::Event>::data(move _84) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = <Vec<u8> as Deref>::deref(move _81) -> [return: bb33, unwind: bb57];
    }

    bb33: {
        _79 = &(*_80);
        StorageDead(_81);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_76);
        _74 = solana_program::log::sol_log_data(move _75) -> [return: bb34, unwind: bb57];
    }

    bb34: {
        StorageDead(_75);
        drop(_83) -> [return: bb35, unwind: bb58];
    }

    bb35: {
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_74);
        _73 = const ();
        StorageDead(_73);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _24;
        _98 = <i128 as Cast>::cast::<i64>(move _99) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_99);
        _97 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _98) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_98);
        _100 = discriminant(_97);
        switchInt(move _100) -> [0: bb38, 1: bb39, otherwise: bb3];
    }

    bb38: {
        StorageLive(_104);
        _104 = ((_97 as Continue).0: i64);
        _96 = _104;
        StorageDead(_104);
        ((*_69).0: i64) = move _96;
        StorageDead(_96);
        StorageDead(_97);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = &mut (*_69);
        StorageLive(_109);
        _109 = &mut (*_3);
        StorageLive(_110);
        _110 = _45;
        _107 = update_quote_asset_and_break_even_amount(move _108, move _109, move _110) -> [return: bb41, unwind continue];
    }

    bb39: {
        StorageLive(_101);
        _101 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_96);
        StorageDead(_97);
        goto -> bb52;
    }

    bb41: {
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        _106 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _107) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_107);
        _111 = discriminant(_106);
        switchInt(move _111) -> [0: bb43, 1: bb44, otherwise: bb3];
    }

    bb43: {
        StorageLive(_115);
        _115 = ((_106 as Continue).0: ());
        _105 = _115;
        StorageDead(_115);
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = (((*_3).1: state::perp_market::AMM).80: i64);
        StorageLive(_120);
        _120 = _45;
        _118 = <i64 as SafeMath>::safe_sub(move _119, move _120) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_112);
        _112 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_114);
        _114 = _112;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _114) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_114);
        StorageDead(_112);
        StorageDead(_106);
        StorageDead(_105);
        goto -> bb52;
    }

    bb46: {
        StorageDead(_120);
        StorageDead(_119);
        _117 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _118) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_118);
        _121 = discriminant(_117);
        switchInt(move _121) -> [0: bb48, 1: bb49, otherwise: bb3];
    }

    bb48: {
        StorageLive(_125);
        _125 = ((_117 as Continue).0: i64);
        _116 = _125;
        StorageDead(_125);
        (((*_3).1: state::perp_market::AMM).80: i64) = move _116;
        StorageDead(_116);
        StorageDead(_117);
        _30 = const ();
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_45);
        goto -> bb51;
    }

    bb49: {
        StorageLive(_122);
        _122 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_117);
        goto -> bb52;
    }

    bb51: {
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_126);
        _126 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _126);
        StorageDead(_126);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_5);
        goto -> bb56;
    }

    bb52: {
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_45);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_22);
        goto -> bb55;
    }

    bb55: {
        StorageDead(_5);
        goto -> bb56;
    }

    bb56: {
        return;
    }

    bb57 (cleanup): {
        drop(_83) -> [return: bb58, unwind terminate(cleanup)];
    }

    bb58 (cleanup): {
        resume;
    }
}
