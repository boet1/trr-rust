// MIR for `calculate_repeg_cost` before PreCodegen

fn calculate_repeg_cost(_1: &AMM, _2: u128) -> std::result::Result<i128, error::ErrorCode> {
    debug amm => _1;
    debug new_peg => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let mut _3: i128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _5: std::result::Result<i128, error::ErrorCode>;
    let mut _6: i128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _8: std::result::Result<i128, error::ErrorCode>;
    let mut _9: i128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _11: std::result::Result<i128, error::ErrorCode>;
    let mut _12: u128;
    let mut _13: isize;
    let _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _15: !;
    let mut _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _17: i128;
    let mut _18: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: u128;
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: i128;
    let mut _27: isize;
    let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _31: i128;
    let mut _32: i128;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _34: std::result::Result<i128, error::ErrorCode>;
    let mut _35: i128;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _37: std::result::Result<i128, error::ErrorCode>;
    let mut _38: u128;
    let mut _39: isize;
    let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: i128;
    let mut _44: i128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _46: std::result::Result<i128, error::ErrorCode>;
    let mut _47: u128;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: i128;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: i128;
    let mut _58: isize;
    let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _62: i128;
    scope 1 {
        debug residual => _14;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _17;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _23;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _26;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _28;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _31;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _40;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _43;
        scope 16 {
        }
    }
    scope 17 {
        debug residual => _49;
        scope 18 {
        }
    }
    scope 19 {
        debug val => _52;
        scope 20 {
        }
    }
    scope 21 {
        debug residual => _54;
        scope 22 {
        }
    }
    scope 23 {
        debug val => _57;
        scope 24 {
        }
    }
    scope 25 {
        debug residual => _59;
        scope 26 {
        }
    }
    scope 27 {
        debug val => _62;
        scope 28 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = ((*_1).6: u128);
        _11 = <u128 as Cast>::cast::<i128>(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        _10 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_11);
        _13 = discriminant(_10);
        switchInt(move _13) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_17);
        _17 = ((_10 as Continue).0: i128);
        _9 = _17;
        StorageDead(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = ((*_1).12: u128);
        _20 = <u128 as Cast>::cast::<i128>(move _21) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_16);
        _16 = _14;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb43;
    }

    bb7: {
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_19 as Continue).0: i128);
        _18 = _26;
        StorageDead(_26);
        _8 = <i128 as SafeMath>::safe_sub(move _9, move _18) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_23);
        _23 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb41;
    }

    bb12: {
        StorageDead(_18);
        StorageDead(_9);
        _7 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_8);
        _27 = discriminant(_7);
        switchInt(move _27) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_7 as Continue).0: i128);
        _6 = _31;
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _2;
        _37 = <u128 as Cast>::cast::<i128>(move _38) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_28);
        _28 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_30);
        StorageDead(_28);
        goto -> bb41;
    }

    bb17: {
        StorageDead(_38);
        _36 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_43);
        _43 = ((_36 as Continue).0: i128);
        _35 = _43;
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_1).11: u128);
        _46 = <u128 as Cast>::cast::<i128>(move _47) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_40);
        _40 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb40;
    }

    bb22: {
        StorageDead(_47);
        _45 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: i128);
        _44 = _52;
        StorageDead(_52);
        _34 = <i128 as SafeMath>::safe_sub(move _35, move _44) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_44);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb38;
    }

    bb27: {
        StorageDead(_44);
        StorageDead(_35);
        _33 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_34);
        _53 = discriminant(_33);
        switchInt(move _53) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_57);
        _57 = ((_33 as Continue).0: i128);
        _32 = _57;
        StorageDead(_57);
        _5 = <i128 as SafeMath>::safe_mul(move _6, move _32) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_54);
        _54 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_56);
        StorageDead(_54);
        goto -> bb38;
    }

    bb32: {
        StorageDead(_32);
        StorageDead(_6);
        _4 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_5);
        _58 = discriminant(_4);
        switchInt(move _58) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_62);
        _62 = ((_4 as Continue).0: i128);
        _3 = _62;
        StorageDead(_62);
        _0 = <i128 as SafeMath>::safe_div(move _3, const _) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_59);
        _59 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb39;
    }

    bb37: {
        StorageDead(_3);
        StorageDead(_45);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_19);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb44;
    }

    bb38: {
        StorageDead(_32);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_3);
        StorageDead(_45);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_36);
        StorageDead(_33);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb42;
    }

    bb42: {
        StorageDead(_19);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb44;
    }

    bb44: {
        return;
    }
}
