// MIR for `calculate_perp_liability_value` before PreCodegen

fn calculate_perp_liability_value(_1: i128, _2: i64, _3: ContractType) -> std::result::Result<u128, error::ErrorCode> {
    debug base_asset_amount => _1;
    debug oracle_price => _2;
    debug contract_type => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &state::perp_market::ContractType;
    let mut _7: &state::perp_market::ContractType;
    let _8: state::perp_market::ContractType;
    let mut _9: !;
    let mut _10: i128;
    let mut _11: i64;
    let _12: u128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _14: std::result::Result<u128, error::ErrorCode>;
    let mut _15: i64;
    let mut _16: i64;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: u128;
    let mut _23: bool;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _26: std::result::Result<u128, error::ErrorCode>;
    let mut _27: u128;
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _29: std::result::Result<u128, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: i128;
    let mut _32: u128;
    let mut _33: u128;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _45: std::result::Result<u128, error::ErrorCode>;
    let mut _46: u128;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _48: std::result::Result<u128, error::ErrorCode>;
    let mut _49: u128;
    let mut _50: i128;
    let mut _51: u128;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: u128;
    let mut _63: &state::perp_market::ContractType;
    scope 1 {
        debug price_u128 => _12;
        let _22: u128;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: u128;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: u128;
        let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _56: u128;
        let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _61: u128;
        scope 6 {
            debug liability_value => _22;
        }
        scope 7 {
            debug residual => _35;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _38;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _40;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _43;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _53;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _56;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _58;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _61;
            scope 22 {
            }
        }
    }
    scope 2 {
        debug residual => _18;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _21;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_3;
        StorageLive(_7);
        _63 = const _;
        _7 = &(*_63);
        _5 = <ContractType as PartialEq>::ne(move _6, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _5) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_10);
        _10 = _1;
        StorageLive(_11);
        _11 = _2;
        _0 = calculate_base_asset_value_with_oracle_price(move _10, move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb42;
    }

    bb4: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _2;
        _15 = core::num::<impl i64>::abs(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        _14 = <i64 as Cast>::cast::<u128>(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        _13 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        _17 = discriminant(_13);
        switchInt(move _17) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_21);
        _21 = ((_13 as Continue).0: u128);
        _12 = _21;
        StorageDead(_21);
        StorageDead(_13);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _1;
        _23 = Lt(move _24, const 0_i128);
        switchInt(move _23) -> [0: bb13, otherwise: bb12];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_13);
        goto -> bb41;
    }

    bb12: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _1;
        _30 = core::num::<impl i128>::unsigned_abs(move _31) -> [return: bb14, unwind continue];
    }

    bb13: {
        StorageDead(_24);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _1;
        _49 = core::num::<impl i128>::unsigned_abs(move _50) -> [return: bb26, unwind continue];
    }

    bb14: {
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _12;
        _32 = core::num::<impl u128>::saturating_sub(const _, move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        _29 = <u128 as SafeMath>::safe_mul(move _30, move _32) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_30);
        _28 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _29) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_29);
        _34 = discriminant(_28);
        switchInt(move _34) -> [0: bb18, 1: bb19, otherwise: bb9];
    }

    bb18: {
        StorageLive(_38);
        _38 = ((_28 as Continue).0: u128);
        _27 = _38;
        StorageDead(_38);
        _26 = <u128 as SafeMath>::safe_div(move _27, const _) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_35);
        _35 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb39;
    }

    bb21: {
        StorageDead(_27);
        _25 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_26);
        _39 = discriminant(_25);
        switchInt(move _39) -> [0: bb23, 1: bb24, otherwise: bb9];
    }

    bb23: {
        StorageLive(_43);
        _43 = ((_25 as Continue).0: u128);
        _22 = _43;
        StorageDead(_43);
        StorageDead(_28);
        StorageDead(_25);
        goto -> bb37;
    }

    bb24: {
        StorageLive(_40);
        _40 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb39;
    }

    bb26: {
        StorageDead(_50);
        StorageLive(_51);
        _51 = _12;
        _48 = <u128 as SafeMath>::safe_mul(move _49, move _51) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_49);
        _47 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _48) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_48);
        _52 = discriminant(_47);
        switchInt(move _52) -> [0: bb29, 1: bb30, otherwise: bb9];
    }

    bb29: {
        StorageLive(_56);
        _56 = ((_47 as Continue).0: u128);
        _46 = _56;
        StorageDead(_56);
        _45 = <u128 as SafeMath>::safe_div(move _46, const _) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_53);
        _53 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_46);
        StorageDead(_45);
        goto -> bb38;
    }

    bb32: {
        StorageDead(_46);
        _44 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _45) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_45);
        _57 = discriminant(_44);
        switchInt(move _57) -> [0: bb34, 1: bb35, otherwise: bb9];
    }

    bb34: {
        StorageLive(_61);
        _61 = ((_44 as Continue).0: u128);
        _22 = _61;
        StorageDead(_61);
        StorageDead(_47);
        StorageDead(_44);
        goto -> bb37;
    }

    bb35: {
        StorageLive(_58);
        _58 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_23);
        StorageLive(_62);
        _62 = _22;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _62);
        StorageDead(_62);
        StorageDead(_22);
        StorageDead(_12);
        goto -> bb42;
    }

    bb38: {
        StorageDead(_47);
        StorageDead(_44);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_28);
        StorageDead(_25);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_12);
        goto -> bb42;
    }

    bb42: {
        return;
    }
}
