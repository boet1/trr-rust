// MIR for `order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::get_perp_baseline_start_end_price_offset` before PreCodegen

fn order_params::<impl at programs/drift/src/state/order_params.rs:47:1: 47:17>::get_perp_baseline_start_end_price_offset(_1: &PerpMarket, _2: controller::position::PositionDirection, _3: u64) -> std::result::Result<(i64, i64), error::ErrorCode> {
    debug perp_market => _1;
    debug direction => _2;
    debug end_buffer_scalar => _3;
    let mut _0: std::result::Result<(i64, i64), error::ErrorCode>;
    let _4: u64;
    let mut _5: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: &state::perp_market::PerpMarket;
    let mut _10: controller::position::PositionDirection;
    let mut _11: isize;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: (u64, u64);
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _20: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _21: state::perp_market::PerpMarket;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: bool;
    let mut _29: &controller::position::PositionDirection;
    let mut _30: &controller::position::PositionDirection;
    let _31: controller::position::PositionDirection;
    let mut _33: u64;
    let mut _34: u64;
    let mut _35: u64;
    let mut _36: u64;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _38: std::result::Result<u64, error::ErrorCode>;
    let mut _39: u64;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _41: std::result::Result<u64, error::ErrorCode>;
    let mut _42: u64;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _44: std::result::Result<u64, error::ErrorCode>;
    let mut _45: u32;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: u64;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _62: ();
    let mut _63: bool;
    let mut _64: u64;
    let mut _65: u64;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _67: std::result::Result<u64, error::ErrorCode>;
    let mut _68: u64;
    let mut _69: u64;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _75: u64;
    let mut _76: u64;
    let mut _77: u64;
    let mut _78: u64;
    let mut _79: u64;
    let mut _80: bool;
    let mut _81: u64;
    let mut _82: u64;
    let mut _83: u64;
    let mut _84: bool;
    let mut _86: bool;
    let mut _87: &controller::position::PositionDirection;
    let mut _88: &controller::position::PositionDirection;
    let _89: controller::position::PositionDirection;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _92: std::result::Result<i64, error::ErrorCode>;
    let mut _93: i64;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _95: std::result::Result<i64, error::ErrorCode>;
    let mut _96: u64;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _98: std::result::Result<u64, error::ErrorCode>;
    let mut _99: u64;
    let mut _100: u64;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: i64;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: i64;
    let mut _118: i64;
    let mut _120: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _121: std::result::Result<i64, error::ErrorCode>;
    let mut _122: i64;
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _124: std::result::Result<i64, error::ErrorCode>;
    let mut _125: u64;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _127: std::result::Result<u64, error::ErrorCode>;
    let mut _128: u64;
    let mut _129: u64;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: i64;
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: i64;
    let mut _147: i64;
    let mut _148: (i64, i64);
    let mut _149: i64;
    let mut _150: i64;
    scope 1 {
        debug oracle_twap => _4;
        let _6: i64;
        let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _15: i64;
        scope 2 {
            debug baseline_start_price_offset => _6;
            let _16: u64;
            let _17: u64;
            let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _26: (u64, u64);
            scope 7 {
                debug min_divisor => _16;
                debug max_divisor => _17;
                let _27: u32;
                let mut _152: &controller::position::PositionDirection;
                scope 12 {
                    debug amm_spread_side_pct => _27;
                    let mut _32: u64;
                    let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _50: u64;
                    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _56: u64;
                    let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _61: u64;
                    scope 13 {
                        debug baseline_end_price_buffer => _32;
                        let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _74: u64;
                        let _85: i64;
                        let _90: i64;
                        let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _105: u64;
                        let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _110: i64;
                        let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _116: i64;
                        let _119: i64;
                        let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _134: u64;
                        let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _139: i64;
                        let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _145: i64;
                        let mut _151: &controller::position::PositionDirection;
                        scope 26 {
                            debug residual => _71;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug val => _74;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug baseline_end_price_offset => _85;
                        }
                        scope 31 {
                            debug auction_end_price => _90;
                        }
                        scope 32 {
                            debug residual => _102;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug val => _105;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug residual => _107;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug val => _110;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug residual => _113;
                            scope 41 {
                            }
                        }
                        scope 42 {
                            debug val => _116;
                            scope 43 {
                            }
                        }
                        scope 44 {
                            debug auction_end_price => _119;
                        }
                        scope 45 {
                            debug residual => _131;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug val => _134;
                            scope 48 {
                            }
                        }
                        scope 49 {
                            debug residual => _136;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug val => _139;
                            scope 52 {
                            }
                        }
                        scope 53 {
                            debug residual => _142;
                            scope 54 {
                            }
                        }
                        scope 55 {
                            debug val => _145;
                            scope 56 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _47;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _50;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug residual => _53;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _56;
                        scope 21 {
                        }
                    }
                    scope 22 {
                        debug residual => _58;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _61;
                        scope 25 {
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _23;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _26;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _12;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _15;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        _4 = core::num::<impl i64>::unsigned_abs(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _10 = _2;
        _8 = order_params::OrderParams::get_perp_baseline_start_price_offset(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: i64);
        _6 = _15;
        StorageDead(_15);
        StorageDead(_7);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = (*_1);
        _20 = PerpMarket::get_auction_end_min_max_divisors(move _21) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb89;
    }

    bb8: {
        StorageDead(_21);
        _19 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb5];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_19 as Continue).0: (u64, u64));
        _18 = _26;
        StorageDead(_26);
        StorageLive(_16);
        _16 = (_18.0: u64);
        StorageLive(_17);
        _17 = (_18.1: u64);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &_2;
        StorageLive(_30);
        _152 = const _;
        _30 = &(*_152);
        _28 = <controller::position::PositionDirection as PartialEq>::eq(move _29, move _30) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb89;
    }

    bb13: {
        switchInt(move _28) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = (((*_1).1: state::perp_market::AMM).66: u32);
        goto -> bb16;
    }

    bb15: {
        StorageDead(_30);
        StorageDead(_29);
        _27 = (((*_1).1: state::perp_market::AMM).65: u32);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_28);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = (((*_1).1: state::perp_market::AMM).60: u64);
        StorageLive(_35);
        _35 = (((*_1).1: state::perp_market::AMM).61: u64);
        _33 = <u64 as Ord>::max(move _34, move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _27;
        _44 = <u32 as Cast>::cast::<u64>(move _45) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_45);
        _43 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_44);
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_50);
        _50 = ((_43 as Continue).0: u64);
        _42 = _50;
        StorageDead(_50);
        StorageLive(_51);
        _51 = _4;
        _41 = <u64 as SafeMath>::safe_mul(move _42, move _51) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_47);
        _47 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb86;
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_42);
        _40 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _41) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_41);
        _52 = discriminant(_40);
        switchInt(move _52) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_40 as Continue).0: u64);
        _39 = _56;
        StorageDead(_56);
        _38 = <u64 as SafeMath>::safe_div(move _39, const _) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb86;
    }

    bb28: {
        StorageDead(_39);
        _37 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _38) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_38);
        _57 = discriminant(_37);
        switchInt(move _57) -> [0: bb30, 1: bb31, otherwise: bb5];
    }

    bb30: {
        StorageLive(_61);
        _61 = ((_37 as Continue).0: u64);
        _36 = _61;
        StorageDead(_61);
        _32 = <u64 as Ord>::max(move _33, move _36) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_58);
        _58 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb87;
    }

    bb33: {
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _3;
        _63 = Ge(move _64, const 1_u64);
        switchInt(move _63) -> [0: bb40, otherwise: bb34];
    }

    bb34: {
        StorageDead(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = _32;
        StorageLive(_69);
        _69 = _3;
        _67 = <u64 as SafeMath>::safe_mul(move _68, move _69) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_69);
        StorageDead(_68);
        _66 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        _70 = discriminant(_66);
        switchInt(move _70) -> [0: bb37, 1: bb38, otherwise: bb5];
    }

    bb37: {
        StorageLive(_74);
        _74 = ((_66 as Continue).0: u64);
        _65 = _74;
        StorageDead(_74);
        _32 = move _65;
        _62 = const ();
        StorageDead(_65);
        StorageDead(_66);
        goto -> bb41;
    }

    bb38: {
        StorageLive(_71);
        _71 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_65);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb88;
    }

    bb40: {
        StorageDead(_64);
        _62 = const ();
        goto -> bb41;
    }

    bb41: {
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _32;
        StorageLive(_77);
        StorageLive(_78);
        _78 = _4;
        StorageLive(_79);
        _79 = _16;
        _80 = Eq(_79, const 0_u64);
        assert(!move _80, "attempt to divide `{}` by zero", _78) -> [success: bb42, unwind continue];
    }

    bb42: {
        _77 = Div(move _78, move _79);
        StorageDead(_79);
        StorageDead(_78);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _4;
        StorageLive(_83);
        _83 = _17;
        _84 = Eq(_83, const 0_u64);
        assert(!move _84, "attempt to divide `{}` by zero", _82) -> [success: bb43, unwind continue];
    }

    bb43: {
        _81 = Div(move _82, move _83);
        StorageDead(_83);
        StorageDead(_82);
        _75 = <u64 as Ord>::clamp(move _76, move _77, move _81) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_81);
        StorageDead(_77);
        StorageDead(_76);
        _32 = move _75;
        StorageDead(_75);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_2;
        StorageLive(_88);
        _151 = const _;
        _88 = &(*_151);
        _86 = <controller::position::PositionDirection as PartialEq>::eq(move _87, move _88) -> [return: bb45, unwind continue];
    }

    bb45: {
        switchInt(move _86) -> [0: bb63, otherwise: bb46];
    }

    bb46: {
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = (((*_1).1: state::perp_market::AMM).43: u64);
        StorageLive(_100);
        _100 = _32;
        _98 = <u64 as SafeMath>::safe_sub(move _99, move _100) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_100);
        StorageDead(_99);
        _97 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _98) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_98);
        _101 = discriminant(_97);
        switchInt(move _101) -> [0: bb49, 1: bb50, otherwise: bb5];
    }

    bb49: {
        StorageLive(_105);
        _105 = ((_97 as Continue).0: u64);
        _96 = _105;
        StorageDead(_105);
        _95 = <u64 as Cast>::cast::<i64>(move _96) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_102);
        _102 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_104);
        StorageDead(_102);
        StorageDead(_96);
        StorageDead(_95);
        goto -> bb83;
    }

    bb52: {
        StorageDead(_96);
        _94 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _95) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_95);
        _106 = discriminant(_94);
        switchInt(move _106) -> [0: bb54, 1: bb55, otherwise: bb5];
    }

    bb54: {
        StorageLive(_110);
        _110 = ((_94 as Continue).0: i64);
        _93 = _110;
        StorageDead(_110);
        StorageLive(_111);
        _111 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        _92 = <i64 as SafeMath>::safe_sub(move _93, move _111) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_107);
        _107 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_109);
        StorageDead(_107);
        goto -> bb83;
    }

    bb57: {
        StorageDead(_111);
        StorageDead(_93);
        _91 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _92) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_92);
        _112 = discriminant(_91);
        switchInt(move _112) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_116);
        _116 = ((_91 as Continue).0: i64);
        _90 = _116;
        StorageDead(_116);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_91);
        StorageLive(_117);
        _117 = _90;
        StorageLive(_118);
        _118 = _6;
        _85 = <i64 as Ord>::min(move _117, move _118) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_113);
        _113 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb84;
    }

    bb62: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_90);
        goto -> bb80;
    }

    bb63: {
        StorageDead(_88);
        StorageDead(_87);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = (((*_1).1: state::perp_market::AMM).44: u64);
        StorageLive(_129);
        _129 = _32;
        _127 = <u64 as SafeMath>::safe_add(move _128, move _129) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_129);
        StorageDead(_128);
        _126 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _127) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_127);
        _130 = discriminant(_126);
        switchInt(move _130) -> [0: bb66, 1: bb67, otherwise: bb5];
    }

    bb66: {
        StorageLive(_134);
        _134 = ((_126 as Continue).0: u64);
        _125 = _134;
        StorageDead(_134);
        _124 = <u64 as Cast>::cast::<i64>(move _125) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_131);
        _131 = ((_126 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb81;
    }

    bb69: {
        StorageDead(_125);
        _123 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _124) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_124);
        _135 = discriminant(_123);
        switchInt(move _135) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_139);
        _139 = ((_123 as Continue).0: i64);
        _122 = _139;
        StorageDead(_139);
        StorageLive(_140);
        _140 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        _121 = <i64 as SafeMath>::safe_sub(move _122, move _140) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_136);
        _136 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_138);
        StorageDead(_136);
        goto -> bb81;
    }

    bb74: {
        StorageDead(_140);
        StorageDead(_122);
        _120 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _121) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_121);
        _141 = discriminant(_120);
        switchInt(move _141) -> [0: bb76, 1: bb77, otherwise: bb5];
    }

    bb76: {
        StorageLive(_145);
        _145 = ((_120 as Continue).0: i64);
        _119 = _145;
        StorageDead(_145);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageLive(_146);
        _146 = _119;
        StorageLive(_147);
        _147 = _6;
        _85 = <i64 as Ord>::max(move _146, move _147) -> [return: bb79, unwind continue];
    }

    bb77: {
        StorageLive(_142);
        _142 = ((_120 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(i64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_144);
        StorageDead(_142);
        goto -> bb82;
    }

    bb79: {
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_119);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_86);
        StorageLive(_148);
        StorageLive(_149);
        _149 = _6;
        StorageLive(_150);
        _150 = _85;
        _148 = (move _149, move _150);
        StorageDead(_150);
        StorageDead(_149);
        _0 = std::result::Result::<(i64, i64), error::ErrorCode>::Ok(move _148);
        StorageDead(_148);
        StorageDead(_85);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb90;
    }

    bb81: {
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb85;
    }

    bb83: {
        StorageDead(_93);
        StorageDead(_92);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb88;
    }

    bb86: {
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_6);
        StorageDead(_4);
        goto -> bb90;
    }

    bb90: {
        return;
    }
}
