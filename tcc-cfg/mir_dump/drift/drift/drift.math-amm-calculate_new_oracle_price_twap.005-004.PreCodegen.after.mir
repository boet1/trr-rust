// MIR for `calculate_new_oracle_price_twap` after PreCodegen

fn calculate_new_oracle_price_twap(_1: &AMM, _2: i64, _3: i64, _4: TwapPeriod) -> std::result::Result<i64, error::ErrorCode> {
    debug amm => _1;
    debug now => _2;
    debug oracle_price => _3;
    debug twap_period => _4;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _5: u64;
    let _6: i64;
    let mut _7: (u64, i64);
    let mut _8: isize;
    let mut _9: u64;
    let mut _10: i64;
    let mut _11: u64;
    let mut _12: i64;
    let mut _14: isize;
    let mut _16: i64;
    let mut _17: bool;
    let mut _18: i64;
    let mut _19: i64;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _21: std::result::Result<i64, error::ErrorCode>;
    let mut _22: i64;
    let mut _23: i64;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: i64;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _32: std::result::Result<i64, error::ErrorCode>;
    let mut _33: i64;
    let mut _34: i64;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: bool;
    let mut _42: i64;
    let mut _43: i64;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _46: std::result::Result<i64, error::ErrorCode>;
    let mut _47: i64;
    let mut _48: i64;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _54: ();
    let mut _55: &str;
    let _56: &str;
    let mut _57: &std::string::String;
    let _58: &std::string::String;
    let _59: std::string::String;
    let mut _61: std::fmt::Arguments<'_>;
    let mut _62: &[&str];
    let mut _63: &[&str; 2];
    let _64: &[&str; 2];
    let _65: [&str; 2];
    let mut _66: &[core::fmt::rt::Argument<'_>];
    let mut _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: &[core::fmt::rt::Argument<'_>; 1];
    let _69: [core::fmt::rt::Argument<'_>; 1];
    let mut _70: core::fmt::rt::Argument<'_>;
    let mut _71: &i64;
    let _72: &i64;
    let mut _74: i64;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _76: std::result::Result<i64, error::ErrorCode>;
    let mut _77: i64;
    let mut _78: i64;
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _85: std::result::Result<i64, error::ErrorCode>;
    let mut _86: i64;
    let mut _87: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _88: std::result::Result<i64, error::ErrorCode>;
    let mut _89: u64;
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _95: i64;
    let mut _96: i64;
    let mut _97: i64;
    let mut _98: std::option::Option<i64>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: i64;
    let mut _105: i64;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _107: std::result::Result<i64, error::ErrorCode>;
    let mut _108: i64;
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _114: i64;
    let mut _115: i64;
    let mut _116: std::option::Option<i64>;
    scope 1 {
        debug last_mark_twap => _5;
        debug last_oracle_twap => _6;
        let _13: i64;
        scope 2 {
            debug period => _13;
            let _15: i64;
            let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _28: i64;
            scope 3 {
                debug since_last => _15;
                let _29: i64;
                let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _39: i64;
                scope 8 {
                    debug from_start => _29;
                    let _40: i64;
                    let _44: i64;
                    let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _53: i64;
                    scope 13 {
                        debug interpolated_oracle_price => _40;
                        let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _113: i64;
                        scope 33 {
                            debug residual => _110;
                            scope 34 {
                            }
                        }
                        scope 35 {
                            debug val => _113;
                            scope 36 {
                            }
                        }
                    }
                    scope 14 {
                        debug since_last_valid => _44;
                        let _60: std::string::String;
                        let _73: i64;
                        let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _83: i64;
                        let mut _117: &[&str; 2];
                        scope 19 {
                            debug res => _60;
                        }
                        scope 20 {
                            debug from_start_valid => _73;
                            let _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _94: i64;
                            let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _103: i64;
                            scope 25 {
                                debug residual => _91;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _94;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug residual => _100;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _103;
                                scope 32 {
                                }
                            }
                        }
                        scope 21 {
                            debug residual => _80;
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug val => _83;
                            scope 24 {
                            }
                        }
                    }
                    scope 15 {
                        debug residual => _50;
                        scope 16 {
                        }
                    }
                    scope 17 {
                        debug val => _53;
                        scope 18 {
                        }
                    }
                }
                scope 9 {
                    debug residual => _36;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _39;
                    scope 12 {
                    }
                }
            }
            scope 4 {
                debug residual => _25;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _28;
                scope 7 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_7);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        StorageLive(_11);
        _11 = ((*_1).46: u64);
        StorageLive(_12);
        _12 = (((*_1).1: state::oracle::HistoricalOracleData).4: i64);
        _7 = (move _11, move _12);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_9);
        _9 = ((*_1).45: u64);
        StorageLive(_10);
        _10 = (((*_1).1: state::oracle::HistoricalOracleData).3: i64);
        _7 = (move _9, move _10);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb4;
    }

    bb4: {
        StorageLive(_5);
        _5 = (_7.0: u64);
        StorageLive(_6);
        _6 = (_7.1: i64);
        StorageDead(_7);
        StorageLive(_13);
        _14 = discriminant(_4);
        switchInt(move _14) -> [0: bb6, 1: bb5, otherwise: bb2];
    }

    bb5: {
        _13 = const _ as i64 (IntToInt);
        goto -> bb7;
    }

    bb6: {
        _13 = ((*_1).51: i64);
        goto -> bb7;
    }

    bb7: {
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _13;
        _17 = Eq(move _18, const 0_i64);
        switchInt(move _17) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_18);
        _16 = const 1_i64;
        goto -> bb10;
    }

    bb9: {
        StorageDead(_18);
        _16 = const 0_i64;
        goto -> bb10;
    }

    bb10: {
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _2;
        StorageLive(_23);
        _23 = (((*_1).1: state::oracle::HistoricalOracleData).5: i64);
        _21 = <i64 as SafeMath>::safe_sub(move _22, move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _21) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_21);
        _24 = discriminant(_20);
        switchInt(move _24) -> [0: bb13, 1: bb14, otherwise: bb2];
    }

    bb13: {
        StorageLive(_28);
        _28 = ((_20 as Continue).0: i64);
        _19 = _28;
        StorageDead(_28);
        _15 = std::cmp::max::<i64>(move _16, move _19) -> [return: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_25);
        _25 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_20);
        goto -> bb63;
    }

    bb16: {
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_20);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _13;
        StorageLive(_34);
        _34 = _15;
        _32 = <i64 as SafeMath>::safe_sub(move _33, move _34) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _32) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_32);
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb19, 1: bb20, otherwise: bb2];
    }

    bb19: {
        StorageLive(_39);
        _39 = ((_31 as Continue).0: i64);
        _30 = _39;
        StorageDead(_39);
        _29 = std::cmp::max::<i64>(const 0_i64, move _30) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_36);
        _36 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_31);
        goto -> bb62;
    }

    bb22: {
        StorageDead(_30);
        StorageDead(_31);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = ((*_1).62: i64);
        StorageLive(_43);
        _43 = (((*_1).1: state::oracle::HistoricalOracleData).5: i64);
        _41 = Gt(move _42, move _43);
        switchInt(move _41) -> [0: bb51, otherwise: bb23];
    }

    bb23: {
        StorageDead(_43);
        StorageDead(_42);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = ((*_1).62: i64);
        StorageLive(_48);
        _48 = (((*_1).1: state::oracle::HistoricalOracleData).5: i64);
        _46 = <i64 as SafeMath>::safe_sub(move _47, move _48) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_48);
        StorageDead(_47);
        _45 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_46);
        _49 = discriminant(_45);
        switchInt(move _49) -> [0: bb26, 1: bb27, otherwise: bb2];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_45 as Continue).0: i64);
        _44 = _53;
        StorageDead(_53);
        StorageDead(_45);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _117 = const _;
        _64 = &(*_117);
        _63 = &(*_64);
        _62 = move _63 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_63);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_44;
        _71 = &(*_72);
        _70 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _71) -> [return: bb29, unwind continue];
    }

    bb27: {
        StorageLive(_50);
        _50 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_52);
        StorageDead(_50);
        StorageDead(_45);
        goto -> bb60;
    }

    bb29: {
        StorageDead(_71);
        _69 = [move _70];
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        _66 = move _67 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_67);
        _61 = Arguments::<'_>::new_v1(move _62, move _66) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_66);
        StorageDead(_62);
        _60 = format(move _61) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_61);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_64);
        _59 = move _60;
        StorageDead(_60);
        _58 = &_59;
        _57 = &(*_58);
        _56 = <String as Deref>::deref(move _57) -> [return: bb32, unwind: bb65];
    }

    bb32: {
        _55 = &(*_56);
        StorageDead(_57);
        _54 = solana_program::log::sol_log(move _55) -> [return: bb33, unwind: bb65];
    }

    bb33: {
        StorageDead(_55);
        drop(_59) -> [return: bb34, unwind: bb66];
    }

    bb34: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = _13;
        StorageLive(_78);
        _78 = _44;
        _76 = <i64 as SafeMath>::safe_sub(move _77, move _78) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_78);
        StorageDead(_77);
        _75 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _76) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_76);
        _79 = discriminant(_75);
        switchInt(move _79) -> [0: bb37, 1: bb38, otherwise: bb2];
    }

    bb37: {
        StorageLive(_83);
        _83 = ((_75 as Continue).0: i64);
        _74 = _83;
        StorageDead(_83);
        _73 = std::cmp::max::<i64>(const 1_i64, move _74) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_80);
        _80 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_82);
        StorageDead(_80);
        StorageDead(_74);
        StorageDead(_75);
        StorageDead(_73);
        goto -> bb60;
    }

    bb40: {
        StorageDead(_74);
        StorageDead(_75);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = _5;
        _88 = <u64 as Cast>::cast::<i64>(move _89) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_89);
        _87 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _88) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_88);
        _90 = discriminant(_87);
        switchInt(move _90) -> [0: bb43, 1: bb44, otherwise: bb2];
    }

    bb43: {
        StorageLive(_94);
        _94 = ((_87 as Continue).0: i64);
        _86 = _94;
        StorageDead(_94);
        StorageLive(_95);
        _95 = _3;
        StorageLive(_96);
        _96 = _44;
        StorageLive(_97);
        _97 = _73;
        StorageLive(_98);
        _98 = Option::<i64>::None;
        _85 = calculate_weighted_average(move _86, move _95, move _96, move _97, move _98) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_91);
        _91 = ((_87 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_93);
        _93 = _91;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _93) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb59;
    }

    bb46: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_95);
        StorageDead(_86);
        _84 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _85) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_85);
        _99 = discriminant(_84);
        switchInt(move _99) -> [0: bb48, 1: bb49, otherwise: bb2];
    }

    bb48: {
        StorageLive(_103);
        _103 = ((_84 as Continue).0: i64);
        _40 = _103;
        StorageDead(_103);
        StorageDead(_73);
        StorageDead(_44);
        StorageDead(_87);
        StorageDead(_84);
        goto -> bb52;
    }

    bb49: {
        StorageLive(_100);
        _100 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb59;
    }

    bb51: {
        StorageDead(_43);
        StorageDead(_42);
        _40 = _3;
        goto -> bb52;
    }

    bb52: {
        StorageDead(_41);
        StorageLive(_104);
        _104 = _40;
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _108 = _6;
        _107 = <i64 as Cast>::cast::<i64>(move _108) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_108);
        _106 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _107) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_107);
        _109 = discriminant(_106);
        switchInt(move _109) -> [0: bb55, 1: bb56, otherwise: bb2];
    }

    bb55: {
        StorageLive(_113);
        _113 = ((_106 as Continue).0: i64);
        _105 = _113;
        StorageDead(_113);
        StorageLive(_114);
        _114 = _15;
        StorageLive(_115);
        _115 = _29;
        StorageLive(_116);
        _116 = Option::<i64>::None;
        _0 = calculate_weighted_average(move _104, move _105, move _114, move _115, move _116) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_110);
        _110 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_40);
        StorageDead(_29);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_106);
        goto -> bb64;
    }

    bb58: {
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_40);
        StorageDead(_29);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_106);
        goto -> bb64;
    }

    bb59: {
        StorageDead(_73);
        StorageDead(_44);
        StorageDead(_87);
        StorageDead(_84);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_44);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_29);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb64;
    }

    bb64: {
        return;
    }

    bb65 (cleanup): {
        drop(_59) -> [return: bb66, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        resume;
    }
}
