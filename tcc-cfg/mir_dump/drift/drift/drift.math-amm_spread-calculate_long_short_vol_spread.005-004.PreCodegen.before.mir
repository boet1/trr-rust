// MIR for `calculate_long_short_vol_spread` before PreCodegen

fn calculate_long_short_vol_spread(_1: u64, _2: u64, _3: u64, _4: u64, _5: u64, _6: u64, _7: u64) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug last_oracle_conf_pct => _1;
    debug reserve_price => _2;
    debug mark_std => _3;
    debug oracle_std => _4;
    debug long_intensity_volume => _5;
    debug short_intensity_volume => _6;
    debug volume_24h => _7;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _16: std::result::Result<u128, error::ErrorCode>;
    let mut _17: u128;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u64;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _22: std::result::Result<u64, error::ErrorCode>;
    let mut _23: u64;
    let mut _24: u64;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: u64;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: u128;
    let mut _35: isize;
    let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _39: u128;
    let mut _40: u128;
    let mut _41: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _42: std::result::Result<u128, error::ErrorCode>;
    let mut _43: u64;
    let mut _44: isize;
    let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: u128;
    let mut _49: isize;
    let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _53: u128;
    let mut _54: isize;
    let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _58: u128;
    let mut _60: u128;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _62: std::result::Result<u128, error::ErrorCode>;
    let mut _63: u64;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: u128;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _71: std::result::Result<u128, error::ErrorCode>;
    let mut _72: u128;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: bool;
    let mut _82: u128;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _84: std::result::Result<u128, error::ErrorCode>;
    let mut _85: u128;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _87: std::result::Result<u128, error::ErrorCode>;
    let mut _88: u128;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _90: std::result::Result<u128, error::ErrorCode>;
    let mut _91: u64;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: u128;
    let mut _103: u128;
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _105: std::result::Result<u128, error::ErrorCode>;
    let mut _106: u64;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _117: u128;
    let mut _118: u128;
    let mut _120: u128;
    let mut _121: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _122: std::result::Result<u128, error::ErrorCode>;
    let mut _123: u128;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _125: std::result::Result<u128, error::ErrorCode>;
    let mut _126: u128;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _128: std::result::Result<u128, error::ErrorCode>;
    let mut _129: u64;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: u128;
    let mut _141: u128;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _143: std::result::Result<u128, error::ErrorCode>;
    let mut _144: u64;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _150: isize;
    let mut _152: !;
    let mut _153: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _155: u128;
    let mut _156: u128;
    let mut _158: bool;
    let mut _159: u64;
    let mut _160: u64;
    let mut _161: bool;
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _163: std::result::Result<u64, error::ErrorCode>;
    let mut _164: u64;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _170: (u64, u64);
    let mut _171: u64;
    let mut _172: u64;
    let mut _173: u64;
    let mut _174: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _175: std::result::Result<u64, error::ErrorCode>;
    let mut _176: u128;
    let mut _177: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _178: std::result::Result<u128, error::ErrorCode>;
    let mut _179: u128;
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _181: std::result::Result<u128, error::ErrorCode>;
    let mut _182: u128;
    let mut _183: u128;
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _189: isize;
    let mut _191: !;
    let mut _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _194: isize;
    let mut _196: !;
    let mut _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _199: u64;
    let mut _200: u64;
    let mut _201: u64;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _203: std::result::Result<u64, error::ErrorCode>;
    let mut _204: u128;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _206: std::result::Result<u128, error::ErrorCode>;
    let mut _207: u128;
    let mut _208: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _209: std::result::Result<u128, error::ErrorCode>;
    let mut _210: u128;
    let mut _211: u128;
    let mut _212: isize;
    let mut _214: !;
    let mut _215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _217: isize;
    let mut _219: !;
    let mut _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _222: isize;
    let mut _224: !;
    let mut _225: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug market_avg_std_pct => _8;
        let _59: u128;
        let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _68: u128;
        let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _77: u128;
        scope 26 {
            debug vol_spread => _59;
            let _78: u128;
            scope 35 {
                debug factor_clamp_min => _78;
                let _80: u128;
                scope 36 {
                    debug factor_clamp_max => _80;
                    let _81: u128;
                    let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _96: u128;
                    let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _101: u128;
                    let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _111: u128;
                    let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _116: u128;
                    scope 37 {
                        debug long_vol_spread_factor => _81;
                        let _119: u128;
                        let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _134: u128;
                        let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _139: u128;
                        let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _149: u128;
                        let _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _154: u128;
                        scope 54 {
                            debug short_vol_spread_factor => _119;
                            let _157: u64;
                            let _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _169: u64;
                            scope 71 {
                                debug conf_component => _157;
                                let _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _188: u128;
                                let _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _193: u128;
                                let _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _198: u64;
                                let _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _216: u128;
                                let _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _221: u128;
                                let _223: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _226: u64;
                                scope 76 {
                                    debug residual => _185;
                                    scope 77 {
                                    }
                                }
                                scope 78 {
                                    debug val => _188;
                                    scope 79 {
                                    }
                                }
                                scope 80 {
                                    debug residual => _190;
                                    scope 81 {
                                    }
                                }
                                scope 82 {
                                    debug val => _193;
                                    scope 83 {
                                    }
                                }
                                scope 84 {
                                    debug residual => _195;
                                    scope 85 {
                                    }
                                }
                                scope 86 {
                                    debug val => _198;
                                    scope 87 {
                                    }
                                }
                                scope 88 {
                                    debug residual => _213;
                                    scope 89 {
                                    }
                                }
                                scope 90 {
                                    debug val => _216;
                                    scope 91 {
                                    }
                                }
                                scope 92 {
                                    debug residual => _218;
                                    scope 93 {
                                    }
                                }
                                scope 94 {
                                    debug val => _221;
                                    scope 95 {
                                    }
                                }
                                scope 96 {
                                    debug residual => _223;
                                    scope 97 {
                                    }
                                }
                                scope 98 {
                                    debug val => _226;
                                    scope 99 {
                                    }
                                }
                            }
                            scope 72 {
                                debug residual => _166;
                                scope 73 {
                                }
                            }
                            scope 74 {
                                debug val => _169;
                                scope 75 {
                                }
                            }
                        }
                        scope 55 {
                            debug residual => _131;
                            scope 56 {
                            }
                        }
                        scope 57 {
                            debug val => _134;
                            scope 58 {
                            }
                        }
                        scope 59 {
                            debug residual => _136;
                            scope 60 {
                            }
                        }
                        scope 61 {
                            debug val => _139;
                            scope 62 {
                            }
                        }
                        scope 63 {
                            debug residual => _146;
                            scope 64 {
                            }
                        }
                        scope 65 {
                            debug val => _149;
                            scope 66 {
                            }
                        }
                        scope 67 {
                            debug residual => _151;
                            scope 68 {
                            }
                        }
                        scope 69 {
                            debug val => _154;
                            scope 70 {
                            }
                        }
                    }
                    scope 38 {
                        debug residual => _93;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug val => _96;
                        scope 41 {
                        }
                    }
                    scope 42 {
                        debug residual => _98;
                        scope 43 {
                        }
                    }
                    scope 44 {
                        debug val => _101;
                        scope 45 {
                        }
                    }
                    scope 46 {
                        debug residual => _108;
                        scope 47 {
                        }
                    }
                    scope 48 {
                        debug val => _111;
                        scope 49 {
                        }
                    }
                    scope 50 {
                        debug residual => _113;
                        scope 51 {
                        }
                    }
                    scope 52 {
                        debug val => _116;
                        scope 53 {
                        }
                    }
                }
            }
        }
        scope 27 {
            debug residual => _65;
            scope 28 {
            }
        }
        scope 29 {
            debug val => _68;
            scope 30 {
            }
        }
        scope 31 {
            debug residual => _74;
            scope 32 {
            }
        }
        scope 33 {
            debug val => _77;
            scope 34 {
            }
        }
    }
    scope 2 {
        debug residual => _26;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _29;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _31;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _34;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _36;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _39;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _45;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _48;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _50;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _53;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _55;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _58;
        scope 25 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _4;
        StorageLive(_24);
        _24 = _3;
        _22 = <u64 as SafeMath>::safe_add(move _23, move _24) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _22) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_22);
        _25 = discriminant(_21);
        switchInt(move _25) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_29);
        _29 = ((_21 as Continue).0: u64);
        _20 = _29;
        StorageDead(_29);
        _19 = <u64 as Cast>::cast::<u128>(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_26);
        _26 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb146;
    }

    bb7: {
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _30 = discriminant(_18);
        switchInt(move _30) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_34);
        _34 = ((_18 as Continue).0: u128);
        _17 = _34;
        StorageDead(_34);
        _16 = <u128 as SafeMath>::safe_mul(move _17, const _) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_31);
        _31 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb146;
    }

    bb12: {
        StorageDead(_17);
        _15 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _16) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_16);
        _35 = discriminant(_15);
        switchInt(move _35) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_39);
        _39 = ((_15 as Continue).0: u128);
        _14 = _39;
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _2;
        _42 = <u64 as Cast>::cast::<u128>(move _43) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_38);
        StorageDead(_36);
        goto -> bb147;
    }

    bb17: {
        StorageDead(_43);
        _41 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _42) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_42);
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_48);
        _48 = ((_41 as Continue).0: u128);
        _40 = _48;
        StorageDead(_48);
        _13 = <u128 as SafeMath>::safe_div(move _14, move _40) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_41 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_40);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb144;
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_13);
        _49 = discriminant(_12);
        switchInt(move _49) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_53);
        _53 = ((_12 as Continue).0: u128);
        _11 = _53;
        StorageDead(_53);
        _10 = <u128 as SafeMath>::safe_div(move _11, const 2_u128) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_50);
        _50 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_52);
        StorageDead(_50);
        goto -> bb144;
    }

    bb27: {
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_10);
        _54 = discriminant(_9);
        switchInt(move _54) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_58);
        _58 = ((_9 as Continue).0: u128);
        _8 = _58;
        StorageDead(_58);
        StorageDead(_41);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _1;
        _62 = <u64 as Cast>::cast::<u128>(move _63) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_55);
        _55 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_57);
        StorageDead(_55);
        goto -> bb145;
    }

    bb32: {
        StorageDead(_63);
        _61 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_62);
        _64 = discriminant(_61);
        switchInt(move _64) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_68);
        _68 = ((_61 as Continue).0: u128);
        _60 = _68;
        StorageDead(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = _8;
        _71 = <u128 as SafeMath>::safe_div(move _72, const 4_u128) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_65);
        _65 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_60);
        goto -> bb142;
    }

    bb37: {
        StorageDead(_72);
        _70 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_71);
        _73 = discriminant(_70);
        switchInt(move _73) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_77);
        _77 = ((_70 as Continue).0: u128);
        _69 = _77;
        StorageDead(_77);
        _59 = <u128 as Ord>::max(move _60, move _69) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_74);
        _74 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_69);
        StorageDead(_60);
        StorageDead(_70);
        goto -> bb142;
    }

    bb42: {
        StorageDead(_69);
        StorageDead(_60);
        StorageDead(_70);
        StorageDead(_61);
        StorageLive(_78);
        _79 = Eq(const 100_u128, const 0_u128);
        assert(!move _79, "attempt to divide `{}` by zero", const _) -> [success: bb43, unwind continue];
    }

    bb43: {
        _78 = Div(const _, const 100_u128);
        StorageLive(_80);
        _80 = const _;
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _5;
        _90 = <u64 as Cast>::cast::<u128>(move _91) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_91);
        _89 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _90) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_90);
        _92 = discriminant(_89);
        switchInt(move _92) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_96);
        _96 = ((_89 as Continue).0: u128);
        _88 = _96;
        StorageDead(_96);
        _87 = <u128 as SafeMath>::safe_mul(move _88, const _) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_93);
        _93 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb139;
    }

    bb49: {
        StorageDead(_88);
        _86 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _87) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_87);
        _97 = discriminant(_86);
        switchInt(move _97) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_101);
        _101 = ((_86 as Continue).0: u128);
        _85 = _101;
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = _7;
        _105 = <u64 as Cast>::cast::<u128>(move _106) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_98);
        _98 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_100);
        StorageDead(_98);
        goto -> bb139;
    }

    bb54: {
        StorageDead(_106);
        _104 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _105) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb56, 1: bb57, otherwise: bb4];
    }

    bb56: {
        StorageLive(_111);
        _111 = ((_104 as Continue).0: u128);
        _103 = _111;
        StorageDead(_111);
        _102 = std::cmp::max::<u128>(move _103, const 1_u128) -> [return: bb59, unwind continue];
    }

    bb57: {
        StorageLive(_108);
        _108 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb138;
    }

    bb59: {
        StorageDead(_103);
        _84 = <u128 as SafeMath>::safe_div(move _85, move _102) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_102);
        StorageDead(_85);
        _83 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _84) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_84);
        _112 = discriminant(_83);
        switchInt(move _112) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_116);
        _116 = ((_83 as Continue).0: u128);
        _82 = _116;
        StorageDead(_116);
        StorageLive(_117);
        _117 = _78;
        StorageLive(_118);
        _118 = _80;
        _81 = <u128 as Ord>::clamp(move _82, move _117, move _118) -> [return: bb65, unwind continue];
    }

    bb63: {
        StorageLive(_113);
        _113 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb138;
    }

    bb65: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_82);
        StorageDead(_104);
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_83);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _6;
        _128 = <u64 as Cast>::cast::<u128>(move _129) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_129);
        _127 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _128) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_128);
        _130 = discriminant(_127);
        switchInt(move _130) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_134);
        _134 = ((_127 as Continue).0: u128);
        _126 = _134;
        StorageDead(_134);
        _125 = <u128 as SafeMath>::safe_mul(move _126, const _) -> [return: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_131);
        _131 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb135;
    }

    bb71: {
        StorageDead(_126);
        _124 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _125) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_125);
        _135 = discriminant(_124);
        switchInt(move _135) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_139);
        _139 = ((_124 as Continue).0: u128);
        _123 = _139;
        StorageDead(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _144 = _7;
        _143 = <u64 as Cast>::cast::<u128>(move _144) -> [return: bb76, unwind continue];
    }

    bb74: {
        StorageLive(_136);
        _136 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_138);
        StorageDead(_136);
        goto -> bb135;
    }

    bb76: {
        StorageDead(_144);
        _142 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _143) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_143);
        _145 = discriminant(_142);
        switchInt(move _145) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_149);
        _149 = ((_142 as Continue).0: u128);
        _141 = _149;
        StorageDead(_149);
        _140 = std::cmp::max::<u128>(move _141, const 1_u128) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_146);
        _146 = ((_142 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_141);
        StorageDead(_140);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb134;
    }

    bb81: {
        StorageDead(_141);
        _122 = <u128 as SafeMath>::safe_div(move _123, move _140) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_140);
        StorageDead(_123);
        _121 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _122) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_122);
        _150 = discriminant(_121);
        switchInt(move _150) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_154);
        _154 = ((_121 as Continue).0: u128);
        _120 = _154;
        StorageDead(_154);
        StorageLive(_155);
        _155 = _78;
        StorageLive(_156);
        _156 = _80;
        _119 = <u128 as Ord>::clamp(move _120, move _155, move _156) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_151);
        _151 = ((_121 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_153);
        _153 = _151;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _153) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_153);
        StorageDead(_151);
        goto -> bb134;
    }

    bb87: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_120);
        StorageDead(_142);
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_121);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _159 = _1;
        StorageLive(_160);
        _161 = Eq(const 400_u64, const 0_u64);
        assert(!move _161, "attempt to divide `{}` by zero", const _) -> [success: bb88, unwind continue];
    }

    bb88: {
        _160 = Div(const _, const 400_u64);
        _158 = Gt(move _159, move _160);
        switchInt(move _158) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        StorageDead(_160);
        StorageDead(_159);
        _157 = _1;
        goto -> bb96;
    }

    bb90: {
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = _1;
        _163 = <u64 as SafeMath>::safe_div(move _164, const 20_u64) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_164);
        _162 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _163) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_163);
        _165 = discriminant(_162);
        switchInt(move _165) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        StorageLive(_169);
        _169 = ((_162 as Continue).0: u64);
        _157 = _169;
        StorageDead(_169);
        StorageDead(_162);
        goto -> bb96;
    }

    bb94: {
        StorageLive(_166);
        _166 = ((_162 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_168);
        _168 = _166;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _168) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_162);
        StorageDead(_158);
        StorageDead(_157);
        goto -> bb137;
    }

    bb96: {
        StorageDead(_158);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = _157;
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _59;
        StorageLive(_183);
        _183 = _81;
        _181 = <u128 as SafeMath>::safe_mul(move _182, move _183) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_183);
        StorageDead(_182);
        _180 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _181) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_181);
        _184 = discriminant(_180);
        switchInt(move _184) -> [0: bb99, 1: bb100, otherwise: bb4];
    }

    bb99: {
        StorageLive(_188);
        _188 = ((_180 as Continue).0: u128);
        _179 = _188;
        StorageDead(_188);
        _178 = <u128 as SafeMath>::safe_div(move _179, const _) -> [return: bb102, unwind continue];
    }

    bb100: {
        StorageLive(_185);
        _185 = ((_180 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_187);
        _187 = _185;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _187) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb131;
    }

    bb102: {
        StorageDead(_179);
        _177 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _178) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_178);
        _189 = discriminant(_177);
        switchInt(move _189) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_193);
        _193 = ((_177 as Continue).0: u128);
        _176 = _193;
        StorageDead(_193);
        _175 = <u128 as Cast>::cast::<u64>(move _176) -> [return: bb107, unwind continue];
    }

    bb105: {
        StorageLive(_190);
        _190 = ((_177 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_192);
        _192 = _190;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _192) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_192);
        StorageDead(_190);
        goto -> bb131;
    }

    bb107: {
        StorageDead(_176);
        _174 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _175) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_175);
        _194 = discriminant(_174);
        switchInt(move _194) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_198);
        _198 = ((_174 as Continue).0: u64);
        _173 = _198;
        StorageDead(_198);
        _171 = std::cmp::max::<u64>(move _172, move _173) -> [return: bb112, unwind continue];
    }

    bb110: {
        StorageLive(_195);
        _195 = ((_174 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_197);
        _197 = _195;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _197) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_197);
        StorageDead(_195);
        goto -> bb132;
    }

    bb112: {
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_199);
        StorageLive(_200);
        _200 = _157;
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = _59;
        StorageLive(_211);
        _211 = _119;
        _209 = <u128 as SafeMath>::safe_mul(move _210, move _211) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_211);
        StorageDead(_210);
        _208 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _209) -> [return: bb114, unwind continue];
    }

    bb114: {
        StorageDead(_209);
        _212 = discriminant(_208);
        switchInt(move _212) -> [0: bb115, 1: bb116, otherwise: bb4];
    }

    bb115: {
        StorageLive(_216);
        _216 = ((_208 as Continue).0: u128);
        _207 = _216;
        StorageDead(_216);
        _206 = <u128 as SafeMath>::safe_div(move _207, const _) -> [return: bb118, unwind continue];
    }

    bb116: {
        StorageLive(_213);
        _213 = ((_208 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_215);
        _215 = _213;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _215) -> [return: bb117, unwind continue];
    }

    bb117: {
        StorageDead(_215);
        StorageDead(_213);
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb129;
    }

    bb118: {
        StorageDead(_207);
        _205 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _206) -> [return: bb119, unwind continue];
    }

    bb119: {
        StorageDead(_206);
        _217 = discriminant(_205);
        switchInt(move _217) -> [0: bb120, 1: bb121, otherwise: bb4];
    }

    bb120: {
        StorageLive(_221);
        _221 = ((_205 as Continue).0: u128);
        _204 = _221;
        StorageDead(_221);
        _203 = <u128 as Cast>::cast::<u64>(move _204) -> [return: bb123, unwind continue];
    }

    bb121: {
        StorageLive(_218);
        _218 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_220);
        _220 = _218;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _220) -> [return: bb122, unwind continue];
    }

    bb122: {
        StorageDead(_220);
        StorageDead(_218);
        goto -> bb129;
    }

    bb123: {
        StorageDead(_204);
        _202 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _203) -> [return: bb124, unwind continue];
    }

    bb124: {
        StorageDead(_203);
        _222 = discriminant(_202);
        switchInt(move _222) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        StorageLive(_226);
        _226 = ((_202 as Continue).0: u64);
        _201 = _226;
        StorageDead(_226);
        _199 = std::cmp::max::<u64>(move _200, move _201) -> [return: bb128, unwind continue];
    }

    bb126: {
        StorageLive(_223);
        _223 = ((_202 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_225);
        _225 = _223;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _225) -> [return: bb127, unwind continue];
    }

    bb127: {
        StorageDead(_225);
        StorageDead(_223);
        goto -> bb130;
    }

    bb128: {
        StorageDead(_201);
        StorageDead(_200);
        _170 = (move _171, move _199);
        StorageDead(_199);
        StorageDead(_171);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _170);
        StorageDead(_170);
        StorageDead(_157);
        StorageDead(_119);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_59);
        StorageDead(_8);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_174);
        goto -> bb150;
    }

    bb129: {
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_157);
        StorageDead(_119);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_59);
        StorageDead(_8);
        StorageDead(_208);
        StorageDead(_205);
        StorageDead(_202);
        goto -> bb133;
    }

    bb131: {
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb132;
    }

    bb132: {
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_157);
        StorageDead(_119);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_59);
        StorageDead(_8);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_180);
        StorageDead(_177);
        StorageDead(_174);
        goto -> bb150;
    }

    bb134: {
        StorageDead(_120);
        StorageDead(_142);
        goto -> bb136;
    }

    bb135: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_120);
        goto -> bb136;
    }

    bb136: {
        StorageDead(_127);
        StorageDead(_124);
        StorageDead(_121);
        goto -> bb137;
    }

    bb137: {
        StorageDead(_119);
        goto -> bb141;
    }

    bb138: {
        StorageDead(_82);
        StorageDead(_104);
        goto -> bb140;
    }

    bb139: {
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_82);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_89);
        StorageDead(_86);
        StorageDead(_83);
        goto -> bb141;
    }

    bb141: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_78);
        goto -> bb143;
    }

    bb142: {
        StorageDead(_61);
        goto -> bb143;
    }

    bb143: {
        StorageDead(_59);
        goto -> bb149;
    }

    bb144: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb145;
    }

    bb145: {
        StorageDead(_41);
        goto -> bb148;
    }

    bb146: {
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb147;
    }

    bb147: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb148;
    }

    bb148: {
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_12);
        StorageDead(_9);
        goto -> bb149;
    }

    bb149: {
        StorageDead(_8);
        goto -> bb150;
    }

    bb150: {
        return;
    }
}
