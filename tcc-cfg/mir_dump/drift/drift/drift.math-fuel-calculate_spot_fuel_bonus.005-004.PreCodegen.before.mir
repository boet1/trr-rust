// MIR for `calculate_spot_fuel_bonus` before PreCodegen

fn calculate_spot_fuel_bonus(_1: &SpotMarket, _2: i128, _3: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug spot_market => _1;
    debug signed_token_value => _2;
    debug fuel_bonus_numerator => _3;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _4: u64;
    let mut _5: bool;
    let mut _6: u128;
    let mut _7: i128;
    let mut _8: bool;
    let mut _9: i128;
    let mut _10: u64;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _12: std::result::Result<u64, error::ErrorCode>;
    let mut _13: u128;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _15: std::result::Result<u128, error::ErrorCode>;
    let mut _16: u128;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _18: std::result::Result<u128, error::ErrorCode>;
    let mut _19: u128;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _21: std::result::Result<u128, error::ErrorCode>;
    let mut _22: u128;
    let mut _23: i128;
    let mut _24: u128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _26: std::result::Result<u128, error::ErrorCode>;
    let mut _27: i64;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: u128;
    let mut _33: isize;
    let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _37: u128;
    let mut _38: u128;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u8;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: u128;
    let mut _47: isize;
    let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _51: u128;
    let mut _52: isize;
    let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _56: u128;
    let mut _57: isize;
    let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _61: u64;
    let mut _62: u64;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: u64;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _67: std::result::Result<u64, error::ErrorCode>;
    let mut _68: u128;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _70: std::result::Result<u128, error::ErrorCode>;
    let mut _71: u128;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _73: std::result::Result<u128, error::ErrorCode>;
    let mut _74: u128;
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _76: std::result::Result<u128, error::ErrorCode>;
    let mut _77: u128;
    let mut _78: i128;
    let mut _79: u128;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _81: std::result::Result<u128, error::ErrorCode>;
    let mut _82: i64;
    let mut _83: isize;
    let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _87: u128;
    let mut _88: isize;
    let _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: !;
    let mut _91: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _92: u128;
    let mut _93: u128;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _95: std::result::Result<u128, error::ErrorCode>;
    let mut _96: u8;
    let mut _97: isize;
    let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _101: u128;
    let mut _102: isize;
    let _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: !;
    let mut _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _106: u128;
    let mut _107: isize;
    let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _111: u128;
    let mut _112: isize;
    let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _116: u64;
    let mut _117: u64;
    let mut _118: bool;
    let mut _119: bool;
    let mut _120: u64;
    scope 1 {
        debug result => _4;
    }
    scope 2 {
        debug residual => _29;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _32;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _34;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _37;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _43;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _46;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _48;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _51;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _53;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _56;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _58;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _61;
        scope 25 {
        }
    }
    scope 26 {
        debug residual => _84;
        scope 27 {
        }
    }
    scope 28 {
        debug val => _87;
        scope 29 {
        }
    }
    scope 30 {
        debug residual => _89;
        scope 31 {
        }
    }
    scope 32 {
        debug val => _92;
        scope 33 {
        }
    }
    scope 34 {
        debug residual => _98;
        scope 35 {
        }
    }
    scope 36 {
        debug val => _101;
        scope 37 {
        }
    }
    scope 38 {
        debug residual => _103;
        scope 39 {
        }
    }
    scope 40 {
        debug val => _106;
        scope 41 {
        }
    }
    scope 42 {
        debug residual => _108;
        scope 43 {
        }
    }
    scope 44 {
        debug val => _111;
        scope 45 {
        }
    }
    scope 46 {
        debug residual => _113;
        scope 47 {
        }
    }
    scope 48 {
        debug val => _116;
        scope 49 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = core::num::<impl i128>::unsigned_abs(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = Lt(move _6, const _);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        _4 = const 0_u64;
        goto -> bb74;
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _2;
        _8 = Gt(move _9, const 0_i128);
        switchInt(move _8) -> [0: bb39, otherwise: bb4];
    }

    bb4: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _2;
        _22 = core::num::<impl i128>::unsigned_abs(move _23) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _3;
        _26 = <i64 as Cast>::cast::<u128>(move _27) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_27);
        _25 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: u128);
        _24 = _32;
        StorageDead(_32);
        _21 = <u128 as SafeMath>::safe_mul(move _22, move _24) -> [return: bb12, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb83;
    }

    bb12: {
        StorageDead(_24);
        StorageDead(_22);
        _20 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _21) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_21);
        _33 = discriminant(_20);
        switchInt(move _33) -> [0: bb14, 1: bb15, otherwise: bb9];
    }

    bb14: {
        StorageLive(_37);
        _37 = ((_20 as Continue).0: u128);
        _19 = _37;
        StorageDead(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = ((*_1).56: u8);
        _40 = <u8 as Cast>::cast::<u128>(move _41) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_34);
        _34 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        StorageDead(_34);
        goto -> bb83;
    }

    bb17: {
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_40);
        _42 = discriminant(_39);
        switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb9];
    }

    bb19: {
        StorageLive(_46);
        _46 = ((_39 as Continue).0: u128);
        _38 = _46;
        StorageDead(_46);
        _18 = <u128 as SafeMath>::safe_mul(move _19, move _38) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_38);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb80;
    }

    bb22: {
        StorageDead(_38);
        StorageDead(_19);
        _17 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_18);
        _47 = discriminant(_17);
        switchInt(move _47) -> [0: bb24, 1: bb25, otherwise: bb9];
    }

    bb24: {
        StorageLive(_51);
        _51 = ((_17 as Continue).0: u128);
        _16 = _51;
        StorageDead(_51);
        _15 = <u128 as SafeMath>::safe_div(move _16, const _) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_48);
        _48 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_48);
        goto -> bb80;
    }

    bb27: {
        StorageDead(_16);
        _14 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_15);
        _52 = discriminant(_14);
        switchInt(move _52) -> [0: bb29, 1: bb30, otherwise: bb9];
    }

    bb29: {
        StorageLive(_56);
        _56 = ((_14 as Continue).0: u128);
        _13 = _56;
        StorageDead(_56);
        _12 = <u128 as Cast>::cast::<u64>(move _13) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_53);
        _53 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_55);
        StorageDead(_53);
        goto -> bb81;
    }

    bb32: {
        StorageDead(_13);
        _11 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _12) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_12);
        _57 = discriminant(_11);
        switchInt(move _57) -> [0: bb34, 1: bb35, otherwise: bb9];
    }

    bb34: {
        StorageLive(_61);
        _61 = ((_11 as Continue).0: u64);
        _10 = _61;
        StorageDead(_61);
        StorageLive(_62);
        _63 = Eq(const 10_u64, const 0_u64);
        assert(!move _63, "attempt to divide `{}` by zero", const _) -> [success: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_58);
        _58 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_60);
        StorageDead(_58);
        goto -> bb82;
    }

    bb37: {
        _62 = Div(const _, const 10_u64);
        _64 = Eq(_62, const 0_u64);
        assert(!move _64, "attempt to divide `{}` by zero", _10) -> [success: bb38, unwind continue];
    }

    bb38: {
        _4 = Div(move _10, move _62);
        StorageDead(_62);
        StorageDead(_10);
        StorageDead(_39);
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        goto -> bb73;
    }

    bb39: {
        StorageDead(_9);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _2;
        _77 = core::num::<impl i128>::unsigned_abs(move _78) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = _3;
        _81 = <i64 as Cast>::cast::<u128>(move _82) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_82);
        _80 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_81);
        _83 = discriminant(_80);
        switchInt(move _83) -> [0: bb43, 1: bb44, otherwise: bb9];
    }

    bb43: {
        StorageLive(_87);
        _87 = ((_80 as Continue).0: u128);
        _79 = _87;
        StorageDead(_87);
        _76 = <u128 as SafeMath>::safe_mul(move _77, move _79) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_84);
        _84 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb78;
    }

    bb46: {
        StorageDead(_79);
        StorageDead(_77);
        _75 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _76) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_76);
        _88 = discriminant(_75);
        switchInt(move _88) -> [0: bb48, 1: bb49, otherwise: bb9];
    }

    bb48: {
        StorageLive(_92);
        _92 = ((_75 as Continue).0: u128);
        _74 = _92;
        StorageDead(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = ((*_1).57: u8);
        _95 = <u8 as Cast>::cast::<u128>(move _96) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_89);
        _89 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_91);
        _91 = _89;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _91) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_91);
        StorageDead(_89);
        goto -> bb78;
    }

    bb51: {
        StorageDead(_96);
        _94 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _95) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb53, 1: bb54, otherwise: bb9];
    }

    bb53: {
        StorageLive(_101);
        _101 = ((_94 as Continue).0: u128);
        _93 = _101;
        StorageDead(_101);
        _73 = <u128 as SafeMath>::safe_mul(move _74, move _93) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_98);
        _98 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb75;
    }

    bb56: {
        StorageDead(_93);
        StorageDead(_74);
        _72 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _73) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_73);
        _102 = discriminant(_72);
        switchInt(move _102) -> [0: bb58, 1: bb59, otherwise: bb9];
    }

    bb58: {
        StorageLive(_106);
        _106 = ((_72 as Continue).0: u128);
        _71 = _106;
        StorageDead(_106);
        _70 = <u128 as SafeMath>::safe_div(move _71, const _) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_103);
        _103 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_105);
        _105 = _103;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _105) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_105);
        StorageDead(_103);
        goto -> bb75;
    }

    bb61: {
        StorageDead(_71);
        _69 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _70) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_70);
        _107 = discriminant(_69);
        switchInt(move _107) -> [0: bb63, 1: bb64, otherwise: bb9];
    }

    bb63: {
        StorageLive(_111);
        _111 = ((_69 as Continue).0: u128);
        _68 = _111;
        StorageDead(_111);
        _67 = <u128 as Cast>::cast::<u64>(move _68) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_108);
        _108 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_110);
        StorageDead(_108);
        goto -> bb76;
    }

    bb66: {
        StorageDead(_68);
        _66 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _67) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_67);
        _112 = discriminant(_66);
        switchInt(move _112) -> [0: bb68, 1: bb69, otherwise: bb9];
    }

    bb68: {
        StorageLive(_116);
        _116 = ((_66 as Continue).0: u64);
        _65 = _116;
        StorageDead(_116);
        StorageLive(_117);
        _118 = Eq(const 10_u64, const 0_u64);
        assert(!move _118, "attempt to divide `{}` by zero", const _) -> [success: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_113);
        _113 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_115);
        StorageDead(_113);
        goto -> bb77;
    }

    bb71: {
        _117 = Div(const _, const 10_u64);
        _119 = Eq(_117, const 0_u64);
        assert(!move _119, "attempt to divide `{}` by zero", _65) -> [success: bb72, unwind continue];
    }

    bb72: {
        _4 = Div(move _65, move _117);
        StorageDead(_117);
        StorageDead(_65);
        StorageDead(_94);
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_8);
        goto -> bb74;
    }

    bb74: {
        StorageDead(_5);
        StorageLive(_120);
        _120 = _4;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _120);
        StorageDead(_120);
        StorageDead(_4);
        goto -> bb86;
    }

    bb75: {
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_68);
        StorageDead(_67);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_65);
        StorageDead(_94);
        goto -> bb79;
    }

    bb78: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_80);
        StorageDead(_75);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        goto -> bb85;
    }

    bb80: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_10);
        StorageDead(_39);
        goto -> bb84;
    }

    bb83: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_25);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb86;
    }

    bb86: {
        return;
    }
}
