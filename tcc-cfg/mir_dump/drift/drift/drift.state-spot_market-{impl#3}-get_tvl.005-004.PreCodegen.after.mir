// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_tvl` after PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_tvl(_1: &SpotMarket) -> std::result::Result<u128, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _2: u128;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _4: std::result::Result<u128, error::ErrorCode>;
    let mut _5: &state::spot_market::SpotMarket;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _10: u128;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _13: std::result::Result<u128, error::ErrorCode>;
    let mut _14: &state::spot_market::SpotMarket;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: u128;
    scope 1 {
        debug deposits => _2;
        let _11: u128;
        let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _19: u128;
        scope 6 {
            debug borrows => _11;
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _19;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &(*_1);
        _4 = SpotMarket::get_deposits(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: u128);
        _2 = _10;
        StorageDead(_10);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(*_1);
        _13 = SpotMarket::get_borrows(move _14) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_9);
        _9 = _7;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb13;
    }

    bb7: {
        StorageDead(_14);
        _12 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_19);
        _19 = ((_12 as Continue).0: u128);
        _11 = _19;
        StorageDead(_19);
        StorageDead(_12);
        StorageLive(_20);
        _20 = _2;
        StorageLive(_21);
        _21 = _11;
        _0 = <u128 as SafeMath>::safe_sub(move _20, move _21) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_16);
        _16 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb13;
    }

    bb12: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_11);
        StorageDead(_2);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_2);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}
