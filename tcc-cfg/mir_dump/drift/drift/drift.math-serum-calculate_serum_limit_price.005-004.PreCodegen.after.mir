// MIR for `calculate_serum_limit_price` after PreCodegen

fn calculate_serum_limit_price(_1: u64, _2: u64, _3: u32, _4: u64, _5: controller::position::PositionDirection) -> std::result::Result<u64, error::ErrorCode> {
    debug limit_price => _1;
    debug pc_lot_size => _2;
    debug coin_decimals => _3;
    debug coin_lot_size => _4;
    debug direction => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: u128;
    let mut _7: u32;
    let mut _8: isize;
    let mut _9: u128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _11: std::result::Result<u128, error::ErrorCode>;
    let mut _12: u128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _14: std::result::Result<u128, error::ErrorCode>;
    let mut _15: u128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _17: std::result::Result<u128, error::ErrorCode>;
    let mut _18: u128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _20: std::result::Result<u128, error::ErrorCode>;
    let mut _21: u64;
    let mut _22: isize;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: u128;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _34: std::result::Result<u128, error::ErrorCode>;
    let mut _35: u64;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: u128;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _48: std::result::Result<u128, error::ErrorCode>;
    let mut _49: u128;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _51: std::result::Result<u128, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: u128;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: u128;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _71: std::result::Result<u128, error::ErrorCode>;
    let mut _72: u128;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _74: std::result::Result<u128, error::ErrorCode>;
    let mut _75: u128;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _77: std::result::Result<u128, error::ErrorCode>;
    let mut _78: u128;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _80: std::result::Result<u128, error::ErrorCode>;
    let mut _81: u64;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: u128;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _94: std::result::Result<u128, error::ErrorCode>;
    let mut _95: u64;
    let mut _96: isize;
    let mut _98: !;
    let mut _99: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: isize;
    let mut _103: !;
    let mut _104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: u128;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _108: std::result::Result<u128, error::ErrorCode>;
    let mut _109: u128;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _111: std::result::Result<u128, error::ErrorCode>;
    let mut _112: u64;
    let mut _113: isize;
    let mut _115: !;
    let mut _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: u128;
    let mut _119: isize;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: isize;
    let mut _126: !;
    let mut _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug coin_precision => _6;
        let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _26: u128;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: u128;
        let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _40: u128;
        let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _45: u128;
        let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _57: u128;
        let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _63: u128;
        let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _68: u128;
        let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _86: u128;
        let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _91: u128;
        let _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _100: u128;
        let _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _105: u128;
        let _114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _117: u128;
        let _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _123: u128;
        let _125: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _128: u128;
        scope 2 {
            debug residual => _23;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _26;
            scope 5 {
            }
        }
        scope 6 {
            debug residual => _28;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _31;
            scope 9 {
            }
        }
        scope 10 {
            debug residual => _37;
            scope 11 {
            }
        }
        scope 12 {
            debug val => _40;
            scope 13 {
            }
        }
        scope 14 {
            debug residual => _42;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _45;
            scope 17 {
            }
        }
        scope 18 {
            debug residual => _54;
            scope 19 {
            }
        }
        scope 20 {
            debug val => _57;
            scope 21 {
            }
        }
        scope 22 {
            debug residual => _60;
            scope 23 {
            }
        }
        scope 24 {
            debug val => _63;
            scope 25 {
            }
        }
        scope 26 {
            debug residual => _65;
            scope 27 {
            }
        }
        scope 28 {
            debug val => _68;
            scope 29 {
            }
        }
        scope 30 {
            debug residual => _83;
            scope 31 {
            }
        }
        scope 32 {
            debug val => _86;
            scope 33 {
            }
        }
        scope 34 {
            debug residual => _88;
            scope 35 {
            }
        }
        scope 36 {
            debug val => _91;
            scope 37 {
            }
        }
        scope 38 {
            debug residual => _97;
            scope 39 {
            }
        }
        scope 40 {
            debug val => _100;
            scope 41 {
            }
        }
        scope 42 {
            debug residual => _102;
            scope 43 {
            }
        }
        scope 44 {
            debug val => _105;
            scope 45 {
            }
        }
        scope 46 {
            debug residual => _114;
            scope 47 {
            }
        }
        scope 48 {
            debug val => _117;
            scope 49 {
            }
        }
        scope 50 {
            debug residual => _120;
            scope 51 {
            }
        }
        scope 52 {
            debug val => _123;
            scope 53 {
            }
        }
        scope 54 {
            debug residual => _125;
            scope 55 {
            }
        }
        scope 56 {
            debug val => _128;
            scope 57 {
            }
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = _3;
        _6 = core::num::<impl u128>::pow(const 10_u128, move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _1;
        _80 = <u64 as Cast>::cast::<u128>(move _81) -> [return: bb41, unwind continue];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _1;
        _20 = <u64 as Cast>::cast::<u128>(move _21) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_21);
        _19 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        _22 = discriminant(_19);
        switchInt(move _22) -> [0: bb7, 1: bb8, otherwise: bb3];
    }

    bb7: {
        StorageLive(_26);
        _26 = ((_19 as Continue).0: u128);
        _18 = _26;
        StorageDead(_26);
        _17 = <u128 as SafeMath>::safe_div(move _18, const _) -> [return: bb10, unwind continue];
    }

    bb8: {
        StorageLive(_23);
        _23 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb88;
    }

    bb10: {
        StorageDead(_18);
        _16 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_17);
        _27 = discriminant(_16);
        switchInt(move _27) -> [0: bb12, 1: bb13, otherwise: bb3];
    }

    bb12: {
        StorageLive(_31);
        _31 = ((_16 as Continue).0: u128);
        _15 = _31;
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _4;
        _34 = <u64 as Cast>::cast::<u128>(move _35) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_28);
        _28 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_28);
        goto -> bb88;
    }

    bb15: {
        StorageDead(_35);
        _33 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb17, 1: bb18, otherwise: bb3];
    }

    bb17: {
        StorageLive(_40);
        _40 = ((_33 as Continue).0: u128);
        _32 = _40;
        StorageDead(_40);
        _14 = <u128 as SafeMath>::safe_mul(move _15, move _32) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_37);
        _37 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_32);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb86;
    }

    bb20: {
        StorageDead(_32);
        StorageDead(_15);
        _13 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_14);
        _41 = discriminant(_13);
        switchInt(move _41) -> [0: bb22, 1: bb23, otherwise: bb3];
    }

    bb22: {
        StorageLive(_45);
        _45 = ((_13 as Continue).0: u128);
        _12 = _45;
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _2;
        _51 = <u64 as Cast>::cast::<u128>(move _52) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_42);
        _42 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_44);
        StorageDead(_42);
        goto -> bb86;
    }

    bb25: {
        StorageDead(_52);
        _50 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _51) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb27, 1: bb28, otherwise: bb3];
    }

    bb27: {
        StorageLive(_57);
        _57 = ((_50 as Continue).0: u128);
        _49 = _57;
        StorageDead(_57);
        StorageLive(_58);
        _58 = _6;
        _48 = <u128 as SafeMath>::safe_mul(move _49, move _58) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_54);
        _54 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_48);
        goto -> bb84;
    }

    bb30: {
        StorageDead(_58);
        StorageDead(_49);
        _47 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _48) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_48);
        _59 = discriminant(_47);
        switchInt(move _59) -> [0: bb32, 1: bb33, otherwise: bb3];
    }

    bb32: {
        StorageLive(_63);
        _63 = ((_47 as Continue).0: u128);
        _46 = _63;
        StorageDead(_63);
        _11 = <u128 as SafeMath>::safe_div(move _12, move _46) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_60);
        _60 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_62);
        StorageDead(_60);
        goto -> bb84;
    }

    bb35: {
        StorageDead(_46);
        StorageDead(_12);
        _10 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_11);
        _64 = discriminant(_10);
        switchInt(move _64) -> [0: bb37, 1: bb38, otherwise: bb3];
    }

    bb37: {
        StorageLive(_68);
        _68 = ((_10 as Continue).0: u128);
        _9 = _68;
        StorageDead(_68);
        _0 = <u128 as Cast>::cast::<u64>(move _9) -> [return: bb40, unwind continue];
    }

    bb38: {
        StorageLive(_65);
        _65 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_67);
        StorageDead(_65);
        goto -> bb85;
    }

    bb40: {
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_33);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb77;
    }

    bb41: {
        StorageDead(_81);
        _79 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _80) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_80);
        _82 = discriminant(_79);
        switchInt(move _82) -> [0: bb43, 1: bb44, otherwise: bb3];
    }

    bb43: {
        StorageLive(_86);
        _86 = ((_79 as Continue).0: u128);
        _78 = _86;
        StorageDead(_86);
        _77 = <u128 as SafeMath>::safe_div(move _78, const _) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_83);
        _83 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb82;
    }

    bb46: {
        StorageDead(_78);
        _76 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _77) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_77);
        _87 = discriminant(_76);
        switchInt(move _87) -> [0: bb48, 1: bb49, otherwise: bb3];
    }

    bb48: {
        StorageLive(_91);
        _91 = ((_76 as Continue).0: u128);
        _75 = _91;
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _4;
        _94 = <u64 as Cast>::cast::<u128>(move _95) -> [return: bb51, unwind continue];
    }

    bb49: {
        StorageLive(_88);
        _88 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_90);
        StorageDead(_88);
        goto -> bb82;
    }

    bb51: {
        StorageDead(_95);
        _93 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _94) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_94);
        _96 = discriminant(_93);
        switchInt(move _96) -> [0: bb53, 1: bb54, otherwise: bb3];
    }

    bb53: {
        StorageLive(_100);
        _100 = ((_93 as Continue).0: u128);
        _92 = _100;
        StorageDead(_100);
        _74 = <u128 as SafeMath>::safe_mul(move _75, move _92) -> [return: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_97);
        _97 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_99);
        _99 = _97;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _99) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_99);
        StorageDead(_97);
        StorageDead(_92);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb80;
    }

    bb56: {
        StorageDead(_92);
        StorageDead(_75);
        _73 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_74);
        _101 = discriminant(_73);
        switchInt(move _101) -> [0: bb58, 1: bb59, otherwise: bb3];
    }

    bb58: {
        StorageLive(_105);
        _105 = ((_73 as Continue).0: u128);
        _72 = _105;
        StorageDead(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = _2;
        _111 = <u64 as Cast>::cast::<u128>(move _112) -> [return: bb61, unwind continue];
    }

    bb59: {
        StorageLive(_102);
        _102 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_104);
        _104 = _102;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _104) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_104);
        StorageDead(_102);
        goto -> bb80;
    }

    bb61: {
        StorageDead(_112);
        _110 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _111) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_111);
        _113 = discriminant(_110);
        switchInt(move _113) -> [0: bb63, 1: bb64, otherwise: bb3];
    }

    bb63: {
        StorageLive(_117);
        _117 = ((_110 as Continue).0: u128);
        _109 = _117;
        StorageDead(_117);
        StorageLive(_118);
        _118 = _6;
        _108 = <u128 as SafeMath>::safe_mul(move _109, move _118) -> [return: bb66, unwind continue];
    }

    bb64: {
        StorageLive(_114);
        _114 = ((_110 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_116);
        _116 = _114;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _116) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_109);
        StorageDead(_108);
        goto -> bb78;
    }

    bb66: {
        StorageDead(_118);
        StorageDead(_109);
        _107 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _108) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_108);
        _119 = discriminant(_107);
        switchInt(move _119) -> [0: bb68, 1: bb69, otherwise: bb3];
    }

    bb68: {
        StorageLive(_123);
        _123 = ((_107 as Continue).0: u128);
        _106 = _123;
        StorageDead(_123);
        _71 = <u128 as SafeMath>::safe_div_ceil(move _72, move _106) -> [return: bb71, unwind continue];
    }

    bb69: {
        StorageLive(_120);
        _120 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_122);
        _122 = _120;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _122) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_122);
        StorageDead(_120);
        goto -> bb78;
    }

    bb71: {
        StorageDead(_106);
        StorageDead(_72);
        _70 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_71);
        _124 = discriminant(_70);
        switchInt(move _124) -> [0: bb73, 1: bb74, otherwise: bb3];
    }

    bb73: {
        StorageLive(_128);
        _128 = ((_70 as Continue).0: u128);
        _69 = _128;
        StorageDead(_128);
        _0 = <u128 as Cast>::cast::<u64>(move _69) -> [return: bb76, unwind continue];
    }

    bb74: {
        StorageLive(_125);
        _125 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_127);
        _127 = _125;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _127) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_127);
        StorageDead(_125);
        goto -> bb79;
    }

    bb76: {
        StorageDead(_110);
        StorageDead(_107);
        StorageDead(_93);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_6);
        goto -> bb91;
    }

    bb78: {
        StorageDead(_106);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb79;
    }

    bb79: {
        StorageDead(_110);
        StorageDead(_107);
        goto -> bb81;
    }

    bb80: {
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb81;
    }

    bb81: {
        StorageDead(_93);
        goto -> bb83;
    }

    bb82: {
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb83;
    }

    bb83: {
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_73);
        StorageDead(_70);
        StorageDead(_69);
        goto -> bb90;
    }

    bb84: {
        StorageDead(_46);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_50);
        StorageDead(_47);
        goto -> bb87;
    }

    bb86: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_33);
        goto -> bb89;
    }

    bb88: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_6);
        goto -> bb91;
    }

    bb91: {
        return;
    }
}
