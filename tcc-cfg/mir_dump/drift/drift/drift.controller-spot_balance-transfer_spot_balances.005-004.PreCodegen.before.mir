// MIR for `transfer_spot_balances` before PreCodegen

fn transfer_spot_balances(_1: i128, _2: &mut SpotMarket, _3: &mut dyn SpotBalance, _4: &mut dyn SpotBalance) -> std::result::Result<(), error::ErrorCode> {
    debug token_amount => _1;
    debug spot_market => _2;
    debug from_spot_balance => _3;
    debug to_spot_balance => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _7: std::result::Result<(), error::ErrorCode>;
    let mut _8: bool;
    let mut _9: u16;
    let mut _10: &dyn state::spot_market::SpotBalance;
    let mut _11: u16;
    let mut _12: &dyn state::spot_market::SpotBalance;
    let mut _13: ();
    let _14: error::ErrorCode;
    let _15: ();
    let mut _16: &str;
    let _17: &str;
    let mut _18: &std::string::String;
    let _19: &std::string::String;
    let _20: std::string::String;
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[&str; 2];
    let _25: &[&str; 2];
    let _26: [&str; 2];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let mut _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let mut _32: &error::ErrorCode;
    let _33: &error::ErrorCode;
    let _34: ();
    let mut _35: &str;
    let _36: &str;
    let mut _37: &std::string::String;
    let _38: &std::string::String;
    let _39: std::string::String;
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let mut _43: &[&str; 1];
    let _44: &[&str; 1];
    let _45: [&str; 1];
    let mut _46: error::ErrorCode;
    let mut _47: isize;
    let _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: !;
    let mut _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _51: ();
    let _52: ();
    let mut _53: bool;
    let mut _54: i128;
    let mut _55: !;
    let mut _56: ();
    let _57: ();
    let mut _58: bool;
    let mut _59: &&state::spot_market::SpotBalanceType;
    let _60: &state::spot_market::SpotBalanceType;
    let mut _61: &dyn state::spot_market::SpotBalance;
    let mut _62: &&state::spot_market::SpotBalanceType;
    let _63: &state::spot_market::SpotBalanceType;
    let _64: state::spot_market::SpotBalanceType;
    let _65: ();
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _67: std::result::Result<(), error::ErrorCode>;
    let mut _68: bool;
    let mut _69: u128;
    let mut _70: u128;
    let mut _71: &dyn state::spot_market::SpotBalance;
    let mut _72: ();
    let _73: error::ErrorCode;
    let _74: ();
    let mut _75: &str;
    let _76: &str;
    let mut _77: &std::string::String;
    let _78: &std::string::String;
    let _79: std::string::String;
    let mut _81: std::fmt::Arguments<'_>;
    let mut _82: &[&str];
    let mut _83: &[&str; 2];
    let _84: &[&str; 2];
    let _85: [&str; 2];
    let mut _86: &[core::fmt::rt::Argument<'_>];
    let mut _87: &[core::fmt::rt::Argument<'_>; 1];
    let _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: [core::fmt::rt::Argument<'_>; 1];
    let mut _90: core::fmt::rt::Argument<'_>;
    let mut _91: &error::ErrorCode;
    let _92: &error::ErrorCode;
    let _93: ();
    let mut _94: &str;
    let _95: &str;
    let mut _96: &std::string::String;
    let _97: &std::string::String;
    let _98: std::string::String;
    let mut _100: std::fmt::Arguments<'_>;
    let mut _101: &[&str];
    let mut _102: &[&str; 2];
    let _103: &[&str; 2];
    let _104: [&str; 2];
    let mut _105: &[core::fmt::rt::Argument<'_>];
    let mut _106: &[core::fmt::rt::Argument<'_>; 2];
    let _107: &[core::fmt::rt::Argument<'_>; 2];
    let _108: [core::fmt::rt::Argument<'_>; 2];
    let mut _109: core::fmt::rt::Argument<'_>;
    let mut _110: &u128;
    let _111: &u128;
    let mut _112: core::fmt::rt::Argument<'_>;
    let mut _113: &u128;
    let _114: &u128;
    let _115: u128;
    let mut _116: &dyn state::spot_market::SpotBalance;
    let mut _117: error::ErrorCode;
    let mut _118: isize;
    let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _122: ();
    let _123: ();
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _125: std::result::Result<(), error::ErrorCode>;
    let mut _126: u128;
    let mut _127: i128;
    let mut _128: &state::spot_market::SpotBalanceType;
    let mut _129: bool;
    let mut _130: i128;
    let _131: &state::spot_market::SpotBalanceType;
    let _132: state::spot_market::SpotBalanceType;
    let _133: &state::spot_market::SpotBalanceType;
    let _134: state::spot_market::SpotBalanceType;
    let mut _135: &mut state::spot_market::SpotMarket;
    let mut _136: &mut dyn state::spot_market::SpotBalance;
    let mut _137: &mut dyn state::spot_market::SpotBalance;
    let mut _138: isize;
    let _139: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: !;
    let mut _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _142: ();
    let _143: ();
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _145: std::result::Result<(), error::ErrorCode>;
    let mut _146: u128;
    let mut _147: i128;
    let mut _148: &state::spot_market::SpotBalanceType;
    let mut _149: bool;
    let mut _150: i128;
    let _151: &state::spot_market::SpotBalanceType;
    let _152: state::spot_market::SpotBalanceType;
    let _153: &state::spot_market::SpotBalanceType;
    let _154: state::spot_market::SpotBalanceType;
    let mut _155: &mut state::spot_market::SpotMarket;
    let mut _156: &mut dyn state::spot_market::SpotBalance;
    let mut _157: &mut dyn state::spot_market::SpotBalance;
    let mut _158: isize;
    let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _162: ();
    let mut _163: ();
    let mut _164: &state::spot_market::SpotBalanceType;
    let mut _165: &state::spot_market::SpotBalanceType;
    let mut _166: &state::spot_market::SpotBalanceType;
    let mut _167: &state::spot_market::SpotBalanceType;
    let mut _170: &&state::spot_market::SpotBalanceType;
    scope 1 {
        debug error_code => _14;
        let _21: std::string::String;
        let _40: std::string::String;
        let mut _171: &[&str; 1];
        let mut _172: &[&str; 2];
        scope 2 {
            debug res => _21;
        }
        scope 3 {
            debug res => _40;
        }
    }
    scope 4 {
        debug residual => _48;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _51;
        scope 7 {
        }
    }
    scope 8 {
        debug error_code => _73;
        let _80: std::string::String;
        let _99: std::string::String;
        let mut _168: &[&str; 2];
        let mut _169: &[&str; 2];
        scope 9 {
            debug res => _80;
        }
        scope 10 {
            debug res => _99;
        }
    }
    scope 11 {
        debug residual => _119;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _122;
        scope 14 {
        }
    }
    scope 15 {
        debug residual => _139;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _142;
        scope 18 {
        }
    }
    scope 19 {
        debug residual => _159;
        scope 20 {
        }
    }
    scope 21 {
        debug val => _162;
        scope 22 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_3);
        _9 = <dyn SpotBalance as SpotBalance>::market_index(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &(*_4);
        _11 = <dyn SpotBalance as SpotBalance>::market_index(move _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_12);
        _8 = Eq(move _9, move _11);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_13);
        _13 = ();
        _7 = std::result::Result::<(), error::ErrorCode>::Ok(move _13);
        StorageDead(_13);
        goto -> bb16;
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_14);
        _14 = error::ErrorCode::UnequalMarketIndexForSpotTransfer;
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _172 = const _;
        _25 = &(*_172);
        _24 = &(*_25);
        _23 = move _24 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_24);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &_14;
        _32 = &(*_33);
        _31 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _32) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_32);
        _30 = [move _31];
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = move _28 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_28);
        _22 = Arguments::<'_>::new_v1(move _23, move _27) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_27);
        StorageDead(_23);
        _21 = format(move _22) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_22);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_25);
        _20 = move _21;
        StorageDead(_21);
        _19 = &_20;
        _18 = &(*_19);
        _17 = <String as Deref>::deref(move _18) -> [return: bb8, unwind: bb73];
    }

    bb8: {
        _16 = &(*_17);
        StorageDead(_18);
        _15 = solana_program::log::sol_log(move _16) -> [return: bb9, unwind: bb73];
    }

    bb9: {
        StorageDead(_16);
        drop(_20) -> [return: bb10, unwind: bb74];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_15);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _171 = const _;
        _44 = &(*_171);
        _43 = &(*_44);
        _42 = move _43 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_43);
        _41 = Arguments::<'_>::new_const(move _42) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_42);
        _40 = format(move _41) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_41);
        StorageDead(_44);
        _39 = move _40;
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = <String as Deref>::deref(move _37) -> [return: bb13, unwind: bb72];
    }

    bb13: {
        _35 = &(*_36);
        StorageDead(_37);
        _34 = solana_program::log::sol_log(move _35) -> [return: bb14, unwind: bb72];
    }

    bb14: {
        StorageDead(_35);
        drop(_39) -> [return: bb15, unwind: bb74];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_34);
        StorageLive(_46);
        _46 = _14;
        _7 = std::result::Result::<(), error::ErrorCode>::Err(move _46);
        StorageDead(_46);
        StorageDead(_14);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_8);
        _6 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _7) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_7);
        _47 = discriminant(_6);
        switchInt(move _47) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_51);
        _51 = ((_6 as Continue).0: ());
        _5 = _51;
        StorageDead(_51);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = _1;
        _53 = Eq(move _54, const 0_i128);
        switchInt(move _53) -> [0: bb23, otherwise: bb22];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_48);
        _48 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_50);
        _50 = _48;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _50) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_50);
        StorageDead(_48);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb69;
    }

    bb22: {
        StorageDead(_54);
        StorageLive(_56);
        _56 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _56);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb69;
    }

    bb23: {
        StorageDead(_54);
        _52 = const ();
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = &(*_3);
        _60 = <dyn SpotBalance as SpotBalance>::balance_type(move _61) -> [return: bb24, unwind continue];
    }

    bb24: {
        _59 = &_60;
        StorageDead(_61);
        StorageLive(_62);
        _170 = const _;
        _62 = &(*_170);
        _58 = <&SpotBalanceType as PartialEq>::eq(move _59, move _62) -> [return: bb25, unwind continue];
    }

    bb25: {
        switchInt(move _58) -> [0: bb49, otherwise: bb26];
    }

    bb26: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = ((*_2).11: u128);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &(*_3);
        _70 = <dyn SpotBalance as SpotBalance>::balance(move _71) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_71);
        _68 = Ge(move _69, move _70);
        switchInt(move _68) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_72);
        _72 = ();
        _67 = std::result::Result::<(), error::ErrorCode>::Ok(move _72);
        StorageDead(_72);
        goto -> bb44;
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_73);
        _73 = error::ErrorCode::InvalidSpotMarketState;
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _169 = const _;
        _84 = &(*_169);
        _83 = &(*_84);
        _82 = move _83 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_83);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_73;
        _91 = &(*_92);
        _90 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _91) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_91);
        _89 = [move _90];
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = move _87 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_87);
        _81 = Arguments::<'_>::new_v1(move _82, move _86) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_86);
        StorageDead(_82);
        _80 = format(move _81) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_81);
        StorageDead(_92);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_84);
        _79 = move _80;
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = <String as Deref>::deref(move _77) -> [return: bb33, unwind: bb71];
    }

    bb33: {
        _75 = &(*_76);
        StorageDead(_77);
        _74 = solana_program::log::sol_log(move _75) -> [return: bb34, unwind: bb71];
    }

    bb34: {
        StorageDead(_75);
        drop(_79) -> [return: bb35, unwind: bb74];
    }

    bb35: {
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_74);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _168 = const _;
        _103 = &(*_168);
        _102 = &(*_103);
        _101 = move _102 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_102);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &((*_2).11: u128);
        _110 = &(*_111);
        _109 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _110) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_110);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &(*_3);
        _115 = <dyn SpotBalance as SpotBalance>::balance(move _116) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_116);
        _114 = &_115;
        _113 = &(*_114);
        _112 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _113) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_113);
        _108 = [move _109, move _112];
        StorageDead(_112);
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = move _106 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_106);
        _100 = Arguments::<'_>::new_v1(move _101, move _105) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_101);
        _99 = format(move _100) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_100);
        StorageDead(_115);
        StorageDead(_114);
        StorageDead(_111);
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_103);
        _98 = move _99;
        StorageDead(_99);
        _97 = &_98;
        _96 = &(*_97);
        _95 = <String as Deref>::deref(move _96) -> [return: bb41, unwind: bb70];
    }

    bb41: {
        _94 = &(*_95);
        StorageDead(_96);
        _93 = solana_program::log::sol_log(move _94) -> [return: bb42, unwind: bb70];
    }

    bb42: {
        StorageDead(_94);
        drop(_98) -> [return: bb43, unwind: bb74];
    }

    bb43: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_117);
        _117 = _73;
        _67 = std::result::Result::<(), error::ErrorCode>::Err(move _117);
        StorageDead(_117);
        StorageDead(_73);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_68);
        _66 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _67) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_67);
        _118 = discriminant(_66);
        switchInt(move _118) -> [0: bb46, 1: bb47, otherwise: bb19];
    }

    bb46: {
        StorageLive(_122);
        _122 = ((_66 as Continue).0: ());
        _65 = _122;
        StorageDead(_122);
        StorageDead(_66);
        StorageDead(_65);
        _57 = const ();
        goto -> bb50;
    }

    bb47: {
        StorageLive(_119);
        _119 = ((_66 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb69;
    }

    bb49: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_59);
        _57 = const ();
        goto -> bb50;
    }

    bb50: {
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = _1;
        _126 = core::num::<impl i128>::unsigned_abs(move _127) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = _1;
        _129 = Lt(move _130, const 0_i128);
        switchInt(move _129) -> [0: bb53, otherwise: bb52];
    }

    bb52: {
        StorageDead(_130);
        StorageLive(_131);
        _166 = const _;
        _131 = &(*_166);
        _128 = &(*_131);
        StorageDead(_131);
        goto -> bb54;
    }

    bb53: {
        StorageDead(_130);
        StorageLive(_133);
        _167 = const _;
        _133 = &(*_167);
        _128 = &(*_133);
        StorageDead(_133);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_129);
        StorageLive(_135);
        _135 = &mut (*_2);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &mut (*_3);
        _136 = move _137 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_137);
        _125 = update_spot_balances(move _126, move _128, move _135, move _136, const false) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_128);
        StorageDead(_126);
        _124 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _125) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_125);
        _138 = discriminant(_124);
        switchInt(move _138) -> [0: bb57, 1: bb58, otherwise: bb19];
    }

    bb57: {
        StorageLive(_142);
        _142 = ((_124 as Continue).0: ());
        _123 = _142;
        StorageDead(_142);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _1;
        _146 = core::num::<impl i128>::unsigned_abs(move _147) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_139);
        _139 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_141);
        _141 = _139;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _141) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_141);
        StorageDead(_139);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb69;
    }

    bb60: {
        StorageDead(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = _1;
        _149 = Lt(move _150, const 0_i128);
        switchInt(move _149) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_150);
        StorageLive(_151);
        _164 = const _;
        _151 = &(*_164);
        _148 = &(*_151);
        StorageDead(_151);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_150);
        StorageLive(_153);
        _165 = const _;
        _153 = &(*_165);
        _148 = &(*_153);
        StorageDead(_153);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_149);
        StorageLive(_155);
        _155 = &mut (*_2);
        StorageLive(_156);
        StorageLive(_157);
        _157 = &mut (*_4);
        _156 = move _157 as &mut dyn state::spot_market::SpotBalance (PointerCoercion(Unsize));
        StorageDead(_157);
        _145 = update_spot_balances(move _146, move _148, move _155, move _156, const false) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_148);
        StorageDead(_146);
        _144 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _145) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_145);
        _158 = discriminant(_144);
        switchInt(move _158) -> [0: bb66, 1: bb67, otherwise: bb19];
    }

    bb66: {
        StorageLive(_162);
        _162 = ((_144 as Continue).0: ());
        _143 = _162;
        StorageDead(_162);
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_163);
        _163 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _163);
        StorageDead(_163);
        goto -> bb69;
    }

    bb67: {
        StorageLive(_159);
        _159 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_144);
        StorageDead(_143);
        goto -> bb69;
    }

    bb69: {
        return;
    }

    bb70 (cleanup): {
        drop(_98) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb71 (cleanup): {
        drop(_79) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb72 (cleanup): {
        drop(_39) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb73 (cleanup): {
        drop(_20) -> [return: bb74, unwind terminate(cleanup)];
    }

    bb74 (cleanup): {
        resume;
    }
}
