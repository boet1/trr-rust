// MIR for `update_mark_twap_from_estimates` before PreCodegen

fn update_mark_twap_from_estimates(_1: &mut AMM, _2: i64, _3: Option<u64>, _4: Option<controller::position::PositionDirection>, _5: Option<i64>) -> std::result::Result<u64, error::ErrorCode> {
    debug amm => _1;
    debug now => _2;
    debug precomputed_trade_price => _3;
    debug direction => _4;
    debug sanitize_clamp => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: u64;
    let _7: u64;
    let mut _8: (u64, u64);
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _10: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _11: &mut state::perp_market::AMM;
    let mut _12: std::option::Option<u64>;
    let mut _13: std::option::Option<controller::position::PositionDirection>;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: (u64, u64);
    let mut _19: &mut state::perp_market::AMM;
    let mut _20: i64;
    let mut _21: u64;
    let mut _22: u64;
    let mut _23: std::option::Option<u64>;
    let mut _24: std::option::Option<i64>;
    scope 1 {
        debug bid_price => _6;
        debug ask_price => _7;
    }
    scope 2 {
        debug residual => _15;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _18;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut (*_1);
        StorageLive(_12);
        _12 = _3;
        StorageLive(_13);
        _13 = _4;
        _10 = estimate_best_bid_ask_price(move _11, move _12, move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        _9 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _14 = discriminant(_9);
        switchInt(move _14) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_18);
        _18 = ((_9 as Continue).0: (u64, u64));
        _8 = _18;
        StorageDead(_18);
        StorageLive(_6);
        _6 = (_8.0: u64);
        StorageLive(_7);
        _7 = (_8.1: u64);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_19);
        _19 = &mut (*_1);
        StorageLive(_20);
        _20 = _2;
        StorageLive(_21);
        _21 = _6;
        StorageLive(_22);
        _22 = _7;
        StorageLive(_23);
        _23 = _3;
        StorageLive(_24);
        _24 = _5;
        _0 = update_mark_twap(move _19, move _20, move _21, move _22, move _23, move _24) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_15);
        _15 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
