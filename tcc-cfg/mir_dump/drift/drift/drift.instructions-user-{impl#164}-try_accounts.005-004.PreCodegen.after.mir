// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4434:10: 4434:18>::try_accounts` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4434:10: 4434:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut UpdateUserBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<instructions::user::UpdateUser<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::user::UpdateUser<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, instructions::user::UpdateUserBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, instructions::user::UpdateUserBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, instructions::user::UpdateUserBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, instructions::user::UpdateUserBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _22: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::user::UpdateUserBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _37: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: &anchor_lang::prelude::Pubkey;
    let mut _40: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _41: &[u8];
    let mut _42: &mut instructions::user::UpdateUserBumps;
    let mut _43: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _44: {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18};
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: (anchor_lang::prelude::Pubkey, u8);
    let mut _53: &[&[u8]];
    let mut _54: &[&[u8]; 3];
    let _55: &[&[u8]; 3];
    let _56: [&[u8]; 3];
    let mut _57: &[u8];
    let mut _58: &[u8; 4];
    let _59: &[u8; 4];
    let mut _60: &[u8];
    let _61: &[u8];
    let mut _62: &anchor_lang::prelude::Pubkey;
    let _63: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _64: &anchor_lang::prelude::Signer<'_>;
    let mut _65: &[u8];
    let _66: &[u8];
    let mut _67: &[u8; 2];
    let _68: [u8; 2];
    let mut _69: u16;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let _71: &&anchor_lang::prelude::Pubkey;
    let mut _72: u8;
    let _73: ();
    let mut _74: bool;
    let mut _75: &anchor_lang::prelude::Pubkey;
    let _76: anchor_lang::prelude::Pubkey;
    let mut _77: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _78: &anchor_lang::prelude::Pubkey;
    let mut _79: !;
    let mut _80: anchor_lang::error::Error;
    let mut _81: anchor_lang::error::Error;
    let mut _82: anchor_lang::error::Error;
    let mut _83: anchor_lang::error::ErrorCode;
    let mut _84: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _85: anchor_lang::prelude::Pubkey;
    let mut _86: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _87: anchor_lang::prelude::Pubkey;
    let _88: ();
    let mut _89: bool;
    let mut _90: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _91: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _92: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _93: !;
    let mut _94: anchor_lang::error::Error;
    let mut _95: anchor_lang::error::Error;
    let mut _96: anchor_lang::error::ErrorCode;
    let mut _97: instructions::user::UpdateUser<'_>;
    let mut _98: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _99: anchor_lang::prelude::Signer<'_>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &anchor_lang::prelude::Pubkey;
    let mut _102: bool;
    let mut _103: isize;
    let mut _104: isize;
    let mut _105: isize;
    let mut _106: isize;
    let mut _107: isize;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, instructions::user::UpdateUserBumps>>::try_accounts::__Args;
        scope 2 {
            debug sub_account_id => _7;
            let _20: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
            scope 7 {
                debug user => _20;
                let _35: anchor_lang::prelude::Signer<'_>;
                let _46: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _49: anchor_lang::prelude::Signer<'_>;
                scope 12 {
                    debug authority => _35;
                    let _50: anchor_lang::prelude::Pubkey;
                    let _51: u8;
                    scope 17 {
                        debug __pda_address => _50;
                        debug __bump => _51;
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _102 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, UpdateUserBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18};
        _10 = std::result::Result::<<instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, UpdateUserBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18}>(move _11, move _14) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, UpdateUserBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::user::UpdateUser<'info> as anchor_lang::Accounts<'info, instructions::user::UpdateUserBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, UpdateUserBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<instructions::user::UpdateUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb41;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18};
        _22 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18}>(move _23, move _29) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _20 = move _34;
        StorageDead(_34);
        _103 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &(*_1);
        StorageLive(_40);
        _40 = &mut (*_2);
        StorageLive(_41);
        _41 = &(*_6);
        StorageLive(_42);
        _42 = &mut (*_4);
        StorageLive(_43);
        _43 = &mut (*_5);
        _38 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, UpdateUserBumps>>::try_accounts(move _39, move _40, move _41, move _42, move _43) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<instructions::user::UpdateUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb47];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _109 = discriminant(_21);
        StorageDead(_21);
        goto -> bb40;
    }

    bb14: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_39);
        StorageLive(_44);
        _44 = {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18};
        _37 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4434:10: 4434:18}>(move _38, move _44) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        StorageDead(_44);
        StorageDead(_38);
        _36 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _37) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        StorageDead(_37);
        _45 = discriminant(_36);
        switchInt(move _45) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_49);
        _49 = move ((_36 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _35 = move _49;
        StorageDead(_49);
        _105 = discriminant(_36);
        StorageDead(_36);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = const b"user";
        _58 = &(*_59);
        _57 = move _58 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_35;
        _63 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _64) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_46);
        _46 = move ((_36 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_48);
        _48 = move _46;
        _0 = <std::result::Result<instructions::user::UpdateUser<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _48) -> [return: bb19, unwind: bb46];
    }

    bb19: {
        StorageDead(_48);
        StorageDead(_46);
        _107 = discriminant(_36);
        StorageDead(_36);
        goto -> bb39;
    }

    bb20: {
        StorageDead(_64);
        _100 = deref_copy ((*_63).0: &anchor_lang::prelude::Pubkey);
        _62 = &(*_100);
        _61 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _62) -> [return: bb21, unwind continue];
    }

    bb21: {
        _60 = &(*_61);
        StorageDead(_62);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _7;
        _68 = core::num::<impl u16>::to_le_bytes(move _69) -> [return: bb22, unwind continue];
    }

    bb22: {
        _67 = &_68;
        StorageDead(_69);
        _66 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _67) -> [return: bb23, unwind continue];
    }

    bb23: {
        _65 = &(*_66);
        StorageDead(_67);
        _56 = [move _57, move _60, move _65];
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = move _54 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_54);
        StorageLive(_70);
        StorageLive(_71);
        _71 = &_1;
        _101 = deref_copy (*_71);
        _70 = &(*_101);
        _52 = anchor_lang::prelude::Pubkey::find_program_address(move _53, move _70) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_70);
        StorageDead(_53);
        StorageLive(_50);
        _50 = (_52.0: anchor_lang::prelude::Pubkey);
        StorageLive(_51);
        _51 = (_52.1: u8);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_52);
        StorageLive(_72);
        _72 = _51;
        ((*_4).0: u8) = move _72;
        StorageDead(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_20;
        _76 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _77) -> [return: bb25, unwind continue];
    }

    bb25: {
        _75 = &_76;
        StorageDead(_77);
        StorageLive(_78);
        _78 = &_50;
        _74 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _75, move _78) -> [return: bb26, unwind continue];
    }

    bb26: {
        switchInt(move _74) -> [0: bb32, otherwise: bb27];
    }

    bb27: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = ConstraintSeeds;
        _82 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _83) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_83);
        _81 = anchor_lang::error::Error::with_account_name::<&str>(move _82, const "user") -> [return: bb29, unwind: bb43];
    }

    bb29: {
        _102 = const true;
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_20;
        _85 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _86) -> [return: bb30, unwind: bb45];
    }

    bb30: {
        StorageDead(_86);
        StorageLive(_87);
        _87 = _50;
        _84 = (move _85, move _87);
        StorageDead(_87);
        StorageDead(_85);
        _102 = const false;
        _80 = anchor_lang::error::Error::with_pubkeys(move _81, move _84) -> [return: bb31, unwind: bb45];
    }

    bb31: {
        StorageDead(_84);
        _102 = const false;
        StorageDead(_81);
        _0 = std::result::Result::<instructions::user::UpdateUser<'_>, anchor_lang::error::Error>::Err(move _80);
        StorageDead(_80);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb38;
    }

    bb32: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        _73 = const ();
        StorageDead(_74);
        StorageDead(_73);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &_20;
        _91 = &(*_92);
        _90 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _91) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_91);
        _89 = ((*_90).6: bool);
        switchInt(move _89) -> [0: bb34, otherwise: bb37];
    }

    bb34: {
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = ConstraintMut;
        _95 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _96) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_96);
        _94 = anchor_lang::error::Error::with_account_name::<&str>(move _95, const "user") -> [return: bb36, unwind: bb43];
    }

    bb36: {
        StorageDead(_95);
        _0 = std::result::Result::<instructions::user::UpdateUser<'_>, anchor_lang::error::Error>::Err(move _94);
        StorageDead(_94);
        StorageDead(_89);
        StorageDead(_88);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_92);
        StorageDead(_90);
        _88 = const ();
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_97);
        StorageLive(_98);
        _98 = move _20;
        StorageLive(_99);
        _99 = move _35;
        _97 = instructions::user::UpdateUser::<'_> { user: move _98, authority: move _99 };
        StorageDead(_99);
        StorageDead(_98);
        _0 = std::result::Result::<instructions::user::UpdateUser<'_>, anchor_lang::error::Error>::Ok(move _97);
        StorageDead(_97);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_35);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb42;
    }

    bb38: {
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_35);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb41;
    }

    bb41: {
        StorageDead(_6);
        goto -> bb42;
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        drop(_81) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        switchInt(_102) -> [0: bb43, otherwise: bb44];
    }

    bb46 (cleanup): {
        _111 = discriminant(_36);
        goto -> bb43;
    }

    bb47 (cleanup): {
        _112 = discriminant(_21);
        goto -> bb43;
    }
}

alloc315 (size: 4, align: 1) {
    75 73 65 72                                     │ user
}
