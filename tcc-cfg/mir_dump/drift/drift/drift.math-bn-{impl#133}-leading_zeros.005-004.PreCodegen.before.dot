digraph Mir_0_14481 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn U192::leading_zeros(_1: &amp;ReErased math::bn::U192) -&gt; u32<br align="left"/>let mut _2: u32;<br align="left"/>let _3: ();<br align="left"/>let mut _4: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _5: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _6: std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _7: ();<br align="left"/>let _8: ();<br align="left"/>let mut _9: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _10: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _11: &amp;ReErased mut std::ops::Range&lt;usize&gt;;<br align="left"/>let mut _12: isize;<br align="left"/>let mut _13: !;<br align="left"/>let _14: usize;<br align="left"/>let _15: u64;<br align="left"/>let _16: usize;<br align="left"/>let mut _17: usize;<br align="left"/>let mut _18: usize;<br align="left"/>let mut _19: (usize, bool);<br align="left"/>let mut _20: (usize, bool);<br align="left"/>let mut _21: usize;<br align="left"/>let mut _22: bool;<br align="left"/>let mut _23: bool;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: (u32, bool);<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: u32;<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: (u32, bool);<br align="left"/>debug self =&gt; _1;<br align="left"/>debug r =&gt; _2;<br align="left"/>debug iter =&gt; _6;<br align="left"/>debug i =&gt; _14;<br align="left"/>debug w =&gt; _15;<br align="left"/>>;
    bb0__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_2)<br/>_2 = const 0_u32<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = std::ops::Range::&lt;usize&gt; { start: const 0_usize, end: const 3_usize }<br/></td></tr><tr><td align="left">_4 = &lt;std::ops::Range&lt;usize&gt; as IntoIterator&gt;::into_iter(move _5)</td></tr></table>>];
    bb1__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageLive(_6)<br/>_6 = move _4<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;mut _6<br/>_10 = &amp;mut (*_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::ops::Range&lt;usize&gt; as Iterator&gt;::next(move _10)</td></tr></table>>];
    bb3__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_12 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb4__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_9 as Some).0: usize)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>_18 = _14<br/>_19 = CheckedSub(const 3_usize, _18)<br/></td></tr><tr><td align="left">assert(!move (_19.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, const 3_usize, move _18)</td></tr></table>>];
    bb5__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb6__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">_3 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">_17 = move (_19.0: usize)<br/>StorageDead(_18)<br/>_20 = CheckedSub(_17, const 1_usize)<br/></td></tr><tr><td align="left">assert(!move (_20.1: bool), &quot;attempt to compute `{} - {}`, which would overflow&quot;, move _17, const 1_usize)</td></tr></table>>];
    bb8__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">_16 = move (_20.0: usize)<br/>StorageDead(_17)<br/>_21 = Len(((*_1).0: [u64; 3]))<br/>_22 = Lt(_16, _21)<br/></td></tr><tr><td align="left">assert(move _22, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _21, _16)</td></tr></table>>];
    bb9__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">_15 = ((*_1).0: [u64; 3])[_16]<br/>StorageDead(_16)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = _15<br/>_23 = Eq(move _24, const 0_u64)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb10__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>_25 = CheckedAdd(_2, const 64_u32)<br/></td></tr><tr><td align="left">assert(!move (_25.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, const 64_u32)</td></tr></table>>];
    bb11__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">_2 = move (_25.0: u32)<br/>_8 = const ()<br/>StorageDead(_23)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/>StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>_7 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>_28 = _15<br/></td></tr><tr><td align="left">_27 = core::num::&lt;impl u64&gt;::leading_zeros(move _28)</td></tr></table>>];
    bb13__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_29 = CheckedAdd(_2, _27)<br/></td></tr><tr><td align="left">assert(!move (_29.1: bool), &quot;attempt to compute `{} + {}`, which would overflow&quot;, _2, move _27)</td></tr></table>>];
    bb14__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_2 = move (_29.0: u32)<br/>StorageDead(_27)<br/>_3 = const ()<br/>StorageDead(_23)<br/>StorageDead(_15)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_14481 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/>StorageDead(_3)<br/>_0 = _2<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_14481 -> bb1__0_14481 [label="return"];
    bb1__0_14481 -> bb2__0_14481 [label=""];
    bb2__0_14481 -> bb3__0_14481 [label="return"];
    bb3__0_14481 -> bb6__0_14481 [label="0"];
    bb3__0_14481 -> bb4__0_14481 [label="1"];
    bb3__0_14481 -> bb5__0_14481 [label="otherwise"];
    bb4__0_14481 -> bb7__0_14481 [label="success"];
    bb6__0_14481 -> bb15__0_14481 [label=""];
    bb7__0_14481 -> bb8__0_14481 [label="success"];
    bb8__0_14481 -> bb9__0_14481 [label="success"];
    bb9__0_14481 -> bb12__0_14481 [label="0"];
    bb9__0_14481 -> bb10__0_14481 [label="otherwise"];
    bb10__0_14481 -> bb11__0_14481 [label="success"];
    bb11__0_14481 -> bb2__0_14481 [label=""];
    bb12__0_14481 -> bb13__0_14481 [label="return"];
    bb13__0_14481 -> bb14__0_14481 [label="success"];
    bb14__0_14481 -> bb15__0_14481 [label=""];
}
