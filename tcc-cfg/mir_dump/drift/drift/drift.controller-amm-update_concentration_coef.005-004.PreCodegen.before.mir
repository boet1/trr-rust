// MIR for `update_concentration_coef` before PreCodegen

fn update_concentration_coef(_1: &mut PerpMarket, _2: u128) -> std::result::Result<(), error::ErrorCode> {
    debug market => _1;
    debug scale => _2;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: ();
    let _9: error::ErrorCode;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &error::ErrorCode;
    let _28: &error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 1];
    let _39: &[&str; 1];
    let _40: [&str; 1];
    let mut _41: error::ErrorCode;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: ();
    let _47: u128;
    let mut _48: u128;
    let mut _49: u128;
    let mut _50: (u128, bool);
    let mut _51: u128;
    let mut _52: bool;
    let mut _53: (u128, bool);
    let _54: ();
    let mut _55: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _56: std::result::Result<(), error::ErrorCode>;
    let mut _57: bool;
    let mut _58: u128;
    let mut _59: bool;
    let mut _60: u128;
    let mut _61: ();
    let _63: ();
    let mut _64: &str;
    let _65: &str;
    let mut _66: &std::string::String;
    let _67: &std::string::String;
    let _68: std::string::String;
    let mut _70: std::fmt::Arguments<'_>;
    let mut _71: &[&str];
    let mut _72: &[&str; 2];
    let _73: &[&str; 2];
    let _74: [&str; 2];
    let mut _75: &[core::fmt::rt::Argument<'_>];
    let mut _76: &[core::fmt::rt::Argument<'_>; 1];
    let _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: [core::fmt::rt::Argument<'_>; 1];
    let mut _79: core::fmt::rt::Argument<'_>;
    let mut _80: &error::ErrorCode;
    let _81: &error::ErrorCode;
    let _82: ();
    let mut _83: &str;
    let _84: &str;
    let mut _85: &std::string::String;
    let _86: &std::string::String;
    let _87: std::string::String;
    let mut _89: std::fmt::Arguments<'_>;
    let mut _90: &[&str];
    let mut _91: &[&str; 1];
    let _92: &[&str; 1];
    let _93: [&str; 1];
    let mut _94: error::ErrorCode;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: u128;
    let mut _103: (u64, u128, u128);
    let mut _104: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u128, u128)>;
    let mut _105: std::result::Result<(u64, u128, u128), error::ErrorCode>;
    let mut _106: &state::perp_market::AMM;
    let _107: &state::perp_market::AMM;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _113: ();
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _115: std::result::Result<(), error::ErrorCode>;
    let mut _116: bool;
    let mut _117: u128;
    let mut _118: u128;
    let mut _119: ();
    let _121: ();
    let mut _122: &str;
    let _123: &str;
    let mut _124: &std::string::String;
    let _125: &std::string::String;
    let _126: std::string::String;
    let mut _128: std::fmt::Arguments<'_>;
    let mut _129: &[&str];
    let mut _130: &[&str; 2];
    let _131: &[&str; 2];
    let _132: [&str; 2];
    let mut _133: &[core::fmt::rt::Argument<'_>];
    let mut _134: &[core::fmt::rt::Argument<'_>; 1];
    let _135: &[core::fmt::rt::Argument<'_>; 1];
    let _136: [core::fmt::rt::Argument<'_>; 1];
    let mut _137: core::fmt::rt::Argument<'_>;
    let mut _138: &error::ErrorCode;
    let _139: &error::ErrorCode;
    let _140: ();
    let mut _141: &str;
    let _142: &str;
    let mut _143: &std::string::String;
    let _144: &std::string::String;
    let _145: std::string::String;
    let mut _147: std::fmt::Arguments<'_>;
    let mut _148: &[&str];
    let mut _149: &[&str; 1];
    let _150: &[&str; 1];
    let _151: [&str; 1];
    let mut _152: error::ErrorCode;
    let mut _153: isize;
    let mut _155: !;
    let mut _156: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _160: (u128, u128);
    let mut _161: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _162: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _163: u128;
    let mut _164: u128;
    let mut _165: isize;
    let mut _167: !;
    let mut _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _170: u128;
    let mut _171: u128;
    let mut _173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _174: std::result::Result<u64, error::ErrorCode>;
    let mut _175: &state::perp_market::AMM;
    let mut _176: isize;
    let mut _178: !;
    let mut _179: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _181: (u32, u32);
    let mut _182: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u32, u32)>;
    let mut _183: std::result::Result<(u32, u32), error::ErrorCode>;
    let mut _184: &mut state::perp_market::PerpMarket;
    let mut _185: u64;
    let mut _186: std::option::Option<u64>;
    let mut _187: isize;
    let mut _189: !;
    let mut _190: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _194: (i128, i128);
    let mut _195: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i128, i128)>;
    let mut _196: std::result::Result<(i128, i128), error::ErrorCode>;
    let mut _197: &state::perp_market::AMM;
    let _198: &state::perp_market::AMM;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _204: ();
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _206: std::result::Result<(), error::ErrorCode>;
    let mut _207: bool;
    let mut _208: i128;
    let mut _209: i128;
    let mut _210: bool;
    let mut _211: i128;
    let mut _212: i128;
    let mut _213: ();
    let _215: ();
    let mut _216: &str;
    let _217: &str;
    let mut _218: &std::string::String;
    let _219: &std::string::String;
    let _220: std::string::String;
    let mut _222: std::fmt::Arguments<'_>;
    let mut _223: &[&str];
    let mut _224: &[&str; 2];
    let _225: &[&str; 2];
    let _226: [&str; 2];
    let mut _227: &[core::fmt::rt::Argument<'_>];
    let mut _228: &[core::fmt::rt::Argument<'_>; 1];
    let _229: &[core::fmt::rt::Argument<'_>; 1];
    let _230: [core::fmt::rt::Argument<'_>; 1];
    let mut _231: core::fmt::rt::Argument<'_>;
    let mut _232: &error::ErrorCode;
    let _233: &error::ErrorCode;
    let _234: ();
    let mut _235: &str;
    let _236: &str;
    let mut _237: error::ErrorCode;
    let mut _238: isize;
    let mut _240: !;
    let mut _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _243: ();
    scope 1 {
        debug error_code => _9;
        let _16: std::string::String;
        let _35: std::string::String;
        let mut _249: &[&str; 1];
        let mut _250: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
        scope 3 {
            debug res => _35;
        }
    }
    scope 4 {
        debug residual => _43;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _46;
        scope 7 {
        }
    }
    scope 8 {
        debug new_concentration_coef => _47;
        let _62: error::ErrorCode;
        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _99: ();
        let _101: u128;
        let _102: u128;
        let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _112: (u64, u128, u128);
        scope 9 {
            debug error_code => _62;
            let _69: std::string::String;
            let _88: std::string::String;
            let mut _247: &[&str; 1];
            let mut _248: &[&str; 2];
            scope 10 {
                debug res => _69;
            }
            scope 11 {
                debug res => _88;
            }
        }
        scope 12 {
            debug residual => _96;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _99;
            scope 15 {
            }
        }
        scope 16 {
            debug terminal_quote_reserves => _101;
            debug terminal_base_reserves => _102;
            let _120: error::ErrorCode;
            let _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _157: ();
            let _158: u128;
            let _159: u128;
            let _166: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _169: (u128, u128);
            scope 21 {
                debug error_code => _120;
                let _127: std::string::String;
                let _146: std::string::String;
                let mut _245: &[&str; 1];
                let mut _246: &[&str; 2];
                scope 22 {
                    debug res => _127;
                }
                scope 23 {
                    debug res => _146;
                }
            }
            scope 24 {
                debug residual => _154;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _157;
                scope 27 {
                }
            }
            scope 28 {
                debug min_base_asset_reserve => _158;
                debug max_base_asset_reserve => _159;
                let _172: u64;
                let _177: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _180: u64;
                scope 33 {
                    debug reserve_price_after => _172;
                    let _188: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _191: (u32, u32);
                    let _192: i128;
                    let _193: i128;
                    let _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _203: (i128, i128);
                    scope 38 {
                        debug residual => _188;
                        scope 39 {
                        }
                    }
                    scope 40 {
                        debug val => _191;
                        scope 41 {
                        }
                    }
                    scope 42 {
                        debug max_bids => _192;
                        debug max_asks => _193;
                        let _214: error::ErrorCode;
                        let _239: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _242: ();
                        scope 47 {
                            debug error_code => _214;
                            let _221: std::string::String;
                            let mut _244: &[&str; 2];
                            scope 48 {
                                debug res => _221;
                            }
                        }
                        scope 49 {
                            debug residual => _239;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug val => _242;
                            scope 52 {
                            }
                        }
                    }
                    scope 43 {
                        debug residual => _200;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug val => _203;
                        scope 46 {
                        }
                    }
                }
                scope 34 {
                    debug residual => _177;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug val => _180;
                    scope 37 {
                    }
                }
            }
            scope 29 {
                debug residual => _166;
                scope 30 {
                }
            }
            scope 31 {
                debug val => _169;
                scope 32 {
                }
            }
        }
        scope 17 {
            debug residual => _109;
            scope 18 {
            }
        }
        scope 19 {
            debug val => _112;
            scope 20 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _2;
        _6 = Gt(move _7, const 0_u128);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        goto -> bb14;
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidConcentrationCoef;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _250 = const _;
        _20 = &(*_250);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_9;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _27) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb6, unwind: bb114];
    }

    bb6: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb7, unwind: bb114];
    }

    bb7: {
        StorageDead(_11);
        drop(_15) -> [return: bb8, unwind: bb115];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _249 = const _;
        _39 = &(*_249);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        _36 = Arguments::<'_>::new_const(move _37) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_36);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb11, unwind: bb113];
    }

    bb11: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb12, unwind: bb113];
    }

    bb12: {
        StorageDead(_30);
        drop(_34) -> [return: bb13, unwind: bb115];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_41);
        _41 = _9;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _41);
        StorageDead(_41);
        StorageDead(_9);
        goto -> bb14;
    }

    bb14: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_5);
        _42 = discriminant(_4);
        switchInt(move _42) -> [0: bb16, 1: bb18, otherwise: bb17];
    }

    bb16: {
        StorageLive(_46);
        _46 = ((_4 as Continue).0: ());
        _3 = _46;
        StorageDead(_46);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _50 = CheckedSub(const _, const _);
        assert(!move (_50.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const _) -> [success: bb20, unwind continue];
    }

    bb17: {
        unreachable;
    }

    bb18: {
        StorageLive(_43);
        _43 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb107;
    }

    bb20: {
        _49 = move (_50.0: u128);
        StorageLive(_51);
        _51 = _2;
        _52 = Eq(_51, const 0_u128);
        assert(!move _52, "attempt to divide `{}` by zero", _49) -> [success: bb21, unwind continue];
    }

    bb21: {
        _48 = Div(move _49, move _51);
        StorageDead(_51);
        StorageDead(_49);
        _53 = CheckedAdd(const _, _48);
        assert(!move (_53.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, move _48) -> [success: bb22, unwind continue];
    }

    bb22: {
        _47 = move (_53.0: u128);
        StorageDead(_48);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _47;
        _57 = Gt(move _58, const _);
        switchInt(move _57) -> [0: bb26, otherwise: bb23];
    }

    bb23: {
        StorageDead(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = _47;
        _59 = Le(move _60, const _);
        switchInt(move _59) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        StorageDead(_60);
        StorageLive(_61);
        _61 = ();
        _56 = std::result::Result::<(), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        goto -> bb39;
    }

    bb25: {
        StorageDead(_60);
        goto -> bb27;
    }

    bb26: {
        StorageDead(_58);
        goto -> bb27;
    }

    bb27: {
        StorageLive(_62);
        _62 = error::ErrorCode::InvalidConcentrationCoef;
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        _248 = const _;
        _73 = &(*_248);
        _72 = &(*_73);
        _71 = move _72 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_72);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &_62;
        _80 = &(*_81);
        _79 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _80) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_80);
        _78 = [move _79];
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = move _76 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_76);
        _70 = Arguments::<'_>::new_v1(move _71, move _75) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_75);
        StorageDead(_71);
        _69 = format(move _70) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_70);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_73);
        _68 = move _69;
        StorageDead(_69);
        _67 = &_68;
        _66 = &(*_67);
        _65 = <String as Deref>::deref(move _66) -> [return: bb31, unwind: bb112];
    }

    bb31: {
        _64 = &(*_65);
        StorageDead(_66);
        _63 = solana_program::log::sol_log(move _64) -> [return: bb32, unwind: bb112];
    }

    bb32: {
        StorageDead(_64);
        drop(_68) -> [return: bb33, unwind: bb115];
    }

    bb33: {
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_63);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _247 = const _;
        _92 = &(*_247);
        _91 = &(*_92);
        _90 = move _91 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_91);
        _89 = Arguments::<'_>::new_const(move _90) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_90);
        _88 = format(move _89) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_89);
        StorageDead(_92);
        _87 = move _88;
        StorageDead(_88);
        _86 = &_87;
        _85 = &(*_86);
        _84 = <String as Deref>::deref(move _85) -> [return: bb36, unwind: bb111];
    }

    bb36: {
        _83 = &(*_84);
        StorageDead(_85);
        _82 = solana_program::log::sol_log(move _83) -> [return: bb37, unwind: bb111];
    }

    bb37: {
        StorageDead(_83);
        drop(_87) -> [return: bb38, unwind: bb115];
    }

    bb38: {
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageLive(_94);
        _94 = _62;
        _56 = std::result::Result::<(), error::ErrorCode>::Err(move _94);
        StorageDead(_94);
        StorageDead(_62);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_59);
        StorageDead(_57);
        _55 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _56) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_56);
        _95 = discriminant(_55);
        switchInt(move _95) -> [0: bb41, 1: bb42, otherwise: bb17];
    }

    bb41: {
        StorageLive(_99);
        _99 = ((_55 as Continue).0: ());
        _54 = _99;
        StorageDead(_99);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_100);
        _100 = _47;
        (((*_1).1: state::perp_market::AMM).7: u128) = move _100;
        StorageDead(_100);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &((*_1).1: state::perp_market::AMM);
        _106 = &(*_107);
        _105 = calculate_terminal_price_and_reserves(move _106) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_96);
        _96 = ((_55 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb106;
    }

    bb44: {
        StorageDead(_106);
        _104 = <std::result::Result<(u64, u128, u128), error::ErrorCode> as Try>::branch(move _105) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_105);
        _108 = discriminant(_104);
        switchInt(move _108) -> [0: bb46, 1: bb47, otherwise: bb17];
    }

    bb46: {
        StorageLive(_112);
        _112 = ((_104 as Continue).0: (u64, u128, u128));
        _103 = _112;
        StorageDead(_112);
        StorageLive(_101);
        _101 = (_103.1: u128);
        StorageLive(_102);
        _102 = (_103.2: u128);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_103);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = _101;
        StorageLive(_118);
        _118 = (((*_1).1: state::perp_market::AMM).12: u128);
        _116 = Eq(move _117, move _118);
        switchInt(move _116) -> [0: bb50, otherwise: bb49];
    }

    bb47: {
        StorageLive(_109);
        _109 = ((_104 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_103);
        goto -> bb106;
    }

    bb49: {
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_119);
        _119 = ();
        _115 = std::result::Result::<(), error::ErrorCode>::Ok(move _119);
        StorageDead(_119);
        goto -> bb62;
    }

    bb50: {
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_120);
        _120 = error::ErrorCode::InvalidAmmDetected;
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        _246 = const _;
        _131 = &(*_246);
        _130 = &(*_131);
        _129 = move _130 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_130);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &_120;
        _138 = &(*_139);
        _137 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _138) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_138);
        _136 = [move _137];
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = move _134 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_134);
        _128 = Arguments::<'_>::new_v1(move _129, move _133) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_133);
        StorageDead(_129);
        _127 = format(move _128) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_128);
        StorageDead(_139);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_131);
        _126 = move _127;
        StorageDead(_127);
        _125 = &_126;
        _124 = &(*_125);
        _123 = <String as Deref>::deref(move _124) -> [return: bb54, unwind: bb110];
    }

    bb54: {
        _122 = &(*_123);
        StorageDead(_124);
        _121 = solana_program::log::sol_log(move _122) -> [return: bb55, unwind: bb110];
    }

    bb55: {
        StorageDead(_122);
        drop(_126) -> [return: bb56, unwind: bb115];
    }

    bb56: {
        StorageDead(_126);
        StorageDead(_125);
        StorageDead(_123);
        StorageDead(_121);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _245 = const _;
        _150 = &(*_245);
        _149 = &(*_150);
        _148 = move _149 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_149);
        _147 = Arguments::<'_>::new_const(move _148) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_148);
        _146 = format(move _147) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_147);
        StorageDead(_150);
        _145 = move _146;
        StorageDead(_146);
        _144 = &_145;
        _143 = &(*_144);
        _142 = <String as Deref>::deref(move _143) -> [return: bb59, unwind: bb109];
    }

    bb59: {
        _141 = &(*_142);
        StorageDead(_143);
        _140 = solana_program::log::sol_log(move _141) -> [return: bb60, unwind: bb109];
    }

    bb60: {
        StorageDead(_141);
        drop(_145) -> [return: bb61, unwind: bb115];
    }

    bb61: {
        StorageDead(_145);
        StorageDead(_144);
        StorageDead(_142);
        StorageDead(_140);
        StorageLive(_152);
        _152 = _120;
        _115 = std::result::Result::<(), error::ErrorCode>::Err(move _152);
        StorageDead(_152);
        StorageDead(_120);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_116);
        _114 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _115) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_115);
        _153 = discriminant(_114);
        switchInt(move _153) -> [0: bb64, 1: bb65, otherwise: bb17];
    }

    bb64: {
        StorageLive(_157);
        _157 = ((_114 as Continue).0: ());
        _113 = _157;
        StorageDead(_157);
        StorageDead(_114);
        StorageDead(_113);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = (((*_1).1: state::perp_market::AMM).7: u128);
        StorageLive(_164);
        _164 = _102;
        _162 = calculate_bid_ask_bounds(move _163, move _164) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_154);
        _154 = ((_114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_156);
        _156 = _154;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _156) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb105;
    }

    bb67: {
        StorageDead(_164);
        StorageDead(_163);
        _161 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _162) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_162);
        _165 = discriminant(_161);
        switchInt(move _165) -> [0: bb69, 1: bb70, otherwise: bb17];
    }

    bb69: {
        StorageLive(_169);
        _169 = ((_161 as Continue).0: (u128, u128));
        _160 = _169;
        StorageDead(_169);
        StorageLive(_158);
        _158 = (_160.0: u128);
        StorageLive(_159);
        _159 = (_160.1: u128);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_170);
        _170 = _159;
        (((*_1).1: state::perp_market::AMM).9: u128) = move _170;
        StorageDead(_170);
        StorageLive(_171);
        _171 = _158;
        (((*_1).1: state::perp_market::AMM).8: u128) = move _171;
        StorageDead(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &((*_1).1: state::perp_market::AMM);
        _174 = AMM::reserve_price(move _175) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_166);
        _166 = ((_161 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_168);
        _168 = _166;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _168) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb105;
    }

    bb72: {
        StorageDead(_175);
        _173 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _174) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_174);
        _176 = discriminant(_173);
        switchInt(move _176) -> [0: bb74, 1: bb75, otherwise: bb17];
    }

    bb74: {
        StorageLive(_180);
        _180 = ((_173 as Continue).0: u64);
        _172 = _180;
        StorageDead(_180);
        StorageDead(_173);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _184 = &mut (*_1);
        StorageLive(_185);
        _185 = _172;
        StorageLive(_186);
        _186 = Option::<u64>::None;
        _183 = update_spreads(move _184, move _185, move _186) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_177);
        _177 = ((_173 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_179);
        _179 = _177;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _179) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_179);
        StorageDead(_177);
        StorageDead(_173);
        goto -> bb104;
    }

    bb77: {
        StorageDead(_186);
        StorageDead(_185);
        StorageDead(_184);
        _182 = <std::result::Result<(u32, u32), error::ErrorCode> as Try>::branch(move _183) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_183);
        _187 = discriminant(_182);
        switchInt(move _187) -> [0: bb79, 1: bb80, otherwise: bb17];
    }

    bb79: {
        StorageLive(_191);
        _191 = ((_182 as Continue).0: (u32, u32));
        _181 = _191;
        StorageDead(_191);
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &((*_1).1: state::perp_market::AMM);
        _197 = &(*_198);
        _196 = calculate_market_open_bids_asks(move _197) -> [return: bb82, unwind continue];
    }

    bb80: {
        StorageLive(_188);
        _188 = ((_182 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_190);
        _190 = _188;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _190) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_182);
        StorageDead(_181);
        goto -> bb104;
    }

    bb82: {
        StorageDead(_197);
        _195 = <std::result::Result<(i128, i128), error::ErrorCode> as Try>::branch(move _196) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_196);
        _199 = discriminant(_195);
        switchInt(move _199) -> [0: bb84, 1: bb85, otherwise: bb17];
    }

    bb84: {
        StorageLive(_203);
        _203 = ((_195 as Continue).0: (i128, i128));
        _194 = _203;
        StorageDead(_203);
        StorageLive(_192);
        _192 = (_194.0: i128);
        StorageLive(_193);
        _193 = (_194.1: i128);
        StorageDead(_198);
        StorageDead(_195);
        StorageDead(_194);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = _192;
        StorageLive(_209);
        _209 = (((*_1).1: state::perp_market::AMM).15: i128);
        _207 = Gt(move _208, move _209);
        switchInt(move _207) -> [0: bb88, otherwise: bb87];
    }

    bb85: {
        StorageLive(_200);
        _200 = ((_195 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_202);
        _202 = _200;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _202) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_195);
        StorageDead(_194);
        goto -> bb104;
    }

    bb87: {
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_210);
        StorageLive(_211);
        _211 = _193;
        StorageLive(_212);
        _212 = (((*_1).1: state::perp_market::AMM).15: i128);
        _210 = Lt(move _211, move _212);
        switchInt(move _210) -> [0: bb90, otherwise: bb89];
    }

    bb88: {
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb91;
    }

    bb89: {
        StorageDead(_212);
        StorageDead(_211);
        StorageLive(_213);
        _213 = ();
        _206 = std::result::Result::<(), error::ErrorCode>::Ok(move _213);
        StorageDead(_213);
        goto -> bb99;
    }

    bb90: {
        StorageDead(_212);
        StorageDead(_211);
        goto -> bb91;
    }

    bb91: {
        StorageLive(_214);
        _214 = error::ErrorCode::InvalidConcentrationCoef;
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        _244 = const _;
        _225 = &(*_244);
        _224 = &(*_225);
        _223 = move _224 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_224);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        _233 = &_214;
        _232 = &(*_233);
        _231 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _232) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_232);
        _230 = [move _231];
        StorageDead(_231);
        _229 = &_230;
        _228 = &(*_229);
        _227 = move _228 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_228);
        _222 = Arguments::<'_>::new_v1(move _223, move _227) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_227);
        StorageDead(_223);
        _221 = format(move _222) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_222);
        StorageDead(_233);
        StorageDead(_230);
        StorageDead(_229);
        StorageDead(_225);
        _220 = move _221;
        StorageDead(_221);
        _219 = &_220;
        _218 = &(*_219);
        _217 = <String as Deref>::deref(move _218) -> [return: bb95, unwind: bb108];
    }

    bb95: {
        _216 = &(*_217);
        StorageDead(_218);
        _215 = solana_program::log::sol_log(move _216) -> [return: bb96, unwind: bb108];
    }

    bb96: {
        StorageDead(_216);
        drop(_220) -> [return: bb97, unwind: bb115];
    }

    bb97: {
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_215);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = const "amm.base_asset_amount_with_amm exceeds the unload liquidity available after concentration adjustment";
        _235 = &(*_236);
        _234 = solana_program::log::sol_log(move _235) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_235);
        StorageDead(_236);
        StorageDead(_234);
        StorageLive(_237);
        _237 = _214;
        _206 = std::result::Result::<(), error::ErrorCode>::Err(move _237);
        StorageDead(_237);
        StorageDead(_214);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_210);
        StorageDead(_207);
        _205 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _206) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_206);
        _238 = discriminant(_205);
        switchInt(move _238) -> [0: bb101, 1: bb102, otherwise: bb17];
    }

    bb101: {
        StorageLive(_242);
        _242 = ((_205 as Continue).0: ());
        _204 = _242;
        StorageDead(_242);
        StorageDead(_205);
        StorageDead(_204);
        StorageLive(_243);
        _243 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _243);
        StorageDead(_243);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_172);
        StorageDead(_159);
        StorageDead(_158);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_47);
        goto -> bb107;
    }

    bb102: {
        StorageLive(_239);
        _239 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_241);
        _241 = _239;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _241) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_205);
        StorageDead(_204);
        StorageDead(_193);
        StorageDead(_192);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_172);
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_47);
        goto -> bb107;
    }

    bb107: {
        return;
    }

    bb108 (cleanup): {
        drop(_220) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb109 (cleanup): {
        drop(_145) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb110 (cleanup): {
        drop(_126) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb111 (cleanup): {
        drop(_87) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_68) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_34) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_15) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        resume;
    }
}
