// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_trigger_price` before PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_trigger_price(_1: &PerpMarket, _2: i64, _3: i64, _4: bool) -> std::result::Result<u64, error::ErrorCode> {
    debug self => _1;
    debug oracle_price => _2;
    debug now => _3;
    debug use_median_price => _4;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: !;
    let mut _8: i64;
    let _9: u64;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _14: std::result::Result<i64, error::ErrorCode>;
    let mut _15: i64;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _17: std::result::Result<i64, error::ErrorCode>;
    let mut _18: u64;
    let mut _19: isize;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: i64;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _32: std::result::Result<u64, error::ErrorCode>;
    let mut _33: i64;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _35: std::result::Result<i64, error::ErrorCode>;
    let mut _36: i64;
    let mut _37: i64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _50: std::result::Result<i64, error::ErrorCode>;
    let mut _51: &state::perp_market::PerpMarket;
    let mut _52: i64;
    let mut _53: i64;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _61: std::result::Result<u64, error::ErrorCode>;
    let mut _62: i64;
    let mut _63: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _64: std::result::Result<i64, error::ErrorCode>;
    let mut _65: i64;
    let mut _66: i64;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: bool;
    let mut _79: u64;
    let _80: ();
    let _81: ();
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[&str; 4];
    let _85: &[&str; 4];
    let _86: [&str; 4];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let mut _88: &[core::fmt::rt::Argument<'_>; 3];
    let _89: &[core::fmt::rt::Argument<'_>; 3];
    let _90: [core::fmt::rt::Argument<'_>; 3];
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &u64;
    let _93: &u64;
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &u64;
    let _96: &u64;
    let mut _97: core::fmt::rt::Argument<'_>;
    let mut _98: &u64;
    let _99: &u64;
    let mut _101: u64;
    let mut _102: u64;
    let mut _103: u64;
    let _104: ();
    let mut _105: &mut [u64];
    let mut _106: &mut [u64; 3];
    let _107: usize;
    let mut _108: usize;
    let mut _109: bool;
    let mut _111: u64;
    let mut _112: i64;
    let mut _113: u64;
    let mut _114: u64;
    let _115: ();
    let mut _116: &mut [u64];
    let mut _117: &mut [u64; 3];
    let _118: usize;
    let mut _119: usize;
    let mut _120: bool;
    let mut _121: &state::perp_market::PerpMarket;
    let mut _122: u64;
    let mut _123: i64;
    let mut _124: u64;
    scope 1 {
        debug last_fill_price => _9;
        let _10: u64;
        scope 2 {
            debug mark_price_5min_twap => _10;
            let _11: i64;
            scope 3 {
                debug last_oracle_price_twap_5min => _11;
                let _12: i64;
                let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _23: i64;
                let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _29: i64;
                scope 4 {
                    debug basis_5min => _12;
                    let _30: u64;
                    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _42: i64;
                    let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _47: u64;
                    scope 13 {
                        debug oracle_plus_basis_5min => _30;
                        let _48: i64;
                        let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _58: i64;
                        scope 22 {
                            debug last_funding_basis => _48;
                            let _59: u64;
                            let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _71: i64;
                            let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _76: u64;
                            scope 27 {
                                debug oracle_plus_funding_basis => _59;
                                let _77: u64;
                                let mut _100: [u64; 3];
                                let mut _110: [u64; 3];
                                let mut _125: &[&str; 4];
                                scope 36 {
                                    debug median_price => _77;
                                }
                                scope 37 {
                                    debug prices => _100;
                                }
                                scope 38 {
                                    debug prices => _110;
                                }
                            }
                            scope 28 {
                                debug residual => _68;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _71;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug residual => _73;
                                scope 33 {
                                }
                            }
                            scope 34 {
                                debug val => _76;
                                scope 35 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _55;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _58;
                            scope 26 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _39;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _42;
                        scope 17 {
                        }
                    }
                    scope 18 {
                        debug residual => _44;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _47;
                        scope 21 {
                        }
                    }
                }
                scope 5 {
                    debug residual => _20;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _23;
                    scope 8 {
                    }
                }
                scope 9 {
                    debug residual => _26;
                    scope 10 {
                    }
                }
                scope 11 {
                    debug val => _29;
                    scope 12 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        _6 = _4;
        switchInt(move _6) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        StorageLive(_8);
        _8 = _2;
        _0 = <i64 as Cast>::cast::<u64>(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb61;
    }

    bb3: {
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_9);
        _9 = ((*_1).37: u64);
        StorageLive(_10);
        _10 = (((*_1).1: state::perp_market::AMM).46: u64);
        StorageLive(_11);
        _11 = ((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _10;
        _17 = <u64 as Cast>::cast::<i64>(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_18);
        _16 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_23);
        _23 = ((_16 as Continue).0: i64);
        _15 = _23;
        StorageDead(_23);
        StorageLive(_24);
        _24 = _11;
        _14 = <i64 as SafeMath>::safe_sub(move _15, move _24) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_20);
        _20 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb59;
    }

    bb10: {
        StorageDead(_24);
        StorageDead(_15);
        _13 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _14) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_14);
        _25 = discriminant(_13);
        switchInt(move _25) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_13 as Continue).0: i64);
        _12 = _29;
        StorageDead(_29);
        StorageDead(_16);
        StorageDead(_13);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = _2;
        StorageLive(_37);
        _37 = _12;
        _35 = <i64 as SafeMath>::safe_add(move _36, move _37) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_26);
        _26 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_26);
        goto -> bb59;
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_36);
        _34 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _35) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_35);
        _38 = discriminant(_34);
        switchInt(move _38) -> [0: bb17, 1: bb18, otherwise: bb7];
    }

    bb17: {
        StorageLive(_42);
        _42 = ((_34 as Continue).0: i64);
        _33 = _42;
        StorageDead(_42);
        _32 = <i64 as Cast>::cast::<u64>(move _33) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_39);
        _39 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb57;
    }

    bb20: {
        StorageDead(_33);
        _31 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _32) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_32);
        _43 = discriminant(_31);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb7];
    }

    bb22: {
        StorageLive(_47);
        _47 = ((_31 as Continue).0: u64);
        _30 = _47;
        StorageDead(_47);
        StorageDead(_34);
        StorageDead(_31);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(*_1);
        StorageLive(_52);
        _52 = _2;
        StorageLive(_53);
        _53 = _3;
        _50 = PerpMarket::get_last_funding_basis(move _51, move _52, move _53) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_44);
        _44 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        goto -> bb57;
    }

    bb25: {
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_51);
        _49 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _50) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_50);
        _54 = discriminant(_49);
        switchInt(move _54) -> [0: bb27, 1: bb28, otherwise: bb7];
    }

    bb27: {
        StorageLive(_58);
        _58 = ((_49 as Continue).0: i64);
        _48 = _58;
        StorageDead(_58);
        StorageDead(_49);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _2;
        StorageLive(_66);
        _66 = _48;
        _64 = <i64 as SafeMath>::safe_add(move _65, move _66) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_55);
        _55 = ((_49 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_49);
        goto -> bb56;
    }

    bb30: {
        StorageDead(_66);
        StorageDead(_65);
        _63 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _64) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_64);
        _67 = discriminant(_63);
        switchInt(move _67) -> [0: bb32, 1: bb33, otherwise: bb7];
    }

    bb32: {
        StorageLive(_71);
        _71 = ((_63 as Continue).0: i64);
        _62 = _71;
        StorageDead(_71);
        _61 = <i64 as Cast>::cast::<u64>(move _62) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_68);
        _68 = ((_63 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb55;
    }

    bb35: {
        StorageDead(_62);
        _60 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _61) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_61);
        _72 = discriminant(_60);
        switchInt(move _72) -> [0: bb37, 1: bb38, otherwise: bb7];
    }

    bb37: {
        StorageLive(_76);
        _76 = ((_60 as Continue).0: u64);
        _59 = _76;
        StorageDead(_76);
        StorageDead(_63);
        StorageDead(_60);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _9;
        _78 = Gt(move _79, const 0_u64);
        switchInt(move _78) -> [0: bb41, otherwise: bb40];
    }

    bb38: {
        StorageLive(_73);
        _73 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_75);
        StorageDead(_73);
        goto -> bb55;
    }

    bb40: {
        StorageDead(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _125 = const _;
        _85 = &(*_125);
        _84 = &(*_85);
        _83 = move _84 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_9;
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _92) -> [return: bb42, unwind continue];
    }

    bb41: {
        StorageDead(_79);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _112 = _2;
        _111 = core::num::<impl i64>::unsigned_abs(move _112) -> [return: bb49, unwind continue];
    }

    bb42: {
        StorageDead(_92);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_59;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _95) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_95);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &_30;
        _98 = &(*_99);
        _97 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _98) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_98);
        _90 = [move _91, move _94, move _97];
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = move _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_88);
        _82 = Arguments::<'_>::new_v1(move _83, move _87) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_87);
        StorageDead(_83);
        _81 = _print(move _82) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_82);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_81);
        _80 = const ();
        StorageDead(_80);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _9;
        StorageLive(_102);
        _102 = _59;
        StorageLive(_103);
        _103 = _30;
        _100 = [move _101, move _102, move _103];
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &mut _100;
        _105 = move _106 as &mut [u64] (PointerCoercion(Unsize));
        StorageDead(_106);
        _104 = core::slice::<impl [u64]>::sort_unstable(move _105) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_107);
        _107 = const 1_usize;
        _108 = Len(_100);
        _109 = Lt(_107, _108);
        assert(move _109, "index out of bounds: the length is {} but the index is {}", move _108, _107) -> [success: bb48, unwind continue];
    }

    bb48: {
        _77 = _100[_107];
        StorageDead(_100);
        StorageDead(_107);
        goto -> bb52;
    }

    bb49: {
        StorageDead(_112);
        StorageLive(_113);
        _113 = _59;
        StorageLive(_114);
        _114 = _30;
        _110 = [move _111, move _113, move _114];
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_111);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &mut _110;
        _116 = move _117 as &mut [u64] (PointerCoercion(Unsize));
        StorageDead(_117);
        _115 = core::slice::<impl [u64]>::sort_unstable(move _116) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_118);
        _118 = const 1_usize;
        _119 = Len(_110);
        _120 = Lt(_118, _119);
        assert(move _120, "index out of bounds: the length is {} but the index is {}", move _119, _118) -> [success: bb51, unwind continue];
    }

    bb51: {
        _77 = _110[_118];
        StorageDead(_110);
        StorageDead(_118);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_78);
        StorageLive(_121);
        _121 = &(*_1);
        StorageLive(_122);
        StorageLive(_123);
        _123 = _2;
        _122 = core::num::<impl i64>::unsigned_abs(move _123) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_123);
        StorageLive(_124);
        _124 = _77;
        _0 = PerpMarket::clamp_trigger_price(move _121, move _122, move _124) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_77);
        StorageDead(_59);
        StorageDead(_48);
        StorageDead(_30);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb61;
    }

    bb55: {
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_48);
        goto -> bb58;
    }

    bb57: {
        StorageDead(_34);
        StorageDead(_31);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_30);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_16);
        StorageDead(_13);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb61;
    }

    bb61: {
        return;
    }
}
