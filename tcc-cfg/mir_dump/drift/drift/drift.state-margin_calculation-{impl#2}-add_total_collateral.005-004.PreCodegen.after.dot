digraph Mir_0_3440 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn MarginCalculation::add_total_collateral(_1: &amp;ReErased mut state::margin_calculation::MarginCalculation, _2: i128) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let mut _3: i128;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _5: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _6: i128;<br align="left"/>let mut _7: i128;<br align="left"/>let mut _8: isize;<br align="left"/>let _9: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _10: !;<br align="left"/>let mut _11: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _12: i128;<br align="left"/>let _13: ();<br align="left"/>let mut _14: bool;<br align="left"/>let mut _15: u128;<br align="left"/>let mut _16: bool;<br align="left"/>let mut _17: i128;<br align="left"/>let mut _18: i128;<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _20: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _21: i128;<br align="left"/>let mut _22: i128;<br align="left"/>let mut _23: i128;<br align="left"/>let mut _24: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _25: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _26: i128;<br align="left"/>let mut _27: i128;<br align="left"/>let mut _28: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _29: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _30: u128;<br align="left"/>let mut _31: isize;<br align="left"/>let _32: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _33: !;<br align="left"/>let mut _34: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _35: i128;<br align="left"/>let mut _36: isize;<br align="left"/>let _37: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _38: !;<br align="left"/>let mut _39: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _40: i128;<br align="left"/>let mut _41: bool;<br align="left"/>let mut _42: bool;<br align="left"/>let mut _43: bool;<br align="left"/>let mut _44: bool;<br align="left"/>let mut _45: isize;<br align="left"/>let _46: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _47: !;<br align="left"/>let mut _48: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _49: i128;<br align="left"/>let mut _50: ();<br align="left"/>debug self =&gt; _1;<br align="left"/>debug total_collateral =&gt; _2;<br align="left"/>debug residual =&gt; _9;<br align="left"/>debug val =&gt; _12;<br align="left"/>debug residual =&gt; _32;<br align="left"/>debug val =&gt; _35;<br align="left"/>debug residual =&gt; _37;<br align="left"/>debug val =&gt; _40;<br align="left"/>debug residual =&gt; _46;<br align="left"/>debug val =&gt; _49;<br align="left"/>>;
    bb0__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = ((*_1).1: i128)<br/>StorageLive(_7)<br/>_7 = _2<br/></td></tr><tr><td align="left">_5 = &lt;i128 as SafeMath&gt;::safe_add(move _6, move _7)</td></tr></table>>];
    bb1__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>_8 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _8)</td></tr></table>>];
    bb3__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_4 as Continue).0: i128)<br/>_3 = _12<br/>StorageDead(_12)<br/>((*_1).1: i128) = move _3<br/>StorageDead(_3)<br/>StorageDead(_4)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = (((*_1).0: state::margin_calculation::MarginContext).4: u128)<br/>_14 = Gt(move _15, const 0_u128)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb4__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>_9 = ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_11)<br/>_11 = _9<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _11)</td></tr></table>>];
    bb6__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_9)<br/>StorageDead(_3)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageLive(_16)<br/>StorageLive(_17)<br/>_17 = _2<br/>_16 = Lt(move _17, const 0_i128)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb8__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = ((*_1).2: i128)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>_26 = _2<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = (((*_1).0: state::margin_calculation::MarginContext).4: u128)<br/></td></tr><tr><td align="left">_29 = &lt;u128 as Cast&gt;::cast::&lt;i128&gt;(move _30)</td></tr></table>>];
    bb10__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/></td></tr><tr><td align="left">_28 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _29)</td></tr></table>>];
    bb11__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/>_31 = discriminant(_28)<br/></td></tr><tr><td align="left">switchInt(move _31)</td></tr></table>>];
    bb12__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_28 as Continue).0: i128)<br/>_27 = _35<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">_25 = &lt;i128 as SafeMath&gt;::safe_mul(move _26, move _27)</td></tr></table>>];
    bb13__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_28 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_34)<br/>_34 = _32<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _34)</td></tr></table>>];
    bb14__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/>StorageDead(_32)<br/>StorageDead(_27)<br/>StorageDead(_26)<br/>StorageDead(_25)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_26)<br/></td></tr><tr><td align="left">_24 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _25)</td></tr></table>>];
    bb16__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_25)<br/>_36 = discriminant(_24)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb17__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_40)<br/>_40 = ((_24 as Continue).0: i128)<br/>_23 = _40<br/>StorageDead(_40)<br/>_41 = Eq(const _, const 0_i128)<br/></td></tr><tr><td align="left">assert(!move _41, &quot;attempt to divide `{}` by zero&quot;, _23)</td></tr></table>>];
    bb18__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_37)<br/>_37 = ((_24 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_39)<br/>_39 = _37<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _39)</td></tr></table>>];
    bb19__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">_42 = Eq(const _, const -1_i128)<br/>_43 = Eq(_23, const i128::MIN)<br/>_44 = BitAnd(move _42, move _43)<br/></td></tr><tr><td align="left">assert(!move _44, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _23, const _)</td></tr></table>>];
    bb21__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">_22 = Div(move _23, const _)<br/>StorageDead(_23)<br/></td></tr><tr><td align="left">_20 = &lt;i128 as SafeMath&gt;::safe_add(move _21, move _22)</td></tr></table>>];
    bb22__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb23__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_45 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _45)</td></tr></table>>];
    bb24__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_49)<br/>_49 = ((_19 as Continue).0: i128)<br/>_18 = _49<br/>StorageDead(_49)<br/>((*_1).2: i128) = move _18<br/>StorageDead(_18)<br/>StorageDead(_28)<br/>StorageDead(_24)<br/>StorageDead(_19)<br/>_13 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageLive(_46)<br/>_46 = ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_48)<br/>_48 = _46<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _48)</td></tr></table>>];
    bb26__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb27__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb28__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">_13 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/>StorageLive(_50)<br/>_50 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _50)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_28)<br/>StorageDead(_24)<br/>StorageDead(_19)<br/>StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb32__0_3440 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3440 -> bb1__0_3440 [label="return"];
    bb1__0_3440 -> bb2__0_3440 [label="return"];
    bb2__0_3440 -> bb3__0_3440 [label="0"];
    bb2__0_3440 -> bb5__0_3440 [label="1"];
    bb2__0_3440 -> bb4__0_3440 [label="otherwise"];
    bb3__0_3440 -> bb8__0_3440 [label="0"];
    bb3__0_3440 -> bb7__0_3440 [label="otherwise"];
    bb5__0_3440 -> bb6__0_3440 [label="return"];
    bb6__0_3440 -> bb32__0_3440 [label=""];
    bb7__0_3440 -> bb27__0_3440 [label="0"];
    bb7__0_3440 -> bb9__0_3440 [label="otherwise"];
    bb8__0_3440 -> bb28__0_3440 [label=""];
    bb9__0_3440 -> bb10__0_3440 [label="return"];
    bb10__0_3440 -> bb11__0_3440 [label="return"];
    bb11__0_3440 -> bb12__0_3440 [label="0"];
    bb11__0_3440 -> bb13__0_3440 [label="1"];
    bb11__0_3440 -> bb4__0_3440 [label="otherwise"];
    bb12__0_3440 -> bb15__0_3440 [label="return"];
    bb13__0_3440 -> bb14__0_3440 [label="return"];
    bb14__0_3440 -> bb30__0_3440 [label=""];
    bb15__0_3440 -> bb16__0_3440 [label="return"];
    bb16__0_3440 -> bb17__0_3440 [label="0"];
    bb16__0_3440 -> bb18__0_3440 [label="1"];
    bb16__0_3440 -> bb4__0_3440 [label="otherwise"];
    bb17__0_3440 -> bb20__0_3440 [label="success"];
    bb18__0_3440 -> bb19__0_3440 [label="return"];
    bb19__0_3440 -> bb30__0_3440 [label=""];
    bb20__0_3440 -> bb21__0_3440 [label="success"];
    bb21__0_3440 -> bb22__0_3440 [label="return"];
    bb22__0_3440 -> bb23__0_3440 [label="return"];
    bb23__0_3440 -> bb24__0_3440 [label="0"];
    bb23__0_3440 -> bb25__0_3440 [label="1"];
    bb23__0_3440 -> bb4__0_3440 [label="otherwise"];
    bb24__0_3440 -> bb29__0_3440 [label=""];
    bb25__0_3440 -> bb26__0_3440 [label="return"];
    bb26__0_3440 -> bb31__0_3440 [label=""];
    bb27__0_3440 -> bb28__0_3440 [label=""];
    bb28__0_3440 -> bb29__0_3440 [label=""];
    bb29__0_3440 -> bb32__0_3440 [label=""];
    bb30__0_3440 -> bb31__0_3440 [label=""];
    bb31__0_3440 -> bb32__0_3440 [label=""];
}
