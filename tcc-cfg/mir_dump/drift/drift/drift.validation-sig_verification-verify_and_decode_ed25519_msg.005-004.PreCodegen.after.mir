// MIR for `verify_and_decode_ed25519_msg` after PreCodegen

fn verify_and_decode_ed25519_msg(_1: &Instruction, _2: &anchor_lang::prelude::AccountInfo<'_>, _3: u16, _4: &[u8; 32], _5: &[u8], _6: bool) -> std::result::Result<VerifiedMessage, anchor_lang::error::Error> {
    debug ed25519_ix => _1;
    debug instructions_sysvar => _2;
    debug current_ix_index => _3;
    debug signer => _4;
    debug msg => _5;
    debug is_delegate_signer => _6;
    let mut _0: std::result::Result<validation::sig_verification::VerifiedMessage, anchor_lang::error::Error>;
    let _7: ();
    let mut _8: bool;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: &anchor_lang::prelude::Pubkey;
    let _11: anchor_lang::prelude::Pubkey;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _15: !;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let _22: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 1];
    let _26: &[&str; 1];
    let _27: [&str; 1];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &anchor_lang::prelude::Pubkey;
    let _34: &anchor_lang::prelude::Pubkey;
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: &std::string::String;
    let _39: &std::string::String;
    let _40: std::string::String;
    let _41: std::string::String;
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[&str; 1];
    let _45: &[&str; 1];
    let _46: [&str; 1];
    let mut _47: &[core::fmt::rt::Argument<'_>];
    let mut _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: [core::fmt::rt::Argument<'_>; 1];
    let mut _51: core::fmt::rt::Argument<'_>;
    let mut _52: &usize;
    let _53: &usize;
    let _54: usize;
    let mut _55: &std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _56: anchor_lang::error::Error;
    let mut _57: error::ErrorCode;
    let _58: &std::vec::Vec<u8>;
    let _59: ();
    let mut _60: bool;
    let mut _61: usize;
    let mut _62: &std::vec::Vec<u8>;
    let mut _63: !;
    let _64: ();
    let mut _65: &str;
    let _66: &str;
    let mut _67: &std::string::String;
    let _68: &std::string::String;
    let _69: std::string::String;
    let mut _71: std::fmt::Arguments<'_>;
    let mut _72: &[&str];
    let mut _73: &[&str; 1];
    let _74: &[&str; 1];
    let _75: [&str; 1];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let mut _77: &[core::fmt::rt::Argument<'_>; 1];
    let _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: [core::fmt::rt::Argument<'_>; 1];
    let mut _80: core::fmt::rt::Argument<'_>;
    let mut _81: &usize;
    let _82: &usize;
    let _83: usize;
    let mut _84: &std::vec::Vec<u8>;
    let mut _85: anchor_lang::error::Error;
    let mut _86: validation::sig_verification::SignatureVerificationError;
    let mut _88: &u8;
    let mut _89: &std::vec::Vec<u8>;
    let _91: ();
    let mut _92: bool;
    let mut _93: u8;
    let mut _94: u8;
    let mut _95: !;
    let mut _96: anchor_lang::error::Error;
    let mut _97: validation::sig_verification::SignatureVerificationError;
    let _99: &[validation::sig_verification::Ed25519SignatureOffsets];
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &[validation::sig_verification::Ed25519SignatureOffsets]>;
    let mut _101: std::result::Result<&[validation::sig_verification::Ed25519SignatureOffsets], error::ErrorCode>;
    let mut _102: std::result::Result<&[validation::sig_verification::Ed25519SignatureOffsets], bytemuck::PodCastError>;
    let mut _103: &[u8];
    let _104: &[u8];
    let _105: &[u8];
    let mut _106: &std::vec::Vec<u8>;
    let mut _107: std::ops::RangeFrom<usize>;
    let mut _108: {closure@programs/drift/src/validation/sig_verification.rs:102:86: 102:89};
    let mut _109: isize;
    let mut _111: !;
    let mut _112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, u8>;
    let mut _116: std::result::Result<u8, validation::sig_verification::SignatureVerificationError>;
    let mut _117: std::result::Result<u8, std::num::TryFromIntError>;
    let mut _118: usize;
    let mut _119: &[validation::sig_verification::Ed25519SignatureOffsets];
    let mut _120: {closure@programs/drift/src/validation/sig_verification.rs:110:18: 110:21};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let _126: ();
    let mut _127: bool;
    let mut _128: u8;
    let mut _129: u8;
    let mut _130: !;
    let mut _131: anchor_lang::error::Error;
    let mut _132: validation::sig_verification::SignatureVerificationError;
    let _134: usize;
    let mut _135: usize;
    let mut _136: bool;
    let _138: ();
    let mut _139: bool;
    let mut _140: u16;
    let mut _141: u16;
    let mut _142: !;
    let _143: ();
    let mut _144: &str;
    let _145: &str;
    let mut _146: &std::string::String;
    let _147: &std::string::String;
    let _148: std::string::String;
    let mut _150: std::fmt::Arguments<'_>;
    let mut _151: &[&str];
    let mut _152: &[&str; 1];
    let _153: &[&str; 1];
    let _154: [&str; 1];
    let mut _155: &[core::fmt::rt::Argument<'_>];
    let mut _156: &[core::fmt::rt::Argument<'_>; 1];
    let _157: &[core::fmt::rt::Argument<'_>; 1];
    let _158: [core::fmt::rt::Argument<'_>; 1];
    let mut _159: core::fmt::rt::Argument<'_>;
    let mut _160: &u16;
    let _161: &u16;
    let mut _162: anchor_lang::error::Error;
    let mut _163: error::ErrorCode;
    let mut _165: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, solana_program::instruction::Instruction>;
    let mut _166: std::result::Result<solana_program::instruction::Instruction, validation::sig_verification::SignatureVerificationError>;
    let mut _167: std::result::Result<solana_program::instruction::Instruction, anchor_lang::prelude::ProgramError>;
    let mut _168: usize;
    let mut _169: u16;
    let mut _170: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _171: {closure@programs/drift/src/validation/sig_verification.rs:129:14: 129:17};
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let mut _178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, u16>;
    let mut _179: std::result::Result<u16, validation::sig_verification::SignatureVerificationError>;
    let mut _180: std::option::Option<u16>;
    let mut _181: u16;
    let mut _182: u16;
    let mut _183: validation::sig_verification::SignatureVerificationError;
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, &[u8]>;
    let mut _191: std::result::Result<&[u8], validation::sig_verification::SignatureVerificationError>;
    let mut _192: std::option::Option<&[u8]>;
    let mut _193: &[u8];
    let _194: &[u8];
    let mut _195: &std::vec::Vec<u8>;
    let mut _196: std::ops::Range<usize>;
    let mut _197: usize;
    let mut _198: u16;
    let mut _199: usize;
    let mut _200: u16;
    let mut _201: validation::sig_verification::SignatureVerificationError;
    let mut _202: isize;
    let mut _204: !;
    let mut _205: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let _207: ();
    let mut _208: bool;
    let mut _209: &[u8];
    let mut _210: &[u8];
    let mut _211: !;
    let mut _212: anchor_lang::error::Error;
    let mut _213: validation::sig_verification::SignatureVerificationError;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, u16>;
    let mut _216: std::result::Result<u16, validation::sig_verification::SignatureVerificationError>;
    let mut _217: std::option::Option<u16>;
    let mut _218: u16;
    let mut _219: validation::sig_verification::SignatureVerificationError;
    let mut _220: isize;
    let mut _222: !;
    let mut _223: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let _225: ();
    let mut _226: bool;
    let mut _227: u16;
    let mut _228: u16;
    let mut _229: !;
    let _230: ();
    let mut _231: &str;
    let _232: &str;
    let mut _233: &std::string::String;
    let _234: &std::string::String;
    let _235: std::string::String;
    let mut _237: std::fmt::Arguments<'_>;
    let mut _238: &[&str];
    let mut _239: &[&str; 2];
    let _240: &[&str; 2];
    let _241: [&str; 2];
    let mut _242: &[core::fmt::rt::Argument<'_>];
    let mut _243: &[core::fmt::rt::Argument<'_>; 2];
    let _244: &[core::fmt::rt::Argument<'_>; 2];
    let _245: [core::fmt::rt::Argument<'_>; 2];
    let mut _246: core::fmt::rt::Argument<'_>;
    let mut _247: &u16;
    let _248: &u16;
    let mut _249: core::fmt::rt::Argument<'_>;
    let mut _250: &u16;
    let _251: &u16;
    let mut _252: anchor_lang::error::Error;
    let mut _253: error::ErrorCode;
    let mut _255: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _256: std::result::Result<u16, error::ErrorCode>;
    let mut _257: std::option::Option<u16>;
    let mut _258: u16;
    let mut _259: error::ErrorCode;
    let mut _260: isize;
    let mut _262: !;
    let mut _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _266: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, u16>;
    let mut _267: std::result::Result<u16, validation::sig_verification::SignatureVerificationError>;
    let mut _268: std::option::Option<u16>;
    let mut _269: u16;
    let mut _270: validation::sig_verification::SignatureVerificationError;
    let mut _271: isize;
    let mut _273: !;
    let mut _274: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let _276: ();
    let mut _277: bool;
    let mut _278: u16;
    let mut _279: u16;
    let mut _280: !;
    let mut _281: anchor_lang::error::Error;
    let mut _282: validation::sig_verification::SignatureVerificationError;
    let mut _285: u16;
    let mut _286: std::option::Option<u16>;
    let mut _287: u16;
    let mut _288: u16;
    let mut _290: u16;
    let mut _291: std::option::Option<u16>;
    let mut _292: u16;
    let mut _293: u16;
    let mut _294: &[u8];
    let _295: &[u8];
    let _296: &[u8];
    let mut _297: &[u8];
    let mut _298: std::ops::Range<usize>;
    let mut _299: usize;
    let mut _300: usize;
    let _301: ();
    let mut _302: bool;
    let mut _303: u16;
    let mut _304: u16;
    let mut _305: !;
    let mut _306: anchor_lang::error::Error;
    let mut _307: validation::sig_verification::SignatureVerificationError;
    let _308: ();
    let mut _309: bool;
    let mut _310: u16;
    let mut _311: u16;
    let mut _312: bool;
    let mut _313: u16;
    let mut _314: u16;
    let mut _315: bool;
    let mut _316: u16;
    let mut _317: u16;
    let mut _318: !;
    let mut _319: anchor_lang::error::Error;
    let mut _320: validation::sig_verification::SignatureVerificationError;
    let mut _323: u16;
    let mut _324: std::option::Option<u16>;
    let mut _325: u16;
    let mut _326: u16;
    let mut _328: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, usize>;
    let mut _329: std::result::Result<usize, validation::sig_verification::SignatureVerificationError>;
    let mut _330: std::option::Option<usize>;
    let mut _331: usize;
    let mut _332: validation::sig_verification::SignatureVerificationError;
    let mut _333: isize;
    let mut _335: !;
    let mut _336: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let _338: &[u8];
    let mut _339: &[u8];
    let mut _340: std::ops::Range<usize>;
    let mut _341: usize;
    let mut _342: usize;
    let mut _345: u16;
    let mut _346: std::option::Option<u16>;
    let mut _347: u16;
    let mut _348: u16;
    let mut _350: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, usize>;
    let mut _351: std::result::Result<usize, validation::sig_verification::SignatureVerificationError>;
    let mut _352: std::option::Option<usize>;
    let mut _353: usize;
    let mut _354: usize;
    let mut _355: u16;
    let mut _356: validation::sig_verification::SignatureVerificationError;
    let mut _357: isize;
    let mut _359: !;
    let mut _360: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let _362: &[u8];
    let mut _363: &[u8];
    let mut _364: std::ops::Range<usize>;
    let mut _365: usize;
    let mut _366: usize;
    let _367: ();
    let mut _368: bool;
    let mut _369: &&[u8];
    let mut _370: &&[u8; 32];
    let mut _371: !;
    let _372: ();
    let mut _373: &str;
    let _374: &str;
    let mut _375: &std::string::String;
    let _376: &std::string::String;
    let _377: std::string::String;
    let mut _379: std::fmt::Arguments<'_>;
    let mut _380: &[&str];
    let mut _381: &[&str; 1];
    let _382: &[&str; 1];
    let _383: [&str; 1];
    let mut _384: &[core::fmt::rt::Argument<'_>];
    let mut _385: &[core::fmt::rt::Argument<'_>; 1];
    let _386: &[core::fmt::rt::Argument<'_>; 1];
    let _387: [core::fmt::rt::Argument<'_>; 1];
    let mut _388: core::fmt::rt::Argument<'_>;
    let mut _389: &&[u8];
    let _390: &&[u8];
    let _391: ();
    let mut _392: &str;
    let _393: &str;
    let mut _394: &std::string::String;
    let _395: &std::string::String;
    let _396: std::string::String;
    let mut _398: std::fmt::Arguments<'_>;
    let mut _399: &[&str];
    let mut _400: &[&str; 1];
    let _401: &[&str; 1];
    let _402: [&str; 1];
    let mut _403: &[core::fmt::rt::Argument<'_>];
    let mut _404: &[core::fmt::rt::Argument<'_>; 1];
    let _405: &[core::fmt::rt::Argument<'_>; 1];
    let _406: [core::fmt::rt::Argument<'_>; 1];
    let mut _407: core::fmt::rt::Argument<'_>;
    let mut _408: &&[u8; 32];
    let _409: &&[u8; 32];
    let mut _410: anchor_lang::error::Error;
    let mut _411: error::ErrorCode;
    let mut _414: u16;
    let mut _415: std::option::Option<u16>;
    let mut _416: u16;
    let mut _417: u16;
    let mut _419: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, usize>;
    let mut _420: std::result::Result<usize, validation::sig_verification::SignatureVerificationError>;
    let mut _421: std::option::Option<usize>;
    let mut _422: usize;
    let mut _423: usize;
    let mut _424: validation::sig_verification::SignatureVerificationError;
    let mut _425: isize;
    let mut _427: !;
    let mut _428: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let _430: [u8; 64];
    let mut _431: std::result::Result<[u8; 64], std::array::TryFromSliceError>;
    let mut _432: &[u8];
    let _433: &[u8];
    let mut _434: &[u8];
    let mut _435: std::ops::Range<usize>;
    let mut _436: usize;
    let mut _437: usize;
    let mut _439: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, std::vec::Vec<u8>>;
    let mut _440: std::result::Result<std::vec::Vec<u8>, validation::sig_verification::SignatureVerificationError>;
    let mut _441: std::result::Result<std::vec::Vec<u8>, hex::FromHexError>;
    let mut _442: &[u8];
    let mut _443: {closure@programs/drift/src/validation/sig_verification.rs:233:38: 233:41};
    let mut _444: isize;
    let mut _446: !;
    let mut _447: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let mut _449: bool;
    let mut _450: !;
    let mut _452: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, state::order_params::SignedMsgOrderParamsDelegateMessage>;
    let mut _453: std::result::Result<state::order_params::SignedMsgOrderParamsDelegateMessage, validation::sig_verification::SignatureVerificationError>;
    let mut _454: std::result::Result<state::order_params::SignedMsgOrderParamsDelegateMessage, std::io::Error>;
    let mut _455: &mut &[u8];
    let mut _456: &mut &[u8];
    let mut _457: &[u8];
    let _458: &[u8];
    let mut _459: &std::vec::Vec<u8>;
    let mut _460: std::ops::RangeFrom<usize>;
    let mut _461: {closure@programs/drift/src/validation/sig_verification.rs:239:18: 239:21};
    let mut _462: isize;
    let mut _464: !;
    let mut _465: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let mut _467: validation::sig_verification::VerifiedMessage;
    let mut _468: state::order_params::OrderParams;
    let mut _469: std::option::Option<u16>;
    let mut _470: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _471: anchor_lang::prelude::Pubkey;
    let mut _472: u64;
    let mut _473: [u8; 8];
    let mut _474: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>;
    let mut _475: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>;
    let mut _476: [u8; 64];
    let mut _477: !;
    let mut _479: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>, state::order_params::SignedMsgOrderParamsMessage>;
    let mut _480: std::result::Result<state::order_params::SignedMsgOrderParamsMessage, validation::sig_verification::SignatureVerificationError>;
    let mut _481: std::result::Result<state::order_params::SignedMsgOrderParamsMessage, std::io::Error>;
    let mut _482: &mut &[u8];
    let mut _483: &mut &[u8];
    let mut _484: &[u8];
    let _485: &[u8];
    let mut _486: &std::vec::Vec<u8>;
    let mut _487: std::ops::RangeFrom<usize>;
    let mut _488: {closure@programs/drift/src/validation/sig_verification.rs:258:18: 258:21};
    let mut _489: isize;
    let mut _491: !;
    let mut _492: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
    let mut _494: validation::sig_verification::VerifiedMessage;
    let mut _495: state::order_params::OrderParams;
    let mut _496: std::option::Option<u16>;
    let mut _497: u16;
    let mut _498: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _499: u64;
    let mut _500: [u8; 8];
    let mut _501: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>;
    let mut _502: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>;
    let mut _503: [u8; 64];
    let mut _504: &[&str; 1];
    let mut _505: &[&str; 1];
    let mut _511: &anchor_lang::prelude::Pubkey;
    let mut _512: isize;
    let mut _513: isize;
    let mut _514: isize;
    let mut _515: isize;
    let mut _516: isize;
    let mut _517: isize;
    let mut _518: isize;
    let mut _519: isize;
    let mut _520: isize;
    let mut _521: isize;
    scope 1 {
        debug res => _22;
    }
    scope 2 {
        debug res => _41;
    }
    scope 3 {
        debug ed25519_ix_data => _58;
        let _70: std::string::String;
        let _87: u8;
        let mut _506: &[&str; 1];
        scope 4 {
            debug res => _70;
        }
        scope 5 {
            debug num_signatures => _87;
            let _90: u8;
            scope 6 {
                debug signature_index => _90;
                let _98: &[validation::sig_verification::Ed25519SignatureOffsets];
                let _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _113: &[validation::sig_verification::Ed25519SignatureOffsets];
                scope 7 {
                    debug args => _98;
                    let _114: u8;
                    let _122: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                    let _125: u8;
                    scope 12 {
                        debug args_len => _114;
                        let _133: &validation::sig_verification::Ed25519SignatureOffsets;
                        scope 17 {
                            debug offsets => _133;
                            let _137: u16;
                            scope 18 {
                                debug message_offset => _137;
                                let _149: std::string::String;
                                let _164: solana_program::instruction::Instruction;
                                let _173: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                let _176: solana_program::instruction::Instruction;
                                let mut _507: &[&str; 1];
                                scope 19 {
                                    debug res => _149;
                                }
                                scope 20 {
                                    debug self_instruction => _164;
                                    let _177: u16;
                                    let _185: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                    let _188: u16;
                                    scope 25 {
                                        debug message_end_offset => _177;
                                        let _189: &[u8];
                                        let _203: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                        let _206: &[u8];
                                        scope 30 {
                                            debug expected_message_data => _189;
                                            let _214: u16;
                                            let _221: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                            let _224: u16;
                                            scope 35 {
                                                debug expected_public_key_offset => _214;
                                                let _236: std::string::String;
                                                let _254: u16;
                                                let _261: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _264: u16;
                                                let mut _508: &[&str; 2];
                                                scope 40 {
                                                    debug res => _236;
                                                }
                                                scope 41 {
                                                    debug expected_message_size_offset => _254;
                                                    let _265: u16;
                                                    let _272: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                                    let _275: u16;
                                                    scope 46 {
                                                        debug expected_message_data_offset => _265;
                                                        let _283: u16;
                                                        let _284: usize;
                                                        scope 51 {
                                                            debug expected_message_size => _283;
                                                            let _321: &[u8];
                                                            let _322: usize;
                                                            scope 54 {
                                                                debug public_key => _321;
                                                                let _343: &[u8];
                                                                let _344: usize;
                                                                scope 61 {
                                                                    debug payload => _343;
                                                                    let _378: std::string::String;
                                                                    let _397: std::string::String;
                                                                    let _412: &[u8; 64];
                                                                    let _413: usize;
                                                                    let mut _509: &[&str; 1];
                                                                    let mut _510: &[&str; 1];
                                                                    scope 68 {
                                                                        debug res => _378;
                                                                    }
                                                                    scope 69 {
                                                                        debug res => _397;
                                                                    }
                                                                    scope 70 {
                                                                        debug signature => _412;
                                                                        let _438: std::vec::Vec<u8>;
                                                                        let _445: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                                                        let _448: std::vec::Vec<u8>;
                                                                        scope 77 {
                                                                            debug payload => _438;
                                                                            let _451: state::order_params::SignedMsgOrderParamsDelegateMessage;
                                                                            let _463: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                                                            let _466: state::order_params::SignedMsgOrderParamsDelegateMessage;
                                                                            let _478: state::order_params::SignedMsgOrderParamsMessage;
                                                                            let _490: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                                                            let _493: state::order_params::SignedMsgOrderParamsMessage;
                                                                            scope 82 {
                                                                                debug deserialized => _451;
                                                                            }
                                                                            scope 83 {
                                                                                debug residual => _463;
                                                                                scope 84 {
                                                                                }
                                                                            }
                                                                            scope 85 {
                                                                                debug val => _466;
                                                                                scope 86 {
                                                                                }
                                                                            }
                                                                            scope 87 {
                                                                                debug deserialized => _478;
                                                                            }
                                                                            scope 88 {
                                                                                debug residual => _490;
                                                                                scope 89 {
                                                                                }
                                                                            }
                                                                            scope 90 {
                                                                                debug val => _493;
                                                                                scope 91 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 78 {
                                                                            debug residual => _445;
                                                                            scope 79 {
                                                                            }
                                                                        }
                                                                        scope 80 {
                                                                            debug val => _448;
                                                                            scope 81 {
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 71 {
                                                                        debug start => _413;
                                                                        let _418: usize;
                                                                        let _426: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                                                        let _429: usize;
                                                                        scope 72 {
                                                                            debug end => _418;
                                                                        }
                                                                        scope 73 {
                                                                            debug residual => _426;
                                                                            scope 74 {
                                                                            }
                                                                        }
                                                                        scope 75 {
                                                                            debug val => _429;
                                                                            scope 76 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 62 {
                                                                    debug start => _344;
                                                                    let _349: usize;
                                                                    let _358: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                                                    let _361: usize;
                                                                    scope 63 {
                                                                        debug end => _349;
                                                                    }
                                                                    scope 64 {
                                                                        debug residual => _358;
                                                                        scope 65 {
                                                                        }
                                                                    }
                                                                    scope 66 {
                                                                        debug val => _361;
                                                                        scope 67 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 55 {
                                                                debug start => _322;
                                                                let _327: usize;
                                                                let _334: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>;
                                                                let _337: usize;
                                                                scope 56 {
                                                                    debug end => _327;
                                                                }
                                                                scope 57 {
                                                                    debug residual => _334;
                                                                    scope 58 {
                                                                    }
                                                                }
                                                                scope 59 {
                                                                    debug val => _337;
                                                                    scope 60 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 52 {
                                                            debug start => _284;
                                                            let _289: usize;
                                                            scope 53 {
                                                                debug end => _289;
                                                            }
                                                        }
                                                    }
                                                    scope 47 {
                                                        debug residual => _272;
                                                        scope 48 {
                                                        }
                                                    }
                                                    scope 49 {
                                                        debug val => _275;
                                                        scope 50 {
                                                        }
                                                    }
                                                }
                                                scope 42 {
                                                    debug residual => _261;
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug val => _264;
                                                    scope 45 {
                                                    }
                                                }
                                            }
                                            scope 36 {
                                                debug residual => _221;
                                                scope 37 {
                                                }
                                            }
                                            scope 38 {
                                                debug val => _224;
                                                scope 39 {
                                                }
                                            }
                                        }
                                        scope 31 {
                                            debug residual => _203;
                                            scope 32 {
                                            }
                                        }
                                        scope 33 {
                                            debug val => _206;
                                            scope 34 {
                                            }
                                        }
                                    }
                                    scope 26 {
                                        debug residual => _185;
                                        scope 27 {
                                        }
                                    }
                                    scope 28 {
                                        debug val => _188;
                                        scope 29 {
                                        }
                                    }
                                }
                                scope 21 {
                                    debug residual => _173;
                                    scope 22 {
                                    }
                                }
                                scope 23 {
                                    debug val => _176;
                                    scope 24 {
                                    }
                                }
                            }
                        }
                    }
                    scope 13 {
                        debug residual => _122;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _125;
                        scope 16 {
                        }
                    }
                }
                scope 8 {
                    debug residual => _110;
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _113;
                    scope 11 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).0: anchor_lang::prelude::Pubkey);
        StorageLive(_10);
        _511 = const _;
        _10 = &(*_511);
        _8 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb5;
    }

    bb3: {
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &((*_1).1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _13 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        _12 = Ne(move _13, const 0_usize);
        switchInt(move _12) -> [0: bb20, otherwise: bb5];
    }

    bb5: {
        StorageDead(_13);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _505 = const _;
        _26 = &(*_505);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_1).0: anchor_lang::prelude::Pubkey);
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _33) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_33);
        _31 = [move _32];
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        _23 = Arguments::<'_>::new_v1(move _24, move _28) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <String as Deref>::deref(move _19) -> [return: bb9, unwind: bb240];
    }

    bb9: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb10, unwind: bb240];
    }

    bb10: {
        StorageDead(_17);
        drop(_21) -> [return: bb11, unwind: bb241];
    }

    bb11: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _504 = const _;
        _45 = &(*_504);
        _44 = &(*_45);
        _43 = move _44 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &((*_1).1: std::vec::Vec<anchor_lang::prelude::AccountMeta>);
        _54 = Vec::<anchor_lang::prelude::AccountMeta>::len(move _55) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_55);
        _53 = &_54;
        _52 = &(*_53);
        _51 = core::fmt::rt::Argument::<'_>::new_debug::<usize>(move _52) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_52);
        _50 = [move _51];
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = move _48 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_48);
        _42 = Arguments::<'_>::new_v1(move _43, move _47) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_47);
        StorageDead(_43);
        _41 = format(move _42) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_42);
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        _40 = move _41;
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = <String as Deref>::deref(move _38) -> [return: bb16, unwind: bb239];
    }

    bb16: {
        _36 = &(*_37);
        StorageDead(_38);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb17, unwind: bb239];
    }

    bb17: {
        StorageDead(_36);
        drop(_40) -> [return: bb18, unwind: bb241];
    }

    bb18: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_56);
        StorageLive(_57);
        _57 = error::ErrorCode::SigVerificationFailed;
        _56 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _57) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_57);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _56);
        StorageDead(_56);
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb231;
    }

    bb20: {
        StorageDead(_13);
        _7 = const ();
        StorageDead(_12);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_58);
        _58 = &((*_1).2: std::vec::Vec<u8>);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &(*_58);
        _61 = Vec::<u8>::len(move _62) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_62);
        _60 = Lt(move _61, const 2_usize);
        switchInt(move _60) -> [0: bb31, otherwise: bb22];
    }

    bb22: {
        StorageDead(_61);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _506 = const _;
        _74 = &(*_506);
        _73 = &(*_74);
        _72 = move _73 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_73);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &((*_1).2: std::vec::Vec<u8>);
        _83 = Vec::<u8>::len(move _84) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = core::fmt::rt::Argument::<'_>::new_debug::<usize>(move _81) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_81);
        _79 = [move _80];
        StorageDead(_80);
        _78 = &_79;
        _77 = &(*_78);
        _76 = move _77 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_77);
        _71 = Arguments::<'_>::new_v1(move _72, move _76) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_76);
        StorageDead(_72);
        _70 = format(move _71) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_71);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_74);
        _69 = move _70;
        StorageDead(_70);
        _68 = &_69;
        _67 = &(*_68);
        _66 = <String as Deref>::deref(move _67) -> [return: bb27, unwind: bb238];
    }

    bb27: {
        _65 = &(*_66);
        StorageDead(_67);
        _64 = solana_program::log::sol_log(move _65) -> [return: bb28, unwind: bb238];
    }

    bb28: {
        StorageDead(_65);
        drop(_69) -> [return: bb29, unwind: bb241];
    }

    bb29: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_64);
        StorageLive(_85);
        StorageLive(_86);
        _86 = SignatureVerificationError::InvalidEd25519InstructionDataLength;
        _85 = <SignatureVerificationError as Into<anchor_lang::error::Error>>::into(move _86) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_86);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _85);
        StorageDead(_85);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb230;
    }

    bb31: {
        StorageDead(_61);
        _59 = const ();
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &(*_58);
        _88 = <Vec<u8> as Index<usize>>::index(move _89, const 0_usize) -> [return: bb32, unwind continue];
    }

    bb32: {
        _87 = (*_88);
        StorageDead(_89);
        StorageDead(_88);
        StorageLive(_90);
        _90 = const 0_u8;
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = _90;
        StorageLive(_94);
        _94 = _87;
        _92 = Ge(move _93, move _94);
        switchInt(move _92) -> [0: bb35, otherwise: bb33];
    }

    bb33: {
        StorageDead(_94);
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        _97 = SignatureVerificationError::InvalidSignatureIndex;
        _96 = <SignatureVerificationError as Into<anchor_lang::error::Error>>::into(move _97) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_97);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _96);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb229;
    }

    bb35: {
        StorageDead(_94);
        StorageDead(_93);
        _91 = const ();
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &(*_58);
        StorageLive(_107);
        _107 = RangeFrom::<usize> { start: const _ };
        _105 = <Vec<u8> as Index<RangeFrom<usize>>>::index(move _106, move _107) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_107);
        StorageDead(_106);
        _104 = &(*_105);
        _103 = &(*_104);
        _102 = bytemuck::try_cast_slice::<u8, sig_verification::Ed25519SignatureOffsets>(move _103) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_103);
        StorageLive(_108);
        _108 = {closure@programs/drift/src/validation/sig_verification.rs:102:86: 102:89};
        _101 = std::result::Result::<&[sig_verification::Ed25519SignatureOffsets], bytemuck::PodCastError>::map_err::<error::ErrorCode, {closure@programs/drift/src/validation/sig_verification.rs:102:86: 102:89}>(move _102, move _108) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_108);
        StorageDead(_102);
        _100 = <std::result::Result<&[sig_verification::Ed25519SignatureOffsets], error::ErrorCode> as Try>::branch(move _101) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_101);
        _109 = discriminant(_100);
        switchInt(move _109) -> [0: bb40, 1: bb42, otherwise: bb41];
    }

    bb40: {
        StorageLive(_113);
        _113 = ((_100 as Continue).0: &[validation::sig_verification::Ed25519SignatureOffsets]);
        _99 = &(*_113);
        StorageDead(_113);
        _98 = &(*_99);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_98);
        _118 = core::slice::<impl [sig_verification::Ed25519SignatureOffsets]>::len(move _119) -> [return: bb44, unwind continue];
    }

    bb41: {
        unreachable;
    }

    bb42: {
        StorageLive(_110);
        _110 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_112);
        _112 = _110;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _112) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_99);
        goto -> bb228;
    }

    bb44: {
        StorageDead(_119);
        _117 = <usize as TryInto<u8>>::try_into(move _118) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_118);
        StorageLive(_120);
        _120 = {closure@programs/drift/src/validation/sig_verification.rs:110:18: 110:21};
        _116 = std::result::Result::<u8, TryFromIntError>::map_err::<SignatureVerificationError, {closure@programs/drift/src/validation/sig_verification.rs:110:18: 110:21}>(move _117, move _120) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_120);
        StorageDead(_117);
        _115 = <std::result::Result<u8, SignatureVerificationError> as Try>::branch(move _116) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_116);
        _121 = discriminant(_115);
        switchInt(move _121) -> [0: bb48, 1: bb49, otherwise: bb41];
    }

    bb48: {
        StorageLive(_125);
        _125 = ((_115 as Continue).0: u8);
        _114 = _125;
        StorageDead(_125);
        StorageDead(_115);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _90;
        StorageLive(_129);
        _129 = _114;
        _127 = Ge(move _128, move _129);
        switchInt(move _127) -> [0: bb52, otherwise: bb51];
    }

    bb49: {
        StorageLive(_122);
        _122 = ((_115 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _124) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_115);
        goto -> bb227;
    }

    bb51: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        _132 = SignatureVerificationError::InvalidSignatureIndex;
        _131 = <SignatureVerificationError as Into<anchor_lang::error::Error>>::into(move _132) -> [return: bb53, unwind continue];
    }

    bb52: {
        StorageDead(_129);
        StorageDead(_128);
        _126 = const ();
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_133);
        StorageLive(_134);
        _134 = const 0_usize;
        _135 = Len((*_98));
        _136 = Lt(_134, _135);
        assert(move _136, "index out of bounds: the length is {} but the index is {}", move _135, _134) -> [success: bb54, unwind continue];
    }

    bb53: {
        StorageDead(_132);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _131);
        StorageDead(_131);
        StorageDead(_127);
        StorageDead(_126);
        goto -> bb227;
    }

    bb54: {
        _133 = &(*_98)[_134];
        StorageLive(_137);
        _137 = ((*_133).0: u16);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = ((*_133).0: u16);
        StorageLive(_141);
        _141 = _137;
        _139 = Ne(move _140, move _141);
        switchInt(move _139) -> [0: bb63, otherwise: bb55];
    }

    bb55: {
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _507 = const _;
        _153 = &(*_507);
        _152 = &(*_153);
        _151 = move _152 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_152);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &((*_133).0: u16);
        _160 = &(*_161);
        _159 = core::fmt::rt::Argument::<'_>::new_debug::<u16>(move _160) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_160);
        _158 = [move _159];
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = move _156 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_156);
        _150 = Arguments::<'_>::new_v1(move _151, move _155) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_155);
        StorageDead(_151);
        _149 = format(move _150) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_150);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_153);
        _148 = move _149;
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = <String as Deref>::deref(move _146) -> [return: bb59, unwind: bb237];
    }

    bb59: {
        _144 = &(*_145);
        StorageDead(_146);
        _143 = solana_program::log::sol_log(move _144) -> [return: bb60, unwind: bb237];
    }

    bb60: {
        StorageDead(_144);
        drop(_148) -> [return: bb61, unwind: bb241];
    }

    bb61: {
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_145);
        StorageDead(_143);
        StorageLive(_162);
        StorageLive(_163);
        _163 = error::ErrorCode::SigVerificationFailed;
        _162 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _163) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_163);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _162);
        StorageDead(_162);
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb226;
    }

    bb63: {
        StorageDead(_141);
        StorageDead(_140);
        _138 = const ();
        StorageDead(_139);
        StorageDead(_138);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        _169 = _3;
        _168 = <u16 as Into<usize>>::into(move _169) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_169);
        StorageLive(_170);
        _170 = &(*_2);
        _167 = load_instruction_at_checked(move _168, move _170) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_170);
        StorageDead(_168);
        StorageLive(_171);
        _171 = {closure@programs/drift/src/validation/sig_verification.rs:129:14: 129:17};
        _166 = std::result::Result::<Instruction, anchor_lang::prelude::ProgramError>::map_err::<SignatureVerificationError, {closure@programs/drift/src/validation/sig_verification.rs:129:14: 129:17}>(move _167, move _171) -> [return: bb66, unwind: bb241];
    }

    bb66: {
        StorageDead(_171);
        StorageDead(_167);
        _165 = <std::result::Result<Instruction, SignatureVerificationError> as Try>::branch(move _166) -> [return: bb67, unwind: bb241];
    }

    bb67: {
        StorageDead(_166);
        _172 = discriminant(_165);
        switchInt(move _172) -> [0: bb68, 1: bb69, otherwise: bb41];
    }

    bb68: {
        StorageLive(_176);
        _176 = move ((_165 as Continue).0: solana_program::instruction::Instruction);
        _164 = move _176;
        StorageDead(_176);
        _514 = discriminant(_165);
        StorageDead(_165);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = ((*_133).4: u16);
        StorageLive(_182);
        _182 = ((*_133).5: u16);
        _180 = core::num::<impl u16>::checked_add(move _181, move _182) -> [return: bb71, unwind: bb236];
    }

    bb69: {
        StorageLive(_173);
        _173 = ((_165 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_175);
        _175 = _173;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _175) -> [return: bb70, unwind: bb243];
    }

    bb70: {
        StorageDead(_175);
        StorageDead(_173);
        _512 = discriminant(_165);
        StorageDead(_165);
        goto -> bb225;
    }

    bb71: {
        StorageDead(_182);
        StorageDead(_181);
        StorageLive(_183);
        _183 = SignatureVerificationError::MessageOffsetOverflow;
        _179 = Option::<u16>::ok_or::<SignatureVerificationError>(move _180, move _183) -> [return: bb72, unwind: bb236];
    }

    bb72: {
        StorageDead(_183);
        StorageDead(_180);
        _178 = <std::result::Result<u16, SignatureVerificationError> as Try>::branch(move _179) -> [return: bb73, unwind: bb236];
    }

    bb73: {
        StorageDead(_179);
        _184 = discriminant(_178);
        switchInt(move _184) -> [0: bb74, 1: bb75, otherwise: bb41];
    }

    bb74: {
        StorageLive(_188);
        _188 = ((_178 as Continue).0: u16);
        _177 = _188;
        StorageDead(_188);
        StorageDead(_178);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &(_164.2: std::vec::Vec<u8>);
        _194 = <Vec<u8> as Deref>::deref(move _195) -> [return: bb77, unwind: bb236];
    }

    bb75: {
        StorageLive(_185);
        _185 = ((_178 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_187);
        _187 = _185;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _187) -> [return: bb76, unwind: bb236];
    }

    bb76: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_178);
        goto -> bb224;
    }

    bb77: {
        _193 = &(*_194);
        StorageDead(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = _137;
        _197 = <usize as From<u16>>::from(move _198) -> [return: bb78, unwind: bb236];
    }

    bb78: {
        StorageDead(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = _177;
        _199 = <usize as From<u16>>::from(move _200) -> [return: bb79, unwind: bb236];
    }

    bb79: {
        StorageDead(_200);
        _196 = std::ops::Range::<usize> { start: move _197, end: move _199 };
        StorageDead(_199);
        StorageDead(_197);
        _192 = core::slice::<impl [u8]>::get::<std::ops::Range<usize>>(move _193, move _196) -> [return: bb80, unwind: bb236];
    }

    bb80: {
        StorageDead(_196);
        StorageDead(_193);
        StorageLive(_201);
        _201 = SignatureVerificationError::InvalidMessageOffset;
        _191 = Option::<&[u8]>::ok_or::<SignatureVerificationError>(move _192, move _201) -> [return: bb81, unwind: bb236];
    }

    bb81: {
        StorageDead(_201);
        StorageDead(_192);
        _190 = <std::result::Result<&[u8], SignatureVerificationError> as Try>::branch(move _191) -> [return: bb82, unwind: bb236];
    }

    bb82: {
        StorageDead(_191);
        _202 = discriminant(_190);
        switchInt(move _202) -> [0: bb83, 1: bb84, otherwise: bb41];
    }

    bb83: {
        StorageLive(_206);
        _206 = ((_190 as Continue).0: &[u8]);
        _189 = _206;
        StorageDead(_206);
        StorageDead(_194);
        StorageDead(_190);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &(*_189);
        StorageLive(_210);
        _210 = &(*_5);
        _208 = slice_eq(move _209, move _210) -> [return: bb86, unwind: bb236];
    }

    bb84: {
        StorageLive(_203);
        _203 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_205);
        _205 = _203;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _205) -> [return: bb85, unwind: bb236];
    }

    bb85: {
        StorageDead(_205);
        StorageDead(_203);
        StorageDead(_194);
        StorageDead(_190);
        goto -> bb223;
    }

    bb86: {
        switchInt(move _208) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        StorageDead(_210);
        StorageDead(_209);
        _207 = const ();
        StorageDead(_208);
        StorageDead(_207);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = ((*_133).0: u16);
        _217 = core::num::<impl u16>::checked_add(move _218, const _) -> [return: bb90, unwind: bb236];
    }

    bb88: {
        StorageDead(_210);
        StorageDead(_209);
        StorageLive(_212);
        StorageLive(_213);
        _213 = SignatureVerificationError::InvalidMessageData;
        _212 = <SignatureVerificationError as Into<anchor_lang::error::Error>>::into(move _213) -> [return: bb89, unwind: bb236];
    }

    bb89: {
        StorageDead(_213);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _212);
        StorageDead(_212);
        StorageDead(_208);
        StorageDead(_207);
        goto -> bb223;
    }

    bb90: {
        StorageDead(_218);
        StorageLive(_219);
        _219 = SignatureVerificationError::MessageOffsetOverflow;
        _216 = Option::<u16>::ok_or::<SignatureVerificationError>(move _217, move _219) -> [return: bb91, unwind: bb236];
    }

    bb91: {
        StorageDead(_219);
        StorageDead(_217);
        _215 = <std::result::Result<u16, SignatureVerificationError> as Try>::branch(move _216) -> [return: bb92, unwind: bb236];
    }

    bb92: {
        StorageDead(_216);
        _220 = discriminant(_215);
        switchInt(move _220) -> [0: bb93, 1: bb94, otherwise: bb41];
    }

    bb93: {
        StorageLive(_224);
        _224 = ((_215 as Continue).0: u16);
        _214 = _224;
        StorageDead(_224);
        StorageDead(_215);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = ((*_133).2: u16);
        StorageLive(_228);
        _228 = _214;
        _226 = Ne(move _227, move _228);
        switchInt(move _226) -> [0: bb97, otherwise: bb96];
    }

    bb94: {
        StorageLive(_221);
        _221 = ((_215 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_223);
        _223 = _221;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _223) -> [return: bb95, unwind: bb236];
    }

    bb95: {
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_215);
        goto -> bb222;
    }

    bb96: {
        StorageDead(_228);
        StorageDead(_227);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _508 = const _;
        _240 = &(*_508);
        _239 = &(*_240);
        _238 = move _239 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_239);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        _248 = &((*_133).2: u16);
        _247 = &(*_248);
        _246 = core::fmt::rt::Argument::<'_>::new_debug::<u16>(move _247) -> [return: bb98, unwind: bb236];
    }

    bb97: {
        StorageDead(_228);
        StorageDead(_227);
        _225 = const ();
        StorageDead(_226);
        StorageDead(_225);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = _214;
        _257 = core::num::<impl u16>::checked_add(move _258, const _) -> [return: bb106, unwind: bb236];
    }

    bb98: {
        StorageDead(_247);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &_214;
        _250 = &(*_251);
        _249 = core::fmt::rt::Argument::<'_>::new_debug::<u16>(move _250) -> [return: bb99, unwind: bb236];
    }

    bb99: {
        StorageDead(_250);
        _245 = [move _246, move _249];
        StorageDead(_249);
        StorageDead(_246);
        _244 = &_245;
        _243 = &(*_244);
        _242 = move _243 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_243);
        _237 = Arguments::<'_>::new_v1(move _238, move _242) -> [return: bb100, unwind: bb236];
    }

    bb100: {
        StorageDead(_242);
        StorageDead(_238);
        _236 = format(move _237) -> [return: bb101, unwind: bb236];
    }

    bb101: {
        StorageDead(_237);
        StorageDead(_251);
        StorageDead(_248);
        StorageDead(_245);
        StorageDead(_244);
        StorageDead(_240);
        _235 = move _236;
        StorageDead(_236);
        _234 = &_235;
        _233 = &(*_234);
        _232 = <String as Deref>::deref(move _233) -> [return: bb102, unwind: bb235];
    }

    bb102: {
        _231 = &(*_232);
        StorageDead(_233);
        _230 = solana_program::log::sol_log(move _231) -> [return: bb103, unwind: bb235];
    }

    bb103: {
        StorageDead(_231);
        drop(_235) -> [return: bb104, unwind: bb236];
    }

    bb104: {
        StorageDead(_235);
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_230);
        StorageLive(_252);
        StorageLive(_253);
        _253 = error::ErrorCode::SigVerificationFailed;
        _252 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _253) -> [return: bb105, unwind: bb236];
    }

    bb105: {
        StorageDead(_253);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _252);
        StorageDead(_252);
        StorageDead(_226);
        StorageDead(_225);
        goto -> bb222;
    }

    bb106: {
        StorageDead(_258);
        StorageLive(_259);
        _259 = error::ErrorCode::SigVerificationFailed;
        _256 = Option::<u16>::ok_or::<error::ErrorCode>(move _257, move _259) -> [return: bb107, unwind: bb236];
    }

    bb107: {
        StorageDead(_259);
        StorageDead(_257);
        _255 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _256) -> [return: bb108, unwind: bb236];
    }

    bb108: {
        StorageDead(_256);
        _260 = discriminant(_255);
        switchInt(move _260) -> [0: bb109, 1: bb110, otherwise: bb41];
    }

    bb109: {
        StorageLive(_264);
        _264 = ((_255 as Continue).0: u16);
        _254 = _264;
        StorageDead(_264);
        StorageDead(_255);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _269 = _254;
        _268 = core::num::<impl u16>::checked_add(move _269, const _) -> [return: bb112, unwind: bb236];
    }

    bb110: {
        StorageLive(_261);
        _261 = ((_255 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_263);
        _263 = _261;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _263) -> [return: bb111, unwind: bb236];
    }

    bb111: {
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_255);
        goto -> bb221;
    }

    bb112: {
        StorageDead(_269);
        StorageLive(_270);
        _270 = SignatureVerificationError::MessageOffsetOverflow;
        _267 = Option::<u16>::ok_or::<SignatureVerificationError>(move _268, move _270) -> [return: bb113, unwind: bb236];
    }

    bb113: {
        StorageDead(_270);
        StorageDead(_268);
        _266 = <std::result::Result<u16, SignatureVerificationError> as Try>::branch(move _267) -> [return: bb114, unwind: bb236];
    }

    bb114: {
        StorageDead(_267);
        _271 = discriminant(_266);
        switchInt(move _271) -> [0: bb115, 1: bb116, otherwise: bb41];
    }

    bb115: {
        StorageLive(_275);
        _275 = ((_266 as Continue).0: u16);
        _265 = _275;
        StorageDead(_275);
        StorageDead(_266);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = ((*_133).4: u16);
        StorageLive(_279);
        _279 = _265;
        _277 = Ne(move _278, move _279);
        switchInt(move _277) -> [0: bb119, otherwise: bb118];
    }

    bb116: {
        StorageLive(_272);
        _272 = ((_266 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_274);
        _274 = _272;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _274) -> [return: bb117, unwind: bb236];
    }

    bb117: {
        StorageDead(_274);
        StorageDead(_272);
        StorageDead(_266);
        goto -> bb220;
    }

    bb118: {
        StorageDead(_279);
        StorageDead(_278);
        StorageLive(_281);
        StorageLive(_282);
        _282 = SignatureVerificationError::InvalidMessageOffset;
        _281 = <SignatureVerificationError as Into<anchor_lang::error::Error>>::into(move _282) -> [return: bb120, unwind: bb236];
    }

    bb119: {
        StorageDead(_279);
        StorageDead(_278);
        _276 = const ();
        StorageDead(_277);
        StorageDead(_276);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = _254;
        StorageLive(_288);
        _288 = _137;
        _286 = core::num::<impl u16>::checked_sub(move _287, move _288) -> [return: bb121, unwind: bb236];
    }

    bb120: {
        StorageDead(_282);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _281);
        StorageDead(_281);
        StorageDead(_277);
        StorageDead(_276);
        goto -> bb220;
    }

    bb121: {
        StorageDead(_288);
        StorageDead(_287);
        _285 = Option::<u16>::unwrap(move _286) -> [return: bb122, unwind: bb236];
    }

    bb122: {
        StorageDead(_286);
        _284 = <usize as From<u16>>::from(move _285) -> [return: bb123, unwind: bb236];
    }

    bb123: {
        StorageDead(_285);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _292 = _265;
        StorageLive(_293);
        _293 = _137;
        _291 = core::num::<impl u16>::checked_sub(move _292, move _293) -> [return: bb124, unwind: bb236];
    }

    bb124: {
        StorageDead(_293);
        StorageDead(_292);
        _290 = Option::<u16>::unwrap(move _291) -> [return: bb125, unwind: bb236];
    }

    bb125: {
        StorageDead(_291);
        _289 = <usize as From<u16>>::from(move _290) -> [return: bb126, unwind: bb236];
    }

    bb126: {
        StorageDead(_290);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = &(*_5);
        StorageLive(_298);
        StorageLive(_299);
        _299 = _284;
        StorageLive(_300);
        _300 = _289;
        _298 = std::ops::Range::<usize> { start: move _299, end: move _300 };
        StorageDead(_300);
        StorageDead(_299);
        _296 = <[u8] as Index<std::ops::Range<usize>>>::index(move _297, move _298) -> [return: bb127, unwind: bb236];
    }

    bb127: {
        StorageDead(_298);
        StorageDead(_297);
        _295 = &(*_296);
        _294 = &(*_295);
        _283 = <LittleEndian as ByteOrder>::read_u16(move _294) -> [return: bb128, unwind: bb236];
    }

    bb128: {
        StorageDead(_294);
        StorageDead(_289);
        StorageDead(_284);
        StorageDead(_296);
        StorageDead(_295);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = ((*_133).5: u16);
        StorageLive(_304);
        _304 = _283;
        _302 = Ne(move _303, move _304);
        switchInt(move _302) -> [0: bb131, otherwise: bb129];
    }

    bb129: {
        StorageDead(_304);
        StorageDead(_303);
        StorageLive(_306);
        StorageLive(_307);
        _307 = SignatureVerificationError::InvalidMessageDataSize;
        _306 = <SignatureVerificationError as Into<anchor_lang::error::Error>>::into(move _307) -> [return: bb130, unwind: bb236];
    }

    bb130: {
        StorageDead(_307);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _306);
        StorageDead(_306);
        StorageDead(_302);
        StorageDead(_301);
        goto -> bb219;
    }

    bb131: {
        StorageDead(_304);
        StorageDead(_303);
        _301 = const ();
        StorageDead(_302);
        StorageDead(_301);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = ((*_133).1: u16);
        StorageLive(_311);
        _311 = _3;
        _309 = Ne(move _310, move _311);
        switchInt(move _309) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        StorageDead(_311);
        StorageDead(_310);
        goto -> bb134;
    }

    bb133: {
        StorageDead(_311);
        StorageDead(_310);
        StorageLive(_312);
        StorageLive(_313);
        _313 = ((*_133).3: u16);
        StorageLive(_314);
        _314 = _3;
        _312 = Ne(move _313, move _314);
        switchInt(move _312) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        StorageDead(_314);
        StorageDead(_313);
        goto -> bb136;
    }

    bb135: {
        StorageDead(_314);
        StorageDead(_313);
        StorageLive(_315);
        StorageLive(_316);
        _316 = ((*_133).6: u16);
        StorageLive(_317);
        _317 = _3;
        _315 = Ne(move _316, move _317);
        switchInt(move _315) -> [0: bb137, otherwise: bb136];
    }

    bb136: {
        StorageDead(_317);
        StorageDead(_316);
        StorageLive(_319);
        StorageLive(_320);
        _320 = SignatureVerificationError::InvalidInstructionIndex;
        _319 = <SignatureVerificationError as Into<anchor_lang::error::Error>>::into(move _320) -> [return: bb138, unwind: bb236];
    }

    bb137: {
        StorageDead(_317);
        StorageDead(_316);
        _308 = const ();
        StorageDead(_315);
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_308);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = _214;
        StorageLive(_326);
        _326 = _137;
        _324 = core::num::<impl u16>::checked_sub(move _325, move _326) -> [return: bb139, unwind: bb236];
    }

    bb138: {
        StorageDead(_320);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _319);
        StorageDead(_319);
        StorageDead(_315);
        StorageDead(_312);
        StorageDead(_309);
        StorageDead(_308);
        goto -> bb219;
    }

    bb139: {
        StorageDead(_326);
        StorageDead(_325);
        _323 = Option::<u16>::unwrap(move _324) -> [return: bb140, unwind: bb236];
    }

    bb140: {
        StorageDead(_324);
        _322 = <usize as From<u16>>::from(move _323) -> [return: bb141, unwind: bb236];
    }

    bb141: {
        StorageDead(_323);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = _322;
        _330 = core::num::<impl usize>::checked_add(move _331, const _) -> [return: bb142, unwind: bb236];
    }

    bb142: {
        StorageDead(_331);
        StorageLive(_332);
        _332 = SignatureVerificationError::MessageOffsetOverflow;
        _329 = Option::<usize>::ok_or::<SignatureVerificationError>(move _330, move _332) -> [return: bb143, unwind: bb236];
    }

    bb143: {
        StorageDead(_332);
        StorageDead(_330);
        _328 = <std::result::Result<usize, SignatureVerificationError> as Try>::branch(move _329) -> [return: bb144, unwind: bb236];
    }

    bb144: {
        StorageDead(_329);
        _333 = discriminant(_328);
        switchInt(move _333) -> [0: bb145, 1: bb146, otherwise: bb41];
    }

    bb145: {
        StorageLive(_337);
        _337 = ((_328 as Continue).0: usize);
        _327 = _337;
        StorageDead(_337);
        StorageDead(_328);
        StorageLive(_338);
        StorageLive(_339);
        _339 = &(*_5);
        StorageLive(_340);
        StorageLive(_341);
        _341 = _322;
        StorageLive(_342);
        _342 = _327;
        _340 = std::ops::Range::<usize> { start: move _341, end: move _342 };
        StorageDead(_342);
        StorageDead(_341);
        _338 = <[u8] as Index<std::ops::Range<usize>>>::index(move _339, move _340) -> [return: bb148, unwind: bb236];
    }

    bb146: {
        StorageLive(_334);
        _334 = ((_328 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_336);
        _336 = _334;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _336) -> [return: bb147, unwind: bb236];
    }

    bb147: {
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_328);
        StorageDead(_327);
        StorageDead(_322);
        goto -> bb218;
    }

    bb148: {
        StorageDead(_340);
        StorageDead(_339);
        _321 = &(*_338);
        StorageDead(_327);
        StorageDead(_322);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        _347 = _265;
        StorageLive(_348);
        _348 = _137;
        _346 = core::num::<impl u16>::checked_sub(move _347, move _348) -> [return: bb149, unwind: bb236];
    }

    bb149: {
        StorageDead(_348);
        StorageDead(_347);
        _345 = Option::<u16>::unwrap(move _346) -> [return: bb150, unwind: bb236];
    }

    bb150: {
        StorageDead(_346);
        _344 = <usize as From<u16>>::from(move _345) -> [return: bb151, unwind: bb236];
    }

    bb151: {
        StorageDead(_345);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        _353 = _344;
        StorageLive(_354);
        StorageLive(_355);
        _355 = _283;
        _354 = <u16 as Into<usize>>::into(move _355) -> [return: bb152, unwind: bb236];
    }

    bb152: {
        StorageDead(_355);
        _352 = core::num::<impl usize>::checked_add(move _353, move _354) -> [return: bb153, unwind: bb236];
    }

    bb153: {
        StorageDead(_354);
        StorageDead(_353);
        StorageLive(_356);
        _356 = SignatureVerificationError::MessageOffsetOverflow;
        _351 = Option::<usize>::ok_or::<SignatureVerificationError>(move _352, move _356) -> [return: bb154, unwind: bb236];
    }

    bb154: {
        StorageDead(_356);
        StorageDead(_352);
        _350 = <std::result::Result<usize, SignatureVerificationError> as Try>::branch(move _351) -> [return: bb155, unwind: bb236];
    }

    bb155: {
        StorageDead(_351);
        _357 = discriminant(_350);
        switchInt(move _357) -> [0: bb156, 1: bb157, otherwise: bb41];
    }

    bb156: {
        StorageLive(_361);
        _361 = ((_350 as Continue).0: usize);
        _349 = _361;
        StorageDead(_361);
        StorageDead(_350);
        StorageLive(_362);
        StorageLive(_363);
        _363 = &(*_5);
        StorageLive(_364);
        StorageLive(_365);
        _365 = _344;
        StorageLive(_366);
        _366 = _349;
        _364 = std::ops::Range::<usize> { start: move _365, end: move _366 };
        StorageDead(_366);
        StorageDead(_365);
        _362 = <[u8] as Index<std::ops::Range<usize>>>::index(move _363, move _364) -> [return: bb159, unwind: bb236];
    }

    bb157: {
        StorageLive(_358);
        _358 = ((_350 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_360);
        _360 = _358;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _360) -> [return: bb158, unwind: bb236];
    }

    bb158: {
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_350);
        StorageDead(_349);
        StorageDead(_344);
        goto -> bb217;
    }

    bb159: {
        StorageDead(_364);
        StorageDead(_363);
        _343 = &(*_362);
        StorageDead(_349);
        StorageDead(_344);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _369 = &_321;
        StorageLive(_370);
        _370 = &_4;
        _368 = <&[u8] as PartialEq<&[u8; 32]>>::ne(move _369, move _370) -> [return: bb160, unwind: bb236];
    }

    bb160: {
        switchInt(move _368) -> [0: bb175, otherwise: bb161];
    }

    bb161: {
        StorageDead(_370);
        StorageDead(_369);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        _510 = const _;
        _382 = &(*_510);
        _381 = &(*_382);
        _380 = move _381 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_381);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = &_321;
        _389 = &(*_390);
        _388 = core::fmt::rt::Argument::<'_>::new_debug::<&[u8]>(move _389) -> [return: bb162, unwind: bb236];
    }

    bb162: {
        StorageDead(_389);
        _387 = [move _388];
        StorageDead(_388);
        _386 = &_387;
        _385 = &(*_386);
        _384 = move _385 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_385);
        _379 = Arguments::<'_>::new_v1(move _380, move _384) -> [return: bb163, unwind: bb236];
    }

    bb163: {
        StorageDead(_384);
        StorageDead(_380);
        _378 = format(move _379) -> [return: bb164, unwind: bb236];
    }

    bb164: {
        StorageDead(_379);
        StorageDead(_390);
        StorageDead(_387);
        StorageDead(_386);
        StorageDead(_382);
        _377 = move _378;
        StorageDead(_378);
        _376 = &_377;
        _375 = &(*_376);
        _374 = <String as Deref>::deref(move _375) -> [return: bb165, unwind: bb234];
    }

    bb165: {
        _373 = &(*_374);
        StorageDead(_375);
        _372 = solana_program::log::sol_log(move _373) -> [return: bb166, unwind: bb234];
    }

    bb166: {
        StorageDead(_373);
        drop(_377) -> [return: bb167, unwind: bb236];
    }

    bb167: {
        StorageDead(_377);
        StorageDead(_376);
        StorageDead(_374);
        StorageDead(_372);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        _509 = const _;
        _401 = &(*_509);
        _400 = &(*_401);
        _399 = move _400 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_400);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = &_4;
        _408 = &(*_409);
        _407 = core::fmt::rt::Argument::<'_>::new_debug::<&[u8; 32]>(move _408) -> [return: bb168, unwind: bb236];
    }

    bb168: {
        StorageDead(_408);
        _406 = [move _407];
        StorageDead(_407);
        _405 = &_406;
        _404 = &(*_405);
        _403 = move _404 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_404);
        _398 = Arguments::<'_>::new_v1(move _399, move _403) -> [return: bb169, unwind: bb236];
    }

    bb169: {
        StorageDead(_403);
        StorageDead(_399);
        _397 = format(move _398) -> [return: bb170, unwind: bb236];
    }

    bb170: {
        StorageDead(_398);
        StorageDead(_409);
        StorageDead(_406);
        StorageDead(_405);
        StorageDead(_401);
        _396 = move _397;
        StorageDead(_397);
        _395 = &_396;
        _394 = &(*_395);
        _393 = <String as Deref>::deref(move _394) -> [return: bb171, unwind: bb233];
    }

    bb171: {
        _392 = &(*_393);
        StorageDead(_394);
        _391 = solana_program::log::sol_log(move _392) -> [return: bb172, unwind: bb233];
    }

    bb172: {
        StorageDead(_392);
        drop(_396) -> [return: bb173, unwind: bb236];
    }

    bb173: {
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_391);
        StorageLive(_410);
        StorageLive(_411);
        _411 = error::ErrorCode::SigVerificationFailed;
        _410 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _411) -> [return: bb174, unwind: bb236];
    }

    bb174: {
        StorageDead(_411);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Err(move _410);
        StorageDead(_410);
        StorageDead(_368);
        StorageDead(_367);
        goto -> bb216;
    }

    bb175: {
        StorageDead(_370);
        StorageDead(_369);
        _367 = const ();
        StorageDead(_368);
        StorageDead(_367);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        _416 = ((*_133).0: u16);
        StorageLive(_417);
        _417 = _137;
        _415 = core::num::<impl u16>::checked_sub(move _416, move _417) -> [return: bb176, unwind: bb236];
    }

    bb176: {
        StorageDead(_417);
        StorageDead(_416);
        _414 = Option::<u16>::unwrap(move _415) -> [return: bb177, unwind: bb236];
    }

    bb177: {
        StorageDead(_415);
        _413 = <usize as From<u16>>::from(move _414) -> [return: bb178, unwind: bb236];
    }

    bb178: {
        StorageDead(_414);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        _422 = _413;
        StorageLive(_423);
        _423 = <u16 as Into<usize>>::into(const _) -> [return: bb179, unwind: bb236];
    }

    bb179: {
        _421 = core::num::<impl usize>::checked_add(move _422, move _423) -> [return: bb180, unwind: bb236];
    }

    bb180: {
        StorageDead(_423);
        StorageDead(_422);
        StorageLive(_424);
        _424 = SignatureVerificationError::InvalidSignatureOffset;
        _420 = Option::<usize>::ok_or::<SignatureVerificationError>(move _421, move _424) -> [return: bb181, unwind: bb236];
    }

    bb181: {
        StorageDead(_424);
        StorageDead(_421);
        _419 = <std::result::Result<usize, SignatureVerificationError> as Try>::branch(move _420) -> [return: bb182, unwind: bb236];
    }

    bb182: {
        StorageDead(_420);
        _425 = discriminant(_419);
        switchInt(move _425) -> [0: bb183, 1: bb184, otherwise: bb41];
    }

    bb183: {
        StorageLive(_429);
        _429 = ((_419 as Continue).0: usize);
        _418 = _429;
        StorageDead(_429);
        StorageDead(_419);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = &(*_5);
        StorageLive(_435);
        StorageLive(_436);
        _436 = _413;
        StorageLive(_437);
        _437 = _418;
        _435 = std::ops::Range::<usize> { start: move _436, end: move _437 };
        StorageDead(_437);
        StorageDead(_436);
        _433 = <[u8] as Index<std::ops::Range<usize>>>::index(move _434, move _435) -> [return: bb186, unwind: bb236];
    }

    bb184: {
        StorageLive(_426);
        _426 = ((_419 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_428);
        _428 = _426;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _428) -> [return: bb185, unwind: bb236];
    }

    bb185: {
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_419);
        StorageDead(_418);
        StorageDead(_413);
        goto -> bb215;
    }

    bb186: {
        _432 = &(*_433);
        StorageDead(_435);
        StorageDead(_434);
        _431 = <&[u8] as TryInto<[u8; 64]>>::try_into(move _432) -> [return: bb187, unwind: bb236];
    }

    bb187: {
        StorageDead(_432);
        _430 = std::result::Result::<[u8; 64], TryFromSliceError>::unwrap(move _431) -> [return: bb188, unwind: bb236];
    }

    bb188: {
        StorageDead(_431);
        _412 = &_430;
        StorageDead(_418);
        StorageDead(_413);
        StorageDead(_433);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = _343;
        _441 = hex::decode::<&[u8]>(move _442) -> [return: bb189, unwind: bb236];
    }

    bb189: {
        StorageDead(_442);
        StorageLive(_443);
        _443 = {closure@programs/drift/src/validation/sig_verification.rs:233:38: 233:41};
        _440 = std::result::Result::<Vec<u8>, hex::FromHexError>::map_err::<SignatureVerificationError, {closure@programs/drift/src/validation/sig_verification.rs:233:38: 233:41}>(move _441, move _443) -> [return: bb190, unwind: bb236];
    }

    bb190: {
        StorageDead(_443);
        StorageDead(_441);
        _439 = <std::result::Result<Vec<u8>, SignatureVerificationError> as Try>::branch(move _440) -> [return: bb191, unwind: bb236];
    }

    bb191: {
        StorageDead(_440);
        _444 = discriminant(_439);
        switchInt(move _444) -> [0: bb192, 1: bb193, otherwise: bb41];
    }

    bb192: {
        StorageLive(_448);
        _448 = move ((_439 as Continue).0: std::vec::Vec<u8>);
        _438 = move _448;
        StorageDead(_448);
        _518 = discriminant(_439);
        StorageDead(_439);
        StorageLive(_449);
        _449 = _6;
        switchInt(move _449) -> [0: bb203, otherwise: bb195];
    }

    bb193: {
        StorageLive(_445);
        _445 = ((_439 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_447);
        _447 = _445;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _447) -> [return: bb194, unwind: bb242];
    }

    bb194: {
        StorageDead(_447);
        StorageDead(_445);
        _516 = discriminant(_439);
        StorageDead(_439);
        goto -> bb214;
    }

    bb195: {
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        _459 = &_438;
        StorageLive(_460);
        _460 = RangeFrom::<usize> { start: const 8_usize };
        _458 = <Vec<u8> as Index<RangeFrom<usize>>>::index(move _459, move _460) -> [return: bb196, unwind: bb232];
    }

    bb196: {
        StorageDead(_460);
        StorageDead(_459);
        _457 = &(*_458);
        _456 = &mut _457;
        _455 = &mut (*_456);
        _454 = <SignedMsgOrderParamsDelegateMessage as BorshDeserialize>::deserialize(move _455) -> [return: bb197, unwind: bb232];
    }

    bb197: {
        StorageDead(_455);
        StorageLive(_461);
        _461 = {closure@programs/drift/src/validation/sig_verification.rs:239:18: 239:21};
        _453 = std::result::Result::<SignedMsgOrderParamsDelegateMessage, std::io::Error>::map_err::<SignatureVerificationError, {closure@programs/drift/src/validation/sig_verification.rs:239:18: 239:21}>(move _454, move _461) -> [return: bb198, unwind: bb232];
    }

    bb198: {
        StorageDead(_461);
        StorageDead(_454);
        _452 = <std::result::Result<SignedMsgOrderParamsDelegateMessage, SignatureVerificationError> as Try>::branch(move _453) -> [return: bb199, unwind: bb232];
    }

    bb199: {
        StorageDead(_453);
        _462 = discriminant(_452);
        switchInt(move _462) -> [0: bb200, 1: bb201, otherwise: bb41];
    }

    bb200: {
        StorageLive(_466);
        _466 = move ((_452 as Continue).0: state::order_params::SignedMsgOrderParamsDelegateMessage);
        _451 = move _466;
        StorageDead(_466);
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_452);
        StorageLive(_467);
        StorageLive(_468);
        _468 = (_451.0: state::order_params::OrderParams);
        StorageLive(_469);
        _469 = Option::<u16>::None;
        StorageLive(_470);
        StorageLive(_471);
        _471 = (_451.1: anchor_lang::prelude::Pubkey);
        _470 = Option::<anchor_lang::prelude::Pubkey>::Some(move _471);
        StorageDead(_471);
        StorageLive(_472);
        _472 = (_451.2: u64);
        StorageLive(_473);
        _473 = (_451.3: [u8; 8]);
        StorageLive(_474);
        _474 = move (_451.4: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>);
        StorageLive(_475);
        _475 = move (_451.5: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>);
        StorageLive(_476);
        _476 = (*_412);
        _467 = VerifiedMessage { signed_msg_order_params: move _468, sub_account_id: move _469, delegate_signed_taker_pubkey: move _470, slot: move _472, uuid: move _473, take_profit_order_params: move _474, stop_loss_order_params: move _475, signature: move _476 };
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_474);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_468);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Ok(move _467);
        StorageDead(_467);
        goto -> bb212;
    }

    bb201: {
        StorageLive(_463);
        _463 = ((_452 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_465);
        _465 = _463;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _465) -> [return: bb202, unwind: bb232];
    }

    bb202: {
        StorageDead(_465);
        StorageDead(_463);
        StorageDead(_458);
        StorageDead(_457);
        StorageDead(_456);
        StorageDead(_452);
        goto -> bb212;
    }

    bb203: {
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &_438;
        StorageLive(_487);
        _487 = RangeFrom::<usize> { start: const 8_usize };
        _485 = <Vec<u8> as Index<RangeFrom<usize>>>::index(move _486, move _487) -> [return: bb204, unwind: bb232];
    }

    bb204: {
        StorageDead(_487);
        StorageDead(_486);
        _484 = &(*_485);
        _483 = &mut _484;
        _482 = &mut (*_483);
        _481 = <SignedMsgOrderParamsMessage as BorshDeserialize>::deserialize(move _482) -> [return: bb205, unwind: bb232];
    }

    bb205: {
        StorageDead(_482);
        StorageLive(_488);
        _488 = {closure@programs/drift/src/validation/sig_verification.rs:258:18: 258:21};
        _480 = std::result::Result::<SignedMsgOrderParamsMessage, std::io::Error>::map_err::<SignatureVerificationError, {closure@programs/drift/src/validation/sig_verification.rs:258:18: 258:21}>(move _481, move _488) -> [return: bb206, unwind: bb232];
    }

    bb206: {
        StorageDead(_488);
        StorageDead(_481);
        _479 = <std::result::Result<SignedMsgOrderParamsMessage, SignatureVerificationError> as Try>::branch(move _480) -> [return: bb207, unwind: bb232];
    }

    bb207: {
        StorageDead(_480);
        _489 = discriminant(_479);
        switchInt(move _489) -> [0: bb208, 1: bb209, otherwise: bb41];
    }

    bb208: {
        StorageLive(_493);
        _493 = move ((_479 as Continue).0: state::order_params::SignedMsgOrderParamsMessage);
        _478 = move _493;
        StorageDead(_493);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_479);
        StorageLive(_494);
        StorageLive(_495);
        _495 = (_478.0: state::order_params::OrderParams);
        StorageLive(_496);
        StorageLive(_497);
        _497 = (_478.1: u16);
        _496 = Option::<u16>::Some(move _497);
        StorageDead(_497);
        StorageLive(_498);
        _498 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_499);
        _499 = (_478.2: u64);
        StorageLive(_500);
        _500 = (_478.3: [u8; 8]);
        StorageLive(_501);
        _501 = move (_478.4: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>);
        StorageLive(_502);
        _502 = move (_478.5: std::option::Option<state::order_params::SignedMsgTriggerOrderParams>);
        StorageLive(_503);
        _503 = (*_412);
        _494 = VerifiedMessage { signed_msg_order_params: move _495, sub_account_id: move _496, delegate_signed_taker_pubkey: move _498, slot: move _499, uuid: move _500, take_profit_order_params: move _501, stop_loss_order_params: move _502, signature: move _503 };
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_499);
        StorageDead(_498);
        StorageDead(_496);
        StorageDead(_495);
        _0 = std::result::Result::<VerifiedMessage, anchor_lang::error::Error>::Ok(move _494);
        StorageDead(_494);
        goto -> bb211;
    }

    bb209: {
        StorageLive(_490);
        _490 = ((_479 as Break).0: std::result::Result<std::convert::Infallible, validation::sig_verification::SignatureVerificationError>);
        StorageLive(_492);
        _492 = _490;
        _0 = <std::result::Result<VerifiedMessage, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, SignatureVerificationError>>>::from_residual(move _492) -> [return: bb210, unwind: bb232];
    }

    bb210: {
        StorageDead(_492);
        StorageDead(_490);
        StorageDead(_485);
        StorageDead(_484);
        StorageDead(_483);
        StorageDead(_479);
        goto -> bb211;
    }

    bb211: {
        StorageDead(_478);
        goto -> bb213;
    }

    bb212: {
        StorageDead(_451);
        goto -> bb213;
    }

    bb213: {
        StorageDead(_449);
        drop(_438) -> [return: bb214, unwind: bb236];
    }

    bb214: {
        StorageDead(_438);
        StorageDead(_430);
        goto -> bb215;
    }

    bb215: {
        StorageDead(_412);
        goto -> bb216;
    }

    bb216: {
        StorageDead(_362);
        goto -> bb217;
    }

    bb217: {
        StorageDead(_343);
        StorageDead(_338);
        goto -> bb218;
    }

    bb218: {
        StorageDead(_321);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_283);
        goto -> bb220;
    }

    bb220: {
        StorageDead(_265);
        goto -> bb221;
    }

    bb221: {
        StorageDead(_254);
        goto -> bb222;
    }

    bb222: {
        StorageDead(_214);
        goto -> bb223;
    }

    bb223: {
        StorageDead(_189);
        goto -> bb224;
    }

    bb224: {
        StorageDead(_177);
        drop(_164) -> [return: bb225, unwind: bb241];
    }

    bb225: {
        StorageDead(_164);
        goto -> bb226;
    }

    bb226: {
        StorageDead(_137);
        StorageDead(_134);
        StorageDead(_133);
        goto -> bb227;
    }

    bb227: {
        StorageDead(_114);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_98);
        goto -> bb229;
    }

    bb229: {
        StorageDead(_90);
        StorageDead(_87);
        goto -> bb230;
    }

    bb230: {
        StorageDead(_58);
        goto -> bb231;
    }

    bb231: {
        return;
    }

    bb232 (cleanup): {
        drop(_438) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb233 (cleanup): {
        drop(_396) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb234 (cleanup): {
        drop(_377) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb235 (cleanup): {
        drop(_235) -> [return: bb236, unwind terminate(cleanup)];
    }

    bb236 (cleanup): {
        drop(_164) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb237 (cleanup): {
        drop(_148) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb238 (cleanup): {
        drop(_69) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb239 (cleanup): {
        drop(_40) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb240 (cleanup): {
        drop(_21) -> [return: bb241, unwind terminate(cleanup)];
    }

    bb241 (cleanup): {
        resume;
    }

    bb242 (cleanup): {
        _520 = discriminant(_439);
        goto -> bb236;
    }

    bb243 (cleanup): {
        _521 = discriminant(_165);
        goto -> bb241;
    }
}
