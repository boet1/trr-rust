// MIR for `get_referrer_and_referrer_stats` before PreCodegen

fn get_referrer_and_referrer_stats(_1: &mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>) -> std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> {
    debug account_info_iter => _1;
    let mut _0: std::result::Result<(std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>), error::ErrorCode>;
    let _2: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _3: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _7: !;
    let mut _8: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _9: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _10: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _13: std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _14: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _22: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _23: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _24: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _25: {closure@programs/drift/src/instructions/optional_accounts.rs:125:64: 125:67};
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _31: ();
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: &[u8];
    let _35: &&mut [u8];
    let mut _36: &std::cell::Ref<'_, &mut [u8]>;
    let mut _37: !;
    let mut _38: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _39: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _40: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let _45: &[u8];
    let mut _46: &[u8];
    let _47: &&mut [u8];
    let mut _48: &std::cell::Ref<'_, &mut [u8]>;
    let mut _49: std::ops::Range<usize>;
    let mut _50: usize;
    let mut _51: usize;
    let mut _52: usize;
    let mut _53: (usize, bool);
    let mut _54: &[u8];
    let _55: ();
    let mut _56: bool;
    let mut _57: &&[u8; 8];
    let mut _58: &&[u8; 8];
    let _59: &[u8; 8];
    let mut _60: !;
    let mut _61: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _62: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _63: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _66: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _67: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError>;
    let mut _68: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _69: isize;
    let mut _71: !;
    let mut _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _74: ();
    let mut _75: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _76: std::result::Result<(), error::ErrorCode>;
    let mut _77: bool;
    let mut _78: ();
    let _80: ();
    let mut _81: &str;
    let _82: &str;
    let mut _83: &std::string::String;
    let _84: &std::string::String;
    let _85: std::string::String;
    let mut _87: std::fmt::Arguments<'_>;
    let mut _88: &[&str];
    let mut _89: &[&str; 2];
    let _90: &[&str; 2];
    let _91: [&str; 2];
    let mut _92: &[core::fmt::rt::Argument<'_>];
    let mut _93: &[core::fmt::rt::Argument<'_>; 1];
    let _94: &[core::fmt::rt::Argument<'_>; 1];
    let _95: [core::fmt::rt::Argument<'_>; 1];
    let mut _96: core::fmt::rt::Argument<'_>;
    let mut _97: &error::ErrorCode;
    let _98: &error::ErrorCode;
    let mut _99: error::ErrorCode;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _106: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _107: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, error::ErrorCode>;
    let mut _108: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _109: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _110: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, error::ErrorCode>;
    let mut _111: error::ErrorCode;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _118: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _119: ();
    let mut _120: bool;
    let mut _121: &std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _122: !;
    let mut _123: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _124: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _125: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _128: std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _129: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _130: isize;
    let mut _132: !;
    let mut _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _137: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _138: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _139: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _140: {closure@programs/drift/src/instructions/optional_accounts.rs:156:70: 156:73};
    let mut _141: isize;
    let mut _143: !;
    let mut _144: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _146: ();
    let mut _147: bool;
    let mut _148: usize;
    let mut _149: &[u8];
    let _150: &&mut [u8];
    let mut _151: &std::cell::Ref<'_, &mut [u8]>;
    let mut _152: !;
    let mut _153: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _154: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _155: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let _160: &[u8];
    let mut _161: &[u8];
    let _162: &&mut [u8];
    let mut _163: &std::cell::Ref<'_, &mut [u8]>;
    let mut _164: std::ops::Range<usize>;
    let mut _165: usize;
    let mut _166: usize;
    let mut _167: usize;
    let mut _168: (usize, bool);
    let mut _169: &[u8];
    let _170: ();
    let mut _171: bool;
    let mut _172: &&[u8; 8];
    let mut _173: &&[u8; 8];
    let _174: &[u8; 8];
    let mut _175: !;
    let mut _176: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _177: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _178: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &anchor_lang::prelude::AccountInfo<'_>>;
    let mut _181: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode>;
    let mut _182: std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError>;
    let mut _183: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _189: ();
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _191: std::result::Result<(), error::ErrorCode>;
    let mut _192: bool;
    let mut _193: ();
    let _195: ();
    let mut _196: &str;
    let _197: &str;
    let mut _198: &std::string::String;
    let _199: &std::string::String;
    let _200: std::string::String;
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[&str; 2];
    let _205: &[&str; 2];
    let _206: [&str; 2];
    let mut _207: &[core::fmt::rt::Argument<'_>];
    let mut _208: &[core::fmt::rt::Argument<'_>; 1];
    let _209: &[core::fmt::rt::Argument<'_>; 1];
    let _210: [core::fmt::rt::Argument<'_>; 1];
    let mut _211: core::fmt::rt::Argument<'_>;
    let mut _212: &error::ErrorCode;
    let _213: &error::ErrorCode;
    let mut _214: error::ErrorCode;
    let mut _215: isize;
    let mut _217: !;
    let mut _218: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _221: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _222: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _223: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _224: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _225: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _226: error::ErrorCode;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _232: (std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>);
    let mut _233: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _234: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _235: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _236: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _239: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _240: &mut [u8];
    let mut _241: &mut [u8];
    let mut _242: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _243: &mut [u8];
    let mut _244: &mut [u8];
    let mut _245: isize;
    let mut _246: isize;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    scope 1 {
        debug referrer_account_info => _2;
        let _11: &&anchor_lang::prelude::AccountInfo<'_>;
        let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _19: &&anchor_lang::prelude::AccountInfo<'_>;
        scope 2 {
            debug referrer_account_info => _11;
            let _20: std::cell::Ref<'_, &mut [u8]>;
            let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _30: std::cell::Ref<'_, &mut [u8]>;
            scope 7 {
                debug data => _20;
                let _41: [u8; 8];
                scope 12 {
                    debug user_discriminator => _41;
                    let _42: &[u8; 8];
                    let _43: usize;
                    scope 13 {
                        debug account_discriminator => _42;
                        let _64: &anchor_lang::prelude::AccountInfo<'_>;
                        let _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _73: &anchor_lang::prelude::AccountInfo<'_>;
                        scope 18 {
                            debug referrer_account_info => _64;
                            let _79: error::ErrorCode;
                            let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _104: ();
                            let _105: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                            let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _116: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                            scope 23 {
                                debug error_code => _79;
                                let _86: std::string::String;
                                let mut _238: &[&str; 2];
                                scope 24 {
                                    debug res => _86;
                                }
                            }
                            scope 25 {
                                debug residual => _101;
                                scope 26 {
                                }
                            }
                            scope 27 {
                                debug val => _104;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug referrer => _105;
                                let _117: std::option::Option<&&anchor_lang::prelude::AccountInfo<'_>>;
                                scope 34 {
                                    debug referrer_stats_account_info => _117;
                                    let _126: &&anchor_lang::prelude::AccountInfo<'_>;
                                    let _131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _134: &&anchor_lang::prelude::AccountInfo<'_>;
                                    scope 35 {
                                        debug referrer_stats_account_info => _126;
                                        let _135: std::cell::Ref<'_, &mut [u8]>;
                                        let _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _145: std::cell::Ref<'_, &mut [u8]>;
                                        scope 40 {
                                            debug data => _135;
                                            let _156: [u8; 8];
                                            scope 45 {
                                                debug user_stats_discriminator => _156;
                                                let _157: &[u8; 8];
                                                let _158: usize;
                                                scope 46 {
                                                    debug account_discriminator => _157;
                                                    let _179: &anchor_lang::prelude::AccountInfo<'_>;
                                                    let _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _188: &anchor_lang::prelude::AccountInfo<'_>;
                                                    scope 51 {
                                                        debug referrer_stats_account_info => _179;
                                                        let _194: error::ErrorCode;
                                                        let _216: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _219: ();
                                                        let _220: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                                        let _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _231: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                                        scope 56 {
                                                            debug error_code => _194;
                                                            let _201: std::string::String;
                                                            let mut _237: &[&str; 2];
                                                            scope 57 {
                                                                debug res => _201;
                                                            }
                                                        }
                                                        scope 58 {
                                                            debug residual => _216;
                                                            scope 59 {
                                                            }
                                                        }
                                                        scope 60 {
                                                            debug val => _219;
                                                            scope 61 {
                                                            }
                                                        }
                                                        scope 62 {
                                                            debug referrer_stats => _220;
                                                        }
                                                        scope 63 {
                                                            debug residual => _228;
                                                            scope 64 {
                                                            }
                                                        }
                                                        scope 65 {
                                                            debug val => _231;
                                                            scope 66 {
                                                            }
                                                        }
                                                    }
                                                    scope 52 {
                                                        debug residual => _185;
                                                        scope 53 {
                                                        }
                                                    }
                                                    scope 54 {
                                                        debug val => _188;
                                                        scope 55 {
                                                        }
                                                    }
                                                }
                                                scope 47 {
                                                    debug offset => _158;
                                                    let _159: &[u8];
                                                    scope 48 {
                                                        debug slice => _159;
                                                        scope 49 {
                                                            scope 50 {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        scope 41 {
                                            debug residual => _142;
                                            scope 42 {
                                            }
                                        }
                                        scope 43 {
                                            debug val => _145;
                                            scope 44 {
                                            }
                                        }
                                    }
                                    scope 36 {
                                        debug residual => _131;
                                        scope 37 {
                                        }
                                    }
                                    scope 38 {
                                        debug val => _134;
                                        scope 39 {
                                        }
                                    }
                                }
                            }
                            scope 30 {
                                debug residual => _113;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug val => _116;
                                scope 33 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _70;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _73;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug offset => _43;
                        let _44: &[u8];
                        scope 15 {
                            debug slice => _44;
                            scope 16 {
                                scope 17 {
                                }
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _27;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _30;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &mut (*_1);
        _2 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &_2;
        _5 = Option::<&&anchor_lang::prelude::AccountInfo<'_>>::is_none(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _5) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        _9 = Option::<anchor_lang::prelude::AccountLoader<'_, User>>::None;
        StorageLive(_10);
        _10 = Option::<anchor_lang::prelude::AccountLoader<'_, UserStats>>::None;
        _8 = (move _9, move _10);
        StorageDead(_10);
        StorageDead(_9);
        _0 = std::result::Result::<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb120;
    }

    bb4: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = _2;
        _13 = <Option<&&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _14) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_14);
        _12 = <std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        _15 = discriminant(_12);
        switchInt(move _15) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_19);
        _19 = ((_12 as Continue).0: &&anchor_lang::prelude::AccountInfo<'_>);
        _11 = _19;
        StorageDead(_19);
        StorageDead(_12);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _239 = deref_copy (*_11);
        _24 = &(*_239);
        _23 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _24) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_16);
        _16 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_12);
        goto -> bb119;
    }

    bb11: {
        StorageDead(_24);
        StorageLive(_25);
        _25 = {closure@programs/drift/src/instructions/optional_accounts.rs:125:64: 125:67};
        _22 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/instructions/optional_accounts.rs:125:64: 125:67}>(move _23, move _25) -> [return: bb12, unwind: bb126];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        _21 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _22) -> [return: bb13, unwind: bb126];
    }

    bb13: {
        StorageDead(_22);
        _26 = discriminant(_21);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb8];
    }

    bb14: {
        StorageLive(_30);
        _30 = move ((_21 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _20 = move _30;
        StorageDead(_30);
        _247 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &_20;
        _35 = <Ref<'_, &mut [u8]> as Deref>::deref(move _36) -> [return: bb17, unwind: bb125];
    }

    bb15: {
        StorageLive(_27);
        _27 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb16, unwind: bb128];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        _245 = discriminant(_21);
        StorageDead(_21);
        goto -> bb118;
    }

    bb17: {
        _240 = deref_copy (*_35);
        _34 = &(*_240);
        StorageDead(_36);
        _33 = core::slice::<impl [u8]>::len(move _34) -> [return: bb18, unwind: bb125];
    }

    bb18: {
        StorageDead(_34);
        _32 = Lt(move _33, const _);
        switchInt(move _32) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_38);
        StorageLive(_39);
        _39 = Option::<anchor_lang::prelude::AccountLoader<'_, User>>::None;
        StorageLive(_40);
        _40 = Option::<anchor_lang::prelude::AccountLoader<'_, UserStats>>::None;
        _38 = (move _39, move _40);
        StorageDead(_40);
        StorageDead(_39);
        _0 = std::result::Result::<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode>::Ok(move _38);
        StorageDead(_38);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb117;
    }

    bb20: {
        StorageDead(_35);
        StorageDead(_33);
        _31 = const ();
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_41);
        _41 = <User as anchor_lang::Discriminator>::discriminator() -> [return: bb21, unwind: bb125];
    }

    bb21: {
        StorageLive(_42);
        StorageLive(_43);
        _43 = const 0_usize;
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &_20;
        _47 = <Ref<'_, &mut [u8]> as Deref>::deref(move _48) -> [return: bb22, unwind: bb125];
    }

    bb22: {
        _241 = deref_copy (*_47);
        _46 = &(*_241);
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _43;
        StorageLive(_51);
        StorageLive(_52);
        _52 = _43;
        _53 = CheckedAdd(_52, const 8_usize);
        assert(!move (_53.1: bool), "attempt to compute `{} + {}`, which would overflow", move _52, const 8_usize) -> [success: bb23, unwind: bb125];
    }

    bb23: {
        _51 = move (_53.0: usize);
        StorageDead(_52);
        _49 = std::ops::Range::<usize> { start: move _50, end: move _51 };
        StorageDead(_51);
        StorageDead(_50);
        _45 = <[u8] as Index<std::ops::Range<usize>>>::index(move _46, move _49) -> [return: bb24, unwind: bb125];
    }

    bb24: {
        StorageDead(_49);
        StorageDead(_46);
        _44 = &(*_45);
        StorageLive(_54);
        _54 = &(*_44);
        _42 = get_referrer_and_referrer_stats::as_array::<u8>(move _54) -> [return: bb25, unwind: bb125];
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = &_42;
        StorageLive(_58);
        StorageLive(_59);
        _59 = &_41;
        _58 = &_59;
        _56 = <&[u8; 8] as PartialEq>::ne(move _57, move _58) -> [return: bb26, unwind: bb125];
    }

    bb26: {
        switchInt(move _56) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_61);
        StorageLive(_62);
        _62 = Option::<anchor_lang::prelude::AccountLoader<'_, User>>::None;
        StorageLive(_63);
        _63 = Option::<anchor_lang::prelude::AccountLoader<'_, UserStats>>::None;
        _61 = (move _62, move _63);
        StorageDead(_63);
        StorageDead(_62);
        _0 = std::result::Result::<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode>::Ok(move _61);
        StorageDead(_61);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb116;
    }

    bb28: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        _55 = const ();
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &mut (*_1);
        _67 = next_account_info::<'_, '_, Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _68) -> [return: bb29, unwind: bb125];
    }

    bb29: {
        StorageDead(_68);
        _66 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError> as SafeUnwrap>::safe_unwrap(move _67) -> [return: bb30, unwind: bb125];
    }

    bb30: {
        StorageDead(_67);
        _65 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _66) -> [return: bb31, unwind: bb125];
    }

    bb31: {
        StorageDead(_66);
        _69 = discriminant(_65);
        switchInt(move _69) -> [0: bb32, 1: bb33, otherwise: bb8];
    }

    bb32: {
        StorageLive(_73);
        _73 = ((_65 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _64 = _73;
        StorageDead(_73);
        StorageDead(_65);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = ((*_64).6: bool);
        switchInt(move _77) -> [0: bb36, otherwise: bb35];
    }

    bb33: {
        StorageLive(_70);
        _70 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_72);
        _72 = _70;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _72) -> [return: bb34, unwind: bb125];
    }

    bb34: {
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_65);
        goto -> bb115;
    }

    bb35: {
        StorageLive(_78);
        _78 = ();
        _76 = std::result::Result::<(), error::ErrorCode>::Ok(move _78);
        StorageDead(_78);
        goto -> bb43;
    }

    bb36: {
        StorageLive(_79);
        _79 = error::ErrorCode::ReferrerMustBeWritable;
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _238 = const _;
        _90 = &(*_238);
        _89 = &(*_90);
        _88 = move _89 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_89);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = &_79;
        _97 = &(*_98);
        _96 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _97) -> [return: bb37, unwind: bb125];
    }

    bb37: {
        StorageDead(_97);
        _95 = [move _96];
        StorageDead(_96);
        _94 = &_95;
        _93 = &(*_94);
        _92 = move _93 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_93);
        _87 = Arguments::<'_>::new_v1(move _88, move _92) -> [return: bb38, unwind: bb125];
    }

    bb38: {
        StorageDead(_92);
        StorageDead(_88);
        _86 = format(move _87) -> [return: bb39, unwind: bb125];
    }

    bb39: {
        StorageDead(_87);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_90);
        _85 = move _86;
        StorageDead(_86);
        _84 = &_85;
        _83 = &(*_84);
        _82 = <String as Deref>::deref(move _83) -> [return: bb40, unwind: bb124];
    }

    bb40: {
        _81 = &(*_82);
        StorageDead(_83);
        _80 = solana_program::log::sol_log(move _81) -> [return: bb41, unwind: bb124];
    }

    bb41: {
        StorageDead(_81);
        drop(_85) -> [return: bb42, unwind: bb125];
    }

    bb42: {
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_80);
        StorageLive(_99);
        _99 = _79;
        _76 = std::result::Result::<(), error::ErrorCode>::Err(move _99);
        StorageDead(_99);
        StorageDead(_79);
        goto -> bb43;
    }

    bb43: {
        StorageDead(_77);
        _75 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _76) -> [return: bb44, unwind: bb125];
    }

    bb44: {
        StorageDead(_76);
        _100 = discriminant(_75);
        switchInt(move _100) -> [0: bb45, 1: bb46, otherwise: bb8];
    }

    bb45: {
        StorageLive(_104);
        _104 = ((_75 as Continue).0: ());
        _74 = _104;
        StorageDead(_104);
        StorageDead(_75);
        StorageDead(_74);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = &(*_64);
        _108 = anchor_lang::prelude::AccountLoader::<'_, User>::try_from(move _109) -> [return: bb48, unwind: bb125];
    }

    bb46: {
        StorageLive(_101);
        _101 = ((_75 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb47, unwind: bb125];
    }

    bb47: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb115;
    }

    bb48: {
        StorageDead(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = error::ErrorCode::CouldNotDeserializeReferrer;
        _110 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, error::ErrorCode>::Err(move _111);
        StorageDead(_111);
        _107 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _108, move _110) -> [return: bb49, unwind: bb125];
    }

    bb49: {
        StorageDead(_110);
        StorageDead(_108);
        _106 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, error::ErrorCode> as Try>::branch(move _107) -> [return: bb50, unwind: bb125];
    }

    bb50: {
        StorageDead(_107);
        _112 = discriminant(_106);
        switchInt(move _112) -> [0: bb51, 1: bb52, otherwise: bb8];
    }

    bb51: {
        StorageLive(_116);
        _116 = move ((_106 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _105 = move _116;
        StorageDead(_116);
        StorageDead(_106);
        StorageLive(_117);
        StorageLive(_118);
        _118 = &mut (*_1);
        _117 = Peekable::<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>::peek(move _118) -> [return: bb54, unwind: bb125];
    }

    bb52: {
        StorageLive(_113);
        _113 = ((_106 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb53, unwind: bb125];
    }

    bb53: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_106);
        goto -> bb114;
    }

    bb54: {
        StorageDead(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_117;
        _120 = Option::<&&anchor_lang::prelude::AccountInfo<'_>>::is_none(move _121) -> [return: bb55, unwind: bb125];
    }

    bb55: {
        switchInt(move _120) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        StorageDead(_121);
        StorageLive(_123);
        StorageLive(_124);
        _124 = Option::<anchor_lang::prelude::AccountLoader<'_, User>>::None;
        StorageLive(_125);
        _125 = Option::<anchor_lang::prelude::AccountLoader<'_, UserStats>>::None;
        _123 = (move _124, move _125);
        StorageDead(_125);
        StorageDead(_124);
        _0 = std::result::Result::<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode>::Ok(move _123);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_119);
        goto -> bb113;
    }

    bb57: {
        StorageDead(_121);
        _119 = const ();
        StorageDead(_120);
        StorageDead(_119);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _117;
        _128 = <Option<&&anchor_lang::prelude::AccountInfo<'_>> as SafeUnwrap>::safe_unwrap(move _129) -> [return: bb58, unwind: bb125];
    }

    bb58: {
        StorageDead(_129);
        _127 = <std::result::Result<&&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _128) -> [return: bb59, unwind: bb125];
    }

    bb59: {
        StorageDead(_128);
        _130 = discriminant(_127);
        switchInt(move _130) -> [0: bb60, 1: bb61, otherwise: bb8];
    }

    bb60: {
        StorageLive(_134);
        _134 = ((_127 as Continue).0: &&anchor_lang::prelude::AccountInfo<'_>);
        _126 = _134;
        StorageDead(_134);
        StorageDead(_127);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _242 = deref_copy (*_126);
        _139 = &(*_242);
        _138 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _139) -> [return: bb63, unwind: bb125];
    }

    bb61: {
        StorageLive(_131);
        _131 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_133);
        _133 = _131;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _133) -> [return: bb62, unwind: bb125];
    }

    bb62: {
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_127);
        goto -> bb112;
    }

    bb63: {
        StorageDead(_139);
        StorageLive(_140);
        _140 = {closure@programs/drift/src/instructions/optional_accounts.rs:156:70: 156:73};
        _137 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/instructions/optional_accounts.rs:156:70: 156:73}>(move _138, move _140) -> [return: bb64, unwind: bb125];
    }

    bb64: {
        StorageDead(_140);
        StorageDead(_138);
        _136 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _137) -> [return: bb65, unwind: bb125];
    }

    bb65: {
        StorageDead(_137);
        _141 = discriminant(_136);
        switchInt(move _141) -> [0: bb66, 1: bb67, otherwise: bb8];
    }

    bb66: {
        StorageLive(_145);
        _145 = move ((_136 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _135 = move _145;
        StorageDead(_145);
        _251 = discriminant(_136);
        StorageDead(_136);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_135;
        _150 = <Ref<'_, &mut [u8]> as Deref>::deref(move _151) -> [return: bb69, unwind: bb123];
    }

    bb67: {
        StorageLive(_142);
        _142 = ((_136 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_144);
        _144 = _142;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _144) -> [return: bb68, unwind: bb127];
    }

    bb68: {
        StorageDead(_144);
        StorageDead(_142);
        _249 = discriminant(_136);
        StorageDead(_136);
        goto -> bb111;
    }

    bb69: {
        _243 = deref_copy (*_150);
        _149 = &(*_243);
        StorageDead(_151);
        _148 = core::slice::<impl [u8]>::len(move _149) -> [return: bb70, unwind: bb123];
    }

    bb70: {
        StorageDead(_149);
        _147 = Lt(move _148, const _);
        switchInt(move _147) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        StorageDead(_150);
        StorageDead(_148);
        StorageLive(_153);
        StorageLive(_154);
        _154 = Option::<anchor_lang::prelude::AccountLoader<'_, User>>::None;
        StorageLive(_155);
        _155 = Option::<anchor_lang::prelude::AccountLoader<'_, UserStats>>::None;
        _153 = (move _154, move _155);
        StorageDead(_155);
        StorageDead(_154);
        _0 = std::result::Result::<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode>::Ok(move _153);
        StorageDead(_153);
        StorageDead(_147);
        StorageDead(_146);
        goto -> bb110;
    }

    bb72: {
        StorageDead(_150);
        StorageDead(_148);
        _146 = const ();
        StorageDead(_147);
        StorageDead(_146);
        StorageLive(_156);
        _156 = <UserStats as anchor_lang::Discriminator>::discriminator() -> [return: bb73, unwind: bb123];
    }

    bb73: {
        StorageLive(_157);
        StorageLive(_158);
        _158 = const 0_usize;
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &_135;
        _162 = <Ref<'_, &mut [u8]> as Deref>::deref(move _163) -> [return: bb74, unwind: bb123];
    }

    bb74: {
        _244 = deref_copy (*_162);
        _161 = &(*_244);
        StorageDead(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = _158;
        StorageLive(_166);
        StorageLive(_167);
        _167 = _158;
        _168 = CheckedAdd(_167, const 8_usize);
        assert(!move (_168.1: bool), "attempt to compute `{} + {}`, which would overflow", move _167, const 8_usize) -> [success: bb75, unwind: bb123];
    }

    bb75: {
        _166 = move (_168.0: usize);
        StorageDead(_167);
        _164 = std::ops::Range::<usize> { start: move _165, end: move _166 };
        StorageDead(_166);
        StorageDead(_165);
        _160 = <[u8] as Index<std::ops::Range<usize>>>::index(move _161, move _164) -> [return: bb76, unwind: bb123];
    }

    bb76: {
        StorageDead(_164);
        StorageDead(_161);
        _159 = &(*_160);
        StorageLive(_169);
        _169 = &(*_159);
        _157 = get_referrer_and_referrer_stats::as_array::<u8>(move _169) -> [return: bb77, unwind: bb123];
    }

    bb77: {
        StorageDead(_169);
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_158);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &_157;
        StorageLive(_173);
        StorageLive(_174);
        _174 = &_156;
        _173 = &_174;
        _171 = <&[u8; 8] as PartialEq>::ne(move _172, move _173) -> [return: bb78, unwind: bb123];
    }

    bb78: {
        switchInt(move _171) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_176);
        StorageLive(_177);
        _177 = Option::<anchor_lang::prelude::AccountLoader<'_, User>>::None;
        StorageLive(_178);
        _178 = Option::<anchor_lang::prelude::AccountLoader<'_, UserStats>>::None;
        _176 = (move _177, move _178);
        StorageDead(_178);
        StorageDead(_177);
        _0 = std::result::Result::<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode>::Ok(move _176);
        StorageDead(_176);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb109;
    }

    bb80: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_172);
        _170 = const ();
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &mut (*_1);
        _182 = next_account_info::<'_, '_, Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>(move _183) -> [return: bb81, unwind: bb123];
    }

    bb81: {
        StorageDead(_183);
        _181 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, anchor_lang::prelude::ProgramError> as SafeUnwrap>::safe_unwrap(move _182) -> [return: bb82, unwind: bb123];
    }

    bb82: {
        StorageDead(_182);
        _180 = <std::result::Result<&anchor_lang::prelude::AccountInfo<'_>, error::ErrorCode> as Try>::branch(move _181) -> [return: bb83, unwind: bb123];
    }

    bb83: {
        StorageDead(_181);
        _184 = discriminant(_180);
        switchInt(move _184) -> [0: bb84, 1: bb85, otherwise: bb8];
    }

    bb84: {
        StorageLive(_188);
        _188 = ((_180 as Continue).0: &anchor_lang::prelude::AccountInfo<'_>);
        _179 = _188;
        StorageDead(_188);
        StorageDead(_180);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = ((*_179).6: bool);
        switchInt(move _192) -> [0: bb88, otherwise: bb87];
    }

    bb85: {
        StorageLive(_185);
        _185 = ((_180 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_187);
        _187 = _185;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _187) -> [return: bb86, unwind: bb123];
    }

    bb86: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_180);
        goto -> bb108;
    }

    bb87: {
        StorageLive(_193);
        _193 = ();
        _191 = std::result::Result::<(), error::ErrorCode>::Ok(move _193);
        StorageDead(_193);
        goto -> bb95;
    }

    bb88: {
        StorageLive(_194);
        _194 = error::ErrorCode::ReferrerMustBeWritable;
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _237 = const _;
        _205 = &(*_237);
        _204 = &(*_205);
        _203 = move _204 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_204);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &_194;
        _212 = &(*_213);
        _211 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _212) -> [return: bb89, unwind: bb123];
    }

    bb89: {
        StorageDead(_212);
        _210 = [move _211];
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = move _208 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_208);
        _202 = Arguments::<'_>::new_v1(move _203, move _207) -> [return: bb90, unwind: bb123];
    }

    bb90: {
        StorageDead(_207);
        StorageDead(_203);
        _201 = format(move _202) -> [return: bb91, unwind: bb123];
    }

    bb91: {
        StorageDead(_202);
        StorageDead(_213);
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_205);
        _200 = move _201;
        StorageDead(_201);
        _199 = &_200;
        _198 = &(*_199);
        _197 = <String as Deref>::deref(move _198) -> [return: bb92, unwind: bb122];
    }

    bb92: {
        _196 = &(*_197);
        StorageDead(_198);
        _195 = solana_program::log::sol_log(move _196) -> [return: bb93, unwind: bb122];
    }

    bb93: {
        StorageDead(_196);
        drop(_200) -> [return: bb94, unwind: bb123];
    }

    bb94: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_195);
        StorageLive(_214);
        _214 = _194;
        _191 = std::result::Result::<(), error::ErrorCode>::Err(move _214);
        StorageDead(_214);
        StorageDead(_194);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_192);
        _190 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _191) -> [return: bb96, unwind: bb123];
    }

    bb96: {
        StorageDead(_191);
        _215 = discriminant(_190);
        switchInt(move _215) -> [0: bb97, 1: bb98, otherwise: bb8];
    }

    bb97: {
        StorageLive(_219);
        _219 = ((_190 as Continue).0: ());
        _189 = _219;
        StorageDead(_219);
        StorageDead(_190);
        StorageDead(_189);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = &(*_179);
        _223 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::try_from(move _224) -> [return: bb100, unwind: bb123];
    }

    bb98: {
        StorageLive(_216);
        _216 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_218);
        _218 = _216;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _218) -> [return: bb99, unwind: bb123];
    }

    bb99: {
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_190);
        StorageDead(_189);
        goto -> bb108;
    }

    bb100: {
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = error::ErrorCode::CouldNotDeserializeReferrerStats;
        _225 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, error::ErrorCode>::Err(move _226);
        StorageDead(_226);
        _222 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _223, move _225) -> [return: bb101, unwind: bb123];
    }

    bb101: {
        StorageDead(_225);
        StorageDead(_223);
        _221 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, error::ErrorCode> as Try>::branch(move _222) -> [return: bb102, unwind: bb123];
    }

    bb102: {
        StorageDead(_222);
        _227 = discriminant(_221);
        switchInt(move _227) -> [0: bb103, 1: bb104, otherwise: bb8];
    }

    bb103: {
        StorageLive(_231);
        _231 = move ((_221 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _220 = move _231;
        StorageDead(_231);
        StorageDead(_221);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = move _105;
        _233 = Option::<anchor_lang::prelude::AccountLoader<'_, User>>::Some(move _234);
        StorageDead(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = move _220;
        _235 = Option::<anchor_lang::prelude::AccountLoader<'_, UserStats>>::Some(move _236);
        StorageDead(_236);
        _232 = (move _233, move _235);
        StorageDead(_235);
        StorageDead(_233);
        _0 = std::result::Result::<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode>::Ok(move _232);
        StorageDead(_232);
        StorageDead(_220);
        StorageDead(_179);
        StorageDead(_157);
        StorageDead(_156);
        drop(_135) -> [return: bb106, unwind: bb125];
    }

    bb104: {
        StorageLive(_228);
        _228 = ((_221 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_230);
        _230 = _228;
        _0 = <std::result::Result<(Option<anchor_lang::prelude::AccountLoader<'_, User>>, Option<anchor_lang::prelude::AccountLoader<'_, UserStats>>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _230) -> [return: bb105, unwind: bb123];
    }

    bb105: {
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_221);
        StorageDead(_220);
        goto -> bb108;
    }

    bb106: {
        StorageDead(_135);
        StorageDead(_126);
        StorageDead(_117);
        StorageDead(_105);
        StorageDead(_64);
        StorageDead(_42);
        StorageDead(_41);
        drop(_20) -> [return: bb107, unwind: bb126];
    }

    bb107: {
        StorageDead(_20);
        StorageDead(_11);
        StorageDead(_2);
        goto -> bb121;
    }

    bb108: {
        StorageDead(_179);
        goto -> bb109;
    }

    bb109: {
        StorageDead(_157);
        StorageDead(_156);
        goto -> bb110;
    }

    bb110: {
        drop(_135) -> [return: bb111, unwind: bb125];
    }

    bb111: {
        StorageDead(_135);
        goto -> bb112;
    }

    bb112: {
        StorageDead(_126);
        goto -> bb113;
    }

    bb113: {
        StorageDead(_117);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_105);
        goto -> bb115;
    }

    bb115: {
        StorageDead(_64);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb117;
    }

    bb117: {
        drop(_20) -> [return: bb118, unwind: bb126];
    }

    bb118: {
        StorageDead(_20);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_11);
        goto -> bb120;
    }

    bb120: {
        StorageDead(_2);
        goto -> bb121;
    }

    bb121: {
        return;
    }

    bb122 (cleanup): {
        drop(_200) -> [return: bb123, unwind terminate(cleanup)];
    }

    bb123 (cleanup): {
        drop(_135) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb124 (cleanup): {
        drop(_85) -> [return: bb125, unwind terminate(cleanup)];
    }

    bb125 (cleanup): {
        drop(_20) -> [return: bb126, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        resume;
    }

    bb127 (cleanup): {
        _253 = discriminant(_136);
        goto -> bb125;
    }

    bb128 (cleanup): {
        _254 = discriminant(_21);
        goto -> bb126;
    }
}
