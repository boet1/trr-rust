// MIR for `math::orders::calculate_max_spot_order_size::{closure#0}` before PreCodegen

fn math::orders::calculate_max_spot_order_size::{closure#0}(_1: &mut {closure@programs/drift/src/math/orders.rs:996:14: 996:26}, _2: OrderFillSimulation) -> OrderFillSimulation {
    debug simulation => _2;
    debug spot_market => (*((*_1).0: &std::cell::Ref<'_, state::spot_market::SpotMarket>));
    debug strict_oracle_price => (*((*_1).1: &state::oracle::StrictOraclePrice));
    debug user_custom_margin_ratio => (*((*_1).2: &u32));
    let mut _0: state::user::OrderFillSimulation;
    let mut _3: std::result::Result<state::user::OrderFillSimulation, error::ErrorCode>;
    let mut _4: state::user::OrderFillSimulation;
    let mut _5: &state::spot_market::SpotMarket;
    let _6: &state::spot_market::SpotMarket;
    let mut _7: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _8: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _9: i64;
    let mut _10: u32;
    let mut _11: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _12: &state::oracle::StrictOraclePrice;
    let mut _13: &u32;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = _2;
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _11 = deref_copy ((*_1).0: &std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _8 = &(*_11);
        _7 = &(*_8);
        _6 = <Ref<'_, SpotMarket> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &(*_6);
        StorageDead(_7);
        StorageLive(_9);
        _12 = deref_copy ((*_1).1: &state::oracle::StrictOraclePrice);
        _9 = ((*_12).0: i64);
        StorageLive(_10);
        _13 = deref_copy ((*_1).2: &u32);
        _10 = (*_13);
        _3 = OrderFillSimulation::apply_user_custom_margin_ratio(move _4, move _5, move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_5);
        StorageDead(_4);
        _0 = std::result::Result::<OrderFillSimulation, error::ErrorCode>::unwrap(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_3);
        StorageDead(_8);
        StorageDead(_6);
        return;
    }
}
