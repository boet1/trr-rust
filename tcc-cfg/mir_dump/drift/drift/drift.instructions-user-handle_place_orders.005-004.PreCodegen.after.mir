// MIR for `instructions::user::handle_place_orders` after PreCodegen

fn instructions::user::handle_place_orders(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::PlaceOrder<'_>>, _2: Vec<order_params::OrderParams>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &anchor_lang::prelude::Clock;
    let _14: anchor_lang::prelude::Clock;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _21: anchor_lang::prelude::Clock;
    let mut _24: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _25: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _29: instructions::optional_accounts::AccountMaps<'_>;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _31: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _32: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _33: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _34: &std::collections::BTreeSet<u16>;
    let _35: &std::collections::BTreeSet<u16>;
    let _36: std::collections::BTreeSet<u16>;
    let mut _37: &std::collections::BTreeSet<u16>;
    let _38: &std::collections::BTreeSet<u16>;
    let _39: std::collections::BTreeSet<u16>;
    let mut _40: u64;
    let mut _41: std::option::Option<state::state::OracleGuardRails>;
    let mut _42: state::state::OracleGuardRails;
    let mut _43: &state::state::State;
    let mut _44: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>>;
    let mut _52: std::result::Result<std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>, error::ErrorCode>;
    let mut _53: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _54: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: ();
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _62: std::result::Result<(), error::ErrorCode>;
    let mut _63: bool;
    let mut _64: usize;
    let mut _65: &std::vec::Vec<state::order_params::OrderParams>;
    let mut _66: ();
    let _68: ();
    let mut _69: &str;
    let _70: &str;
    let mut _71: &std::string::String;
    let _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[&str; 2];
    let _78: &[&str; 2];
    let _79: [&str; 2];
    let mut _80: &[core::fmt::rt::Argument<'_>];
    let mut _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: &[core::fmt::rt::Argument<'_>; 1];
    let _83: [core::fmt::rt::Argument<'_>; 1];
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &error::ErrorCode;
    let _86: &error::ErrorCode;
    let _87: ();
    let mut _88: &str;
    let _89: &str;
    let mut _90: error::ErrorCode;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _100: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _101: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _102: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _103: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _110: &std::vec::Vec<state::order_params::OrderParams>;
    let _111: ();
    let mut _112: std::iter::Enumerate<std::slice::Iter<'_, state::order_params::OrderParams>>;
    let mut _113: std::iter::Enumerate<std::slice::Iter<'_, state::order_params::OrderParams>>;
    let mut _114: std::slice::Iter<'_, state::order_params::OrderParams>;
    let mut _115: &[state::order_params::OrderParams];
    let _116: &[state::order_params::OrderParams];
    let mut _117: &std::vec::Vec<state::order_params::OrderParams>;
    let mut _119: ();
    let _120: ();
    let mut _121: std::option::Option<(usize, &state::order_params::OrderParams)>;
    let mut _122: &mut std::iter::Enumerate<std::slice::Iter<'_, state::order_params::OrderParams>>;
    let mut _123: &mut std::iter::Enumerate<std::slice::Iter<'_, state::order_params::OrderParams>>;
    let mut _124: isize;
    let mut _125: !;
    let _128: ();
    let mut _129: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _130: std::result::Result<(), error::ErrorCode>;
    let mut _131: bool;
    let mut _132: &state::order_params::OrderParams;
    let mut _133: ();
    let _135: ();
    let mut _136: &str;
    let _137: &str;
    let mut _138: &std::string::String;
    let _139: &std::string::String;
    let _140: std::string::String;
    let mut _142: std::fmt::Arguments<'_>;
    let mut _143: &[&str];
    let mut _144: &[&str; 2];
    let _145: &[&str; 2];
    let _146: [&str; 2];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let mut _148: &[core::fmt::rt::Argument<'_>; 1];
    let _149: &[core::fmt::rt::Argument<'_>; 1];
    let _150: [core::fmt::rt::Argument<'_>; 1];
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &error::ErrorCode;
    let _153: &error::ErrorCode;
    let _154: ();
    let mut _155: &str;
    let _156: &str;
    let mut _157: error::ErrorCode;
    let mut _158: isize;
    let mut _160: !;
    let mut _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _164: std::option::Option<u64>;
    let mut _165: bool;
    let mut _166: usize;
    let mut _167: usize;
    let mut _168: usize;
    let mut _169: (usize, bool);
    let mut _170: bool;
    let mut _171: usize;
    let mut _172: state::events::OrderActionExplanation;
    let mut _173: std::option::Option<controller::position::PositionDirection>;
    let mut _174: bool;
    let mut _175: &state::user::MarketType;
    let mut _176: &state::user::MarketType;
    let _177: state::user::MarketType;
    let _178: ();
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _180: std::result::Result<(), error::ErrorCode>;
    let mut _181: &state::state::State;
    let _182: &state::state::State;
    let mut _183: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _184: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _185: &mut state::user::User;
    let mut _186: &mut state::user::User;
    let mut _187: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _188: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _189: anchor_lang::prelude::Pubkey;
    let mut _190: &state::perp_market_map::PerpMarketMap<'_>;
    let _191: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _192: &state::spot_market_map::SpotMarketMap<'_>;
    let _193: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _194: &mut state::oracle_map::OracleMap<'_>;
    let mut _195: &mut state::oracle_map::OracleMap<'_>;
    let mut _196: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _197: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _198: &anchor_lang::prelude::Clock;
    let mut _199: state::order_params::OrderParams;
    let mut _200: state::order_params::PlaceOrderOptions;
    let mut _201: isize;
    let mut _203: !;
    let mut _204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _206: ();
    let mut _207: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _208: std::result::Result<(), error::ErrorCode>;
    let mut _209: &state::state::State;
    let _210: &state::state::State;
    let mut _211: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _212: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _213: &mut state::user::User;
    let mut _214: &mut state::user::User;
    let mut _215: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _216: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _217: anchor_lang::prelude::Pubkey;
    let mut _218: &state::perp_market_map::PerpMarketMap<'_>;
    let _219: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _220: &state::spot_market_map::SpotMarketMap<'_>;
    let _221: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _222: &mut state::oracle_map::OracleMap<'_>;
    let mut _223: &mut state::oracle_map::OracleMap<'_>;
    let mut _224: &anchor_lang::prelude::Clock;
    let mut _225: state::order_params::OrderParams;
    let mut _226: state::order_params::PlaceOrderOptions;
    let mut _227: isize;
    let mut _229: !;
    let mut _230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _232: ();
    let mut _236: &mut instructions::user::PlaceOrder<'_>;
    let mut _237: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _238: &mut instructions::user::PlaceOrder<'_>;
    let mut _239: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _240: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _241: &mut instructions::user::PlaceOrder<'_>;
    let mut _242: &mut instructions::user::PlaceOrder<'_>;
    let mut _243: &mut instructions::user::PlaceOrder<'_>;
    let mut _244: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _245: &mut instructions::user::PlaceOrder<'_>;
    let mut _246: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _247: isize;
    let mut _248: isize;
    let mut _249: isize;
    let mut _250: isize;
    let mut _251: isize;
    let mut _252: isize;
    let mut _253: isize;
    let mut _254: isize;
    let mut _255: isize;
    let mut _256: isize;
    let mut _257: isize;
    let mut _258: isize;
    let mut _259: isize;
    let mut _260: isize;
    let mut _261: isize;
    let mut _262: isize;
    let mut _263: isize;
    let mut _264: isize;
    let mut _265: isize;
    let mut _266: isize;
    let mut _267: isize;
    let mut _268: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _269: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _270: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _271: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _13;
        let _22: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        scope 10 {
            debug state => _22;
            let mut _23: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
            scope 11 {
                debug remaining_accounts => _23;
                let _26: state::perp_market_map::PerpMarketMap<'_>;
                let _27: state::spot_market_map::SpotMarketMap<'_>;
                let mut _28: state::oracle_map::OracleMap<'_>;
                let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _49: instructions::optional_accounts::AccountMaps<'_>;
                scope 12 {
                    debug perp_market_map => _26;
                    debug spot_market_map => _27;
                    debug oracle_map => _28;
                    let _50: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                    let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _59: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                    scope 17 {
                        debug high_leverage_mode_config => _50;
                        let _67: error::ErrorCode;
                        let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _95: ();
                        let _96: anchor_lang::prelude::Pubkey;
                        scope 22 {
                            debug error_code => _67;
                            let _74: std::string::String;
                            let mut _235: &[&str; 2];
                            scope 23 {
                                debug res => _74;
                            }
                        }
                        scope 24 {
                            debug residual => _92;
                            scope 25 {
                            }
                        }
                        scope 26 {
                            debug val => _95;
                            scope 27 {
                            }
                        }
                        scope 28 {
                            debug user_key => _96;
                            let mut _98: std::cell::RefMut<'_, state::user::User>;
                            let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _108: std::cell::RefMut<'_, state::user::User>;
                            scope 29 {
                                debug user => _98;
                                let _109: usize;
                                scope 34 {
                                    debug num_orders => _109;
                                    let mut _118: std::iter::Enumerate<std::slice::Iter<'_, state::order_params::OrderParams>>;
                                    scope 35 {
                                        debug iter => _118;
                                        let _126: usize;
                                        let _127: &state::order_params::OrderParams;
                                        scope 36 {
                                            debug i => _126;
                                            debug params => _127;
                                            let _134: error::ErrorCode;
                                            let _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _162: ();
                                            let _163: state::order_params::PlaceOrderOptions;
                                            scope 37 {
                                                debug error_code => _134;
                                                let _141: std::string::String;
                                                let mut _234: &[&str; 2];
                                                scope 38 {
                                                    debug res => _141;
                                                }
                                            }
                                            scope 39 {
                                                debug residual => _159;
                                                scope 40 {
                                                }
                                            }
                                            scope 41 {
                                                debug val => _162;
                                                scope 42 {
                                                }
                                            }
                                            scope 43 {
                                                debug options => _163;
                                                let _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _205: ();
                                                let _228: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _231: ();
                                                let mut _233: &state::user::MarketType;
                                                scope 44 {
                                                    debug residual => _202;
                                                    scope 45 {
                                                    }
                                                }
                                                scope 46 {
                                                    debug val => _205;
                                                    scope 47 {
                                                    }
                                                }
                                                scope 48 {
                                                    debug residual => _228;
                                                    scope 49 {
                                                    }
                                                }
                                                scope 50 {
                                                    debug val => _231;
                                                    scope 51 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 30 {
                                debug residual => _105;
                                scope 31 {
                                }
                            }
                            scope 32 {
                                debug val => _108;
                                scope 33 {
                                }
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _56;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _59;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _46;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _49;
                    scope 16 {
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _18;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _21;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _236 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _7 = &((*_236).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _237 = deref_copy (*_7);
        _268 = (((_237.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_268);
        _5 = constraints::exchange_not_paused(move _6) -> [return: bb1, unwind: bb120];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb120];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _247 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind: bb120];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb125];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _261 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb109;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb120];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _13 = &_14;
        _249 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _238 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _22 = &((*_238).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _239 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _25 = &(*_239);
        _24 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _25) -> [return: bb12, unwind: bb120];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb124];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _259 = discriminant(_15);
        StorageDead(_15);
        goto -> bb108;
    }

    bb12: {
        StorageDead(_25);
        _23 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _24) -> [return: bb13, unwind: bb120];
    }

    bb13: {
        StorageDead(_24);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _23;
        _32 = &mut (*_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = BTreeSet::<u16>::new() -> [return: bb14, unwind: bb120];
    }

    bb14: {
        _35 = &_36;
        _34 = &(*_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _39 = BTreeSet::<u16>::new() -> [return: bb15, unwind: bb119];
    }

    bb15: {
        _38 = &_39;
        _37 = &(*_38);
        StorageLive(_40);
        _40 = ((*_13).0: u64);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _240 = deref_copy (*_22);
        _269 = (((_240.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _44 = &(*_269);
        _43 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _44) -> [return: bb16, unwind: bb118];
    }

    bb16: {
        StorageDead(_44);
        _42 = ((*_43).7: state::state::OracleGuardRails);
        _41 = Option::<state::state::OracleGuardRails>::Some(move _42);
        StorageDead(_42);
        _31 = load_maps(move _32, move _34, move _37, move _40, move _41) -> [return: bb17, unwind: bb118];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_34);
        StorageDead(_32);
        _30 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _31) -> [return: bb18, unwind: bb118];
    }

    bb18: {
        StorageDead(_31);
        _45 = discriminant(_30);
        switchInt(move _45) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_49);
        _49 = move ((_30 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _29 = move _49;
        StorageDead(_49);
        StorageLive(_26);
        _26 = move (_29.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_27);
        _27 = move (_29.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_28);
        _28 = move (_29.2: state::oracle_map::OracleMap<'_>);
        _253 = discriminant(_30);
        StorageDead(_43);
        drop(_39) -> [return: bb22, unwind: bb114];
    }

    bb20: {
        StorageLive(_46);
        _46 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb21, unwind: bb123];
    }

    bb21: {
        StorageDead(_48);
        StorageDead(_46);
        _251 = discriminant(_30);
        StorageDead(_43);
        drop(_39) -> [return: bb105, unwind: bb119];
    }

    bb22: {
        StorageDead(_39);
        StorageDead(_38);
        drop(_36) -> [return: bb23, unwind: bb115];
    }

    bb23: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &mut _23;
        _53 = &mut (*_54);
        _52 = get_high_leverage_mode_config(move _53) -> [return: bb24, unwind: bb115];
    }

    bb24: {
        StorageDead(_53);
        _51 = <std::result::Result<Option<anchor_lang::prelude::AccountLoader<'_, HighLeverageModeConfig>>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb25, unwind: bb115];
    }

    bb25: {
        StorageDead(_52);
        _55 = discriminant(_51);
        switchInt(move _55) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_59);
        _59 = move ((_51 as Continue).0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>);
        _50 = move _59;
        StorageDead(_59);
        StorageDead(_54);
        StorageDead(_51);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_2;
        _64 = Vec::<order_params::OrderParams>::len(move _65) -> [return: bb29, unwind: bb115];
    }

    bb27: {
        StorageLive(_56);
        _56 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb28, unwind: bb115];
    }

    bb28: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_51);
        goto -> bb101;
    }

    bb29: {
        StorageDead(_65);
        _63 = Le(move _64, const 32_usize);
        switchInt(move _63) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_64);
        StorageLive(_66);
        _66 = ();
        _62 = std::result::Result::<(), error::ErrorCode>::Ok(move _66);
        StorageDead(_66);
        goto -> bb39;
    }

    bb31: {
        StorageDead(_64);
        StorageLive(_67);
        _67 = error::ErrorCode::DefaultError;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _235 = const _;
        _78 = &(*_235);
        _77 = &(*_78);
        _76 = move _77 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_77);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_67;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _85) -> [return: bb32, unwind: bb115];
    }

    bb32: {
        StorageDead(_85);
        _83 = [move _84];
        StorageDead(_84);
        _82 = &_83;
        _81 = &(*_82);
        _80 = move _81 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_81);
        _75 = Arguments::<'_>::new_v1(move _76, move _80) -> [return: bb33, unwind: bb115];
    }

    bb33: {
        StorageDead(_80);
        StorageDead(_76);
        _74 = format(move _75) -> [return: bb34, unwind: bb115];
    }

    bb34: {
        StorageDead(_75);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_82);
        StorageDead(_78);
        _73 = move _74;
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        _70 = <String as Deref>::deref(move _71) -> [return: bb35, unwind: bb113];
    }

    bb35: {
        _69 = &(*_70);
        StorageDead(_71);
        _68 = solana_program::log::sol_log(move _69) -> [return: bb36, unwind: bb113];
    }

    bb36: {
        StorageDead(_69);
        drop(_73) -> [return: bb37, unwind: bb115];
    }

    bb37: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_70);
        StorageDead(_68);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = const "max 32 order params";
        _88 = &(*_89);
        _87 = solana_program::log::sol_log(move _88) -> [return: bb38, unwind: bb115];
    }

    bb38: {
        StorageDead(_88);
        StorageDead(_89);
        StorageDead(_87);
        StorageLive(_90);
        _90 = _67;
        _62 = std::result::Result::<(), error::ErrorCode>::Err(move _90);
        StorageDead(_90);
        StorageDead(_67);
        goto -> bb39;
    }

    bb39: {
        StorageDead(_63);
        _61 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _62) -> [return: bb40, unwind: bb115];
    }

    bb40: {
        StorageDead(_62);
        _91 = discriminant(_61);
        switchInt(move _91) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_95);
        _95 = ((_61 as Continue).0: ());
        _60 = _95;
        StorageDead(_95);
        StorageDead(_61);
        StorageDead(_60);
        StorageLive(_96);
        StorageLive(_97);
        _241 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _97 = &((*_241).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _96 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _97) -> [return: bb44, unwind: bb115];
    }

    bb42: {
        StorageLive(_92);
        _92 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb43, unwind: bb115];
    }

    bb43: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb101;
    }

    bb44: {
        StorageDead(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _242 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _102 = &((*_242).1: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _101 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _102) -> [return: bb45, unwind: bb115];
    }

    bb45: {
        StorageDead(_102);
        StorageLive(_103);
        _103 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _100 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _101, move _103) -> [return: bb46, unwind: bb115];
    }

    bb46: {
        StorageDead(_103);
        StorageDead(_101);
        _99 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _100) -> [return: bb47, unwind: bb115];
    }

    bb47: {
        StorageDead(_100);
        _104 = discriminant(_99);
        switchInt(move _104) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_108);
        _108 = move ((_99 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _98 = move _108;
        StorageDead(_108);
        _257 = discriminant(_99);
        StorageDead(_99);
        StorageLive(_109);
        StorageLive(_110);
        _110 = &_2;
        _109 = Vec::<order_params::OrderParams>::len(move _110) -> [return: bb51, unwind: bb112];
    }

    bb49: {
        StorageLive(_105);
        _105 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb50, unwind: bb122];
    }

    bb50: {
        StorageDead(_107);
        StorageDead(_105);
        _255 = discriminant(_99);
        StorageDead(_99);
        goto -> bb100;
    }

    bb51: {
        StorageDead(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &_2;
        _116 = <Vec<order_params::OrderParams> as Deref>::deref(move _117) -> [return: bb52, unwind: bb112];
    }

    bb52: {
        _115 = &(*_116);
        StorageDead(_117);
        _114 = core::slice::<impl [order_params::OrderParams]>::iter(move _115) -> [return: bb53, unwind: bb112];
    }

    bb53: {
        StorageDead(_115);
        _113 = <std::slice::Iter<'_, order_params::OrderParams> as Iterator>::enumerate(move _114) -> [return: bb54, unwind: bb112];
    }

    bb54: {
        StorageDead(_114);
        _112 = <Enumerate<std::slice::Iter<'_, order_params::OrderParams>> as IntoIterator>::into_iter(move _113) -> [return: bb55, unwind: bb112];
    }

    bb55: {
        StorageDead(_113);
        StorageLive(_118);
        _118 = move _112;
        goto -> bb56;
    }

    bb56: {
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut _118;
        _122 = &mut (*_123);
        _121 = <Enumerate<std::slice::Iter<'_, order_params::OrderParams>> as Iterator>::next(move _122) -> [return: bb57, unwind: bb112];
    }

    bb57: {
        StorageDead(_122);
        _124 = discriminant(_121);
        switchInt(move _124) -> [0: bb59, 1: bb58, otherwise: bb4];
    }

    bb58: {
        StorageLive(_126);
        _126 = (((_121 as Some).0: (usize, &state::order_params::OrderParams)).0: usize);
        StorageLive(_127);
        _127 = (((_121 as Some).0: (usize, &state::order_params::OrderParams)).1: &state::order_params::OrderParams);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &(*_127);
        _131 = order_params::OrderParams::is_immediate_or_cancel(move _132) -> [return: bb60, unwind: bb112];
    }

    bb59: {
        _111 = const ();
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_232);
        _232 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _232);
        StorageDead(_232);
        StorageDead(_109);
        drop(_98) -> [return: bb94, unwind: bb115];
    }

    bb60: {
        switchInt(move _131) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        StorageDead(_132);
        StorageLive(_134);
        _134 = error::ErrorCode::InvalidOrderIOC;
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _234 = const _;
        _145 = &(*_234);
        _144 = &(*_145);
        _143 = move _144 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_134;
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _152) -> [return: bb63, unwind: bb112];
    }

    bb62: {
        StorageDead(_132);
        StorageLive(_133);
        _133 = ();
        _130 = std::result::Result::<(), error::ErrorCode>::Ok(move _133);
        StorageDead(_133);
        goto -> bb70;
    }

    bb63: {
        StorageDead(_152);
        _150 = [move _151];
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = move _148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_148);
        _142 = Arguments::<'_>::new_v1(move _143, move _147) -> [return: bb64, unwind: bb112];
    }

    bb64: {
        StorageDead(_147);
        StorageDead(_143);
        _141 = format(move _142) -> [return: bb65, unwind: bb112];
    }

    bb65: {
        StorageDead(_142);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_145);
        _140 = move _141;
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = <String as Deref>::deref(move _138) -> [return: bb66, unwind: bb111];
    }

    bb66: {
        _136 = &(*_137);
        StorageDead(_138);
        _135 = solana_program::log::sol_log(move _136) -> [return: bb67, unwind: bb111];
    }

    bb67: {
        StorageDead(_136);
        drop(_140) -> [return: bb68, unwind: bb112];
    }

    bb68: {
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        _156 = const "immediate_or_cancel order must be in place_and_make or place_and_take";
        _155 = &(*_156);
        _154 = solana_program::log::sol_log(move _155) -> [return: bb69, unwind: bb112];
    }

    bb69: {
        StorageDead(_155);
        StorageDead(_156);
        StorageDead(_154);
        StorageLive(_157);
        _157 = _134;
        _130 = std::result::Result::<(), error::ErrorCode>::Err(move _157);
        StorageDead(_157);
        StorageDead(_134);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_131);
        _129 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _130) -> [return: bb71, unwind: bb112];
    }

    bb71: {
        StorageDead(_130);
        _158 = discriminant(_129);
        switchInt(move _158) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_162);
        _162 = ((_129 as Continue).0: ());
        _128 = _162;
        StorageDead(_162);
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_163);
        StorageLive(_164);
        _164 = Option::<u64>::None;
        StorageLive(_165);
        StorageLive(_166);
        _166 = _126;
        StorageLive(_167);
        StorageLive(_168);
        _168 = _109;
        _169 = CheckedSub(_168, const 1_usize);
        assert(!move (_169.1: bool), "attempt to compute `{} - {}`, which would overflow", move _168, const 1_usize) -> [success: bb75, unwind: bb112];
    }

    bb73: {
        StorageLive(_159);
        _159 = ((_129 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_161);
        _161 = _159;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _161) -> [return: bb74, unwind: bb112];
    }

    bb74: {
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb99;
    }

    bb75: {
        _167 = move (_169.0: usize);
        StorageDead(_168);
        _165 = Eq(move _166, move _167);
        StorageDead(_167);
        StorageDead(_166);
        StorageLive(_170);
        StorageLive(_171);
        _171 = _126;
        _170 = Eq(move _171, const 0_usize);
        StorageDead(_171);
        StorageLive(_172);
        _172 = OrderActionExplanation::None;
        StorageLive(_173);
        _173 = Option::<controller::position::PositionDirection>::None;
        _163 = PlaceOrderOptions { signed_msg_taker_order_slot: move _164, try_expire_orders: move _170, enforce_margin_check: move _165, risk_increasing: const false, explanation: move _172, existing_position_direction_override: move _173 };
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &((*_127).1: state::user::MarketType);
        StorageLive(_176);
        _233 = const _;
        _176 = &(*_233);
        _174 = <state::user::MarketType as PartialEq>::eq(move _175, move _176) -> [return: bb76, unwind: bb112];
    }

    bb76: {
        switchInt(move _174) -> [0: bb85, otherwise: bb77];
    }

    bb77: {
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        _243 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _184 = &((*_243).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _244 = deref_copy (*_184);
        _270 = (((_244.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _183 = &(*_270);
        _182 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _183) -> [return: bb78, unwind: bb112];
    }

    bb78: {
        _181 = &(*_182);
        StorageDead(_183);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &mut _98;
        _187 = &mut (*_188);
        _186 = <RefMut<'_, User> as DerefMut>::deref_mut(move _187) -> [return: bb79, unwind: bb112];
    }

    bb79: {
        _185 = &mut (*_186);
        StorageDead(_187);
        StorageLive(_189);
        _189 = _96;
        StorageLive(_190);
        StorageLive(_191);
        _191 = &_26;
        _190 = &(*_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = &_27;
        _192 = &(*_193);
        StorageLive(_194);
        StorageLive(_195);
        _195 = &mut _28;
        _194 = &mut (*_195);
        StorageLive(_196);
        StorageLive(_197);
        _197 = &_50;
        _196 = &(*_197);
        StorageLive(_198);
        _198 = &(*_13);
        StorageLive(_199);
        _199 = (*_127);
        StorageLive(_200);
        _200 = move _163;
        _180 = controller::orders::place_perp_order(move _181, move _185, move _189, move _190, move _192, move _194, move _196, move _198, move _199, move _200) -> [return: bb80, unwind: bb112];
    }

    bb80: {
        StorageDead(_200);
        StorageDead(_199);
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_185);
        StorageDead(_181);
        _179 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _180) -> [return: bb81, unwind: bb112];
    }

    bb81: {
        StorageDead(_180);
        _201 = discriminant(_179);
        switchInt(move _201) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_205);
        _205 = ((_179 as Continue).0: ());
        _178 = _205;
        StorageDead(_205);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_178);
        _120 = const ();
        goto -> bb93;
    }

    bb83: {
        StorageLive(_202);
        _202 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_204);
        _204 = _202;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _204) -> [return: bb84, unwind: bb112];
    }

    bb84: {
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_188);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb98;
    }

    bb85: {
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _245 = deref_copy (_1.1: &mut instructions::user::PlaceOrder<'_>);
        _212 = &((*_245).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _246 = deref_copy (*_212);
        _271 = (((_246.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _211 = &(*_271);
        _210 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _211) -> [return: bb86, unwind: bb112];
    }

    bb86: {
        _209 = &(*_210);
        StorageDead(_211);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        _216 = &mut _98;
        _215 = &mut (*_216);
        _214 = <RefMut<'_, User> as DerefMut>::deref_mut(move _215) -> [return: bb87, unwind: bb112];
    }

    bb87: {
        _213 = &mut (*_214);
        StorageDead(_215);
        StorageLive(_217);
        _217 = _96;
        StorageLive(_218);
        StorageLive(_219);
        _219 = &_26;
        _218 = &(*_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &_27;
        _220 = &(*_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &mut _28;
        _222 = &mut (*_223);
        StorageLive(_224);
        _224 = &(*_13);
        StorageLive(_225);
        _225 = (*_127);
        StorageLive(_226);
        _226 = move _163;
        _208 = controller::orders::place_spot_order(move _209, move _213, move _217, move _218, move _220, move _222, move _224, move _225, move _226) -> [return: bb88, unwind: bb112];
    }

    bb88: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_224);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_217);
        StorageDead(_213);
        StorageDead(_209);
        _207 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _208) -> [return: bb89, unwind: bb112];
    }

    bb89: {
        StorageDead(_208);
        _227 = discriminant(_207);
        switchInt(move _227) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_231);
        _231 = ((_207 as Continue).0: ());
        _206 = _231;
        StorageDead(_231);
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_206);
        _120 = const ();
        goto -> bb93;
    }

    bb91: {
        StorageLive(_228);
        _228 = ((_207 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_230);
        _230 = _228;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _230) -> [return: bb92, unwind: bb112];
    }

    bb92: {
        StorageDead(_230);
        StorageDead(_228);
        StorageDead(_223);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_206);
        goto -> bb98;
    }

    bb93: {
        StorageDead(_174);
        StorageDead(_163);
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        _119 = const ();
        goto -> bb56;
    }

    bb94: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_50);
        drop(_28) -> [return: bb95, unwind: bb116];
    }

    bb95: {
        StorageDead(_28);
        drop(_27) -> [return: bb96, unwind: bb117];
    }

    bb96: {
        StorageDead(_27);
        drop(_26) -> [return: bb97, unwind: bb120];
    }

    bb97: {
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        drop(_2) -> [return: bb110, unwind: bb121];
    }

    bb98: {
        StorageDead(_174);
        StorageDead(_163);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_127);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        drop(_98) -> [return: bb100, unwind: bb115];
    }

    bb100: {
        StorageDead(_98);
        StorageDead(_96);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_50);
        drop(_28) -> [return: bb102, unwind: bb116];
    }

    bb102: {
        StorageDead(_28);
        drop(_27) -> [return: bb103, unwind: bb117];
    }

    bb103: {
        StorageDead(_27);
        drop(_26) -> [return: bb104, unwind: bb120];
    }

    bb104: {
        StorageDead(_26);
        goto -> bb107;
    }

    bb105: {
        StorageDead(_39);
        StorageDead(_38);
        drop(_36) -> [return: bb106, unwind: bb120];
    }

    bb106: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb108;
    }

    bb108: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb109;
    }

    bb109: {
        drop(_2) -> [return: bb110, unwind: bb121];
    }

    bb110: {
        return;
    }

    bb111 (cleanup): {
        drop(_140) -> [return: bb112, unwind terminate(cleanup)];
    }

    bb112 (cleanup): {
        drop(_98) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_73) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_36) -> [return: bb115, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_28) -> [return: bb116, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_27) -> [return: bb117, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_26) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_39) -> [return: bb119, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_36) -> [return: bb120, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_2) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        resume;
    }

    bb122 (cleanup): {
        _263 = discriminant(_99);
        goto -> bb115;
    }

    bb123 (cleanup): {
        _265 = discriminant(_30);
        goto -> bb118;
    }

    bb124 (cleanup): {
        _266 = discriminant(_15);
        goto -> bb120;
    }

    bb125 (cleanup): {
        _267 = discriminant(_4);
        goto -> bb120;
    }
}
