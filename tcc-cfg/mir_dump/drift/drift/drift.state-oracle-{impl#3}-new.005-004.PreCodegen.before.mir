// MIR for `state::oracle::<impl at programs/drift/src/state/oracle.rs:187:1: 187:23>::new` before PreCodegen

fn state::oracle::<impl at programs/drift/src/state/oracle.rs:187:1: 187:23>::new(_1: i64, _2: i64, _3: u64, _4: OracleValidity, _5: OraclePriceData) -> std::result::Result<MMOraclePriceData, error::ErrorCode> {
    debug mm_oracle_price => _1;
    debug mm_oracle_delay => _2;
    debug mm_oracle_sequence_id => _3;
    debug mm_oracle_validity => _4;
    debug oracle_price_data => _5;
    let mut _0: std::result::Result<state::oracle::MMOraclePriceData, error::ErrorCode>;
    let _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: i64;
    let mut _10: i64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i64;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _18: std::result::Result<u128, error::ErrorCode>;
    let mut _19: u128;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _21: std::result::Result<u128, error::ErrorCode>;
    let mut _22: u128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _24: std::result::Result<u128, error::ErrorCode>;
    let mut _25: i64;
    let mut _26: i64;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _39: std::result::Result<u128, error::ErrorCode>;
    let mut _40: i64;
    let mut _41: i64;
    let mut _42: i64;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _54: isize;
    let mut _56: bool;
    let mut _57: u64;
    let mut _58: u64;
    let mut _59: u64;
    let mut _60: u64;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _62: std::result::Result<u64, error::ErrorCode>;
    let mut _63: u64;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _69: bool;
    let mut _70: u64;
    let mut _71: bool;
    let mut _72: u64;
    let mut _73: u64;
    let mut _74: u64;
    let mut _75: i64;
    let mut _76: i64;
    let mut _77: i64;
    let mut _78: i64;
    let mut _80: bool;
    let mut _81: bool;
    let mut _82: i64;
    let mut _83: bool;
    let mut _84: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _85: std::result::Result<bool, error::ErrorCode>;
    let mut _86: math::oracle::OracleValidity;
    let mut _87: std::option::Option<math::oracle::DriftAction>;
    let mut _88: math::oracle::DriftAction;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: bool;
    let mut _95: u128;
    let mut _97: i64;
    let mut _98: i64;
    let mut _100: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _101: std::result::Result<u64, error::ErrorCode>;
    let mut _102: u64;
    let mut _103: u64;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: i64;
    let mut _110: u64;
    let mut _111: i64;
    let mut _112: std::option::Option<u64>;
    let mut _113: u64;
    let mut _114: state::oracle::MMOraclePriceData;
    let mut _115: i64;
    let mut _116: i64;
    let mut _117: math::oracle::OracleValidity;
    let mut _118: u128;
    let mut _119: state::oracle::OraclePriceData;
    let mut _120: state::oracle::OraclePriceData;
    let mut _121: u64;
    scope 1 {
        debug price_diff => _6;
        let _16: u128;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: u128;
        let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _36: u128;
        let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _47: u128;
        let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _52: u128;
        scope 6 {
            debug price_diff_bps => _16;
            let _53: bool;
            scope 23 {
                debug exchange_oracle_is_more_recent => _53;
                let _79: state::oracle::OraclePriceData;
                let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _93: bool;
                let _96: u64;
                scope 29 {
                    debug safe_oracle_price_data => _79;
                }
                scope 30 {
                    debug residual => _90;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug val => _93;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug mm_oracle_diff_premium => _96;
                    let _99: u64;
                    let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _108: u64;
                    scope 35 {
                        debug adjusted_confidence => _99;
                    }
                    scope 36 {
                        debug residual => _105;
                        scope 37 {
                        }
                    }
                    scope 38 {
                        debug val => _108;
                        scope 39 {
                        }
                    }
                }
            }
            scope 24 {
                debug exchange_seq_id => _55;
                let _55: u64;
                let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _68: u64;
                scope 25 {
                    debug residual => _65;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _68;
                    scope 28 {
                    }
                }
            }
        }
        scope 7 {
            debug residual => _28;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _31;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _33;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _36;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _44;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _47;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _49;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _52;
            scope 22 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        StorageLive(_10);
        _10 = (_5.0: i64);
        _8 = <i64 as SafeMath>::safe_sub(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: i64);
        _6 = _15;
        StorageDead(_15);
        StorageDead(_7);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _6;
        _25 = core::num::<impl i64>::abs(move _26) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb72;
    }

    bb7: {
        StorageDead(_26);
        _24 = <i64 as Cast>::cast::<u128>(move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        _23 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_24);
        _27 = discriminant(_23);
        switchInt(move _27) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_31);
        _31 = ((_23 as Continue).0: u128);
        _22 = _31;
        StorageDead(_31);
        _21 = <u128 as SafeMath>::safe_mul(move _22, const _) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb69;
    }

    bb13: {
        StorageDead(_22);
        _20 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _21) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_21);
        _32 = discriminant(_20);
        switchInt(move _32) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_20 as Continue).0: u128);
        _19 = _36;
        StorageDead(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = (_5.0: i64);
        _41 = core::num::<impl i64>::abs(move _42) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_33);
        _33 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb69;
    }

    bb18: {
        StorageDead(_42);
        _40 = <i64 as Ord>::max(move _41, const 1_i64) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_41);
        _39 = <i64 as Cast>::cast::<u128>(move _40) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_40);
        _38 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _39) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_39);
        _43 = discriminant(_38);
        switchInt(move _43) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_47);
        _47 = ((_38 as Continue).0: u128);
        _37 = _47;
        StorageDead(_47);
        _18 = <u128 as SafeMath>::safe_div(move _19, move _37) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_44);
        _44 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_37);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb68;
    }

    bb25: {
        StorageDead(_37);
        StorageDead(_19);
        _17 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_18);
        _48 = discriminant(_17);
        switchInt(move _48) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_52);
        _52 = ((_17 as Continue).0: u128);
        _16 = _52;
        StorageDead(_52);
        StorageDead(_38);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        StorageLive(_53);
        _54 = discriminant((_5.4: std::option::Option<u64>));
        switchInt(move _54) -> [1: bb31, otherwise: bb30];
    }

    bb28: {
        StorageLive(_49);
        _49 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_51);
        StorageDead(_49);
        goto -> bb68;
    }

    bb30: {
        StorageLive(_77);
        _77 = _2;
        StorageLive(_78);
        _78 = (_5.2: i64);
        _53 = Gt(move _77, move _78);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb46;
    }

    bb31: {
        StorageLive(_55);
        _55 = (((_5.4: std::option::Option<u64>) as Some).0: u64);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _55;
        StorageLive(_59);
        _59 = _3;
        _57 = core::num::<impl u64>::abs_diff(move _58, move _59) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_59);
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _55;
        _62 = <u64 as SafeMath>::safe_div(move _63, const 10000_u64) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_63);
        _61 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _62) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_62);
        _64 = discriminant(_61);
        switchInt(move _64) -> [0: bb35, 1: bb36, otherwise: bb4];
    }

    bb35: {
        StorageLive(_68);
        _68 = ((_61 as Continue).0: u64);
        _60 = _68;
        StorageDead(_68);
        _56 = Lt(move _57, move _60);
        switchInt(move _56) -> [0: bb39, otherwise: bb38];
    }

    bb36: {
        StorageLive(_65);
        _65 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb67;
    }

    bb38: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_57);
        StorageLive(_69);
        StorageLive(_70);
        _70 = _55;
        _69 = Ne(move _70, const 0_u64);
        switchInt(move _69) -> [0: bb43, otherwise: bb40];
    }

    bb39: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_57);
        goto -> bb44;
    }

    bb40: {
        StorageDead(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = _3;
        _71 = Ne(move _72, const 0_u64);
        switchInt(move _71) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_72);
        StorageLive(_73);
        _73 = _55;
        StorageLive(_74);
        _74 = _3;
        _53 = Gt(move _73, move _74);
        StorageDead(_74);
        StorageDead(_73);
        goto -> bb45;
    }

    bb42: {
        StorageDead(_72);
        goto -> bb44;
    }

    bb43: {
        StorageDead(_70);
        goto -> bb44;
    }

    bb44: {
        StorageLive(_75);
        _75 = _2;
        StorageLive(_76);
        _76 = (_5.2: i64);
        _53 = Gt(move _75, move _76);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb45;
    }

    bb45: {
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_56);
        StorageDead(_55);
        goto -> bb46;
    }

    bb46: {
        StorageLive(_79);
        StorageLive(_80);
        _80 = _53;
        switchInt(move _80) -> [0: bb47, otherwise: bb48];
    }

    bb47: {
        StorageLive(_81);
        StorageLive(_82);
        _82 = _1;
        _81 = Eq(move _82, const 0_i64);
        switchInt(move _81) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        StorageDead(_82);
        goto -> bb56;
    }

    bb49: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _4;
        StorageLive(_87);
        StorageLive(_88);
        _88 = DriftAction::UseMMOraclePrice;
        _87 = Option::<DriftAction>::Some(move _88);
        StorageDead(_88);
        _85 = is_oracle_valid_for_action(move _86, move _87) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_87);
        StorageDead(_86);
        _84 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _85) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_85);
        _89 = discriminant(_84);
        switchInt(move _89) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_93);
        _93 = ((_84 as Continue).0: bool);
        _83 = _93;
        StorageDead(_93);
        switchInt(move _83) -> [0: bb56, otherwise: bb55];
    }

    bb53: {
        StorageLive(_90);
        _90 = ((_84 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_84);
        goto -> bb66;
    }

    bb55: {
        StorageDead(_84);
        StorageLive(_94);
        StorageLive(_95);
        _95 = _16;
        _94 = Gt(move _95, const _);
        switchInt(move _94) -> [0: bb58, otherwise: bb57];
    }

    bb56: {
        StorageDead(_84);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_95);
        _79 = _5;
        goto -> bb65;
    }

    bb58: {
        StorageDead(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = _1;
        StorageLive(_98);
        _98 = (_5.0: i64);
        _96 = core::num::<impl i64>::abs_diff(move _97, move _98) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = (_5.1: u64);
        StorageLive(_103);
        _103 = _96;
        _101 = <u64 as SafeMath>::safe_add(move _102, move _103) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_103);
        StorageDead(_102);
        _100 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _101) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_101);
        _104 = discriminant(_100);
        switchInt(move _104) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_108);
        _108 = ((_100 as Continue).0: u64);
        _99 = _108;
        StorageDead(_108);
        StorageDead(_100);
        StorageLive(_109);
        _109 = _1;
        StorageLive(_110);
        _110 = _99;
        StorageLive(_111);
        _111 = _2;
        StorageLive(_112);
        StorageLive(_113);
        _113 = _3;
        _112 = Option::<u64>::Some(move _113);
        StorageDead(_113);
        _79 = OraclePriceData { price: move _109, confidence: move _110, delay: move _111, has_sufficient_number_of_data_points: const true, sequence_id: move _112 };
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_99);
        StorageDead(_96);
        goto -> bb65;
    }

    bb63: {
        StorageLive(_105);
        _105 = ((_100 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<MMOraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_96);
        StorageDead(_94);
        goto -> bb66;
    }

    bb65: {
        StorageDead(_94);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_114);
        StorageLive(_115);
        _115 = _1;
        StorageLive(_116);
        _116 = _2;
        StorageLive(_117);
        _117 = _4;
        StorageLive(_118);
        _118 = _16;
        StorageLive(_119);
        _119 = _5;
        StorageLive(_120);
        _120 = _79;
        StorageLive(_121);
        _121 = _3;
        _114 = MMOraclePriceData { mm_oracle_price: move _115, mm_oracle_delay: move _116, mm_oracle_sequence_id: move _121, mm_oracle_validity: move _117, mm_exchange_diff_bps: move _118, exchange_oracle_price_data: move _119, safe_oracle_price_data: move _120 };
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        _0 = std::result::Result::<MMOraclePriceData, error::ErrorCode>::Ok(move _114);
        StorageDead(_114);
        StorageDead(_79);
        StorageDead(_53);
        StorageDead(_16);
        StorageDead(_6);
        goto -> bb73;
    }

    bb66: {
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_53);
        goto -> bb71;
    }

    bb68: {
        StorageDead(_38);
        goto -> bb70;
    }

    bb69: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_17);
        goto -> bb71;
    }

    bb71: {
        StorageDead(_16);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_6);
        goto -> bb73;
    }

    bb73: {
        return;
    }
}
