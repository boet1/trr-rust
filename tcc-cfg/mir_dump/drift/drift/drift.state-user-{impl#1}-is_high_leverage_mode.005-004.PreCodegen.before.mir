// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::is_high_leverage_mode` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::is_high_leverage_mode(_1: &User, _2: math::margin::MarginRequirementType) -> bool {
    debug self => _1;
    debug margin_type => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &state::user::MarginMode;
    let mut _5: &state::user::MarginMode;
    let _6: state::user::MarginMode;
    let mut _7: bool;
    let mut _8: &math::margin::MarginRequirementType;
    let mut _9: &math::margin::MarginRequirementType;
    let _10: math::margin::MarginRequirementType;
    let mut _11: &state::user::MarginMode;
    let mut _12: &state::user::MarginMode;
    let _13: state::user::MarginMode;
    let mut _14: &state::user::MarginMode;
    let mut _15: &math::margin::MarginRequirementType;
    let mut _16: &state::user::MarginMode;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).26: state::user::MarginMode);
        StorageLive(_5);
        _16 = const _;
        _5 = &(*_16);
        _3 = <MarginMode as PartialEq>::eq(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        _0 = const true;
        goto -> bb9;
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_2;
        StorageLive(_9);
        _15 = const _;
        _9 = &(*_15);
        _7 = <math::margin::MarginRequirementType as PartialEq>::eq(move _8, move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_11);
        _11 = &((*_1).26: state::user::MarginMode);
        StorageLive(_12);
        _14 = const _;
        _12 = &(*_14);
        _0 = <MarginMode as PartialEq>::eq(move _11, move _12) -> [return: bb7, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_8);
        _0 = const false;
        goto -> bb8;
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb8;
    }

    bb8: {
        StorageDead(_7);
        goto -> bb9;
    }

    bb9: {
        StorageDead(_3);
        return;
    }
}
