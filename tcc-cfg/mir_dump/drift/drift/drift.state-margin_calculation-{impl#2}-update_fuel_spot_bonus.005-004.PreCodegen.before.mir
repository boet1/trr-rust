// MIR for `margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::update_fuel_spot_bonus` before PreCodegen

fn margin_calculation::<impl at programs/drift/src/state/margin_calculation.rs:208:1: 208:23>::update_fuel_spot_bonus(_1: &mut MarginCalculation, _2: &SpotMarket, _3: i128, _4: &StrictOraclePrice) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug spot_market => _2;
    debug signed_token_amount => _3;
    debug strict_price => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: u8;
    let mut _8: bool;
    let mut _9: u8;
    let mut _10: !;
    let mut _11: ();
    let _12: ();
    let mut _13: std::slice::Iter<'_, (u16, i128)>;
    let mut _14: &[(u16, i128); 2];
    let mut _15: std::slice::Iter<'_, (u16, i128)>;
    let mut _16: ();
    let _17: ();
    let mut _18: std::option::Option<&(u16, i128)>;
    let mut _19: &mut std::slice::Iter<'_, (u16, i128)>;
    let mut _20: &mut std::slice::Iter<'_, (u16, i128)>;
    let mut _21: isize;
    let mut _22: !;
    let mut _25: bool;
    let mut _26: u16;
    let mut _27: u16;
    let mut _28: bool;
    let mut _29: i128;
    let mut _30: i128;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _32: std::result::Result<i128, error::ErrorCode>;
    let mut _33: i128;
    let mut _34: i128;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: ();
    let mut _41: bool;
    let mut _42: u8;
    let mut _43: bool;
    let mut _44: i128;
    let _45: i128;
    let mut _46: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _47: std::result::Result<i128, error::ErrorCode>;
    let mut _48: i128;
    let mut _49: u32;
    let mut _50: &state::oracle::StrictOraclePrice;
    let mut _51: isize;
    let _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _55: i128;
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _58: std::result::Result<u64, error::ErrorCode>;
    let mut _59: &state::spot_market::SpotMarket;
    let mut _60: i128;
    let mut _61: i64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: u32;
    let mut _68: u32;
    let mut _69: u32;
    let mut _70: std::result::Result<u32, error::ErrorCode>;
    let mut _71: u64;
    let mut _72: bool;
    let mut _73: u8;
    let mut _74: bool;
    let mut _75: i128;
    let _76: i128;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _78: std::result::Result<i128, error::ErrorCode>;
    let mut _79: i128;
    let mut _80: u32;
    let mut _81: &state::oracle::StrictOraclePrice;
    let mut _82: isize;
    let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _86: i128;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _89: std::result::Result<u64, error::ErrorCode>;
    let mut _90: &state::spot_market::SpotMarket;
    let mut _91: i128;
    let mut _92: i64;
    let mut _93: isize;
    let mut _95: !;
    let mut _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _98: u32;
    let mut _99: u32;
    let mut _100: u32;
    let mut _101: std::result::Result<u32, error::ErrorCode>;
    let mut _102: u64;
    let mut _103: ();
    let mut _104: &(u16, i128);
    let mut _105: &(u16, i128);
    scope 1 {
        debug iter => _15;
        let _23: u16;
        let _24: i128;
        scope 2 {
            debug market_index => _23;
            debug delta => _24;
            let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _39: i128;
            scope 3 {
                debug residual => _36;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _39;
                scope 6 {
                }
            }
        }
    }
    scope 7 {
        debug signed_token_value => _45;
        let _56: u64;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: u64;
        scope 12 {
            debug fuel_bonus => _56;
        }
        scope 13 {
            debug residual => _63;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _66;
            scope 16 {
            }
        }
    }
    scope 8 {
        debug residual => _52;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _55;
        scope 11 {
        }
    }
    scope 17 {
        debug signed_token_value => _76;
        let _87: u64;
        let _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _97: u64;
        scope 22 {
            debug fuel_bonus => _87;
        }
        scope 23 {
            debug residual => _94;
            scope 24 {
            }
        }
        scope 25 {
            debug val => _97;
            scope 26 {
            }
        }
    }
    scope 18 {
        debug residual => _83;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _86;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_2).56: u8);
        _6 = Eq(move _7, const 0_u8);
        switchInt(move _6) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_2).57: u8);
        _8 = Eq(move _9, const 0_u8);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_9);
        StorageLive(_11);
        _11 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _11);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb64;
    }

    bb3: {
        StorageDead(_9);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_7);
        goto -> bb5;
    }

    bb5: {
        _5 = const ();
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &(((*_1).0: state::margin_calculation::MarginContext).8: [(u16, i128); 2]);
        _13 = <&[(u16, i128); 2] as IntoIterator>::into_iter(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageLive(_15);
        _15 = move _13;
        goto -> bb7;
    }

    bb7: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &mut _15;
        _19 = &mut (*_20);
        _18 = <std::slice::Iter<'_, (u16, i128)> as Iterator>::next(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_19);
        _21 = discriminant(_18);
        switchInt(move _21) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        StorageLive(_23);
        _104 = deref_copy ((_18 as Some).0: &(u16, i128));
        _23 = ((*_104).0: u16);
        StorageLive(_24);
        _105 = deref_copy ((_18 as Some).0: &(u16, i128));
        _24 = ((*_105).1: i128);
        StorageLive(_25);
        StorageLive(_26);
        _26 = ((*_2).42: u16);
        StorageLive(_27);
        _27 = _23;
        _25 = Eq(move _26, move _27);
        switchInt(move _25) -> [0: bb20, otherwise: bb12];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _12 = const ();
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = ((*_2).56: u8);
        _41 = Gt(move _42, const 0_u8);
        switchInt(move _41) -> [0: bb24, otherwise: bb23];
    }

    bb12: {
        StorageDead(_27);
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _24;
        _28 = Ne(move _29, const 0_i128);
        switchInt(move _28) -> [0: bb19, otherwise: bb13];
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _3;
        StorageLive(_34);
        _34 = _24;
        _32 = <i128 as SafeMath>::safe_add(move _33, move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_32);
        _35 = discriminant(_31);
        switchInt(move _35) -> [0: bb16, 1: bb17, otherwise: bb10];
    }

    bb16: {
        StorageLive(_39);
        _39 = ((_31 as Continue).0: i128);
        _30 = _39;
        StorageDead(_39);
        _3 = move _30;
        StorageDead(_30);
        StorageDead(_31);
        _17 = const ();
        goto -> bb22;
    }

    bb17: {
        StorageLive(_36);
        _36 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_30);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb64;
    }

    bb19: {
        StorageDead(_29);
        goto -> bb21;
    }

    bb20: {
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb21;
    }

    bb21: {
        _17 = const ();
        goto -> bb22;
    }

    bb22: {
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_17);
        _16 = const ();
        goto -> bb7;
    }

    bb23: {
        StorageDead(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _3;
        _43 = Gt(move _44, const 0_i128);
        switchInt(move _43) -> [0: bb39, otherwise: bb25];
    }

    bb24: {
        StorageDead(_42);
        goto -> bb40;
    }

    bb25: {
        StorageDead(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = _3;
        StorageLive(_49);
        _49 = ((*_2).41: u32);
        StorageLive(_50);
        _50 = &(*_4);
        _47 = get_strict_token_value(move _48, move _49, move _50) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_48);
        _46 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _47) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_47);
        _51 = discriminant(_46);
        switchInt(move _51) -> [0: bb28, 1: bb29, otherwise: bb10];
    }

    bb28: {
        StorageLive(_55);
        _55 = ((_46 as Continue).0: i128);
        _45 = _55;
        StorageDead(_55);
        StorageDead(_46);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &(*_2);
        StorageLive(_60);
        _60 = _45;
        StorageLive(_61);
        _61 = (((*_1).0: state::margin_calculation::MarginContext).5: i64);
        _58 = calculate_spot_fuel_bonus(move _59, move _60, move _61) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_52);
        _52 = ((_46 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_54);
        _54 = _52;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _54) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_46);
        goto -> bb62;
    }

    bb31: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_59);
        _57 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _58) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_58);
        _62 = discriminant(_57);
        switchInt(move _62) -> [0: bb33, 1: bb34, otherwise: bb10];
    }

    bb33: {
        StorageLive(_66);
        _66 = ((_57 as Continue).0: u64);
        _56 = _66;
        StorageDead(_66);
        StorageDead(_57);
        StorageLive(_67);
        StorageLive(_68);
        _68 = ((*_1).17: u32);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _56;
        _70 = <u64 as Cast>::cast::<u32>(move _71) -> [return: bb36, unwind continue];
    }

    bb34: {
        StorageLive(_63);
        _63 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb62;
    }

    bb36: {
        StorageDead(_71);
        _69 = std::result::Result::<u32, error::ErrorCode>::unwrap_or(move _70, const _) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_70);
        _67 = core::num::<impl u32>::saturating_add(move _68, move _69) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_69);
        StorageDead(_68);
        ((*_1).17: u32) = move _67;
        StorageDead(_67);
        _40 = const ();
        StorageDead(_56);
        StorageDead(_45);
        goto -> bb60;
    }

    bb39: {
        StorageDead(_44);
        goto -> bb40;
    }

    bb40: {
        StorageLive(_72);
        StorageLive(_73);
        _73 = ((*_2).57: u8);
        _72 = Gt(move _73, const 0_u8);
        switchInt(move _72) -> [0: bb57, otherwise: bb41];
    }

    bb41: {
        StorageDead(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _3;
        _74 = Lt(move _75, const 0_i128);
        switchInt(move _74) -> [0: bb56, otherwise: bb42];
    }

    bb42: {
        StorageDead(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _3;
        StorageLive(_80);
        _80 = ((*_2).41: u32);
        StorageLive(_81);
        _81 = &(*_4);
        _78 = get_strict_token_value(move _79, move _80, move _81) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        _77 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _78) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_78);
        _82 = discriminant(_77);
        switchInt(move _82) -> [0: bb45, 1: bb46, otherwise: bb10];
    }

    bb45: {
        StorageLive(_86);
        _86 = ((_77 as Continue).0: i128);
        _76 = _86;
        StorageDead(_86);
        StorageDead(_77);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &(*_2);
        StorageLive(_91);
        _91 = _76;
        StorageLive(_92);
        _92 = (((*_1).0: state::margin_calculation::MarginContext).5: i64);
        _89 = calculate_spot_fuel_bonus(move _90, move _91, move _92) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_83);
        _83 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_77);
        goto -> bb61;
    }

    bb48: {
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        _88 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _89) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_89);
        _93 = discriminant(_88);
        switchInt(move _93) -> [0: bb50, 1: bb51, otherwise: bb10];
    }

    bb50: {
        StorageLive(_97);
        _97 = ((_88 as Continue).0: u64);
        _87 = _97;
        StorageDead(_97);
        StorageDead(_88);
        StorageLive(_98);
        StorageLive(_99);
        _99 = ((*_1).18: u32);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = _87;
        _101 = <u64 as Cast>::cast::<u32>(move _102) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_94);
        _94 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_96);
        _96 = _94;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _96) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb61;
    }

    bb53: {
        StorageDead(_102);
        _100 = std::result::Result::<u32, error::ErrorCode>::unwrap_or(move _101, const _) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_101);
        _98 = core::num::<impl u32>::saturating_add(move _99, move _100) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_100);
        StorageDead(_99);
        ((*_1).18: u32) = move _98;
        StorageDead(_98);
        _40 = const ();
        StorageDead(_87);
        StorageDead(_76);
        goto -> bb59;
    }

    bb56: {
        StorageDead(_75);
        goto -> bb58;
    }

    bb57: {
        StorageDead(_73);
        goto -> bb58;
    }

    bb58: {
        _40 = const ();
        goto -> bb59;
    }

    bb59: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_103);
        _103 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _103);
        StorageDead(_103);
        goto -> bb64;
    }

    bb61: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_45);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb64;
    }

    bb64: {
        return;
    }
}
