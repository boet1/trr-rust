// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:63:1: 63:39>::to_openbook_v2_fulfillment_config` before PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:63:1: 63:39>::to_openbook_v2_fulfillment_config(_1: &OpenbookV2Context<'_, '_>, _2: &anchor_lang::prelude::Pubkey, _3: u16) -> std::result::Result<OpenbookV2FulfillmentConfig, error::ErrorCode> {
    debug self => _1;
    debug openbook_v2_fulfillment_config_key => _2;
    debug market_index => _3;
    let mut _0: std::result::Result<state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig, error::ErrorCode>;
    let _4: openbook_v2_light::Market;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, openbook_v2_light::Market>;
    let mut _6: std::result::Result<openbook_v2_light::Market, error::ErrorCode>;
    let mut _7: std::result::Result<openbook_v2_light::Market, error::ErrorCode>;
    let mut _8: &state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>;
    let mut _9: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:77:22: 77:25};
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: openbook_v2_light::Market;
    let mut _15: state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentConfig;
    let mut _16: anchor_lang::prelude::Pubkey;
    let mut _17: anchor_lang::prelude::Pubkey;
    let mut _18: anchor_lang::prelude::Pubkey;
    let mut _19: anchor_lang::prelude::Pubkey;
    let mut _20: anchor_lang::prelude::Pubkey;
    let mut _21: anchor_lang::prelude::Pubkey;
    let mut _22: anchor_lang::prelude::Pubkey;
    let mut _23: anchor_lang::prelude::Pubkey;
    let mut _24: anchor_lang::prelude::Pubkey;
    let mut _25: u16;
    let mut _26: instructions::keeper::SpotFulfillmentType;
    let mut _27: state::spot_market::SpotFulfillmentConfigStatus;
    let mut _28: [u8; 4];
    let mut _29: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _30: &anchor_lang::prelude::Pubkey;
    let mut _31: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _32: &anchor_lang::prelude::Pubkey;
    scope 1 {
        debug market => _4;
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &(*_1);
        _7 = OpenbookV2Context::<'_, '_>::load_openbook_v2_market(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageLive(_9);
        _9 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:77:22: 77:25};
        _6 = std::result::Result::<openbook_v2_light::Market, error::ErrorCode>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:77:22: 77:25}>(move _7, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        StorageDead(_7);
        _5 = <std::result::Result<openbook_v2_light::Market, error::ErrorCode> as Try>::branch(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_5 as Continue).0: openbook_v2_light::Market);
        _4 = _14;
        StorageDead(_14);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        _16 = (*_2);
        StorageLive(_17);
        _29 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _30 = deref_copy ((*_29).0: &anchor_lang::prelude::Pubkey);
        _17 = (*_30);
        StorageLive(_18);
        _31 = deref_copy ((*_1).1: &anchor_lang::prelude::AccountInfo<'_>);
        _32 = deref_copy ((*_31).0: &anchor_lang::prelude::Pubkey);
        _18 = (*_32);
        StorageLive(_19);
        _19 = (_4.4: anchor_lang::prelude::Pubkey);
        StorageLive(_20);
        _20 = (_4.13: anchor_lang::prelude::Pubkey);
        StorageLive(_21);
        _21 = (_4.11: anchor_lang::prelude::Pubkey);
        StorageLive(_22);
        _22 = (_4.12: anchor_lang::prelude::Pubkey);
        StorageLive(_23);
        _23 = (_4.31: anchor_lang::prelude::Pubkey);
        StorageLive(_24);
        _24 = (_4.33: anchor_lang::prelude::Pubkey);
        StorageLive(_25);
        _25 = _3;
        StorageLive(_26);
        _26 = keeper::SpotFulfillmentType::OpenbookV2;
        StorageLive(_27);
        _27 = state::spot_market::SpotFulfillmentConfigStatus::Enabled;
        StorageLive(_28);
        _28 = [const 0_u8; 4];
        _15 = OpenbookV2FulfillmentConfig { pubkey: move _16, openbook_v2_program_id: move _17, openbook_v2_market: move _18, openbook_v2_market_authority: move _19, openbook_v2_event_heap: move _20, openbook_v2_bids: move _21, openbook_v2_asks: move _22, openbook_v2_base_vault: move _23, openbook_v2_quote_vault: move _24, market_index: move _25, fulfillment_type: move _26, status: move _27, padding: move _28 };
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        _0 = std::result::Result::<OpenbookV2FulfillmentConfig, error::ErrorCode>::Ok(move _15);
        StorageDead(_15);
        StorageDead(_4);
        goto -> bb8;
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<OpenbookV2FulfillmentConfig, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb8;
    }

    bb8: {
        return;
    }
}
