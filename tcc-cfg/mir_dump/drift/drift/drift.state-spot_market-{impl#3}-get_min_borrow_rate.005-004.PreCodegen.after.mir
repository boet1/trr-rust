// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_min_borrow_rate` after PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_min_borrow_rate(_1: SpotMarket) -> std::result::Result<u32, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u32, error::ErrorCode>;
    let mut _2: u32;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _4: std::result::Result<u32, error::ErrorCode>;
    let mut _5: u8;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _10: u32;
    let mut _11: u32;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _13: std::result::Result<u32, error::ErrorCode>;
    let mut _14: u128;
    let mut _15: bool;
    let mut _16: isize;
    let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _20: u32;
    scope 1 {
        debug residual => _7;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _10;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _17;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _20;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = (_1.55: u8);
        _4 = <u8 as Cast>::cast::<u32>(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = ((_3 as Continue).0: u32);
        _2 = _10;
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _15 = Eq(const 200_u128, const 0_u128);
        assert(!move _15, "attempt to divide `{}` by zero", const _) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_9);
        _9 = _7;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_2);
        goto -> bb14;
    }

    bb7: {
        _14 = Div(const _, const 200_u128);
        _13 = <u128 as Cast>::cast::<u32>(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        _12 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _13) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_13);
        _16 = discriminant(_12);
        switchInt(move _16) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_20);
        _20 = ((_12 as Continue).0: u32);
        _11 = _20;
        StorageDead(_20);
        _0 = <u32 as SafeMath>::safe_mul(move _2, move _11) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_17);
        _17 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<u32, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_11);
        StorageDead(_2);
        StorageDead(_12);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_11);
        StorageDead(_2);
        StorageDead(_12);
        StorageDead(_3);
        goto -> bb15;
    }

    bb14: {
        StorageDead(_3);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}
