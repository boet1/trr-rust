// MIR for `calculate_base_asset_value` after PreCodegen

fn calculate_base_asset_value(_1: i128, _2: &AMM) -> std::result::Result<u128, error::ErrorCode> {
    debug base_asset_amount => _1;
    debug amm => _2;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: i128;
    let mut _6: !;
    let _7: controller::amm::SwapDirection;
    let mut _8: i128;
    let mut _11: (u128, u128);
    let mut _12: u128;
    let mut _13: u128;
    let mut _17: (u128, u128);
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _19: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _20: u128;
    let mut _21: i128;
    let mut _22: u128;
    let mut _23: controller::amm::SwapDirection;
    let mut _24: u128;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: u128;
    let mut _34: u128;
    let mut _35: controller::amm::SwapDirection;
    let mut _36: u128;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: u128;
    scope 1 {
        debug swap_direction => _7;
        let _9: u128;
        let _10: u128;
        scope 2 {
            debug base_asset_reserve => _9;
            debug quote_asset_reserve => _10;
            let _14: u128;
            scope 3 {
                debug amm_lp_shares => _14;
                let _15: u128;
                let _16: u128;
                let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _29: (u128, u128);
                scope 4 {
                    debug new_quote_asset_reserve => _15;
                    debug _new_base_asset_reserve => _16;
                    let _30: u128;
                    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _41: u128;
                    scope 9 {
                        debug base_asset_value => _30;
                    }
                    scope 10 {
                        debug residual => _38;
                        scope 11 {
                        }
                    }
                    scope 12 {
                        debug val => _41;
                        scope 13 {
                        }
                    }
                }
                scope 5 {
                    debug residual => _26;
                    scope 6 {
                    }
                }
                scope 7 {
                    debug val => _29;
                    scope 8 {
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _4 = Eq(move _5, const 0_i128);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(const 0_u128);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb17;
    }

    bb2: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _1;
        _7 = swap_direction_to_close_position(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_8);
        StorageLive(_11);
        StorageLive(_12);
        _12 = ((*_2).5: u128);
        StorageLive(_13);
        _13 = ((*_2).6: u128);
        _11 = (move _12, move _13);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_9);
        _9 = (_11.0: u128);
        StorageLive(_10);
        _10 = (_11.1: u128);
        StorageDead(_11);
        StorageLive(_14);
        _14 = ((*_2).10: u128);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = _1;
        _20 = core::num::<impl i128>::unsigned_abs(move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageLive(_22);
        _22 = _9;
        StorageLive(_23);
        _23 = _7;
        StorageLive(_24);
        _24 = _14;
        _19 = calculate_swap_output(move _20, move _22, move _23, move _24) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_20);
        _18 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_19);
        _25 = discriminant(_18);
        switchInt(move _25) -> [0: bb7, 1: bb9, otherwise: bb8];
    }

    bb7: {
        StorageLive(_29);
        _29 = ((_18 as Continue).0: (u128, u128));
        _17 = _29;
        StorageDead(_29);
        StorageLive(_15);
        _15 = (_17.0: u128);
        StorageLive(_16);
        _16 = (_17.1: u128);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _10;
        StorageLive(_34);
        _34 = _15;
        StorageLive(_35);
        _35 = _7;
        StorageLive(_36);
        _36 = ((*_2).11: u128);
        _32 = calculate_quote_asset_amount_swapped(move _33, move _34, move _35, move _36) -> [return: bb11, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        StorageLive(_26);
        _26 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb16;
    }

    bb11: {
        StorageDead(_36);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_32);
        _37 = discriminant(_31);
        switchInt(move _37) -> [0: bb13, 1: bb14, otherwise: bb8];
    }

    bb13: {
        StorageLive(_41);
        _41 = ((_31 as Continue).0: u128);
        _30 = _41;
        StorageDead(_41);
        StorageDead(_31);
        StorageLive(_42);
        _42 = _30;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _42);
        StorageDead(_42);
        StorageDead(_30);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb17;
    }

    bb14: {
        StorageLive(_38);
        _38 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb17;
    }

    bb17: {
        return;
    }
}
