// MIR for `admin::handle_update_perp_market_oracle` after PreCodegen

fn admin::handle_update_perp_market_oracle(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarketOracle<'_>>, _2: anchor_lang::prelude::Pubkey, _3: state::oracle::OracleSource, _4: bool) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug oracle => _2;
    debug oracle_source => _3;
    debug skip_invariant_check => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _9: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _16: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _19: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _21: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 1];
    let _37: &[&str; 1];
    let _38: [&str; 1];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &u16;
    let _45: &u16;
    let _46: &state::perp_market::PerpMarket;
    let mut _47: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _50: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _51: isize;
    let mut _53: !;
    let mut _54: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _56: ();
    let mut _57: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _58: std::result::Result<(), error::ErrorCode>;
    let mut _59: &anchor_lang::prelude::AccountInfo<'_>;
    let _60: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _66: ();
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _68: std::result::Result<(), error::ErrorCode>;
    let mut _69: bool;
    let mut _70: &&anchor_lang::prelude::Pubkey;
    let mut _71: &&anchor_lang::prelude::Pubkey;
    let _72: &anchor_lang::prelude::Pubkey;
    let mut _73: ();
    let _75: ();
    let mut _76: &str;
    let _77: &str;
    let mut _78: &std::string::String;
    let _79: &std::string::String;
    let _80: std::string::String;
    let mut _82: std::fmt::Arguments<'_>;
    let mut _83: &[&str];
    let mut _84: &[&str; 2];
    let _85: &[&str; 2];
    let _86: [&str; 2];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let mut _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: &[core::fmt::rt::Argument<'_>; 1];
    let _90: [core::fmt::rt::Argument<'_>; 1];
    let mut _91: core::fmt::rt::Argument<'_>;
    let mut _92: &error::ErrorCode;
    let _93: &error::ErrorCode;
    let _94: ();
    let mut _95: &str;
    let _96: &str;
    let mut _97: &std::string::String;
    let _98: &std::string::String;
    let _99: std::string::String;
    let mut _101: std::fmt::Arguments<'_>;
    let mut _102: &[&str];
    let mut _103: &[&str; 3];
    let _104: &[&str; 3];
    let _105: [&str; 3];
    let mut _106: &[core::fmt::rt::Argument<'_>];
    let mut _107: &[core::fmt::rt::Argument<'_>; 2];
    let _108: &[core::fmt::rt::Argument<'_>; 2];
    let _109: [core::fmt::rt::Argument<'_>; 2];
    let mut _110: core::fmt::rt::Argument<'_>;
    let mut _111: &&anchor_lang::prelude::Pubkey;
    let _112: &&anchor_lang::prelude::Pubkey;
    let mut _113: core::fmt::rt::Argument<'_>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let _115: &anchor_lang::prelude::Pubkey;
    let mut _116: error::ErrorCode;
    let mut _117: isize;
    let mut _119: !;
    let mut _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _122: ();
    let mut _123: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _124: std::result::Result<(), error::ErrorCode>;
    let mut _125: bool;
    let mut _126: &&anchor_lang::prelude::Pubkey;
    let mut _127: &&anchor_lang::prelude::Pubkey;
    let _128: &anchor_lang::prelude::Pubkey;
    let _129: &state::perp_market::PerpMarket;
    let mut _130: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _131: ();
    let _133: ();
    let mut _134: &str;
    let _135: &str;
    let mut _136: &std::string::String;
    let _137: &std::string::String;
    let _138: std::string::String;
    let mut _140: std::fmt::Arguments<'_>;
    let mut _141: &[&str];
    let mut _142: &[&str; 2];
    let _143: &[&str; 2];
    let _144: [&str; 2];
    let mut _145: &[core::fmt::rt::Argument<'_>];
    let mut _146: &[core::fmt::rt::Argument<'_>; 1];
    let _147: &[core::fmt::rt::Argument<'_>; 1];
    let _148: [core::fmt::rt::Argument<'_>; 1];
    let mut _149: core::fmt::rt::Argument<'_>;
    let mut _150: &error::ErrorCode;
    let _151: &error::ErrorCode;
    let _152: ();
    let mut _153: &str;
    let _154: &str;
    let mut _155: &std::string::String;
    let _156: &std::string::String;
    let _157: std::string::String;
    let mut _159: std::fmt::Arguments<'_>;
    let mut _160: &[&str];
    let mut _161: &[&str; 3];
    let _162: &[&str; 3];
    let _163: [&str; 3];
    let mut _164: &[core::fmt::rt::Argument<'_>];
    let mut _165: &[core::fmt::rt::Argument<'_>; 2];
    let _166: &[core::fmt::rt::Argument<'_>; 2];
    let _167: [core::fmt::rt::Argument<'_>; 2];
    let mut _168: core::fmt::rt::Argument<'_>;
    let mut _169: &&anchor_lang::prelude::Pubkey;
    let _170: &&anchor_lang::prelude::Pubkey;
    let mut _171: core::fmt::rt::Argument<'_>;
    let mut _172: &anchor_lang::prelude::Pubkey;
    let _173: &anchor_lang::prelude::Pubkey;
    let _174: &state::perp_market::PerpMarket;
    let mut _175: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _176: error::ErrorCode;
    let mut _177: isize;
    let mut _179: !;
    let mut _180: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _184: state::oracle::OraclePriceData;
    let mut _185: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _186: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _187: &state::oracle::OracleSource;
    let _188: &state::oracle::OracleSource;
    let mut _189: &anchor_lang::prelude::AccountInfo<'_>;
    let _190: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _191: u64;
    let mut _192: isize;
    let mut _194: !;
    let mut _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _197: ();
    let mut _198: &str;
    let _199: &str;
    let mut _200: &std::string::String;
    let _201: &std::string::String;
    let _202: std::string::String;
    let mut _204: std::fmt::Arguments<'_>;
    let mut _205: &[&str];
    let mut _206: &[&str; 2];
    let _207: &[&str; 2];
    let _208: [&str; 2];
    let mut _209: &[core::fmt::rt::Argument<'_>];
    let mut _210: &[core::fmt::rt::Argument<'_>; 2];
    let _211: &[core::fmt::rt::Argument<'_>; 2];
    let _212: [core::fmt::rt::Argument<'_>; 2];
    let mut _213: core::fmt::rt::Argument<'_>;
    let mut _214: &anchor_lang::prelude::Pubkey;
    let _215: &anchor_lang::prelude::Pubkey;
    let _216: &state::perp_market::PerpMarket;
    let mut _217: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _218: core::fmt::rt::Argument<'_>;
    let mut _219: &anchor_lang::prelude::Pubkey;
    let _220: &anchor_lang::prelude::Pubkey;
    let _221: ();
    let mut _222: &str;
    let _223: &str;
    let mut _224: &std::string::String;
    let _225: &std::string::String;
    let _226: std::string::String;
    let mut _228: std::fmt::Arguments<'_>;
    let mut _229: &[&str];
    let mut _230: &[&str; 2];
    let _231: &[&str; 2];
    let _232: [&str; 2];
    let mut _233: &[core::fmt::rt::Argument<'_>];
    let mut _234: &[core::fmt::rt::Argument<'_>; 2];
    let _235: &[core::fmt::rt::Argument<'_>; 2];
    let _236: [core::fmt::rt::Argument<'_>; 2];
    let mut _237: core::fmt::rt::Argument<'_>;
    let mut _238: &state::oracle::OracleSource;
    let _239: &state::oracle::OracleSource;
    let _240: &state::perp_market::PerpMarket;
    let mut _241: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _242: core::fmt::rt::Argument<'_>;
    let mut _243: &state::oracle::OracleSource;
    let _244: &state::oracle::OracleSource;
    let mut _246: state::oracle::OraclePriceData;
    let mut _247: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _248: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _249: &state::oracle::OracleSource;
    let _250: &state::oracle::OracleSource;
    let _251: &state::perp_market::PerpMarket;
    let mut _252: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _253: &anchor_lang::prelude::AccountInfo<'_>;
    let _254: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _255: u64;
    let mut _256: isize;
    let mut _258: !;
    let mut _259: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _261: ();
    let mut _262: &str;
    let _263: &str;
    let mut _264: &std::string::String;
    let _265: &std::string::String;
    let _266: std::string::String;
    let mut _268: std::fmt::Arguments<'_>;
    let mut _269: &[&str];
    let mut _270: &[&str; 2];
    let _271: &[&str; 2];
    let _272: [&str; 2];
    let mut _273: &[core::fmt::rt::Argument<'_>];
    let mut _274: &[core::fmt::rt::Argument<'_>; 2];
    let _275: &[core::fmt::rt::Argument<'_>; 2];
    let _276: [core::fmt::rt::Argument<'_>; 2];
    let mut _277: core::fmt::rt::Argument<'_>;
    let mut _278: &i64;
    let _279: &i64;
    let mut _280: core::fmt::rt::Argument<'_>;
    let mut _281: &i64;
    let _282: &i64;
    let _283: ();
    let mut _284: bool;
    let _285: ();
    let mut _286: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _287: std::result::Result<(), error::ErrorCode>;
    let mut _288: bool;
    let mut _289: i64;
    let mut _290: ();
    let _292: ();
    let mut _293: &str;
    let _294: &str;
    let mut _295: &std::string::String;
    let _296: &std::string::String;
    let _297: std::string::String;
    let mut _299: std::fmt::Arguments<'_>;
    let mut _300: &[&str];
    let mut _301: &[&str; 2];
    let _302: &[&str; 2];
    let _303: [&str; 2];
    let mut _304: &[core::fmt::rt::Argument<'_>];
    let mut _305: &[core::fmt::rt::Argument<'_>; 1];
    let _306: &[core::fmt::rt::Argument<'_>; 1];
    let _307: [core::fmt::rt::Argument<'_>; 1];
    let mut _308: core::fmt::rt::Argument<'_>;
    let mut _309: &error::ErrorCode;
    let _310: &error::ErrorCode;
    let _311: ();
    let mut _312: &str;
    let _313: &str;
    let mut _314: error::ErrorCode;
    let mut _315: isize;
    let mut _317: !;
    let mut _318: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _321: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _322: std::result::Result<i64, error::ErrorCode>;
    let mut _323: i64;
    let mut _324: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _325: std::result::Result<i64, error::ErrorCode>;
    let mut _326: i64;
    let mut _327: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _328: std::result::Result<i64, error::ErrorCode>;
    let mut _329: i64;
    let mut _330: i64;
    let mut _331: isize;
    let mut _333: !;
    let mut _334: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _336: isize;
    let mut _338: !;
    let mut _339: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _341: i64;
    let mut _342: isize;
    let mut _344: !;
    let mut _345: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _347: ();
    let mut _348: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _349: std::result::Result<(), error::ErrorCode>;
    let mut _350: bool;
    let mut _351: i64;
    let mut _352: i64;
    let mut _353: i64;
    let mut _354: bool;
    let mut _355: bool;
    let mut _356: bool;
    let mut _357: bool;
    let mut _358: ();
    let _360: ();
    let mut _361: &str;
    let _362: &str;
    let mut _363: &std::string::String;
    let _364: &std::string::String;
    let _365: std::string::String;
    let mut _367: std::fmt::Arguments<'_>;
    let mut _368: &[&str];
    let mut _369: &[&str; 2];
    let _370: &[&str; 2];
    let _371: [&str; 2];
    let mut _372: &[core::fmt::rt::Argument<'_>];
    let mut _373: &[core::fmt::rt::Argument<'_>; 1];
    let _374: &[core::fmt::rt::Argument<'_>; 1];
    let _375: [core::fmt::rt::Argument<'_>; 1];
    let mut _376: core::fmt::rt::Argument<'_>;
    let mut _377: &error::ErrorCode;
    let _378: &error::ErrorCode;
    let _379: ();
    let mut _380: &str;
    let _381: &str;
    let mut _382: error::ErrorCode;
    let mut _383: isize;
    let mut _385: !;
    let mut _386: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _388: anchor_lang::prelude::Pubkey;
    let mut _389: &mut state::perp_market::PerpMarket;
    let mut _390: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _391: state::oracle::OracleSource;
    let mut _392: &mut state::perp_market::PerpMarket;
    let mut _393: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _394: ();
    let mut _405: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _406: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _407: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _408: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _409: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _410: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _411: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _412: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _413: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _15;
        let _33: std::string::String;
        let _48: anchor_lang::prelude::Clock;
        let _52: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _55: anchor_lang::prelude::Clock;
        let mut _404: &[&str; 1];
        scope 10 {
            debug res => _33;
        }
        scope 11 {
            debug clock => _48;
            let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _65: ();
            let _74: error::ErrorCode;
            let _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _121: ();
            let _132: error::ErrorCode;
            let _178: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _181: ();
            let _182: i64;
            let _183: i64;
            let _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _196: state::oracle::OraclePriceData;
            scope 16 {
                debug residual => _62;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _65;
                scope 19 {
                }
            }
            scope 20 {
                debug error_code => _74;
                let _81: std::string::String;
                let _100: std::string::String;
                let mut _402: &[&str; 3];
                let mut _403: &[&str; 2];
                scope 21 {
                    debug res => _81;
                }
                scope 22 {
                    debug res => _100;
                }
            }
            scope 23 {
                debug residual => _118;
                scope 24 {
                }
            }
            scope 25 {
                debug val => _121;
                scope 26 {
                }
            }
            scope 27 {
                debug error_code => _132;
                let _139: std::string::String;
                let _158: std::string::String;
                let mut _400: &[&str; 3];
                let mut _401: &[&str; 2];
                scope 28 {
                    debug res => _139;
                }
                scope 29 {
                    debug res => _158;
                }
            }
            scope 30 {
                debug residual => _178;
                scope 31 {
                }
            }
            scope 32 {
                debug val => _181;
                scope 33 {
                }
            }
            scope 34 {
                debug new_oracle_price => _182;
                debug _oracle_delay => _183;
                let _203: std::string::String;
                let _227: std::string::String;
                let _245: i64;
                let _257: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _260: state::oracle::OraclePriceData;
                let mut _398: &[&str; 2];
                let mut _399: &[&str; 2];
                scope 39 {
                    debug res => _203;
                }
                scope 40 {
                    debug res => _227;
                }
                scope 41 {
                    debug old_oracle_price => _245;
                    let _267: std::string::String;
                    let _291: error::ErrorCode;
                    let _316: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _319: ();
                    let _320: i64;
                    let _332: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _335: i64;
                    let _337: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _340: i64;
                    let _343: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _346: i64;
                    let mut _397: &[&str; 2];
                    scope 46 {
                        debug res => _267;
                    }
                    scope 47 {
                        debug error_code => _291;
                        let _298: std::string::String;
                        let mut _396: &[&str; 2];
                        scope 48 {
                            debug res => _298;
                        }
                    }
                    scope 49 {
                        debug residual => _316;
                        scope 50 {
                        }
                    }
                    scope 51 {
                        debug val => _319;
                        scope 52 {
                        }
                    }
                    scope 53 {
                        debug oracle_change_divergence => _320;
                        let _359: error::ErrorCode;
                        let _384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _387: ();
                        scope 66 {
                            debug error_code => _359;
                            let _366: std::string::String;
                            let mut _395: &[&str; 2];
                            scope 67 {
                                debug res => _366;
                            }
                        }
                        scope 68 {
                            debug residual => _384;
                            scope 69 {
                            }
                        }
                        scope 70 {
                            debug val => _387;
                            scope 71 {
                            }
                        }
                    }
                    scope 54 {
                        debug residual => _332;
                        scope 55 {
                        }
                    }
                    scope 56 {
                        debug val => _335;
                        scope 57 {
                        }
                    }
                    scope 58 {
                        debug residual => _337;
                        scope 59 {
                        }
                    }
                    scope 60 {
                        debug val => _340;
                        scope 61 {
                        }
                    }
                    scope 62 {
                        debug residual => _343;
                        scope 63 {
                        }
                    }
                    scope 64 {
                        debug val => _346;
                        scope 65 {
                        }
                    }
                }
                scope 42 {
                    debug residual => _257;
                    scope 43 {
                    }
                }
                scope 44 {
                    debug val => _260;
                    scope 45 {
                    }
                }
            }
            scope 35 {
                debug residual => _193;
                scope 36 {
                }
            }
            scope 37 {
                debug val => _196;
                scope 38 {
                }
            }
        }
        scope 12 {
            debug residual => _52;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _55;
            scope 15 {
            }
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _405 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _9 = &((*_405).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _8 = &(*_9);
        _7 = constraints::perp_market_valid(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb179];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _414 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _406 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _20 = &((*_406).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _19 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb182];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _424 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb167;
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _18 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _19, move _21) -> [return: bb8, unwind: bb179];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _18) -> [return: bb9, unwind: bb179];
    }

    bb9: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = move ((_17 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _16 = move _26;
        StorageDead(_26);
        _15 = &mut _16;
        _418 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _404 = const _;
        _37 = &(*_404);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_15);
        _46 = <RefMut<'_, PerpMarket> as Deref>::deref(move _47) -> [return: bb13, unwind: bb178];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind: bb181];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        _416 = discriminant(_17);
        StorageDead(_17);
        goto -> bb166;
    }

    bb13: {
        StorageDead(_47);
        _45 = &((*_46).21: u16);
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _44) -> [return: bb14, unwind: bb178];
    }

    bb14: {
        StorageDead(_44);
        _42 = [move _43];
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb15, unwind: bb178];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb16, unwind: bb178];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb17, unwind: bb177];
    }

    bb17: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb18, unwind: bb177];
    }

    bb18: {
        StorageDead(_28);
        drop(_32) -> [return: bb19, unwind: bb178];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb20, unwind: bb178];
    }

    bb20: {
        _49 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _50) -> [return: bb21, unwind: bb178];
    }

    bb21: {
        StorageDead(_50);
        _51 = discriminant(_49);
        switchInt(move _51) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_55);
        _55 = move ((_49 as Continue).0: anchor_lang::prelude::Clock);
        _48 = move _55;
        StorageDead(_55);
        _420 = discriminant(_49);
        StorageDead(_49);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _407 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _60 = &((*_407).3: anchor_lang::prelude::AccountInfo<'_>);
        _59 = &(*_60);
        _58 = OracleMap::<'_>::validate_oracle_account_info(move _59) -> [return: bb25, unwind: bb178];
    }

    bb23: {
        StorageLive(_52);
        _52 = move ((_49 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_54);
        _54 = move _52;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _54) -> [return: bb24, unwind: bb180];
    }

    bb24: {
        StorageDead(_54);
        StorageDead(_52);
        _422 = discriminant(_49);
        StorageDead(_49);
        goto -> bb165;
    }

    bb25: {
        StorageDead(_59);
        _57 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _58) -> [return: bb26, unwind: bb178];
    }

    bb26: {
        StorageDead(_58);
        _61 = discriminant(_57);
        switchInt(move _61) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_65);
        _65 = ((_57 as Continue).0: ());
        _56 = _65;
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _408 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _70 = &(((*_408).3: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_2;
        _71 = &_72;
        _69 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _70, move _71) -> [return: bb30, unwind: bb178];
    }

    bb28: {
        StorageLive(_62);
        _62 = ((_57 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb29, unwind: bb178];
    }

    bb29: {
        StorageDead(_64);
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        goto -> bb165;
    }

    bb30: {
        switchInt(move _69) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_73);
        _73 = ();
        _68 = std::result::Result::<(), error::ErrorCode>::Ok(move _73);
        StorageDead(_73);
        goto -> bb46;
    }

    bb32: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_74);
        _74 = error::ErrorCode::DefaultError;
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _403 = const _;
        _85 = &(*_403);
        _84 = &(*_85);
        _83 = move _84 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_84);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &_74;
        _92 = &(*_93);
        _91 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _92) -> [return: bb33, unwind: bb178];
    }

    bb33: {
        StorageDead(_92);
        _90 = [move _91];
        StorageDead(_91);
        _89 = &_90;
        _88 = &(*_89);
        _87 = move _88 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_88);
        _82 = Arguments::<'_>::new_v1(move _83, move _87) -> [return: bb34, unwind: bb178];
    }

    bb34: {
        StorageDead(_87);
        StorageDead(_83);
        _81 = format(move _82) -> [return: bb35, unwind: bb178];
    }

    bb35: {
        StorageDead(_82);
        StorageDead(_93);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_85);
        _80 = move _81;
        StorageDead(_81);
        _79 = &_80;
        _78 = &(*_79);
        _77 = <String as Deref>::deref(move _78) -> [return: bb36, unwind: bb176];
    }

    bb36: {
        _76 = &(*_77);
        StorageDead(_78);
        _75 = solana_program::log::sol_log(move _76) -> [return: bb37, unwind: bb176];
    }

    bb37: {
        StorageDead(_76);
        drop(_80) -> [return: bb38, unwind: bb178];
    }

    bb38: {
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_75);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _402 = const _;
        _104 = &(*_402);
        _103 = &(*_104);
        _102 = move _103 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_103);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _409 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _112 = &(((*_409).3: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        _111 = &(*_112);
        _110 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_lang::prelude::Pubkey>(move _111) -> [return: bb39, unwind: bb178];
    }

    bb39: {
        StorageDead(_111);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &_2;
        _114 = &(*_115);
        _113 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _114) -> [return: bb40, unwind: bb178];
    }

    bb40: {
        StorageDead(_114);
        _109 = [move _110, move _113];
        StorageDead(_113);
        StorageDead(_110);
        _108 = &_109;
        _107 = &(*_108);
        _106 = move _107 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_107);
        _101 = Arguments::<'_>::new_v1(move _102, move _106) -> [return: bb41, unwind: bb178];
    }

    bb41: {
        StorageDead(_106);
        StorageDead(_102);
        _100 = format(move _101) -> [return: bb42, unwind: bb178];
    }

    bb42: {
        StorageDead(_101);
        StorageDead(_115);
        StorageDead(_112);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_104);
        _99 = move _100;
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = <String as Deref>::deref(move _97) -> [return: bb43, unwind: bb175];
    }

    bb43: {
        _95 = &(*_96);
        StorageDead(_97);
        _94 = solana_program::log::sol_log(move _95) -> [return: bb44, unwind: bb175];
    }

    bb44: {
        StorageDead(_95);
        drop(_99) -> [return: bb45, unwind: bb178];
    }

    bb45: {
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_94);
        StorageLive(_116);
        _116 = _74;
        _68 = std::result::Result::<(), error::ErrorCode>::Err(move _116);
        StorageDead(_116);
        StorageDead(_74);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_69);
        _67 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _68) -> [return: bb47, unwind: bb178];
    }

    bb47: {
        StorageDead(_68);
        _117 = discriminant(_67);
        switchInt(move _117) -> [0: bb48, 1: bb49, otherwise: bb4];
    }

    bb48: {
        StorageLive(_121);
        _121 = ((_67 as Continue).0: ());
        _66 = _121;
        StorageDead(_121);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _410 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _126 = &(((*_410).4: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_15);
        _129 = <RefMut<'_, PerpMarket> as Deref>::deref(move _130) -> [return: bb51, unwind: bb178];
    }

    bb49: {
        StorageLive(_118);
        _118 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_120);
        _120 = _118;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _120) -> [return: bb50, unwind: bb178];
    }

    bb50: {
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_67);
        StorageDead(_66);
        goto -> bb165;
    }

    bb51: {
        StorageDead(_130);
        _128 = &(((*_129).1: state::perp_market::AMM).0: anchor_lang::prelude::Pubkey);
        _127 = &_128;
        _125 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _126, move _127) -> [return: bb52, unwind: bb178];
    }

    bb52: {
        switchInt(move _125) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_131);
        _131 = ();
        _124 = std::result::Result::<(), error::ErrorCode>::Ok(move _131);
        StorageDead(_131);
        goto -> bb69;
    }

    bb54: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        StorageLive(_132);
        _132 = error::ErrorCode::DefaultError;
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _401 = const _;
        _143 = &(*_401);
        _142 = &(*_143);
        _141 = move _142 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_142);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &_132;
        _150 = &(*_151);
        _149 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _150) -> [return: bb55, unwind: bb178];
    }

    bb55: {
        StorageDead(_150);
        _148 = [move _149];
        StorageDead(_149);
        _147 = &_148;
        _146 = &(*_147);
        _145 = move _146 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_146);
        _140 = Arguments::<'_>::new_v1(move _141, move _145) -> [return: bb56, unwind: bb178];
    }

    bb56: {
        StorageDead(_145);
        StorageDead(_141);
        _139 = format(move _140) -> [return: bb57, unwind: bb178];
    }

    bb57: {
        StorageDead(_140);
        StorageDead(_151);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_143);
        _138 = move _139;
        StorageDead(_139);
        _137 = &_138;
        _136 = &(*_137);
        _135 = <String as Deref>::deref(move _136) -> [return: bb58, unwind: bb174];
    }

    bb58: {
        _134 = &(*_135);
        StorageDead(_136);
        _133 = solana_program::log::sol_log(move _134) -> [return: bb59, unwind: bb174];
    }

    bb59: {
        StorageDead(_134);
        drop(_138) -> [return: bb60, unwind: bb178];
    }

    bb60: {
        StorageDead(_138);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _400 = const _;
        _162 = &(*_400);
        _161 = &(*_162);
        _160 = move _161 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_161);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _411 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _170 = &(((*_411).4: anchor_lang::prelude::AccountInfo<'_>).0: &anchor_lang::prelude::Pubkey);
        _169 = &(*_170);
        _168 = core::fmt::rt::Argument::<'_>::new_debug::<&anchor_lang::prelude::Pubkey>(move _169) -> [return: bb61, unwind: bb178];
    }

    bb61: {
        StorageDead(_169);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_15);
        _174 = <RefMut<'_, PerpMarket> as Deref>::deref(move _175) -> [return: bb62, unwind: bb178];
    }

    bb62: {
        StorageDead(_175);
        _173 = &(((*_174).1: state::perp_market::AMM).0: anchor_lang::prelude::Pubkey);
        _172 = &(*_173);
        _171 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _172) -> [return: bb63, unwind: bb178];
    }

    bb63: {
        StorageDead(_172);
        _167 = [move _168, move _171];
        StorageDead(_171);
        StorageDead(_168);
        _166 = &_167;
        _165 = &(*_166);
        _164 = move _165 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_165);
        _159 = Arguments::<'_>::new_v1(move _160, move _164) -> [return: bb64, unwind: bb178];
    }

    bb64: {
        StorageDead(_164);
        StorageDead(_160);
        _158 = format(move _159) -> [return: bb65, unwind: bb178];
    }

    bb65: {
        StorageDead(_159);
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_170);
        StorageDead(_167);
        StorageDead(_166);
        StorageDead(_162);
        _157 = move _158;
        StorageDead(_158);
        _156 = &_157;
        _155 = &(*_156);
        _154 = <String as Deref>::deref(move _155) -> [return: bb66, unwind: bb173];
    }

    bb66: {
        _153 = &(*_154);
        StorageDead(_155);
        _152 = solana_program::log::sol_log(move _153) -> [return: bb67, unwind: bb173];
    }

    bb67: {
        StorageDead(_153);
        drop(_157) -> [return: bb68, unwind: bb178];
    }

    bb68: {
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_152);
        StorageLive(_176);
        _176 = _132;
        _124 = std::result::Result::<(), error::ErrorCode>::Err(move _176);
        StorageDead(_176);
        StorageDead(_132);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_125);
        _123 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _124) -> [return: bb70, unwind: bb178];
    }

    bb70: {
        StorageDead(_124);
        _177 = discriminant(_123);
        switchInt(move _177) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        StorageLive(_181);
        _181 = ((_123 as Continue).0: ());
        _122 = _181;
        StorageDead(_181);
        StorageDead(_123);
        StorageDead(_122);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_3;
        _187 = &(*_188);
        StorageLive(_189);
        StorageLive(_190);
        _412 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _190 = &((*_412).3: anchor_lang::prelude::AccountInfo<'_>);
        _189 = &(*_190);
        StorageLive(_191);
        _191 = (_48.0: u64);
        _186 = get_oracle_price(move _187, move _189, move _191) -> [return: bb74, unwind: bb178];
    }

    bb72: {
        StorageLive(_178);
        _178 = ((_123 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_180);
        _180 = _178;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _180) -> [return: bb73, unwind: bb178];
    }

    bb73: {
        StorageDead(_180);
        StorageDead(_178);
        StorageDead(_123);
        StorageDead(_122);
        goto -> bb165;
    }

    bb74: {
        StorageDead(_191);
        StorageDead(_189);
        StorageDead(_187);
        _185 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _186) -> [return: bb75, unwind: bb178];
    }

    bb75: {
        StorageDead(_186);
        _192 = discriminant(_185);
        switchInt(move _192) -> [0: bb76, 1: bb77, otherwise: bb4];
    }

    bb76: {
        StorageLive(_196);
        _196 = ((_185 as Continue).0: state::oracle::OraclePriceData);
        _184 = _196;
        StorageDead(_196);
        StorageLive(_182);
        _182 = (_184.0: i64);
        StorageLive(_183);
        _183 = (_184.2: i64);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_184);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _399 = const _;
        _207 = &(*_399);
        _206 = &(*_207);
        _205 = move _206 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_206);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &(*_15);
        _216 = <RefMut<'_, PerpMarket> as Deref>::deref(move _217) -> [return: bb79, unwind: bb178];
    }

    bb77: {
        StorageLive(_193);
        _193 = ((_185 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_195);
        _195 = _193;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _195) -> [return: bb78, unwind: bb178];
    }

    bb78: {
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_185);
        StorageDead(_184);
        goto -> bb165;
    }

    bb79: {
        StorageDead(_217);
        _215 = &(((*_216).1: state::perp_market::AMM).0: anchor_lang::prelude::Pubkey);
        _214 = &(*_215);
        _213 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _214) -> [return: bb80, unwind: bb178];
    }

    bb80: {
        StorageDead(_214);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_2;
        _219 = &(*_220);
        _218 = core::fmt::rt::Argument::<'_>::new_debug::<anchor_lang::prelude::Pubkey>(move _219) -> [return: bb81, unwind: bb178];
    }

    bb81: {
        StorageDead(_219);
        _212 = [move _213, move _218];
        StorageDead(_218);
        StorageDead(_213);
        _211 = &_212;
        _210 = &(*_211);
        _209 = move _210 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_210);
        _204 = Arguments::<'_>::new_v1(move _205, move _209) -> [return: bb82, unwind: bb178];
    }

    bb82: {
        StorageDead(_209);
        StorageDead(_205);
        _203 = format(move _204) -> [return: bb83, unwind: bb178];
    }

    bb83: {
        StorageDead(_204);
        StorageDead(_220);
        StorageDead(_216);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_207);
        _202 = move _203;
        StorageDead(_203);
        _201 = &_202;
        _200 = &(*_201);
        _199 = <String as Deref>::deref(move _200) -> [return: bb84, unwind: bb172];
    }

    bb84: {
        _198 = &(*_199);
        StorageDead(_200);
        _197 = solana_program::log::sol_log(move _198) -> [return: bb85, unwind: bb172];
    }

    bb85: {
        StorageDead(_198);
        drop(_202) -> [return: bb86, unwind: bb178];
    }

    bb86: {
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_199);
        StorageDead(_197);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _398 = const _;
        _231 = &(*_398);
        _230 = &(*_231);
        _229 = move _230 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_230);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = &(*_15);
        _240 = <RefMut<'_, PerpMarket> as Deref>::deref(move _241) -> [return: bb87, unwind: bb178];
    }

    bb87: {
        StorageDead(_241);
        _239 = &(((*_240).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _238 = &(*_239);
        _237 = core::fmt::rt::Argument::<'_>::new_debug::<state::oracle::OracleSource>(move _238) -> [return: bb88, unwind: bb178];
    }

    bb88: {
        StorageDead(_238);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        _244 = &_3;
        _243 = &(*_244);
        _242 = core::fmt::rt::Argument::<'_>::new_debug::<state::oracle::OracleSource>(move _243) -> [return: bb89, unwind: bb178];
    }

    bb89: {
        StorageDead(_243);
        _236 = [move _237, move _242];
        StorageDead(_242);
        StorageDead(_237);
        _235 = &_236;
        _234 = &(*_235);
        _233 = move _234 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_234);
        _228 = Arguments::<'_>::new_v1(move _229, move _233) -> [return: bb90, unwind: bb178];
    }

    bb90: {
        StorageDead(_233);
        StorageDead(_229);
        _227 = format(move _228) -> [return: bb91, unwind: bb178];
    }

    bb91: {
        StorageDead(_228);
        StorageDead(_244);
        StorageDead(_240);
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_231);
        _226 = move _227;
        StorageDead(_227);
        _225 = &_226;
        _224 = &(*_225);
        _223 = <String as Deref>::deref(move _224) -> [return: bb92, unwind: bb171];
    }

    bb92: {
        _222 = &(*_223);
        StorageDead(_224);
        _221 = solana_program::log::sol_log(move _222) -> [return: bb93, unwind: bb171];
    }

    bb93: {
        StorageDead(_222);
        drop(_226) -> [return: bb94, unwind: bb178];
    }

    bb94: {
        StorageDead(_226);
        StorageDead(_225);
        StorageDead(_223);
        StorageDead(_221);
        StorageLive(_246);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        _252 = &(*_15);
        _251 = <RefMut<'_, PerpMarket> as Deref>::deref(move _252) -> [return: bb95, unwind: bb178];
    }

    bb95: {
        StorageDead(_252);
        _250 = &(((*_251).1: state::perp_market::AMM).72: state::oracle::OracleSource);
        _249 = &(*_250);
        StorageLive(_253);
        StorageLive(_254);
        _413 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarketOracle<'_>);
        _254 = &((*_413).4: anchor_lang::prelude::AccountInfo<'_>);
        _253 = &(*_254);
        StorageLive(_255);
        _255 = (_48.0: u64);
        _248 = get_oracle_price(move _249, move _253, move _255) -> [return: bb96, unwind: bb178];
    }

    bb96: {
        StorageDead(_255);
        StorageDead(_253);
        StorageDead(_249);
        _247 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _248) -> [return: bb97, unwind: bb178];
    }

    bb97: {
        StorageDead(_248);
        _256 = discriminant(_247);
        switchInt(move _256) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_260);
        _260 = ((_247 as Continue).0: state::oracle::OraclePriceData);
        _246 = _260;
        StorageDead(_260);
        StorageLive(_245);
        _245 = (_246.0: i64);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_247);
        StorageDead(_246);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        _397 = const _;
        _271 = &(*_397);
        _270 = &(*_271);
        _269 = move _270 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_270);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        _279 = &_245;
        _278 = &(*_279);
        _277 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _278) -> [return: bb101, unwind: bb178];
    }

    bb99: {
        StorageLive(_257);
        _257 = ((_247 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_259);
        _259 = _257;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _259) -> [return: bb100, unwind: bb178];
    }

    bb100: {
        StorageDead(_259);
        StorageDead(_257);
        StorageDead(_254);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_247);
        StorageDead(_246);
        goto -> bb164;
    }

    bb101: {
        StorageDead(_278);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        _282 = &_182;
        _281 = &(*_282);
        _280 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _281) -> [return: bb102, unwind: bb178];
    }

    bb102: {
        StorageDead(_281);
        _276 = [move _277, move _280];
        StorageDead(_280);
        StorageDead(_277);
        _275 = &_276;
        _274 = &(*_275);
        _273 = move _274 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_274);
        _268 = Arguments::<'_>::new_v1(move _269, move _273) -> [return: bb103, unwind: bb178];
    }

    bb103: {
        StorageDead(_273);
        StorageDead(_269);
        _267 = format(move _268) -> [return: bb104, unwind: bb178];
    }

    bb104: {
        StorageDead(_268);
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_271);
        _266 = move _267;
        StorageDead(_267);
        _265 = &_266;
        _264 = &(*_265);
        _263 = <String as Deref>::deref(move _264) -> [return: bb105, unwind: bb170];
    }

    bb105: {
        _262 = &(*_263);
        StorageDead(_264);
        _261 = solana_program::log::sol_log(move _262) -> [return: bb106, unwind: bb170];
    }

    bb106: {
        StorageDead(_262);
        drop(_266) -> [return: bb107, unwind: bb178];
    }

    bb107: {
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_261);
        StorageLive(_283);
        StorageLive(_284);
        _284 = _4;
        switchInt(move _284) -> [0: bb108, otherwise: bb155];
    }

    bb108: {
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        _289 = _182;
        _288 = Gt(move _289, const 0_i64);
        switchInt(move _288) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        StorageDead(_289);
        StorageLive(_290);
        _290 = ();
        _287 = std::result::Result::<(), error::ErrorCode>::Ok(move _290);
        StorageDead(_290);
        goto -> bb118;
    }

    bb110: {
        StorageDead(_289);
        StorageLive(_291);
        _291 = error::ErrorCode::DefaultError;
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _396 = const _;
        _302 = &(*_396);
        _301 = &(*_302);
        _300 = move _301 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_301);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        _310 = &_291;
        _309 = &(*_310);
        _308 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _309) -> [return: bb111, unwind: bb178];
    }

    bb111: {
        StorageDead(_309);
        _307 = [move _308];
        StorageDead(_308);
        _306 = &_307;
        _305 = &(*_306);
        _304 = move _305 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_305);
        _299 = Arguments::<'_>::new_v1(move _300, move _304) -> [return: bb112, unwind: bb178];
    }

    bb112: {
        StorageDead(_304);
        StorageDead(_300);
        _298 = format(move _299) -> [return: bb113, unwind: bb178];
    }

    bb113: {
        StorageDead(_299);
        StorageDead(_310);
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_302);
        _297 = move _298;
        StorageDead(_298);
        _296 = &_297;
        _295 = &(*_296);
        _294 = <String as Deref>::deref(move _295) -> [return: bb114, unwind: bb169];
    }

    bb114: {
        _293 = &(*_294);
        StorageDead(_295);
        _292 = solana_program::log::sol_log(move _293) -> [return: bb115, unwind: bb169];
    }

    bb115: {
        StorageDead(_293);
        drop(_297) -> [return: bb116, unwind: bb178];
    }

    bb116: {
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_294);
        StorageDead(_292);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = const "invalid oracle price, must be greater than 0";
        _312 = &(*_313);
        _311 = solana_program::log::sol_log(move _312) -> [return: bb117, unwind: bb178];
    }

    bb117: {
        StorageDead(_312);
        StorageDead(_313);
        StorageDead(_311);
        StorageLive(_314);
        _314 = _291;
        _287 = std::result::Result::<(), error::ErrorCode>::Err(move _314);
        StorageDead(_314);
        StorageDead(_291);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_288);
        _286 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _287) -> [return: bb119, unwind: bb178];
    }

    bb119: {
        StorageDead(_287);
        _315 = discriminant(_286);
        switchInt(move _315) -> [0: bb120, 1: bb121, otherwise: bb4];
    }

    bb120: {
        StorageLive(_319);
        _319 = ((_286 as Continue).0: ());
        _285 = _319;
        StorageDead(_319);
        StorageDead(_286);
        StorageDead(_285);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        StorageLive(_328);
        StorageLive(_329);
        _329 = _182;
        StorageLive(_330);
        _330 = _245;
        _328 = <i64 as SafeMath>::safe_sub(move _329, move _330) -> [return: bb123, unwind: bb178];
    }

    bb121: {
        StorageLive(_316);
        _316 = ((_286 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_318);
        _318 = _316;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _318) -> [return: bb122, unwind: bb178];
    }

    bb122: {
        StorageDead(_318);
        StorageDead(_316);
        StorageDead(_286);
        StorageDead(_285);
        goto -> bb163;
    }

    bb123: {
        StorageDead(_330);
        StorageDead(_329);
        _327 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _328) -> [return: bb124, unwind: bb178];
    }

    bb124: {
        StorageDead(_328);
        _331 = discriminant(_327);
        switchInt(move _331) -> [0: bb125, 1: bb126, otherwise: bb4];
    }

    bb125: {
        StorageLive(_335);
        _335 = ((_327 as Continue).0: i64);
        _326 = _335;
        StorageDead(_335);
        _325 = <i64 as SafeMath>::safe_mul(move _326, const _) -> [return: bb128, unwind: bb178];
    }

    bb126: {
        StorageLive(_332);
        _332 = ((_327 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_334);
        _334 = _332;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _334) -> [return: bb127, unwind: bb178];
    }

    bb127: {
        StorageDead(_334);
        StorageDead(_332);
        StorageDead(_326);
        StorageDead(_325);
        goto -> bb160;
    }

    bb128: {
        StorageDead(_326);
        _324 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _325) -> [return: bb129, unwind: bb178];
    }

    bb129: {
        StorageDead(_325);
        _336 = discriminant(_324);
        switchInt(move _336) -> [0: bb130, 1: bb131, otherwise: bb4];
    }

    bb130: {
        StorageLive(_340);
        _340 = ((_324 as Continue).0: i64);
        _323 = _340;
        StorageDead(_340);
        StorageLive(_341);
        _341 = _245;
        _322 = <i64 as SafeMath>::safe_div(move _323, move _341) -> [return: bb133, unwind: bb178];
    }

    bb131: {
        StorageLive(_337);
        _337 = ((_324 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_339);
        _339 = _337;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _339) -> [return: bb132, unwind: bb178];
    }

    bb132: {
        StorageDead(_339);
        StorageDead(_337);
        goto -> bb160;
    }

    bb133: {
        StorageDead(_341);
        StorageDead(_323);
        _321 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _322) -> [return: bb134, unwind: bb178];
    }

    bb134: {
        StorageDead(_322);
        _342 = discriminant(_321);
        switchInt(move _342) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        StorageLive(_346);
        _346 = ((_321 as Continue).0: i64);
        _320 = _346;
        StorageDead(_346);
        StorageDead(_327);
        StorageDead(_324);
        StorageDead(_321);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        _352 = _320;
        _351 = core::num::<impl i64>::abs(move _352) -> [return: bb138, unwind: bb178];
    }

    bb136: {
        StorageLive(_343);
        _343 = ((_321 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_345);
        _345 = _343;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _345) -> [return: bb137, unwind: bb178];
    }

    bb137: {
        StorageDead(_345);
        StorageDead(_343);
        goto -> bb161;
    }

    bb138: {
        StorageDead(_352);
        StorageLive(_353);
        _354 = Eq(const 10_i64, const 0_i64);
        assert(!move _354, "attempt to divide `{}` by zero", const _) -> [success: bb139, unwind: bb178];
    }

    bb139: {
        _355 = Eq(const 10_i64, const -1_i64);
        _356 = Eq(const _, const i64::MIN);
        _357 = BitAnd(move _355, move _356);
        assert(!move _357, "attempt to compute `{} / {}`, which would overflow", const _, const 10_i64) -> [success: bb140, unwind: bb178];
    }

    bb140: {
        _353 = Div(const _, const 10_i64);
        _350 = Lt(move _351, move _353);
        switchInt(move _350) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        StorageDead(_353);
        StorageDead(_351);
        StorageLive(_358);
        _358 = ();
        _349 = std::result::Result::<(), error::ErrorCode>::Ok(move _358);
        StorageDead(_358);
        goto -> bb150;
    }

    bb142: {
        StorageDead(_353);
        StorageDead(_351);
        StorageLive(_359);
        _359 = error::ErrorCode::DefaultError;
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _395 = const _;
        _370 = &(*_395);
        _369 = &(*_370);
        _368 = move _369 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_369);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        _378 = &_359;
        _377 = &(*_378);
        _376 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _377) -> [return: bb143, unwind: bb178];
    }

    bb143: {
        StorageDead(_377);
        _375 = [move _376];
        StorageDead(_376);
        _374 = &_375;
        _373 = &(*_374);
        _372 = move _373 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_373);
        _367 = Arguments::<'_>::new_v1(move _368, move _372) -> [return: bb144, unwind: bb178];
    }

    bb144: {
        StorageDead(_372);
        StorageDead(_368);
        _366 = format(move _367) -> [return: bb145, unwind: bb178];
    }

    bb145: {
        StorageDead(_367);
        StorageDead(_378);
        StorageDead(_375);
        StorageDead(_374);
        StorageDead(_370);
        _365 = move _366;
        StorageDead(_366);
        _364 = &_365;
        _363 = &(*_364);
        _362 = <String as Deref>::deref(move _363) -> [return: bb146, unwind: bb168];
    }

    bb146: {
        _361 = &(*_362);
        StorageDead(_363);
        _360 = solana_program::log::sol_log(move _361) -> [return: bb147, unwind: bb168];
    }

    bb147: {
        StorageDead(_361);
        drop(_365) -> [return: bb148, unwind: bb178];
    }

    bb148: {
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_362);
        StorageDead(_360);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = const "invalid new oracle price, more than 10% divergence";
        _380 = &(*_381);
        _379 = solana_program::log::sol_log(move _380) -> [return: bb149, unwind: bb178];
    }

    bb149: {
        StorageDead(_380);
        StorageDead(_381);
        StorageDead(_379);
        StorageLive(_382);
        _382 = _359;
        _349 = std::result::Result::<(), error::ErrorCode>::Err(move _382);
        StorageDead(_382);
        StorageDead(_359);
        goto -> bb150;
    }

    bb150: {
        StorageDead(_350);
        _348 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _349) -> [return: bb151, unwind: bb178];
    }

    bb151: {
        StorageDead(_349);
        _383 = discriminant(_348);
        switchInt(move _383) -> [0: bb152, 1: bb153, otherwise: bb4];
    }

    bb152: {
        StorageLive(_387);
        _387 = ((_348 as Continue).0: ());
        _347 = _387;
        StorageDead(_387);
        StorageDead(_348);
        StorageDead(_347);
        _283 = const ();
        StorageDead(_320);
        goto -> bb156;
    }

    bb153: {
        StorageLive(_384);
        _384 = ((_348 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_386);
        _386 = _384;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _386) -> [return: bb154, unwind: bb178];
    }

    bb154: {
        StorageDead(_386);
        StorageDead(_384);
        StorageDead(_348);
        StorageDead(_347);
        goto -> bb162;
    }

    bb155: {
        _283 = const ();
        goto -> bb156;
    }

    bb156: {
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_388);
        _388 = _2;
        StorageLive(_389);
        StorageLive(_390);
        _390 = &mut (*_15);
        _389 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _390) -> [return: bb157, unwind: bb178];
    }

    bb157: {
        StorageDead(_390);
        (((*_389).1: state::perp_market::AMM).0: anchor_lang::prelude::Pubkey) = move _388;
        StorageDead(_388);
        StorageDead(_389);
        StorageLive(_391);
        _391 = _3;
        StorageLive(_392);
        StorageLive(_393);
        _393 = &mut (*_15);
        _392 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _393) -> [return: bb158, unwind: bb178];
    }

    bb158: {
        StorageDead(_393);
        (((*_392).1: state::perp_market::AMM).72: state::oracle::OracleSource) = move _391;
        StorageDead(_391);
        StorageDead(_392);
        StorageLive(_394);
        _394 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _394);
        StorageDead(_394);
        StorageDead(_245);
        StorageDead(_183);
        StorageDead(_182);
        StorageDead(_48);
        drop(_16) -> [return: bb159, unwind: bb179];
    }

    bb159: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb167;
    }

    bb160: {
        StorageDead(_323);
        StorageDead(_322);
        goto -> bb161;
    }

    bb161: {
        StorageDead(_327);
        StorageDead(_324);
        StorageDead(_321);
        goto -> bb162;
    }

    bb162: {
        StorageDead(_320);
        goto -> bb163;
    }

    bb163: {
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_245);
        goto -> bb164;
    }

    bb164: {
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb165;
    }

    bb165: {
        StorageDead(_48);
        drop(_16) -> [return: bb166, unwind: bb179];
    }

    bb166: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb167;
    }

    bb167: {
        return;
    }

    bb168 (cleanup): {
        drop(_365) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb169 (cleanup): {
        drop(_297) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb170 (cleanup): {
        drop(_266) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb171 (cleanup): {
        drop(_226) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb172 (cleanup): {
        drop(_202) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb173 (cleanup): {
        drop(_157) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb174 (cleanup): {
        drop(_138) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb175 (cleanup): {
        drop(_99) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb176 (cleanup): {
        drop(_80) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb177 (cleanup): {
        drop(_32) -> [return: bb178, unwind terminate(cleanup)];
    }

    bb178 (cleanup): {
        drop(_16) -> [return: bb179, unwind terminate(cleanup)];
    }

    bb179 (cleanup): {
        resume;
    }

    bb180 (cleanup): {
        _426 = discriminant(_49);
        goto -> bb178;
    }

    bb181 (cleanup): {
        _427 = discriminant(_17);
        goto -> bb179;
    }

    bb182 (cleanup): {
        _428 = discriminant(_6);
        goto -> bb179;
    }
}
