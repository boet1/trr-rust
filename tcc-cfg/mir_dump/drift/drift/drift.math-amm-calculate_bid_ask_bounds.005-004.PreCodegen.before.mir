// MIR for `calculate_bid_ask_bounds` before PreCodegen

fn calculate_bid_ask_bounds(_1: u128, _2: u128) -> std::result::Result<(u128, u128), error::ErrorCode> {
    debug concentration_coef => _1;
    debug sqrt_k => _2;
    let mut _0: std::result::Result<(u128, u128), error::ErrorCode>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _5: std::result::Result<(), error::ErrorCode>;
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: ();
    let _9: error::ErrorCode;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &error::ErrorCode;
    let _28: &error::ErrorCode;
    let _29: ();
    let mut _30: &str;
    let _31: &str;
    let mut _32: &std::string::String;
    let _33: &std::string::String;
    let _34: std::string::String;
    let mut _36: std::fmt::Arguments<'_>;
    let mut _37: &[&str];
    let mut _38: &[&str; 2];
    let _39: &[&str; 2];
    let _40: [&str; 2];
    let mut _41: &[core::fmt::rt::Argument<'_>];
    let mut _42: &[core::fmt::rt::Argument<'_>; 2];
    let _43: &[core::fmt::rt::Argument<'_>; 2];
    let _44: [core::fmt::rt::Argument<'_>; 2];
    let mut _45: core::fmt::rt::Argument<'_>;
    let mut _46: &u128;
    let _47: &u128;
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &u128;
    let _50: &u128;
    let _51: u128;
    let mut _52: error::ErrorCode;
    let mut _53: isize;
    let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: ();
    let _58: u128;
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _60: std::result::Result<u128, error::ErrorCode>;
    let mut _61: u128;
    let mut _62: u128;
    let mut _63: isize;
    let _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: !;
    let mut _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _67: u128;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _70: std::result::Result<u128, error::ErrorCode>;
    let mut _71: u128;
    let mut _72: u128;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _78: (u128, u128);
    let mut _79: u128;
    let mut _80: u128;
    scope 1 {
        debug error_code => _9;
        let _16: std::string::String;
        let _35: std::string::String;
        let mut _81: &u128;
        let mut _82: &[&str; 2];
        let mut _83: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
        scope 3 {
            debug res => _35;
        }
    }
    scope 4 {
        debug residual => _54;
        scope 5 {
        }
    }
    scope 6 {
        debug val => _57;
        scope 7 {
        }
    }
    scope 8 {
        debug ask_bounded_base => _58;
        let _68: u128;
        let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _77: u128;
        scope 13 {
            debug bid_bounded_base => _68;
        }
        scope 14 {
            debug residual => _74;
            scope 15 {
            }
        }
        scope 16 {
            debug val => _77;
            scope 17 {
            }
        }
    }
    scope 9 {
        debug residual => _64;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _67;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = _1;
        _6 = Gt(move _7, const _);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        _8 = ();
        _5 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        goto -> bb16;
    }

    bb2: {
        StorageDead(_7);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidConcentrationCoef;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _83 = const _;
        _20 = &(*_83);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_9;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _27) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb6, unwind: bb35];
    }

    bb6: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb7, unwind: bb35];
    }

    bb7: {
        StorageDead(_11);
        drop(_15) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _82 = const _;
        _39 = &(*_82);
        _38 = &(*_39);
        _37 = move _38 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &_1;
        _46 = &(*_47);
        _45 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _46) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_46);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _81 = const _;
        _50 = &(*_81);
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _49) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_49);
        _44 = [move _45, move _48];
        StorageDead(_48);
        StorageDead(_45);
        _43 = &_44;
        _42 = &(*_43);
        _41 = move _42 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_42);
        _36 = Arguments::<'_>::new_v1(move _37, move _41) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_41);
        StorageDead(_37);
        _35 = format(move _36) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_36);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        _34 = move _35;
        StorageDead(_35);
        _33 = &_34;
        _32 = &(*_33);
        _31 = <String as Deref>::deref(move _32) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        _30 = &(*_31);
        StorageDead(_32);
        _29 = solana_program::log::sol_log(move _30) -> [return: bb14, unwind: bb34];
    }

    bb14: {
        StorageDead(_30);
        drop(_34) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        StorageDead(_34);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageLive(_52);
        _52 = _9;
        _5 = std::result::Result::<(), error::ErrorCode>::Err(move _52);
        StorageDead(_52);
        StorageDead(_9);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_6);
        _4 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _5) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_5);
        _53 = discriminant(_4);
        switchInt(move _53) -> [0: bb18, 1: bb20, otherwise: bb19];
    }

    bb18: {
        StorageLive(_57);
        _57 = ((_4 as Continue).0: ());
        _3 = _57;
        StorageDead(_57);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _61 = _2;
        StorageLive(_62);
        _62 = _1;
        _60 = get_proportion_u128(move _61, move _62, const _) -> [return: bb22, unwind continue];
    }

    bb19: {
        unreachable;
    }

    bb20: {
        StorageLive(_54);
        _54 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb33;
    }

    bb22: {
        StorageDead(_62);
        StorageDead(_61);
        _59 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _60) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_60);
        _63 = discriminant(_59);
        switchInt(move _63) -> [0: bb24, 1: bb25, otherwise: bb19];
    }

    bb24: {
        StorageLive(_67);
        _67 = ((_59 as Continue).0: u128);
        _58 = _67;
        StorageDead(_67);
        StorageDead(_59);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _2;
        StorageLive(_72);
        _72 = _1;
        _70 = get_proportion_u128(move _71, const _, move _72) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_64);
        _64 = ((_59 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_66);
        _66 = _64;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _66) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_59);
        goto -> bb32;
    }

    bb27: {
        StorageDead(_72);
        StorageDead(_71);
        _69 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _70) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_70);
        _73 = discriminant(_69);
        switchInt(move _73) -> [0: bb29, 1: bb30, otherwise: bb19];
    }

    bb29: {
        StorageLive(_77);
        _77 = ((_69 as Continue).0: u128);
        _68 = _77;
        StorageDead(_77);
        StorageDead(_69);
        StorageLive(_78);
        StorageLive(_79);
        _79 = _68;
        StorageLive(_80);
        _80 = _58;
        _78 = (move _79, move _80);
        StorageDead(_80);
        StorageDead(_79);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _78);
        StorageDead(_78);
        StorageDead(_68);
        StorageDead(_58);
        goto -> bb33;
    }

    bb30: {
        StorageLive(_74);
        _74 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_69);
        StorageDead(_68);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_58);
        goto -> bb33;
    }

    bb33: {
        return;
    }

    bb34 (cleanup): {
        drop(_34) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb35 (cleanup): {
        drop(_15) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        resume;
    }
}
