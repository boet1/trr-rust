// MIR for `calculate_spread_reserves` before PreCodegen

fn calculate_spread_reserves(_1: &PerpMarket, _2: controller::position::PositionDirection) -> std::result::Result<(u128, u128), error::ErrorCode> {
    debug market => _1;
    debug direction => _2;
    let mut _0: std::result::Result<(u128, u128), error::ErrorCode>;
    let _3: u32;
    let mut _4: isize;
    let mut _6: bool;
    let mut _7: &controller::position::PositionDirection;
    let mut _8: &controller::position::PositionDirection;
    let _9: controller::position::PositionDirection;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _11: std::result::Result<i32, error::ErrorCode>;
    let mut _12: i32;
    let mut _13: i32;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _15: std::result::Result<i32, error::ErrorCode>;
    let mut _16: u32;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _30: std::result::Result<i32, error::ErrorCode>;
    let mut _31: i32;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _33: std::result::Result<i32, error::ErrorCode>;
    let mut _34: u32;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: i32;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let mut _51: i128;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _53: std::result::Result<i128, error::ErrorCode>;
    let mut _54: i32;
    let mut _55: i32;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _70: std::result::Result<i128, error::ErrorCode>;
    let mut _71: i128;
    let mut _72: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _73: std::result::Result<i128, error::ErrorCode>;
    let mut _74: u128;
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _80: i128;
    let mut _81: isize;
    let mut _83: !;
    let mut _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: bool;
    let mut _88: i128;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _90: std::result::Result<u128, error::ErrorCode>;
    let mut _91: u128;
    let mut _92: u128;
    let mut _93: i128;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _100: std::result::Result<u128, error::ErrorCode>;
    let mut _101: u128;
    let mut _102: u128;
    let mut _103: i128;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _109: ();
    let mut _110: bool;
    let mut _111: &state::perp_market::ContractType;
    let mut _112: &state::perp_market::ContractType;
    let _113: state::perp_market::ContractType;
    let mut _116: (u128, u128);
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _118: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _119: &state::perp_market::PerpMarket;
    let mut _120: controller::position::PositionDirection;
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _126: u128;
    let mut _127: u128;
    let mut _128: u128;
    let mut _129: u128;
    let mut _131: u128;
    let mut _133: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _134: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _135: math::bn::U192;
    let mut _136: math::bn::U192;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _144: std::result::Result<u128, error::ErrorCode>;
    let mut _145: math::bn::U192;
    let mut _146: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _147: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _148: math::bn::U192;
    let mut _149: math::bn::U192;
    let mut _150: u128;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _161: (u128, u128);
    let mut _162: u128;
    let mut _163: u128;
    scope 1 {
        debug spread => _3;
        let _5: i32;
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: i32;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: i32;
        let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _39: i32;
        let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _45: i32;
        let mut _165: &controller::position::PositionDirection;
        scope 2 {
            debug spread_with_offset => _5;
            let _46: i128;
            let _50: i128;
            let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _64: i128;
            scope 19 {
                debug quote_asset_reserve_delta => _46;
                let mut _86: u128;
                let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _98: u128;
                let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _108: u128;
                scope 33 {
                    debug quote_asset_reserve => _86;
                    let _114: u128;
                    let _115: u128;
                    let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _125: (u128, u128);
                    let _130: math::bn::U192;
                    let mut _164: &state::perp_market::ContractType;
                    scope 42 {
                        debug quote_asset_reserve_lower_bound => _114;
                        debug quote_asset_reserve_upper_bound => _115;
                    }
                    scope 43 {
                        debug residual => _122;
                        scope 44 {
                        }
                    }
                    scope 45 {
                        debug val => _125;
                        scope 46 {
                        }
                    }
                    scope 47 {
                        debug invariant_sqrt_u192 => _130;
                        let _132: math::bn::U192;
                        let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _141: math::bn::U192;
                        scope 48 {
                            debug invariant => _132;
                            let _142: u128;
                            let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _155: math::bn::U192;
                            let _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _160: u128;
                            scope 53 {
                                debug base_asset_reserve => _142;
                            }
                            scope 54 {
                                debug residual => _152;
                                scope 55 {
                                }
                            }
                            scope 56 {
                                debug val => _155;
                                scope 57 {
                                }
                            }
                            scope 58 {
                                debug residual => _157;
                                scope 59 {
                                }
                            }
                            scope 60 {
                                debug val => _160;
                                scope 61 {
                                }
                            }
                        }
                        scope 49 {
                            debug residual => _138;
                            scope 50 {
                            }
                        }
                        scope 51 {
                            debug val => _141;
                            scope 52 {
                            }
                        }
                    }
                }
                scope 34 {
                    debug residual => _95;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug val => _98;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug residual => _105;
                    scope 39 {
                    }
                }
                scope 40 {
                    debug val => _108;
                    scope 41 {
                    }
                }
            }
            scope 20 {
                debug quote_reserve_divisor => _50;
                let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _79: i128;
                let _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _85: i128;
                scope 25 {
                    debug residual => _76;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _79;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug residual => _82;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _85;
                    scope 32 {
                    }
                }
            }
            scope 21 {
                debug residual => _61;
                scope 22 {
                }
            }
            scope 23 {
                debug val => _64;
                scope 24 {
                }
            }
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _25;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _28;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _36;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _39;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _42;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _45;
            scope 18 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = (((*_1).1: state::perp_market::AMM).66: u32);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = (((*_1).1: state::perp_market::AMM).65: u32);
        goto -> bb4;
    }

    bb4: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_2;
        StorageLive(_8);
        _165 = const _;
        _8 = &(*_165);
        _6 = <controller::position::PositionDirection as PartialEq>::eq(move _7, move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _6) -> [0: bb18, otherwise: bb6];
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = _3;
        _15 = <u32 as Cast>::cast::<i32>(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        _14 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb2];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: i32);
        _13 = _21;
        StorageDead(_21);
        _22 = Eq(_13, const i32::MIN);
        assert(!move _22, "attempt to negate `{}`, which would overflow", _13) -> [success: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb103;
    }

    bb12: {
        _12 = Neg(move _13);
        StorageDead(_13);
        StorageLive(_23);
        _23 = (((*_1).1: state::perp_market::AMM).82: i32);
        _11 = <i32 as SafeMath>::safe_add(move _12, move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_12);
        _10 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _11) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_11);
        _24 = discriminant(_10);
        switchInt(move _24) -> [0: bb15, 1: bb16, otherwise: bb2];
    }

    bb15: {
        StorageLive(_28);
        _28 = ((_10 as Continue).0: i32);
        _5 = _28;
        StorageDead(_28);
        StorageDead(_14);
        StorageDead(_10);
        goto -> bb29;
    }

    bb16: {
        StorageLive(_25);
        _25 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_27);
        StorageDead(_25);
        goto -> bb103;
    }

    bb18: {
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _3;
        _33 = <u32 as Cast>::cast::<i32>(move _34) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_34);
        _32 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _33) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_33);
        _35 = discriminant(_32);
        switchInt(move _35) -> [0: bb21, 1: bb22, otherwise: bb2];
    }

    bb21: {
        StorageLive(_39);
        _39 = ((_32 as Continue).0: i32);
        _31 = _39;
        StorageDead(_39);
        StorageLive(_40);
        _40 = (((*_1).1: state::perp_market::AMM).82: i32);
        _30 = <i32 as SafeMath>::safe_add(move _31, move _40) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_36);
        _36 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb102;
    }

    bb24: {
        StorageDead(_40);
        StorageDead(_31);
        _29 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _30) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_30);
        _41 = discriminant(_29);
        switchInt(move _41) -> [0: bb26, 1: bb27, otherwise: bb2];
    }

    bb26: {
        StorageLive(_45);
        _45 = ((_29 as Continue).0: i32);
        _5 = _45;
        StorageDead(_45);
        StorageDead(_32);
        StorageDead(_29);
        goto -> bb29;
    }

    bb27: {
        StorageLive(_42);
        _42 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_44);
        StorageDead(_42);
        goto -> bb102;
    }

    bb29: {
        StorageDead(_6);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _5;
        _48 = core::num::<impl i32>::abs(move _49) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_49);
        _47 = Gt(move _48, const 1_i32);
        switchInt(move _47) -> [0: bb51, otherwise: bb31];
    }

    bb31: {
        StorageDead(_48);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _5;
        _56 = Eq(const 2_i32, const 0_i32);
        assert(!move _56, "attempt to divide `{}` by zero", _55) -> [success: bb32, unwind continue];
    }

    bb32: {
        _57 = Eq(const 2_i32, const -1_i32);
        _58 = Eq(_55, const i32::MIN);
        _59 = BitAnd(move _57, move _58);
        assert(!move _59, "attempt to compute `{} / {}`, which would overflow", _55, const 2_i32) -> [success: bb33, unwind continue];
    }

    bb33: {
        _54 = Div(move _55, const 2_i32);
        StorageDead(_55);
        _53 = <i32 as Cast>::cast::<i128>(move _54) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_54);
        _52 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _53) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_53);
        _60 = discriminant(_52);
        switchInt(move _60) -> [0: bb36, 1: bb37, otherwise: bb2];
    }

    bb36: {
        StorageLive(_64);
        _64 = ((_52 as Continue).0: i128);
        _51 = _64;
        StorageDead(_64);
        _65 = Eq(_51, const 0_i128);
        assert(!move _65, "attempt to divide `{}` by zero", const _) -> [success: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_61);
        _61 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_51);
        StorageDead(_52);
        StorageDead(_50);
        goto -> bb100;
    }

    bb39: {
        _66 = Eq(_51, const -1_i128);
        _67 = Eq(const _, const i128::MIN);
        _68 = BitAnd(move _66, move _67);
        assert(!move _68, "attempt to compute `{} / {}`, which would overflow", const _, _51) -> [success: bb40, unwind continue];
    }

    bb40: {
        _50 = Div(const _, move _51);
        StorageDead(_51);
        StorageDead(_52);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        _74 = (((*_1).1: state::perp_market::AMM).6: u128);
        _73 = <u128 as Cast>::cast::<i128>(move _74) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_74);
        _72 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _73) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_73);
        _75 = discriminant(_72);
        switchInt(move _75) -> [0: bb43, 1: bb44, otherwise: bb2];
    }

    bb43: {
        StorageLive(_79);
        _79 = ((_72 as Continue).0: i128);
        _71 = _79;
        StorageDead(_79);
        StorageLive(_80);
        _80 = _50;
        _70 = <i128 as SafeMath>::safe_div(move _71, move _80) -> [return: bb46, unwind continue];
    }

    bb44: {
        StorageLive(_76);
        _76 = ((_72 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb99;
    }

    bb46: {
        StorageDead(_80);
        StorageDead(_71);
        _69 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _70) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_70);
        _81 = discriminant(_69);
        switchInt(move _81) -> [0: bb48, 1: bb49, otherwise: bb2];
    }

    bb48: {
        StorageLive(_85);
        _85 = ((_69 as Continue).0: i128);
        _46 = _85;
        StorageDead(_85);
        StorageDead(_50);
        StorageDead(_72);
        StorageDead(_69);
        goto -> bb52;
    }

    bb49: {
        StorageLive(_82);
        _82 = ((_69 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_84);
        _84 = _82;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _84) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_84);
        StorageDead(_82);
        goto -> bb99;
    }

    bb51: {
        StorageDead(_48);
        _46 = const 0_i128;
        goto -> bb52;
    }

    bb52: {
        StorageDead(_47);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _46;
        _87 = Gt(move _88, const 0_i128);
        switchInt(move _87) -> [0: bb60, otherwise: bb53];
    }

    bb53: {
        StorageDead(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = (((*_1).1: state::perp_market::AMM).6: u128);
        StorageLive(_92);
        StorageLive(_93);
        _93 = _46;
        _92 = core::num::<impl i128>::unsigned_abs(move _93) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_93);
        _90 = <u128 as SafeMath>::safe_add(move _91, move _92) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_92);
        StorageDead(_91);
        _89 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _90) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_90);
        _94 = discriminant(_89);
        switchInt(move _94) -> [0: bb57, 1: bb58, otherwise: bb2];
    }

    bb57: {
        StorageLive(_98);
        _98 = ((_89 as Continue).0: u128);
        _86 = _98;
        StorageDead(_98);
        StorageDead(_89);
        goto -> bb67;
    }

    bb58: {
        StorageLive(_95);
        _95 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_89);
        goto -> bb97;
    }

    bb60: {
        StorageDead(_88);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = (((*_1).1: state::perp_market::AMM).6: u128);
        StorageLive(_102);
        StorageLive(_103);
        _103 = _46;
        _102 = core::num::<impl i128>::unsigned_abs(move _103) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_103);
        _100 = <u128 as SafeMath>::safe_sub(move _101, move _102) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _100) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_100);
        _104 = discriminant(_99);
        switchInt(move _104) -> [0: bb64, 1: bb65, otherwise: bb2];
    }

    bb64: {
        StorageLive(_108);
        _108 = ((_99 as Continue).0: u128);
        _86 = _108;
        StorageDead(_108);
        StorageDead(_99);
        goto -> bb67;
    }

    bb65: {
        StorageLive(_105);
        _105 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_99);
        goto -> bb97;
    }

    bb67: {
        StorageDead(_87);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _111 = &((*_1).23: state::perp_market::ContractType);
        StorageLive(_112);
        _164 = const _;
        _112 = &(*_164);
        _110 = <ContractType as PartialEq>::eq(move _111, move _112) -> [return: bb68, unwind continue];
    }

    bb68: {
        switchInt(move _110) -> [0: bb76, otherwise: bb69];
    }

    bb69: {
        StorageDead(_112);
        StorageDead(_111);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &(*_1);
        StorageLive(_120);
        _120 = _2;
        _118 = PerpMarket::get_quote_asset_reserve_prediction_market_bounds(move _119, move _120) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_120);
        StorageDead(_119);
        _117 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _118) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_118);
        _121 = discriminant(_117);
        switchInt(move _121) -> [0: bb72, 1: bb73, otherwise: bb2];
    }

    bb72: {
        StorageLive(_125);
        _125 = ((_117 as Continue).0: (u128, u128));
        _116 = _125;
        StorageDead(_125);
        StorageLive(_114);
        _114 = (_116.0: u128);
        StorageLive(_115);
        _115 = (_116.1: u128);
        StorageDead(_117);
        StorageDead(_116);
        StorageLive(_126);
        StorageLive(_127);
        _127 = _86;
        StorageLive(_128);
        _128 = _114;
        StorageLive(_129);
        _129 = _115;
        _126 = <u128 as Ord>::clamp(move _127, move _128, move _129) -> [return: bb75, unwind continue];
    }

    bb73: {
        StorageLive(_122);
        _122 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb98;
    }

    bb75: {
        StorageDead(_129);
        StorageDead(_128);
        StorageDead(_127);
        _86 = move _126;
        StorageDead(_126);
        _109 = const ();
        StorageDead(_115);
        StorageDead(_114);
        goto -> bb77;
    }

    bb76: {
        StorageDead(_112);
        StorageDead(_111);
        _109 = const ();
        goto -> bb77;
    }

    bb77: {
        StorageDead(_110);
        StorageDead(_109);
        StorageLive(_130);
        StorageLive(_131);
        _131 = (((*_1).1: state::perp_market::AMM).10: u128);
        _130 = <U192 as From<u128>>::from(move _131) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = _130;
        StorageLive(_136);
        _136 = _130;
        _134 = <U192 as SafeMath>::safe_mul(move _135, move _136) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_136);
        StorageDead(_135);
        _133 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _134) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_134);
        _137 = discriminant(_133);
        switchInt(move _137) -> [0: bb81, 1: bb82, otherwise: bb2];
    }

    bb81: {
        StorageLive(_141);
        _141 = ((_133 as Continue).0: math::bn::U192);
        _132 = _141;
        StorageDead(_141);
        StorageDead(_133);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        _148 = _132;
        StorageLive(_149);
        StorageLive(_150);
        _150 = _86;
        _149 = <U192 as From<u128>>::from(move _150) -> [return: bb84, unwind continue];
    }

    bb82: {
        StorageLive(_138);
        _138 = ((_133 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_140);
        StorageDead(_138);
        StorageDead(_133);
        goto -> bb96;
    }

    bb84: {
        StorageDead(_150);
        _147 = <U192 as SafeMath>::safe_div(move _148, move _149) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_149);
        StorageDead(_148);
        _146 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _147) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_147);
        _151 = discriminant(_146);
        switchInt(move _151) -> [0: bb87, 1: bb88, otherwise: bb2];
    }

    bb87: {
        StorageLive(_155);
        _155 = ((_146 as Continue).0: math::bn::U192);
        _145 = _155;
        StorageDead(_155);
        _144 = U192::try_to_u128(move _145) -> [return: bb90, unwind continue];
    }

    bb88: {
        StorageLive(_152);
        _152 = ((_146 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb95;
    }

    bb90: {
        StorageDead(_145);
        _143 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _144) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_144);
        _156 = discriminant(_143);
        switchInt(move _156) -> [0: bb92, 1: bb93, otherwise: bb2];
    }

    bb92: {
        StorageLive(_160);
        _160 = ((_143 as Continue).0: u128);
        _142 = _160;
        StorageDead(_160);
        StorageDead(_146);
        StorageDead(_143);
        StorageLive(_161);
        StorageLive(_162);
        _162 = _142;
        StorageLive(_163);
        _163 = _86;
        _161 = (move _162, move _163);
        StorageDead(_163);
        StorageDead(_162);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _161);
        StorageDead(_161);
        StorageDead(_142);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_86);
        StorageDead(_46);
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb106;
    }

    bb93: {
        StorageLive(_157);
        _157 = ((_143 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_159);
        _159 = _157;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _159) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_159);
        StorageDead(_157);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_132);
        StorageDead(_130);
        goto -> bb98;
    }

    bb97: {
        StorageDead(_87);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_86);
        goto -> bb101;
    }

    bb99: {
        StorageDead(_50);
        StorageDead(_72);
        StorageDead(_69);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_47);
        goto -> bb101;
    }

    bb101: {
        StorageDead(_46);
        goto -> bb105;
    }

    bb102: {
        StorageDead(_32);
        StorageDead(_29);
        goto -> bb104;
    }

    bb103: {
        StorageDead(_14);
        StorageDead(_10);
        goto -> bb104;
    }

    bb104: {
        StorageDead(_6);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_5);
        StorageDead(_3);
        goto -> bb106;
    }

    bb106: {
        return;
    }
}
