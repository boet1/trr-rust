// MIR for `instructions::user::handle_initialize_signed_msg_user_orders` before PreCodegen

fn instructions::user::handle_initialize_signed_msg_user_orders(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::InitializeSignedMsgUserOrders<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug num_orders => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _4: anchor_lang::prelude::Pubkey;
    let mut _5: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _6: &mut state::signed_msg_user::SignedMsgUserOrders;
    let mut _7: &mut anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let _8: ();
    let mut _9: &mut std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>;
    let mut _10: &mut state::signed_msg_user::SignedMsgUserOrders;
    let mut _11: &mut anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _12: usize;
    let mut _13: u16;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: &state::signed_msg_user::SignedMsgUserOrders;
    let _18: &state::signed_msg_user::SignedMsgUserOrders;
    let mut _19: &anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: ();
    let mut _26: &mut instructions::user::InitializeSignedMsgUserOrders<'_>;
    let mut _27: &mut instructions::user::InitializeSignedMsgUserOrders<'_>;
    let mut _28: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _29: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _30: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>;
    let mut _31: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _32: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    let mut _33: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>;
    scope 1 {
        debug signed_msg_user_orders => _3;
        let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _24: ();
        scope 2 {
            debug residual => _21;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _24;
            scope 5 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _26 = deref_copy (_1.1: &mut instructions::user::InitializeSignedMsgUserOrders<'_>);
        _3 = &mut ((*_26).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>);
        StorageLive(_4);
        StorageLive(_5);
        _27 = deref_copy (_1.1: &mut instructions::user::InitializeSignedMsgUserOrders<'_>);
        _5 = &((*_27).1: anchor_lang::prelude::AccountInfo<'_>);
        _4 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageLive(_6);
        StorageLive(_7);
        _28 = deref_copy (*_3);
        _31 = (((_28.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _7 = &mut (*_31);
        _6 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as DerefMut>::deref_mut(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        ((*_6).0: anchor_lang::prelude::Pubkey) = move _4;
        StorageDead(_4);
        StorageDead(_6);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _29 = deref_copy (*_3);
        _32 = (((_29.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _11 = &mut (*_32);
        _10 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as DerefMut>::deref_mut(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _9 = &mut ((*_10).2: std::vec::Vec<state::signed_msg_user::SignedMsgOrderId>);
        StorageLive(_12);
        StorageLive(_13);
        _13 = _2;
        _12 = move _13 as usize (IntToInt);
        StorageDead(_13);
        _8 = Vec::<SignedMsgOrderId>::resize_with::<fn() -> SignedMsgOrderId {<SignedMsgOrderId as Default>::default}>(move _9, move _12, <SignedMsgOrderId as Default>::default) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_10);
        StorageDead(_8);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _30 = deref_copy (*_3);
        _33 = (((_30.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>>).0: *const anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgUserOrders>);
        _19 = &(*_33);
        _18 = <anchor_lang::prelude::Account<'_, SignedMsgUserOrders> as Deref>::deref(move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = SignedMsgUserOrders::validate(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_16);
        _20 = discriminant(_15);
        switchInt(move _20) -> [0: bb8, 1: bb10, otherwise: bb9];
    }

    bb8: {
        StorageLive(_24);
        _24 = ((_15 as Continue).0: ());
        _14 = _24;
        StorageDead(_24);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_25);
        _25 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _25);
        StorageDead(_25);
        StorageDead(_3);
        goto -> bb12;
    }

    bb9: {
        unreachable;
    }

    bb10: {
        StorageLive(_21);
        _21 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_18);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_3);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}
