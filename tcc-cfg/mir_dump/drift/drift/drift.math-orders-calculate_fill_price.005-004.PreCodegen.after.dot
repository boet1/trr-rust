digraph Mir_0_2610 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn math::orders::calculate_fill_price(_1: u64, _2: u64, _3: u64) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let mut _4: u128;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _6: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _7: u128;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _9: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _10: u128;<br align="left"/>let mut _11: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _12: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _13: u64;<br align="left"/>let mut _14: isize;<br align="left"/>let _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _16: !;<br align="left"/>let mut _17: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _18: u128;<br align="left"/>let mut _19: u128;<br align="left"/>let mut _20: u64;<br align="left"/>let mut _21: isize;<br align="left"/>let _22: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _23: !;<br align="left"/>let mut _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _25: u128;<br align="left"/>let mut _26: u128;<br align="left"/>let mut _27: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u128&gt;;<br align="left"/>let mut _28: std::result::Result&lt;u128, error::ErrorCode&gt;;<br align="left"/>let mut _29: u64;<br align="left"/>let mut _30: isize;<br align="left"/>let _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _32: !;<br align="left"/>let mut _33: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _34: u128;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _39: u128;<br align="left"/>debug quote_asset_amount =&gt; _1;<br align="left"/>debug base_asset_amount =&gt; _2;<br align="left"/>debug base_precision =&gt; _3;<br align="left"/>debug residual =&gt; _15;<br align="left"/>debug val =&gt; _18;<br align="left"/>debug residual =&gt; _22;<br align="left"/>debug val =&gt; _25;<br align="left"/>debug residual =&gt; _31;<br align="left"/>debug val =&gt; _34;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>>;
    bb0__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>_13 = _1<br/></td></tr><tr><td align="left">_12 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _13)</td></tr></table>>];
    bb1__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/></td></tr><tr><td align="left">_11 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _12)</td></tr></table>>];
    bb2__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>_14 = discriminant(_11)<br/></td></tr><tr><td align="left">switchInt(move _14)</td></tr></table>>];
    bb3__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>_18 = ((_11 as Continue).0: u128)<br/>_10 = _18<br/>StorageDead(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _3<br/>_19 = move _20 as u128 (IntToInt)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_9 = &lt;u128 as SafeMath&gt;::safe_mul(move _10, move _19)</td></tr></table>>];
    bb4__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_11 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_17)<br/>_17 = _15<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _17)</td></tr></table>>];
    bb6__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/>StorageDead(_15)<br/>StorageDead(_10)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb8__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_21 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _21)</td></tr></table>>];
    bb9__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_8 as Continue).0: u128)<br/>_7 = _25<br/>StorageDead(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>_29 = _2<br/></td></tr><tr><td align="left">_28 = &lt;u64 as Cast&gt;::cast::&lt;u128&gt;(move _29)</td></tr></table>>];
    bb10__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_22)<br/>_22 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_24)<br/>_24 = _22<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _24)</td></tr></table>>];
    bb11__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_22)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">_27 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _28)</td></tr></table>>];
    bb13__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/>_30 = discriminant(_27)<br/></td></tr><tr><td align="left">switchInt(move _30)</td></tr></table>>];
    bb14__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageLive(_34)<br/>_34 = ((_27 as Continue).0: u128)<br/>_26 = _34<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">_6 = &lt;u128 as SafeMath&gt;::safe_div(move _7, move _26)</td></tr></table>>];
    bb15__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_31)<br/>_31 = ((_27 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_33)<br/>_33 = _31<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _33)</td></tr></table>>];
    bb16__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/>StorageDead(_26)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;u128, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb18__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_35 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb19__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_5 as Continue).0: u128)<br/>_4 = _39<br/>StorageDead(_39)<br/></td></tr><tr><td align="left">_0 = &lt;u128 as Cast&gt;::cast::&lt;u64&gt;(move _4)</td></tr></table>>];
    bb20__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_38)<br/>_38 = _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb21__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_27)<br/>StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_27)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb25__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_8)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_2610 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2610 -> bb1__0_2610 [label="return"];
    bb1__0_2610 -> bb2__0_2610 [label="return"];
    bb2__0_2610 -> bb3__0_2610 [label="0"];
    bb2__0_2610 -> bb5__0_2610 [label="1"];
    bb2__0_2610 -> bb4__0_2610 [label="otherwise"];
    bb3__0_2610 -> bb7__0_2610 [label="return"];
    bb5__0_2610 -> bb6__0_2610 [label="return"];
    bb6__0_2610 -> bb24__0_2610 [label=""];
    bb7__0_2610 -> bb8__0_2610 [label="return"];
    bb8__0_2610 -> bb9__0_2610 [label="0"];
    bb8__0_2610 -> bb10__0_2610 [label="1"];
    bb8__0_2610 -> bb4__0_2610 [label="otherwise"];
    bb9__0_2610 -> bb12__0_2610 [label="return"];
    bb10__0_2610 -> bb11__0_2610 [label="return"];
    bb11__0_2610 -> bb24__0_2610 [label=""];
    bb12__0_2610 -> bb13__0_2610 [label="return"];
    bb13__0_2610 -> bb14__0_2610 [label="0"];
    bb13__0_2610 -> bb15__0_2610 [label="1"];
    bb13__0_2610 -> bb4__0_2610 [label="otherwise"];
    bb14__0_2610 -> bb17__0_2610 [label="return"];
    bb15__0_2610 -> bb16__0_2610 [label="return"];
    bb16__0_2610 -> bb23__0_2610 [label=""];
    bb17__0_2610 -> bb18__0_2610 [label="return"];
    bb18__0_2610 -> bb19__0_2610 [label="0"];
    bb18__0_2610 -> bb20__0_2610 [label="1"];
    bb18__0_2610 -> bb4__0_2610 [label="otherwise"];
    bb19__0_2610 -> bb22__0_2610 [label="return"];
    bb20__0_2610 -> bb21__0_2610 [label="return"];
    bb21__0_2610 -> bb23__0_2610 [label=""];
    bb22__0_2610 -> bb26__0_2610 [label=""];
    bb23__0_2610 -> bb25__0_2610 [label=""];
    bb24__0_2610 -> bb25__0_2610 [label=""];
    bb25__0_2610 -> bb26__0_2610 [label=""];
}
