// MIR for `validate_base_asset_amount` before PreCodegen

fn validate_base_asset_amount(_1: &Order, _2: u64, _3: u64, _4: bool) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug step_size => _2;
    debug min_order_size => _3;
    debug reduce_only_or_jit_maker => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: ();
    let mut _6: bool;
    let mut _7: u64;
    let mut _8: !;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: error::ErrorCode;
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _15: std::result::Result<(), error::ErrorCode>;
    let mut _16: bool;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _18: std::result::Result<bool, error::ErrorCode>;
    let mut _19: u64;
    let mut _20: u64;
    let mut _21: isize;
    let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: bool;
    let mut _26: ();
    let _27: error::ErrorCode;
    let _28: ();
    let mut _29: &str;
    let _30: &str;
    let mut _31: &std::string::String;
    let _32: &std::string::String;
    let _33: std::string::String;
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let mut _37: &[&str; 2];
    let _38: &[&str; 2];
    let _39: [&str; 2];
    let mut _40: &[core::fmt::rt::Argument<'_>];
    let mut _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: &[core::fmt::rt::Argument<'_>; 1];
    let _43: [core::fmt::rt::Argument<'_>; 1];
    let mut _44: core::fmt::rt::Argument<'_>;
    let mut _45: &error::ErrorCode;
    let _46: &error::ErrorCode;
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 3];
    let _57: &[&str; 3];
    let _58: [&str; 3];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let mut _60: &[core::fmt::rt::Argument<'_>; 2];
    let _61: &[core::fmt::rt::Argument<'_>; 2];
    let _62: [core::fmt::rt::Argument<'_>; 2];
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &u64;
    let _65: &u64;
    let mut _66: core::fmt::rt::Argument<'_>;
    let mut _67: &u64;
    let _68: &u64;
    let mut _69: error::ErrorCode;
    let mut _70: isize;
    let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _74: ();
    let _75: ();
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _77: std::result::Result<(), error::ErrorCode>;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: u64;
    let mut _81: u64;
    let mut _82: ();
    let _83: error::ErrorCode;
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: &std::string::String;
    let _88: &std::string::String;
    let _89: std::string::String;
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let mut _93: &[&str; 2];
    let _94: &[&str; 2];
    let _95: [&str; 2];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let mut _97: &[core::fmt::rt::Argument<'_>; 1];
    let _98: &[core::fmt::rt::Argument<'_>; 1];
    let _99: [core::fmt::rt::Argument<'_>; 1];
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: &error::ErrorCode;
    let _102: &error::ErrorCode;
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: &std::string::String;
    let _107: &std::string::String;
    let _108: std::string::String;
    let mut _110: std::fmt::Arguments<'_>;
    let mut _111: &[&str];
    let mut _112: &[&str; 3];
    let _113: &[&str; 3];
    let _114: [&str; 3];
    let mut _115: &[core::fmt::rt::Argument<'_>];
    let mut _116: &[core::fmt::rt::Argument<'_>; 2];
    let _117: &[core::fmt::rt::Argument<'_>; 2];
    let _118: [core::fmt::rt::Argument<'_>; 2];
    let mut _119: core::fmt::rt::Argument<'_>;
    let mut _120: &u64;
    let _121: &u64;
    let mut _122: core::fmt::rt::Argument<'_>;
    let mut _123: &u64;
    let _124: &u64;
    let mut _125: error::ErrorCode;
    let mut _126: isize;
    let _127: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _128: !;
    let mut _129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _130: ();
    let mut _131: ();
    scope 1 {
        debug residual => _22;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _25;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _27;
        let _34: std::string::String;
        let _53: std::string::String;
        let mut _134: &[&str; 3];
        let mut _135: &[&str; 2];
        scope 6 {
            debug res => _34;
        }
        scope 7 {
            debug res => _53;
        }
    }
    scope 8 {
        debug residual => _71;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _74;
        scope 11 {
        }
    }
    scope 12 {
        debug error_code => _83;
        let _90: std::string::String;
        let _109: std::string::String;
        let mut _132: &[&str; 3];
        let mut _133: &[&str; 2];
        scope 13 {
            debug res => _90;
        }
        scope 14 {
            debug res => _109;
        }
    }
    scope 15 {
        debug residual => _127;
        scope 16 {
        }
    }
    scope 17 {
        debug val => _130;
        scope 18 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).2: u64);
        _6 = Eq(move _7, const 0_u64);
        switchInt(move _6) -> [0: bb3, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = const "Order base_asset_amount cant be 0";
        _10 = &(*_11);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_12);
        _12 = error::ErrorCode::InvalidOrderSizeTooSmall;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _12);
        StorageDead(_12);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb52;
    }

    bb3: {
        StorageDead(_7);
        _5 = const ();
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).2: u64);
        StorageLive(_20);
        _20 = _2;
        _18 = math::orders::is_multiple_of_step_size(move _19, move _20) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_20);
        StorageDead(_19);
        _17 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_18);
        _21 = discriminant(_17);
        switchInt(move _21) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_25);
        _25 = ((_17 as Continue).0: bool);
        _16 = _25;
        StorageDead(_25);
        switchInt(move _16) -> [0: bb11, otherwise: bb10];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_22);
        _22 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb51;
    }

    bb10: {
        StorageDead(_17);
        StorageLive(_26);
        _26 = ();
        _15 = std::result::Result::<(), error::ErrorCode>::Ok(move _26);
        StorageDead(_26);
        goto -> bb25;
    }

    bb11: {
        StorageDead(_17);
        StorageLive(_27);
        _27 = error::ErrorCode::InvalidOrderNotStepSizeMultiple;
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _135 = const _;
        _38 = &(*_135);
        _37 = &(*_38);
        _36 = move _37 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_37);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = &_27;
        _45 = &(*_46);
        _44 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _45) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_45);
        _43 = [move _44];
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = move _41 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_41);
        _35 = Arguments::<'_>::new_v1(move _36, move _40) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_40);
        StorageDead(_36);
        _34 = format(move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_35);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_38);
        _33 = move _34;
        StorageDead(_34);
        _32 = &_33;
        _31 = &(*_32);
        _30 = <String as Deref>::deref(move _31) -> [return: bb15, unwind: bb56];
    }

    bb15: {
        _29 = &(*_30);
        StorageDead(_31);
        _28 = solana_program::log::sol_log(move _29) -> [return: bb16, unwind: bb56];
    }

    bb16: {
        StorageDead(_29);
        drop(_33) -> [return: bb17, unwind: bb57];
    }

    bb17: {
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_28);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _134 = const _;
        _57 = &(*_134);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &((*_1).2: u64);
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _64) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_2;
        _67 = &(*_68);
        _66 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _67) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_67);
        _62 = [move _63, move _66];
        StorageDead(_66);
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = move _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_60);
        _54 = Arguments::<'_>::new_v1(move _55, move _59) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_54);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb22, unwind: bb55];
    }

    bb22: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb23, unwind: bb55];
    }

    bb23: {
        StorageDead(_48);
        drop(_52) -> [return: bb24, unwind: bb57];
    }

    bb24: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_69);
        _69 = _27;
        _15 = std::result::Result::<(), error::ErrorCode>::Err(move _69);
        StorageDead(_69);
        StorageDead(_27);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_16);
        _14 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _15) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_15);
        _70 = discriminant(_14);
        switchInt(move _70) -> [0: bb27, 1: bb28, otherwise: bb7];
    }

    bb27: {
        StorageLive(_74);
        _74 = ((_14 as Continue).0: ());
        _13 = _74;
        StorageDead(_74);
        StorageDead(_14);
        StorageDead(_13);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        _78 = _4;
        switchInt(move _78) -> [0: bb30, otherwise: bb31];
    }

    bb28: {
        StorageLive(_71);
        _71 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_73);
        StorageDead(_71);
        goto -> bb51;
    }

    bb30: {
        StorageLive(_79);
        StorageLive(_80);
        _80 = ((*_1).2: u64);
        StorageLive(_81);
        _81 = _3;
        _79 = Ge(move _80, move _81);
        switchInt(move _79) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_82);
        _82 = ();
        _77 = std::result::Result::<(), error::ErrorCode>::Ok(move _82);
        StorageDead(_82);
        goto -> bb46;
    }

    bb32: {
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_83);
        _83 = error::ErrorCode::InvalidOrderMinOrderSize;
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _133 = const _;
        _94 = &(*_133);
        _93 = &(*_94);
        _92 = move _93 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_83;
        _101 = &(*_102);
        _100 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _101) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_101);
        _99 = [move _100];
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = move _97 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_97);
        _91 = Arguments::<'_>::new_v1(move _92, move _96) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_96);
        StorageDead(_92);
        _90 = format(move _91) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_91);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        _89 = move _90;
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = <String as Deref>::deref(move _87) -> [return: bb36, unwind: bb54];
    }

    bb36: {
        _85 = &(*_86);
        StorageDead(_87);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb37, unwind: bb54];
    }

    bb37: {
        StorageDead(_85);
        drop(_89) -> [return: bb38, unwind: bb57];
    }

    bb38: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _132 = const _;
        _113 = &(*_132);
        _112 = &(*_113);
        _111 = move _112 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_112);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &((*_1).2: u64);
        _120 = &(*_121);
        _119 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _120) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_120);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_3;
        _123 = &(*_124);
        _122 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _123) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_123);
        _118 = [move _119, move _122];
        StorageDead(_122);
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = move _116 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_116);
        _110 = Arguments::<'_>::new_v1(move _111, move _115) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_115);
        StorageDead(_111);
        _109 = format(move _110) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_110);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_113);
        _108 = move _109;
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = <String as Deref>::deref(move _106) -> [return: bb43, unwind: bb53];
    }

    bb43: {
        _104 = &(*_105);
        StorageDead(_106);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb44, unwind: bb53];
    }

    bb44: {
        StorageDead(_104);
        drop(_108) -> [return: bb45, unwind: bb57];
    }

    bb45: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_125);
        _125 = _83;
        _77 = std::result::Result::<(), error::ErrorCode>::Err(move _125);
        StorageDead(_125);
        StorageDead(_83);
        goto -> bb46;
    }

    bb46: {
        StorageDead(_79);
        StorageDead(_78);
        _76 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _77) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_77);
        _126 = discriminant(_76);
        switchInt(move _126) -> [0: bb48, 1: bb49, otherwise: bb7];
    }

    bb48: {
        StorageLive(_130);
        _130 = ((_76 as Continue).0: ());
        _75 = _130;
        StorageDead(_130);
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_131);
        _131 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _131);
        StorageDead(_131);
        goto -> bb52;
    }

    bb49: {
        StorageLive(_127);
        _127 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_129);
        _129 = _127;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _129) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb52;
    }

    bb51: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb52;
    }

    bb52: {
        return;
    }

    bb53 (cleanup): {
        drop(_108) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb54 (cleanup): {
        drop(_89) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb55 (cleanup): {
        drop(_52) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb56 (cleanup): {
        drop(_33) -> [return: bb57, unwind terminate(cleanup)];
    }

    bb57 (cleanup): {
        resume;
    }
}
