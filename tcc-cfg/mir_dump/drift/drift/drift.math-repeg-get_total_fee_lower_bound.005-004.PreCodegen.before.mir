// MIR for `get_total_fee_lower_bound` before PreCodegen

fn get_total_fee_lower_bound(_1: &PerpMarket) -> std::result::Result<u128, error::ErrorCode> {
    debug market => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _2: u128;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _4: std::result::Result<u128, error::ErrorCode>;
    let mut _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u128;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u128;
    let mut _14: isize;
    let _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _16: !;
    let mut _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _18: u128;
    let mut _19: u128;
    scope 1 {
        debug total_fee_lower_bound => _2;
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _15;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _18;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = (((*_1).1: state::perp_market::AMM).30: u128);
        _7 = <u128 as SafeMath>::safe_mul(move _8, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: u128);
        _5 = _13;
        StorageDead(_13);
        _4 = <u128 as SafeMath>::safe_div(move _5, const _) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_5);
        _3 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _4) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_4);
        _14 = discriminant(_3);
        switchInt(move _14) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_18);
        _18 = ((_3 as Continue).0: u128);
        _2 = _18;
        StorageDead(_18);
        StorageDead(_6);
        StorageDead(_3);
        StorageLive(_19);
        _19 = _2;
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _19);
        StorageDead(_19);
        StorageDead(_2);
        goto -> bb13;
    }

    bb10: {
        StorageLive(_15);
        _15 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_17);
        _17 = _15;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_17);
        StorageDead(_15);
        goto -> bb12;
    }

    bb12: {
        StorageDead(_6);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
