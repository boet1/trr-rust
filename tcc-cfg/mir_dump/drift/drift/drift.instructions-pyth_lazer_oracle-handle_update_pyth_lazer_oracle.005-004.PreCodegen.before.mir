// MIR for `instructions::pyth_lazer_oracle::handle_update_pyth_lazer_oracle` before PreCodegen

fn instructions::pyth_lazer_oracle::handle_update_pyth_lazer_oracle(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::pyth_lazer_oracle::UpdatePythLazerOracle<'_>>, _2: Vec<u8>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug pyth_message => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: u16;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, u16>;
    let mut _5: std::result::Result<u16, anchor_lang::prelude::ProgramError>;
    let mut _6: &anchor_lang::prelude::AccountInfo<'_>;
    let _7: &anchor_lang::prelude::AccountInfo<'_>;
    let _8: anchor_lang::prelude::AccountInfo<'_>;
    let mut _9: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _14: u16;
    let _15: ();
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _17: std::result::Result<(), error::ErrorCode>;
    let mut _18: bool;
    let mut _19: u16;
    let mut _20: ();
    let _22: ();
    let mut _23: &str;
    let _24: &str;
    let mut _25: &std::string::String;
    let _26: &std::string::String;
    let _27: std::string::String;
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[&str; 2];
    let _32: &[&str; 2];
    let _33: [&str; 2];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let mut _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: [core::fmt::rt::Argument<'_>; 1];
    let mut _38: core::fmt::rt::Argument<'_>;
    let mut _39: &error::ErrorCode;
    let _40: &error::ErrorCode;
    let _41: ();
    let mut _42: &str;
    let _43: &str;
    let mut _44: error::ErrorCode;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _53: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _54: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, pyth_lazer_solana_contract::Storage>;
    let mut _62: std::result::Result<pyth_lazer_solana_contract::Storage, anchor_lang::error::Error>;
    let mut _63: &mut &[u8];
    let mut _64: &mut &[u8];
    let mut _65: &[u8];
    let _66: &[u8];
    let mut _67: &[u8];
    let _68: &&mut [u8];
    let mut _69: &std::cell::Ref<'_, &mut [u8]>;
    let mut _70: std::ops::RangeFull;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _76: pyth_lazer_solana_contract::signature::VerifiedMessage;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, pyth_lazer_solana_contract::signature::VerifiedMessage>;
    let mut _78: std::result::Result<pyth_lazer_solana_contract::signature::VerifiedMessage, anchor_lang::error::Error>;
    let mut _79: &pyth_lazer_solana_contract::Storage;
    let _80: &pyth_lazer_solana_contract::Storage;
    let mut _81: &anchor_lang::prelude::AccountInfo<'_>;
    let _82: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _83: &[u8];
    let _84: &[u8];
    let mut _85: &std::vec::Vec<u8>;
    let _86: &std::vec::Vec<u8>;
    let mut _87: u16;
    let mut _88: u16;
    let mut _89: (u16, bool);
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, pyth_lazer_solana_contract::pyth_lazer_protocol::message::SolanaMessage>;
    let mut _97: std::result::Result<pyth_lazer_solana_contract::pyth_lazer_protocol::message::SolanaMessage, anchor_lang::prelude::ProgramError>;
    let mut _98: std::result::Result<pyth_lazer_solana_contract::pyth_lazer_protocol::message::SolanaMessage, anyhow::Error>;
    let mut _99: &[u8];
    let _100: &[u8];
    let mut _101: &std::vec::Vec<u8>;
    let _102: &std::vec::Vec<u8>;
    let mut _103: {closure@programs/drift/src/instructions/pyth_lazer_oracle.rs:41:18: 41:21};
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _110: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadData>;
    let mut _111: std::result::Result<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadData, anchor_lang::prelude::ProgramError>;
    let mut _112: std::result::Result<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadData, anyhow::Error>;
    let mut _113: &[u8];
    let _114: &[u8];
    let mut _115: &std::vec::Vec<u8>;
    let _116: &std::vec::Vec<u8>;
    let mut _117: {closure@programs/drift/src/instructions/pyth_lazer_oracle.rs:44:18: 44:21};
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _124: ();
    let mut _125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _126: std::result::Result<(), error::ErrorCode>;
    let mut _127: bool;
    let mut _128: usize;
    let mut _129: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _130: usize;
    let mut _131: &std::vec::Vec<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>;
    let mut _132: ();
    let _134: ();
    let mut _135: &str;
    let _136: &str;
    let mut _137: &std::string::String;
    let _138: &std::string::String;
    let _139: std::string::String;
    let mut _141: std::fmt::Arguments<'_>;
    let mut _142: &[&str];
    let mut _143: &[&str; 2];
    let _144: &[&str; 2];
    let _145: [&str; 2];
    let mut _146: &[core::fmt::rt::Argument<'_>];
    let mut _147: &[core::fmt::rt::Argument<'_>; 1];
    let _148: &[core::fmt::rt::Argument<'_>; 1];
    let _149: [core::fmt::rt::Argument<'_>; 1];
    let mut _150: core::fmt::rt::Argument<'_>;
    let mut _151: &error::ErrorCode;
    let _152: &error::ErrorCode;
    let mut _153: error::ErrorCode;
    let mut _154: isize;
    let mut _156: !;
    let mut _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _159: ();
    let mut _160: std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>>;
    let mut _161: std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>>;
    let mut _162: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _163: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _164: std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>;
    let mut _165: &[pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData];
    let _166: &[pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData];
    let mut _167: &std::vec::Vec<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>;
    let mut _169: ();
    let _170: ();
    let mut _171: std::option::Option<(&anchor_lang::prelude::AccountInfo<'_>, &pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData)>;
    let mut _172: &mut std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>>;
    let mut _173: &mut std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>>;
    let mut _174: isize;
    let mut _175: !;
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>>;
    let mut _180: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>, anchor_lang::error::Error>;
    let mut _181: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>>;
    let mut _189: std::result::Result<std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>, anchor_lang::error::Error>;
    let mut _190: &anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _191: isize;
    let mut _193: !;
    let mut _194: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _198: (anchor_lang::prelude::Pubkey, u8);
    let mut _199: &[&[u8]];
    let mut _200: &[&[u8]; 2];
    let _201: &[&[u8]; 2];
    let _202: [&[u8]; 2];
    let mut _203: &[u8];
    let _204: &[u8];
    let mut _205: &[u8];
    let mut _206: &[u8; 4];
    let _207: &[u8; 4];
    let _208: [u8; 4];
    let mut _209: u32;
    let mut _210: &anchor_lang::prelude::Pubkey;
    let _211: &anchor_lang::prelude::Pubkey;
    let _212: &anchor_lang::prelude::Pubkey;
    let _213: ();
    let mut _214: bool;
    let mut _215: &anchor_lang::prelude::Pubkey;
    let mut _216: &anchor_lang::prelude::Pubkey;
    let mut _217: !;
    let mut _218: anchor_lang::error::Error;
    let mut _219: anchor_lang::error::Error;
    let mut _220: anchor_lang::error::AnchorError;
    let mut _221: std::string::String;
    let mut _222: &error::ErrorCode;
    let _223: error::ErrorCode;
    let mut _224: u32;
    let mut _225: error::ErrorCode;
    let mut _226: std::string::String;
    let mut _227: &error::ErrorCode;
    let _228: error::ErrorCode;
    let mut _229: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _230: anchor_lang::error::ErrorOrigin;
    let mut _231: anchor_lang::error::Source;
    let mut _232: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _233: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _234: anchor_lang::prelude::Pubkey;
    let mut _235: anchor_lang::prelude::Pubkey;
    let mut _237: &state::pyth_lazer_oracle::PythLazerOracle;
    let mut _238: &std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _239: bool;
    let mut _240: u64;
    let mut _241: u64;
    let mut _242: !;
    let mut _243: anchor_lang::error::Error;
    let mut _244: error::ErrorCode;
    let mut _246: &pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue;
    let mut _247: &std::vec::Vec<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>;
    let mut _248: isize;
    let mut _249: isize;
    let _253: ();
    let mut _254: std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>;
    let mut _255: &std::vec::Vec<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>;
    let _257: ();
    let mut _258: std::option::Option<&pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>;
    let mut _259: &mut std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>;
    let mut _260: &mut std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>;
    let mut _261: isize;
    let mut _262: !;
    let mut _264: isize;
    let mut _266: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>;
    let mut _268: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>;
    let mut _270: std::option::Option<i16>;
    let mut _271: i16;
    let mut _273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i16>;
    let mut _274: std::result::Result<i16, error::ErrorCode>;
    let mut _275: std::option::Option<i16>;
    let mut _276: error::ErrorCode;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _283: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _284: std::result::Result<i64, error::ErrorCode>;
    let mut _285: i64;
    let mut _286: std::num::NonZeroI64;
    let mut _287: isize;
    let mut _289: !;
    let mut _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _292: ();
    let mut _293: (std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>, std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>);
    let mut _294: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>;
    let mut _295: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>;
    let mut _296: isize;
    let mut _297: isize;
    let mut _300: bool;
    let mut _301: i64;
    let mut _302: std::num::NonZeroI64;
    let mut _303: i64;
    let mut _304: std::num::NonZeroI64;
    let mut _305: i64;
    let mut _306: std::num::NonZeroI64;
    let mut _307: i64;
    let mut _308: std::num::NonZeroI64;
    let mut _309: (i64, bool);
    let mut _310: i64;
    let mut _311: std::num::NonZeroI64;
    let mut _312: &mut state::pyth_lazer_oracle::PythLazerOracle;
    let mut _313: &mut std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _314: u64;
    let mut _315: anchor_lang::prelude::Clock;
    let mut _316: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _317: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _318: isize;
    let mut _320: !;
    let mut _321: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _323: &mut state::pyth_lazer_oracle::PythLazerOracle;
    let mut _324: &mut std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _325: u64;
    let mut _326: &mut state::pyth_lazer_oracle::PythLazerOracle;
    let mut _327: &mut std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _328: i32;
    let mut _329: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i32>;
    let mut _330: std::result::Result<i32, error::ErrorCode>;
    let mut _331: i16;
    let mut _332: isize;
    let mut _334: !;
    let mut _335: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _337: &mut state::pyth_lazer_oracle::PythLazerOracle;
    let mut _338: &mut std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let mut _339: u64;
    let mut _340: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _341: std::result::Result<u64, error::ErrorCode>;
    let mut _342: i64;
    let mut _343: isize;
    let mut _345: !;
    let mut _346: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _348: &mut state::pyth_lazer_oracle::PythLazerOracle;
    let mut _349: &mut std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>;
    let _350: ();
    let mut _351: &str;
    let _352: &str;
    let mut _353: &std::string::String;
    let _354: &std::string::String;
    let _355: std::string::String;
    let mut _357: std::fmt::Arguments<'_>;
    let mut _358: &[&str];
    let mut _359: &[&str; 1];
    let _360: &[&str; 1];
    let _361: [&str; 1];
    let mut _362: &[core::fmt::rt::Argument<'_>];
    let mut _363: &[core::fmt::rt::Argument<'_>; 1];
    let _364: &[core::fmt::rt::Argument<'_>; 1];
    let _365: [core::fmt::rt::Argument<'_>; 1];
    let mut _366: core::fmt::rt::Argument<'_>;
    let mut _367: &i64;
    let _368: &i64;
    let _369: i64;
    let mut _370: std::num::NonZeroI64;
    let _371: ();
    let mut _372: &str;
    let _373: &str;
    let mut _374: &std::string::String;
    let _375: &std::string::String;
    let _376: std::string::String;
    let mut _378: std::fmt::Arguments<'_>;
    let mut _379: &[&str];
    let mut _380: &[&str; 2];
    let _381: &[&str; 2];
    let _382: [&str; 2];
    let mut _383: &[core::fmt::rt::Argument<'_>];
    let mut _384: &[core::fmt::rt::Argument<'_>; 2];
    let _385: &[core::fmt::rt::Argument<'_>; 2];
    let _386: [core::fmt::rt::Argument<'_>; 2];
    let mut _387: core::fmt::rt::Argument<'_>;
    let mut _388: &u64;
    let _389: &u64;
    let mut _390: core::fmt::rt::Argument<'_>;
    let mut _391: &u64;
    let _392: &u64;
    let _393: ();
    let mut _394: &str;
    let _395: &str;
    let mut _396: &std::string::String;
    let _397: &std::string::String;
    let _398: std::string::String;
    let mut _400: std::fmt::Arguments<'_>;
    let mut _401: &[&str];
    let mut _402: &[&str; 2];
    let _403: &[&str; 2];
    let _404: [&str; 2];
    let mut _405: &[core::fmt::rt::Argument<'_>];
    let mut _406: &[core::fmt::rt::Argument<'_>; 2];
    let _407: &[core::fmt::rt::Argument<'_>; 2];
    let _408: [core::fmt::rt::Argument<'_>; 2];
    let mut _409: core::fmt::rt::Argument<'_>;
    let mut _410: &u64;
    let _411: &u64;
    let mut _412: core::fmt::rt::Argument<'_>;
    let mut _413: &u64;
    let _414: &u64;
    let mut _415: ();
    let mut _423: &mut instructions::pyth_lazer_oracle::UpdatePythLazerOracle<'_>;
    let mut _424: &mut instructions::pyth_lazer_oracle::UpdatePythLazerOracle<'_>;
    let mut _425: &mut [u8];
    let mut _426: &mut instructions::pyth_lazer_oracle::UpdatePythLazerOracle<'_>;
    let mut _427: &anchor_lang::prelude::Pubkey;
    let mut _428: &anchor_lang::prelude::Pubkey;
    let mut _429: bool;
    let mut _430: bool;
    let mut _431: bool;
    let mut _432: bool;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: isize;
    let mut _464: isize;
    let mut _465: isize;
    let mut _466: isize;
    let mut _467: isize;
    let mut _468: isize;
    let mut _469: isize;
    let mut _470: isize;
    let mut _471: isize;
    let mut _472: isize;
    let mut _473: isize;
    let mut _474: isize;
    let mut _475: isize;
    let mut _476: isize;
    let mut _477: isize;
    scope 1 {
        debug ix_idx => _3;
        let _21: error::ErrorCode;
        let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _49: ();
        let _50: &[anchor_lang::prelude::AccountInfo<'_>];
        scope 6 {
            debug error_code => _21;
            let _28: std::string::String;
            let mut _422: &[&str; 2];
            scope 7 {
                debug res => _28;
            }
        }
        scope 8 {
            debug residual => _46;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _49;
            scope 11 {
            }
        }
        scope 12 {
            debug remaining_accounts => _50;
            let _51: std::cell::Ref<'_, &mut [u8]>;
            let _56: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
            let _59: std::cell::Ref<'_, &mut [u8]>;
            scope 13 {
                debug storage_account_data => _51;
                let _60: pyth_lazer_solana_contract::Storage;
                let _72: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _75: pyth_lazer_solana_contract::Storage;
                scope 18 {
                    debug pyth_storage => _60;
                    let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _94: pyth_lazer_solana_contract::signature::VerifiedMessage;
                    let _95: pyth_lazer_solana_contract::pyth_lazer_protocol::message::SolanaMessage;
                    let _105: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                    let _108: pyth_lazer_solana_contract::pyth_lazer_protocol::message::SolanaMessage;
                    scope 23 {
                        debug residual => _91;
                        scope 24 {
                        }
                    }
                    scope 25 {
                        debug val => _94;
                        scope 26 {
                        }
                    }
                    scope 27 {
                        debug deserialized_pyth_message => _95;
                        let _109: pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadData;
                        let _119: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                        let _122: pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadData;
                        scope 32 {
                            debug data => _109;
                            let _123: u64;
                            scope 37 {
                                debug next_timestamp => _123;
                                let _133: error::ErrorCode;
                                let _155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _158: ();
                                let mut _168: std::iter::Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>>;
                                scope 38 {
                                    debug error_code => _133;
                                    let _140: std::string::String;
                                    let mut _421: &[&str; 2];
                                    scope 39 {
                                        debug res => _140;
                                    }
                                }
                                scope 40 {
                                    debug residual => _155;
                                    scope 41 {
                                    }
                                }
                                scope 42 {
                                    debug val => _158;
                                    scope 43 {
                                    }
                                }
                                scope 44 {
                                    debug iter => _168;
                                    let _176: &anchor_lang::prelude::AccountInfo<'_>;
                                    let _177: &pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData;
                                    scope 45 {
                                        debug account => _176;
                                        debug payload_data => _177;
                                        let _178: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
                                        let _183: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _186: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>;
                                        scope 46 {
                                            debug pyth_lazer_oracle_loader => _178;
                                            let mut _187: std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>;
                                            let _192: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _195: std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>;
                                            scope 51 {
                                                debug pyth_lazer_oracle => _187;
                                                let _196: u32;
                                                scope 56 {
                                                    debug feed_id => _196;
                                                    let _197: anchor_lang::prelude::Pubkey;
                                                    scope 57 {
                                                        debug pda => _197;
                                                        let _236: u64;
                                                        let mut _416: &error::ErrorCode;
                                                        let mut _417: &error::ErrorCode;
                                                        scope 58 {
                                                            debug current_timestamp => _236;
                                                            let _245: pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price;
                                                            let _399: std::string::String;
                                                            let mut _420: &[&str; 2];
                                                            scope 59 {
                                                                debug price => _245;
                                                                let mut _250: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>;
                                                                scope 60 {
                                                                    debug best_bid_price => _250;
                                                                    let mut _251: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>;
                                                                    scope 61 {
                                                                        debug best_ask_price => _251;
                                                                        let mut _252: std::option::Option<i16>;
                                                                        scope 62 {
                                                                            debug exponent => _252;
                                                                            let mut _256: std::slice::Iter<'_, pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>;
                                                                            let _272: i16;
                                                                            let _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _281: i16;
                                                                            scope 63 {
                                                                                debug iter => _256;
                                                                                let _263: &pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue;
                                                                                scope 64 {
                                                                                    debug property => _263;
                                                                                    let _265: &std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>;
                                                                                    let _267: &std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>;
                                                                                    let _269: &i16;
                                                                                    scope 65 {
                                                                                        debug price => _265;
                                                                                    }
                                                                                    scope 66 {
                                                                                        debug price => _267;
                                                                                    }
                                                                                    scope 67 {
                                                                                        debug exp => _269;
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 68 {
                                                                                debug exponent => _272;
                                                                                let mut _282: i64;
                                                                                let _288: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _291: i64;
                                                                                scope 73 {
                                                                                    debug conf => _282;
                                                                                    let _319: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                                                    let _322: anchor_lang::prelude::Clock;
                                                                                    let _333: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _336: i32;
                                                                                    let _344: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _347: u64;
                                                                                    let _356: std::string::String;
                                                                                    let _377: std::string::String;
                                                                                    let mut _418: &[&str; 2];
                                                                                    let mut _419: &[&str; 1];
                                                                                    scope 78 {
                                                                                        debug bid => _298;
                                                                                        debug ask => _299;
                                                                                        let _298: pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price;
                                                                                        let _299: pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price;
                                                                                    }
                                                                                    scope 79 {
                                                                                        debug residual => _319;
                                                                                        scope 80 {
                                                                                        }
                                                                                    }
                                                                                    scope 81 {
                                                                                        debug val => _322;
                                                                                        scope 82 {
                                                                                        }
                                                                                    }
                                                                                    scope 83 {
                                                                                        debug residual => _333;
                                                                                        scope 84 {
                                                                                        }
                                                                                    }
                                                                                    scope 85 {
                                                                                        debug val => _336;
                                                                                        scope 86 {
                                                                                        }
                                                                                    }
                                                                                    scope 87 {
                                                                                        debug residual => _344;
                                                                                        scope 88 {
                                                                                        }
                                                                                    }
                                                                                    scope 89 {
                                                                                        debug val => _347;
                                                                                        scope 90 {
                                                                                        }
                                                                                    }
                                                                                    scope 91 {
                                                                                        debug res => _356;
                                                                                    }
                                                                                    scope 92 {
                                                                                        debug res => _377;
                                                                                    }
                                                                                }
                                                                                scope 74 {
                                                                                    debug residual => _288;
                                                                                    scope 75 {
                                                                                    }
                                                                                }
                                                                                scope 76 {
                                                                                    debug val => _291;
                                                                                    scope 77 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 69 {
                                                                                debug residual => _278;
                                                                                scope 70 {
                                                                                }
                                                                            }
                                                                            scope 71 {
                                                                                debug val => _281;
                                                                                scope 72 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 93 {
                                                                debug res => _399;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 52 {
                                                debug residual => _192;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _195;
                                                scope 55 {
                                                }
                                            }
                                        }
                                        scope 47 {
                                            debug residual => _183;
                                            scope 48 {
                                            }
                                        }
                                        scope 49 {
                                            debug val => _186;
                                            scope 50 {
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 33 {
                            debug residual => _119;
                            scope 34 {
                            }
                        }
                        scope 35 {
                            debug val => _122;
                            scope 36 {
                            }
                        }
                    }
                    scope 28 {
                        debug residual => _105;
                        scope 29 {
                        }
                    }
                    scope 30 {
                        debug val => _108;
                        scope 31 {
                        }
                    }
                }
                scope 19 {
                    debug residual => _72;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug val => _75;
                    scope 22 {
                    }
                }
            }
            scope 14 {
                debug residual => _56;
                scope 15 {
                }
            }
            scope 16 {
                debug val => _59;
                scope 17 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        _432 = const false;
        _431 = const false;
        _430 = const false;
        _429 = const false;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _423 = deref_copy (_1.1: &mut instructions::pyth_lazer_oracle::UpdatePythLazerOracle<'_>);
        _9 = &((*_423).2: anchor_lang::prelude::AccountInfo<'_>);
        _8 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _9) -> [return: bb1, unwind: bb214];
    }

    bb1: {
        StorageDead(_9);
        _7 = &_8;
        _6 = &(*_7);
        _5 = load_current_index_checked(move _6) -> [return: bb2, unwind: bb213];
    }

    bb2: {
        StorageDead(_6);
        _4 = <std::result::Result<u16, anchor_lang::prelude::ProgramError> as Try>::branch(move _5) -> [return: bb3, unwind: bb213];
    }

    bb3: {
        StorageDead(_5);
        _10 = discriminant(_4);
        switchInt(move _10) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_14);
        _14 = ((_4 as Continue).0: u16);
        _3 = _14;
        StorageDead(_14);
        _433 = discriminant(_4);
        drop(_8) -> [return: bb8, unwind: bb214];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_11);
        _11 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _13) -> [return: bb7, unwind: bb224];
    }

    bb7: {
        StorageDead(_13);
        StorageDead(_11);
        _467 = discriminant(_4);
        drop(_8) -> [return: bb200, unwind: bb214];
    }

    bb8: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = _3;
        _18 = Gt(move _19, const 0_u16);
        switchInt(move _18) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        StorageDead(_19);
        StorageLive(_20);
        _20 = ();
        _17 = std::result::Result::<(), error::ErrorCode>::Ok(move _20);
        StorageDead(_20);
        goto -> bb18;
    }

    bb10: {
        StorageDead(_19);
        StorageLive(_21);
        _21 = error::ErrorCode::InvalidVerificationIxIndex;
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _422 = const _;
        _32 = &(*_422);
        _31 = &(*_32);
        _30 = move _31 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_31);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_21;
        _39 = &(*_40);
        _38 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _39) -> [return: bb11, unwind: bb214];
    }

    bb11: {
        StorageDead(_39);
        _37 = [move _38];
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = move _35 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_35);
        _29 = Arguments::<'_>::new_v1(move _30, move _34) -> [return: bb12, unwind: bb214];
    }

    bb12: {
        StorageDead(_34);
        StorageDead(_30);
        _28 = format(move _29) -> [return: bb13, unwind: bb214];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_40);
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_32);
        _27 = move _28;
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = <String as Deref>::deref(move _25) -> [return: bb14, unwind: bb212];
    }

    bb14: {
        _23 = &(*_24);
        StorageDead(_25);
        _22 = solana_program::log::sol_log(move _23) -> [return: bb15, unwind: bb212];
    }

    bb15: {
        StorageDead(_23);
        drop(_27) -> [return: bb16, unwind: bb214];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_22);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = const "instruction index must be greater than 0 to include the sig verify ix";
        _42 = &(*_43);
        _41 = solana_program::log::sol_log(move _42) -> [return: bb17, unwind: bb214];
    }

    bb17: {
        StorageDead(_42);
        StorageDead(_43);
        StorageDead(_41);
        StorageLive(_44);
        _44 = _21;
        _17 = std::result::Result::<(), error::ErrorCode>::Err(move _44);
        StorageDead(_44);
        StorageDead(_21);
        goto -> bb18;
    }

    bb18: {
        StorageDead(_18);
        _16 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _17) -> [return: bb19, unwind: bb214];
    }

    bb19: {
        StorageDead(_17);
        _45 = discriminant(_16);
        switchInt(move _45) -> [0: bb20, 1: bb21, otherwise: bb5];
    }

    bb20: {
        StorageLive(_49);
        _49 = ((_16 as Continue).0: ());
        _15 = _49;
        StorageDead(_49);
        StorageDead(_16);
        StorageDead(_15);
        StorageLive(_50);
        _50 = (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _424 = deref_copy (_1.1: &mut instructions::pyth_lazer_oracle::UpdatePythLazerOracle<'_>);
        _54 = &((*_424).1: anchor_lang::prelude::AccountInfo<'_>);
        _53 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _54) -> [return: bb23, unwind: bb214];
    }

    bb21: {
        StorageLive(_46);
        _46 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb22, unwind: bb214];
    }

    bb22: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb201;
    }

    bb23: {
        StorageDead(_54);
        _52 = <std::result::Result<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError> as Try>::branch(move _53) -> [return: bb24, unwind: bb214];
    }

    bb24: {
        StorageDead(_53);
        _55 = discriminant(_52);
        switchInt(move _55) -> [0: bb25, 1: bb26, otherwise: bb5];
    }

    bb25: {
        StorageLive(_59);
        _59 = move ((_52 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _51 = move _59;
        StorageDead(_59);
        _435 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_51;
        _68 = <Ref<'_, &mut [u8]> as Deref>::deref(move _69) -> [return: bb28, unwind: bb211];
    }

    bb26: {
        StorageLive(_56);
        _56 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_58);
        _58 = move _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _58) -> [return: bb27, unwind: bb223];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_56);
        _465 = discriminant(_52);
        StorageDead(_52);
        goto -> bb199;
    }

    bb28: {
        _425 = deref_copy (*_68);
        _67 = &(*_425);
        StorageDead(_69);
        StorageLive(_70);
        _70 = RangeFull;
        _66 = <[u8] as Index<RangeFull>>::index(move _67, move _70) -> [return: bb29, unwind: bb211];
    }

    bb29: {
        StorageDead(_70);
        StorageDead(_67);
        _65 = &(*_66);
        _64 = &mut _65;
        _63 = &mut (*_64);
        _62 = <Storage as anchor_lang::AccountDeserialize>::try_deserialize(move _63) -> [return: bb30, unwind: bb211];
    }

    bb30: {
        StorageDead(_63);
        _61 = <std::result::Result<Storage, anchor_lang::error::Error> as Try>::branch(move _62) -> [return: bb31, unwind: bb211];
    }

    bb31: {
        StorageDead(_62);
        _71 = discriminant(_61);
        switchInt(move _71) -> [0: bb32, 1: bb33, otherwise: bb5];
    }

    bb32: {
        StorageLive(_75);
        _75 = move ((_61 as Continue).0: pyth_lazer_solana_contract::Storage);
        _60 = move _75;
        StorageDead(_75);
        _437 = discriminant(_61);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_61);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &_60;
        _79 = &(*_80);
        StorageLive(_81);
        StorageLive(_82);
        _426 = deref_copy (_1.1: &mut instructions::pyth_lazer_oracle::UpdatePythLazerOracle<'_>);
        _82 = &((*_426).2: anchor_lang::prelude::AccountInfo<'_>);
        _81 = &(*_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_2;
        _85 = &(*_86);
        _84 = <Vec<u8> as Deref>::deref(move _85) -> [return: bb35, unwind: bb211];
    }

    bb33: {
        StorageLive(_72);
        _72 = move ((_61 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_74);
        _74 = move _72;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _74) -> [return: bb34, unwind: bb222];
    }

    bb34: {
        StorageDead(_74);
        StorageDead(_72);
        _463 = discriminant(_61);
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_61);
        goto -> bb198;
    }

    bb35: {
        _83 = &(*_84);
        StorageDead(_85);
        StorageLive(_87);
        StorageLive(_88);
        _88 = _3;
        _89 = CheckedSub(_88, const 1_u16);
        assert(!move (_89.1: bool), "attempt to compute `{} - {}`, which would overflow", move _88, const 1_u16) -> [success: bb36, unwind: bb211];
    }

    bb36: {
        _87 = move (_89.0: u16);
        StorageDead(_88);
        _78 = verify_message_direct(move _79, move _81, move _83, move _87, const 0_u8) -> [return: bb37, unwind: bb211];
    }

    bb37: {
        StorageDead(_87);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_79);
        _77 = <std::result::Result<pyth_lazer_solana_contract::signature::VerifiedMessage, anchor_lang::error::Error> as Try>::branch(move _78) -> [return: bb38, unwind: bb211];
    }

    bb38: {
        _431 = const true;
        _432 = const true;
        StorageDead(_78);
        _90 = discriminant(_77);
        switchInt(move _90) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_94);
        _94 = move ((_77 as Continue).0: pyth_lazer_solana_contract::signature::VerifiedMessage);
        _76 = move _94;
        StorageDead(_94);
        drop(_76) -> [return: bb42, unwind: bb221];
    }

    bb40: {
        StorageLive(_91);
        _91 = move ((_77 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb41, unwind: bb221];
    }

    bb41: {
        StorageDead(_93);
        StorageDead(_91);
        _461 = discriminant(_77);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_80);
        _431 = const false;
        _432 = const false;
        StorageDead(_77);
        StorageDead(_76);
        goto -> bb198;
    }

    bb42: {
        _439 = discriminant(_77);
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_82);
        StorageDead(_80);
        _431 = const false;
        _432 = const false;
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_2;
        _101 = &(*_102);
        _100 = <Vec<u8> as Deref>::deref(move _101) -> [return: bb43, unwind: bb211];
    }

    bb43: {
        _99 = &(*_100);
        StorageDead(_101);
        _98 = SolanaMessage::deserialize_slice(move _99) -> [return: bb44, unwind: bb211];
    }

    bb44: {
        StorageDead(_99);
        StorageLive(_103);
        _103 = {closure@programs/drift/src/instructions/pyth_lazer_oracle.rs:41:18: 41:21};
        _97 = std::result::Result::<SolanaMessage, anyhow::Error>::map_err::<anchor_lang::prelude::ProgramError, {closure@programs/drift/src/instructions/pyth_lazer_oracle.rs:41:18: 41:21}>(move _98, move _103) -> [return: bb45, unwind: bb211];
    }

    bb45: {
        StorageDead(_103);
        StorageDead(_98);
        _96 = <std::result::Result<SolanaMessage, anchor_lang::prelude::ProgramError> as Try>::branch(move _97) -> [return: bb46, unwind: bb211];
    }

    bb46: {
        StorageDead(_97);
        _104 = discriminant(_96);
        switchInt(move _104) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_108);
        _108 = move ((_96 as Continue).0: pyth_lazer_solana_contract::pyth_lazer_protocol::message::SolanaMessage);
        _95 = move _108;
        StorageDead(_108);
        _441 = discriminant(_96);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_96);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = &(_95.0: std::vec::Vec<u8>);
        _115 = &(*_116);
        _114 = <Vec<u8> as Deref>::deref(move _115) -> [return: bb50, unwind: bb210];
    }

    bb48: {
        StorageLive(_105);
        _105 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_107);
        _107 = move _105;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _107) -> [return: bb49, unwind: bb220];
    }

    bb49: {
        StorageDead(_107);
        StorageDead(_105);
        _459 = discriminant(_96);
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_96);
        goto -> bb197;
    }

    bb50: {
        _113 = &(*_114);
        StorageDead(_115);
        _112 = PayloadData::deserialize_slice_le(move _113) -> [return: bb51, unwind: bb210];
    }

    bb51: {
        StorageDead(_113);
        StorageLive(_117);
        _117 = {closure@programs/drift/src/instructions/pyth_lazer_oracle.rs:44:18: 44:21};
        _111 = std::result::Result::<PayloadData, anyhow::Error>::map_err::<anchor_lang::prelude::ProgramError, {closure@programs/drift/src/instructions/pyth_lazer_oracle.rs:44:18: 44:21}>(move _112, move _117) -> [return: bb52, unwind: bb210];
    }

    bb52: {
        StorageDead(_117);
        StorageDead(_112);
        _110 = <std::result::Result<PayloadData, anchor_lang::prelude::ProgramError> as Try>::branch(move _111) -> [return: bb53, unwind: bb210];
    }

    bb53: {
        StorageDead(_111);
        _118 = discriminant(_110);
        switchInt(move _118) -> [0: bb54, 1: bb55, otherwise: bb5];
    }

    bb54: {
        StorageLive(_122);
        _122 = move ((_110 as Continue).0: pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadData);
        _109 = move _122;
        StorageDead(_122);
        _443 = discriminant(_110);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_110);
        StorageLive(_123);
        _123 = ((_109.0: pyth_lazer_solana_contract::pyth_lazer_protocol::router::TimestampUs).0: u64);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_50);
        _128 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::len(move _129) -> [return: bb57, unwind: bb209];
    }

    bb55: {
        StorageLive(_119);
        _119 = move ((_110 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_121);
        _121 = move _119;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _121) -> [return: bb56, unwind: bb219];
    }

    bb56: {
        StorageDead(_121);
        StorageDead(_119);
        _457 = discriminant(_110);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_110);
        goto -> bb196;
    }

    bb57: {
        StorageDead(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &(_109.2: std::vec::Vec<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>);
        _130 = Vec::<PayloadFeedData>::len(move _131) -> [return: bb58, unwind: bb209];
    }

    bb58: {
        StorageDead(_131);
        _127 = Eq(move _128, move _130);
        switchInt(move _127) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        StorageDead(_130);
        StorageDead(_128);
        StorageLive(_132);
        _132 = ();
        _126 = std::result::Result::<(), error::ErrorCode>::Ok(move _132);
        StorageDead(_132);
        goto -> bb67;
    }

    bb60: {
        StorageDead(_130);
        StorageDead(_128);
        StorageLive(_133);
        _133 = error::ErrorCode::OracleMismatchedVaaAndPriceUpdates;
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        _421 = const _;
        _144 = &(*_421);
        _143 = &(*_144);
        _142 = move _143 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_143);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_133;
        _151 = &(*_152);
        _150 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _151) -> [return: bb61, unwind: bb209];
    }

    bb61: {
        StorageDead(_151);
        _149 = [move _150];
        StorageDead(_150);
        _148 = &_149;
        _147 = &(*_148);
        _146 = move _147 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_147);
        _141 = Arguments::<'_>::new_v1(move _142, move _146) -> [return: bb62, unwind: bb209];
    }

    bb62: {
        StorageDead(_146);
        StorageDead(_142);
        _140 = format(move _141) -> [return: bb63, unwind: bb209];
    }

    bb63: {
        StorageDead(_141);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_144);
        _139 = move _140;
        StorageDead(_140);
        _138 = &_139;
        _137 = &(*_138);
        _136 = <String as Deref>::deref(move _137) -> [return: bb64, unwind: bb208];
    }

    bb64: {
        _135 = &(*_136);
        StorageDead(_137);
        _134 = solana_program::log::sol_log(move _135) -> [return: bb65, unwind: bb208];
    }

    bb65: {
        StorageDead(_135);
        drop(_139) -> [return: bb66, unwind: bb209];
    }

    bb66: {
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        StorageLive(_153);
        _153 = _133;
        _126 = std::result::Result::<(), error::ErrorCode>::Err(move _153);
        StorageDead(_153);
        StorageDead(_133);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_127);
        _125 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _126) -> [return: bb68, unwind: bb209];
    }

    bb68: {
        StorageDead(_126);
        _154 = discriminant(_125);
        switchInt(move _154) -> [0: bb69, 1: bb70, otherwise: bb5];
    }

    bb69: {
        StorageLive(_158);
        _158 = ((_125 as Continue).0: ());
        _124 = _158;
        StorageDead(_158);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = &(*_50);
        _162 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _163) -> [return: bb72, unwind: bb209];
    }

    bb70: {
        StorageLive(_155);
        _155 = ((_125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_157);
        _157 = _155;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _157) -> [return: bb71, unwind: bb209];
    }

    bb71: {
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb195;
    }

    bb72: {
        StorageDead(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = &(_109.2: std::vec::Vec<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData>);
        _166 = <Vec<PayloadFeedData> as Deref>::deref(move _167) -> [return: bb73, unwind: bb209];
    }

    bb73: {
        _165 = &(*_166);
        StorageDead(_167);
        _164 = core::slice::<impl [PayloadFeedData]>::iter(move _165) -> [return: bb74, unwind: bb209];
    }

    bb74: {
        StorageDead(_165);
        _161 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::zip::<std::slice::Iter<'_, PayloadFeedData>>(move _162, move _164) -> [return: bb75, unwind: bb209];
    }

    bb75: {
        StorageDead(_164);
        StorageDead(_162);
        _160 = <Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, PayloadFeedData>> as IntoIterator>::into_iter(move _161) -> [return: bb76, unwind: bb209];
    }

    bb76: {
        StorageDead(_161);
        StorageLive(_168);
        _168 = move _160;
        goto -> bb77;
    }

    bb77: {
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        _173 = &mut _168;
        _172 = &mut (*_173);
        _171 = <Zip<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>, std::slice::Iter<'_, PayloadFeedData>> as Iterator>::next(move _172) -> [return: bb78, unwind: bb209];
    }

    bb78: {
        StorageDead(_172);
        _174 = discriminant(_171);
        switchInt(move _174) -> [0: bb80, 1: bb79, otherwise: bb5];
    }

    bb79: {
        StorageLive(_176);
        _176 = (((_171 as Some).0: (&anchor_lang::prelude::AccountInfo<'_>, &pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData)).0: &anchor_lang::prelude::AccountInfo<'_>);
        StorageLive(_177);
        _177 = (((_171 as Some).0: (&anchor_lang::prelude::AccountInfo<'_>, &pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData)).1: &pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadFeedData);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        _181 = &(*_176);
        _180 = anchor_lang::prelude::AccountLoader::<'_, PythLazerOracle>::try_from(move _181) -> [return: bb81, unwind: bb209];
    }

    bb80: {
        _159 = const ();
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_160);
        StorageDead(_159);
        StorageLive(_415);
        _415 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _415);
        StorageDead(_415);
        StorageDead(_123);
        drop(_109) -> [return: bb186, unwind: bb210];
    }

    bb81: {
        StorageDead(_181);
        _179 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, PythLazerOracle>, anchor_lang::error::Error> as Try>::branch(move _180) -> [return: bb82, unwind: bb209];
    }

    bb82: {
        StorageDead(_180);
        _182 = discriminant(_179);
        switchInt(move _182) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_186);
        _186 = move ((_179 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::pyth_lazer_oracle::PythLazerOracle>);
        _178 = move _186;
        StorageDead(_186);
        _445 = discriminant(_179);
        StorageDead(_179);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_178;
        _189 = anchor_lang::prelude::AccountLoader::<'_, PythLazerOracle>::load_mut(move _190) -> [return: bb86, unwind: bb209];
    }

    bb84: {
        StorageLive(_183);
        _183 = move ((_179 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_185);
        _185 = move _183;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _185) -> [return: bb85, unwind: bb218];
    }

    bb85: {
        StorageDead(_185);
        StorageDead(_183);
        _455 = discriminant(_179);
        StorageDead(_179);
        goto -> bb194;
    }

    bb86: {
        StorageDead(_190);
        _188 = <std::result::Result<RefMut<'_, PythLazerOracle>, anchor_lang::error::Error> as Try>::branch(move _189) -> [return: bb87, unwind: bb209];
    }

    bb87: {
        StorageDead(_189);
        _191 = discriminant(_188);
        switchInt(move _191) -> [0: bb88, 1: bb89, otherwise: bb5];
    }

    bb88: {
        StorageLive(_195);
        _195 = move ((_188 as Continue).0: std::cell::RefMut<'_, state::pyth_lazer_oracle::PythLazerOracle>);
        _187 = move _195;
        StorageDead(_195);
        _447 = discriminant(_188);
        StorageDead(_188);
        StorageLive(_196);
        _196 = (((*_177).0: pyth_lazer_solana_contract::pyth_lazer_protocol::router::PriceFeedId).0: u32);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = const _;
        _203 = &(*_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = _196;
        _208 = core::num::<impl u32>::to_le_bytes(move _209) -> [return: bb91, unwind: bb207];
    }

    bb89: {
        StorageLive(_192);
        _192 = move ((_188 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_194);
        _194 = move _192;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _194) -> [return: bb90, unwind: bb217];
    }

    bb90: {
        StorageDead(_194);
        StorageDead(_192);
        _453 = discriminant(_188);
        StorageDead(_188);
        goto -> bb193;
    }

    bb91: {
        StorageDead(_209);
        _207 = &_208;
        _206 = &(*_207);
        _205 = move _206 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_206);
        _202 = [move _203, move _205];
        StorageDead(_205);
        StorageDead(_203);
        _201 = &_202;
        _200 = &(*_201);
        _199 = move _200 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_200);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = const {alloc266: &anchor_lang::prelude::Pubkey};
        _211 = &(*_212);
        _210 = &(*_211);
        _198 = anchor_lang::prelude::Pubkey::find_program_address(move _199, move _210) -> [return: bb92, unwind: bb207];
    }

    bb92: {
        StorageDead(_210);
        StorageDead(_199);
        _197 = (_198.0: anchor_lang::prelude::Pubkey);
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_198);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _427 = deref_copy ((*_176).0: &anchor_lang::prelude::Pubkey);
        _215 = &(*_427);
        StorageLive(_216);
        _216 = &_197;
        _214 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _215, move _216) -> [return: bb93, unwind: bb207];
    }

    bb93: {
        switchInt(move _214) -> [0: bb100, otherwise: bb94];
    }

    bb94: {
        StorageDead(_216);
        StorageDead(_215);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        _417 = const _;
        _222 = &(*_417);
        _221 = error::ErrorCode::name(move _222) -> [return: bb95, unwind: bb207];
    }

    bb95: {
        StorageDead(_222);
        StorageLive(_224);
        StorageLive(_225);
        _225 = error::ErrorCode::OracleBadRemainingAccountPublicKey;
        _224 = <error::ErrorCode as Into<u32>>::into(move _225) -> [return: bb96, unwind: bb206];
    }

    bb96: {
        StorageDead(_225);
        StorageLive(_226);
        StorageLive(_227);
        _416 = const _;
        _227 = &(*_416);
        _226 = <error::ErrorCode as ToString>::to_string(move _227) -> [return: bb97, unwind: bb206];
    }

    bb97: {
        StorageDead(_227);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        _231 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/pyth_lazer_oracle.rs", line: const 65_u32 };
        _230 = anchor_lang::error::ErrorOrigin::Source(move _231);
        StorageDead(_231);
        _229 = Option::<ErrorOrigin>::Some(move _230);
        StorageDead(_230);
        StorageLive(_232);
        _232 = Option::<ComparedValues>::None;
        _220 = anchor_lang::error::AnchorError { error_name: move _221, error_code_number: move _224, error_msg: move _226, error_origin: move _229, compared_values: move _232 };
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_221);
        _219 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _220) -> [return: bb98, unwind: bb207];
    }

    bb98: {
        StorageDead(_220);
        StorageLive(_233);
        StorageLive(_234);
        _428 = deref_copy ((*_176).0: &anchor_lang::prelude::Pubkey);
        _234 = (*_428);
        StorageLive(_235);
        _235 = _197;
        _233 = (move _234, move _235);
        StorageDead(_235);
        StorageDead(_234);
        _218 = anchor_lang::error::Error::with_pubkeys(move _219, move _233) -> [return: bb99, unwind: bb207];
    }

    bb99: {
        StorageDead(_233);
        StorageDead(_219);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _218);
        StorageDead(_218);
        StorageDead(_214);
        StorageDead(_213);
        goto -> bb192;
    }

    bb100: {
        StorageDead(_216);
        StorageDead(_215);
        _213 = const ();
        StorageDead(_214);
        StorageDead(_213);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _238 = &_187;
        _237 = <RefMut<'_, PythLazerOracle> as Deref>::deref(move _238) -> [return: bb101, unwind: bb207];
    }

    bb101: {
        StorageDead(_238);
        _236 = ((*_237).1: u64);
        StorageDead(_237);
        StorageLive(_239);
        StorageLive(_240);
        _240 = _123;
        StorageLive(_241);
        _241 = _236;
        _239 = Gt(move _240, move _241);
        switchInt(move _239) -> [0: bb176, otherwise: bb102];
    }

    bb102: {
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &((*_177).1: std::vec::Vec<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>);
        _246 = <Vec<PayloadPropertyValue> as Index<usize>>::index(move _247, const 0_usize) -> [return: bb104, unwind: bb207];
    }

    bb103: {
        StorageDead(_244);
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Err(move _243);
        StorageDead(_243);
        goto -> bb191;
    }

    bb104: {
        StorageDead(_247);
        _249 = discriminant((*_246));
        switchInt(move _249) -> [0: bb105, otherwise: bb107];
    }

    bb105: {
        _248 = discriminant((((*_246) as Price).0: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>));
        switchInt(move _248) -> [1: bb106, otherwise: bb107];
    }

    bb106: {
        _245 = (((((*_246) as Price).0: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>) as Some).0: pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price);
        StorageDead(_246);
        StorageLive(_250);
        _250 = Option::<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>::None;
        StorageLive(_251);
        _251 = Option::<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>::None;
        StorageLive(_252);
        _252 = Option::<i16>::None;
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &((*_177).1: std::vec::Vec<pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue>);
        _254 = <&Vec<PayloadPropertyValue> as IntoIterator>::into_iter(move _255) -> [return: bb108, unwind: bb207];
    }

    bb107: {
        StorageDead(_246);
        StorageDead(_245);
        StorageLive(_243);
        StorageLive(_244);
        _244 = error::ErrorCode::InvalidPythLazerMessage;
        _243 = <error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _244) -> [return: bb103, unwind: bb207];
    }

    bb108: {
        StorageDead(_255);
        StorageLive(_256);
        _256 = move _254;
        goto -> bb109;
    }

    bb109: {
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _260 = &mut _256;
        _259 = &mut (*_260);
        _258 = <std::slice::Iter<'_, PayloadPropertyValue> as Iterator>::next(move _259) -> [return: bb110, unwind: bb207];
    }

    bb110: {
        StorageDead(_259);
        _261 = discriminant(_258);
        switchInt(move _261) -> [0: bb112, 1: bb111, otherwise: bb5];
    }

    bb111: {
        StorageLive(_263);
        _263 = ((_258 as Some).0: &pyth_lazer_solana_contract::pyth_lazer_protocol::payload::PayloadPropertyValue);
        _264 = discriminant((*_263));
        switchInt(move _264) -> [1: bb114, 2: bb115, 4: bb116, otherwise: bb113];
    }

    bb112: {
        _253 = const ();
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_253);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = _252;
        StorageLive(_276);
        _276 = error::ErrorCode::InvalidPythLazerMessage;
        _274 = Option::<i16>::ok_or::<error::ErrorCode>(move _275, move _276) -> [return: bb118, unwind: bb207];
    }

    bb113: {
        _257 = const ();
        goto -> bb117;
    }

    bb114: {
        StorageLive(_265);
        _265 = &(((*_263) as BestBidPrice).0: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>);
        StorageLive(_266);
        _266 = (*_265);
        _250 = move _266;
        _257 = const ();
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb117;
    }

    bb115: {
        StorageLive(_267);
        _267 = &(((*_263) as BestAskPrice).0: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>);
        StorageLive(_268);
        _268 = (*_267);
        _251 = move _268;
        _257 = const ();
        StorageDead(_268);
        StorageDead(_267);
        goto -> bb117;
    }

    bb116: {
        StorageLive(_269);
        _269 = &(((*_263) as Exponent).0: i16);
        StorageLive(_270);
        StorageLive(_271);
        _271 = (*_269);
        _270 = Option::<i16>::Some(move _271);
        StorageDead(_271);
        _252 = move _270;
        _257 = const ();
        StorageDead(_270);
        StorageDead(_269);
        goto -> bb117;
    }

    bb117: {
        StorageDead(_263);
        StorageDead(_260);
        StorageDead(_258);
        StorageDead(_257);
        _169 = const ();
        goto -> bb109;
    }

    bb118: {
        StorageDead(_276);
        StorageDead(_275);
        _273 = <std::result::Result<i16, error::ErrorCode> as Try>::branch(move _274) -> [return: bb119, unwind: bb207];
    }

    bb119: {
        StorageDead(_274);
        _277 = discriminant(_273);
        switchInt(move _277) -> [0: bb120, 1: bb121, otherwise: bb5];
    }

    bb120: {
        StorageLive(_281);
        _281 = ((_273 as Continue).0: i16);
        _272 = _281;
        StorageDead(_281);
        StorageDead(_273);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = (_245.0: std::num::NonZeroI64);
        _285 = NonZeroI64::get(move _286) -> [return: bb123, unwind: bb207];
    }

    bb121: {
        StorageLive(_278);
        _278 = ((_273 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_280);
        _280 = _278;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _280) -> [return: bb122, unwind: bb207];
    }

    bb122: {
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_273);
        goto -> bb190;
    }

    bb123: {
        StorageDead(_286);
        _284 = <i64 as SafeMath>::safe_div(move _285, const 500_i64) -> [return: bb124, unwind: bb207];
    }

    bb124: {
        StorageDead(_285);
        _283 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _284) -> [return: bb125, unwind: bb207];
    }

    bb125: {
        StorageDead(_284);
        _287 = discriminant(_283);
        switchInt(move _287) -> [0: bb126, 1: bb127, otherwise: bb5];
    }

    bb126: {
        StorageLive(_291);
        _291 = ((_283 as Continue).0: i64);
        _282 = _291;
        StorageDead(_291);
        StorageDead(_283);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        _294 = _250;
        StorageLive(_295);
        _295 = _251;
        _293 = (move _294, move _295);
        StorageDead(_295);
        StorageDead(_294);
        _297 = discriminant((_293.0: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>));
        switchInt(move _297) -> [1: bb130, otherwise: bb129];
    }

    bb127: {
        StorageLive(_288);
        _288 = ((_283 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_290);
        _290 = _288;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _290) -> [return: bb128, unwind: bb207];
    }

    bb128: {
        StorageDead(_290);
        StorageDead(_288);
        StorageDead(_283);
        goto -> bb189;
    }

    bb129: {
        _292 = const ();
        goto -> bb140;
    }

    bb130: {
        _296 = discriminant((_293.1: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>));
        switchInt(move _296) -> [1: bb131, otherwise: bb129];
    }

    bb131: {
        StorageLive(_298);
        _298 = (((_293.0: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>) as Some).0: pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price);
        StorageLive(_299);
        _299 = (((_293.1: std::option::Option<pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price>) as Some).0: pyth_lazer_solana_contract::pyth_lazer_protocol::router::Price);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = (_298.0: std::num::NonZeroI64);
        _301 = NonZeroI64::get(move _302) -> [return: bb132, unwind: bb207];
    }

    bb132: {
        StorageDead(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = (_299.0: std::num::NonZeroI64);
        _303 = NonZeroI64::get(move _304) -> [return: bb133, unwind: bb207];
    }

    bb133: {
        StorageDead(_304);
        _300 = Lt(move _301, move _303);
        switchInt(move _300) -> [0: bb138, otherwise: bb134];
    }

    bb134: {
        StorageDead(_303);
        StorageDead(_301);
        StorageLive(_305);
        StorageLive(_306);
        _306 = (_299.0: std::num::NonZeroI64);
        _305 = NonZeroI64::get(move _306) -> [return: bb135, unwind: bb207];
    }

    bb135: {
        StorageDead(_306);
        StorageLive(_307);
        StorageLive(_308);
        _308 = (_298.0: std::num::NonZeroI64);
        _307 = NonZeroI64::get(move _308) -> [return: bb136, unwind: bb207];
    }

    bb136: {
        StorageDead(_308);
        _309 = CheckedSub(_305, _307);
        assert(!move (_309.1: bool), "attempt to compute `{} - {}`, which would overflow", move _305, move _307) -> [success: bb137, unwind: bb207];
    }

    bb137: {
        _282 = move (_309.0: i64);
        StorageDead(_307);
        StorageDead(_305);
        _292 = const ();
        goto -> bb139;
    }

    bb138: {
        StorageDead(_303);
        StorageDead(_301);
        _292 = const ();
        goto -> bb139;
    }

    bb139: {
        StorageDead(_300);
        StorageDead(_299);
        StorageDead(_298);
        goto -> bb140;
    }

    bb140: {
        StorageDead(_293);
        StorageDead(_292);
        StorageLive(_310);
        StorageLive(_311);
        _311 = (_245.0: std::num::NonZeroI64);
        _310 = NonZeroI64::get(move _311) -> [return: bb141, unwind: bb207];
    }

    bb141: {
        StorageDead(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = &mut _187;
        _312 = <RefMut<'_, PythLazerOracle> as DerefMut>::deref_mut(move _313) -> [return: bb142, unwind: bb207];
    }

    bb142: {
        StorageDead(_313);
        ((*_312).0: i64) = move _310;
        StorageDead(_310);
        StorageDead(_312);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        _317 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb143, unwind: bb207];
    }

    bb143: {
        _316 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _317) -> [return: bb144, unwind: bb207];
    }

    bb144: {
        _429 = const true;
        _430 = const true;
        StorageDead(_317);
        _318 = discriminant(_316);
        switchInt(move _318) -> [0: bb145, 1: bb146, otherwise: bb5];
    }

    bb145: {
        StorageLive(_322);
        _322 = move ((_316 as Continue).0: anchor_lang::prelude::Clock);
        _315 = move _322;
        StorageDead(_322);
        _314 = (_315.0: u64);
        StorageLive(_323);
        StorageLive(_324);
        _324 = &mut _187;
        _323 = <RefMut<'_, PythLazerOracle> as DerefMut>::deref_mut(move _324) -> [return: bb148, unwind: bb216];
    }

    bb146: {
        StorageLive(_319);
        _319 = move ((_316 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_321);
        _321 = move _319;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _321) -> [return: bb147, unwind: bb216];
    }

    bb147: {
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_314);
        _451 = discriminant(_316);
        _429 = const false;
        _430 = const false;
        StorageDead(_316);
        StorageDead(_315);
        goto -> bb189;
    }

    bb148: {
        StorageDead(_324);
        ((*_323).2: u64) = move _314;
        StorageDead(_314);
        StorageDead(_323);
        _449 = discriminant(_316);
        _429 = const false;
        _430 = const false;
        StorageDead(_316);
        StorageDead(_315);
        StorageLive(_325);
        _325 = _123;
        StorageLive(_326);
        StorageLive(_327);
        _327 = &mut _187;
        _326 = <RefMut<'_, PythLazerOracle> as DerefMut>::deref_mut(move _327) -> [return: bb149, unwind: bb207];
    }

    bb149: {
        StorageDead(_327);
        ((*_326).1: u64) = move _325;
        StorageDead(_325);
        StorageDead(_326);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        _331 = _272;
        _330 = <i16 as Cast>::cast::<i32>(move _331) -> [return: bb150, unwind: bb207];
    }

    bb150: {
        StorageDead(_331);
        _329 = <std::result::Result<i32, error::ErrorCode> as Try>::branch(move _330) -> [return: bb151, unwind: bb207];
    }

    bb151: {
        StorageDead(_330);
        _332 = discriminant(_329);
        switchInt(move _332) -> [0: bb152, 1: bb153, otherwise: bb5];
    }

    bb152: {
        StorageLive(_336);
        _336 = ((_329 as Continue).0: i32);
        _328 = _336;
        StorageDead(_336);
        StorageLive(_337);
        StorageLive(_338);
        _338 = &mut _187;
        _337 = <RefMut<'_, PythLazerOracle> as DerefMut>::deref_mut(move _338) -> [return: bb155, unwind: bb207];
    }

    bb153: {
        StorageLive(_333);
        _333 = ((_329 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_335);
        _335 = _333;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _335) -> [return: bb154, unwind: bb207];
    }

    bb154: {
        StorageDead(_335);
        StorageDead(_333);
        StorageDead(_328);
        StorageDead(_329);
        goto -> bb189;
    }

    bb155: {
        StorageDead(_338);
        ((*_337).3: i32) = move _328;
        StorageDead(_328);
        StorageDead(_337);
        StorageDead(_329);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = _282;
        _341 = <i64 as Cast>::cast::<u64>(move _342) -> [return: bb156, unwind: bb207];
    }

    bb156: {
        StorageDead(_342);
        _340 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _341) -> [return: bb157, unwind: bb207];
    }

    bb157: {
        StorageDead(_341);
        _343 = discriminant(_340);
        switchInt(move _343) -> [0: bb158, 1: bb159, otherwise: bb5];
    }

    bb158: {
        StorageLive(_347);
        _347 = ((_340 as Continue).0: u64);
        _339 = _347;
        StorageDead(_347);
        StorageLive(_348);
        StorageLive(_349);
        _349 = &mut _187;
        _348 = <RefMut<'_, PythLazerOracle> as DerefMut>::deref_mut(move _349) -> [return: bb161, unwind: bb207];
    }

    bb159: {
        StorageLive(_344);
        _344 = ((_340 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_346);
        _346 = _344;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _346) -> [return: bb160, unwind: bb207];
    }

    bb160: {
        StorageDead(_346);
        StorageDead(_344);
        StorageDead(_339);
        StorageDead(_340);
        goto -> bb189;
    }

    bb161: {
        StorageDead(_349);
        ((*_348).5: u64) = move _339;
        StorageDead(_339);
        StorageDead(_348);
        StorageDead(_340);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        _419 = const _;
        _360 = &(*_419);
        _359 = &(*_360);
        _358 = move _359 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_359);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _370 = (_245.0: std::num::NonZeroI64);
        _369 = NonZeroI64::get(move _370) -> [return: bb162, unwind: bb207];
    }

    bb162: {
        StorageDead(_370);
        _368 = &_369;
        _367 = &(*_368);
        _366 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _367) -> [return: bb163, unwind: bb207];
    }

    bb163: {
        StorageDead(_367);
        _365 = [move _366];
        StorageDead(_366);
        _364 = &_365;
        _363 = &(*_364);
        _362 = move _363 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_363);
        _357 = Arguments::<'_>::new_v1(move _358, move _362) -> [return: bb164, unwind: bb207];
    }

    bb164: {
        StorageDead(_362);
        StorageDead(_358);
        _356 = format(move _357) -> [return: bb165, unwind: bb207];
    }

    bb165: {
        StorageDead(_357);
        StorageDead(_369);
        StorageDead(_368);
        StorageDead(_365);
        StorageDead(_364);
        StorageDead(_360);
        _355 = move _356;
        StorageDead(_356);
        _354 = &_355;
        _353 = &(*_354);
        _352 = <String as Deref>::deref(move _353) -> [return: bb166, unwind: bb205];
    }

    bb166: {
        _351 = &(*_352);
        StorageDead(_353);
        _350 = solana_program::log::sol_log(move _351) -> [return: bb167, unwind: bb205];
    }

    bb167: {
        StorageDead(_351);
        drop(_355) -> [return: bb168, unwind: bb207];
    }

    bb168: {
        StorageDead(_355);
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_350);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _418 = const _;
        _381 = &(*_418);
        _380 = &(*_381);
        _379 = move _380 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_380);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = &_236;
        _388 = &(*_389);
        _387 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _388) -> [return: bb169, unwind: bb207];
    }

    bb169: {
        StorageDead(_388);
        StorageLive(_390);
        StorageLive(_391);
        StorageLive(_392);
        _392 = &_123;
        _391 = &(*_392);
        _390 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _391) -> [return: bb170, unwind: bb207];
    }

    bb170: {
        StorageDead(_391);
        _386 = [move _387, move _390];
        StorageDead(_390);
        StorageDead(_387);
        _385 = &_386;
        _384 = &(*_385);
        _383 = move _384 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_384);
        _378 = Arguments::<'_>::new_v1(move _379, move _383) -> [return: bb171, unwind: bb207];
    }

    bb171: {
        StorageDead(_383);
        StorageDead(_379);
        _377 = format(move _378) -> [return: bb172, unwind: bb207];
    }

    bb172: {
        StorageDead(_378);
        StorageDead(_392);
        StorageDead(_389);
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_381);
        _376 = move _377;
        StorageDead(_377);
        _375 = &_376;
        _374 = &(*_375);
        _373 = <String as Deref>::deref(move _374) -> [return: bb173, unwind: bb204];
    }

    bb173: {
        _372 = &(*_373);
        StorageDead(_374);
        _371 = solana_program::log::sol_log(move _372) -> [return: bb174, unwind: bb204];
    }

    bb174: {
        StorageDead(_372);
        drop(_376) -> [return: bb175, unwind: bb207];
    }

    bb175: {
        StorageDead(_376);
        StorageDead(_375);
        StorageDead(_373);
        StorageDead(_371);
        _170 = const ();
        StorageDead(_282);
        StorageDead(_272);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_245);
        goto -> bb184;
    }

    bb176: {
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        _420 = const _;
        _403 = &(*_420);
        _402 = &(*_403);
        _401 = move _402 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_402);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &_236;
        _410 = &(*_411);
        _409 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _410) -> [return: bb177, unwind: bb207];
    }

    bb177: {
        StorageDead(_410);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_123;
        _413 = &(*_414);
        _412 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _413) -> [return: bb178, unwind: bb207];
    }

    bb178: {
        StorageDead(_413);
        _408 = [move _409, move _412];
        StorageDead(_412);
        StorageDead(_409);
        _407 = &_408;
        _406 = &(*_407);
        _405 = move _406 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_406);
        _400 = Arguments::<'_>::new_v1(move _401, move _405) -> [return: bb179, unwind: bb207];
    }

    bb179: {
        StorageDead(_405);
        StorageDead(_401);
        _399 = format(move _400) -> [return: bb180, unwind: bb207];
    }

    bb180: {
        StorageDead(_400);
        StorageDead(_414);
        StorageDead(_411);
        StorageDead(_408);
        StorageDead(_407);
        StorageDead(_403);
        _398 = move _399;
        StorageDead(_399);
        _397 = &_398;
        _396 = &(*_397);
        _395 = <String as Deref>::deref(move _396) -> [return: bb181, unwind: bb203];
    }

    bb181: {
        _394 = &(*_395);
        StorageDead(_396);
        _393 = solana_program::log::sol_log(move _394) -> [return: bb182, unwind: bb203];
    }

    bb182: {
        StorageDead(_394);
        drop(_398) -> [return: bb183, unwind: bb207];
    }

    bb183: {
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_395);
        StorageDead(_393);
        _170 = const ();
        goto -> bb184;
    }

    bb184: {
        StorageDead(_239);
        StorageDead(_236);
        StorageDead(_197);
        StorageDead(_196);
        drop(_187) -> [return: bb185, unwind: bb209];
    }

    bb185: {
        StorageDead(_187);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_170);
        _169 = const ();
        goto -> bb77;
    }

    bb186: {
        StorageDead(_109);
        drop(_95) -> [return: bb187, unwind: bb211];
    }

    bb187: {
        StorageDead(_95);
        StorageDead(_60);
        drop(_51) -> [return: bb188, unwind: bb214];
    }

    bb188: {
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_3);
        drop(_2) -> [return: bb202, unwind: bb215];
    }

    bb189: {
        StorageDead(_282);
        goto -> bb190;
    }

    bb190: {
        StorageDead(_272);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_245);
        goto -> bb191;
    }

    bb191: {
        StorageDead(_239);
        StorageDead(_236);
        goto -> bb192;
    }

    bb192: {
        StorageDead(_197);
        StorageDead(_196);
        drop(_187) -> [return: bb193, unwind: bb209];
    }

    bb193: {
        StorageDead(_187);
        goto -> bb194;
    }

    bb194: {
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_166);
        StorageDead(_160);
        StorageDead(_159);
        goto -> bb195;
    }

    bb195: {
        StorageDead(_123);
        drop(_109) -> [return: bb196, unwind: bb210];
    }

    bb196: {
        StorageDead(_109);
        drop(_95) -> [return: bb197, unwind: bb211];
    }

    bb197: {
        StorageDead(_95);
        goto -> bb198;
    }

    bb198: {
        StorageDead(_60);
        drop(_51) -> [return: bb199, unwind: bb214];
    }

    bb199: {
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb201;
    }

    bb200: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb201;
    }

    bb201: {
        StorageDead(_3);
        drop(_2) -> [return: bb202, unwind: bb215];
    }

    bb202: {
        return;
    }

    bb203 (cleanup): {
        drop(_398) -> [return: bb207, unwind terminate(cleanup)];
    }

    bb204 (cleanup): {
        drop(_376) -> [return: bb207, unwind terminate(cleanup)];
    }

    bb205 (cleanup): {
        drop(_355) -> [return: bb207, unwind terminate(cleanup)];
    }

    bb206 (cleanup): {
        drop(_221) -> [return: bb207, unwind terminate(cleanup)];
    }

    bb207 (cleanup): {
        drop(_187) -> [return: bb209, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        drop(_139) -> [return: bb209, unwind terminate(cleanup)];
    }

    bb209 (cleanup): {
        drop(_109) -> [return: bb210, unwind terminate(cleanup)];
    }

    bb210 (cleanup): {
        drop(_95) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        drop(_51) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb212 (cleanup): {
        drop(_27) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb213 (cleanup): {
        drop(_8) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        drop(_2) -> [return: bb215, unwind terminate(cleanup)];
    }

    bb215 (cleanup): {
        resume;
    }

    bb216 (cleanup): {
        _469 = discriminant(_316);
        goto -> bb207;
    }

    bb217 (cleanup): {
        _470 = discriminant(_188);
        goto -> bb209;
    }

    bb218 (cleanup): {
        _471 = discriminant(_179);
        goto -> bb209;
    }

    bb219 (cleanup): {
        _472 = discriminant(_110);
        goto -> bb210;
    }

    bb220 (cleanup): {
        _473 = discriminant(_96);
        goto -> bb211;
    }

    bb221 (cleanup): {
        _474 = discriminant(_77);
        goto -> bb211;
    }

    bb222 (cleanup): {
        _475 = discriminant(_61);
        goto -> bb211;
    }

    bb223 (cleanup): {
        _476 = discriminant(_52);
        goto -> bb214;
    }

    bb224 (cleanup): {
        _477 = discriminant(_4);
        goto -> bb213;
    }
}

alloc266 (static: ID, size: 32, align: 1) {
    0x00 │ 09 54 db be 9e c9 60 c9 8a 7a 29 3f e2 13 36 96 │ .T....`..z)?..6.
    0x10 │ 6f e1 80 d1 51 ae 4b 81 79 56 1f 89 85 4a 53 f6 │ o...Q.K.yV...JS.
}
