// MIR for `fulfill_perp_order_with_amm` after PreCodegen

fn fulfill_perp_order_with_amm(_1: &mut User, _2: &mut UserStats, _3: usize, _4: &mut PerpMarket, _5: &mut OracleMap<'_>, _6: u64, _7: i64, _8: u64, _9: &anchor_lang::prelude::Pubkey, _10: &anchor_lang::prelude::Pubkey, _11: &mut Option<&mut User>, _12: &mut Option<&mut UserStats>, _13: &mut Option<&mut User>, _14: &mut Option<&mut UserStats>, _15: &mut Option<&mut User>, _16: &mut Option<&mut UserStats>, _17: &state::state::FeeStructure, _18: Option<u64>, _19: Option<u64>, _20: Option<u64>, _21: bool) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug user => _1;
    debug user_stats => _2;
    debug order_index => _3;
    debug market => _4;
    debug oracle_map => _5;
    debug reserve_price_before => _6;
    debug now => _7;
    debug slot => _8;
    debug user_key => _9;
    debug filler_key => _10;
    debug filler => _11;
    debug filler_stats => _12;
    debug maker => _13;
    debug maker_stats => _14;
    debug referrer => _15;
    debug referrer_stats => _16;
    debug fee_structure => _17;
    debug limit_price => _18;
    debug override_base_asset_amount => _19;
    debug override_fill_price => _20;
    debug is_liquidation => _21;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _22: usize;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _24: std::result::Result<usize, error::ErrorCode>;
    let mut _25: &[state::user::PerpPosition; 8];
    let _26: &[state::user::PerpPosition; 8];
    let mut _27: u16;
    let mut _28: isize;
    let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _32: usize;
    let _34: usize;
    let mut _35: usize;
    let mut _36: bool;
    let mut _40: (u64, std::option::Option<u64>, std::option::Option<u64>);
    let mut _41: isize;
    let mut _43: u64;
    let mut _44: std::option::Option<u64>;
    let mut _45: std::option::Option<u64>;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::state::FeeTier>;
    let mut _48: std::result::Result<state::state::FeeTier, error::ErrorCode>;
    let mut _49: &state::user::UserStats;
    let mut _50: &state::state::FeeStructure;
    let mut _51: &state::user::MarketType;
    let _52: &state::user::MarketType;
    let _53: state::user::MarketType;
    let mut _54: bool;
    let mut _55: &state::user::User;
    let mut _56: math::margin::MarginRequirementType;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: (u64, std::option::Option<u64>);
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, std::option::Option<u64>)>;
    let mut _66: std::result::Result<(u64, std::option::Option<u64>), error::ErrorCode>;
    let mut _67: &state::user::Order;
    let _68: &state::user::Order;
    let _69: usize;
    let mut _70: usize;
    let mut _71: bool;
    let mut _72: &state::perp_market::PerpMarket;
    let mut _73: std::option::Option<u64>;
    let mut _74: std::option::Option<u64>;
    let mut _75: i64;
    let mut _76: &state::state::FeeTier;
    let _77: &state::state::FeeTier;
    let mut _78: isize;
    let mut _80: !;
    let mut _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _84: bool;
    let _85: usize;
    let mut _86: usize;
    let mut _87: bool;
    let mut _88: u64;
    let mut _89: std::option::Option<u64>;
    let mut _90: std::option::Option<u64>;
    let mut _92: bool;
    let _93: usize;
    let mut _94: usize;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: u64;
    let mut _98: i64;
    let mut _99: u64;
    let _100: ();
    let mut _101: bool;
    let mut _102: u64;
    let mut _103: u64;
    let mut _104: !;
    let _105: ();
    let mut _106: bool;
    let mut _107: &std::option::Option<u64>;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: &std::string::String;
    let _112: &std::string::String;
    let _113: std::string::String;
    let mut _115: std::fmt::Arguments<'_>;
    let mut _116: &[&str];
    let mut _117: &[&str; 3];
    let _118: &[&str; 3];
    let _119: [&str; 3];
    let mut _120: &[core::fmt::rt::Argument<'_>];
    let mut _121: &[core::fmt::rt::Argument<'_>; 3];
    let _122: &[core::fmt::rt::Argument<'_>; 3];
    let _123: [core::fmt::rt::Argument<'_>; 3];
    let mut _124: core::fmt::rt::Argument<'_>;
    let mut _125: &u16;
    let _126: &u16;
    let mut _127: core::fmt::rt::Argument<'_>;
    let mut _128: &u64;
    let _129: &u64;
    let mut _130: core::fmt::rt::Argument<'_>;
    let mut _131: &u64;
    let _132: &u64;
    let mut _133: (u64, u64);
    let mut _137: (bool, u64, controller::position::PositionDirection);
    let mut _138: bool;
    let _139: usize;
    let mut _140: usize;
    let mut _141: bool;
    let mut _142: u64;
    let _143: usize;
    let mut _144: usize;
    let mut _145: bool;
    let mut _146: controller::position::PositionDirection;
    let _147: usize;
    let mut _148: usize;
    let mut _149: bool;
    let _150: ();
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _152: std::result::Result<(), error::ErrorCode>;
    let mut _153: &state::perp_market::AMM;
    let _154: &state::perp_market::AMM;
    let mut _155: controller::position::PositionDirection;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _162: &state::user::PerpPosition;
    let _163: usize;
    let mut _164: usize;
    let mut _165: bool;
    let mut _166: controller::position::PositionDirection;
    let mut _168: isize;
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _170: std::result::Result<u64, error::ErrorCode>;
    let mut _171: &state::perp_market::AMM;
    let mut _172: u64;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _179: std::result::Result<u64, error::ErrorCode>;
    let mut _180: &state::perp_market::AMM;
    let mut _181: u64;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _188: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<i64>>;
    let mut _189: std::result::Result<std::option::Option<i64>, error::ErrorCode>;
    let mut _190: state::perp_market::PerpMarket;
    let mut _191: isize;
    let mut _193: !;
    let mut _194: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _196: u64;
    let mut _197: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _198: std::result::Result<u64, error::ErrorCode>;
    let mut _199: &mut state::perp_market::AMM;
    let mut _200: &mut state::perp_market::AMM;
    let mut _201: i64;
    let mut _202: std::option::Option<u64>;
    let mut _203: u64;
    let mut _204: std::option::Option<controller::position::PositionDirection>;
    let mut _205: controller::position::PositionDirection;
    let mut _206: std::option::Option<i64>;
    let mut _207: isize;
    let mut _209: !;
    let mut _210: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _214: (u64, i64, i64);
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, i64, i64)>;
    let mut _216: std::result::Result<(u64, i64, i64), error::ErrorCode>;
    let mut _217: u64;
    let mut _218: controller::position::PositionDirection;
    let mut _219: &mut state::perp_market::PerpMarket;
    let mut _220: &mut state::user::User;
    let mut _221: usize;
    let mut _222: std::option::Option<u64>;
    let mut _223: isize;
    let mut _225: !;
    let mut _226: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _228: ();
    let mut _229: isize;
    let _231: ();
    let mut _232: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _233: std::result::Result<(), error::ErrorCode>;
    let mut _234: u64;
    let mut _235: u64;
    let mut _236: controller::position::PositionDirection;
    let mut _237: u64;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: isize;
    let mut _242: !;
    let mut _243: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _246: &mut std::option::Option<&mut state::user::User>;
    let mut _247: u16;
    let mut _249: bool;
    let mut _250: &mut std::option::Option<&mut state::user::User>;
    let mut _251: u16;
    let mut _252: &mut std::option::Option<&mut state::user::User>;
    let mut _253: u16;
    let mut _261: math::fees::FillFees;
    let mut _262: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::fees::FillFees>;
    let mut _263: std::result::Result<math::fees::FillFees, error::ErrorCode>;
    let mut _264: &state::user::UserStats;
    let mut _265: u64;
    let mut _266: &state::state::FeeStructure;
    let mut _267: u64;
    let mut _268: u64;
    let mut _269: bool;
    let mut _270: bool;
    let mut _271: &std::option::Option<&mut state::user::UserStats>;
    let mut _272: i64;
    let mut _273: bool;
    let mut _274: i16;
    let mut _275: bool;
    let mut _276: &state::user::User;
    let mut _277: math::margin::MarginRequirementType;
    let mut _278: isize;
    let mut _280: !;
    let mut _281: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _284: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, controller::position::PositionDelta>;
    let mut _285: std::result::Result<controller::position::PositionDelta, error::ErrorCode>;
    let mut _286: u64;
    let mut _287: u64;
    let mut _288: controller::position::PositionDirection;
    let mut _289: isize;
    let mut _291: !;
    let mut _292: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _294: i128;
    let mut _295: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _296: std::result::Result<i128, error::ErrorCode>;
    let mut _297: i128;
    let mut _298: i128;
    let mut _299: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _300: std::result::Result<i128, error::ErrorCode>;
    let mut _301: i64;
    let mut _302: isize;
    let mut _304: !;
    let mut _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _307: isize;
    let mut _309: !;
    let mut _310: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _312: u128;
    let mut _313: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _314: std::result::Result<u128, error::ErrorCode>;
    let mut _315: u128;
    let mut _316: u128;
    let mut _317: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _318: std::result::Result<u128, error::ErrorCode>;
    let mut _319: u64;
    let mut _320: isize;
    let mut _322: !;
    let mut _323: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _325: isize;
    let mut _327: !;
    let mut _328: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _330: i128;
    let mut _331: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _332: std::result::Result<i128, error::ErrorCode>;
    let mut _333: i128;
    let mut _334: i128;
    let mut _335: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _336: std::result::Result<i128, error::ErrorCode>;
    let mut _337: i64;
    let mut _338: isize;
    let mut _340: !;
    let mut _341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _343: isize;
    let mut _345: !;
    let mut _346: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _348: i128;
    let mut _349: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _350: std::result::Result<i128, error::ErrorCode>;
    let mut _351: i128;
    let mut _352: i128;
    let mut _353: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _354: std::result::Result<i128, error::ErrorCode>;
    let mut _355: i64;
    let mut _356: isize;
    let mut _358: !;
    let mut _359: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _361: isize;
    let mut _363: !;
    let mut _364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _366: i64;
    let mut _367: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _368: std::result::Result<i64, error::ErrorCode>;
    let mut _369: i64;
    let mut _370: i64;
    let mut _371: isize;
    let mut _373: !;
    let mut _374: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _376: ();
    let mut _377: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _378: std::result::Result<(), error::ErrorCode>;
    let mut _379: &mut state::user::UserStats;
    let mut _380: u64;
    let mut _381: isize;
    let mut _383: !;
    let mut _384: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _386: ();
    let mut _387: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _388: std::result::Result<(), error::ErrorCode>;
    let mut _389: &mut state::user::UserStats;
    let mut _390: u64;
    let mut _391: isize;
    let mut _393: !;
    let mut _394: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _396: ();
    let mut _397: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _398: std::result::Result<(), error::ErrorCode>;
    let mut _399: &mut state::user::UserStats;
    let mut _400: u64;
    let mut _401: isize;
    let mut _403: !;
    let mut _404: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _406: ();
    let mut _407: (std::option::Option<&mut &mut state::user::User>, std::option::Option<&mut &mut state::user::UserStats>);
    let mut _408: std::option::Option<&mut &mut state::user::User>;
    let mut _409: &mut std::option::Option<&mut state::user::User>;
    let mut _410: std::option::Option<&mut &mut state::user::UserStats>;
    let mut _411: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _412: isize;
    let mut _413: isize;
    let mut _416: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _417: &mut state::user::User;
    let mut _418: u16;
    let mut _419: isize;
    let _421: ();
    let mut _422: bool;
    let mut _423: u64;
    let _424: ();
    let mut _425: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _426: std::result::Result<(), error::ErrorCode>;
    let mut _427: &mut state::user::PerpPosition;
    let mut _428: &mut state::perp_market::PerpMarket;
    let mut _429: i64;
    let mut _430: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _431: std::result::Result<i64, error::ErrorCode>;
    let mut _432: u64;
    let mut _433: isize;
    let mut _435: !;
    let mut _436: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _438: isize;
    let mut _440: !;
    let mut _441: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _443: ();
    let mut _444: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _445: std::result::Result<(), error::ErrorCode>;
    let mut _446: &mut state::user::UserStats;
    let mut _447: u64;
    let mut _448: i64;
    let mut _449: isize;
    let mut _451: !;
    let mut _452: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _455: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _456: std::result::Result<usize, error::ErrorCode>;
    let mut _457: &[state::user::PerpPosition; 8];
    let _458: &[state::user::PerpPosition; 8];
    let mut _459: u16;
    let mut _460: isize;
    let mut _462: !;
    let mut _463: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _465: ();
    let mut _466: bool;
    let mut _467: u64;
    let _468: ();
    let mut _469: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _470: std::result::Result<(), error::ErrorCode>;
    let mut _471: &mut state::user::PerpPosition;
    let mut _472: &mut state::user::PerpPosition;
    let _473: usize;
    let mut _474: usize;
    let mut _475: bool;
    let mut _476: &mut state::perp_market::PerpMarket;
    let mut _477: i64;
    let mut _478: i64;
    let mut _479: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _480: std::result::Result<i64, error::ErrorCode>;
    let mut _481: u64;
    let mut _482: isize;
    let mut _484: !;
    let mut _485: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _487: bool;
    let mut _488: isize;
    let mut _490: !;
    let mut _491: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _493: ();
    let mut _494: bool;
    let mut _495: u64;
    let _496: ();
    let mut _497: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _498: std::result::Result<(), error::ErrorCode>;
    let mut _499: &mut state::user::PerpPosition;
    let mut _500: &mut state::user::PerpPosition;
    let _501: usize;
    let mut _502: usize;
    let mut _503: bool;
    let mut _504: &mut state::perp_market::PerpMarket;
    let mut _505: i64;
    let mut _506: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _507: std::result::Result<i64, error::ErrorCode>;
    let mut _508: u64;
    let mut _509: isize;
    let mut _511: !;
    let mut _512: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _514: isize;
    let mut _516: !;
    let mut _517: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _519: ();
    let mut _520: bool;
    let _521: ();
    let mut _522: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _523: std::result::Result<(), error::ErrorCode>;
    let mut _524: &mut state::user::UserStats;
    let mut _525: u8;
    let mut _526: u64;
    let mut _527: i64;
    let mut _528: isize;
    let mut _530: !;
    let mut _531: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _533: ();
    let mut _534: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _535: std::result::Result<(), error::ErrorCode>;
    let mut _536: &mut state::user::UserStats;
    let mut _537: u8;
    let mut _538: u64;
    let mut _539: i64;
    let mut _540: isize;
    let mut _542: !;
    let mut _543: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _545: ();
    let mut _546: std::option::Option<&mut &mut state::user::User>;
    let mut _547: &mut std::option::Option<&mut state::user::User>;
    let mut _548: isize;
    let _550: ();
    let mut _551: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _552: std::result::Result<(), error::ErrorCode>;
    let mut _553: &mut state::user::User;
    let mut _554: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _555: &mut state::perp_market::PerpMarket;
    let mut _556: u64;
    let mut _557: u64;
    let mut _558: i64;
    let mut _559: u64;
    let mut _560: isize;
    let mut _562: !;
    let mut _563: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _565: std::option::Option<&mut &mut state::user::User>;
    let mut _566: &mut std::option::Option<&mut state::user::User>;
    let mut _567: isize;
    let _569: ();
    let mut _570: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _571: std::result::Result<(), error::ErrorCode>;
    let mut _572: &mut state::user::User;
    let mut _573: &mut std::option::Option<&mut state::user::UserStats>;
    let mut _574: &mut state::perp_market::PerpMarket;
    let mut _575: u64;
    let mut _576: u64;
    let mut _577: i64;
    let mut _578: u64;
    let mut _579: isize;
    let mut _581: !;
    let mut _582: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _584: ();
    let mut _585: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _586: std::result::Result<(), error::ErrorCode>;
    let mut _587: &mut state::user::Order;
    let mut _588: &mut state::user::Order;
    let _589: usize;
    let mut _590: usize;
    let mut _591: bool;
    let mut _592: u64;
    let mut _593: u64;
    let mut _594: isize;
    let mut _596: !;
    let mut _597: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _599: ();
    let mut _600: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _601: std::result::Result<(), error::ErrorCode>;
    let mut _602: &mut state::user::PerpPosition;
    let mut _603: &mut state::user::PerpPosition;
    let _604: usize;
    let mut _605: usize;
    let mut _606: bool;
    let mut _607: &controller::position::PositionDirection;
    let _608: &controller::position::PositionDirection;
    let mut _609: u64;
    let mut _610: bool;
    let mut _611: &state::user::Order;
    let _612: usize;
    let mut _613: usize;
    let mut _614: bool;
    let mut _615: isize;
    let mut _617: !;
    let mut _618: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _624: (std::option::Option<anchor_lang::prelude::Pubkey>, std::option::Option<state::user::Order>, std::option::Option<anchor_lang::prelude::Pubkey>, std::option::Option<state::user::Order>);
    let mut _625: &anchor_lang::prelude::Pubkey;
    let mut _626: &state::user::Order;
    let _627: &state::user::Order;
    let _628: usize;
    let mut _629: usize;
    let mut _630: bool;
    let mut _633: u64;
    let mut _634: std::option::Option<u64>;
    let mut _635: std::option::Option<u64>;
    let mut _636: u64;
    let mut _637: std::option::Option<u64>;
    let mut _639: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _640: std::option::Option<u64>;
    let mut _641: std::option::Option<u64>;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: &std::option::Option<u64>;
    let mut _645: &std::option::Option<u64>;
    let mut _646: bool;
    let mut _648: u8;
    let mut _649: u8;
    let mut _650: bool;
    let mut _651: &state::user::Order;
    let _652: usize;
    let mut _653: usize;
    let mut _654: bool;
    let mut _655: state::user::OrderBitFlag;
    let mut _660: (std::option::Option<u64>, std::option::Option<u64>, std::option::Option<u64>, std::option::Option<u64>);
    let mut _663: (std::option::Option<u64>, std::option::Option<u64>);
    let mut _664: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (std::option::Option<u64>, std::option::Option<u64>)>;
    let mut _665: std::result::Result<(std::option::Option<u64>, std::option::Option<u64>), error::ErrorCode>;
    let mut _666: u64;
    let mut _667: std::option::Option<(u64, u64)>;
    let mut _668: isize;
    let mut _670: !;
    let mut _671: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _673: bool;
    let mut _674: &std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _675: std::option::Option<u64>;
    let mut _676: std::option::Option<u64>;
    let mut _677: std::option::Option<u64>;
    let mut _678: std::option::Option<u64>;
    let mut _679: std::option::Option<u64>;
    let mut _680: std::option::Option<u64>;
    let mut _681: std::option::Option<u64>;
    let mut _682: std::option::Option<u64>;
    let mut _684: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::events::OrderActionRecord>;
    let mut _685: std::result::Result<state::events::OrderActionRecord, error::ErrorCode>;
    let mut _686: i64;
    let mut _687: state::events::OrderAction;
    let mut _688: state::events::OrderActionExplanation;
    let mut _689: u16;
    let mut _690: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _691: anchor_lang::prelude::Pubkey;
    let mut _692: std::option::Option<u64>;
    let mut _693: u64;
    let mut _694: std::option::Option<u64>;
    let mut _695: u64;
    let mut _696: std::option::Option<u64>;
    let mut _697: u64;
    let mut _698: std::option::Option<u64>;
    let mut _699: u64;
    let mut _700: std::option::Option<u64>;
    let mut _701: u64;
    let mut _702: std::option::Option<u64>;
    let mut _703: bool;
    let mut _704: u64;
    let mut _705: u64;
    let mut _706: std::option::Option<u64>;
    let mut _707: u64;
    let mut _708: std::option::Option<i64>;
    let mut _709: i64;
    let mut _710: std::option::Option<u64>;
    let mut _711: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _712: std::option::Option<state::user::Order>;
    let mut _713: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _714: std::option::Option<state::user::Order>;
    let mut _715: i64;
    let mut _716: &state::oracle::OraclePriceData;
    let mut _717: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _718: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _719: &mut state::oracle_map::OracleMap<'_>;
    let mut _720: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _721: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _722: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _723: &state::perp_market::PerpMarket;
    let mut _724: isize;
    let mut _726: !;
    let mut _727: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _729: u8;
    let mut _730: std::option::Option<u64>;
    let mut _731: std::option::Option<u64>;
    let mut _732: std::option::Option<u64>;
    let mut _733: std::option::Option<u64>;
    let mut _734: std::option::Option<u64>;
    let mut _735: isize;
    let mut _737: !;
    let mut _738: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _740: ();
    let mut _741: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _742: std::result::Result<(), error::ErrorCode>;
    let mut _743: state::events::OrderActionRecord;
    let mut _744: isize;
    let mut _746: !;
    let mut _747: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _749: ();
    let mut _750: bool;
    let mut _751: u64;
    let mut _752: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _753: std::result::Result<u64, error::ErrorCode>;
    let mut _754: &state::user::Order;
    let _755: usize;
    let mut _756: usize;
    let mut _757: bool;
    let mut _758: std::option::Option<i64>;
    let mut _759: isize;
    let mut _761: !;
    let mut _762: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _764: ();
    let mut _765: &mut state::user::User;
    let mut _766: bool;
    let mut _767: &state::user::Order;
    let _768: usize;
    let mut _769: usize;
    let mut _770: bool;
    let mut _771: state::user::OrderStatus;
    let _772: usize;
    let mut _773: usize;
    let mut _774: bool;
    let _776: usize;
    let mut _777: usize;
    let mut _778: bool;
    let mut _779: (u8, bool);
    let mut _780: (u64, u64);
    let mut _781: u64;
    let mut _782: u64;
    let mut _785: &mut state::user::User;
    let mut _786: &mut state::user::UserStats;
    let mut _787: &mut state::user::User;
    let mut _788: &mut state::user::User;
    scope 1 {
        debug position_index => _22;
        let _33: i64;
        scope 6 {
            debug existing_base_asset_amount => _33;
            let _37: u64;
            let _38: std::option::Option<u64>;
            let _39: std::option::Option<u64>;
            let _42: u64;
            let _46: state::state::FeeTier;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: state::state::FeeTier;
            let mut _784: &state::user::MarketType;
            scope 7 {
                debug base_asset_amount => _37;
                debug limit_price => _38;
                debug fill_price => _39;
                let _91: u64;
                scope 20 {
                    debug amm_size_threshold => _91;
                    let _114: std::string::String;
                    let _134: bool;
                    let _135: u64;
                    let _136: controller::position::PositionDirection;
                    let mut _783: &[&str; 3];
                    scope 21 {
                        debug res => _114;
                    }
                    scope 22 {
                        debug order_post_only => _134;
                        debug order_slot => _135;
                        debug order_direction => _136;
                        let _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _160: ();
                        let _161: std::option::Option<(u64, u64)>;
                        scope 23 {
                            debug residual => _157;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _160;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug existing_position_params_for_order_action => _161;
                            let _167: u64;
                            let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _177: u64;
                            let _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _186: u64;
                            scope 28 {
                                debug market_side_price => _167;
                                let _187: std::option::Option<i64>;
                                let _192: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _195: std::option::Option<i64>;
                                scope 37 {
                                    debug sanitize_clamp_denominator => _187;
                                    let _208: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _211: u64;
                                    let _212: u64;
                                    let _213: i64;
                                    let _224: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _227: (u64, i64, i64);
                                    scope 42 {
                                        debug residual => _208;
                                        scope 43 {
                                        }
                                    }
                                    scope 44 {
                                        debug val => _211;
                                        scope 45 {
                                        }
                                    }
                                    scope 46 {
                                        debug quote_asset_amount => _212;
                                        debug quote_asset_amount_surplus => _213;
                                        let _245: bool;
                                        scope 51 {
                                            debug limit_price => _230;
                                            let _230: u64;
                                            let _241: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _244: ();
                                            scope 52 {
                                                debug residual => _241;
                                                scope 53 {
                                                }
                                            }
                                            scope 54 {
                                                debug val => _244;
                                                scope 55 {
                                                }
                                            }
                                        }
                                        scope 56 {
                                            debug reward_referrer => _245;
                                            let _248: bool;
                                            scope 57 {
                                                debug reward_filler => _248;
                                                let _254: u64;
                                                let _255: i64;
                                                let _256: u64;
                                                let _257: u64;
                                                let _258: u64;
                                                let _259: i64;
                                                let _260: u64;
                                                let _279: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _282: math::fees::FillFees;
                                                scope 58 {
                                                    debug user_fee => _254;
                                                    debug fee_to_market => _255;
                                                    debug filler_reward => _256;
                                                    debug referee_discount => _257;
                                                    debug referrer_reward => _258;
                                                    debug fee_to_market_for_lp => _259;
                                                    debug maker_rebate => _260;
                                                    let _283: controller::position::PositionDelta;
                                                    let _290: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _293: controller::position::PositionDelta;
                                                    scope 63 {
                                                        debug user_position_delta => _283;
                                                        let _303: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _306: i128;
                                                        let _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _311: i128;
                                                        let _321: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _324: u128;
                                                        let _326: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _329: u128;
                                                        let _339: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _342: i128;
                                                        let _344: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _347: i128;
                                                        let _357: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _360: i128;
                                                        let _362: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _365: i128;
                                                        let _372: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _375: i64;
                                                        let _382: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _385: ();
                                                        let _392: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _395: ();
                                                        let _402: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _405: ();
                                                        let _454: usize;
                                                        let _461: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _464: usize;
                                                        scope 68 {
                                                            debug residual => _303;
                                                            scope 69 {
                                                            }
                                                        }
                                                        scope 70 {
                                                            debug val => _306;
                                                            scope 71 {
                                                            }
                                                        }
                                                        scope 72 {
                                                            debug residual => _308;
                                                            scope 73 {
                                                            }
                                                        }
                                                        scope 74 {
                                                            debug val => _311;
                                                            scope 75 {
                                                            }
                                                        }
                                                        scope 76 {
                                                            debug residual => _321;
                                                            scope 77 {
                                                            }
                                                        }
                                                        scope 78 {
                                                            debug val => _324;
                                                            scope 79 {
                                                            }
                                                        }
                                                        scope 80 {
                                                            debug residual => _326;
                                                            scope 81 {
                                                            }
                                                        }
                                                        scope 82 {
                                                            debug val => _329;
                                                            scope 83 {
                                                            }
                                                        }
                                                        scope 84 {
                                                            debug residual => _339;
                                                            scope 85 {
                                                            }
                                                        }
                                                        scope 86 {
                                                            debug val => _342;
                                                            scope 87 {
                                                            }
                                                        }
                                                        scope 88 {
                                                            debug residual => _344;
                                                            scope 89 {
                                                            }
                                                        }
                                                        scope 90 {
                                                            debug val => _347;
                                                            scope 91 {
                                                            }
                                                        }
                                                        scope 92 {
                                                            debug residual => _357;
                                                            scope 93 {
                                                            }
                                                        }
                                                        scope 94 {
                                                            debug val => _360;
                                                            scope 95 {
                                                            }
                                                        }
                                                        scope 96 {
                                                            debug residual => _362;
                                                            scope 97 {
                                                            }
                                                        }
                                                        scope 98 {
                                                            debug val => _365;
                                                            scope 99 {
                                                            }
                                                        }
                                                        scope 100 {
                                                            debug residual => _372;
                                                            scope 101 {
                                                            }
                                                        }
                                                        scope 102 {
                                                            debug val => _375;
                                                            scope 103 {
                                                            }
                                                        }
                                                        scope 104 {
                                                            debug residual => _382;
                                                            scope 105 {
                                                            }
                                                        }
                                                        scope 106 {
                                                            debug val => _385;
                                                            scope 107 {
                                                            }
                                                        }
                                                        scope 108 {
                                                            debug residual => _392;
                                                            scope 109 {
                                                            }
                                                        }
                                                        scope 110 {
                                                            debug val => _395;
                                                            scope 111 {
                                                            }
                                                        }
                                                        scope 112 {
                                                            debug residual => _402;
                                                            scope 113 {
                                                            }
                                                        }
                                                        scope 114 {
                                                            debug val => _405;
                                                            scope 115 {
                                                            }
                                                        }
                                                        scope 116 {
                                                            debug referrer => _414;
                                                            debug referrer_stats => _415;
                                                            let _414: &mut &mut state::user::User;
                                                            let _415: &mut &mut state::user::UserStats;
                                                            scope 117 {
                                                                debug referrer_position => _420;
                                                                let _420: &mut state::user::PerpPosition;
                                                                let _434: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _437: i64;
                                                                let _439: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _442: ();
                                                                let _450: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _453: ();
                                                                scope 118 {
                                                                    debug residual => _434;
                                                                    scope 119 {
                                                                    }
                                                                }
                                                                scope 120 {
                                                                    debug val => _437;
                                                                    scope 121 {
                                                                    }
                                                                }
                                                                scope 122 {
                                                                    debug residual => _439;
                                                                    scope 123 {
                                                                    }
                                                                }
                                                                scope 124 {
                                                                    debug val => _442;
                                                                    scope 125 {
                                                                    }
                                                                }
                                                                scope 126 {
                                                                    debug residual => _450;
                                                                    scope 127 {
                                                                    }
                                                                }
                                                                scope 128 {
                                                                    debug val => _453;
                                                                    scope 129 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 130 {
                                                            debug position_index => _454;
                                                            let _483: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _486: i64;
                                                            let _489: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _492: ();
                                                            let _510: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _513: i64;
                                                            let _515: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _518: ();
                                                            let _529: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _532: ();
                                                            let _541: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _544: ();
                                                            let _595: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _598: ();
                                                            let _616: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _619: ();
                                                            let _620: std::option::Option<anchor_lang::prelude::Pubkey>;
                                                            let _621: std::option::Option<state::user::Order>;
                                                            let _622: std::option::Option<anchor_lang::prelude::Pubkey>;
                                                            let _623: std::option::Option<state::user::Order>;
                                                            scope 135 {
                                                                debug residual => _483;
                                                                scope 136 {
                                                                }
                                                            }
                                                            scope 137 {
                                                                debug val => _486;
                                                                scope 138 {
                                                                }
                                                            }
                                                            scope 139 {
                                                                debug residual => _489;
                                                                scope 140 {
                                                                }
                                                            }
                                                            scope 141 {
                                                                debug val => _492;
                                                                scope 142 {
                                                                }
                                                            }
                                                            scope 143 {
                                                                debug residual => _510;
                                                                scope 144 {
                                                                }
                                                            }
                                                            scope 145 {
                                                                debug val => _513;
                                                                scope 146 {
                                                                }
                                                            }
                                                            scope 147 {
                                                                debug residual => _515;
                                                                scope 148 {
                                                                }
                                                            }
                                                            scope 149 {
                                                                debug val => _518;
                                                                scope 150 {
                                                                }
                                                            }
                                                            scope 151 {
                                                                debug residual => _529;
                                                                scope 152 {
                                                                }
                                                            }
                                                            scope 153 {
                                                                debug val => _532;
                                                                scope 154 {
                                                                }
                                                            }
                                                            scope 155 {
                                                                debug residual => _541;
                                                                scope 156 {
                                                                }
                                                            }
                                                            scope 157 {
                                                                debug val => _544;
                                                                scope 158 {
                                                                }
                                                            }
                                                            scope 159 {
                                                                debug filler => _549;
                                                                let _549: &mut &mut state::user::User;
                                                                let _561: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _564: ();
                                                                scope 160 {
                                                                    debug residual => _561;
                                                                    scope 161 {
                                                                    }
                                                                }
                                                                scope 162 {
                                                                    debug val => _564;
                                                                    scope 163 {
                                                                    }
                                                                }
                                                            }
                                                            scope 164 {
                                                                debug maker => _568;
                                                                let _568: &mut &mut state::user::User;
                                                                let _580: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _583: ();
                                                                scope 165 {
                                                                    debug residual => _580;
                                                                    scope 166 {
                                                                    }
                                                                }
                                                                scope 167 {
                                                                    debug val => _583;
                                                                    scope 168 {
                                                                    }
                                                                }
                                                            }
                                                            scope 169 {
                                                                debug residual => _595;
                                                                scope 170 {
                                                                }
                                                            }
                                                            scope 171 {
                                                                debug val => _598;
                                                                scope 172 {
                                                                }
                                                            }
                                                            scope 173 {
                                                                debug residual => _616;
                                                                scope 174 {
                                                                }
                                                            }
                                                            scope 175 {
                                                                debug val => _619;
                                                                scope 176 {
                                                                }
                                                            }
                                                            scope 177 {
                                                                debug taker => _620;
                                                                debug taker_order => _621;
                                                                debug maker => _622;
                                                                debug maker_order => _623;
                                                                let _631: u64;
                                                                let _632: u64;
                                                                scope 178 {
                                                                    debug fill_record_id => _631;
                                                                    let _638: state::events::OrderActionExplanation;
                                                                    scope 180 {
                                                                        debug order_action_explanation => _638;
                                                                        let mut _647: u8;
                                                                        scope 181 {
                                                                            debug order_action_bit_flags => _647;
                                                                            let _656: std::option::Option<u64>;
                                                                            let _657: std::option::Option<u64>;
                                                                            let _658: std::option::Option<u64>;
                                                                            let _659: std::option::Option<u64>;
                                                                            let _661: std::option::Option<u64>;
                                                                            let _662: std::option::Option<u64>;
                                                                            let _669: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _672: (std::option::Option<u64>, std::option::Option<u64>);
                                                                            scope 182 {
                                                                                debug taker_existing_quote_entry_amount => _656;
                                                                                debug taker_existing_base_asset_amount => _657;
                                                                                debug maker_existing_quote_entry_amount => _658;
                                                                                debug maker_existing_base_asset_amount => _659;
                                                                                let _683: state::events::OrderActionRecord;
                                                                                let _725: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _728: &state::oracle::OraclePriceData;
                                                                                let _736: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _739: state::events::OrderActionRecord;
                                                                                scope 188 {
                                                                                    debug order_action_record => _683;
                                                                                    let _745: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _748: ();
                                                                                    let _760: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _763: u64;
                                                                                    let _775: &mut state::user::PerpPosition;
                                                                                    scope 197 {
                                                                                        debug residual => _745;
                                                                                        scope 198 {
                                                                                        }
                                                                                    }
                                                                                    scope 199 {
                                                                                        debug val => _748;
                                                                                        scope 200 {
                                                                                        }
                                                                                    }
                                                                                    scope 201 {
                                                                                        debug residual => _760;
                                                                                        scope 202 {
                                                                                        }
                                                                                    }
                                                                                    scope 203 {
                                                                                        debug val => _763;
                                                                                        scope 204 {
                                                                                        }
                                                                                    }
                                                                                    scope 205 {
                                                                                        debug market_position => _775;
                                                                                    }
                                                                                }
                                                                                scope 189 {
                                                                                    debug residual => _725;
                                                                                    scope 190 {
                                                                                    }
                                                                                }
                                                                                scope 191 {
                                                                                    debug val => _728;
                                                                                    scope 192 {
                                                                                    }
                                                                                }
                                                                                scope 193 {
                                                                                    debug residual => _736;
                                                                                    scope 194 {
                                                                                    }
                                                                                }
                                                                                scope 195 {
                                                                                    debug val => _739;
                                                                                    scope 196 {
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 183 {
                                                                                debug existing_quote_entry_amount => _661;
                                                                                debug existing_base_asset_amount => _662;
                                                                            }
                                                                            scope 184 {
                                                                                debug residual => _669;
                                                                                scope 185 {
                                                                                }
                                                                            }
                                                                            scope 186 {
                                                                                debug val => _672;
                                                                                scope 187 {
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 179 {
                                                                    debug current_id => _632;
                                                                }
                                                            }
                                                        }
                                                        scope 131 {
                                                            debug residual => _461;
                                                            scope 132 {
                                                            }
                                                        }
                                                        scope 133 {
                                                            debug val => _464;
                                                            scope 134 {
                                                            }
                                                        }
                                                    }
                                                    scope 64 {
                                                        debug residual => _290;
                                                        scope 65 {
                                                        }
                                                    }
                                                    scope 66 {
                                                        debug val => _293;
                                                        scope 67 {
                                                        }
                                                    }
                                                }
                                                scope 59 {
                                                    debug residual => _279;
                                                    scope 60 {
                                                    }
                                                }
                                                scope 61 {
                                                    debug val => _282;
                                                    scope 62 {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    scope 47 {
                                        debug residual => _224;
                                        scope 48 {
                                        }
                                    }
                                    scope 49 {
                                        debug val => _227;
                                        scope 50 {
                                        }
                                    }
                                }
                                scope 38 {
                                    debug residual => _192;
                                    scope 39 {
                                    }
                                }
                                scope 40 {
                                    debug val => _195;
                                    scope 41 {
                                    }
                                }
                            }
                            scope 29 {
                                debug residual => _174;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug val => _177;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug residual => _183;
                                scope 34 {
                                }
                            }
                            scope 35 {
                                debug val => _186;
                                scope 36 {
                                }
                            }
                        }
                    }
                }
            }
            scope 8 {
                debug override_base_asset_amount => _42;
            }
            scope 9 {
                debug fee_tier => _46;
                let _62: u64;
                let _63: std::option::Option<u64>;
                let _79: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _82: (u64, std::option::Option<u64>);
                scope 14 {
                    debug base_asset_amount => _62;
                    debug limit_price => _63;
                    let _83: std::option::Option<u64>;
                    scope 19 {
                        debug fill_price => _83;
                    }
                }
                scope 15 {
                    debug residual => _79;
                    scope 16 {
                    }
                }
                scope 17 {
                    debug val => _82;
                    scope 18 {
                    }
                }
            }
            scope 10 {
                debug residual => _58;
                scope 11 {
                }
            }
            scope 12 {
                debug val => _61;
                scope 13 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _29;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _32;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = &((*_1).4: [state::user::PerpPosition; 8]);
        _25 = &(*_26);
        StorageLive(_27);
        _27 = ((*_4).21: u16);
        _24 = get_position_index(move _25, move _27) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_27);
        StorageDead(_25);
        _23 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _24) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_24);
        _28 = discriminant(_23);
        switchInt(move _28) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_32);
        _32 = ((_23 as Continue).0: usize);
        _22 = _32;
        StorageDead(_32);
        StorageDead(_26);
        StorageDead(_23);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _22;
        _35 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _36 = Lt(_34, _35);
        assert(move _36, "index out of bounds: the length is {} but the index is {}", move _35, _34) -> [success: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_29);
        _29 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_26);
        StorageDead(_23);
        goto -> bb359;
    }

    bb7: {
        _33 = (((*_1).4: [state::user::PerpPosition; 8])[_34].1: i64);
        StorageDead(_34);
        StorageLive(_40);
        _41 = discriminant(_19);
        switchInt(move _41) -> [0: bb8, 1: bb9, otherwise: bb4];
    }

    bb8: {
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = &(*_2);
        StorageLive(_50);
        _50 = &(*_17);
        StorageLive(_51);
        StorageLive(_52);
        _784 = const _;
        _52 = &(*_784);
        _51 = &(*_52);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = math::margin::MarginRequirementType::Initial;
        _54 = User::is_high_leverage_mode(move _55, move _56) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageLive(_42);
        _42 = ((_19 as Some).0: u64);
        StorageLive(_43);
        _43 = _42;
        StorageLive(_44);
        _44 = _18;
        StorageLive(_45);
        _45 = _20;
        _40 = (move _43, move _44, move _45);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        goto -> bb26;
    }

    bb10: {
        StorageDead(_56);
        StorageDead(_55);
        _48 = determine_user_fee_tier(move _49, move _50, move _51, move _54) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        _47 = <std::result::Result<state::state::FeeTier, error::ErrorCode> as Try>::branch(move _48) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_48);
        _57 = discriminant(_47);
        switchInt(move _57) -> [0: bb13, 1: bb14, otherwise: bb4];
    }

    bb13: {
        StorageLive(_61);
        _61 = ((_47 as Continue).0: state::state::FeeTier);
        _46 = _61;
        StorageDead(_61);
        StorageDead(_52);
        StorageDead(_47);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _3;
        _70 = Len(((*_1).5: [state::user::Order; 32]));
        _71 = Lt(_69, _70);
        assert(move _71, "index out of bounds: the length is {} but the index is {}", move _70, _69) -> [success: bb16, unwind continue];
    }

    bb14: {
        StorageLive(_58);
        _58 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_52);
        StorageDead(_47);
        goto -> bb357;
    }

    bb16: {
        _68 = &((*_1).5: [state::user::Order; 32])[_69];
        _67 = &(*_68);
        StorageLive(_72);
        _72 = &(*_4);
        StorageLive(_73);
        _73 = _18;
        StorageLive(_74);
        _74 = _20;
        StorageLive(_75);
        _75 = _33;
        StorageLive(_76);
        StorageLive(_77);
        _77 = &_46;
        _76 = &(*_77);
        _66 = math::orders::calculate_base_asset_amount_for_amm_to_fulfill(move _67, move _72, move _73, move _74, move _75, move _76) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_76);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_67);
        _65 = <std::result::Result<(u64, Option<u64>), error::ErrorCode> as Try>::branch(move _66) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_66);
        _78 = discriminant(_65);
        switchInt(move _78) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_82);
        _82 = ((_65 as Continue).0: (u64, std::option::Option<u64>));
        _64 = _82;
        StorageDead(_82);
        StorageLive(_62);
        _62 = (_64.0: u64);
        StorageLive(_63);
        _63 = (_64.1: std::option::Option<u64>);
        StorageDead(_77);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = _3;
        _86 = Len(((*_1).5: [state::user::Order; 32]));
        _87 = Lt(_85, _86);
        assert(move _87, "index out of bounds: the length is {} but the index is {}", move _86, _85) -> [success: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_79);
        _79 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_81);
        _81 = _79;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _81) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_81);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        goto -> bb357;
    }

    bb22: {
        _84 = (((*_1).5: [state::user::Order; 32])[_85].19: bool);
        switchInt(move _84) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        StorageDead(_85);
        _83 = _63;
        goto -> bb25;
    }

    bb24: {
        StorageDead(_85);
        _83 = Option::<u64>::None;
        goto -> bb25;
    }

    bb25: {
        StorageDead(_84);
        StorageLive(_88);
        _88 = _62;
        StorageLive(_89);
        _89 = _63;
        StorageLive(_90);
        _90 = _83;
        _40 = (move _88, move _89, move _90);
        StorageDead(_90);
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_83);
        StorageDead(_63);
        StorageDead(_62);
        StorageDead(_46);
        goto -> bb26;
    }

    bb26: {
        StorageLive(_37);
        _37 = (_40.0: u64);
        StorageLive(_38);
        _38 = (_40.1: std::option::Option<u64>);
        StorageLive(_39);
        _39 = (_40.2: std::option::Option<u64>);
        StorageDead(_40);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = _3;
        _94 = Len(((*_1).5: [state::user::Order; 32]));
        _95 = Lt(_93, _94);
        assert(move _95, "index out of bounds: the length is {} but the index is {}", move _94, _93) -> [success: bb27, unwind continue];
    }

    bb27: {
        _92 = (((*_1).5: [state::user::Order; 32])[_93].18: bool);
        switchInt(move _92) -> [0: bb28, otherwise: bb32];
    }

    bb28: {
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        _98 = _33;
        _97 = core::num::<impl i64>::unsigned_abs(move _98) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_98);
        StorageLive(_99);
        _99 = (((*_4).1: state::perp_market::AMM).54: u64);
        _96 = Gt(move _97, move _99);
        switchInt(move _96) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        StorageDead(_99);
        StorageDead(_97);
        _91 = (((*_4).1: state::perp_market::AMM).54: u64);
        goto -> bb34;
    }

    bb31: {
        StorageDead(_99);
        StorageDead(_97);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_93);
        goto -> bb33;
    }

    bb33: {
        _91 = (((*_4).1: state::perp_market::AMM).52: u64);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_96);
        StorageDead(_92);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = _37;
        StorageLive(_103);
        _103 = _91;
        _101 = Lt(move _102, move _103);
        switchInt(move _101) -> [0: bb48, otherwise: bb35];
    }

    bb35: {
        StorageDead(_103);
        StorageDead(_102);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_19;
        _106 = Option::<u64>::is_none(move _107) -> [return: bb36, unwind continue];
    }

    bb36: {
        switchInt(move _106) -> [0: bb46, otherwise: bb37];
    }

    bb37: {
        StorageDead(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _783 = const _;
        _118 = &(*_783);
        _117 = &(*_118);
        _116 = move _117 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_117);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &((*_4).21: u16);
        _125 = &(*_126);
        _124 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _125) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_125);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_37;
        _128 = &(*_129);
        _127 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _128) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_128);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        _132 = &(((*_4).1: state::perp_market::AMM).54: u64);
        _131 = &(*_132);
        _130 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _131) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_131);
        _123 = [move _124, move _127, move _130];
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_124);
        _122 = &_123;
        _121 = &(*_122);
        _120 = move _121 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_121);
        _115 = Arguments::<'_>::new_v1(move _116, move _120) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_120);
        StorageDead(_116);
        _114 = format(move _115) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_115);
        StorageDead(_132);
        StorageDead(_129);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_118);
        _113 = move _114;
        StorageDead(_114);
        _112 = &_113;
        _111 = &(*_112);
        _110 = <String as Deref>::deref(move _111) -> [return: bb43, unwind: bb361];
    }

    bb43: {
        _109 = &(*_110);
        StorageDead(_111);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb44, unwind: bb361];
    }

    bb44: {
        StorageDead(_109);
        drop(_113) -> [return: bb45, unwind: bb362];
    }

    bb45: {
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_108);
        _105 = const ();
        goto -> bb47;
    }

    bb46: {
        StorageDead(_107);
        _105 = const ();
        goto -> bb47;
    }

    bb47: {
        StorageDead(_106);
        StorageDead(_105);
        StorageLive(_133);
        _133 = (const 0_u64, const 0_u64);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _133);
        StorageDead(_133);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb356;
    }

    bb48: {
        StorageDead(_103);
        StorageDead(_102);
        _100 = const ();
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = _3;
        _140 = Len(((*_1).5: [state::user::Order; 32]));
        _141 = Lt(_139, _140);
        assert(move _141, "index out of bounds: the length is {} but the index is {}", move _140, _139) -> [success: bb49, unwind continue];
    }

    bb49: {
        _138 = (((*_1).5: [state::user::Order; 32])[_139].19: bool);
        StorageLive(_142);
        StorageLive(_143);
        _143 = _3;
        _144 = Len(((*_1).5: [state::user::Order; 32]));
        _145 = Lt(_143, _144);
        assert(move _145, "index out of bounds: the length is {} but the index is {}", move _144, _143) -> [success: bb50, unwind continue];
    }

    bb50: {
        _142 = (((*_1).5: [state::user::Order; 32])[_143].0: u64);
        StorageLive(_146);
        StorageLive(_147);
        _147 = _3;
        _148 = Len(((*_1).5: [state::user::Order; 32]));
        _149 = Lt(_147, _148);
        assert(move _149, "index out of bounds: the length is {} but the index is {}", move _148, _147) -> [success: bb51, unwind continue];
    }

    bb51: {
        _146 = (((*_1).5: [state::user::Order; 32])[_147].17: controller::position::PositionDirection);
        _137 = (move _138, move _142, move _146);
        StorageDead(_146);
        StorageDead(_142);
        StorageDead(_138);
        StorageLive(_134);
        _134 = (_137.0: bool);
        StorageLive(_135);
        _135 = (_137.1: u64);
        StorageLive(_136);
        _136 = (_137.2: controller::position::PositionDirection);
        StorageDead(_147);
        StorageDead(_143);
        StorageDead(_139);
        StorageDead(_137);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        _154 = &((*_4).1: state::perp_market::AMM);
        _153 = &(*_154);
        StorageLive(_155);
        _155 = _136;
        _152 = validate_amm_account_for_fill(move _153, move _155) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_155);
        StorageDead(_153);
        _151 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _152) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_152);
        _156 = discriminant(_151);
        switchInt(move _156) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_160);
        _160 = ((_151 as Continue).0: ());
        _150 = _160;
        StorageDead(_160);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_150);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _163 = _22;
        _164 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _165 = Lt(_163, _164);
        assert(move _165, "index out of bounds: the length is {} but the index is {}", move _164, _163) -> [success: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_157);
        _157 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_159);
        _159 = _157;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _159) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_154);
        StorageDead(_151);
        StorageDead(_150);
        goto -> bb355;
    }

    bb57: {
        _162 = &((*_1).4: [state::user::PerpPosition; 8])[_163];
        StorageLive(_166);
        _166 = _136;
        _161 = PerpPosition::get_existing_position_params_for_order_action(move _162, move _166) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_166);
        StorageDead(_162);
        StorageDead(_163);
        StorageLive(_167);
        _168 = discriminant(_136);
        switchInt(move _168) -> [0: bb60, 1: bb59, otherwise: bb4];
    }

    bb59: {
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &((*_4).1: state::perp_market::AMM);
        StorageLive(_181);
        _181 = _6;
        _179 = AMM::bid_price(move _180, move _181) -> [return: bb66, unwind continue];
    }

    bb60: {
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &((*_4).1: state::perp_market::AMM);
        StorageLive(_172);
        _172 = _6;
        _170 = AMM::ask_price(move _171, move _172) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_172);
        StorageDead(_171);
        _169 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _170) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_170);
        _173 = discriminant(_169);
        switchInt(move _173) -> [0: bb63, 1: bb64, otherwise: bb4];
    }

    bb63: {
        StorageLive(_177);
        _177 = ((_169 as Continue).0: u64);
        _167 = _177;
        StorageDead(_177);
        StorageDead(_169);
        goto -> bb71;
    }

    bb64: {
        StorageLive(_174);
        _174 = ((_169 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_169);
        goto -> bb354;
    }

    bb66: {
        StorageDead(_181);
        StorageDead(_180);
        _178 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _179) -> [return: bb67, unwind continue];
    }

    bb67: {
        StorageDead(_179);
        _182 = discriminant(_178);
        switchInt(move _182) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_186);
        _186 = ((_178 as Continue).0: u64);
        _167 = _186;
        StorageDead(_186);
        StorageDead(_178);
        goto -> bb71;
    }

    bb69: {
        StorageLive(_183);
        _183 = ((_178 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_185);
        _185 = _183;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _185) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_178);
        goto -> bb354;
    }

    bb71: {
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = (*_4);
        _189 = PerpMarket::get_sanitize_clamp_denominator(move _190) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_190);
        _188 = <std::result::Result<Option<i64>, error::ErrorCode> as Try>::branch(move _189) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_189);
        _191 = discriminant(_188);
        switchInt(move _191) -> [0: bb74, 1: bb75, otherwise: bb4];
    }

    bb74: {
        StorageLive(_195);
        _195 = ((_188 as Continue).0: std::option::Option<i64>);
        _187 = _195;
        StorageDead(_195);
        StorageDead(_188);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &mut ((*_4).1: state::perp_market::AMM);
        _199 = &mut (*_200);
        StorageLive(_201);
        _201 = _7;
        StorageLive(_202);
        StorageLive(_203);
        _203 = _167;
        _202 = Option::<u64>::Some(move _203);
        StorageDead(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _136;
        _204 = Option::<controller::position::PositionDirection>::Some(move _205);
        StorageDead(_205);
        StorageLive(_206);
        _206 = _187;
        _198 = update_mark_twap_from_estimates(move _199, move _201, move _202, move _204, move _206) -> [return: bb77, unwind continue];
    }

    bb75: {
        StorageLive(_192);
        _192 = ((_188 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_194);
        _194 = _192;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _194) -> [return: bb76, unwind continue];
    }

    bb76: {
        StorageDead(_194);
        StorageDead(_192);
        StorageDead(_188);
        goto -> bb353;
    }

    bb77: {
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_199);
        _197 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _198) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_198);
        _207 = discriminant(_197);
        switchInt(move _207) -> [0: bb79, 1: bb80, otherwise: bb4];
    }

    bb79: {
        StorageLive(_211);
        _211 = ((_197 as Continue).0: u64);
        _196 = _211;
        StorageDead(_211);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_196);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = _37;
        StorageLive(_218);
        _218 = _136;
        StorageLive(_219);
        _219 = &mut (*_4);
        StorageLive(_220);
        _220 = &mut (*_1);
        StorageLive(_221);
        _221 = _22;
        StorageLive(_222);
        _222 = _39;
        _216 = update_position_with_base_asset_amount(move _217, move _218, move _219, move _220, move _221, move _222) -> [return: bb82, unwind continue];
    }

    bb80: {
        StorageLive(_208);
        _208 = ((_197 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_210);
        _210 = _208;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _210) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_210);
        StorageDead(_208);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_196);
        goto -> bb353;
    }

    bb82: {
        StorageDead(_222);
        StorageDead(_221);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_218);
        StorageDead(_217);
        _215 = <std::result::Result<(u64, i64, i64), error::ErrorCode> as Try>::branch(move _216) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_216);
        _223 = discriminant(_215);
        switchInt(move _223) -> [0: bb84, 1: bb85, otherwise: bb4];
    }

    bb84: {
        StorageLive(_227);
        _227 = ((_215 as Continue).0: (u64, i64, i64));
        _214 = _227;
        StorageDead(_227);
        StorageLive(_212);
        _212 = (_214.0: u64);
        StorageLive(_213);
        _213 = (_214.1: i64);
        StorageDead(_215);
        StorageDead(_214);
        StorageLive(_228);
        _229 = discriminant(_38);
        switchInt(move _229) -> [1: bb88, otherwise: bb87];
    }

    bb85: {
        StorageLive(_224);
        _224 = ((_215 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_226);
        _226 = _224;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _226) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_215);
        StorageDead(_214);
        goto -> bb353;
    }

    bb87: {
        _228 = const ();
        goto -> bb94;
    }

    bb88: {
        StorageLive(_230);
        _230 = ((_38 as Some).0: u64);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        _234 = _212;
        StorageLive(_235);
        _235 = _37;
        StorageLive(_236);
        _236 = _136;
        StorageLive(_237);
        _237 = _230;
        StorageLive(_238);
        StorageLive(_239);
        _239 = _134;
        _238 = Not(move _239);
        StorageDead(_239);
        _233 = math::orders::validate_fill_price(move _234, move _235, const _, move _236, move _237, move _238) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_238);
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_235);
        StorageDead(_234);
        _232 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _233) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_233);
        _240 = discriminant(_232);
        switchInt(move _240) -> [0: bb91, 1: bb92, otherwise: bb4];
    }

    bb91: {
        StorageLive(_244);
        _244 = ((_232 as Continue).0: ());
        _231 = _244;
        StorageDead(_244);
        StorageDead(_232);
        StorageDead(_231);
        _228 = const ();
        StorageDead(_230);
        goto -> bb94;
    }

    bb92: {
        StorageLive(_241);
        _241 = ((_232 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_243);
        _243 = _241;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _243) -> [return: bb93, unwind continue];
    }

    bb93: {
        StorageDead(_243);
        StorageDead(_241);
        StorageDead(_232);
        StorageDead(_231);
        StorageDead(_230);
        StorageDead(_228);
        goto -> bb352;
    }

    bb94: {
        StorageDead(_228);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &mut (*_15);
        StorageLive(_247);
        _247 = ((*_4).21: u16);
        _245 = can_reward_user_with_perp_pnl(move _246, move _247) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_247);
        StorageDead(_246);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = &mut (*_11);
        StorageLive(_251);
        _251 = ((*_4).21: u16);
        _249 = can_reward_user_with_perp_pnl(move _250, move _251) -> [return: bb96, unwind continue];
    }

    bb96: {
        switchInt(move _249) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        StorageDead(_251);
        StorageDead(_250);
        _248 = const true;
        goto -> bb100;
    }

    bb98: {
        StorageDead(_251);
        StorageDead(_250);
        StorageLive(_252);
        _252 = &mut (*_13);
        StorageLive(_253);
        _253 = ((*_4).21: u16);
        _248 = can_reward_user_with_perp_pnl(move _252, move _253) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_253);
        StorageDead(_252);
        goto -> bb100;
    }

    bb100: {
        StorageDead(_249);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        _264 = &(*_2);
        StorageLive(_265);
        _265 = _212;
        StorageLive(_266);
        _266 = &(*_17);
        StorageLive(_267);
        _267 = _135;
        StorageLive(_268);
        _268 = _8;
        StorageLive(_269);
        _269 = _248;
        StorageLive(_270);
        _270 = _245;
        StorageLive(_271);
        _271 = &(*_16);
        StorageLive(_272);
        _272 = _213;
        StorageLive(_273);
        _273 = _134;
        StorageLive(_274);
        _274 = ((*_4).27: i16);
        StorageLive(_275);
        StorageLive(_276);
        _276 = &(*_1);
        StorageLive(_277);
        _277 = math::margin::MarginRequirementType::Initial;
        _275 = User::is_high_leverage_mode(move _276, move _277) -> [return: bb101, unwind continue];
    }

    bb101: {
        StorageDead(_277);
        StorageDead(_276);
        _263 = calculate_fee_for_fulfillment_with_amm(move _264, move _265, move _266, move _267, move _268, move _269, move _270, move _271, move _272, move _273, move _274, move _275) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_267);
        StorageDead(_266);
        StorageDead(_265);
        StorageDead(_264);
        _262 = <std::result::Result<FillFees, error::ErrorCode> as Try>::branch(move _263) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_263);
        _278 = discriminant(_262);
        switchInt(move _278) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_282);
        _282 = move ((_262 as Continue).0: math::fees::FillFees);
        _261 = move _282;
        StorageDead(_282);
        StorageLive(_254);
        _254 = (_261.0: u64);
        StorageLive(_255);
        _255 = (_261.2: i64);
        StorageLive(_256);
        _256 = (_261.4: u64);
        StorageLive(_257);
        _257 = (_261.6: u64);
        StorageLive(_258);
        _258 = (_261.5: u64);
        StorageLive(_259);
        _259 = (_261.3: i64);
        StorageLive(_260);
        _260 = (_261.1: u64);
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        _286 = _37;
        StorageLive(_287);
        _287 = _212;
        StorageLive(_288);
        _288 = _136;
        _285 = math::orders::get_position_delta_for_fill(move _286, move _287, move _288) -> [return: bb107, unwind continue];
    }

    bb105: {
        StorageLive(_279);
        _279 = ((_262 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_281);
        _281 = _279;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _281) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_281);
        StorageDead(_279);
        StorageDead(_262);
        StorageDead(_261);
        goto -> bb351;
    }

    bb107: {
        StorageDead(_288);
        StorageDead(_287);
        StorageDead(_286);
        _284 = <std::result::Result<PositionDelta, error::ErrorCode> as Try>::branch(move _285) -> [return: bb108, unwind continue];
    }

    bb108: {
        StorageDead(_285);
        _289 = discriminant(_284);
        switchInt(move _289) -> [0: bb109, 1: bb110, otherwise: bb4];
    }

    bb109: {
        StorageLive(_293);
        _293 = move ((_284 as Continue).0: controller::position::PositionDelta);
        _283 = move _293;
        StorageDead(_293);
        StorageDead(_284);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        _297 = (((*_4).1: state::perp_market::AMM).28: i128);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = _255;
        _300 = <i64 as Cast>::cast::<i128>(move _301) -> [return: bb112, unwind continue];
    }

    bb110: {
        StorageLive(_290);
        _290 = ((_284 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_292);
        _292 = _290;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _292) -> [return: bb111, unwind continue];
    }

    bb111: {
        StorageDead(_292);
        StorageDead(_290);
        StorageDead(_284);
        goto -> bb350;
    }

    bb112: {
        StorageDead(_301);
        _299 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _300) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_300);
        _302 = discriminant(_299);
        switchInt(move _302) -> [0: bb114, 1: bb115, otherwise: bb4];
    }

    bb114: {
        StorageLive(_306);
        _306 = ((_299 as Continue).0: i128);
        _298 = _306;
        StorageDead(_306);
        _296 = <i128 as SafeMath>::safe_add(move _297, move _298) -> [return: bb117, unwind continue];
    }

    bb115: {
        StorageLive(_303);
        _303 = ((_299 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_305);
        _305 = _303;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _305) -> [return: bb116, unwind continue];
    }

    bb116: {
        StorageDead(_305);
        StorageDead(_303);
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_296);
        goto -> bb349;
    }

    bb117: {
        StorageDead(_298);
        StorageDead(_297);
        _295 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _296) -> [return: bb118, unwind continue];
    }

    bb118: {
        StorageDead(_296);
        _307 = discriminant(_295);
        switchInt(move _307) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        StorageLive(_311);
        _311 = ((_295 as Continue).0: i128);
        _294 = _311;
        StorageDead(_311);
        (((*_4).1: state::perp_market::AMM).28: i128) = move _294;
        StorageDead(_294);
        StorageDead(_299);
        StorageDead(_295);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        _315 = (((*_4).1: state::perp_market::AMM).30: u128);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = _254;
        _318 = <u64 as Cast>::cast::<u128>(move _319) -> [return: bb122, unwind continue];
    }

    bb120: {
        StorageLive(_308);
        _308 = ((_295 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_310);
        _310 = _308;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _310) -> [return: bb121, unwind continue];
    }

    bb121: {
        StorageDead(_310);
        StorageDead(_308);
        goto -> bb349;
    }

    bb122: {
        StorageDead(_319);
        _317 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _318) -> [return: bb123, unwind continue];
    }

    bb123: {
        StorageDead(_318);
        _320 = discriminant(_317);
        switchInt(move _320) -> [0: bb124, 1: bb125, otherwise: bb4];
    }

    bb124: {
        StorageLive(_324);
        _324 = ((_317 as Continue).0: u128);
        _316 = _324;
        StorageDead(_324);
        _314 = <u128 as SafeMath>::safe_add(move _315, move _316) -> [return: bb127, unwind continue];
    }

    bb125: {
        StorageLive(_321);
        _321 = ((_317 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_323);
        _323 = _321;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _323) -> [return: bb126, unwind continue];
    }

    bb126: {
        StorageDead(_323);
        StorageDead(_321);
        StorageDead(_316);
        StorageDead(_315);
        StorageDead(_314);
        goto -> bb348;
    }

    bb127: {
        StorageDead(_316);
        StorageDead(_315);
        _313 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _314) -> [return: bb128, unwind continue];
    }

    bb128: {
        StorageDead(_314);
        _325 = discriminant(_313);
        switchInt(move _325) -> [0: bb129, 1: bb130, otherwise: bb4];
    }

    bb129: {
        StorageLive(_329);
        _329 = ((_313 as Continue).0: u128);
        _312 = _329;
        StorageDead(_329);
        (((*_4).1: state::perp_market::AMM).30: u128) = move _312;
        StorageDead(_312);
        StorageDead(_317);
        StorageDead(_313);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        _333 = (((*_4).1: state::perp_market::AMM).29: i128);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = _213;
        _336 = <i64 as Cast>::cast::<i128>(move _337) -> [return: bb132, unwind continue];
    }

    bb130: {
        StorageLive(_326);
        _326 = ((_313 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_328);
        _328 = _326;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _328) -> [return: bb131, unwind continue];
    }

    bb131: {
        StorageDead(_328);
        StorageDead(_326);
        goto -> bb348;
    }

    bb132: {
        StorageDead(_337);
        _335 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _336) -> [return: bb133, unwind continue];
    }

    bb133: {
        StorageDead(_336);
        _338 = discriminant(_335);
        switchInt(move _338) -> [0: bb134, 1: bb135, otherwise: bb4];
    }

    bb134: {
        StorageLive(_342);
        _342 = ((_335 as Continue).0: i128);
        _334 = _342;
        StorageDead(_342);
        _332 = <i128 as SafeMath>::safe_add(move _333, move _334) -> [return: bb137, unwind continue];
    }

    bb135: {
        StorageLive(_339);
        _339 = ((_335 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_341);
        _341 = _339;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _341) -> [return: bb136, unwind continue];
    }

    bb136: {
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_332);
        goto -> bb347;
    }

    bb137: {
        StorageDead(_334);
        StorageDead(_333);
        _331 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _332) -> [return: bb138, unwind continue];
    }

    bb138: {
        StorageDead(_332);
        _343 = discriminant(_331);
        switchInt(move _343) -> [0: bb139, 1: bb140, otherwise: bb4];
    }

    bb139: {
        StorageLive(_347);
        _347 = ((_331 as Continue).0: i128);
        _330 = _347;
        StorageDead(_347);
        (((*_4).1: state::perp_market::AMM).29: i128) = move _330;
        StorageDead(_330);
        StorageDead(_335);
        StorageDead(_331);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        _351 = (((*_4).1: state::perp_market::AMM).31: i128);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _355 = _255;
        _354 = <i64 as Cast>::cast::<i128>(move _355) -> [return: bb142, unwind continue];
    }

    bb140: {
        StorageLive(_344);
        _344 = ((_331 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_346);
        _346 = _344;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _346) -> [return: bb141, unwind continue];
    }

    bb141: {
        StorageDead(_346);
        StorageDead(_344);
        goto -> bb347;
    }

    bb142: {
        StorageDead(_355);
        _353 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _354) -> [return: bb143, unwind continue];
    }

    bb143: {
        StorageDead(_354);
        _356 = discriminant(_353);
        switchInt(move _356) -> [0: bb144, 1: bb145, otherwise: bb4];
    }

    bb144: {
        StorageLive(_360);
        _360 = ((_353 as Continue).0: i128);
        _352 = _360;
        StorageDead(_360);
        _350 = <i128 as SafeMath>::safe_add(move _351, move _352) -> [return: bb147, unwind continue];
    }

    bb145: {
        StorageLive(_357);
        _357 = ((_353 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_359);
        _359 = _357;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _359) -> [return: bb146, unwind continue];
    }

    bb146: {
        StorageDead(_359);
        StorageDead(_357);
        StorageDead(_352);
        StorageDead(_351);
        StorageDead(_350);
        goto -> bb346;
    }

    bb147: {
        StorageDead(_352);
        StorageDead(_351);
        _349 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _350) -> [return: bb148, unwind continue];
    }

    bb148: {
        StorageDead(_350);
        _361 = discriminant(_349);
        switchInt(move _361) -> [0: bb149, 1: bb150, otherwise: bb4];
    }

    bb149: {
        StorageLive(_365);
        _365 = ((_349 as Continue).0: i128);
        _348 = _365;
        StorageDead(_365);
        (((*_4).1: state::perp_market::AMM).31: i128) = move _348;
        StorageDead(_348);
        StorageDead(_353);
        StorageDead(_349);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _369 = (((*_4).1: state::perp_market::AMM).49: i64);
        StorageLive(_370);
        _370 = _255;
        _368 = <i64 as SafeMath>::safe_add(move _369, move _370) -> [return: bb152, unwind continue];
    }

    bb150: {
        StorageLive(_362);
        _362 = ((_349 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_364);
        _364 = _362;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _364) -> [return: bb151, unwind continue];
    }

    bb151: {
        StorageDead(_364);
        StorageDead(_362);
        goto -> bb346;
    }

    bb152: {
        StorageDead(_370);
        StorageDead(_369);
        _367 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _368) -> [return: bb153, unwind continue];
    }

    bb153: {
        StorageDead(_368);
        _371 = discriminant(_367);
        switchInt(move _371) -> [0: bb154, 1: bb155, otherwise: bb4];
    }

    bb154: {
        StorageLive(_375);
        _375 = ((_367 as Continue).0: i64);
        _366 = _375;
        StorageDead(_375);
        (((*_4).1: state::perp_market::AMM).49: i64) = move _366;
        StorageDead(_366);
        StorageDead(_367);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _379 = &mut (*_2);
        StorageLive(_380);
        _380 = _254;
        _378 = UserStats::increment_total_fees(move _379, move _380) -> [return: bb157, unwind continue];
    }

    bb155: {
        StorageLive(_372);
        _372 = ((_367 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_374);
        _374 = _372;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _374) -> [return: bb156, unwind continue];
    }

    bb156: {
        StorageDead(_374);
        StorageDead(_372);
        StorageDead(_366);
        StorageDead(_367);
        goto -> bb350;
    }

    bb157: {
        StorageDead(_380);
        StorageDead(_379);
        _377 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _378) -> [return: bb158, unwind continue];
    }

    bb158: {
        StorageDead(_378);
        _381 = discriminant(_377);
        switchInt(move _381) -> [0: bb159, 1: bb160, otherwise: bb4];
    }

    bb159: {
        StorageLive(_385);
        _385 = ((_377 as Continue).0: ());
        _376 = _385;
        StorageDead(_385);
        StorageDead(_377);
        StorageDead(_376);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        _389 = &mut (*_2);
        StorageLive(_390);
        _390 = _260;
        _388 = UserStats::increment_total_rebate(move _389, move _390) -> [return: bb162, unwind continue];
    }

    bb160: {
        StorageLive(_382);
        _382 = ((_377 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_384);
        _384 = _382;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _384) -> [return: bb161, unwind continue];
    }

    bb161: {
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_377);
        StorageDead(_376);
        goto -> bb350;
    }

    bb162: {
        StorageDead(_390);
        StorageDead(_389);
        _387 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _388) -> [return: bb163, unwind continue];
    }

    bb163: {
        StorageDead(_388);
        _391 = discriminant(_387);
        switchInt(move _391) -> [0: bb164, 1: bb165, otherwise: bb4];
    }

    bb164: {
        StorageLive(_395);
        _395 = ((_387 as Continue).0: ());
        _386 = _395;
        StorageDead(_395);
        StorageDead(_387);
        StorageDead(_386);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = &mut (*_2);
        StorageLive(_400);
        _400 = _257;
        _398 = UserStats::increment_total_referee_discount(move _399, move _400) -> [return: bb167, unwind continue];
    }

    bb165: {
        StorageLive(_392);
        _392 = ((_387 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_394);
        _394 = _392;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _394) -> [return: bb166, unwind continue];
    }

    bb166: {
        StorageDead(_394);
        StorageDead(_392);
        StorageDead(_387);
        StorageDead(_386);
        goto -> bb350;
    }

    bb167: {
        StorageDead(_400);
        StorageDead(_399);
        _397 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _398) -> [return: bb168, unwind continue];
    }

    bb168: {
        StorageDead(_398);
        _401 = discriminant(_397);
        switchInt(move _401) -> [0: bb169, 1: bb170, otherwise: bb4];
    }

    bb169: {
        StorageLive(_405);
        _405 = ((_397 as Continue).0: ());
        _396 = _405;
        StorageDead(_405);
        StorageDead(_397);
        StorageDead(_396);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _409 = &mut (*_15);
        _408 = Option::<&mut User>::as_mut(move _409) -> [return: bb172, unwind continue];
    }

    bb170: {
        StorageLive(_402);
        _402 = ((_397 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_404);
        _404 = _402;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _404) -> [return: bb171, unwind continue];
    }

    bb171: {
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_397);
        StorageDead(_396);
        goto -> bb350;
    }

    bb172: {
        StorageDead(_409);
        StorageLive(_410);
        StorageLive(_411);
        _411 = &mut (*_16);
        _410 = Option::<&mut UserStats>::as_mut(move _411) -> [return: bb173, unwind continue];
    }

    bb173: {
        StorageDead(_411);
        _407 = (move _408, move _410);
        StorageDead(_410);
        StorageDead(_408);
        _413 = discriminant((_407.0: std::option::Option<&mut &mut state::user::User>));
        switchInt(move _413) -> [1: bb174, otherwise: bb198];
    }

    bb174: {
        _412 = discriminant((_407.1: std::option::Option<&mut &mut state::user::UserStats>));
        switchInt(move _412) -> [1: bb175, otherwise: bb198];
    }

    bb175: {
        StorageLive(_414);
        _414 = move (((_407.0: std::option::Option<&mut &mut state::user::User>) as Some).0: &mut &mut state::user::User);
        StorageLive(_415);
        _415 = move (((_407.1: std::option::Option<&mut &mut state::user::UserStats>) as Some).0: &mut &mut state::user::UserStats);
        StorageLive(_416);
        StorageLive(_417);
        _785 = deref_copy (*_414);
        _417 = &mut (*_785);
        StorageLive(_418);
        _418 = ((*_4).21: u16);
        _416 = User::force_get_perp_position_mut(move _417, move _418) -> [return: bb176, unwind continue];
    }

    bb176: {
        StorageDead(_418);
        StorageDead(_417);
        _419 = discriminant(_416);
        switchInt(move _419) -> [0: bb177, otherwise: bb196];
    }

    bb177: {
        StorageLive(_420);
        _420 = move ((_416 as Ok).0: &mut state::user::PerpPosition);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = _258;
        _422 = Gt(move _423, const 0_u64);
        switchInt(move _422) -> [0: bb189, otherwise: bb178];
    }

    bb178: {
        StorageDead(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        StorageLive(_427);
        _427 = &mut (*_420);
        StorageLive(_428);
        _428 = &mut (*_4);
        StorageLive(_429);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = _258;
        _431 = <u64 as Cast>::cast::<i64>(move _432) -> [return: bb179, unwind continue];
    }

    bb179: {
        StorageDead(_432);
        _430 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _431) -> [return: bb180, unwind continue];
    }

    bb180: {
        StorageDead(_431);
        _433 = discriminant(_430);
        switchInt(move _433) -> [0: bb181, 1: bb182, otherwise: bb4];
    }

    bb181: {
        StorageLive(_437);
        _437 = ((_430 as Continue).0: i64);
        _429 = _437;
        StorageDead(_437);
        _426 = update_quote_asset_amount(move _427, move _428, move _429) -> [return: bb184, unwind continue];
    }

    bb182: {
        StorageLive(_434);
        _434 = ((_430 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_436);
        _436 = _434;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _436) -> [return: bb183, unwind continue];
    }

    bb183: {
        StorageDead(_436);
        StorageDead(_434);
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_426);
        goto -> bb344;
    }

    bb184: {
        StorageDead(_429);
        StorageDead(_428);
        StorageDead(_427);
        _425 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _426) -> [return: bb185, unwind continue];
    }

    bb185: {
        StorageDead(_426);
        _438 = discriminant(_425);
        switchInt(move _438) -> [0: bb186, 1: bb187, otherwise: bb4];
    }

    bb186: {
        StorageLive(_442);
        _442 = ((_425 as Continue).0: ());
        _424 = _442;
        StorageDead(_442);
        StorageDead(_430);
        StorageDead(_425);
        StorageDead(_424);
        _421 = const ();
        goto -> bb190;
    }

    bb187: {
        StorageLive(_439);
        _439 = ((_425 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_441);
        _441 = _439;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _441) -> [return: bb188, unwind continue];
    }

    bb188: {
        StorageDead(_441);
        StorageDead(_439);
        goto -> bb344;
    }

    bb189: {
        StorageDead(_423);
        _421 = const ();
        goto -> bb190;
    }

    bb190: {
        StorageDead(_422);
        StorageDead(_421);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        _786 = deref_copy (*_415);
        _446 = &mut (*_786);
        StorageLive(_447);
        _447 = _258;
        StorageLive(_448);
        _448 = _7;
        _445 = UserStats::increment_total_referrer_reward(move _446, move _447, move _448) -> [return: bb191, unwind continue];
    }

    bb191: {
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_446);
        _444 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _445) -> [return: bb192, unwind continue];
    }

    bb192: {
        StorageDead(_445);
        _449 = discriminant(_444);
        switchInt(move _449) -> [0: bb193, 1: bb194, otherwise: bb4];
    }

    bb193: {
        StorageLive(_453);
        _453 = ((_444 as Continue).0: ());
        _443 = _453;
        StorageDead(_453);
        StorageDead(_444);
        StorageDead(_443);
        _406 = const ();
        StorageDead(_420);
        goto -> bb197;
    }

    bb194: {
        StorageLive(_450);
        _450 = ((_444 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_452);
        _452 = _450;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _452) -> [return: bb195, unwind continue];
    }

    bb195: {
        StorageDead(_452);
        StorageDead(_450);
        StorageDead(_444);
        StorageDead(_443);
        goto -> bb345;
    }

    bb196: {
        _406 = const ();
        goto -> bb197;
    }

    bb197: {
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_414);
        goto -> bb199;
    }

    bb198: {
        _406 = const ();
        goto -> bb199;
    }

    bb199: {
        StorageDead(_407);
        StorageDead(_406);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        _458 = &((*_1).4: [state::user::PerpPosition; 8]);
        _457 = &(*_458);
        StorageLive(_459);
        _459 = ((*_4).21: u16);
        _456 = get_position_index(move _457, move _459) -> [return: bb200, unwind continue];
    }

    bb200: {
        StorageDead(_459);
        StorageDead(_457);
        _455 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _456) -> [return: bb201, unwind continue];
    }

    bb201: {
        StorageDead(_456);
        _460 = discriminant(_455);
        switchInt(move _460) -> [0: bb202, 1: bb203, otherwise: bb4];
    }

    bb202: {
        StorageLive(_464);
        _464 = ((_455 as Continue).0: usize);
        _454 = _464;
        StorageDead(_464);
        StorageDead(_458);
        StorageDead(_455);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        _467 = _254;
        _466 = Ne(move _467, const 0_u64);
        switchInt(move _466) -> [0: bb206, otherwise: bb205];
    }

    bb203: {
        StorageLive(_461);
        _461 = ((_455 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_463);
        _463 = _461;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _463) -> [return: bb204, unwind continue];
    }

    bb204: {
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_458);
        StorageDead(_455);
        goto -> bb343;
    }

    bb205: {
        StorageDead(_467);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        _473 = _454;
        _474 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _475 = Lt(_473, _474);
        assert(move _475, "index out of bounds: the length is {} but the index is {}", move _474, _473) -> [success: bb207, unwind continue];
    }

    bb206: {
        StorageDead(_467);
        _465 = const ();
        goto -> bb219;
    }

    bb207: {
        _472 = &mut ((*_1).4: [state::user::PerpPosition; 8])[_473];
        _471 = &mut (*_472);
        StorageLive(_476);
        _476 = &mut (*_4);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        _481 = _254;
        _480 = <u64 as Cast>::cast::<i64>(move _481) -> [return: bb208, unwind continue];
    }

    bb208: {
        StorageDead(_481);
        _479 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _480) -> [return: bb209, unwind continue];
    }

    bb209: {
        StorageDead(_480);
        _482 = discriminant(_479);
        switchInt(move _482) -> [0: bb210, 1: bb211, otherwise: bb4];
    }

    bb210: {
        StorageLive(_486);
        _486 = ((_479 as Continue).0: i64);
        _478 = _486;
        StorageDead(_486);
        _487 = Eq(_478, const i64::MIN);
        assert(!move _487, "attempt to negate `{}`, which would overflow", _478) -> [success: bb213, unwind continue];
    }

    bb211: {
        StorageLive(_483);
        _483 = ((_479 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_485);
        _485 = _483;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _485) -> [return: bb212, unwind continue];
    }

    bb212: {
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_478);
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_471);
        StorageDead(_470);
        goto -> bb342;
    }

    bb213: {
        _477 = Neg(move _478);
        StorageDead(_478);
        _470 = update_quote_asset_and_break_even_amount(move _471, move _476, move _477) -> [return: bb214, unwind continue];
    }

    bb214: {
        StorageDead(_477);
        StorageDead(_476);
        StorageDead(_471);
        _469 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _470) -> [return: bb215, unwind continue];
    }

    bb215: {
        StorageDead(_470);
        _488 = discriminant(_469);
        switchInt(move _488) -> [0: bb216, 1: bb217, otherwise: bb4];
    }

    bb216: {
        StorageLive(_492);
        _492 = ((_469 as Continue).0: ());
        _468 = _492;
        StorageDead(_492);
        StorageDead(_479);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_468);
        _465 = const ();
        goto -> bb219;
    }

    bb217: {
        StorageLive(_489);
        _489 = ((_469 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_491);
        _491 = _489;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _491) -> [return: bb218, unwind continue];
    }

    bb218: {
        StorageDead(_491);
        StorageDead(_489);
        goto -> bb342;
    }

    bb219: {
        StorageDead(_466);
        StorageDead(_465);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        _495 = _260;
        _494 = Ne(move _495, const 0_u64);
        switchInt(move _494) -> [0: bb232, otherwise: bb220];
    }

    bb220: {
        StorageDead(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        _501 = _454;
        _502 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _503 = Lt(_501, _502);
        assert(move _503, "index out of bounds: the length is {} but the index is {}", move _502, _501) -> [success: bb221, unwind continue];
    }

    bb221: {
        _500 = &mut ((*_1).4: [state::user::PerpPosition; 8])[_501];
        _499 = &mut (*_500);
        StorageLive(_504);
        _504 = &mut (*_4);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = _260;
        _507 = <u64 as Cast>::cast::<i64>(move _508) -> [return: bb222, unwind continue];
    }

    bb222: {
        StorageDead(_508);
        _506 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _507) -> [return: bb223, unwind continue];
    }

    bb223: {
        StorageDead(_507);
        _509 = discriminant(_506);
        switchInt(move _509) -> [0: bb224, 1: bb225, otherwise: bb4];
    }

    bb224: {
        StorageLive(_513);
        _513 = ((_506 as Continue).0: i64);
        _505 = _513;
        StorageDead(_513);
        _498 = update_quote_asset_and_break_even_amount(move _499, move _504, move _505) -> [return: bb227, unwind continue];
    }

    bb225: {
        StorageLive(_510);
        _510 = ((_506 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_512);
        _512 = _510;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _512) -> [return: bb226, unwind continue];
    }

    bb226: {
        StorageDead(_512);
        StorageDead(_510);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_499);
        StorageDead(_498);
        goto -> bb341;
    }

    bb227: {
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_499);
        _497 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _498) -> [return: bb228, unwind continue];
    }

    bb228: {
        StorageDead(_498);
        _514 = discriminant(_497);
        switchInt(move _514) -> [0: bb229, 1: bb230, otherwise: bb4];
    }

    bb229: {
        StorageLive(_518);
        _518 = ((_497 as Continue).0: ());
        _496 = _518;
        StorageDead(_518);
        StorageDead(_506);
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_497);
        StorageDead(_496);
        _493 = const ();
        goto -> bb233;
    }

    bb230: {
        StorageLive(_515);
        _515 = ((_497 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_517);
        _517 = _515;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _517) -> [return: bb231, unwind continue];
    }

    bb231: {
        StorageDead(_517);
        StorageDead(_515);
        goto -> bb341;
    }

    bb232: {
        StorageDead(_495);
        _493 = const ();
        goto -> bb233;
    }

    bb233: {
        StorageDead(_494);
        StorageDead(_493);
        StorageLive(_519);
        StorageLive(_520);
        _520 = _134;
        switchInt(move _520) -> [0: bb240, otherwise: bb234];
    }

    bb234: {
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = &mut (*_2);
        StorageLive(_525);
        _525 = ((*_4).30: u8);
        StorageLive(_526);
        _526 = _212;
        StorageLive(_527);
        _527 = _7;
        _523 = UserStats::update_maker_volume_30d(move _524, move _525, move _526, move _527) -> [return: bb235, unwind continue];
    }

    bb235: {
        StorageDead(_527);
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_524);
        _522 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _523) -> [return: bb236, unwind continue];
    }

    bb236: {
        StorageDead(_523);
        _528 = discriminant(_522);
        switchInt(move _528) -> [0: bb237, 1: bb238, otherwise: bb4];
    }

    bb237: {
        StorageLive(_532);
        _532 = ((_522 as Continue).0: ());
        _521 = _532;
        StorageDead(_532);
        StorageDead(_522);
        StorageDead(_521);
        _519 = const ();
        goto -> bb246;
    }

    bb238: {
        StorageLive(_529);
        _529 = ((_522 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_531);
        _531 = _529;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _531) -> [return: bb239, unwind continue];
    }

    bb239: {
        StorageDead(_531);
        StorageDead(_529);
        StorageDead(_522);
        StorageDead(_521);
        goto -> bb340;
    }

    bb240: {
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        _536 = &mut (*_2);
        StorageLive(_537);
        _537 = ((*_4).29: u8);
        StorageLive(_538);
        _538 = _212;
        StorageLive(_539);
        _539 = _7;
        _535 = UserStats::update_taker_volume_30d(move _536, move _537, move _538, move _539) -> [return: bb241, unwind continue];
    }

    bb241: {
        StorageDead(_539);
        StorageDead(_538);
        StorageDead(_537);
        StorageDead(_536);
        _534 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _535) -> [return: bb242, unwind continue];
    }

    bb242: {
        StorageDead(_535);
        _540 = discriminant(_534);
        switchInt(move _540) -> [0: bb243, 1: bb244, otherwise: bb4];
    }

    bb243: {
        StorageLive(_544);
        _544 = ((_534 as Continue).0: ());
        _533 = _544;
        StorageDead(_544);
        StorageDead(_534);
        StorageDead(_533);
        _519 = const ();
        goto -> bb246;
    }

    bb244: {
        StorageLive(_541);
        _541 = ((_534 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_543);
        _543 = _541;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _543) -> [return: bb245, unwind continue];
    }

    bb245: {
        StorageDead(_543);
        StorageDead(_541);
        StorageDead(_534);
        StorageDead(_533);
        goto -> bb340;
    }

    bb246: {
        StorageDead(_520);
        StorageDead(_519);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        _547 = &mut (*_11);
        _546 = Option::<&mut User>::as_mut(move _547) -> [return: bb247, unwind continue];
    }

    bb247: {
        StorageDead(_547);
        _548 = discriminant(_546);
        switchInt(move _548) -> [1: bb248, otherwise: bb254];
    }

    bb248: {
        StorageLive(_549);
        _549 = move ((_546 as Some).0: &mut &mut state::user::User);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        _787 = deref_copy (*_549);
        _553 = &mut (*_787);
        StorageLive(_554);
        _554 = &mut (*_12);
        StorageLive(_555);
        _555 = &mut (*_4);
        StorageLive(_556);
        _556 = _256;
        StorageLive(_557);
        _557 = _212;
        StorageLive(_558);
        _558 = _7;
        StorageLive(_559);
        _559 = _8;
        _552 = credit_filler_perp_pnl(move _553, move _554, move _555, move _556, move _557, move _558, move _559) -> [return: bb249, unwind continue];
    }

    bb249: {
        StorageDead(_559);
        StorageDead(_558);
        StorageDead(_557);
        StorageDead(_556);
        StorageDead(_555);
        StorageDead(_554);
        StorageDead(_553);
        _551 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _552) -> [return: bb250, unwind continue];
    }

    bb250: {
        StorageDead(_552);
        _560 = discriminant(_551);
        switchInt(move _560) -> [0: bb251, 1: bb252, otherwise: bb4];
    }

    bb251: {
        StorageLive(_564);
        _564 = ((_551 as Continue).0: ());
        _550 = _564;
        StorageDead(_564);
        StorageDead(_551);
        StorageDead(_550);
        _545 = const ();
        StorageDead(_549);
        goto -> bb264;
    }

    bb252: {
        StorageLive(_561);
        _561 = ((_551 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_563);
        _563 = _561;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _563) -> [return: bb253, unwind continue];
    }

    bb253: {
        StorageDead(_563);
        StorageDead(_561);
        StorageDead(_551);
        StorageDead(_550);
        StorageDead(_549);
        goto -> bb339;
    }

    bb254: {
        StorageLive(_565);
        StorageLive(_566);
        _566 = &mut (*_13);
        _565 = Option::<&mut User>::as_mut(move _566) -> [return: bb255, unwind continue];
    }

    bb255: {
        StorageDead(_566);
        _567 = discriminant(_565);
        switchInt(move _567) -> [1: bb256, otherwise: bb262];
    }

    bb256: {
        StorageLive(_568);
        _568 = move ((_565 as Some).0: &mut &mut state::user::User);
        StorageLive(_569);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        _788 = deref_copy (*_568);
        _572 = &mut (*_788);
        StorageLive(_573);
        _573 = &mut (*_14);
        StorageLive(_574);
        _574 = &mut (*_4);
        StorageLive(_575);
        _575 = _256;
        StorageLive(_576);
        _576 = _212;
        StorageLive(_577);
        _577 = _7;
        StorageLive(_578);
        _578 = _8;
        _571 = credit_filler_perp_pnl(move _572, move _573, move _574, move _575, move _576, move _577, move _578) -> [return: bb257, unwind continue];
    }

    bb257: {
        StorageDead(_578);
        StorageDead(_577);
        StorageDead(_576);
        StorageDead(_575);
        StorageDead(_574);
        StorageDead(_573);
        StorageDead(_572);
        _570 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _571) -> [return: bb258, unwind continue];
    }

    bb258: {
        StorageDead(_571);
        _579 = discriminant(_570);
        switchInt(move _579) -> [0: bb259, 1: bb260, otherwise: bb4];
    }

    bb259: {
        StorageLive(_583);
        _583 = ((_570 as Continue).0: ());
        _569 = _583;
        StorageDead(_583);
        StorageDead(_570);
        StorageDead(_569);
        _545 = const ();
        StorageDead(_568);
        goto -> bb263;
    }

    bb260: {
        StorageLive(_580);
        _580 = ((_570 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_582);
        _582 = _580;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _582) -> [return: bb261, unwind continue];
    }

    bb261: {
        StorageDead(_582);
        StorageDead(_580);
        StorageDead(_570);
        StorageDead(_569);
        StorageDead(_568);
        StorageDead(_565);
        goto -> bb339;
    }

    bb262: {
        _545 = const ();
        goto -> bb263;
    }

    bb263: {
        StorageDead(_565);
        goto -> bb264;
    }

    bb264: {
        StorageDead(_546);
        StorageDead(_545);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        StorageLive(_588);
        StorageLive(_589);
        _589 = _3;
        _590 = Len(((*_1).5: [state::user::Order; 32]));
        _591 = Lt(_589, _590);
        assert(move _591, "index out of bounds: the length is {} but the index is {}", move _590, _589) -> [success: bb265, unwind continue];
    }

    bb265: {
        _588 = &mut ((*_1).5: [state::user::Order; 32])[_589];
        _587 = &mut (*_588);
        StorageLive(_592);
        _592 = _37;
        StorageLive(_593);
        _593 = _212;
        _586 = update_order_after_fill(move _587, move _592, move _593) -> [return: bb266, unwind continue];
    }

    bb266: {
        StorageDead(_593);
        StorageDead(_592);
        StorageDead(_587);
        _585 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _586) -> [return: bb267, unwind continue];
    }

    bb267: {
        StorageDead(_586);
        _594 = discriminant(_585);
        switchInt(move _594) -> [0: bb268, 1: bb269, otherwise: bb4];
    }

    bb268: {
        StorageLive(_598);
        _598 = ((_585 as Continue).0: ());
        _584 = _598;
        StorageDead(_598);
        StorageDead(_589);
        StorageDead(_588);
        StorageDead(_585);
        StorageDead(_584);
        StorageLive(_599);
        StorageLive(_600);
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = _454;
        _605 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _606 = Lt(_604, _605);
        assert(move _606, "index out of bounds: the length is {} but the index is {}", move _605, _604) -> [success: bb271, unwind continue];
    }

    bb269: {
        StorageLive(_595);
        _595 = ((_585 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_597);
        _597 = _595;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _597) -> [return: bb270, unwind continue];
    }

    bb270: {
        StorageDead(_597);
        StorageDead(_595);
        StorageDead(_589);
        StorageDead(_588);
        StorageDead(_585);
        StorageDead(_584);
        goto -> bb343;
    }

    bb271: {
        _603 = &mut ((*_1).4: [state::user::PerpPosition; 8])[_604];
        _602 = &mut (*_603);
        StorageLive(_607);
        StorageLive(_608);
        _608 = &_136;
        _607 = &(*_608);
        StorageLive(_609);
        _609 = _37;
        StorageLive(_610);
        StorageLive(_611);
        StorageLive(_612);
        _612 = _3;
        _613 = Len(((*_1).5: [state::user::Order; 32]));
        _614 = Lt(_612, _613);
        assert(move _614, "index out of bounds: the length is {} but the index is {}", move _613, _612) -> [success: bb272, unwind continue];
    }

    bb272: {
        _611 = &((*_1).5: [state::user::Order; 32])[_612];
        _610 = Order::update_open_bids_and_asks(move _611) -> [return: bb273, unwind continue];
    }

    bb273: {
        StorageDead(_611);
        _601 = decrease_open_bids_and_asks(move _602, move _607, move _609, move _610) -> [return: bb274, unwind continue];
    }

    bb274: {
        StorageDead(_610);
        StorageDead(_609);
        StorageDead(_607);
        StorageDead(_602);
        _600 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _601) -> [return: bb275, unwind continue];
    }

    bb275: {
        StorageDead(_601);
        _615 = discriminant(_600);
        switchInt(move _615) -> [0: bb276, 1: bb277, otherwise: bb4];
    }

    bb276: {
        StorageLive(_619);
        _619 = ((_600 as Continue).0: ());
        _599 = _619;
        StorageDead(_619);
        StorageDead(_612);
        StorageDead(_608);
        StorageDead(_604);
        StorageDead(_603);
        StorageDead(_600);
        StorageDead(_599);
        StorageLive(_624);
        StorageLive(_625);
        _625 = &(*_9);
        StorageLive(_626);
        StorageLive(_627);
        StorageLive(_628);
        _628 = _3;
        _629 = Len(((*_1).5: [state::user::Order; 32]));
        _630 = Lt(_628, _629);
        assert(move _630, "index out of bounds: the length is {} but the index is {}", move _629, _628) -> [success: bb279, unwind continue];
    }

    bb277: {
        StorageLive(_616);
        _616 = ((_600 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_618);
        _618 = _616;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _618) -> [return: bb278, unwind continue];
    }

    bb278: {
        StorageDead(_618);
        StorageDead(_616);
        StorageDead(_612);
        StorageDead(_608);
        StorageDead(_604);
        StorageDead(_603);
        StorageDead(_600);
        StorageDead(_599);
        goto -> bb343;
    }

    bb279: {
        _627 = &((*_1).5: [state::user::Order; 32])[_628];
        _626 = &(*_627);
        _624 = get_taker_and_maker_for_order_record(move _625, move _626) -> [return: bb280, unwind continue];
    }

    bb280: {
        StorageDead(_626);
        StorageDead(_625);
        StorageLive(_620);
        _620 = (_624.0: std::option::Option<anchor_lang::prelude::Pubkey>);
        StorageLive(_621);
        _621 = (_624.1: std::option::Option<state::user::Order>);
        StorageLive(_622);
        _622 = (_624.2: std::option::Option<anchor_lang::prelude::Pubkey>);
        StorageLive(_623);
        _623 = (_624.3: std::option::Option<state::user::Order>);
        StorageDead(_628);
        StorageDead(_627);
        StorageDead(_624);
        StorageLive(_631);
        StorageLive(_632);
        _632 = ((*_4).8: u64);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        _636 = _632;
        _635 = core::num::<impl u64>::checked_add(move _636, const 1_u64) -> [return: bb281, unwind continue];
    }

    bb281: {
        StorageDead(_636);
        StorageLive(_637);
        _637 = Option::<u64>::Some(const 1_u64);
        _634 = Option::<u64>::or(move _635, move _637) -> [return: bb282, unwind continue];
    }

    bb282: {
        StorageDead(_637);
        StorageDead(_635);
        _633 = Option::<u64>::unwrap(move _634) -> [return: bb283, unwind continue];
    }

    bb283: {
        StorageDead(_634);
        ((*_4).8: u64) = move _633;
        StorageDead(_633);
        _631 = _632;
        StorageDead(_632);
        StorageLive(_638);
        StorageLive(_639);
        StorageLive(_640);
        _640 = _19;
        StorageLive(_641);
        _641 = _20;
        _639 = (move _640, move _641);
        StorageDead(_641);
        StorageDead(_640);
        StorageLive(_646);
        _646 = _21;
        switchInt(move _646) -> [0: bb287, otherwise: bb286];
    }

    bb284: {
        _638 = OrderActionExplanation::OrderFilledWithAMM;
        goto -> bb289;
    }

    bb285: {
        _642 = discriminant((_639.1: std::option::Option<u64>));
        switchInt(move _642) -> [1: bb288, otherwise: bb284];
    }

    bb286: {
        StorageDead(_646);
        _638 = OrderActionExplanation::Liquidation;
        goto -> bb289;
    }

    bb287: {
        StorageDead(_646);
        _643 = discriminant((_639.0: std::option::Option<u64>));
        switchInt(move _643) -> [1: bb285, otherwise: bb284];
    }

    bb288: {
        _638 = OrderActionExplanation::OrderFilledWithAMMJit;
        goto -> bb289;
    }

    bb289: {
        StorageDead(_639);
        StorageLive(_647);
        _647 = const 0_u8;
        StorageLive(_648);
        StorageLive(_649);
        _649 = _647;
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        _652 = _3;
        _653 = Len(((*_1).5: [state::user::Order; 32]));
        _654 = Lt(_652, _653);
        assert(move _654, "index out of bounds: the length is {} but the index is {}", move _653, _652) -> [success: bb290, unwind continue];
    }

    bb290: {
        _651 = &((*_1).5: [state::user::Order; 32])[_652];
        _650 = Order::is_signed_msg(move _651) -> [return: bb291, unwind continue];
    }

    bb291: {
        StorageDead(_651);
        StorageLive(_655);
        _655 = OrderBitFlag::SignedMessage;
        _648 = math::orders::set_order_bit_flag(move _649, move _650, move _655) -> [return: bb292, unwind continue];
    }

    bb292: {
        StorageDead(_655);
        StorageDead(_650);
        StorageDead(_649);
        _647 = move _648;
        StorageDead(_648);
        StorageDead(_652);
        StorageLive(_660);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        _666 = _37;
        StorageLive(_667);
        _667 = _161;
        _665 = math::orders::calculate_existing_position_fields_for_order_action(move _666, move _667) -> [return: bb293, unwind continue];
    }

    bb293: {
        StorageDead(_667);
        StorageDead(_666);
        _664 = <std::result::Result<(Option<u64>, Option<u64>), error::ErrorCode> as Try>::branch(move _665) -> [return: bb294, unwind continue];
    }

    bb294: {
        StorageDead(_665);
        _668 = discriminant(_664);
        switchInt(move _668) -> [0: bb295, 1: bb296, otherwise: bb4];
    }

    bb295: {
        StorageLive(_672);
        _672 = ((_664 as Continue).0: (std::option::Option<u64>, std::option::Option<u64>));
        _663 = _672;
        StorageDead(_672);
        StorageLive(_661);
        _661 = (_663.0: std::option::Option<u64>);
        StorageLive(_662);
        _662 = (_663.1: std::option::Option<u64>);
        StorageDead(_664);
        StorageDead(_663);
        StorageLive(_673);
        StorageLive(_674);
        _674 = &_620;
        _673 = Option::<anchor_lang::prelude::Pubkey>::is_some(move _674) -> [return: bb298, unwind continue];
    }

    bb296: {
        StorageLive(_669);
        _669 = ((_664 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_671);
        _671 = _669;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _671) -> [return: bb297, unwind continue];
    }

    bb297: {
        StorageDead(_671);
        StorageDead(_669);
        StorageDead(_664);
        StorageDead(_663);
        StorageDead(_660);
        goto -> bb338;
    }

    bb298: {
        switchInt(move _673) -> [0: bb300, otherwise: bb299];
    }

    bb299: {
        StorageDead(_674);
        StorageLive(_675);
        _675 = _661;
        StorageLive(_676);
        _676 = _662;
        StorageLive(_677);
        _677 = Option::<u64>::None;
        StorageLive(_678);
        _678 = Option::<u64>::None;
        _660 = (move _675, move _676, move _677, move _678);
        StorageDead(_678);
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_675);
        goto -> bb301;
    }

    bb300: {
        StorageDead(_674);
        StorageLive(_679);
        _679 = Option::<u64>::None;
        StorageLive(_680);
        _680 = Option::<u64>::None;
        StorageLive(_681);
        _681 = _661;
        StorageLive(_682);
        _682 = _662;
        _660 = (move _679, move _680, move _681, move _682);
        StorageDead(_682);
        StorageDead(_681);
        StorageDead(_680);
        StorageDead(_679);
        goto -> bb301;
    }

    bb301: {
        StorageDead(_673);
        StorageDead(_662);
        StorageDead(_661);
        StorageLive(_656);
        _656 = (_660.0: std::option::Option<u64>);
        StorageLive(_657);
        _657 = (_660.1: std::option::Option<u64>);
        StorageLive(_658);
        _658 = (_660.2: std::option::Option<u64>);
        StorageLive(_659);
        _659 = (_660.3: std::option::Option<u64>);
        StorageDead(_660);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        _686 = _7;
        StorageLive(_687);
        _687 = OrderAction::Fill;
        StorageLive(_688);
        _688 = _638;
        StorageLive(_689);
        _689 = ((*_4).21: u16);
        StorageLive(_690);
        StorageLive(_691);
        _691 = (*_10);
        _690 = Option::<anchor_lang::prelude::Pubkey>::Some(move _691);
        StorageDead(_691);
        StorageLive(_692);
        StorageLive(_693);
        _693 = _631;
        _692 = Option::<u64>::Some(move _693);
        StorageDead(_693);
        StorageLive(_694);
        StorageLive(_695);
        _695 = _256;
        _694 = Option::<u64>::Some(move _695);
        StorageDead(_695);
        StorageLive(_696);
        StorageLive(_697);
        _697 = _37;
        _696 = Option::<u64>::Some(move _697);
        StorageDead(_697);
        StorageLive(_698);
        StorageLive(_699);
        _699 = _212;
        _698 = Option::<u64>::Some(move _699);
        StorageDead(_699);
        StorageLive(_700);
        StorageLive(_701);
        _701 = _254;
        _700 = Option::<u64>::Some(move _701);
        StorageDead(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        _704 = _260;
        _703 = Ne(move _704, const 0_u64);
        switchInt(move _703) -> [0: bb303, otherwise: bb302];
    }

    bb302: {
        StorageDead(_704);
        StorageLive(_705);
        _705 = _260;
        _702 = Option::<u64>::Some(move _705);
        StorageDead(_705);
        goto -> bb304;
    }

    bb303: {
        StorageDead(_704);
        _702 = Option::<u64>::None;
        goto -> bb304;
    }

    bb304: {
        StorageDead(_703);
        StorageLive(_706);
        StorageLive(_707);
        _707 = _258;
        _706 = Option::<u64>::Some(move _707);
        StorageDead(_707);
        StorageLive(_708);
        StorageLive(_709);
        _709 = _213;
        _708 = Option::<i64>::Some(move _709);
        StorageDead(_709);
        StorageLive(_710);
        _710 = Option::<u64>::None;
        StorageLive(_711);
        _711 = _620;
        StorageLive(_712);
        _712 = _621;
        StorageLive(_713);
        _713 = _622;
        StorageLive(_714);
        _714 = _623;
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        StorageLive(_719);
        _719 = &mut (*_5);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        _723 = &(*_4);
        _722 = PerpMarket::oracle_id(move _723) -> [return: bb305, unwind continue];
    }

    bb305: {
        StorageDead(_723);
        _721 = &_722;
        _720 = &(*_721);
        _718 = OracleMap::<'_>::get_price_data(move _719, move _720) -> [return: bb306, unwind continue];
    }

    bb306: {
        StorageDead(_720);
        StorageDead(_719);
        _717 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _718) -> [return: bb307, unwind continue];
    }

    bb307: {
        StorageDead(_718);
        _724 = discriminant(_717);
        switchInt(move _724) -> [0: bb308, 1: bb309, otherwise: bb4];
    }

    bb308: {
        StorageLive(_728);
        _728 = ((_717 as Continue).0: &state::oracle::OraclePriceData);
        _716 = _728;
        StorageDead(_728);
        _715 = ((*_716).0: i64);
        StorageLive(_729);
        _729 = _647;
        StorageLive(_730);
        _730 = _656;
        StorageLive(_731);
        _731 = _657;
        StorageLive(_732);
        _732 = _658;
        StorageLive(_733);
        _733 = _659;
        StorageLive(_734);
        _734 = Option::<u64>::None;
        _685 = get_order_action_record(move _686, move _687, move _688, move _689, move _690, move _692, move _694, move _696, move _698, move _700, move _702, move _706, move _708, move _710, move _711, move _712, move _713, move _714, move _715, move _729, move _730, move _731, move _732, move _733, move _734) -> [return: bb311, unwind continue];
    }

    bb309: {
        StorageLive(_725);
        _725 = ((_717 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_727);
        _727 = _725;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _727) -> [return: bb310, unwind continue];
    }

    bb310: {
        StorageDead(_727);
        StorageDead(_725);
        StorageDead(_715);
        StorageDead(_714);
        StorageDead(_713);
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_706);
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_698);
        StorageDead(_696);
        StorageDead(_694);
        StorageDead(_692);
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_686);
        StorageDead(_685);
        goto -> bb336;
    }

    bb311: {
        StorageDead(_734);
        StorageDead(_733);
        StorageDead(_732);
        StorageDead(_731);
        StorageDead(_730);
        StorageDead(_729);
        StorageDead(_715);
        StorageDead(_714);
        StorageDead(_713);
        StorageDead(_712);
        StorageDead(_711);
        StorageDead(_710);
        StorageDead(_708);
        StorageDead(_706);
        StorageDead(_702);
        StorageDead(_700);
        StorageDead(_698);
        StorageDead(_696);
        StorageDead(_694);
        StorageDead(_692);
        StorageDead(_690);
        StorageDead(_689);
        StorageDead(_688);
        StorageDead(_687);
        StorageDead(_686);
        _684 = <std::result::Result<OrderActionRecord, error::ErrorCode> as Try>::branch(move _685) -> [return: bb312, unwind continue];
    }

    bb312: {
        StorageDead(_685);
        _735 = discriminant(_684);
        switchInt(move _735) -> [0: bb313, 1: bb314, otherwise: bb4];
    }

    bb313: {
        StorageLive(_739);
        _739 = move ((_684 as Continue).0: state::events::OrderActionRecord);
        _683 = move _739;
        StorageDead(_739);
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_717);
        StorageDead(_716);
        StorageDead(_684);
        StorageLive(_740);
        StorageLive(_741);
        StorageLive(_742);
        StorageLive(_743);
        _743 = move _683;
        _742 = emit_stack::<OrderActionRecord, 464>(move _743) -> [return: bb316, unwind continue];
    }

    bb314: {
        StorageLive(_736);
        _736 = ((_684 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_738);
        _738 = _736;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _738) -> [return: bb315, unwind continue];
    }

    bb315: {
        StorageDead(_738);
        StorageDead(_736);
        goto -> bb336;
    }

    bb316: {
        StorageDead(_743);
        _741 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _742) -> [return: bb317, unwind continue];
    }

    bb317: {
        StorageDead(_742);
        _744 = discriminant(_741);
        switchInt(move _744) -> [0: bb318, 1: bb319, otherwise: bb4];
    }

    bb318: {
        StorageLive(_748);
        _748 = ((_741 as Continue).0: ());
        _740 = _748;
        StorageDead(_748);
        StorageDead(_741);
        StorageDead(_740);
        StorageLive(_749);
        StorageLive(_750);
        StorageLive(_751);
        StorageLive(_752);
        StorageLive(_753);
        StorageLive(_754);
        StorageLive(_755);
        _755 = _3;
        _756 = Len(((*_1).5: [state::user::Order; 32]));
        _757 = Lt(_755, _756);
        assert(move _757, "index out of bounds: the length is {} but the index is {}", move _756, _755) -> [success: bb321, unwind continue];
    }

    bb319: {
        StorageLive(_745);
        _745 = ((_741 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_747);
        _747 = _745;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _747) -> [return: bb320, unwind continue];
    }

    bb320: {
        StorageDead(_747);
        StorageDead(_745);
        StorageDead(_741);
        StorageDead(_740);
        goto -> bb337;
    }

    bb321: {
        _754 = &((*_1).5: [state::user::Order; 32])[_755];
        StorageLive(_758);
        _758 = Option::<i64>::None;
        _753 = Order::get_base_asset_amount_unfilled(move _754, move _758) -> [return: bb322, unwind continue];
    }

    bb322: {
        StorageDead(_758);
        StorageDead(_754);
        _752 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _753) -> [return: bb323, unwind continue];
    }

    bb323: {
        StorageDead(_753);
        _759 = discriminant(_752);
        switchInt(move _759) -> [0: bb324, 1: bb325, otherwise: bb4];
    }

    bb324: {
        StorageLive(_763);
        _763 = ((_752 as Continue).0: u64);
        _751 = _763;
        StorageDead(_763);
        _750 = Eq(move _751, const 0_u64);
        switchInt(move _750) -> [0: bb328, otherwise: bb327];
    }

    bb325: {
        StorageLive(_760);
        _760 = ((_752 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_762);
        _762 = _760;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _762) -> [return: bb326, unwind continue];
    }

    bb326: {
        StorageDead(_762);
        StorageDead(_760);
        StorageDead(_755);
        StorageDead(_752);
        StorageDead(_751);
        StorageDead(_750);
        StorageDead(_749);
        goto -> bb337;
    }

    bb327: {
        StorageDead(_755);
        StorageDead(_752);
        StorageDead(_751);
        StorageLive(_764);
        StorageLive(_765);
        _765 = &mut (*_1);
        StorageLive(_766);
        StorageLive(_767);
        StorageLive(_768);
        _768 = _3;
        _769 = Len(((*_1).5: [state::user::Order; 32]));
        _770 = Lt(_768, _769);
        assert(move _770, "index out of bounds: the length is {} but the index is {}", move _769, _768) -> [success: bb329, unwind continue];
    }

    bb328: {
        StorageDead(_755);
        StorageDead(_752);
        StorageDead(_751);
        _749 = const ();
        goto -> bb335;
    }

    bb329: {
        _767 = &((*_1).5: [state::user::Order; 32])[_768];
        _766 = Order::has_auction(move _767) -> [return: bb330, unwind continue];
    }

    bb330: {
        StorageDead(_767);
        _764 = User::decrement_open_orders(move _765, move _766) -> [return: bb331, unwind continue];
    }

    bb331: {
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_768);
        StorageDead(_764);
        StorageLive(_771);
        _771 = OrderStatus::Filled;
        StorageLive(_772);
        _772 = _3;
        _773 = Len(((*_1).5: [state::user::Order; 32]));
        _774 = Lt(_772, _773);
        assert(move _774, "index out of bounds: the length is {} but the index is {}", move _773, _772) -> [success: bb332, unwind continue];
    }

    bb332: {
        (((*_1).5: [state::user::Order; 32])[_772].12: state::user::OrderStatus) = move _771;
        StorageDead(_771);
        StorageDead(_772);
        StorageLive(_775);
        StorageLive(_776);
        _776 = _454;
        _777 = Len(((*_1).4: [state::user::PerpPosition; 8]));
        _778 = Lt(_776, _777);
        assert(move _778, "index out of bounds: the length is {} but the index is {}", move _777, _776) -> [success: bb333, unwind continue];
    }

    bb333: {
        _775 = &mut ((*_1).4: [state::user::PerpPosition; 8])[_776];
        _779 = CheckedSub(((*_775).14: u8), const 1_u8);
        assert(!move (_779.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_775).14: u8), const 1_u8) -> [success: bb334, unwind continue];
    }

    bb334: {
        ((*_775).14: u8) = move (_779.0: u8);
        _749 = const ();
        StorageDead(_776);
        StorageDead(_775);
        goto -> bb335;
    }

    bb335: {
        StorageDead(_750);
        StorageDead(_749);
        StorageLive(_780);
        StorageLive(_781);
        _781 = _37;
        StorageLive(_782);
        _782 = _212;
        _780 = (move _781, move _782);
        StorageDead(_782);
        StorageDead(_781);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _780);
        StorageDead(_780);
        StorageDead(_683);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_656);
        StorageDead(_647);
        StorageDead(_638);
        StorageDead(_631);
        StorageDead(_623);
        StorageDead(_622);
        StorageDead(_621);
        StorageDead(_620);
        StorageDead(_454);
        StorageDead(_283);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        StorageDead(_248);
        StorageDead(_245);
        StorageDead(_213);
        StorageDead(_212);
        StorageDead(_187);
        StorageDead(_167);
        StorageDead(_161);
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        StorageDead(_91);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        StorageDead(_22);
        goto -> bb360;
    }

    bb336: {
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_717);
        StorageDead(_716);
        StorageDead(_684);
        goto -> bb337;
    }

    bb337: {
        StorageDead(_683);
        StorageDead(_659);
        StorageDead(_658);
        StorageDead(_657);
        StorageDead(_656);
        goto -> bb338;
    }

    bb338: {
        StorageDead(_647);
        StorageDead(_638);
        StorageDead(_631);
        StorageDead(_623);
        StorageDead(_622);
        StorageDead(_621);
        StorageDead(_620);
        goto -> bb343;
    }

    bb339: {
        StorageDead(_546);
        StorageDead(_545);
        goto -> bb343;
    }

    bb340: {
        StorageDead(_520);
        StorageDead(_519);
        goto -> bb343;
    }

    bb341: {
        StorageDead(_506);
        StorageDead(_501);
        StorageDead(_500);
        StorageDead(_497);
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_493);
        goto -> bb343;
    }

    bb342: {
        StorageDead(_479);
        StorageDead(_473);
        StorageDead(_472);
        StorageDead(_469);
        StorageDead(_468);
        StorageDead(_466);
        StorageDead(_465);
        goto -> bb343;
    }

    bb343: {
        StorageDead(_454);
        goto -> bb350;
    }

    bb344: {
        StorageDead(_430);
        StorageDead(_425);
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_421);
        goto -> bb345;
    }

    bb345: {
        StorageDead(_420);
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_414);
        StorageDead(_407);
        StorageDead(_406);
        goto -> bb350;
    }

    bb346: {
        StorageDead(_348);
        StorageDead(_353);
        StorageDead(_349);
        goto -> bb350;
    }

    bb347: {
        StorageDead(_330);
        StorageDead(_335);
        StorageDead(_331);
        goto -> bb350;
    }

    bb348: {
        StorageDead(_312);
        StorageDead(_317);
        StorageDead(_313);
        goto -> bb350;
    }

    bb349: {
        StorageDead(_294);
        StorageDead(_299);
        StorageDead(_295);
        goto -> bb350;
    }

    bb350: {
        StorageDead(_283);
        StorageDead(_260);
        StorageDead(_259);
        StorageDead(_258);
        StorageDead(_257);
        StorageDead(_256);
        StorageDead(_255);
        StorageDead(_254);
        goto -> bb351;
    }

    bb351: {
        StorageDead(_248);
        StorageDead(_245);
        goto -> bb352;
    }

    bb352: {
        StorageDead(_213);
        StorageDead(_212);
        goto -> bb353;
    }

    bb353: {
        StorageDead(_187);
        goto -> bb354;
    }

    bb354: {
        StorageDead(_167);
        StorageDead(_161);
        goto -> bb355;
    }

    bb355: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_134);
        goto -> bb356;
    }

    bb356: {
        StorageDead(_91);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb358;
    }

    bb357: {
        StorageDead(_46);
        StorageDead(_40);
        goto -> bb358;
    }

    bb358: {
        StorageDead(_33);
        goto -> bb359;
    }

    bb359: {
        StorageDead(_22);
        goto -> bb360;
    }

    bb360: {
        return;
    }

    bb361 (cleanup): {
        drop(_113) -> [return: bb362, unwind terminate(cleanup)];
    }

    bb362 (cleanup): {
        resume;
    }
}
