// MIR for `calculate_borrow_rate` before PreCodegen

fn calculate_borrow_rate(_1: &SpotMarket, _2: u128) -> std::result::Result<u128, error::ErrorCode> {
    debug spot_market => _1;
    debug utilization => _2;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: u32;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _11: u128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _14: std::result::Result<u128, error::ErrorCode>;
    let mut _15: u32;
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _23: std::result::Result<u128, error::ErrorCode>;
    let mut _24: u32;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _32: std::result::Result<u128, error::ErrorCode>;
    let mut _33: u32;
    let mut _34: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _35: std::result::Result<u32, error::ErrorCode>;
    let mut _36: state::spot_market::SpotMarket;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: bool;
    let mut _50: u128;
    let mut _51: u128;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _54: std::result::Result<u128, error::ErrorCode>;
    let mut _55: u128;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _57: std::result::Result<u128, error::ErrorCode>;
    let mut _58: u128;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: u128;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _71: std::result::Result<u128, error::ErrorCode>;
    let mut _72: u128;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _74: std::result::Result<u128, error::ErrorCode>;
    let mut _75: u128;
    let mut _76: u128;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _88: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _89: std::result::Result<u128, error::ErrorCode>;
    let mut _90: u128;
    let mut _91: u128;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _99: ();
    let mut _100: std::slice::Iter<'_, (u128, u128)>;
    let mut _102: ();
    let _103: ();
    let mut _104: std::option::Option<&(u128, u128)>;
    let mut _105: &mut std::slice::Iter<'_, (u128, u128)>;
    let mut _106: &mut std::slice::Iter<'_, (u128, u128)>;
    let mut _107: isize;
    let mut _108: !;
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _115: std::result::Result<u128, error::ErrorCode>;
    let mut _116: u128;
    let mut _117: u128;
    let mut _118: isize;
    let mut _120: !;
    let mut _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _125: std::result::Result<u128, error::ErrorCode>;
    let mut _126: u128;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _128: std::result::Result<u128, error::ErrorCode>;
    let mut _129: u128;
    let mut _130: u128;
    let mut _131: isize;
    let mut _133: !;
    let mut _134: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _136: u128;
    let mut _137: isize;
    let mut _139: !;
    let mut _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _142: bool;
    let mut _143: u128;
    let mut _144: u128;
    let mut _145: !;
    let mut _147: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _148: std::result::Result<u128, error::ErrorCode>;
    let mut _149: u128;
    let mut _150: u128;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _158: std::result::Result<u128, error::ErrorCode>;
    let mut _159: u128;
    let mut _160: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _161: std::result::Result<u128, error::ErrorCode>;
    let mut _162: u128;
    let mut _163: u128;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _169: u128;
    let mut _170: isize;
    let mut _172: !;
    let mut _173: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _175: u128;
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _177: std::result::Result<u128, error::ErrorCode>;
    let mut _178: u128;
    let mut _179: u128;
    let mut _180: isize;
    let mut _182: !;
    let mut _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _185: u128;
    let mut _186: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _187: std::result::Result<u128, error::ErrorCode>;
    let mut _188: u128;
    let mut _189: u128;
    let mut _190: isize;
    let mut _192: !;
    let mut _193: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _195: u128;
    let mut _196: u128;
    let mut _197: u128;
    let mut _198: u128;
    let mut _199: &(u128, u128);
    let mut _200: &(u128, u128);
    scope 1 {
        debug optimal_util => _3;
        let _12: u128;
        let _17: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _20: u128;
        scope 6 {
            debug optimal_rate => _12;
            let _21: u128;
            let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _29: u128;
            scope 11 {
                debug max_rate => _21;
                let _30: u128;
                let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _41: u32;
                let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _46: u128;
                scope 16 {
                    debug min_rate => _30;
                    let _47: u128;
                    scope 25 {
                        debug weights_divisor => _47;
                        let _48: u128;
                        let _52: u128;
                        let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _63: u128;
                        let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _69: u128;
                        let _87: u128;
                        let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _96: u128;
                        scope 26 {
                            debug borrow_rate => _48;
                        }
                        scope 27 {
                            debug slope => _52;
                            let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _81: u128;
                            let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _86: u128;
                            scope 36 {
                                debug residual => _78;
                                scope 37 {
                                }
                            }
                            scope 38 {
                                debug val => _81;
                                scope 39 {
                                }
                            }
                            scope 40 {
                                debug residual => _83;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug val => _86;
                                scope 43 {
                                }
                            }
                        }
                        scope 28 {
                            debug residual => _60;
                            scope 29 {
                            }
                        }
                        scope 30 {
                            debug val => _63;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug residual => _66;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug val => _69;
                            scope 35 {
                            }
                        }
                        scope 44 {
                            debug total_extra_rate => _87;
                            let mut _97: u128;
                            scope 49 {
                                debug rate => _97;
                                let mut _98: u128;
                                scope 50 {
                                    debug prev_util => _98;
                                    let mut _101: std::slice::Iter<'_, (u128, u128)>;
                                    scope 51 {
                                        debug iter => _101;
                                        let _109: u128;
                                        let _110: u128;
                                        scope 52 {
                                            debug bp => _109;
                                            debug weight => _110;
                                            let _111: u128;
                                            scope 53 {
                                                debug segment_start => _111;
                                                let _112: u128;
                                                scope 54 {
                                                    debug segment_end => _112;
                                                    let _113: u128;
                                                    let _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _122: u128;
                                                    scope 55 {
                                                        debug segment_range => _113;
                                                        let _123: u128;
                                                        let _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _135: u128;
                                                        let _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _141: u128;
                                                        scope 60 {
                                                            debug segment_rate_total => _123;
                                                            let _146: u128;
                                                            let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _155: u128;
                                                            let _191: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _194: u128;
                                                            scope 69 {
                                                                debug partial_util => _146;
                                                                let _156: u128;
                                                                let _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _168: u128;
                                                                let _171: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _174: u128;
                                                                scope 74 {
                                                                    debug partial_rate => _156;
                                                                    let _181: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                    let _184: u128;
                                                                    scope 83 {
                                                                        debug residual => _181;
                                                                        scope 84 {
                                                                        }
                                                                    }
                                                                    scope 85 {
                                                                        debug val => _184;
                                                                        scope 86 {
                                                                        }
                                                                    }
                                                                }
                                                                scope 75 {
                                                                    debug residual => _165;
                                                                    scope 76 {
                                                                    }
                                                                }
                                                                scope 77 {
                                                                    debug val => _168;
                                                                    scope 78 {
                                                                    }
                                                                }
                                                                scope 79 {
                                                                    debug residual => _171;
                                                                    scope 80 {
                                                                    }
                                                                }
                                                                scope 81 {
                                                                    debug val => _174;
                                                                    scope 82 {
                                                                    }
                                                                }
                                                            }
                                                            scope 70 {
                                                                debug residual => _152;
                                                                scope 71 {
                                                                }
                                                            }
                                                            scope 72 {
                                                                debug val => _155;
                                                                scope 73 {
                                                                }
                                                            }
                                                            scope 87 {
                                                                debug residual => _191;
                                                                scope 88 {
                                                                }
                                                            }
                                                            scope 89 {
                                                                debug val => _194;
                                                                scope 90 {
                                                                }
                                                            }
                                                        }
                                                        scope 61 {
                                                            debug residual => _132;
                                                            scope 62 {
                                                            }
                                                        }
                                                        scope 63 {
                                                            debug val => _135;
                                                            scope 64 {
                                                            }
                                                        }
                                                        scope 65 {
                                                            debug residual => _138;
                                                            scope 66 {
                                                            }
                                                        }
                                                        scope 67 {
                                                            debug val => _141;
                                                            scope 68 {
                                                            }
                                                        }
                                                    }
                                                    scope 56 {
                                                        debug residual => _119;
                                                        scope 57 {
                                                        }
                                                    }
                                                    scope 58 {
                                                        debug val => _122;
                                                        scope 59 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 45 {
                            debug residual => _93;
                            scope 46 {
                            }
                        }
                        scope 47 {
                            debug val => _96;
                            scope 48 {
                            }
                        }
                    }
                }
                scope 17 {
                    debug residual => _38;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _41;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug residual => _43;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _46;
                    scope 24 {
                    }
                }
            }
            scope 12 {
                debug residual => _26;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _29;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _17;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _20;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).38: u32);
        _5 = <u32 as Cast>::cast::<u128>(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = ((_4 as Continue).0: u128);
        _3 = _11;
        StorageDead(_11);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_1).39: u32);
        _14 = <u32 as Cast>::cast::<u128>(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_10);
        _10 = _8;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_4);
        goto -> bb119;
    }

    bb7: {
        StorageDead(_15);
        _13 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        _16 = discriminant(_13);
        switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_20);
        _20 = ((_13 as Continue).0: u128);
        _12 = _20;
        StorageDead(_20);
        StorageDead(_13);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = ((*_1).40: u32);
        _23 = <u32 as Cast>::cast::<u128>(move _24) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_17);
        _17 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_13);
        goto -> bb118;
    }

    bb12: {
        StorageDead(_24);
        _22 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: u128);
        _21 = _29;
        StorageDead(_29);
        StorageDead(_22);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = (*_1);
        _35 = SpotMarket::get_min_borrow_rate(move _36) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_22);
        goto -> bb117;
    }

    bb17: {
        StorageDead(_36);
        _34 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _35) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_35);
        _37 = discriminant(_34);
        switchInt(move _37) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_41);
        _41 = ((_34 as Continue).0: u32);
        _33 = _41;
        StorageDead(_41);
        _32 = <u32 as Cast>::cast::<u128>(move _33) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_38);
        _38 = ((_34 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb115;
    }

    bb22: {
        StorageDead(_33);
        _31 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _32) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_32);
        _42 = discriminant(_31);
        switchInt(move _42) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_46);
        _46 = ((_31 as Continue).0: u128);
        _30 = _46;
        StorageDead(_46);
        StorageDead(_34);
        StorageDead(_31);
        StorageLive(_47);
        _47 = const 1000_u128;
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = _2;
        StorageLive(_51);
        _51 = _3;
        _49 = Le(move _50, move _51);
        switchInt(move _49) -> [0: bb28, otherwise: bb27];
    }

    bb25: {
        StorageLive(_43);
        _43 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_45);
        StorageDead(_43);
        goto -> bb115;
    }

    bb27: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _12;
        _57 = <u128 as SafeMath>::safe_mul(move _58, const _) -> [return: bb29, unwind continue];
    }

    bb28: {
        StorageDead(_51);
        StorageDead(_50);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = _21;
        StorageLive(_91);
        _91 = _12;
        _89 = <u128 as SafeMath>::safe_sub(move _90, move _91) -> [return: bb49, unwind continue];
    }

    bb29: {
        StorageDead(_58);
        _56 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _57) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_57);
        _59 = discriminant(_56);
        switchInt(move _59) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_63);
        _63 = ((_56 as Continue).0: u128);
        _55 = _63;
        StorageDead(_63);
        StorageLive(_64);
        _64 = _3;
        _54 = <u128 as SafeMath>::safe_div(move _55, move _64) -> [return: bb34, unwind continue];
    }

    bb32: {
        StorageLive(_60);
        _60 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb113;
    }

    bb34: {
        StorageDead(_64);
        StorageDead(_55);
        _53 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _54) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_54);
        _65 = discriminant(_53);
        switchInt(move _65) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_69);
        _69 = ((_53 as Continue).0: u128);
        _52 = _69;
        StorageDead(_69);
        StorageDead(_56);
        StorageDead(_53);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _2;
        StorageLive(_76);
        _76 = _52;
        _74 = <u128 as SafeMath>::safe_mul(move _75, move _76) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_66);
        _66 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_68);
        StorageDead(_66);
        goto -> bb113;
    }

    bb39: {
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_74);
        _77 = discriminant(_73);
        switchInt(move _77) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_81);
        _81 = ((_73 as Continue).0: u128);
        _72 = _81;
        StorageDead(_81);
        _71 = <u128 as SafeMath>::safe_div(move _72, const _) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_78);
        _78 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb112;
    }

    bb44: {
        StorageDead(_72);
        _70 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_71);
        _82 = discriminant(_70);
        switchInt(move _82) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_86);
        _86 = ((_70 as Continue).0: u128);
        _48 = _86;
        StorageDead(_86);
        StorageDead(_52);
        StorageDead(_73);
        StorageDead(_70);
        goto -> bb102;
    }

    bb47: {
        StorageLive(_83);
        _83 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_85);
        StorageDead(_83);
        goto -> bb112;
    }

    bb49: {
        StorageDead(_91);
        StorageDead(_90);
        _88 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _89) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_89);
        _92 = discriminant(_88);
        switchInt(move _92) -> [0: bb51, 1: bb52, otherwise: bb4];
    }

    bb51: {
        StorageLive(_96);
        _96 = ((_88 as Continue).0: u128);
        _87 = _96;
        StorageDead(_96);
        StorageDead(_88);
        StorageLive(_97);
        _97 = _12;
        StorageLive(_98);
        _98 = _3;
        StorageLive(_99);
        StorageLive(_100);
        _100 = <&[(u128, u128)] as IntoIterator>::into_iter(const _) -> [return: bb54, unwind continue];
    }

    bb52: {
        StorageLive(_93);
        _93 = ((_88 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_88);
        goto -> bb111;
    }

    bb54: {
        StorageLive(_101);
        _101 = move _100;
        goto -> bb55;
    }

    bb55: {
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _106 = &mut _101;
        _105 = &mut (*_106);
        _104 = <std::slice::Iter<'_, (u128, u128)> as Iterator>::next(move _105) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_105);
        _107 = discriminant(_104);
        switchInt(move _107) -> [0: bb58, 1: bb57, otherwise: bb4];
    }

    bb57: {
        StorageLive(_109);
        _199 = deref_copy ((_104 as Some).0: &(u128, u128));
        _109 = ((*_199).0: u128);
        StorageLive(_110);
        _200 = deref_copy ((_104 as Some).0: &(u128, u128));
        _110 = ((*_200).1: u128);
        StorageLive(_111);
        _111 = _98;
        StorageLive(_112);
        _112 = _109;
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        _116 = _112;
        StorageLive(_117);
        _117 = _111;
        _115 = <u128 as SafeMath>::safe_sub(move _116, move _117) -> [return: bb59, unwind continue];
    }

    bb58: {
        _99 = const ();
        goto -> bb101;
    }

    bb59: {
        StorageDead(_117);
        StorageDead(_116);
        _114 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _115) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_115);
        _118 = discriminant(_114);
        switchInt(move _118) -> [0: bb61, 1: bb62, otherwise: bb4];
    }

    bb61: {
        StorageLive(_122);
        _122 = ((_114 as Continue).0: u128);
        _113 = _122;
        StorageDead(_122);
        StorageDead(_114);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _87;
        StorageLive(_130);
        _130 = _110;
        _128 = <u128 as SafeMath>::safe_mul(move _129, move _130) -> [return: bb64, unwind continue];
    }

    bb62: {
        StorageLive(_119);
        _119 = ((_114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_121);
        _121 = _119;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _121) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_114);
        goto -> bb110;
    }

    bb64: {
        StorageDead(_130);
        StorageDead(_129);
        _127 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _128) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_128);
        _131 = discriminant(_127);
        switchInt(move _131) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_135);
        _135 = ((_127 as Continue).0: u128);
        _126 = _135;
        StorageDead(_135);
        StorageLive(_136);
        _136 = _47;
        _125 = <u128 as SafeMath>::safe_div(move _126, move _136) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_132);
        _132 = ((_127 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_134);
        _134 = _132;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _134) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb108;
    }

    bb69: {
        StorageDead(_136);
        StorageDead(_126);
        _124 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _125) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_125);
        _137 = discriminant(_124);
        switchInt(move _137) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        StorageLive(_141);
        _141 = ((_124 as Continue).0: u128);
        _123 = _141;
        StorageDead(_141);
        StorageDead(_127);
        StorageDead(_124);
        StorageLive(_142);
        StorageLive(_143);
        _143 = _2;
        StorageLive(_144);
        _144 = _112;
        _142 = Le(move _143, move _144);
        switchInt(move _142) -> [0: bb75, otherwise: bb74];
    }

    bb72: {
        StorageLive(_138);
        _138 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_140);
        _140 = _138;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _140) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_140);
        StorageDead(_138);
        goto -> bb108;
    }

    bb74: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = _2;
        StorageLive(_150);
        _150 = _111;
        _148 = <u128 as SafeMath>::safe_sub(move _149, move _150) -> [return: bb76, unwind continue];
    }

    bb75: {
        StorageDead(_144);
        StorageDead(_143);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = _97;
        StorageLive(_189);
        _189 = _123;
        _187 = <u128 as SafeMath>::safe_add(move _188, move _189) -> [return: bb96, unwind continue];
    }

    bb76: {
        StorageDead(_150);
        StorageDead(_149);
        _147 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _148) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_148);
        _151 = discriminant(_147);
        switchInt(move _151) -> [0: bb78, 1: bb79, otherwise: bb4];
    }

    bb78: {
        StorageLive(_155);
        _155 = ((_147 as Continue).0: u128);
        _146 = _155;
        StorageDead(_155);
        StorageDead(_147);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = _123;
        StorageLive(_163);
        _163 = _146;
        _161 = <u128 as SafeMath>::safe_mul(move _162, move _163) -> [return: bb81, unwind continue];
    }

    bb79: {
        StorageLive(_152);
        _152 = ((_147 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb80, unwind continue];
    }

    bb80: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_147);
        goto -> bb106;
    }

    bb81: {
        StorageDead(_163);
        StorageDead(_162);
        _160 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _161) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_161);
        _164 = discriminant(_160);
        switchInt(move _164) -> [0: bb83, 1: bb84, otherwise: bb4];
    }

    bb83: {
        StorageLive(_168);
        _168 = ((_160 as Continue).0: u128);
        _159 = _168;
        StorageDead(_168);
        StorageLive(_169);
        _169 = _113;
        _158 = <u128 as SafeMath>::safe_div(move _159, move _169) -> [return: bb86, unwind continue];
    }

    bb84: {
        StorageLive(_165);
        _165 = ((_160 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_167);
        _167 = _165;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _167) -> [return: bb85, unwind continue];
    }

    bb85: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_159);
        StorageDead(_158);
        goto -> bb104;
    }

    bb86: {
        StorageDead(_169);
        StorageDead(_159);
        _157 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _158) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_158);
        _170 = discriminant(_157);
        switchInt(move _170) -> [0: bb88, 1: bb89, otherwise: bb4];
    }

    bb88: {
        StorageLive(_174);
        _174 = ((_157 as Continue).0: u128);
        _156 = _174;
        StorageDead(_174);
        StorageDead(_160);
        StorageDead(_157);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = _97;
        StorageLive(_179);
        _179 = _156;
        _177 = <u128 as SafeMath>::safe_add(move _178, move _179) -> [return: bb91, unwind continue];
    }

    bb89: {
        StorageLive(_171);
        _171 = ((_157 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_173);
        _173 = _171;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _173) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_173);
        StorageDead(_171);
        goto -> bb104;
    }

    bb91: {
        StorageDead(_179);
        StorageDead(_178);
        _176 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _177) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_177);
        _180 = discriminant(_176);
        switchInt(move _180) -> [0: bb93, 1: bb94, otherwise: bb4];
    }

    bb93: {
        StorageLive(_184);
        _184 = ((_176 as Continue).0: u128);
        _175 = _184;
        StorageDead(_184);
        _97 = move _175;
        StorageDead(_175);
        StorageDead(_176);
        _99 = const ();
        StorageDead(_156);
        StorageDead(_146);
        StorageDead(_142);
        StorageDead(_123);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        goto -> bb101;
    }

    bb94: {
        StorageLive(_181);
        _181 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_183);
        _183 = _181;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _183) -> [return: bb95, unwind continue];
    }

    bb95: {
        StorageDead(_183);
        StorageDead(_181);
        StorageDead(_175);
        StorageDead(_176);
        goto -> bb105;
    }

    bb96: {
        StorageDead(_189);
        StorageDead(_188);
        _186 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _187) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_187);
        _190 = discriminant(_186);
        switchInt(move _190) -> [0: bb98, 1: bb99, otherwise: bb4];
    }

    bb98: {
        StorageLive(_194);
        _194 = ((_186 as Continue).0: u128);
        _185 = _194;
        StorageDead(_194);
        _97 = move _185;
        StorageDead(_185);
        StorageDead(_186);
        StorageLive(_195);
        _195 = _112;
        _98 = move _195;
        StorageDead(_195);
        _103 = const ();
        StorageDead(_142);
        StorageDead(_123);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_103);
        _102 = const ();
        goto -> bb55;
    }

    bb99: {
        StorageLive(_191);
        _191 = ((_186 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_193);
        _193 = _191;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _193) -> [return: bb100, unwind continue];
    }

    bb100: {
        StorageDead(_193);
        StorageDead(_191);
        StorageDead(_185);
        StorageDead(_186);
        goto -> bb107;
    }

    bb101: {
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        _48 = _97;
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_87);
        goto -> bb102;
    }

    bb102: {
        StorageDead(_49);
        StorageLive(_196);
        StorageLive(_197);
        _197 = _48;
        StorageLive(_198);
        _198 = _30;
        _196 = <u128 as Ord>::max(move _197, move _198) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_198);
        StorageDead(_197);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _196);
        StorageDead(_196);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_30);
        StorageDead(_21);
        StorageDead(_12);
        StorageDead(_3);
        goto -> bb120;
    }

    bb104: {
        StorageDead(_160);
        StorageDead(_157);
        goto -> bb105;
    }

    bb105: {
        StorageDead(_156);
        goto -> bb106;
    }

    bb106: {
        StorageDead(_146);
        goto -> bb107;
    }

    bb107: {
        StorageDead(_142);
        goto -> bb109;
    }

    bb108: {
        StorageDead(_127);
        StorageDead(_124);
        goto -> bb109;
    }

    bb109: {
        StorageDead(_123);
        goto -> bb110;
    }

    bb110: {
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb111;
    }

    bb111: {
        StorageDead(_87);
        goto -> bb114;
    }

    bb112: {
        StorageDead(_52);
        StorageDead(_73);
        StorageDead(_70);
        goto -> bb114;
    }

    bb113: {
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb114;
    }

    bb114: {
        StorageDead(_49);
        StorageDead(_48);
        StorageDead(_47);
        goto -> bb116;
    }

    bb115: {
        StorageDead(_34);
        StorageDead(_31);
        goto -> bb116;
    }

    bb116: {
        StorageDead(_30);
        goto -> bb117;
    }

    bb117: {
        StorageDead(_21);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_12);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_3);
        goto -> bb120;
    }

    bb120: {
        return;
    }
}
