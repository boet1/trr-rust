// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::max_value` after PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:587:3: 587:13>::max_value() -> U192 {
    let mut _0: math::bn::U192;
    let mut _1: [u64; 3];
    let _2: ();
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _6: ();
    let _7: ();
    let mut _8: std::option::Option<usize>;
    let mut _9: &mut std::ops::Range<usize>;
    let mut _10: &mut std::ops::Range<usize>;
    let mut _11: isize;
    let mut _12: !;
    let mut _14: u64;
    let _15: usize;
    let mut _16: usize;
    let mut _17: bool;
    let mut _18: [u64; 3];
    scope 1 {
        debug result => _1;
        let mut _5: std::ops::Range<usize>;
        scope 2 {
            debug iter => _5;
            let _13: usize;
            scope 3 {
                debug i => _13;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = [const 0_u64; 3];
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const 3_usize };
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageLive(_5);
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut _5;
        _9 = &mut (*_10);
        _8 = <std::ops::Range<usize> as Iterator>::next(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        _11 = discriminant(_8);
        switchInt(move _11) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = ((_8 as Some).0: usize);
        StorageLive(_14);
        _14 = core::num::<impl u64>::max_value() -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _2 = const ();
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_18);
        _18 = _1;
        _0 = U192(move _18);
        StorageDead(_18);
        StorageDead(_1);
        return;
    }

    bb7: {
        StorageLive(_15);
        _15 = _13;
        _16 = Len(_1);
        _17 = Lt(_15, _16);
        assert(move _17, "index out of bounds: the length is {} but the index is {}", move _16, _15) -> [success: bb8, unwind continue];
    }

    bb8: {
        _1[_15] = move _14;
        StorageDead(_14);
        StorageDead(_15);
        _7 = const ();
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        _6 = const ();
        goto -> bb2;
    }
}
