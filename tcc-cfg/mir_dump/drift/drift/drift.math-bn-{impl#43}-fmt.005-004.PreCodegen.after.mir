// MIR for `bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:1680:3: 1680:46>::fmt` after PreCodegen

fn bn::<impl at /home/bitnami/.cargo/registry/src/index.crates.io-6f17d22bba15001f/uint-0.9.1/src/uint.rs:1680:3: 1680:46>::fmt(_1: &U256, _2: &mut Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &[u64; 4];
    let _4: ();
    let mut _5: bool;
    let mut _6: &std::fmt::Formatter<'_>;
    let _7: ();
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _9: std::result::Result<(), std::fmt::Error>;
    let mut _10: &mut std::fmt::Formatter<'_>;
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[&str; 1];
    let _14: &[&str; 1];
    let _15: [&str; 1];
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, std::fmt::Error>;
    let _21: ();
    let mut _22: bool;
    let mut _23: &math::bn::U256;
    let mut _24: !;
    let mut _25: &mut std::fmt::Formatter<'_>;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[&str; 1];
    let _29: &[&str; 1];
    let _30: [&str; 1];
    let _32: ();
    let mut _33: std::iter::Rev<std::slice::Iter<'_, u64>>;
    let mut _34: std::iter::Rev<std::slice::Iter<'_, u64>>;
    let mut _35: std::slice::Iter<'_, u64>;
    let mut _36: &[u64];
    let mut _37: &[u64; 4];
    let mut _39: ();
    let _40: ();
    let mut _41: std::option::Option<&u64>;
    let mut _42: &mut std::iter::Rev<std::slice::Iter<'_, u64>>;
    let mut _43: &mut std::iter::Rev<std::slice::Iter<'_, u64>>;
    let mut _44: isize;
    let mut _45: !;
    let mut _47: std::ops::Range<i32>;
    let mut _48: std::ops::Range<i32>;
    let _50: ();
    let mut _51: std::option::Option<i32>;
    let mut _52: &mut std::ops::Range<i32>;
    let mut _53: &mut std::ops::Range<i32>;
    let mut _54: isize;
    let mut _55: !;
    let mut _58: u64;
    let mut _59: &u64;
    let mut _60: u64;
    let mut _61: u64;
    let mut _62: i32;
    let mut _63: i32;
    let mut _64: i32;
    let mut _65: (i32, bool);
    let mut _66: (i32, bool);
    let mut _67: bool;
    let mut _68: u64;
    let mut _69: i32;
    let mut _70: i32;
    let mut _71: i32;
    let mut _72: (i32, bool);
    let mut _73: (i32, bool);
    let mut _74: bool;
    let _75: ();
    let mut _76: bool;
    let mut _77: u64;
    let mut _78: bool;
    let _79: ();
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::fmt::Error>>;
    let mut _81: std::result::Result<(), std::fmt::Error>;
    let mut _82: &mut std::fmt::Formatter<'_>;
    let mut _83: std::fmt::Arguments<'_>;
    let mut _84: &[&str];
    let mut _85: &[&str; 1];
    let _86: &[&str; 1];
    let _87: [&str; 1];
    let mut _88: &[core::fmt::rt::Argument<'_>];
    let mut _89: &[core::fmt::rt::Argument<'_>; 1];
    let _90: &[core::fmt::rt::Argument<'_>; 1];
    let _91: [core::fmt::rt::Argument<'_>; 1];
    let mut _92: core::fmt::rt::Argument<'_>;
    let mut _93: &u64;
    let _94: &u64;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, std::fmt::Error>;
    let mut _100: ();
    scope 1 {
        debug data => _3;
        let _17: std::result::Result<std::convert::Infallible, std::fmt::Error>;
        let _20: ();
        let mut _31: bool;
        let mut _101: &[&str; 1];
        let mut _103: &[&str; 1];
        scope 2 {
            debug residual => _17;
            scope 3 {
            }
        }
        scope 4 {
            debug val => _20;
            scope 5 {
            }
        }
        scope 6 {
            debug latch => _31;
            let mut _38: std::iter::Rev<std::slice::Iter<'_, u64>>;
            scope 7 {
                debug iter => _38;
                let _46: &u64;
                scope 8 {
                    debug ch => _46;
                    let mut _49: std::ops::Range<i32>;
                    scope 9 {
                        debug iter => _49;
                        let _56: i32;
                        scope 10 {
                            debug x => _56;
                            let _57: u64;
                            scope 11 {
                                debug nibble => _57;
                                let _96: std::result::Result<std::convert::Infallible, std::fmt::Error>;
                                let _99: ();
                                let mut _102: &[&str; 1];
                                scope 12 {
                                    debug residual => _96;
                                    scope 13 {
                                    }
                                }
                                scope 14 {
                                    debug val => _99;
                                    scope 15 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = &((*_1).0: [u64; 4]);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_2);
        _5 = Formatter::<'_>::alternate(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _5) -> [0: bb10, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &mut (*_2);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _103 = const _;
        _14 = &(*_103);
        _13 = &(*_14);
        _12 = move _13 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_13);
        _11 = Arguments::<'_>::new_const(move _12) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_12);
        _9 = Formatter::<'_>::write_fmt(move _10, move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = <std::result::Result<(), std::fmt::Error> as Try>::branch(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        _16 = discriminant(_8);
        switchInt(move _16) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_20);
        _20 = ((_8 as Continue).0: ());
        _7 = _20;
        StorageDead(_20);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_7);
        _4 = const ();
        goto -> bb11;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_17);
        _17 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<(), std::fmt::Error> as FromResidual<std::result::Result<Infallible, std::fmt::Error>>>::from_residual(move _19) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb49;
    }

    bb10: {
        StorageDead(_6);
        _4 = const ();
        goto -> bb11;
    }

    bb11: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = &(*_1);
        _22 = U256::is_zero(move _23) -> [return: bb12, unwind continue];
    }

    bb12: {
        switchInt(move _22) -> [0: bb16, otherwise: bb13];
    }

    bb13: {
        StorageDead(_23);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _101 = const _;
        _29 = &(*_101);
        _28 = &(*_29);
        _27 = move _28 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_28);
        _26 = Arguments::<'_>::new_const(move _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_27);
        _0 = Formatter::<'_>::write_fmt(move _25, move _26) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_29);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb49;
    }

    bb16: {
        StorageDead(_23);
        _21 = const ();
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_31);
        _31 = const false;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &(*_3);
        _36 = move _37 as &[u64] (PointerCoercion(Unsize));
        StorageDead(_37);
        _35 = core::slice::<impl [u64]>::iter(move _36) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_36);
        _34 = <std::slice::Iter<'_, u64> as Iterator>::rev(move _35) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_35);
        _33 = <Rev<std::slice::Iter<'_, u64>> as IntoIterator>::into_iter(move _34) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_34);
        StorageLive(_38);
        _38 = move _33;
        goto -> bb20;
    }

    bb20: {
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &mut _38;
        _42 = &mut (*_43);
        _41 = <Rev<std::slice::Iter<'_, u64>> as Iterator>::next(move _42) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_42);
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb23, 1: bb22, otherwise: bb7];
    }

    bb22: {
        StorageLive(_46);
        _46 = ((_41 as Some).0: &u64);
        StorageLive(_47);
        StorageLive(_48);
        _48 = std::ops::Range::<i32> { start: const 0_i32, end: const 16_i32 };
        _47 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _48) -> [return: bb24, unwind continue];
    }

    bb23: {
        _32 = const ();
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        StorageLive(_100);
        _100 = ();
        _0 = std::result::Result::<(), std::fmt::Error>::Ok(move _100);
        StorageDead(_100);
        StorageDead(_31);
        StorageDead(_3);
        goto -> bb50;
    }

    bb24: {
        StorageDead(_48);
        StorageLive(_49);
        _49 = move _47;
        goto -> bb25;
    }

    bb25: {
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut _49;
        _52 = &mut (*_53);
        _51 = <std::ops::Range<i32> as Iterator>::next(move _52) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb28, 1: bb27, otherwise: bb7];
    }

    bb27: {
        StorageLive(_56);
        _56 = ((_51 as Some).0: i32);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = _46;
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = _56;
        _65 = CheckedSub(const 15_i32, _64);
        assert(!move (_65.1: bool), "attempt to compute `{} - {}`, which would overflow", const 15_i32, move _64) -> [success: bb29, unwind continue];
    }

    bb28: {
        _40 = const ();
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        _39 = const ();
        goto -> bb20;
    }

    bb29: {
        _63 = move (_65.0: i32);
        StorageDead(_64);
        _66 = CheckedMul(_63, const 4_i32);
        assert(!move (_66.1: bool), "attempt to compute `{} * {}`, which would overflow", move _63, const 4_i32) -> [success: bb30, unwind continue];
    }

    bb30: {
        _62 = move (_66.0: i32);
        StorageDead(_63);
        _61 = move _62 as u64 (IntToInt);
        StorageDead(_62);
        _67 = Lt(_61, const 64_u64);
        assert(move _67, "attempt to shift left by `{}`, which would overflow", _61) -> [success: bb31, unwind continue];
    }

    bb31: {
        _60 = Shl(const 15_u64, move _61);
        StorageDead(_61);
        _58 = <&u64 as BitAnd<u64>>::bitand(move _59, move _60) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _56;
        _72 = CheckedSub(const 15_i32, _71);
        assert(!move (_72.1: bool), "attempt to compute `{} - {}`, which would overflow", const 15_i32, move _71) -> [success: bb33, unwind continue];
    }

    bb33: {
        _70 = move (_72.0: i32);
        StorageDead(_71);
        _73 = CheckedMul(_70, const 4_i32);
        assert(!move (_73.1: bool), "attempt to compute `{} * {}`, which would overflow", move _70, const 4_i32) -> [success: bb34, unwind continue];
    }

    bb34: {
        _69 = move (_73.0: i32);
        StorageDead(_70);
        _68 = move _69 as u64 (IntToInt);
        StorageDead(_69);
        _74 = Lt(_68, const 64_u64);
        assert(move _74, "attempt to shift right by `{}`, which would overflow", _68) -> [success: bb35, unwind continue];
    }

    bb35: {
        _57 = Shr(move _58, move _68);
        StorageDead(_68);
        StorageDead(_58);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _31;
        switchInt(move _76) -> [0: bb36, otherwise: bb37];
    }

    bb36: {
        StorageLive(_77);
        _77 = _57;
        _31 = Ne(move _77, const 0_u64);
        StorageDead(_77);
        _75 = const ();
        goto -> bb38;
    }

    bb37: {
        _75 = const ();
        goto -> bb38;
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_78);
        _78 = _31;
        switchInt(move _78) -> [0: bb47, otherwise: bb39];
    }

    bb39: {
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &mut (*_2);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _102 = const _;
        _86 = &(*_102);
        _85 = &(*_86);
        _84 = move _85 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_85);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_57;
        _93 = &(*_94);
        _92 = core::fmt::rt::Argument::<'_>::new_lower_hex::<u64>(move _93) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_93);
        _91 = [move _92];
        StorageDead(_92);
        _90 = &_91;
        _89 = &(*_90);
        _88 = move _89 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_89);
        _83 = Arguments::<'_>::new_v1(move _84, move _88) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_88);
        StorageDead(_84);
        _81 = Formatter::<'_>::write_fmt(move _82, move _83) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_83);
        StorageDead(_82);
        _80 = <std::result::Result<(), std::fmt::Error> as Try>::branch(move _81) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_81);
        _95 = discriminant(_80);
        switchInt(move _95) -> [0: bb44, 1: bb45, otherwise: bb7];
    }

    bb44: {
        StorageLive(_99);
        _99 = ((_80 as Continue).0: ());
        _79 = _99;
        StorageDead(_99);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_80);
        StorageDead(_79);
        _50 = const ();
        goto -> bb48;
    }

    bb45: {
        StorageLive(_96);
        _96 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, std::fmt::Error>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(), std::fmt::Error> as FromResidual<std::result::Result<Infallible, std::fmt::Error>>>::from_residual(move _98) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_86);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_43);
        StorageDead(_41);
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb49;
    }

    bb47: {
        _50 = const ();
        goto -> bb48;
    }

    bb48: {
        StorageDead(_78);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_50);
        _39 = const ();
        goto -> bb25;
    }

    bb49: {
        StorageDead(_3);
        goto -> bb50;
    }

    bb50: {
        return;
    }
}
