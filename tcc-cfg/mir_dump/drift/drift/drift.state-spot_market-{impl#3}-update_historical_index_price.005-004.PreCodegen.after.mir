// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::update_historical_index_price` after PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::update_historical_index_price(_1: &mut SpotMarket, _2: Option<u64>, _3: Option<u64>, _4: i64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug best_bid => _2;
    debug best_ask => _3;
    debug now => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let mut _5: u64;
    let _6: ();
    let mut _7: isize;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: (u64, bool);
    let _12: ();
    let mut _13: isize;
    let mut _15: u64;
    let mut _16: u64;
    let mut _17: bool;
    let mut _18: u64;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _20: std::result::Result<u64, error::ErrorCode>;
    let mut _21: u64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _23: std::result::Result<u64, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: u64;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _36: u64;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _38: std::result::Result<u64, error::ErrorCode>;
    let mut _39: i64;
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _41: std::result::Result<i64, error::ErrorCode>;
    let mut _42: i64;
    let mut _43: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _44: std::result::Result<i64, error::ErrorCode>;
    let mut _45: u64;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: i64;
    let mut _52: i64;
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _54: std::result::Result<i64, error::ErrorCode>;
    let mut _55: u64;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: i64;
    let mut _62: isize;
    let mut _64: !;
    let mut _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: u64;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _74: std::result::Result<u64, error::ErrorCode>;
    let mut _75: i64;
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _77: std::result::Result<i64, error::ErrorCode>;
    let mut _78: i64;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _80: std::result::Result<i64, error::ErrorCode>;
    let mut _81: u64;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _87: i64;
    let mut _88: i64;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _90: std::result::Result<i64, error::ErrorCode>;
    let mut _91: u64;
    let mut _92: isize;
    let mut _94: !;
    let mut _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _97: i64;
    let mut _98: i64;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _104: isize;
    let mut _106: !;
    let mut _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _109: i64;
    let mut _110: ();
    scope 1 {
        debug mid_price => _5;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: i64;
        let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _60: i64;
        let _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _66: i64;
        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _71: u64;
        let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _86: i64;
        let _93: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _96: i64;
        let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _103: i64;
        let _105: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _108: u64;
        scope 2 {
            debug best_bid => _8;
            let _8: u64;
        }
        scope 3 {
            debug best_ask => _14;
            let _14: u64;
            let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _30: u64;
            let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _35: u64;
            scope 4 {
                debug residual => _27;
                scope 5 {
                }
            }
            scope 6 {
                debug val => _30;
                scope 7 {
                }
            }
            scope 8 {
                debug residual => _32;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _35;
                scope 11 {
                }
            }
        }
        scope 12 {
            debug residual => _47;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _50;
            scope 15 {
            }
        }
        scope 16 {
            debug residual => _57;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _60;
            scope 19 {
            }
        }
        scope 20 {
            debug residual => _63;
            scope 21 {
            }
        }
        scope 22 {
            debug val => _66;
            scope 23 {
            }
        }
        scope 24 {
            debug residual => _68;
            scope 25 {
            }
        }
        scope 26 {
            debug val => _71;
            scope 27 {
            }
        }
        scope 28 {
            debug residual => _83;
            scope 29 {
            }
        }
        scope 30 {
            debug val => _86;
            scope 31 {
            }
        }
        scope 32 {
            debug residual => _93;
            scope 33 {
            }
        }
        scope 34 {
            debug val => _96;
            scope 35 {
            }
        }
        scope 36 {
            debug residual => _100;
            scope 37 {
            }
        }
        scope 38 {
            debug val => _103;
            scope 39 {
            }
        }
        scope 40 {
            debug residual => _105;
            scope 41 {
            }
        }
        scope 42 {
            debug val => _108;
            scope 43 {
            }
        }
    }

    bb0: {
        StorageLive(_5);
        _5 = const 0_u64;
        StorageLive(_6);
        _7 = discriminant(_2);
        switchInt(move _7) -> [1: bb1, otherwise: bb3];
    }

    bb1: {
        StorageLive(_8);
        _8 = ((_2 as Some).0: u64);
        StorageLive(_9);
        _9 = _8;
        (((*_1).6: state::oracle::HistoricalIndexData).0: u64) = move _9;
        StorageDead(_9);
        StorageLive(_10);
        _10 = _8;
        _11 = CheckedAdd(_5, _10);
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, move _10) -> [success: bb2, unwind continue];
    }

    bb2: {
        _5 = move (_11.0: u64);
        StorageDead(_10);
        _6 = const ();
        StorageDead(_8);
        goto -> bb4;
    }

    bb3: {
        _6 = const ();
        goto -> bb4;
    }

    bb4: {
        StorageDead(_6);
        StorageLive(_12);
        _13 = discriminant(_3);
        switchInt(move _13) -> [1: bb5, otherwise: bb20];
    }

    bb5: {
        StorageLive(_14);
        _14 = ((_3 as Some).0: u64);
        StorageLive(_15);
        _15 = _14;
        (((*_1).6: state::oracle::HistoricalIndexData).1: u64) = move _15;
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _5;
        _17 = Eq(move _18, const 0_u64);
        switchInt(move _17) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        StorageDead(_18);
        _16 = _14;
        goto -> bb19;
    }

    bb7: {
        StorageDead(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _5;
        StorageLive(_25);
        _25 = _14;
        _23 = <u64 as SafeMath>::safe_add(move _24, move _25) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_25);
        StorageDead(_24);
        _22 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_23);
        _26 = discriminant(_22);
        switchInt(move _26) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_30);
        _30 = ((_22 as Continue).0: u64);
        _21 = _30;
        StorageDead(_30);
        _20 = <u64 as SafeMath>::safe_div(move _21, const 2_u64) -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb68;
    }

    bb14: {
        StorageDead(_21);
        _19 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _20) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_20);
        _31 = discriminant(_19);
        switchInt(move _31) -> [0: bb16, 1: bb17, otherwise: bb11];
    }

    bb16: {
        StorageLive(_35);
        _35 = ((_19 as Continue).0: u64);
        _16 = _35;
        StorageDead(_35);
        StorageDead(_22);
        StorageDead(_19);
        goto -> bb19;
    }

    bb17: {
        StorageLive(_32);
        _32 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb68;
    }

    bb19: {
        StorageDead(_17);
        _5 = move _16;
        StorageDead(_16);
        _12 = const ();
        StorageDead(_14);
        goto -> bb21;
    }

    bb20: {
        _12 = const ();
        goto -> bb21;
    }

    bb21: {
        StorageDead(_12);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _5;
        _44 = <u64 as Cast>::cast::<i64>(move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        _43 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _44) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_44);
        _46 = discriminant(_43);
        switchInt(move _46) -> [0: bb24, 1: bb25, otherwise: bb11];
    }

    bb24: {
        StorageLive(_50);
        _50 = ((_43 as Continue).0: i64);
        _42 = _50;
        StorageDead(_50);
        StorageLive(_51);
        _51 = _4;
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = (((*_1).6: state::oracle::HistoricalIndexData).2: u64);
        _54 = <u64 as Cast>::cast::<i64>(move _55) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_47);
        _47 = ((_43 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_36);
        goto -> bb67;
    }

    bb27: {
        StorageDead(_55);
        _53 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _54) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_54);
        _56 = discriminant(_53);
        switchInt(move _56) -> [0: bb29, 1: bb30, otherwise: bb11];
    }

    bb29: {
        StorageLive(_60);
        _60 = ((_53 as Continue).0: i64);
        _52 = _60;
        StorageDead(_60);
        StorageLive(_61);
        _61 = (((*_1).6: state::oracle::HistoricalIndexData).4: i64);
        _41 = calculate_new_twap(move _42, move _51, move _52, move _61, const _) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_57);
        _57 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb65;
    }

    bb32: {
        StorageDead(_61);
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_42);
        _40 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _41) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_41);
        _62 = discriminant(_40);
        switchInt(move _62) -> [0: bb34, 1: bb35, otherwise: bb11];
    }

    bb34: {
        StorageLive(_66);
        _66 = ((_40 as Continue).0: i64);
        _39 = _66;
        StorageDead(_66);
        _38 = <i64 as Cast>::cast::<u64>(move _39) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_63);
        _63 = ((_40 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_65);
        _65 = _63;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _65) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_65);
        StorageDead(_63);
        goto -> bb65;
    }

    bb37: {
        StorageDead(_39);
        _37 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _38) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_38);
        _67 = discriminant(_37);
        switchInt(move _67) -> [0: bb39, 1: bb40, otherwise: bb11];
    }

    bb39: {
        StorageLive(_71);
        _71 = ((_37 as Continue).0: u64);
        _36 = _71;
        StorageDead(_71);
        (((*_1).6: state::oracle::HistoricalIndexData).2: u64) = move _36;
        StorageDead(_36);
        StorageDead(_53);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = _5;
        _80 = <u64 as Cast>::cast::<i64>(move _81) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_68);
        _68 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb66;
    }

    bb42: {
        StorageDead(_81);
        _79 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _80) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_80);
        _82 = discriminant(_79);
        switchInt(move _82) -> [0: bb44, 1: bb45, otherwise: bb11];
    }

    bb44: {
        StorageLive(_86);
        _86 = ((_79 as Continue).0: i64);
        _78 = _86;
        StorageDead(_86);
        StorageLive(_87);
        _87 = _4;
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = (((*_1).6: state::oracle::HistoricalIndexData).3: u64);
        _90 = <u64 as Cast>::cast::<i64>(move _91) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_83);
        _83 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb64;
    }

    bb47: {
        StorageDead(_91);
        _89 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _90) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_90);
        _92 = discriminant(_89);
        switchInt(move _92) -> [0: bb49, 1: bb50, otherwise: bb11];
    }

    bb49: {
        StorageLive(_96);
        _96 = ((_89 as Continue).0: i64);
        _88 = _96;
        StorageDead(_96);
        StorageLive(_97);
        _97 = (((*_1).6: state::oracle::HistoricalIndexData).4: i64);
        StorageLive(_98);
        _98 = const _ as i64 (IntToInt);
        _77 = calculate_new_twap(move _78, move _87, move _88, move _97, move _98) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_93);
        _93 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_95);
        _95 = _93;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _95) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb62;
    }

    bb52: {
        StorageDead(_98);
        StorageDead(_97);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_78);
        _76 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _77) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_77);
        _99 = discriminant(_76);
        switchInt(move _99) -> [0: bb54, 1: bb55, otherwise: bb11];
    }

    bb54: {
        StorageLive(_103);
        _103 = ((_76 as Continue).0: i64);
        _75 = _103;
        StorageDead(_103);
        _74 = <i64 as Cast>::cast::<u64>(move _75) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_100);
        _100 = ((_76 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb62;
    }

    bb57: {
        StorageDead(_75);
        _73 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _74) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_74);
        _104 = discriminant(_73);
        switchInt(move _104) -> [0: bb59, 1: bb60, otherwise: bb11];
    }

    bb59: {
        StorageLive(_108);
        _108 = ((_73 as Continue).0: u64);
        _72 = _108;
        StorageDead(_108);
        (((*_1).6: state::oracle::HistoricalIndexData).3: u64) = move _72;
        StorageDead(_72);
        StorageDead(_89);
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_73);
        StorageLive(_109);
        _109 = _4;
        (((*_1).6: state::oracle::HistoricalIndexData).4: i64) = move _109;
        StorageDead(_109);
        StorageLive(_110);
        _110 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _110);
        StorageDead(_110);
        StorageDead(_5);
        goto -> bb70;
    }

    bb60: {
        StorageLive(_105);
        _105 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_107);
        _107 = _105;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _107) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_107);
        StorageDead(_105);
        goto -> bb63;
    }

    bb62: {
        StorageDead(_75);
        StorageDead(_74);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_72);
        StorageDead(_89);
        goto -> bb64;
    }

    bb64: {
        StorageDead(_79);
        StorageDead(_76);
        StorageDead(_73);
        goto -> bb69;
    }

    bb65: {
        StorageDead(_39);
        StorageDead(_38);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_36);
        StorageDead(_53);
        goto -> bb67;
    }

    bb67: {
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_37);
        goto -> bb69;
    }

    bb68: {
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_5);
        goto -> bb70;
    }

    bb70: {
        return;
    }
}
