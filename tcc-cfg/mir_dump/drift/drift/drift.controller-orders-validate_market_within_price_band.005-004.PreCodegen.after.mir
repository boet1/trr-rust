// MIR for `validate_market_within_price_band` after PreCodegen

fn validate_market_within_price_band(_1: &PerpMarket, _2: &state::state::State, _3: i64) -> std::result::Result<bool, error::ErrorCode> {
    debug market => _1;
    debug state => _2;
    debug oracle_price => _3;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: &state::perp_market::PerpMarket;
    let mut _7: !;
    let _8: u64;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _10: std::result::Result<u64, error::ErrorCode>;
    let mut _11: &state::perp_market::AMM;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: u64;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _19: std::result::Result<i64, error::ErrorCode>;
    let mut _20: &state::perp_market::AMM;
    let _21: &state::perp_market::AMM;
    let mut _22: u64;
    let mut _23: isize;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _30: std::result::Result<i64, error::ErrorCode>;
    let mut _31: &state::perp_market::AMM;
    let _32: &state::perp_market::AMM;
    let mut _33: u64;
    let mut _34: i64;
    let mut _35: isize;
    let mut _37: !;
    let mut _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: ();
    let mut _41: bool;
    let mut _42: i64;
    let mut _43: i64;
    let mut _44: i64;
    let mut _45: i64;
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _48: std::result::Result<bool, error::ErrorCode>;
    let mut _49: i64;
    let mut _50: &state::state::PriceDivergenceGuardRails;
    let _51: &state::state::PriceDivergenceGuardRails;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: bool;
    let mut _58: !;
    let _59: ();
    let mut _60: &str;
    let _61: &str;
    let mut _62: &std::string::String;
    let _63: &std::string::String;
    let _64: std::string::String;
    let mut _66: std::fmt::Arguments<'_>;
    let mut _67: &[&str];
    let mut _68: &[&str; 5];
    let _69: &[&str; 5];
    let _70: [&str; 5];
    let mut _71: &[core::fmt::rt::Argument<'_>];
    let mut _72: &[core::fmt::rt::Argument<'_>; 4];
    let _73: &[core::fmt::rt::Argument<'_>; 4];
    let _74: [core::fmt::rt::Argument<'_>; 4];
    let mut _75: core::fmt::rt::Argument<'_>;
    let mut _76: &u16;
    let _77: &u16;
    let mut _78: core::fmt::rt::Argument<'_>;
    let mut _79: &i64;
    let _80: &i64;
    let mut _81: core::fmt::rt::Argument<'_>;
    let mut _82: &u64;
    let _83: &u64;
    let mut _84: core::fmt::rt::Argument<'_>;
    let mut _85: &i64;
    let _86: &i64;
    let mut _87: error::ErrorCode;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _90: std::result::Result<bool, error::ErrorCode>;
    let mut _91: i64;
    let mut _92: &state::state::PriceDivergenceGuardRails;
    let _93: &state::state::PriceDivergenceGuardRails;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _99: bool;
    let mut _100: !;
    let _101: ();
    let mut _102: &str;
    let _103: &str;
    let mut _104: &std::string::String;
    let _105: &std::string::String;
    let _106: std::string::String;
    let mut _108: std::fmt::Arguments<'_>;
    let mut _109: &[&str];
    let mut _110: &[&str; 5];
    let _111: &[&str; 5];
    let _112: [&str; 5];
    let mut _113: &[core::fmt::rt::Argument<'_>];
    let mut _114: &[core::fmt::rt::Argument<'_>; 4];
    let _115: &[core::fmt::rt::Argument<'_>; 4];
    let _116: [core::fmt::rt::Argument<'_>; 4];
    let mut _117: core::fmt::rt::Argument<'_>;
    let mut _118: &u16;
    let _119: &u16;
    let mut _120: core::fmt::rt::Argument<'_>;
    let mut _121: &i64;
    let _122: &i64;
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &i64;
    let _125: &i64;
    let mut _126: core::fmt::rt::Argument<'_>;
    let mut _127: &i64;
    let _128: &i64;
    let mut _129: error::ErrorCode;
    scope 1 {
        debug reserve_price => _8;
        let _17: i64;
        let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _27: i64;
        scope 6 {
            debug reserve_spread_pct => _17;
            let _28: i64;
            let _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _39: i64;
            scope 11 {
                debug oracle_spread_pct => _28;
                let _46: bool;
                let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _56: bool;
                let _88: bool;
                let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _98: bool;
                scope 16 {
                    debug is_reserve_too_divergent => _46;
                    let _65: std::string::String;
                    let mut _130: &[&str; 5];
                    scope 21 {
                        debug res => _65;
                    }
                }
                scope 17 {
                    debug residual => _53;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _56;
                    scope 20 {
                    }
                }
                scope 22 {
                    debug is_oracle_too_divergent => _88;
                    let _107: std::string::String;
                    let mut _131: &[&str; 5];
                    scope 27 {
                        debug res => _107;
                    }
                }
                scope 23 {
                    debug residual => _95;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug val => _98;
                    scope 26 {
                    }
                }
            }
            scope 12 {
                debug residual => _36;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _39;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _24;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _27;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_1);
        _5 = PerpMarket::is_prediction_market(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb64;
    }

    bb3: {
        StorageDead(_6);
        _4 = const ();
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &((*_1).1: state::perp_market::AMM);
        _10 = AMM::reserve_price(move _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_11);
        _9 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: u64);
        _8 = _16;
        StorageDead(_16);
        StorageDead(_9);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).1: state::perp_market::AMM);
        _20 = &(*_21);
        StorageLive(_22);
        _22 = _8;
        _19 = calculate_oracle_twap_5min_price_spread_pct(move _20, move _22) -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_9);
        goto -> bb63;
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_20);
        _18 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        _23 = discriminant(_18);
        switchInt(move _23) -> [0: bb12, 1: bb13, otherwise: bb7];
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_18 as Continue).0: i64);
        _17 = _27;
        StorageDead(_27);
        StorageDead(_21);
        StorageDead(_18);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        _32 = &((*_1).1: state::perp_market::AMM);
        _31 = &(*_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _3;
        _33 = core::num::<impl i64>::unsigned_abs(move _34) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_24);
        _24 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb62;
    }

    bb15: {
        StorageDead(_34);
        _30 = calculate_oracle_twap_5min_price_spread_pct(move _31, move _33) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_33);
        StorageDead(_31);
        _29 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_30);
        _35 = discriminant(_29);
        switchInt(move _35) -> [0: bb18, 1: bb19, otherwise: bb7];
    }

    bb18: {
        StorageLive(_39);
        _39 = ((_29 as Continue).0: i64);
        _28 = _39;
        StorageDead(_39);
        StorageDead(_32);
        StorageDead(_29);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = _17;
        _42 = core::num::<impl i64>::abs(move _43) -> [return: bb21, unwind continue];
    }

    bb19: {
        StorageLive(_36);
        _36 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_38);
        _38 = _36;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _38) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_36);
        StorageDead(_32);
        StorageDead(_29);
        goto -> bb61;
    }

    bb21: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _45 = _28;
        _44 = core::num::<impl i64>::abs(move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_45);
        _41 = Gt(move _42, move _44);
        switchInt(move _41) -> [0: bb40, otherwise: bb23];
    }

    bb23: {
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        _49 = _17;
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(((*_2).7: state::state::OracleGuardRails).0: state::state::PriceDivergenceGuardRails);
        _50 = &(*_51);
        _48 = is_oracle_mark_too_divergent(move _49, move _50) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_50);
        StorageDead(_49);
        _47 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _48) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_48);
        _52 = discriminant(_47);
        switchInt(move _52) -> [0: bb26, 1: bb27, otherwise: bb7];
    }

    bb26: {
        StorageLive(_56);
        _56 = ((_47 as Continue).0: bool);
        _46 = _56;
        StorageDead(_56);
        StorageDead(_51);
        StorageDead(_47);
        StorageLive(_57);
        _57 = _46;
        switchInt(move _57) -> [0: bb30, otherwise: bb29];
    }

    bb27: {
        StorageLive(_53);
        _53 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageDead(_47);
        goto -> bb59;
    }

    bb29: {
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _130 = const _;
        _69 = &(*_130);
        _68 = &(*_69);
        _67 = move _68 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_68);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &((*_1).21: u16);
        _76 = &(*_77);
        _75 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _76) -> [return: bb31, unwind continue];
    }

    bb30: {
        _40 = const ();
        StorageDead(_57);
        StorageDead(_46);
        goto -> bb57;
    }

    bb31: {
        StorageDead(_76);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _80 = &((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        _79 = &(*_80);
        _78 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _79) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_8;
        _82 = &(*_83);
        _81 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _82) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_82);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = &_17;
        _85 = &(*_86);
        _84 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _85) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_85);
        _74 = [move _75, move _78, move _81, move _84];
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        _73 = &_74;
        _72 = &(*_73);
        _71 = move _72 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_72);
        _66 = Arguments::<'_>::new_v1(move _67, move _71) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_71);
        StorageDead(_67);
        _65 = format(move _66) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_66);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_69);
        _64 = move _65;
        StorageDead(_65);
        _63 = &_64;
        _62 = &(*_63);
        _61 = <String as Deref>::deref(move _62) -> [return: bb37, unwind: bb66];
    }

    bb37: {
        _60 = &(*_61);
        StorageDead(_62);
        _59 = solana_program::log::sol_log(move _60) -> [return: bb38, unwind: bb66];
    }

    bb38: {
        StorageDead(_60);
        drop(_64) -> [return: bb39, unwind: bb67];
    }

    bb39: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_61);
        StorageDead(_59);
        StorageLive(_87);
        _87 = error::ErrorCode::PriceBandsBreached;
        _0 = std::result::Result::<bool, error::ErrorCode>::Err(move _87);
        StorageDead(_87);
        StorageDead(_57);
        goto -> bb59;
    }

    bb40: {
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _28;
        StorageLive(_92);
        StorageLive(_93);
        _93 = &(((*_2).7: state::state::OracleGuardRails).0: state::state::PriceDivergenceGuardRails);
        _92 = &(*_93);
        _90 = is_oracle_mark_too_divergent(move _91, move _92) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_92);
        StorageDead(_91);
        _89 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _90) -> [return: bb42, unwind continue];
    }

    bb42: {
        StorageDead(_90);
        _94 = discriminant(_89);
        switchInt(move _94) -> [0: bb43, 1: bb44, otherwise: bb7];
    }

    bb43: {
        StorageLive(_98);
        _98 = ((_89 as Continue).0: bool);
        _88 = _98;
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_89);
        StorageLive(_99);
        _99 = _88;
        switchInt(move _99) -> [0: bb47, otherwise: bb46];
    }

    bb44: {
        StorageLive(_95);
        _95 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<bool, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_93);
        StorageDead(_89);
        goto -> bb58;
    }

    bb46: {
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        _131 = const _;
        _111 = &(*_131);
        _110 = &(*_111);
        _109 = move _110 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_110);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &((*_1).21: u16);
        _118 = &(*_119);
        _117 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _118) -> [return: bb48, unwind continue];
    }

    bb47: {
        _40 = const ();
        StorageDead(_99);
        StorageDead(_88);
        goto -> bb57;
    }

    bb48: {
        StorageDead(_118);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        _122 = &((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64);
        _121 = &(*_122);
        _120 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _121) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_121);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_3;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _124) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_124);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_28;
        _127 = &(*_128);
        _126 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _127) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_127);
        _116 = [move _117, move _120, move _123, move _126];
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_120);
        StorageDead(_117);
        _115 = &_116;
        _114 = &(*_115);
        _113 = move _114 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_114);
        _108 = Arguments::<'_>::new_v1(move _109, move _113) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_113);
        StorageDead(_109);
        _107 = format(move _108) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_108);
        StorageDead(_128);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_119);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_111);
        _106 = move _107;
        StorageDead(_107);
        _105 = &_106;
        _104 = &(*_105);
        _103 = <String as Deref>::deref(move _104) -> [return: bb54, unwind: bb65];
    }

    bb54: {
        _102 = &(*_103);
        StorageDead(_104);
        _101 = solana_program::log::sol_log(move _102) -> [return: bb55, unwind: bb65];
    }

    bb55: {
        StorageDead(_102);
        drop(_106) -> [return: bb56, unwind: bb67];
    }

    bb56: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_101);
        StorageLive(_129);
        _129 = error::ErrorCode::PriceBandsBreached;
        _0 = std::result::Result::<bool, error::ErrorCode>::Err(move _129);
        StorageDead(_129);
        StorageDead(_99);
        goto -> bb58;
    }

    bb57: {
        StorageDead(_41);
        StorageDead(_40);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(const true);
        StorageDead(_28);
        StorageDead(_17);
        StorageDead(_8);
        goto -> bb64;
    }

    bb58: {
        StorageDead(_88);
        goto -> bb60;
    }

    bb59: {
        StorageDead(_46);
        goto -> bb60;
    }

    bb60: {
        StorageDead(_41);
        StorageDead(_40);
        goto -> bb61;
    }

    bb61: {
        StorageDead(_28);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_17);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_8);
        goto -> bb64;
    }

    bb64: {
        return;
    }

    bb65 (cleanup): {
        drop(_106) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_64) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        resume;
    }
}
