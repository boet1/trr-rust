// MIR for `get_balance_value_and_token_amount` after PreCodegen

fn get_balance_value_and_token_amount(_1: &SpotPosition, _2: &SpotMarket, _3: &OraclePriceData) -> std::result::Result<(u128, u128), error::ErrorCode> {
    debug spot_position => _1;
    debug spot_market => _2;
    debug oracle_price_data => _3;
    let mut _0: std::result::Result<(u128, u128), error::ErrorCode>;
    let _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: &state::user::SpotPosition;
    let mut _8: &state::spot_market::SpotMarket;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u128;
    let mut _15: u32;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _18: std::result::Result<u128, error::ErrorCode>;
    let mut _19: u128;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _21: std::result::Result<u128, error::ErrorCode>;
    let mut _22: u128;
    let mut _23: u128;
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _25: std::result::Result<u128, error::ErrorCode>;
    let mut _26: i64;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: u128;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: (u128, u128);
    let mut _44: u128;
    let mut _45: u128;
    scope 1 {
        debug token_amount => _4;
        let _14: u128;
        scope 6 {
            debug precision_decrease => _14;
            let _16: u128;
            let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _31: u128;
            let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _36: u128;
            let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _42: u128;
            scope 7 {
                debug value => _16;
            }
            scope 8 {
                debug residual => _28;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _31;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _33;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _36;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _39;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _42;
                scope 19 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = &(*_2);
        _6 = SpotPosition::get_token_amount(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: u128);
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageLive(_14);
        StorageLive(_15);
        _15 = ((*_2).41: u32);
        _14 = core::num::<impl u128>::pow(const 10_u128, move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        goto -> bb25;
    }

    bb7: {
        StorageDead(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _4;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = ((*_3).0: i64);
        _25 = <i64 as Cast>::cast::<u128>(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        _24 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _25) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_25);
        _27 = discriminant(_24);
        switchInt(move _27) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_31);
        _31 = ((_24 as Continue).0: u128);
        _23 = _31;
        StorageDead(_31);
        _21 = <u128 as SafeMath>::safe_mul(move _22, move _23) -> [return: bb13, unwind continue];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_24 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_21);
        goto -> bb23;
    }

    bb13: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _21) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_21);
        _32 = discriminant(_20);
        switchInt(move _32) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_20 as Continue).0: u128);
        _19 = _36;
        StorageDead(_36);
        StorageLive(_37);
        _37 = _14;
        _18 = <u128 as SafeMath>::safe_div(move _19, move _37) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_33);
        _33 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_33);
        goto -> bb23;
    }

    bb18: {
        StorageDead(_37);
        StorageDead(_19);
        _17 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _18) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_18);
        _38 = discriminant(_17);
        switchInt(move _38) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_42);
        _42 = ((_17 as Continue).0: u128);
        _16 = _42;
        StorageDead(_42);
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_17);
        StorageLive(_43);
        StorageLive(_44);
        _44 = _16;
        StorageLive(_45);
        _45 = _4;
        _43 = (move _44, move _45);
        StorageDead(_45);
        StorageDead(_44);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _43);
        StorageDead(_43);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_4);
        goto -> bb26;
    }

    bb21: {
        StorageLive(_39);
        _39 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb24;
    }

    bb23: {
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb24;
    }

    bb24: {
        StorageDead(_24);
        StorageDead(_20);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_4);
        goto -> bb26;
    }

    bb26: {
        return;
    }
}
