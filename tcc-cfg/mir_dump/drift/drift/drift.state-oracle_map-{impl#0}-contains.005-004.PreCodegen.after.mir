// MIR for `oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::contains` after PreCodegen

fn oracle_map::<impl at programs/drift/src/state/oracle_map.rs:44:1: 44:23>::contains(_1: &OracleMap<'_>, _2: &anchor_lang::prelude::Pubkey) -> bool {
    debug self => _1;
    debug pubkey => _2;
    let mut _0: bool;
    let mut _3: bool;
    let mut _4: &std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _5: &anchor_lang::prelude::Pubkey;
    let mut _6: &&anchor_lang::prelude::Pubkey;
    let mut _7: &&anchor_lang::prelude::Pubkey;
    let _8: &anchor_lang::prelude::Pubkey;
    let _9: anchor_lang::prelude::Pubkey;

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: std::collections::BTreeMap<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>);
        StorageLive(_5);
        _5 = &(*_2);
        _3 = BTreeMap::<anchor_lang::prelude::Pubkey, anchor_lang::prelude::AccountInfo<'_>>::contains_key::<anchor_lang::prelude::Pubkey>(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_5);
        StorageDead(_4);
        _0 = const true;
        goto -> bb6;
    }

    bb3: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_6);
        _6 = &_2;
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = <anchor_lang::prelude::Pubkey as Default>::default() -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = &_9;
        _7 = &_8;
        _0 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _6, move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb6;
    }

    bb6: {
        StorageDead(_3);
        return;
    }
}
