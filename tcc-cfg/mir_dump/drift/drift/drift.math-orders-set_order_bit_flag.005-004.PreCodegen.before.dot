digraph Mir_0_2627 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn math::orders::set_order_bit_flag(_1: u8, _2: bool, _3: state::user::OrderBitFlag) -&gt; u8<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: u8;<br align="left"/>let _7: state::user::OrderBitFlag;<br align="left"/>let mut _8: isize;<br align="left"/>let mut _9: u8;<br align="left"/>let mut _10: bool;<br align="left"/>let mut _11: bool;<br align="left"/>let mut _12: bool;<br align="left"/>let mut _13: u8;<br align="left"/>let mut _14: u8;<br align="left"/>let _15: state::user::OrderBitFlag;<br align="left"/>let mut _16: isize;<br align="left"/>let mut _17: u8;<br align="left"/>let mut _18: bool;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: bool;<br align="left"/>debug flags =&gt; _1;<br align="left"/>debug value =&gt; _2;<br align="left"/>debug flag =&gt; _3;<br align="left"/>>;
    bb0__0_2627 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = _2<br/></td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb1__0_2627 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>StorageLive(_7)<br/>_7 = _3<br/>_8 = discriminant(_7)<br/>_9 = _8 as u8 (IntToInt)<br/>_10 = Ge(_9, const 1_u8)<br/>_11 = Le(_9, const 8_u8)<br/>_12 = BitAnd(move _10, move _11)<br/>assume(move _12)<br/>_6 = move _8 as u8 (IntToInt)<br/>StorageDead(_7)<br/>_1 = BitOr(_1, move _6)<br/>StorageDead(_6)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb2__0_2627 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = _3<br/>_16 = discriminant(_15)<br/>_17 = _16 as u8 (IntToInt)<br/>_18 = Ge(_17, const 1_u8)<br/>_19 = Le(_17, const 8_u8)<br/>_20 = BitAnd(move _18, move _19)<br/>assume(move _20)<br/>_14 = move _16 as u8 (IntToInt)<br/>StorageDead(_15)<br/>_13 = Not(move _14)<br/>StorageDead(_14)<br/>_1 = BitAnd(_1, move _13)<br/>StorageDead(_13)<br/>_4 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_2627 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_5)<br/>StorageDead(_4)<br/>_0 = _1<br/></td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_2627 -> bb2__0_2627 [label="0"];
    bb0__0_2627 -> bb1__0_2627 [label="otherwise"];
    bb1__0_2627 -> bb3__0_2627 [label=""];
    bb2__0_2627 -> bb3__0_2627 [label=""];
}
