// MIR for `instructions::user::handle_initialize_signed_msg_ws_delegates` before PreCodegen

fn instructions::user::handle_initialize_signed_msg_ws_delegates(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::InitializeSignedMsgWsDelegates<'_>>, _2: Vec<anchor_lang::prelude::Pubkey>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug delegates => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: &mut std::vec::Vec<anchor_lang::prelude::Pubkey>;
    let mut _5: &mut state::signed_msg_user::SignedMsgWsDelegates;
    let mut _6: &mut anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>;
    let mut _7: std::vec::Vec<anchor_lang::prelude::Pubkey>;
    let mut _8: ();
    let mut _9: &mut instructions::user::InitializeSignedMsgWsDelegates<'_>;
    let mut _10: bool;

    bb0: {
        _10 = const false;
        _10 = const true;
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _9 = deref_copy (_1.1: &mut instructions::user::InitializeSignedMsgWsDelegates<'_>);
        _6 = &mut ((*_9).0: anchor_lang::prelude::Account<'_, state::signed_msg_user::SignedMsgWsDelegates>);
        _5 = <anchor_lang::prelude::Account<'_, SignedMsgWsDelegates> as DerefMut>::deref_mut(move _6) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        StorageDead(_6);
        _4 = &mut ((*_5).0: std::vec::Vec<anchor_lang::prelude::Pubkey>);
        StorageLive(_7);
        _10 = const false;
        _7 = move _2;
        _3 = <Vec<anchor_lang::prelude::Pubkey> as Extend<anchor_lang::prelude::Pubkey>>::extend::<Vec<anchor_lang::prelude::Pubkey>>(move _4, move _7) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_5);
        StorageDead(_3);
        StorageLive(_8);
        _8 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _8);
        StorageDead(_8);
        return;
    }

    bb3 (cleanup): {
        resume;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb3, unwind terminate(cleanup)];
    }

    bb5 (cleanup): {
        switchInt(_10) -> [0: bb3, otherwise: bb4];
    }
}
