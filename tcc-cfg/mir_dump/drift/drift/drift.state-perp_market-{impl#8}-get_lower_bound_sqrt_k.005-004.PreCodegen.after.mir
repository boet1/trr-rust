// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_lower_bound_sqrt_k` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:1269:1: 1269:9>::get_lower_bound_sqrt_k(_1: AMM) -> std::result::Result<u128, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let mut _2: u128;
    let mut _3: u128;
    let mut _4: u128;
    let mut _5: u128;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _7: std::result::Result<u128, error::ErrorCode>;
    let mut _8: u64;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: u128;
    let mut _14: u128;
    let mut _15: i128;
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = (_1.10: u128);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = (_1.54: u64);
        _7 = <u64 as Cast>::cast::<u128>(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_7);
        _9 = discriminant(_6);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_6 as Continue).0: u128);
        _5 = _13;
        StorageDead(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = (_1.15: i128);
        _14 = core::num::<impl i128>::unsigned_abs(move _15) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        StorageDead(_6);
        goto -> bb10;
    }

    bb7: {
        StorageDead(_15);
        _4 = <u128 as Ord>::max(move _5, move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_5);
        _2 = <u128 as Ord>::min(move _3, move _4) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_4);
        StorageDead(_3);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _2);
        StorageDead(_2);
        StorageDead(_6);
        goto -> bb10;
    }

    bb10: {
        return;
    }
}
