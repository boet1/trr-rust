// MIR for `state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::update_perp_position_max_margin_ratio` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:136:1: 136:10>::update_perp_position_max_margin_ratio(_1: &mut User, _2: u16, _3: u16) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug market_index => _2;
    debug margin_ratio => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: bool;
    let mut _6: u32;
    let mut _7: u32;
    let mut _8: u16;
    let _9: ();
    let mut _10: &str;
    let _11: &str;
    let mut _12: &std::string::String;
    let _13: &std::string::String;
    let _14: std::string::String;
    let _15: std::string::String;
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[&str; 3];
    let _19: &[&str; 3];
    let _20: [&str; 3];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let mut _22: &[core::fmt::rt::Argument<'_>; 2];
    let _23: &[core::fmt::rt::Argument<'_>; 2];
    let _24: [core::fmt::rt::Argument<'_>; 2];
    let mut _25: core::fmt::rt::Argument<'_>;
    let mut _26: &u32;
    let _27: &u32;
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &u16;
    let _30: &u16;
    let mut _31: u16;
    let _32: &mut state::user::PerpPosition;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &mut state::user::PerpPosition>;
    let mut _34: std::result::Result<&mut state::user::PerpPosition, error::ErrorCode>;
    let mut _35: &mut state::user::User;
    let mut _36: u16;
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _41: &mut state::user::PerpPosition;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: &std::string::String;
    let _46: &std::string::String;
    let _47: std::string::String;
    let mut _49: std::fmt::Arguments<'_>;
    let mut _50: &[&str];
    let mut _51: &[&str; 2];
    let _52: &[&str; 2];
    let _53: [&str; 2];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let mut _55: &[core::fmt::rt::Argument<'_>; 2];
    let _56: &[core::fmt::rt::Argument<'_>; 2];
    let _57: [core::fmt::rt::Argument<'_>; 2];
    let mut _58: core::fmt::rt::Argument<'_>;
    let mut _59: &u16;
    let _60: &u16;
    let mut _61: core::fmt::rt::Argument<'_>;
    let mut _62: &u16;
    let _63: &u16;
    let mut _64: u16;
    let mut _65: ();
    let mut _67: &[&str; 3];
    scope 1 {
        debug res => _15;
    }
    scope 2 {
        debug perp_position => _32;
        let _48: std::string::String;
        let mut _66: &[&str; 2];
        scope 7 {
            debug res => _48;
        }
    }
    scope 3 {
        debug residual => _38;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _41;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = ((*_1).16: u32);
        StorageLive(_7);
        StorageLive(_8);
        _8 = _3;
        _7 = move _8 as u32 (IntToInt);
        StorageDead(_8);
        _5 = Gt(move _6, move _7);
        switchInt(move _5) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _67 = const _;
        _19 = &(*_67);
        _18 = &(*_19);
        _17 = move _18 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).16: u32);
        _26 = &(*_27);
        _25 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _26) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_26);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &_3;
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _29) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_29);
        _24 = [move _25, move _28];
        StorageDead(_28);
        StorageDead(_25);
        _23 = &_24;
        _22 = &(*_23);
        _21 = move _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_22);
        _16 = Arguments::<'_>::new_v1(move _17, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_21);
        StorageDead(_17);
        _15 = format(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_16);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_19);
        _14 = move _15;
        StorageDead(_15);
        _13 = &_14;
        _12 = &(*_13);
        _11 = <String as Deref>::deref(move _12) -> [return: bb6, unwind: bb26];
    }

    bb6: {
        _10 = &(*_11);
        StorageDead(_12);
        _9 = solana_program::log::sol_log(move _10) -> [return: bb7, unwind: bb26];
    }

    bb7: {
        StorageDead(_10);
        drop(_14) -> [return: bb8, unwind: bb27];
    }

    bb8: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_31);
        _31 = _3;
        ((*_1).16: u32) = move _31 as u32 (IntToInt);
        StorageDead(_31);
        _4 = const ();
        goto -> bb10;
    }

    bb9: {
        StorageDead(_7);
        StorageDead(_6);
        _4 = const ();
        goto -> bb10;
    }

    bb10: {
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = &mut (*_1);
        StorageLive(_36);
        _36 = _2;
        _34 = User::force_get_perp_position_mut(move _35, move _36) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_36);
        StorageDead(_35);
        _33 = <std::result::Result<&mut PerpPosition, error::ErrorCode> as Try>::branch(move _34) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_34);
        _37 = discriminant(_33);
        switchInt(move _37) -> [0: bb13, 1: bb15, otherwise: bb14];
    }

    bb13: {
        StorageLive(_41);
        _41 = move ((_33 as Continue).0: &mut state::user::PerpPosition);
        _32 = move _41;
        StorageDead(_41);
        StorageDead(_33);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _66 = const _;
        _52 = &(*_66);
        _51 = &(*_52);
        _50 = move _51 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_51);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &((*_32).12: u16);
        _59 = &(*_60);
        _58 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _59) -> [return: bb17, unwind continue];
    }

    bb14: {
        unreachable;
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_33);
        StorageDead(_32);
        goto -> bb24;
    }

    bb17: {
        StorageDead(_59);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_3;
        _62 = &(*_63);
        _61 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _62) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_62);
        _57 = [move _58, move _61];
        StorageDead(_61);
        StorageDead(_58);
        _56 = &_57;
        _55 = &(*_56);
        _54 = move _55 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_55);
        _49 = Arguments::<'_>::new_v1(move _50, move _54) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_54);
        StorageDead(_50);
        _48 = format(move _49) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_49);
        StorageDead(_63);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_52);
        _47 = move _48;
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = <String as Deref>::deref(move _45) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        _43 = &(*_44);
        StorageDead(_45);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb22, unwind: bb25];
    }

    bb22: {
        StorageDead(_43);
        drop(_47) -> [return: bb23, unwind: bb27];
    }

    bb23: {
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_64);
        _64 = _3;
        ((*_32).12: u16) = move _64;
        StorageDead(_64);
        StorageLive(_65);
        _65 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _65);
        StorageDead(_65);
        StorageDead(_32);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_47) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_14) -> [return: bb27, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        resume;
    }
}
