// MIR for `instructions::user::<impl at programs/drift/src/instructions/user.rs:4052:10: 4052:18>::exit` after PreCodegen

fn instructions::user::<impl at programs/drift/src/instructions/user.rs:4052:10: 4052:18>::exit(_1: &instructions::user::InitializeFuelOverflow<'_>, _2: &anchor_lang::prelude::Pubkey) -> std::result::Result<(), anchor_lang::error::Error> {
    debug self => _1;
    debug program_id => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: std::result::Result<(), anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let _8: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _9: &anchor_lang::prelude::Pubkey;
    let mut _10: {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: ();
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _18: std::result::Result<(), anchor_lang::error::Error>;
    let mut _19: std::result::Result<(), anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _21: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _22: &anchor_lang::prelude::Pubkey;
    let mut _23: {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18};
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _28: ();
    let _29: ();
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _31: std::result::Result<(), anchor_lang::error::Error>;
    let mut _32: std::result::Result<(), anchor_lang::error::Error>;
    let mut _33: &anchor_lang::prelude::Signer<'_>;
    let _34: &anchor_lang::prelude::Signer<'_>;
    let mut _35: &anchor_lang::prelude::Pubkey;
    let mut _36: {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18};
    let mut _37: isize;
    let _38: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _41: ();
    let mut _42: ();
    let mut _43: isize;
    let mut _44: isize;
    let mut _45: isize;
    let mut _46: isize;
    let mut _47: isize;
    let mut _48: isize;
    let mut _49: isize;
    let mut _50: isize;
    let mut _51: isize;
    let mut _52: isize;
    let mut _53: isize;
    let mut _54: isize;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _25;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _28;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _38;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _41;
        scope 12 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &((*_1).0: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>);
        _7 = &(*_8);
        StorageLive(_9);
        _9 = &(*_2);
        _6 = <anchor_lang::prelude::AccountLoader<'_, FuelOverflow> as anchor_lang::AccountsExit<'_>>::exit(move _7, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18};
        _5 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18}>(move _6, move _10) -> [return: bb2, unwind: bb21];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb3, unwind: bb21];
    }

    bb3: {
        StorageDead(_5);
        _11 = discriminant(_4);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = ((_4 as Continue).0: ());
        _3 = _15;
        StorageDead(_15);
        _43 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &((*_1).1: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _20 = &(*_21);
        StorageLive(_22);
        _22 = &(*_2);
        _19 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::AccountsExit<'_>>::exit(move _20, move _22) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb7, unwind: bb24];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _53 = discriminant(_4);
        StorageDead(_8);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb20;
    }

    bb8: {
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_23);
        _23 = {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18};
        _18 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18}>(move _19, move _23) -> [return: bb9, unwind: bb21];
    }

    bb9: {
        StorageDead(_23);
        StorageDead(_19);
        _17 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _18) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        StorageDead(_18);
        _24 = discriminant(_17);
        switchInt(move _24) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_28);
        _28 = ((_17 as Continue).0: ());
        _16 = _28;
        StorageDead(_28);
        _45 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &((*_1).3: anchor_lang::prelude::Signer<'_>);
        _33 = &(*_34);
        StorageLive(_35);
        _35 = &(*_2);
        _32 = <anchor_lang::prelude::Signer<'_> as anchor_lang::AccountsExit<'_>>::exit(move _33, move _35) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_25);
        _25 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_27);
        _27 = move _25;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _27) -> [return: bb13, unwind: bb23];
    }

    bb13: {
        StorageDead(_27);
        StorageDead(_25);
        _51 = discriminant(_17);
        StorageDead(_21);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb20;
    }

    bb14: {
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_36);
        _36 = {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18};
        _31 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/user.rs:4052:10: 4052:18}>(move _32, move _36) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _31) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        StorageDead(_31);
        _37 = discriminant(_30);
        switchInt(move _37) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_41);
        _41 = ((_30 as Continue).0: ());
        _29 = _41;
        StorageDead(_41);
        _47 = discriminant(_30);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        StorageLive(_42);
        _42 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _42);
        StorageDead(_42);
        goto -> bb20;
    }

    bb18: {
        StorageLive(_38);
        _38 = move ((_30 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_40);
        _40 = move _38;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _40) -> [return: bb19, unwind: bb22];
    }

    bb19: {
        StorageDead(_40);
        StorageDead(_38);
        _49 = discriminant(_30);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb20;
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        resume;
    }

    bb22 (cleanup): {
        _55 = discriminant(_30);
        goto -> bb21;
    }

    bb23 (cleanup): {
        _56 = discriminant(_17);
        goto -> bb21;
    }

    bb24 (cleanup): {
        _57 = discriminant(_4);
        goto -> bb21;
    }
}
