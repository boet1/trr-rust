// MIR for `calculate_oracle_reserve_price_spread_pct` after PreCodegen

fn calculate_oracle_reserve_price_spread_pct(_1: &AMM, _2: &MMOraclePriceData, _3: Option<u64>) -> std::result::Result<i64, error::ErrorCode> {
    debug amm => _1;
    debug mm_oracle_price_data => _2;
    debug precomputed_reserve_price => _3;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _4: u64;
    let mut _5: isize;
    let _6: u64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _8: std::result::Result<u64, error::ErrorCode>;
    let mut _9: &state::perp_market::AMM;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u64;
    let mut _17: (i64, i64);
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64)>;
    let mut _19: std::result::Result<(i64, i64), error::ErrorCode>;
    let mut _20: &state::perp_market::AMM;
    let mut _21: &state::oracle::MMOraclePriceData;
    let mut _22: std::option::Option<u64>;
    let mut _23: u64;
    let mut _24: isize;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _29: i128;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _31: std::result::Result<i128, error::ErrorCode>;
    let mut _32: i128;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _34: std::result::Result<i128, error::ErrorCode>;
    let mut _35: i128;
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _37: std::result::Result<i128, error::ErrorCode>;
    let mut _38: i64;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: i128;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _51: std::result::Result<i128, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug reserve_price => _4;
        let _15: i64;
        let _16: i64;
        let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _28: (i64, i64);
        scope 7 {
            debug _oracle_price => _15;
            debug price_spread => _16;
            let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _43: i128;
            let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _48: i128;
            let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _57: i128;
            let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _62: i128;
            scope 12 {
                debug residual => _40;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _43;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _45;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _48;
                scope 19 {
                }
            }
            scope 20 {
                debug residual => _54;
                scope 21 {
                }
            }
            scope 22 {
                debug val => _57;
                scope 23 {
                }
            }
            scope 24 {
                debug residual => _59;
                scope 25 {
                }
            }
            scope 26 {
                debug val => _62;
                scope 27 {
                }
            }
        }
        scope 8 {
            debug residual => _25;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _28;
            scope 11 {
            }
        }
    }
    scope 2 {
        debug reserve_price => _6;
    }
    scope 3 {
        debug residual => _11;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _14;
        scope 6 {
        }
    }

    bb0: {
        StorageLive(_4);
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        _8 = AMM::reserve_price(move _9) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        StorageLive(_6);
        _6 = ((_3 as Some).0: u64);
        _4 = _6;
        StorageDead(_6);
        goto -> bb9;
    }

    bb4: {
        StorageDead(_9);
        _7 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb6, 1: bb7, otherwise: bb2];
    }

    bb6: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: u64);
        _4 = _14;
        StorageDead(_14);
        StorageDead(_7);
        goto -> bb9;
    }

    bb7: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_7);
        goto -> bb39;
    }

    bb9: {
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &(*_1);
        StorageLive(_21);
        _21 = &(*_2);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _4;
        _22 = Option::<u64>::Some(move _23);
        StorageDead(_23);
        _19 = calculate_oracle_reserve_price_spread(move _20, move _21, move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_21);
        StorageDead(_20);
        _18 = <std::result::Result<(i64, i64), error::ErrorCode> as Try>::branch(move _19) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_19);
        _24 = discriminant(_18);
        switchInt(move _24) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_28);
        _28 = ((_18 as Continue).0: (i64, i64));
        _17 = _28;
        StorageDead(_28);
        StorageLive(_15);
        _15 = (_17.0: i64);
        StorageLive(_16);
        _16 = (_17.1: i64);
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = _16;
        _37 = <i64 as Cast>::cast::<i128>(move _38) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_25);
        _25 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb39;
    }

    bb15: {
        StorageDead(_38);
        _36 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _37) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_37);
        _39 = discriminant(_36);
        switchInt(move _39) -> [0: bb17, 1: bb18, otherwise: bb2];
    }

    bb17: {
        StorageLive(_43);
        _43 = ((_36 as Continue).0: i128);
        _35 = _43;
        StorageDead(_43);
        _34 = <i128 as SafeMath>::safe_mul(move _35, const _) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_40);
        _40 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_35);
        StorageDead(_34);
        goto -> bb37;
    }

    bb20: {
        StorageDead(_35);
        _33 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _34) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_34);
        _44 = discriminant(_33);
        switchInt(move _44) -> [0: bb22, 1: bb23, otherwise: bb2];
    }

    bb22: {
        StorageLive(_48);
        _48 = ((_33 as Continue).0: i128);
        _32 = _48;
        StorageDead(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _4;
        _51 = <u64 as Cast>::cast::<i128>(move _52) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_45);
        _45 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb37;
    }

    bb25: {
        StorageDead(_52);
        _50 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _51) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_51);
        _53 = discriminant(_50);
        switchInt(move _53) -> [0: bb27, 1: bb28, otherwise: bb2];
    }

    bb27: {
        StorageLive(_57);
        _57 = ((_50 as Continue).0: i128);
        _49 = _57;
        StorageDead(_57);
        _31 = <i128 as SafeMath>::safe_div(move _32, move _49) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_54);
        _54 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_49);
        StorageDead(_32);
        StorageDead(_31);
        goto -> bb36;
    }

    bb30: {
        StorageDead(_49);
        StorageDead(_32);
        _30 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _31) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_31);
        _58 = discriminant(_30);
        switchInt(move _58) -> [0: bb32, 1: bb33, otherwise: bb2];
    }

    bb32: {
        StorageLive(_62);
        _62 = ((_30 as Continue).0: i128);
        _29 = _62;
        StorageDead(_62);
        _0 = <i128 as Cast>::cast::<i64>(move _29) -> [return: bb35, unwind continue];
    }

    bb33: {
        StorageLive(_59);
        _59 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_61);
        StorageDead(_59);
        goto -> bb36;
    }

    bb35: {
        StorageDead(_29);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_4);
        StorageDead(_50);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        goto -> bb40;
    }

    bb36: {
        StorageDead(_29);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_4);
        StorageDead(_50);
        goto -> bb38;
    }

    bb37: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_4);
        goto -> bb38;
    }

    bb38: {
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_30);
        goto -> bb40;
    }

    bb39: {
        StorageDead(_4);
        goto -> bb40;
    }

    bb40: {
        return;
    }
}
