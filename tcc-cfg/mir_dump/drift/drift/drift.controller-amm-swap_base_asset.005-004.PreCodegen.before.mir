// MIR for `swap_base_asset` before PreCodegen

fn swap_base_asset(_1: &mut PerpMarket, _2: u64, _3: SwapDirection) -> std::result::Result<(u64, i64), error::ErrorCode> {
    debug market => _1;
    debug base_asset_swap_amount => _2;
    debug direction => _3;
    let mut _0: std::result::Result<(u64, i64), error::ErrorCode>;
    let _4: u128;
    let _5: u128;
    let _6: u64;
    let _7: u64;
    let mut _8: (u128, u128, u64, u64);
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128, u64, u64)>;
    let mut _10: std::result::Result<(u128, u128, u64, u64), error::ErrorCode>;
    let mut _11: &state::perp_market::AMM;
    let _12: &state::perp_market::AMM;
    let mut _13: u64;
    let mut _14: controller::amm::SwapDirection;
    let mut _15: isize;
    let _16: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _19: (u128, u128, u64, u64);
    let mut _20: u128;
    let mut _21: u128;
    let mut _22: (u64, i64);
    let mut _23: u64;
    let mut _24: i64;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _26: std::result::Result<i64, error::ErrorCode>;
    let mut _27: u64;
    let mut _28: isize;
    let mut _30: !;
    let mut _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug new_base_asset_reserve => _4;
        debug new_quote_asset_reserve => _5;
        debug quote_asset_amount => _6;
        debug quote_asset_amount_surplus => _7;
        let _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _32: i64;
        scope 6 {
            debug residual => _29;
            scope 7 {
            }
        }
        scope 8 {
            debug val => _32;
            scope 9 {
            }
        }
    }
    scope 2 {
        debug residual => _16;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _19;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &((*_1).1: state::perp_market::AMM);
        _11 = &(*_12);
        StorageLive(_13);
        _13 = _2;
        StorageLive(_14);
        _14 = _3;
        _10 = calculate_base_swap_output_with_spread(move _11, move _13, move _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_11);
        _9 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_19);
        _19 = ((_9 as Continue).0: (u128, u128, u64, u64));
        _8 = _19;
        StorageDead(_19);
        StorageLive(_4);
        _4 = (_8.0: u128);
        StorageLive(_5);
        _5 = (_8.1: u128);
        StorageLive(_6);
        _6 = (_8.2: u64);
        StorageLive(_7);
        _7 = (_8.3: u64);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        _20 = _4;
        (((*_1).1: state::perp_market::AMM).5: u128) = move _20;
        StorageDead(_20);
        StorageLive(_21);
        _21 = _5;
        (((*_1).1: state::perp_market::AMM).6: u128) = move _21;
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _6;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = _7;
        _26 = <u64 as Cast>::cast::<i64>(move _27) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_12);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb12;
    }

    bb7: {
        StorageDead(_27);
        _25 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        _28 = discriminant(_25);
        switchInt(move _28) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_32);
        _32 = ((_25 as Continue).0: i64);
        _24 = _32;
        StorageDead(_32);
        _22 = (move _23, move _24);
        StorageDead(_24);
        StorageDead(_23);
        _0 = std::result::Result::<(u64, i64), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_25);
        goto -> bb12;
    }

    bb10: {
        StorageLive(_29);
        _29 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_31);
        _31 = _29;
        _0 = <std::result::Result<(u64, i64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_7);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_25);
        goto -> bb12;
    }

    bb12: {
        return;
    }
}
