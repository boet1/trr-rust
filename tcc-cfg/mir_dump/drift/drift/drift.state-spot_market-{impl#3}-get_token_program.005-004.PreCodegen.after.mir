// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_token_program` after PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:291:1: 291:16>::get_token_program(_1: &SpotMarket) -> anchor_lang::prelude::Pubkey {
    debug self => _1;
    let mut _0: anchor_lang::prelude::Pubkey;
    let mut _2: bool;
    let mut _3: u8;
    let mut _4: u8;
    let mut _5: u8;
    let mut _6: isize;
    let mut _7: (isize, bool);

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = ((*_1).61: u8);
        StorageLive(_5);
        StorageLive(_6);
        _7 = CheckedAdd(const _, const 0_isize);
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = move (_7.0: isize);
        _5 = move _6 as u8 (IntToInt);
        StorageDead(_6);
        _3 = BitAnd(move _4, move _5);
        StorageDead(_5);
        StorageDead(_4);
        _2 = Ne(move _3, const 0_u8);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_3);
        _0 = const _;
        goto -> bb4;
    }

    bb3: {
        StorageDead(_3);
        _0 = const _;
        goto -> bb4;
    }

    bb4: {
        StorageDead(_2);
        return;
    }
}
