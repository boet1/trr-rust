// MIR for `estimate_best_bid_ask_price` before PreCodegen

fn estimate_best_bid_ask_price(_1: &mut AMM, _2: Option<u64>, _3: Option<controller::position::PositionDirection>) -> std::result::Result<(u64, u64), error::ErrorCode> {
    debug amm => _1;
    debug precomputed_trade_price => _2;
    debug direction => _3;
    let mut _0: std::result::Result<(u64, u64), error::ErrorCode>;
    let _4: u64;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _6: std::result::Result<u64, error::ErrorCode>;
    let mut _7: u32;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _12: u64;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _15: std::result::Result<u64, error::ErrorCode>;
    let mut _16: i64;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: isize;
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _27: std::result::Result<i64, error::ErrorCode>;
    let mut _28: i64;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _30: std::result::Result<i64, error::ErrorCode>;
    let mut _31: u64;
    let mut _32: isize;
    let mut _34: !;
    let mut _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _37: i64;
    let mut _38: isize;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _43: ();
    let mut _44: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _45: std::result::Result<(), error::ErrorCode>;
    let mut _46: bool;
    let mut _47: i64;
    let mut _48: ();
    let _50: ();
    let mut _51: &str;
    let _52: &str;
    let mut _53: &std::string::String;
    let _54: &std::string::String;
    let _55: std::string::String;
    let mut _57: std::fmt::Arguments<'_>;
    let mut _58: &[&str];
    let mut _59: &[&str; 2];
    let _60: &[&str; 2];
    let _61: [&str; 2];
    let mut _62: &[core::fmt::rt::Argument<'_>];
    let mut _63: &[core::fmt::rt::Argument<'_>; 1];
    let _64: &[core::fmt::rt::Argument<'_>; 1];
    let _65: [core::fmt::rt::Argument<'_>; 1];
    let mut _66: core::fmt::rt::Argument<'_>;
    let mut _67: &error::ErrorCode;
    let _68: &error::ErrorCode;
    let _69: ();
    let mut _70: &str;
    let _71: &str;
    let mut _72: error::ErrorCode;
    let mut _73: isize;
    let mut _75: !;
    let mut _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _80: std::result::Result<u64, error::ErrorCode>;
    let mut _81: &state::perp_market::AMM;
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: (u64, u64);
    let mut _90: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u64, u64)>;
    let mut _91: std::result::Result<(u64, u64), error::ErrorCode>;
    let mut _92: &state::perp_market::AMM;
    let mut _93: u64;
    let mut _94: isize;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: u64;
    let mut _101: bool;
    let mut _102: i64;
    let mut _104: u64;
    let mut _105: u64;
    let mut _106: u64;
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _108: std::result::Result<u64, error::ErrorCode>;
    let mut _109: u32;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _115: bool;
    let mut _116: u64;
    let mut _117: u64;
    let mut _118: u64;
    let mut _119: u64;
    let mut _120: u64;
    let mut _121: i64;
    let mut _122: u64;
    let mut _123: u64;
    let mut _125: u64;
    let mut _126: bool;
    let mut _127: i64;
    let mut _129: u64;
    let mut _130: u64;
    let mut _131: u64;
    let mut _132: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _133: std::result::Result<u64, error::ErrorCode>;
    let mut _134: u32;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: bool;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _142: std::result::Result<u64, error::ErrorCode>;
    let mut _143: u64;
    let mut _144: u64;
    let mut _145: u64;
    let mut _146: u64;
    let mut _147: i64;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: u64;
    let mut _156: (u64, u64);
    let mut _157: isize;
    let mut _159: isize;
    let mut _160: u64;
    let mut _161: u64;
    let mut _162: u64;
    let mut _163: u64;
    let mut _164: u64;
    let mut _165: u64;
    let mut _166: u64;
    let mut _167: u64;
    let mut _168: u64;
    let mut _169: u64;
    let mut _170: u64;
    let mut _171: u64;
    let mut _172: u64;
    let mut _173: u64;
    let mut _174: u64;
    let mut _175: u64;
    let mut _176: u64;
    let mut _177: u64;
    let _178: ();
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _180: std::result::Result<(), error::ErrorCode>;
    let mut _181: bool;
    let mut _182: u64;
    let mut _183: u64;
    let mut _184: ();
    let _186: ();
    let mut _187: &str;
    let _188: &str;
    let mut _189: &std::string::String;
    let _190: &std::string::String;
    let _191: std::string::String;
    let mut _193: std::fmt::Arguments<'_>;
    let mut _194: &[&str];
    let mut _195: &[&str; 2];
    let _196: &[&str; 2];
    let _197: [&str; 2];
    let mut _198: &[core::fmt::rt::Argument<'_>];
    let mut _199: &[core::fmt::rt::Argument<'_>; 1];
    let _200: &[core::fmt::rt::Argument<'_>; 1];
    let _201: [core::fmt::rt::Argument<'_>; 1];
    let mut _202: core::fmt::rt::Argument<'_>;
    let mut _203: &error::ErrorCode;
    let _204: &error::ErrorCode;
    let _205: ();
    let mut _206: &str;
    let _207: &str;
    let mut _208: &std::string::String;
    let _209: &std::string::String;
    let _210: std::string::String;
    let mut _212: std::fmt::Arguments<'_>;
    let mut _213: &[&str];
    let mut _214: &[&str; 5];
    let _215: &[&str; 5];
    let _216: [&str; 5];
    let mut _217: &[core::fmt::rt::Argument<'_>];
    let mut _218: &[core::fmt::rt::Argument<'_>; 4];
    let _219: &[core::fmt::rt::Argument<'_>; 4];
    let _220: [core::fmt::rt::Argument<'_>; 4];
    let mut _221: core::fmt::rt::Argument<'_>;
    let mut _222: &u64;
    let _223: &u64;
    let mut _224: core::fmt::rt::Argument<'_>;
    let mut _225: &u64;
    let _226: &u64;
    let mut _227: core::fmt::rt::Argument<'_>;
    let mut _228: &u64;
    let _229: &u64;
    let mut _230: core::fmt::rt::Argument<'_>;
    let mut _231: &u64;
    let _232: &u64;
    let mut _233: error::ErrorCode;
    let mut _234: isize;
    let mut _236: !;
    let mut _237: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _239: (u64, u64);
    let mut _240: u64;
    let mut _241: u64;
    scope 1 {
        debug base_spread_u64 => _4;
        let _13: u64;
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: u64;
        scope 6 {
            debug last_oracle_price_u64 => _13;
            let _22: u64;
            let _24: u64;
            scope 11 {
                debug trade_price => _22;
                let _25: i64;
                let _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _36: i64;
                let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _42: i64;
                scope 13 {
                    debug trade_premium => _25;
                    let _49: error::ErrorCode;
                    let _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _77: ();
                    let _78: u64;
                    let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _86: u64;
                    scope 22 {
                        debug error_code => _49;
                        let _56: std::string::String;
                        let mut _244: &[&str; 2];
                        scope 23 {
                            debug res => _56;
                        }
                    }
                    scope 24 {
                        debug residual => _74;
                        scope 25 {
                        }
                    }
                    scope 26 {
                        debug val => _77;
                        scope 27 {
                        }
                    }
                    scope 28 {
                        debug amm_reserve_price => _78;
                        let _87: u64;
                        let _88: u64;
                        let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _98: (u64, u64);
                        scope 33 {
                            debug amm_bid_price => _87;
                            debug amm_ask_price => _88;
                            let _99: u64;
                            let _103: u64;
                            let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _114: u64;
                            scope 38 {
                                debug best_bid_estimate => _99;
                                let _124: u64;
                                let _128: u64;
                                let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _139: u64;
                                scope 44 {
                                    debug best_ask_estimate => _124;
                                    let _154: u64;
                                    let _155: u64;
                                    let _158: controller::position::PositionDirection;
                                    scope 54 {
                                        debug bid_price => _154;
                                        debug ask_price => _155;
                                        let _185: error::ErrorCode;
                                        let _235: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _238: ();
                                        scope 56 {
                                            debug error_code => _185;
                                            let _192: std::string::String;
                                            let _211: std::string::String;
                                            let mut _242: &[&str; 5];
                                            let mut _243: &[&str; 2];
                                            scope 57 {
                                                debug res => _192;
                                            }
                                            scope 58 {
                                                debug res => _211;
                                            }
                                        }
                                        scope 59 {
                                            debug residual => _235;
                                            scope 60 {
                                            }
                                        }
                                        scope 61 {
                                            debug val => _238;
                                            scope 62 {
                                            }
                                        }
                                    }
                                    scope 55 {
                                        debug direction => _158;
                                    }
                                }
                                scope 45 {
                                    debug premium => _128;
                                    let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _152: u64;
                                    scope 50 {
                                        debug residual => _149;
                                        scope 51 {
                                        }
                                    }
                                    scope 52 {
                                        debug val => _152;
                                        scope 53 {
                                        }
                                    }
                                }
                                scope 46 {
                                    debug residual => _136;
                                    scope 47 {
                                    }
                                }
                                scope 48 {
                                    debug val => _139;
                                    scope 49 {
                                    }
                                }
                            }
                            scope 39 {
                                debug discount => _103;
                            }
                            scope 40 {
                                debug residual => _111;
                                scope 41 {
                                }
                            }
                            scope 42 {
                                debug val => _114;
                                scope 43 {
                                }
                            }
                        }
                        scope 34 {
                            debug residual => _95;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _98;
                            scope 37 {
                            }
                        }
                    }
                    scope 29 {
                        debug residual => _83;
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _86;
                        scope 32 {
                        }
                    }
                }
                scope 14 {
                    debug residual => _33;
                    scope 15 {
                    }
                }
                scope 16 {
                    debug val => _36;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug residual => _39;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug val => _42;
                    scope 21 {
                    }
                }
            }
            scope 12 {
                debug trade_price => _24;
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = ((*_1).63: u32);
        _6 = <u32 as Cast>::cast::<u64>(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_5 as Continue).0: u64);
        _4 = _12;
        StorageDead(_12);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = (((*_1).1: state::oracle::HistoricalOracleData).0: i64);
        _15 = <i64 as Cast>::cast::<u64>(move _16) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_11);
        _11 = _9;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_5);
        goto -> bb123;
    }

    bb7: {
        StorageDead(_16);
        _14 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: u64);
        _13 = _21;
        StorageDead(_21);
        StorageDead(_14);
        StorageLive(_22);
        _23 = discriminant(_2);
        switchInt(move _23) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb10: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_14);
        goto -> bb122;
    }

    bb12: {
        _22 = _13;
        goto -> bb14;
    }

    bb13: {
        StorageLive(_24);
        _24 = ((_2 as Some).0: u64);
        _22 = _24;
        StorageDead(_24);
        goto -> bb14;
    }

    bb14: {
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _22;
        _30 = <u64 as Cast>::cast::<i64>(move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_31);
        _29 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _30) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_30);
        _32 = discriminant(_29);
        switchInt(move _32) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_36);
        _36 = ((_29 as Continue).0: i64);
        _28 = _36;
        StorageDead(_36);
        StorageLive(_37);
        _37 = (((*_1).1: state::oracle::HistoricalOracleData).0: i64);
        _27 = <i64 as SafeMath>::safe_sub(move _28, move _37) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_33);
        _33 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_35);
        _35 = _33;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _35) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_35);
        StorageDead(_33);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb120;
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_28);
        _26 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _27) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_27);
        _38 = discriminant(_26);
        switchInt(move _38) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_42);
        _42 = ((_26 as Continue).0: i64);
        _25 = _42;
        StorageDead(_42);
        StorageDead(_29);
        StorageDead(_26);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = (((*_1).1: state::oracle::HistoricalOracleData).0: i64);
        _46 = Gt(move _47, const 0_i64);
        switchInt(move _46) -> [0: bb26, otherwise: bb25];
    }

    bb23: {
        StorageLive(_39);
        _39 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb120;
    }

    bb25: {
        StorageDead(_47);
        StorageLive(_48);
        _48 = ();
        _45 = std::result::Result::<(), error::ErrorCode>::Ok(move _48);
        StorageDead(_48);
        goto -> bb34;
    }

    bb26: {
        StorageDead(_47);
        StorageLive(_49);
        _49 = error::ErrorCode::InvalidOracle;
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _244 = const _;
        _60 = &(*_244);
        _59 = &(*_60);
        _58 = move _59 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_59);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &_49;
        _67 = &(*_68);
        _66 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _67) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_67);
        _65 = [move _66];
        StorageDead(_66);
        _64 = &_65;
        _63 = &(*_64);
        _62 = move _63 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_63);
        _57 = Arguments::<'_>::new_v1(move _58, move _62) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_62);
        StorageDead(_58);
        _56 = format(move _57) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_57);
        StorageDead(_68);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_60);
        _55 = move _56;
        StorageDead(_56);
        _54 = &_55;
        _53 = &(*_54);
        _52 = <String as Deref>::deref(move _53) -> [return: bb30, unwind: bb127];
    }

    bb30: {
        _51 = &(*_52);
        StorageDead(_53);
        _50 = solana_program::log::sol_log(move _51) -> [return: bb31, unwind: bb127];
    }

    bb31: {
        StorageDead(_51);
        drop(_55) -> [return: bb32, unwind: bb128];
    }

    bb32: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_50);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        _71 = const "amm.historical_oracle_data.last_oracle_price <= 0";
        _70 = &(*_71);
        _69 = solana_program::log::sol_log(move _70) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_71);
        StorageDead(_69);
        StorageLive(_72);
        _72 = _49;
        _45 = std::result::Result::<(), error::ErrorCode>::Err(move _72);
        StorageDead(_72);
        StorageDead(_49);
        goto -> bb34;
    }

    bb34: {
        StorageDead(_46);
        _44 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _45) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_45);
        _73 = discriminant(_44);
        switchInt(move _73) -> [0: bb36, 1: bb37, otherwise: bb4];
    }

    bb36: {
        StorageLive(_77);
        _77 = ((_44 as Continue).0: ());
        _43 = _77;
        StorageDead(_77);
        StorageDead(_44);
        StorageDead(_43);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = &(*_1);
        _80 = AMM::reserve_price(move _81) -> [return: bb39, unwind continue];
    }

    bb37: {
        StorageLive(_74);
        _74 = ((_44 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_76);
        _76 = _74;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _76) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_76);
        StorageDead(_74);
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb121;
    }

    bb39: {
        StorageDead(_81);
        _79 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _80) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_80);
        _82 = discriminant(_79);
        switchInt(move _82) -> [0: bb41, 1: bb42, otherwise: bb4];
    }

    bb41: {
        StorageLive(_86);
        _86 = ((_79 as Continue).0: u64);
        _78 = _86;
        StorageDead(_86);
        StorageDead(_79);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        _92 = &(*_1);
        StorageLive(_93);
        _93 = _78;
        _91 = AMM::bid_ask_price(move _92, move _93) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_83);
        _83 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_85);
        StorageDead(_83);
        StorageDead(_79);
        goto -> bb119;
    }

    bb44: {
        StorageDead(_93);
        StorageDead(_92);
        _90 = <std::result::Result<(u64, u64), error::ErrorCode> as Try>::branch(move _91) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_91);
        _94 = discriminant(_90);
        switchInt(move _94) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_98);
        _98 = ((_90 as Continue).0: (u64, u64));
        _89 = _98;
        StorageDead(_98);
        StorageLive(_87);
        _87 = (_89.0: u64);
        StorageLive(_88);
        _88 = (_89.1: u64);
        StorageDead(_90);
        StorageDead(_89);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = _25;
        _101 = Gt(move _102, const 0_i64);
        switchInt(move _101) -> [0: bb50, otherwise: bb49];
    }

    bb47: {
        StorageLive(_95);
        _95 = ((_90 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_97);
        StorageDead(_95);
        StorageDead(_90);
        StorageDead(_89);
        goto -> bb119;
    }

    bb49: {
        StorageDead(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _4;
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _109 = ((*_1).66: u32);
        _108 = <u32 as Cast>::cast::<u64>(move _109) -> [return: bb51, unwind continue];
    }

    bb50: {
        StorageDead(_102);
        _100 = _22;
        goto -> bb62;
    }

    bb51: {
        StorageDead(_109);
        _107 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _108) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_108);
        _110 = discriminant(_107);
        switchInt(move _110) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_114);
        _114 = ((_107 as Continue).0: u64);
        _106 = _114;
        StorageDead(_114);
        _115 = Eq(const 2_u64, const 0_u64);
        assert(!move _115, "attempt to divide `{}` by zero", _106) -> [success: bb56, unwind continue];
    }

    bb54: {
        StorageLive(_111);
        _111 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_107);
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        goto -> bb118;
    }

    bb56: {
        _105 = Div(move _106, const 2_u64);
        StorageDead(_106);
        _103 = std::cmp::min::<u64>(move _104, move _105) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_107);
        StorageLive(_116);
        StorageLive(_117);
        _117 = _13;
        StorageLive(_118);
        StorageLive(_119);
        _119 = _103;
        StorageLive(_120);
        StorageLive(_121);
        _121 = _25;
        _120 = core::num::<impl i64>::unsigned_abs(move _121) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_121);
        _118 = <u64 as Ord>::min(move _119, move _120) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_120);
        StorageDead(_119);
        _116 = core::num::<impl u64>::saturating_sub(move _117, move _118) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_122);
        _122 = ((*_1).53: u64);
        _100 = <u64 as Ord>::max(move _116, move _122) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_103);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_101);
        StorageLive(_123);
        _123 = _87;
        _99 = <u64 as Ord>::max(move _100, move _123) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_123);
        StorageDead(_100);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = _25;
        _126 = Lt(move _127, const 0_i64);
        switchInt(move _126) -> [0: bb79, otherwise: bb64];
    }

    bb64: {
        StorageDead(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = _4;
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = ((*_1).65: u32);
        _133 = <u32 as Cast>::cast::<u64>(move _134) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_134);
        _132 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _133) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_133);
        _135 = discriminant(_132);
        switchInt(move _135) -> [0: bb67, 1: bb68, otherwise: bb4];
    }

    bb67: {
        StorageLive(_139);
        _139 = ((_132 as Continue).0: u64);
        _131 = _139;
        StorageDead(_139);
        _140 = Eq(const 2_u64, const 0_u64);
        assert(!move _140, "attempt to divide `{}` by zero", _131) -> [success: bb70, unwind continue];
    }

    bb68: {
        StorageLive(_136);
        _136 = ((_132 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb69, unwind continue];
    }

    bb69: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_132);
        StorageDead(_128);
        goto -> bb116;
    }

    bb70: {
        _130 = Div(move _131, const 2_u64);
        StorageDead(_131);
        _128 = std::cmp::min::<u64>(move _129, move _130) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_132);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = _13;
        StorageLive(_144);
        StorageLive(_145);
        _145 = _128;
        StorageLive(_146);
        StorageLive(_147);
        _147 = _25;
        _146 = core::num::<impl i64>::unsigned_abs(move _147) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_147);
        _144 = <u64 as Ord>::min(move _145, move _146) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_146);
        StorageDead(_145);
        _142 = <u64 as SafeMath>::safe_add(move _143, move _144) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_144);
        StorageDead(_143);
        _141 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _142) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_142);
        _148 = discriminant(_141);
        switchInt(move _148) -> [0: bb76, 1: bb77, otherwise: bb4];
    }

    bb76: {
        StorageLive(_152);
        _152 = ((_141 as Continue).0: u64);
        _125 = _152;
        StorageDead(_152);
        StorageDead(_128);
        StorageDead(_141);
        goto -> bb80;
    }

    bb77: {
        StorageLive(_149);
        _149 = ((_141 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_128);
        StorageDead(_141);
        goto -> bb116;
    }

    bb79: {
        StorageDead(_127);
        _125 = _22;
        goto -> bb80;
    }

    bb80: {
        StorageDead(_126);
        StorageLive(_153);
        _153 = _88;
        _124 = <u64 as Ord>::min(move _125, move _153) -> [return: bb81, unwind continue];
    }

    bb81: {
        StorageDead(_153);
        StorageDead(_125);
        StorageLive(_156);
        _157 = discriminant(_3);
        switchInt(move _157) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = _22;
        StorageLive(_171);
        _171 = _87;
        _169 = <u64 as Ord>::max(move _170, move _171) -> [return: bb89, unwind continue];
    }

    bb83: {
        StorageLive(_158);
        _158 = ((_3 as Some).0: controller::position::PositionDirection);
        _159 = discriminant(_158);
        switchInt(move _159) -> [0: bb85, 1: bb84, otherwise: bb4];
    }

    bb84: {
        StorageLive(_164);
        StorageLive(_165);
        _165 = _22;
        StorageLive(_166);
        _166 = _124;
        _164 = <u64 as Ord>::min(move _165, move _166) -> [return: bb87, unwind continue];
    }

    bb85: {
        StorageLive(_160);
        _160 = _99;
        StorageLive(_161);
        StorageLive(_162);
        _162 = _22;
        StorageLive(_163);
        _163 = _99;
        _161 = <u64 as Ord>::max(move _162, move _163) -> [return: bb86, unwind continue];
    }

    bb86: {
        StorageDead(_163);
        StorageDead(_162);
        _156 = (move _160, move _161);
        StorageDead(_161);
        StorageDead(_160);
        goto -> bb88;
    }

    bb87: {
        StorageDead(_166);
        StorageDead(_165);
        StorageLive(_167);
        _167 = _124;
        _156 = (move _164, move _167);
        StorageDead(_167);
        StorageDead(_164);
        goto -> bb88;
    }

    bb88: {
        StorageDead(_158);
        goto -> bb93;
    }

    bb89: {
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_172);
        _172 = _88;
        _168 = <u64 as Ord>::min(move _169, move _172) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_172);
        StorageDead(_169);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = _22;
        StorageLive(_176);
        _176 = _87;
        _174 = <u64 as Ord>::max(move _175, move _176) -> [return: bb91, unwind continue];
    }

    bb91: {
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_177);
        _177 = _88;
        _173 = <u64 as Ord>::min(move _174, move _177) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_177);
        StorageDead(_174);
        _156 = (move _168, move _173);
        StorageDead(_173);
        StorageDead(_168);
        goto -> bb93;
    }

    bb93: {
        StorageLive(_154);
        _154 = (_156.0: u64);
        StorageLive(_155);
        _155 = (_156.1: u64);
        StorageDead(_156);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _154;
        StorageLive(_183);
        _183 = _155;
        _181 = Le(move _182, move _183);
        switchInt(move _181) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_184);
        _184 = ();
        _180 = std::result::Result::<(), error::ErrorCode>::Ok(move _184);
        StorageDead(_184);
        goto -> bb111;
    }

    bb95: {
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_185);
        _185 = error::ErrorCode::InvalidMarkTwapUpdateDetected;
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _243 = const _;
        _196 = &(*_243);
        _195 = &(*_196);
        _194 = move _195 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_195);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _204 = &_185;
        _203 = &(*_204);
        _202 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _203) -> [return: bb96, unwind continue];
    }

    bb96: {
        StorageDead(_203);
        _201 = [move _202];
        StorageDead(_202);
        _200 = &_201;
        _199 = &(*_200);
        _198 = move _199 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_199);
        _193 = Arguments::<'_>::new_v1(move _194, move _198) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_198);
        StorageDead(_194);
        _192 = format(move _193) -> [return: bb98, unwind continue];
    }

    bb98: {
        StorageDead(_193);
        StorageDead(_204);
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_196);
        _191 = move _192;
        StorageDead(_192);
        _190 = &_191;
        _189 = &(*_190);
        _188 = <String as Deref>::deref(move _189) -> [return: bb99, unwind: bb126];
    }

    bb99: {
        _187 = &(*_188);
        StorageDead(_189);
        _186 = solana_program::log::sol_log(move _187) -> [return: bb100, unwind: bb126];
    }

    bb100: {
        StorageDead(_187);
        drop(_191) -> [return: bb101, unwind: bb128];
    }

    bb101: {
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_188);
        StorageDead(_186);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _242 = const _;
        _215 = &(*_242);
        _214 = &(*_215);
        _213 = move _214 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_214);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_99;
        _222 = &(*_223);
        _221 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _222) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_222);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = &_154;
        _225 = &(*_226);
        _224 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _225) -> [return: bb103, unwind continue];
    }

    bb103: {
        StorageDead(_225);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = &_155;
        _228 = &(*_229);
        _227 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _228) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_228);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &_124;
        _231 = &(*_232);
        _230 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _231) -> [return: bb105, unwind continue];
    }

    bb105: {
        StorageDead(_231);
        _220 = [move _221, move _224, move _227, move _230];
        StorageDead(_230);
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_221);
        _219 = &_220;
        _218 = &(*_219);
        _217 = move _218 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_218);
        _212 = Arguments::<'_>::new_v1(move _213, move _217) -> [return: bb106, unwind continue];
    }

    bb106: {
        StorageDead(_217);
        StorageDead(_213);
        _211 = format(move _212) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_212);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_223);
        StorageDead(_220);
        StorageDead(_219);
        StorageDead(_215);
        _210 = move _211;
        StorageDead(_211);
        _209 = &_210;
        _208 = &(*_209);
        _207 = <String as Deref>::deref(move _208) -> [return: bb108, unwind: bb125];
    }

    bb108: {
        _206 = &(*_207);
        StorageDead(_208);
        _205 = solana_program::log::sol_log(move _206) -> [return: bb109, unwind: bb125];
    }

    bb109: {
        StorageDead(_206);
        drop(_210) -> [return: bb110, unwind: bb128];
    }

    bb110: {
        StorageDead(_210);
        StorageDead(_209);
        StorageDead(_207);
        StorageDead(_205);
        StorageLive(_233);
        _233 = _185;
        _180 = std::result::Result::<(), error::ErrorCode>::Err(move _233);
        StorageDead(_233);
        StorageDead(_185);
        goto -> bb111;
    }

    bb111: {
        StorageDead(_181);
        _179 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _180) -> [return: bb112, unwind continue];
    }

    bb112: {
        StorageDead(_180);
        _234 = discriminant(_179);
        switchInt(move _234) -> [0: bb113, 1: bb114, otherwise: bb4];
    }

    bb113: {
        StorageLive(_238);
        _238 = ((_179 as Continue).0: ());
        _178 = _238;
        StorageDead(_238);
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_239);
        StorageLive(_240);
        _240 = _154;
        StorageLive(_241);
        _241 = _155;
        _239 = (move _240, move _241);
        StorageDead(_241);
        StorageDead(_240);
        _0 = std::result::Result::<(u64, u64), error::ErrorCode>::Ok(move _239);
        StorageDead(_239);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_124);
        StorageDead(_99);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_78);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_13);
        StorageDead(_4);
        goto -> bb124;
    }

    bb114: {
        StorageLive(_235);
        _235 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_237);
        _237 = _235;
        _0 = <std::result::Result<(u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _237) -> [return: bb115, unwind continue];
    }

    bb115: {
        StorageDead(_237);
        StorageDead(_235);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_155);
        StorageDead(_154);
        goto -> bb117;
    }

    bb116: {
        StorageDead(_126);
        StorageDead(_125);
        goto -> bb117;
    }

    bb117: {
        StorageDead(_124);
        goto -> bb118;
    }

    bb118: {
        StorageDead(_99);
        StorageDead(_88);
        StorageDead(_87);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_78);
        goto -> bb121;
    }

    bb120: {
        StorageDead(_29);
        StorageDead(_26);
        goto -> bb121;
    }

    bb121: {
        StorageDead(_25);
        StorageDead(_22);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_13);
        goto -> bb123;
    }

    bb123: {
        StorageDead(_4);
        goto -> bb124;
    }

    bb124: {
        return;
    }

    bb125 (cleanup): {
        drop(_210) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb126 (cleanup): {
        drop(_191) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb127 (cleanup): {
        drop(_55) -> [return: bb128, unwind terminate(cleanup)];
    }

    bb128 (cleanup): {
        resume;
    }
}
