// MIR for `calculate_rebase_info` after PreCodegen

fn calculate_rebase_info(_1: u128, _2: u64) -> std::result::Result<(u32, u128), error::ErrorCode> {
    debug total_if_shares => _1;
    debug insurance_fund_vault_balance => _2;
    let mut _0: std::result::Result<(u32, u128), error::ErrorCode>;
    let _3: u128;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _5: std::result::Result<u128, error::ErrorCode>;
    let mut _6: u128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _8: std::result::Result<u128, error::ErrorCode>;
    let mut _9: u128;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: u128;
    let mut _15: u128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _17: std::result::Result<u128, error::ErrorCode>;
    let mut _18: u64;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _23: u128;
    let mut _24: isize;
    let _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _26: !;
    let mut _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _28: u128;
    let mut _30: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _31: std::result::Result<u32, error::ErrorCode>;
    let mut _32: u128;
    let mut _33: u128;
    let mut _34: isize;
    let mut _36: !;
    let mut _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: u32;
    let mut _41: (u32, u128);
    let mut _42: u32;
    let mut _43: u128;
    scope 1 {
        debug rebase_divisor_full => _3;
        let _29: u32;
        let _35: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _38: u32;
        scope 14 {
            debug expo_diff => _29;
            let _39: u128;
            scope 19 {
                debug rebase_divisor => _39;
            }
        }
        scope 15 {
            debug residual => _35;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _38;
            scope 18 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _20;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _23;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _25;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _28;
        scope 13 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _1;
        _8 = <u128 as SafeMath>::safe_div(move _9, const 10_u128) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: u128);
        _6 = _14;
        StorageDead(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _2;
        _17 = <u64 as Cast>::cast::<u128>(move _18) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<(u32, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb25;
    }

    bb7: {
        StorageDead(_18);
        _16 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        _19 = discriminant(_16);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = ((_16 as Continue).0: u128);
        _15 = _23;
        StorageDead(_23);
        _5 = <u128 as SafeMath>::safe_div(move _6, move _15) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_22);
        _22 = _20;
        _0 = <std::result::Result<(u32, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_15);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb24;
    }

    bb12: {
        StorageDead(_15);
        StorageDead(_6);
        _4 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _5) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_5);
        _24 = discriminant(_4);
        switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_28);
        _28 = ((_4 as Continue).0: u128);
        _3 = _28;
        StorageDead(_28);
        StorageDead(_16);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = _3;
        _32 = log10_iter(move _33) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_25);
        _25 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_27);
        _27 = _25;
        _0 = <std::result::Result<(u32, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _27) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_27);
        StorageDead(_25);
        goto -> bb24;
    }

    bb17: {
        StorageDead(_33);
        _31 = <u128 as Cast>::cast::<u32>(move _32) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_32);
        _30 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _31) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_31);
        _34 = discriminant(_30);
        switchInt(move _34) -> [0: bb20, 1: bb21, otherwise: bb4];
    }

    bb20: {
        StorageLive(_38);
        _38 = ((_30 as Continue).0: u32);
        _29 = _38;
        StorageDead(_38);
        StorageDead(_30);
        StorageLive(_39);
        StorageLive(_40);
        _40 = _29;
        _39 = core::num::<impl u128>::pow(const 10_u128, move _40) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_35);
        _35 = ((_30 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_37);
        _37 = _35;
        _0 = <std::result::Result<(u32, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _37) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_30);
        StorageDead(_29);
        goto -> bb26;
    }

    bb23: {
        StorageDead(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = _29;
        StorageLive(_43);
        _43 = _39;
        _41 = (move _42, move _43);
        StorageDead(_43);
        StorageDead(_42);
        _0 = std::result::Result::<(u32, u128), error::ErrorCode>::Ok(move _41);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_29);
        StorageDead(_3);
        goto -> bb27;
    }

    bb24: {
        StorageDead(_16);
        goto -> bb25;
    }

    bb25: {
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_3);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}
