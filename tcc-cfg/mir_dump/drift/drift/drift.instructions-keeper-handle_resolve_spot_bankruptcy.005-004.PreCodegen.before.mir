// MIR for `keeper::handle_resolve_spot_bankruptcy` before PreCodegen

fn keeper::handle_resolve_spot_bankruptcy(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::ResolveBankruptcy<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: ();
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _5: std::result::Result<(), anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _7: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: ();
    let _13: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _16: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _24: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _26: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _27: ();
    let mut _28: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _29: std::result::Result<(), error::ErrorCode>;
    let mut _30: bool;
    let mut _31: &anchor_lang::prelude::Pubkey;
    let mut _32: &anchor_lang::prelude::Pubkey;
    let mut _33: ();
    let _35: ();
    let mut _36: &str;
    let _37: &str;
    let mut _38: &std::string::String;
    let _39: &std::string::String;
    let _40: std::string::String;
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[&str; 2];
    let _45: &[&str; 2];
    let _46: [&str; 2];
    let mut _47: &[core::fmt::rt::Argument<'_>];
    let mut _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: &[core::fmt::rt::Argument<'_>; 1];
    let _50: [core::fmt::rt::Argument<'_>; 1];
    let mut _51: core::fmt::rt::Argument<'_>;
    let mut _52: &error::ErrorCode;
    let _53: &error::ErrorCode;
    let mut _54: error::ErrorCode;
    let mut _55: isize;
    let mut _57: !;
    let mut _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _61: std::cell::RefMut<'_, state::user::User>;
    let mut _62: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _63: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _64: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _65: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _66: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: std::cell::RefMut<'_, state::user::User>;
    let mut _74: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _75: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _76: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _77: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _78: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _79: isize;
    let mut _81: !;
    let mut _82: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _85: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _86: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _87: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _91: instructions::optional_accounts::AccountMaps<'_>;
    let mut _92: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _93: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _94: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _95: &std::collections::BTreeSet<u16>;
    let _96: &std::collections::BTreeSet<u16>;
    let _97: std::collections::BTreeSet<u16>;
    let mut _98: &std::collections::BTreeSet<u16>;
    let _99: &std::collections::BTreeSet<u16>;
    let _100: std::collections::BTreeSet<u16>;
    let mut _101: u16;
    let mut _102: u64;
    let mut _103: std::option::Option<state::state::OracleGuardRails>;
    let mut _104: state::state::OracleGuardRails;
    let mut _105: &state::state::State;
    let mut _106: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>>;
    let mut _114: std::result::Result<std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode>;
    let mut _115: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _116: isize;
    let mut _118: !;
    let mut _119: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _121: ();
    let mut _123: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _125: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _126: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _127: &u16;
    let _128: &u16;
    let mut _129: isize;
    let mut _131: !;
    let mut _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: &std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _137: bool;
    let mut _138: &state::spot_market::SpotMarket;
    let _139: &state::spot_market::SpotMarket;
    let mut _140: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _141: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _142: ();
    let mut _143: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _144: std::result::Result<(), anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _146: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _147: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _148: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _149: &mut state::spot_market::SpotMarket;
    let mut _150: &mut state::spot_market::SpotMarket;
    let mut _151: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _152: i64;
    let mut _153: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _154: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _155: &anchor_lang::prelude::AccountInfo<'_>;
    let _156: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _157: &state::state::State;
    let _158: &state::state::State;
    let mut _159: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _160: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _161: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _162: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _163: isize;
    let mut _165: !;
    let mut _166: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _168: ();
    let mut _169: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _170: std::result::Result<(), anchor_lang::error::Error>;
    let mut _171: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _172: isize;
    let mut _174: !;
    let mut _175: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _177: ();
    let mut _178: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _179: std::result::Result<(), anchor_lang::error::Error>;
    let mut _180: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _186: i64;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _188: std::result::Result<i64, error::ErrorCode>;
    let mut _189: &state::spot_market::SpotMarket;
    let _190: &state::spot_market::SpotMarket;
    let mut _191: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _192: u64;
    let mut _193: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _194: &anchor_spl::token_interface::TokenAccount;
    let _195: &anchor_spl::token_interface::TokenAccount;
    let mut _196: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _197: isize;
    let mut _199: !;
    let mut _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _203: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _204: std::result::Result<u64, error::ErrorCode>;
    let mut _205: u16;
    let mut _206: &mut state::user::User;
    let mut _207: &mut state::user::User;
    let mut _208: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _209: &anchor_lang::prelude::Pubkey;
    let _210: &anchor_lang::prelude::Pubkey;
    let mut _211: &mut state::user::User;
    let mut _212: &mut state::user::User;
    let mut _213: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _214: &anchor_lang::prelude::Pubkey;
    let _215: &anchor_lang::prelude::Pubkey;
    let mut _216: &state::perp_market_map::PerpMarketMap<'_>;
    let _217: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _218: &state::spot_market_map::SpotMarketMap<'_>;
    let _219: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _220: &mut state::oracle_map::OracleMap<'_>;
    let mut _221: &mut state::oracle_map::OracleMap<'_>;
    let mut _222: i64;
    let mut _223: u64;
    let mut _224: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _225: &anchor_spl::token_interface::TokenAccount;
    let _226: &anchor_spl::token_interface::TokenAccount;
    let mut _227: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _228: isize;
    let mut _230: !;
    let mut _231: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _233: ();
    let mut _234: bool;
    let mut _235: u64;
    let _237: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _238: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _239: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _240: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _241: &u16;
    let _242: &u16;
    let mut _243: isize;
    let mut _245: !;
    let mut _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _249: &std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _251: bool;
    let mut _252: &state::spot_market::SpotMarket;
    let _253: &state::spot_market::SpotMarket;
    let mut _254: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _255: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let _256: ();
    let mut _257: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _258: std::result::Result<(), anchor_lang::error::Error>;
    let mut _259: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let _260: &anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _261: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _262: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _263: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _264: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _265: &anchor_lang::prelude::AccountInfo<'_>;
    let _266: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _267: u8;
    let mut _268: &state::state::State;
    let mut _269: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _270: u64;
    let mut _271: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let _272: &std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
    let mut _273: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
    let mut _274: isize;
    let mut _276: !;
    let mut _277: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _279: ();
    let mut _280: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _281: std::result::Result<(), error::ErrorCode>;
    let mut _282: bool;
    let mut _283: u64;
    let mut _284: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _285: &anchor_spl::token_interface::TokenAccount;
    let _286: &anchor_spl::token_interface::TokenAccount;
    let mut _287: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _288: ();
    let _290: ();
    let mut _291: &str;
    let _292: &str;
    let mut _293: &std::string::String;
    let _294: &std::string::String;
    let _295: std::string::String;
    let mut _297: std::fmt::Arguments<'_>;
    let mut _298: &[&str];
    let mut _299: &[&str; 2];
    let _300: &[&str; 2];
    let _301: [&str; 2];
    let mut _302: &[core::fmt::rt::Argument<'_>];
    let mut _303: &[core::fmt::rt::Argument<'_>; 1];
    let _304: &[core::fmt::rt::Argument<'_>; 1];
    let _305: [core::fmt::rt::Argument<'_>; 1];
    let mut _306: core::fmt::rt::Argument<'_>;
    let mut _307: &error::ErrorCode;
    let _308: &error::ErrorCode;
    let _309: ();
    let mut _310: &str;
    let _311: &str;
    let mut _312: error::ErrorCode;
    let mut _313: isize;
    let mut _315: !;
    let mut _316: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _318: ();
    let mut _320: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _321: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::spot_market::SpotMarket>>;
    let mut _322: std::result::Result<std::cell::RefMut<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _323: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _324: &u16;
    let _325: &u16;
    let mut _326: isize;
    let mut _328: !;
    let mut _329: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _331: ();
    let mut _332: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _333: std::result::Result<(), anchor_lang::error::Error>;
    let mut _334: &mut anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _335: isize;
    let mut _337: !;
    let mut _338: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _340: i64;
    let mut _341: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _342: std::result::Result<i64, error::ErrorCode>;
    let mut _343: &state::spot_market::SpotMarket;
    let _344: &state::spot_market::SpotMarket;
    let mut _345: &std::cell::RefMut<'_, state::spot_market::SpotMarket>;
    let mut _346: u64;
    let mut _347: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _348: &anchor_spl::token_interface::TokenAccount;
    let _349: &anchor_spl::token_interface::TokenAccount;
    let mut _350: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _351: isize;
    let mut _353: !;
    let mut _354: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _356: ();
    let mut _359: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _360: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _361: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _362: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _363: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _364: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _365: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _366: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _367: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _368: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _369: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _370: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _371: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _372: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _373: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _374: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _375: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _376: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _377: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _378: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _379: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _380: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _381: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _382: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _383: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _384: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _385: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _386: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _387: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _388: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _389: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _390: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _391: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _392: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _393: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _394: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _395: &mut instructions::keeper::ResolveBankruptcy<'_>;
    let mut _396: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: isize;
    let mut _408: isize;
    let mut _409: isize;
    let mut _410: isize;
    let mut _411: isize;
    let mut _412: isize;
    let mut _413: isize;
    let mut _414: isize;
    let mut _415: isize;
    let mut _416: isize;
    let mut _417: isize;
    let mut _418: isize;
    let mut _419: isize;
    let mut _420: isize;
    let mut _421: isize;
    let mut _422: isize;
    let mut _423: isize;
    let mut _424: isize;
    let mut _425: isize;
    let mut _426: isize;
    let mut _427: isize;
    let mut _428: isize;
    let mut _429: isize;
    let mut _430: isize;
    let mut _431: isize;
    let mut _432: isize;
    let mut _433: isize;
    let mut _434: isize;
    let mut _435: isize;
    let mut _436: isize;
    let mut _437: isize;
    let mut _438: isize;
    let mut _439: isize;
    let mut _440: isize;
    let mut _441: isize;
    let mut _442: isize;
    let mut _443: isize;
    let mut _444: isize;
    let mut _445: isize;
    let mut _446: isize;
    let mut _447: isize;
    let mut _448: isize;
    let mut _449: isize;
    let mut _450: isize;
    let mut _451: isize;
    let mut _452: isize;
    let mut _453: isize;
    let mut _454: isize;
    let mut _455: isize;
    let mut _456: isize;
    let mut _457: isize;
    let mut _458: isize;
    let mut _459: isize;
    let mut _460: isize;
    let mut _461: isize;
    let mut _462: isize;
    let mut _463: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _464: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _465: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _466: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _467: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _468: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _469: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _470: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _471: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _472: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _473: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _474: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _475: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _476: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _477: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    scope 1 {
        debug residual => _9;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _12;
        scope 4 {
        }
    }
    scope 5 {
        debug state => _13;
        let _14: anchor_lang::prelude::Clock;
        let _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _21: anchor_lang::prelude::Clock;
        scope 6 {
            debug clock => _14;
            let _22: i64;
            scope 11 {
                debug now => _22;
                let _23: anchor_lang::prelude::Pubkey;
                scope 12 {
                    debug user_key => _23;
                    let _25: anchor_lang::prelude::Pubkey;
                    scope 13 {
                        debug liquidator_key => _25;
                        let _34: error::ErrorCode;
                        let _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _59: ();
                        let _60: &mut std::cell::RefMut<'_, state::user::User>;
                        let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _71: std::cell::RefMut<'_, state::user::User>;
                        scope 14 {
                            debug error_code => _34;
                            let _41: std::string::String;
                            let mut _358: &[&str; 2];
                            scope 15 {
                                debug res => _41;
                            }
                        }
                        scope 16 {
                            debug residual => _56;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _59;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug user => _60;
                            let _72: &mut std::cell::RefMut<'_, state::user::User>;
                            let _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _83: std::cell::RefMut<'_, state::user::User>;
                            scope 25 {
                                debug liquidator => _72;
                                let _84: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                scope 30 {
                                    debug remaining_accounts_iter => _84;
                                    let _88: state::perp_market_map::PerpMarketMap<'_>;
                                    let _89: state::spot_market_map::SpotMarketMap<'_>;
                                    let mut _90: state::oracle_map::OracleMap<'_>;
                                    let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _111: instructions::optional_accounts::AccountMaps<'_>;
                                    scope 31 {
                                        debug perp_market_map => _88;
                                        debug spot_market_map => _89;
                                        debug oracle_map => _90;
                                        let _112: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                        let _117: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _120: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>;
                                        scope 36 {
                                            debug mint => _112;
                                            let _122: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                            let _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _133: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                            let _202: u64;
                                            let _229: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _232: u64;
                                            scope 41 {
                                                debug spot_market => _122;
                                                let mut _134: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                                scope 46 {
                                                    debug transfer_hook_remaining_accounts_iter => _134;
                                                    let _136: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
                                                    scope 47 {
                                                        debug remaining_accounts => _136;
                                                        let _164: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _167: ();
                                                        let _173: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _176: ();
                                                        let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _185: ();
                                                        let _198: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _201: i64;
                                                        scope 48 {
                                                            debug residual => _164;
                                                            scope 49 {
                                                            }
                                                        }
                                                        scope 50 {
                                                            debug val => _167;
                                                            scope 51 {
                                                            }
                                                        }
                                                        scope 52 {
                                                            debug residual => _173;
                                                            scope 53 {
                                                            }
                                                        }
                                                        scope 54 {
                                                            debug val => _176;
                                                            scope 55 {
                                                            }
                                                        }
                                                        scope 56 {
                                                            debug residual => _182;
                                                            scope 57 {
                                                            }
                                                        }
                                                        scope 58 {
                                                            debug val => _185;
                                                            scope 59 {
                                                            }
                                                        }
                                                        scope 60 {
                                                            debug residual => _198;
                                                            scope 61 {
                                                            }
                                                        }
                                                        scope 62 {
                                                            debug val => _201;
                                                            scope 63 {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 42 {
                                                debug residual => _130;
                                                scope 43 {
                                                }
                                            }
                                            scope 44 {
                                                debug val => _133;
                                                scope 45 {
                                                }
                                            }
                                            scope 64 {
                                                debug pay_from_insurance => _202;
                                                let _236: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                let _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _247: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                                let _319: &mut std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                let _327: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _330: std::cell::RefMut<'_, state::spot_market::SpotMarket>;
                                                scope 69 {
                                                    debug spot_market => _236;
                                                    let mut _248: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
                                                    scope 74 {
                                                        debug transfer_hook_remaining_accounts_iter => _248;
                                                        let _250: std::option::Option<&mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>;
                                                        scope 75 {
                                                            debug remaining_accounts => _250;
                                                            let _275: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _278: ();
                                                            let _289: error::ErrorCode;
                                                            let _314: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _317: ();
                                                            scope 76 {
                                                                debug residual => _275;
                                                                scope 77 {
                                                                }
                                                            }
                                                            scope 78 {
                                                                debug val => _278;
                                                                scope 79 {
                                                                }
                                                            }
                                                            scope 80 {
                                                                debug error_code => _289;
                                                                let _296: std::string::String;
                                                                let mut _357: &[&str; 2];
                                                                scope 81 {
                                                                    debug res => _296;
                                                                }
                                                            }
                                                            scope 82 {
                                                                debug residual => _314;
                                                                scope 83 {
                                                                }
                                                            }
                                                            scope 84 {
                                                                debug val => _317;
                                                                scope 85 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                scope 70 {
                                                    debug residual => _244;
                                                    scope 71 {
                                                    }
                                                }
                                                scope 72 {
                                                    debug val => _247;
                                                    scope 73 {
                                                    }
                                                }
                                                scope 86 {
                                                    debug spot_market => _319;
                                                    let _336: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _339: ();
                                                    let _352: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _355: i64;
                                                    scope 91 {
                                                        debug residual => _336;
                                                        scope 92 {
                                                        }
                                                    }
                                                    scope 93 {
                                                        debug val => _339;
                                                        scope 94 {
                                                        }
                                                    }
                                                    scope 95 {
                                                        debug residual => _352;
                                                        scope 96 {
                                                        }
                                                    }
                                                    scope 97 {
                                                        debug val => _355;
                                                        scope 98 {
                                                        }
                                                    }
                                                }
                                                scope 87 {
                                                    debug residual => _327;
                                                    scope 88 {
                                                    }
                                                }
                                                scope 89 {
                                                    debug val => _330;
                                                    scope 90 {
                                                    }
                                                }
                                            }
                                            scope 65 {
                                                debug residual => _229;
                                                scope 66 {
                                                }
                                            }
                                            scope 67 {
                                                debug val => _232;
                                                scope 68 {
                                                }
                                            }
                                        }
                                        scope 37 {
                                            debug residual => _117;
                                            scope 38 {
                                            }
                                        }
                                        scope 39 {
                                            debug val => _120;
                                            scope 40 {
                                            }
                                        }
                                    }
                                    scope 32 {
                                        debug residual => _108;
                                        scope 33 {
                                        }
                                    }
                                    scope 34 {
                                        debug val => _111;
                                        scope 35 {
                                        }
                                    }
                                }
                            }
                            scope 26 {
                                debug residual => _80;
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug val => _83;
                                scope 29 {
                                }
                            }
                        }
                        scope 21 {
                            debug residual => _68;
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug val => _71;
                            scope 24 {
                            }
                        }
                    }
                }
            }
        }
        scope 7 {
            debug residual => _18;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _21;
            scope 10 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _359 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _7 = &((*_359).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _360 = deref_copy (*_7);
        _463 = (((_360.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _6 = &(*_463);
        _5 = constraints::withdraw_not_paused(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb196];
    }

    bb2: {
        StorageDead(_5);
        _8 = discriminant(_4);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = ((_4 as Continue).0: ());
        _3 = _12;
        StorageDead(_12);
        _397 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_13);
        _361 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _13 = &((*_361).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb209];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _447 = discriminant(_4);
        StorageDead(_7);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb182;
    }

    bb7: {
        _15 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _16) -> [return: bb8, unwind: bb196];
    }

    bb8: {
        StorageDead(_16);
        _17 = discriminant(_15);
        switchInt(move _17) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_21);
        _21 = move ((_15 as Continue).0: anchor_lang::prelude::Clock);
        _14 = move _21;
        StorageDead(_21);
        _399 = discriminant(_15);
        StorageDead(_15);
        StorageLive(_22);
        _22 = (_14.4: i64);
        StorageLive(_23);
        StorageLive(_24);
        _362 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _24 = &((*_362).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _23 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _24) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_18);
        _18 = move ((_15 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_20);
        _20 = move _18;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _20) -> [return: bb11, unwind: bb208];
    }

    bb11: {
        StorageDead(_20);
        StorageDead(_18);
        _445 = discriminant(_15);
        StorageDead(_15);
        goto -> bb181;
    }

    bb12: {
        StorageDead(_24);
        StorageLive(_25);
        StorageLive(_26);
        _363 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _26 = &((*_363).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _25 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        _31 = &_23;
        StorageLive(_32);
        _32 = &_25;
        _30 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _31, move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _30) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_33);
        _33 = ();
        _29 = std::result::Result::<(), error::ErrorCode>::Ok(move _33);
        StorageDead(_33);
        goto -> bb23;
    }

    bb16: {
        StorageDead(_32);
        StorageDead(_31);
        StorageLive(_34);
        _34 = error::ErrorCode::UserCantLiquidateThemself;
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        _358 = const _;
        _45 = &(*_358);
        _44 = &(*_45);
        _43 = move _44 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_44);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_34;
        _52 = &(*_53);
        _51 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _52) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_52);
        _50 = [move _51];
        StorageDead(_51);
        _49 = &_50;
        _48 = &(*_49);
        _47 = move _48 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_48);
        _42 = Arguments::<'_>::new_v1(move _43, move _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_47);
        StorageDead(_43);
        _41 = format(move _42) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_49);
        StorageDead(_45);
        _40 = move _41;
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = <String as Deref>::deref(move _38) -> [return: bb20, unwind: bb195];
    }

    bb20: {
        _36 = &(*_37);
        StorageDead(_38);
        _35 = solana_program::log::sol_log(move _36) -> [return: bb21, unwind: bb195];
    }

    bb21: {
        StorageDead(_36);
        drop(_40) -> [return: bb22, unwind: bb196];
    }

    bb22: {
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_35);
        StorageLive(_54);
        _54 = _34;
        _29 = std::result::Result::<(), error::ErrorCode>::Err(move _54);
        StorageDead(_54);
        StorageDead(_34);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_30);
        _28 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _29) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_29);
        _55 = discriminant(_28);
        switchInt(move _55) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_59);
        _59 = ((_28 as Continue).0: ());
        _27 = _59;
        StorageDead(_59);
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _364 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _65 = &((*_364).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _64 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _65) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_56);
        _56 = ((_28 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_58);
        _58 = _56;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _58) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_58);
        StorageDead(_56);
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb180;
    }

    bb28: {
        StorageDead(_65);
        StorageLive(_66);
        _66 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _63 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _64, move _66) -> [return: bb29, unwind: bb196];
    }

    bb29: {
        StorageDead(_66);
        StorageDead(_64);
        _62 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _63) -> [return: bb30, unwind: bb196];
    }

    bb30: {
        StorageDead(_63);
        _67 = discriminant(_62);
        switchInt(move _67) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_71);
        _71 = move ((_62 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _61 = move _71;
        StorageDead(_71);
        _60 = &mut _61;
        _403 = discriminant(_62);
        StorageDead(_62);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _365 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _77 = &((*_365).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _76 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _77) -> [return: bb34, unwind: bb194];
    }

    bb32: {
        StorageLive(_68);
        _68 = ((_62 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb33, unwind: bb207];
    }

    bb33: {
        StorageDead(_70);
        StorageDead(_68);
        _401 = discriminant(_62);
        StorageDead(_62);
        goto -> bb179;
    }

    bb34: {
        StorageDead(_77);
        StorageLive(_78);
        _78 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _75 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _76, move _78) -> [return: bb35, unwind: bb194];
    }

    bb35: {
        StorageDead(_78);
        StorageDead(_76);
        _74 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _75) -> [return: bb36, unwind: bb194];
    }

    bb36: {
        StorageDead(_75);
        _79 = discriminant(_74);
        switchInt(move _79) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_83);
        _83 = move ((_74 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _73 = move _83;
        StorageDead(_83);
        _72 = &mut _73;
        _407 = discriminant(_74);
        StorageDead(_74);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        _366 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _87 = &(*_366);
        _86 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _87) -> [return: bb40, unwind: bb193];
    }

    bb38: {
        StorageLive(_80);
        _80 = ((_74 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_82);
        _82 = _80;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _82) -> [return: bb39, unwind: bb206];
    }

    bb39: {
        StorageDead(_82);
        StorageDead(_80);
        _405 = discriminant(_74);
        StorageDead(_74);
        goto -> bb178;
    }

    bb40: {
        StorageDead(_87);
        _85 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _86) -> [return: bb41, unwind: bb193];
    }

    bb41: {
        StorageDead(_86);
        _84 = &mut _85;
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &mut (*_84);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = BTreeSet::<u16>::new() -> [return: bb42, unwind: bb193];
    }

    bb42: {
        _96 = &_97;
        _95 = &(*_96);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _2;
        _100 = get_writable_spot_market_set(move _101) -> [return: bb43, unwind: bb192];
    }

    bb43: {
        StorageDead(_101);
        _99 = &_100;
        _98 = &(*_99);
        StorageLive(_102);
        _102 = (_14.0: u64);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        _367 = deref_copy (*_13);
        _464 = (((_367.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _106 = &(*_464);
        _105 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _106) -> [return: bb44, unwind: bb191];
    }

    bb44: {
        StorageDead(_106);
        _104 = ((*_105).7: state::state::OracleGuardRails);
        _103 = Option::<state::state::OracleGuardRails>::Some(move _104);
        StorageDead(_104);
        _93 = load_maps(move _94, move _95, move _98, move _102, move _103) -> [return: bb45, unwind: bb191];
    }

    bb45: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_98);
        StorageDead(_95);
        StorageDead(_94);
        _92 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _93) -> [return: bb46, unwind: bb191];
    }

    bb46: {
        StorageDead(_93);
        _107 = discriminant(_92);
        switchInt(move _107) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_111);
        _111 = move ((_92 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _91 = move _111;
        StorageDead(_111);
        StorageLive(_88);
        _88 = move (_91.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_89);
        _89 = move (_91.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_90);
        _90 = move (_91.2: state::oracle_map::OracleMap<'_>);
        _411 = discriminant(_92);
        StorageDead(_105);
        drop(_100) -> [return: bb50, unwind: bb187];
    }

    bb48: {
        StorageLive(_108);
        _108 = ((_92 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb49, unwind: bb205];
    }

    bb49: {
        StorageDead(_110);
        StorageDead(_108);
        _409 = discriminant(_92);
        StorageDead(_105);
        drop(_100) -> [return: bb175, unwind: bb192];
    }

    bb50: {
        StorageDead(_100);
        StorageDead(_99);
        drop(_97) -> [return: bb51, unwind: bb188];
    }

    bb51: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_91);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &mut (*_84);
        _114 = get_token_mint(move _115) -> [return: bb52, unwind: bb188];
    }

    bb52: {
        StorageDead(_115);
        _113 = <std::result::Result<Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>, error::ErrorCode> as Try>::branch(move _114) -> [return: bb53, unwind: bb188];
    }

    bb53: {
        StorageDead(_114);
        _116 = discriminant(_113);
        switchInt(move _116) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_120);
        _120 = move ((_113 as Continue).0: std::option::Option<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::Mint>>);
        _112 = move _120;
        StorageDead(_120);
        StorageDead(_113);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_89;
        StorageLive(_127);
        StorageLive(_128);
        _128 = &_2;
        _127 = &(*_128);
        _125 = SpotMarketMap::<'_>::get_ref_mut(move _126, move _127) -> [return: bb57, unwind: bb188];
    }

    bb55: {
        StorageLive(_117);
        _117 = ((_113 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_119);
        _119 = _117;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _119) -> [return: bb56, unwind: bb188];
    }

    bb56: {
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_113);
        goto -> bb171;
    }

    bb57: {
        StorageDead(_127);
        StorageDead(_126);
        _124 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _125) -> [return: bb58, unwind: bb188];
    }

    bb58: {
        StorageDead(_125);
        _129 = discriminant(_124);
        switchInt(move _129) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_133);
        _133 = move ((_124 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _123 = move _133;
        StorageDead(_133);
        _122 = &mut _123;
        _415 = discriminant(_124);
        StorageDead(_128);
        StorageDead(_124);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &(*_84);
        _134 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Clone>::clone(move _135) -> [return: bb62, unwind: bb186];
    }

    bb60: {
        StorageLive(_130);
        _130 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_132);
        _132 = _130;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _132) -> [return: bb61, unwind: bb204];
    }

    bb61: {
        StorageDead(_132);
        StorageDead(_130);
        _413 = discriminant(_124);
        StorageDead(_128);
        StorageDead(_124);
        goto -> bb170;
    }

    bb62: {
        StorageDead(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = &(*_122);
        _139 = <RefMut<'_, SpotMarket> as Deref>::deref(move _140) -> [return: bb63, unwind: bb186];
    }

    bb63: {
        _138 = &(*_139);
        StorageDead(_140);
        _137 = SpotMarket::has_transfer_hook(move _138) -> [return: bb64, unwind: bb186];
    }

    bb64: {
        switchInt(move _137) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        StorageDead(_139);
        StorageDead(_138);
        StorageLive(_141);
        _141 = &mut _134;
        _136 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _141);
        StorageDead(_141);
        goto -> bb67;
    }

    bb66: {
        StorageDead(_139);
        StorageDead(_138);
        _136 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb67;
    }

    bb67: {
        StorageDead(_137);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _368 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _146 = &((*_368).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _369 = deref_copy (*_146);
        _465 = (((_369.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _145 = &(*_465);
        StorageLive(_147);
        StorageLive(_148);
        _370 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _148 = &((*_370).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _371 = deref_copy (*_148);
        _466 = (((_371.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _147 = &(*_466);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &mut (*_122);
        _150 = <RefMut<'_, SpotMarket> as DerefMut>::deref_mut(move _151) -> [return: bb68, unwind: bb186];
    }

    bb68: {
        _149 = &mut (*_150);
        StorageDead(_151);
        StorageLive(_152);
        _152 = _22;
        StorageLive(_153);
        StorageLive(_154);
        _372 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _154 = &((*_372).9: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _153 = &(*_154);
        StorageLive(_155);
        StorageLive(_156);
        _373 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _156 = &((*_373).8: anchor_lang::prelude::AccountInfo<'_>);
        _155 = &(*_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        _374 = deref_copy (*_13);
        _467 = (((_374.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _159 = &(*_467);
        _158 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _159) -> [return: bb69, unwind: bb186];
    }

    bb69: {
        _157 = &(*_158);
        StorageDead(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &_112;
        _160 = &(*_161);
        StorageLive(_162);
        _162 = move _136;
        _144 = attempt_settle_revenue_to_insurance_fund(move _145, move _147, move _149, move _152, move _153, move _155, move _157, move _160, move _162) -> [return: bb70, unwind: bb186];
    }

    bb70: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_147);
        StorageDead(_145);
        _143 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _144) -> [return: bb71, unwind: bb186];
    }

    bb71: {
        StorageDead(_144);
        _163 = discriminant(_143);
        switchInt(move _163) -> [0: bb72, 1: bb73, otherwise: bb4];
    }

    bb72: {
        StorageLive(_167);
        _167 = ((_143 as Continue).0: ());
        _142 = _167;
        StorageDead(_167);
        _417 = discriminant(_143);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _375 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _376 = deref_copy ((*_375).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _468 = (((_376.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _171 = &mut (*_468);
        _170 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _171) -> [return: bb75, unwind: bb186];
    }

    bb73: {
        StorageLive(_164);
        _164 = move ((_143 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_166);
        _166 = move _164;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _166) -> [return: bb74, unwind: bb203];
    }

    bb74: {
        StorageDead(_166);
        StorageDead(_164);
        _443 = discriminant(_143);
        StorageDead(_161);
        StorageDead(_158);
        StorageDead(_156);
        StorageDead(_154);
        StorageDead(_150);
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_142);
        goto -> bb169;
    }

    bb75: {
        StorageDead(_171);
        _169 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _170) -> [return: bb76, unwind: bb186];
    }

    bb76: {
        StorageDead(_170);
        _172 = discriminant(_169);
        switchInt(move _172) -> [0: bb77, 1: bb78, otherwise: bb4];
    }

    bb77: {
        StorageLive(_176);
        _176 = ((_169 as Continue).0: ());
        _168 = _176;
        StorageDead(_176);
        _419 = discriminant(_169);
        StorageDead(_169);
        StorageDead(_168);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _377 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _378 = deref_copy ((*_377).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _469 = (((_378.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _180 = &mut (*_469);
        _179 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _180) -> [return: bb80, unwind: bb186];
    }

    bb78: {
        StorageLive(_173);
        _173 = move ((_169 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_175);
        _175 = move _173;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _175) -> [return: bb79, unwind: bb202];
    }

    bb79: {
        StorageDead(_175);
        StorageDead(_173);
        _441 = discriminant(_169);
        StorageDead(_169);
        StorageDead(_168);
        goto -> bb169;
    }

    bb80: {
        StorageDead(_180);
        _178 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _179) -> [return: bb81, unwind: bb186];
    }

    bb81: {
        StorageDead(_179);
        _181 = discriminant(_178);
        switchInt(move _181) -> [0: bb82, 1: bb83, otherwise: bb4];
    }

    bb82: {
        StorageLive(_185);
        _185 = ((_178 as Continue).0: ());
        _177 = _185;
        StorageDead(_185);
        _421 = discriminant(_178);
        StorageDead(_178);
        StorageDead(_177);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        _191 = &(*_122);
        _190 = <RefMut<'_, SpotMarket> as Deref>::deref(move _191) -> [return: bb85, unwind: bb186];
    }

    bb83: {
        StorageLive(_182);
        _182 = move ((_178 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb84, unwind: bb201];
    }

    bb84: {
        StorageDead(_184);
        StorageDead(_182);
        _439 = discriminant(_178);
        StorageDead(_178);
        StorageDead(_177);
        goto -> bb169;
    }

    bb85: {
        _189 = &(*_190);
        StorageDead(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        _379 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _380 = deref_copy ((*_379).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _470 = (((_380.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _196 = &(*_470);
        _195 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _196) -> [return: bb86, unwind: bb186];
    }

    bb86: {
        _194 = &(*_195);
        _193 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _194) -> [return: bb87, unwind: bb186];
    }

    bb87: {
        StorageDead(_196);
        StorageDead(_194);
        _192 = ((*_193).2: u64);
        _188 = validate_spot_market_vault_amount(move _189, move _192) -> [return: bb88, unwind: bb186];
    }

    bb88: {
        StorageDead(_192);
        StorageDead(_189);
        _187 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _188) -> [return: bb89, unwind: bb186];
    }

    bb89: {
        StorageDead(_188);
        _197 = discriminant(_187);
        switchInt(move _197) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_201);
        _201 = ((_187 as Continue).0: i64);
        _186 = _201;
        StorageDead(_201);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_186);
        _121 = const ();
        StorageDead(_136);
        StorageDead(_134);
        drop(_123) -> [return: bb93, unwind: bb188];
    }

    bb91: {
        StorageLive(_198);
        _198 = ((_187 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_200);
        _200 = _198;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _200) -> [return: bb92, unwind: bb186];
    }

    bb92: {
        StorageDead(_200);
        StorageDead(_198);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_186);
        goto -> bb169;
    }

    bb93: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = _2;
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        _208 = &mut (*_60);
        _207 = <RefMut<'_, User> as DerefMut>::deref_mut(move _208) -> [return: bb94, unwind: bb188];
    }

    bb94: {
        _206 = &mut (*_207);
        StorageDead(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = &_23;
        _209 = &(*_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        _213 = &mut (*_72);
        _212 = <RefMut<'_, User> as DerefMut>::deref_mut(move _213) -> [return: bb95, unwind: bb188];
    }

    bb95: {
        _211 = &mut (*_212);
        StorageDead(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &_25;
        _214 = &(*_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = &_88;
        _216 = &(*_217);
        StorageLive(_218);
        StorageLive(_219);
        _219 = &_89;
        _218 = &(*_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &mut _90;
        _220 = &mut (*_221);
        StorageLive(_222);
        _222 = _22;
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _381 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _382 = deref_copy ((*_381).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _471 = (((_382.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _227 = &(*_471);
        _226 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _227) -> [return: bb96, unwind: bb188];
    }

    bb96: {
        _225 = &(*_226);
        _224 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _225) -> [return: bb97, unwind: bb188];
    }

    bb97: {
        StorageDead(_227);
        StorageDead(_225);
        _223 = ((*_224).2: u64);
        _204 = controller::liquidation::resolve_spot_bankruptcy(move _205, move _206, move _209, move _211, move _214, move _216, move _218, move _220, move _222, move _223) -> [return: bb98, unwind: bb188];
    }

    bb98: {
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_218);
        StorageDead(_216);
        StorageDead(_214);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        _203 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _204) -> [return: bb99, unwind: bb188];
    }

    bb99: {
        StorageDead(_204);
        _228 = discriminant(_203);
        switchInt(move _228) -> [0: bb100, 1: bb101, otherwise: bb4];
    }

    bb100: {
        StorageLive(_232);
        _232 = ((_203 as Continue).0: u64);
        _202 = _232;
        StorageDead(_232);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_203);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        _235 = _202;
        _234 = Gt(move _235, const 0_u64);
        switchInt(move _234) -> [0: bb104, otherwise: bb103];
    }

    bb101: {
        StorageLive(_229);
        _229 = ((_203 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_231);
        _231 = _229;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _231) -> [return: bb102, unwind: bb188];
    }

    bb102: {
        StorageDead(_231);
        StorageDead(_229);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_221);
        StorageDead(_219);
        StorageDead(_217);
        StorageDead(_215);
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_207);
        StorageDead(_203);
        goto -> bb168;
    }

    bb103: {
        StorageDead(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = &_89;
        StorageLive(_241);
        StorageLive(_242);
        _242 = &_2;
        _241 = &(*_242);
        _239 = SpotMarketMap::<'_>::get_ref(move _240, move _241) -> [return: bb105, unwind: bb188];
    }

    bb104: {
        StorageDead(_235);
        _233 = const ();
        goto -> bb139;
    }

    bb105: {
        StorageDead(_241);
        StorageDead(_240);
        _238 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _239) -> [return: bb106, unwind: bb188];
    }

    bb106: {
        StorageDead(_239);
        _243 = discriminant(_238);
        switchInt(move _243) -> [0: bb107, 1: bb108, otherwise: bb4];
    }

    bb107: {
        StorageLive(_247);
        _247 = move ((_238 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _237 = move _247;
        StorageDead(_247);
        _236 = &_237;
        _425 = discriminant(_238);
        StorageDead(_242);
        StorageDead(_238);
        StorageLive(_248);
        StorageLive(_249);
        _249 = &(*_84);
        _248 = <Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>> as Clone>::clone(move _249) -> [return: bb110, unwind: bb185];
    }

    bb108: {
        StorageLive(_244);
        _244 = ((_238 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_246);
        _246 = _244;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _246) -> [return: bb109, unwind: bb200];
    }

    bb109: {
        StorageDead(_246);
        StorageDead(_244);
        _423 = discriminant(_238);
        StorageDead(_242);
        StorageDead(_238);
        goto -> bb167;
    }

    bb110: {
        StorageDead(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        _254 = &(*_236);
        _253 = <Ref<'_, SpotMarket> as Deref>::deref(move _254) -> [return: bb111, unwind: bb185];
    }

    bb111: {
        _252 = &(*_253);
        StorageDead(_254);
        _251 = SpotMarket::has_transfer_hook(move _252) -> [return: bb112, unwind: bb185];
    }

    bb112: {
        switchInt(move _251) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        StorageDead(_253);
        StorageDead(_252);
        StorageLive(_255);
        _255 = &mut _248;
        _250 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::Some(move _255);
        StorageDead(_255);
        goto -> bb115;
    }

    bb114: {
        StorageDead(_253);
        StorageDead(_252);
        _250 = Option::<&mut Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>>::None;
        goto -> bb115;
    }

    bb115: {
        StorageDead(_251);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        _383 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _260 = &((*_383).9: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _259 = &(*_260);
        StorageLive(_261);
        StorageLive(_262);
        _384 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _262 = &((*_384).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _385 = deref_copy (*_262);
        _472 = (((_385.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _261 = &(*_472);
        StorageLive(_263);
        StorageLive(_264);
        _386 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _264 = &((*_386).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _387 = deref_copy (*_264);
        _473 = (((_387.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _263 = &(*_473);
        StorageLive(_265);
        StorageLive(_266);
        _388 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _266 = &((*_388).8: anchor_lang::prelude::AccountInfo<'_>);
        _265 = &(*_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        _389 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _390 = deref_copy ((*_389).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _474 = (((_390.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _269 = &(*_474);
        _268 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _269) -> [return: bb116, unwind: bb185];
    }

    bb116: {
        StorageDead(_269);
        _267 = ((*_268).15: u8);
        StorageLive(_270);
        _270 = _202;
        StorageLive(_271);
        StorageLive(_272);
        _272 = &_112;
        _271 = &(*_272);
        StorageLive(_273);
        _273 = move _250;
        _258 = send_from_program_vault(move _259, move _261, move _263, move _265, move _267, move _270, move _271, move _273) -> [return: bb117, unwind: bb185];
    }

    bb117: {
        StorageDead(_273);
        StorageDead(_271);
        StorageDead(_270);
        StorageDead(_267);
        StorageDead(_265);
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_259);
        _257 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _258) -> [return: bb118, unwind: bb185];
    }

    bb118: {
        StorageDead(_258);
        _274 = discriminant(_257);
        switchInt(move _274) -> [0: bb119, 1: bb120, otherwise: bb4];
    }

    bb119: {
        StorageLive(_278);
        _278 = ((_257 as Continue).0: ());
        _256 = _278;
        StorageDead(_278);
        _427 = discriminant(_257);
        StorageDead(_272);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _391 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _392 = deref_copy ((*_391).7: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _475 = (((_392.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _287 = &(*_475);
        _286 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _287) -> [return: bb122, unwind: bb185];
    }

    bb120: {
        StorageLive(_275);
        _275 = move ((_257 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_277);
        _277 = move _275;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _277) -> [return: bb121, unwind: bb199];
    }

    bb121: {
        StorageDead(_277);
        StorageDead(_275);
        _437 = discriminant(_257);
        StorageDead(_272);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_257);
        StorageDead(_256);
        goto -> bb166;
    }

    bb122: {
        _285 = &(*_286);
        _284 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _285) -> [return: bb123, unwind: bb185];
    }

    bb123: {
        StorageDead(_287);
        StorageDead(_285);
        _283 = ((*_284).2: u64);
        _282 = Gt(move _283, const 0_u64);
        switchInt(move _282) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_288);
        _288 = ();
        _281 = std::result::Result::<(), error::ErrorCode>::Ok(move _288);
        StorageDead(_288);
        goto -> bb133;
    }

    bb125: {
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_283);
        StorageLive(_289);
        _289 = error::ErrorCode::InvalidIFDetected;
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _357 = const _;
        _300 = &(*_357);
        _299 = &(*_300);
        _298 = move _299 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_299);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        _308 = &_289;
        _307 = &(*_308);
        _306 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _307) -> [return: bb126, unwind: bb185];
    }

    bb126: {
        StorageDead(_307);
        _305 = [move _306];
        StorageDead(_306);
        _304 = &_305;
        _303 = &(*_304);
        _302 = move _303 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_303);
        _297 = Arguments::<'_>::new_v1(move _298, move _302) -> [return: bb127, unwind: bb185];
    }

    bb127: {
        StorageDead(_302);
        StorageDead(_298);
        _296 = format(move _297) -> [return: bb128, unwind: bb185];
    }

    bb128: {
        StorageDead(_297);
        StorageDead(_308);
        StorageDead(_305);
        StorageDead(_304);
        StorageDead(_300);
        _295 = move _296;
        StorageDead(_296);
        _294 = &_295;
        _293 = &(*_294);
        _292 = <String as Deref>::deref(move _293) -> [return: bb129, unwind: bb184];
    }

    bb129: {
        _291 = &(*_292);
        StorageDead(_293);
        _290 = solana_program::log::sol_log(move _291) -> [return: bb130, unwind: bb184];
    }

    bb130: {
        StorageDead(_291);
        drop(_295) -> [return: bb131, unwind: bb185];
    }

    bb131: {
        StorageDead(_295);
        StorageDead(_294);
        StorageDead(_292);
        StorageDead(_290);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        _311 = const "insurance_fund_vault.amount must remain > 0";
        _310 = &(*_311);
        _309 = solana_program::log::sol_log(move _310) -> [return: bb132, unwind: bb185];
    }

    bb132: {
        StorageDead(_310);
        StorageDead(_311);
        StorageDead(_309);
        StorageLive(_312);
        _312 = _289;
        _281 = std::result::Result::<(), error::ErrorCode>::Err(move _312);
        StorageDead(_312);
        StorageDead(_289);
        goto -> bb133;
    }

    bb133: {
        StorageDead(_282);
        _280 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _281) -> [return: bb134, unwind: bb185];
    }

    bb134: {
        StorageDead(_281);
        _313 = discriminant(_280);
        switchInt(move _313) -> [0: bb135, 1: bb136, otherwise: bb4];
    }

    bb135: {
        StorageLive(_317);
        _317 = ((_280 as Continue).0: ());
        _279 = _317;
        StorageDead(_317);
        StorageDead(_280);
        StorageDead(_279);
        _233 = const ();
        StorageDead(_250);
        StorageDead(_248);
        drop(_237) -> [return: bb138, unwind: bb188];
    }

    bb136: {
        StorageLive(_314);
        _314 = ((_280 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_316);
        _316 = _314;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _316) -> [return: bb137, unwind: bb185];
    }

    bb137: {
        StorageDead(_316);
        StorageDead(_314);
        StorageDead(_280);
        StorageDead(_279);
        goto -> bb166;
    }

    bb138: {
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb139;
    }

    bb139: {
        StorageDead(_234);
        StorageDead(_233);
        StorageLive(_318);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        StorageLive(_322);
        StorageLive(_323);
        _323 = &_89;
        StorageLive(_324);
        StorageLive(_325);
        _325 = &_2;
        _324 = &(*_325);
        _322 = SpotMarketMap::<'_>::get_ref_mut(move _323, move _324) -> [return: bb140, unwind: bb188];
    }

    bb140: {
        StorageDead(_324);
        StorageDead(_323);
        _321 = <std::result::Result<RefMut<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _322) -> [return: bb141, unwind: bb188];
    }

    bb141: {
        StorageDead(_322);
        _326 = discriminant(_321);
        switchInt(move _326) -> [0: bb142, 1: bb143, otherwise: bb4];
    }

    bb142: {
        StorageLive(_330);
        _330 = move ((_321 as Continue).0: std::cell::RefMut<'_, state::spot_market::SpotMarket>);
        _320 = move _330;
        StorageDead(_330);
        _319 = &mut _320;
        _431 = discriminant(_321);
        StorageDead(_325);
        StorageDead(_321);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        _393 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _394 = deref_copy ((*_393).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _476 = (((_394.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _334 = &mut (*_476);
        _333 = anchor_lang::prelude::InterfaceAccount::<'_, anchor_spl::token_interface::TokenAccount>::reload(move _334) -> [return: bb145, unwind: bb183];
    }

    bb143: {
        StorageLive(_327);
        _327 = ((_321 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_329);
        _329 = _327;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _329) -> [return: bb144, unwind: bb198];
    }

    bb144: {
        StorageDead(_329);
        StorageDead(_327);
        _429 = discriminant(_321);
        StorageDead(_325);
        StorageDead(_321);
        goto -> bb165;
    }

    bb145: {
        StorageDead(_334);
        _332 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _333) -> [return: bb146, unwind: bb183];
    }

    bb146: {
        StorageDead(_333);
        _335 = discriminant(_332);
        switchInt(move _335) -> [0: bb147, 1: bb148, otherwise: bb4];
    }

    bb147: {
        StorageLive(_339);
        _339 = ((_332 as Continue).0: ());
        _331 = _339;
        StorageDead(_339);
        _433 = discriminant(_332);
        StorageDead(_332);
        StorageDead(_331);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        _345 = &(*_319);
        _344 = <RefMut<'_, SpotMarket> as Deref>::deref(move _345) -> [return: bb150, unwind: bb183];
    }

    bb148: {
        StorageLive(_336);
        _336 = move ((_332 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_338);
        _338 = move _336;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _338) -> [return: bb149, unwind: bb197];
    }

    bb149: {
        StorageDead(_338);
        StorageDead(_336);
        _435 = discriminant(_332);
        StorageDead(_332);
        StorageDead(_331);
        goto -> bb164;
    }

    bb150: {
        _343 = &(*_344);
        StorageDead(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        _395 = deref_copy (_1.1: &mut instructions::keeper::ResolveBankruptcy<'_>);
        _396 = deref_copy ((*_395).6: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _477 = (((_396.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _350 = &(*_477);
        _349 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _350) -> [return: bb151, unwind: bb183];
    }

    bb151: {
        _348 = &(*_349);
        _347 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _348) -> [return: bb152, unwind: bb183];
    }

    bb152: {
        StorageDead(_350);
        StorageDead(_348);
        _346 = ((*_347).2: u64);
        _342 = validate_spot_market_vault_amount(move _343, move _346) -> [return: bb153, unwind: bb183];
    }

    bb153: {
        StorageDead(_346);
        StorageDead(_343);
        _341 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _342) -> [return: bb154, unwind: bb183];
    }

    bb154: {
        StorageDead(_342);
        _351 = discriminant(_341);
        switchInt(move _351) -> [0: bb155, 1: bb156, otherwise: bb4];
    }

    bb155: {
        StorageLive(_355);
        _355 = ((_341 as Continue).0: i64);
        _340 = _355;
        StorageDead(_355);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_341);
        StorageDead(_340);
        _318 = const ();
        drop(_320) -> [return: bb158, unwind: bb188];
    }

    bb156: {
        StorageLive(_352);
        _352 = ((_341 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_354);
        _354 = _352;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _354) -> [return: bb157, unwind: bb183];
    }

    bb157: {
        StorageDead(_354);
        StorageDead(_352);
        StorageDead(_349);
        StorageDead(_347);
        StorageDead(_344);
        StorageDead(_341);
        StorageDead(_340);
        goto -> bb164;
    }

    bb158: {
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_318);
        StorageLive(_356);
        _356 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _356);
        StorageDead(_356);
        StorageDead(_202);
        StorageDead(_112);
        drop(_90) -> [return: bb159, unwind: bb189];
    }

    bb159: {
        StorageDead(_90);
        drop(_89) -> [return: bb160, unwind: bb190];
    }

    bb160: {
        StorageDead(_89);
        drop(_88) -> [return: bb161, unwind: bb193];
    }

    bb161: {
        StorageDead(_88);
        StorageDead(_85);
        StorageDead(_84);
        drop(_73) -> [return: bb162, unwind: bb194];
    }

    bb162: {
        StorageDead(_73);
        StorageDead(_72);
        drop(_61) -> [return: bb163, unwind: bb196];
    }

    bb163: {
        StorageDead(_61);
        StorageDead(_60);
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb182;
    }

    bb164: {
        drop(_320) -> [return: bb165, unwind: bb188];
    }

    bb165: {
        StorageDead(_320);
        StorageDead(_319);
        StorageDead(_318);
        goto -> bb168;
    }

    bb166: {
        StorageDead(_250);
        StorageDead(_248);
        drop(_237) -> [return: bb167, unwind: bb188];
    }

    bb167: {
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_234);
        StorageDead(_233);
        goto -> bb168;
    }

    bb168: {
        StorageDead(_202);
        goto -> bb171;
    }

    bb169: {
        StorageDead(_136);
        StorageDead(_134);
        drop(_123) -> [return: bb170, unwind: bb188];
    }

    bb170: {
        StorageDead(_123);
        StorageDead(_122);
        StorageDead(_121);
        goto -> bb171;
    }

    bb171: {
        StorageDead(_112);
        drop(_90) -> [return: bb172, unwind: bb189];
    }

    bb172: {
        StorageDead(_90);
        drop(_89) -> [return: bb173, unwind: bb190];
    }

    bb173: {
        StorageDead(_89);
        drop(_88) -> [return: bb174, unwind: bb193];
    }

    bb174: {
        StorageDead(_88);
        goto -> bb177;
    }

    bb175: {
        StorageDead(_100);
        StorageDead(_99);
        drop(_97) -> [return: bb176, unwind: bb193];
    }

    bb176: {
        StorageDead(_97);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_91);
        goto -> bb177;
    }

    bb177: {
        StorageDead(_85);
        StorageDead(_84);
        drop(_73) -> [return: bb178, unwind: bb194];
    }

    bb178: {
        StorageDead(_73);
        StorageDead(_72);
        drop(_61) -> [return: bb179, unwind: bb196];
    }

    bb179: {
        StorageDead(_61);
        StorageDead(_60);
        goto -> bb180;
    }

    bb180: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_22);
        goto -> bb181;
    }

    bb181: {
        StorageDead(_14);
        StorageDead(_13);
        goto -> bb182;
    }

    bb182: {
        return;
    }

    bb183 (cleanup): {
        drop(_320) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb184 (cleanup): {
        drop(_295) -> [return: bb185, unwind terminate(cleanup)];
    }

    bb185 (cleanup): {
        drop(_237) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb186 (cleanup): {
        drop(_123) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb187 (cleanup): {
        drop(_97) -> [return: bb188, unwind terminate(cleanup)];
    }

    bb188 (cleanup): {
        drop(_90) -> [return: bb189, unwind terminate(cleanup)];
    }

    bb189 (cleanup): {
        drop(_89) -> [return: bb190, unwind terminate(cleanup)];
    }

    bb190 (cleanup): {
        drop(_88) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb191 (cleanup): {
        drop(_100) -> [return: bb192, unwind terminate(cleanup)];
    }

    bb192 (cleanup): {
        drop(_97) -> [return: bb193, unwind terminate(cleanup)];
    }

    bb193 (cleanup): {
        drop(_73) -> [return: bb194, unwind terminate(cleanup)];
    }

    bb194 (cleanup): {
        drop(_61) -> [return: bb196, unwind terminate(cleanup)];
    }

    bb195 (cleanup): {
        drop(_40) -> [return: bb196, unwind terminate(cleanup)];
    }

    bb196 (cleanup): {
        resume;
    }

    bb197 (cleanup): {
        _449 = discriminant(_332);
        goto -> bb183;
    }

    bb198 (cleanup): {
        _450 = discriminant(_321);
        goto -> bb188;
    }

    bb199 (cleanup): {
        _451 = discriminant(_257);
        goto -> bb185;
    }

    bb200 (cleanup): {
        _452 = discriminant(_238);
        goto -> bb188;
    }

    bb201 (cleanup): {
        _453 = discriminant(_178);
        goto -> bb186;
    }

    bb202 (cleanup): {
        _454 = discriminant(_169);
        goto -> bb186;
    }

    bb203 (cleanup): {
        _455 = discriminant(_143);
        goto -> bb186;
    }

    bb204 (cleanup): {
        _456 = discriminant(_124);
        goto -> bb188;
    }

    bb205 (cleanup): {
        _458 = discriminant(_92);
        goto -> bb191;
    }

    bb206 (cleanup): {
        _459 = discriminant(_74);
        goto -> bb194;
    }

    bb207 (cleanup): {
        _460 = discriminant(_62);
        goto -> bb196;
    }

    bb208 (cleanup): {
        _461 = discriminant(_15);
        goto -> bb196;
    }

    bb209 (cleanup): {
        _462 = discriminant(_4);
        goto -> bb196;
    }
}
