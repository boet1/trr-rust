digraph Mir_0_3843 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn AMM::get_new_oracle_conf_pct(_1: &amp;ReErased state::perp_market::AMM, _2: u64, _3: u64, _4: i64) -&gt; std::result::Result&lt;u64, error::ErrorCode&gt;<br align="left"/>let _5: u64;<br align="left"/>let _6: u64;<br align="left"/>let _7: i64;<br align="left"/>let mut _8: i64;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _10: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _11: i64;<br align="left"/>let mut _12: i64;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: i64;<br align="left"/>let _18: u64;<br align="left"/>let mut _19: bool;<br align="left"/>let mut _20: i64;<br align="left"/>let _21: u64;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: u64;<br align="left"/>let mut _24: u64;<br align="left"/>let mut _25: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _26: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _27: i64;<br align="left"/>let mut _28: isize;<br align="left"/>let _29: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _30: !;<br align="left"/>let mut _31: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _32: u64;<br align="left"/>let mut _33: u64;<br align="left"/>let mut _34: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _35: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: u64;<br align="left"/>let mut _38: u64;<br align="left"/>let mut _39: u64;<br align="left"/>let mut _40: bool;<br align="left"/>let mut _41: isize;<br align="left"/>let _42: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _43: !;<br align="left"/>let mut _44: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _45: u64;<br align="left"/>let mut _46: u64;<br align="left"/>let mut _47: u64;<br align="left"/>let mut _48: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _49: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _50: u64;<br align="left"/>let mut _51: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _52: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _53: u64;<br align="left"/>let mut _54: isize;<br align="left"/>let _55: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _56: !;<br align="left"/>let mut _57: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _58: u64;<br align="left"/>let mut _59: u64;<br align="left"/>let mut _60: isize;<br align="left"/>let _61: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _62: !;<br align="left"/>let mut _63: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _64: u64;<br align="left"/>let mut _65: u64;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug confidence =&gt; _2;<br align="left"/>debug reserve_price =&gt; _3;<br align="left"/>debug now =&gt; _4;<br align="left"/>debug upper_bound_divisor =&gt; _5;<br align="left"/>debug lower_bound_divisor =&gt; _6;<br align="left"/>debug since_last =&gt; _7;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug confidence_lower_bound =&gt; _18;<br align="left"/>debug confidence_divisor =&gt; _21;<br align="left"/>debug residual =&gt; _29;<br align="left"/>debug val =&gt; _32;<br align="left"/>debug residual =&gt; _42;<br align="left"/>debug val =&gt; _45;<br align="left"/>debug residual =&gt; _55;<br align="left"/>debug val =&gt; _58;<br align="left"/>debug residual =&gt; _61;<br align="left"/>debug val =&gt; _64;<br align="left"/>>;
    bb0__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_5)<br/>_5 = const 21_u64<br/>StorageLive(_6)<br/>_6 = const 5_u64<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = _4<br/>StorageLive(_12)<br/>_12 = (((*_1).1: state::oracle::HistoricalOracleData).5: i64)<br/></td></tr><tr><td align="left">_10 = &lt;i64 as SafeMath&gt;::safe_sub(move _11, move _12)</td></tr></table>>];
    bb1__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb2__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_13 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb3__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_9 as Continue).0: i64)<br/>_8 = _17<br/>StorageDead(_17)<br/></td></tr><tr><td align="left">_7 = &lt;i64 as Ord&gt;::max(move _8, const 0_i64)</td></tr></table>>];
    bb4__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb6__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_8)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/>StorageDead(_9)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>_20 = _7<br/>_19 = Gt(move _20, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _19)</td></tr></table>>];
    bb8__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>_23 = _5<br/>StorageLive(_24)<br/>StorageLive(_25)<br/>StorageLive(_26)<br/>StorageLive(_27)<br/>_27 = _7<br/></td></tr><tr><td align="left">_26 = &lt;i64 as Cast&gt;::cast::&lt;u64&gt;(move _27)</td></tr></table>>];
    bb9__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/></td></tr><tr><td align="left">_25 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _26)</td></tr></table>>];
    bb10__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>_28 = discriminant(_25)<br/></td></tr><tr><td align="left">switchInt(move _28)</td></tr></table>>];
    bb11__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageLive(_32)<br/>_32 = ((_25 as Continue).0: u64)<br/>_24 = _32<br/>StorageDead(_32)<br/></td></tr><tr><td align="left">_22 = core::num::&lt;impl u64&gt;::saturating_sub(move _23, move _24)</td></tr></table>>];
    bb12__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_29)<br/>_29 = ((_25 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_31)<br/>_31 = _29<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _31)</td></tr></table>>];
    bb13__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageDead(_31)<br/>StorageDead(_29)<br/>StorageDead(_24)<br/>StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_25)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb14__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_24)<br/>StorageDead(_23)<br/>StorageLive(_33)<br/>_33 = _6<br/></td></tr><tr><td align="left">_21 = &lt;u64 as Ord&gt;::max(move _22, move _33)</td></tr></table>>];
    bb15__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_22)<br/>StorageDead(_25)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>StorageLive(_36)<br/>_36 = ((*_1).48: u64)<br/>StorageLive(_37)<br/>StorageLive(_38)<br/>_38 = ((*_1).48: u64)<br/>StorageLive(_39)<br/>_39 = _21<br/>_40 = Eq(_39, const 0_u64)<br/></td></tr><tr><td align="left">assert(!move _40, &quot;attempt to divide `{}` by zero&quot;, _38)</td></tr></table>>];
    bb16__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_37 = Div(move _38, move _39)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">_35 = &lt;u64 as SafeMath&gt;::safe_sub(move _36, move _37)</td></tr></table>>];
    bb17__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/></td></tr><tr><td align="left">_34 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _35)</td></tr></table>>];
    bb18__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>_41 = discriminant(_34)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb19__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_45)<br/>_45 = ((_34 as Continue).0: u64)<br/>_18 = _45<br/>StorageDead(_45)<br/>StorageDead(_21)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb20__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_42)<br/>_42 = ((_34 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_44)<br/>_44 = _42<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _44)</td></tr></table>>];
    bb21__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_42)<br/>StorageDead(_21)<br/>StorageDead(_34)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb22__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_18 = ((*_1).48: u64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>StorageLive(_53)<br/>_53 = _2<br/></td></tr><tr><td align="left">_52 = &lt;u64 as SafeMath&gt;::safe_mul(move _53, const _)</td></tr></table>>];
    bb24__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/></td></tr><tr><td align="left">_51 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _52)</td></tr></table>>];
    bb25__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_52)<br/>_54 = discriminant(_51)<br/></td></tr><tr><td align="left">switchInt(move _54)</td></tr></table>>];
    bb26__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_58)<br/>_58 = ((_51 as Continue).0: u64)<br/>_50 = _58<br/>StorageDead(_58)<br/>StorageLive(_59)<br/>_59 = _3<br/></td></tr><tr><td align="left">_49 = &lt;u64 as SafeMath&gt;::safe_div(move _50, move _59)</td></tr></table>>];
    bb27__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_55)<br/>_55 = ((_51 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_57)<br/>_57 = _55<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _57)</td></tr></table>>];
    bb28__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_57)<br/>StorageDead(_55)<br/>StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_50)<br/></td></tr><tr><td align="left">_48 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _49)</td></tr></table>>];
    bb30__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>_60 = discriminant(_48)<br/></td></tr><tr><td align="left">switchInt(move _60)</td></tr></table>>];
    bb31__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageLive(_64)<br/>_64 = ((_48 as Continue).0: u64)<br/>_47 = _64<br/>StorageDead(_64)<br/>StorageLive(_65)<br/>_65 = _18<br/></td></tr><tr><td align="left">_46 = &lt;u64 as Ord&gt;::max(move _47, move _65)</td></tr></table>>];
    bb32__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_61)<br/>_61 = ((_48 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_63)<br/>_63 = _61<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _63)</td></tr></table>>];
    bb33__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_61)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb34__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>StorageDead(_47)<br/>_0 = std::result::Result::&lt;u64, error::ErrorCode&gt;::Ok(move _46)<br/>StorageDead(_46)<br/>StorageDead(_18)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_51)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_47)<br/>StorageDead(_46)<br/>StorageDead(_18)<br/>StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/>StorageDead(_51)<br/>StorageDead(_48)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb36__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb37__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/>StorageDead(_6)<br/>StorageDead(_5)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb38__0_3843 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_3843 -> bb1__0_3843 [label="return"];
    bb1__0_3843 -> bb2__0_3843 [label="return"];
    bb2__0_3843 -> bb3__0_3843 [label="0"];
    bb2__0_3843 -> bb5__0_3843 [label="1"];
    bb2__0_3843 -> bb4__0_3843 [label="otherwise"];
    bb3__0_3843 -> bb7__0_3843 [label="return"];
    bb5__0_3843 -> bb6__0_3843 [label="return"];
    bb6__0_3843 -> bb37__0_3843 [label=""];
    bb7__0_3843 -> bb22__0_3843 [label="0"];
    bb7__0_3843 -> bb8__0_3843 [label="otherwise"];
    bb8__0_3843 -> bb9__0_3843 [label="return"];
    bb9__0_3843 -> bb10__0_3843 [label="return"];
    bb10__0_3843 -> bb11__0_3843 [label="0"];
    bb10__0_3843 -> bb12__0_3843 [label="1"];
    bb10__0_3843 -> bb4__0_3843 [label="otherwise"];
    bb11__0_3843 -> bb14__0_3843 [label="return"];
    bb12__0_3843 -> bb13__0_3843 [label="return"];
    bb13__0_3843 -> bb36__0_3843 [label=""];
    bb14__0_3843 -> bb15__0_3843 [label="return"];
    bb15__0_3843 -> bb16__0_3843 [label="success"];
    bb16__0_3843 -> bb17__0_3843 [label="return"];
    bb17__0_3843 -> bb18__0_3843 [label="return"];
    bb18__0_3843 -> bb19__0_3843 [label="0"];
    bb18__0_3843 -> bb20__0_3843 [label="1"];
    bb18__0_3843 -> bb4__0_3843 [label="otherwise"];
    bb19__0_3843 -> bb23__0_3843 [label=""];
    bb20__0_3843 -> bb21__0_3843 [label="return"];
    bb21__0_3843 -> bb36__0_3843 [label=""];
    bb22__0_3843 -> bb23__0_3843 [label=""];
    bb23__0_3843 -> bb24__0_3843 [label="return"];
    bb24__0_3843 -> bb25__0_3843 [label="return"];
    bb25__0_3843 -> bb26__0_3843 [label="0"];
    bb25__0_3843 -> bb27__0_3843 [label="1"];
    bb25__0_3843 -> bb4__0_3843 [label="otherwise"];
    bb26__0_3843 -> bb29__0_3843 [label="return"];
    bb27__0_3843 -> bb28__0_3843 [label="return"];
    bb28__0_3843 -> bb35__0_3843 [label=""];
    bb29__0_3843 -> bb30__0_3843 [label="return"];
    bb30__0_3843 -> bb31__0_3843 [label="0"];
    bb30__0_3843 -> bb32__0_3843 [label="1"];
    bb30__0_3843 -> bb4__0_3843 [label="otherwise"];
    bb31__0_3843 -> bb34__0_3843 [label="return"];
    bb32__0_3843 -> bb33__0_3843 [label="return"];
    bb33__0_3843 -> bb35__0_3843 [label=""];
    bb34__0_3843 -> bb38__0_3843 [label=""];
    bb35__0_3843 -> bb38__0_3843 [label=""];
    bb36__0_3843 -> bb37__0_3843 [label=""];
    bb37__0_3843 -> bb38__0_3843 [label=""];
}
