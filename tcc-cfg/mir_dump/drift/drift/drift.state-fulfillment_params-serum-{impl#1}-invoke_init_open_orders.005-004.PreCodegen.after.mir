// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::invoke_init_open_orders` after PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::invoke_init_open_orders(_1: &SerumContext<'_, '_>, _2: &anchor_lang::prelude::AccountInfo<'_>, _3: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, _4: u8) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug authority => _2;
    debug rent => _3;
    debug nonce => _4;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _5: [&[u8]; 2];
    let mut _6: &u8;
    let _7: &u8;
    let _9: [&[&[u8]]; 1];
    let mut _10: &[&[u8]];
    let _11: &[&[u8]];
    let mut _12: &[&[u8]; 2];
    let mut _13: std::ops::RangeFull;
    let mut _15: &serum_dex::instruction::MarketInstruction;
    let _16: serum_dex::instruction::MarketInstruction;
    let mut _18: anchor_lang::prelude::Pubkey;
    let mut _19: std::vec::Vec<u8>;
    let mut _20: std::vec::Vec<anchor_lang::prelude::AccountMeta>;
    let mut _21: std::boxed::Box<[anchor_lang::prelude::AccountMeta]>;
    let mut _22: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 4]>;
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: *mut u8;
    let mut _26: std::boxed::Box<[anchor_lang::prelude::AccountMeta; 4]>;
    let mut _27: anchor_lang::prelude::AccountMeta;
    let mut _28: anchor_lang::prelude::Pubkey;
    let mut _29: anchor_lang::prelude::AccountMeta;
    let mut _30: anchor_lang::prelude::Pubkey;
    let mut _31: anchor_lang::prelude::AccountMeta;
    let mut _32: anchor_lang::prelude::Pubkey;
    let mut _33: anchor_lang::prelude::AccountMeta;
    let mut _34: anchor_lang::prelude::Pubkey;
    let mut _35: anchor_lang::prelude::AccountInfo<'_>;
    let mut _36: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _38: anchor_lang::prelude::AccountInfo<'_>;
    let mut _39: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _40: anchor_lang::prelude::AccountInfo<'_>;
    let mut _41: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _42: anchor_lang::prelude::AccountInfo<'_>;
    let mut _43: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _44: anchor_lang::prelude::AccountInfo<'_>;
    let mut _45: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _46: anchor_lang::prelude::AccountInfo<'_>;
    let mut _47: &anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _48: std::result::Result<(), anchor_lang::prelude::ProgramError>;
    let mut _49: &solana_program::instruction::Instruction;
    let _50: &solana_program::instruction::Instruction;
    let mut _51: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _52: &[anchor_lang::prelude::AccountInfo<'_>; 5];
    let _53: &[anchor_lang::prelude::AccountInfo<'_>; 5];
    let mut _54: &[&[&[u8]]];
    let mut _55: &[&[&[u8]]; 1];
    let mut _56: {closure@programs/drift/src/state/fulfillment_params/serum.rs:123:13: 123:16};
    let mut _58: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _59: &anchor_lang::prelude::Pubkey;
    let mut _60: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _61: &anchor_lang::prelude::Pubkey;
    let mut _62: &anchor_lang::prelude::Pubkey;
    let mut _63: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _64: &anchor_lang::prelude::Pubkey;
    let mut _65: &anchor_lang::prelude::Pubkey;
    let mut _66: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _67: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _68: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _69: *const [anchor_lang::prelude::AccountMeta; 4];
    scope 1 {
        debug signer_seeds => _5;
        let _8: &[&[&[u8]]; 1];
        scope 2 {
            debug signers_seeds => _8;
            let _14: std::vec::Vec<u8>;
            let mut _57: &serum_dex::instruction::MarketInstruction;
            scope 3 {
                debug data => _14;
                let _17: solana_program::instruction::Instruction;
                let mut _70: *const ();
                let mut _71: usize;
                let mut _72: usize;
                let mut _73: usize;
                let mut _74: usize;
                let mut _75: bool;
                scope 4 {
                    debug instruction => _17;
                    let _37: [anchor_lang::prelude::AccountInfo<'_>; 5];
                    scope 6 {
                        debug account_infos => _37;
                    }
                }
                scope 5 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &_4;
        _6 = &(*_7);
        _5 = get_signer_seeds(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        _12 = &_5;
        StorageLive(_13);
        _13 = RangeFull;
        _11 = <[&[u8]; 2] as Index<RangeFull>>::index(move _12, move _13) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_13);
        StorageDead(_12);
        _10 = &(*_11);
        _9 = [move _10];
        StorageDead(_10);
        _8 = &_9;
        StorageLive(_14);
        StorageLive(_15);
        _57 = const _;
        _15 = &(*_57);
        _14 = MarketInstruction::pack(move _15) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_15);
        StorageLive(_17);
        StorageLive(_18);
        _58 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _59 = deref_copy ((*_58).0: &anchor_lang::prelude::Pubkey);
        _18 = (*_59);
        StorageLive(_19);
        _19 = move _14;
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _23 = SizeOf([anchor_lang::prelude::AccountMeta; 4]);
        _24 = AlignOf([anchor_lang::prelude::AccountMeta; 4]);
        _25 = alloc::alloc::exchange_malloc(move _23, move _24) -> [return: bb4, unwind: bb31];
    }

    bb4: {
        StorageLive(_26);
        _26 = ShallowInitBox(move _25, [anchor_lang::prelude::AccountMeta; 4]);
        StorageLive(_27);
        StorageLive(_28);
        _60 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _61 = deref_copy ((*_60).0: &anchor_lang::prelude::Pubkey);
        _28 = (*_61);
        _27 = anchor_lang::prelude::AccountMeta::new(move _28, const false) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        StorageDead(_28);
        StorageLive(_29);
        StorageLive(_30);
        _62 = deref_copy ((*_2).0: &anchor_lang::prelude::Pubkey);
        _30 = (*_62);
        _29 = anchor_lang::prelude::AccountMeta::new_readonly(move _30, const true) -> [return: bb6, unwind: bb30];
    }

    bb6: {
        StorageDead(_30);
        StorageLive(_31);
        StorageLive(_32);
        _63 = deref_copy ((*_1).1: &anchor_lang::prelude::AccountInfo<'_>);
        _64 = deref_copy ((*_63).0: &anchor_lang::prelude::Pubkey);
        _32 = (*_64);
        _31 = anchor_lang::prelude::AccountMeta::new_readonly(move _32, const false) -> [return: bb7, unwind: bb30];
    }

    bb7: {
        StorageDead(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(*_3);
        _35 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _36) -> [return: bb8, unwind: bb30];
    }

    bb8: {
        StorageDead(_36);
        _65 = deref_copy (_35.0: &anchor_lang::prelude::Pubkey);
        _34 = (*_65);
        _33 = anchor_lang::prelude::AccountMeta::new_readonly(move _34, const false) -> [return: bb9, unwind: bb27];
    }

    bb9: {
        StorageDead(_34);
        _69 = (((_26.0: std::ptr::Unique<[anchor_lang::prelude::AccountMeta; 4]>).0: std::ptr::NonNull<[anchor_lang::prelude::AccountMeta; 4]>).0: *const [anchor_lang::prelude::AccountMeta; 4]);
        _70 = _69 as *const () (PtrToPtr);
        _71 = _70 as usize (Transmute);
        _72 = AlignOf([anchor_lang::prelude::AccountMeta; 4]);
        _73 = Sub(_72, const 1_usize);
        _74 = BitAnd(_71, _73);
        _75 = Eq(_74, const 0_usize);
        assert(_75, "misaligned pointer dereference: address must be a multiple of {} but is {}", _72, _71) -> [success: bb33, unwind unreachable];
    }

    bb10: {
        StorageDead(_21);
        _17 = Instruction { program_id: move _18, accounts: move _20, data: move _19 };
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        drop(_35) -> [return: bb11, unwind: bb26];
    }

    bb11: {
        StorageDead(_35);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        _66 = deref_copy ((*_1).0: &anchor_lang::prelude::AccountInfo<'_>);
        _39 = &(*_66);
        _38 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _39) -> [return: bb12, unwind: bb26];
    }

    bb12: {
        StorageDead(_39);
        StorageLive(_40);
        StorageLive(_41);
        _67 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _41 = &(*_67);
        _40 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _41) -> [return: bb13, unwind: bb25];
    }

    bb13: {
        StorageDead(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &(*_2);
        _42 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _43) -> [return: bb14, unwind: bb24];
    }

    bb14: {
        StorageDead(_43);
        StorageLive(_44);
        StorageLive(_45);
        _68 = deref_copy ((*_1).1: &anchor_lang::prelude::AccountInfo<'_>);
        _45 = &(*_68);
        _44 = <anchor_lang::prelude::AccountInfo<'_> as Clone>::clone(move _45) -> [return: bb15, unwind: bb23];
    }

    bb15: {
        StorageDead(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_3);
        _46 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _47) -> [return: bb16, unwind: bb22];
    }

    bb16: {
        StorageDead(_47);
        _37 = [move _38, move _40, move _42, move _44, move _46];
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_17;
        _49 = &(*_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_37;
        _52 = &(*_53);
        _51 = move _52 as &[anchor_lang::prelude::AccountInfo<'_>] (PointerCoercion(Unsize));
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_8);
        _54 = move _55 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_55);
        _48 = invoke_signed(move _49, move _51, move _54) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_49);
        StorageLive(_56);
        _56 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:123:13: 123:16};
        _0 = std::result::Result::<(), anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:123:13: 123:16}>(move _48, move _56) -> [return: bb18, unwind: bb21];
    }

    bb18: {
        StorageDead(_56);
        StorageDead(_48);
        drop(_37) -> [return: bb19, unwind: bb26];
    }

    bb19: {
        StorageDead(_37);
        drop(_17) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_53);
        StorageDead(_50);
        return;
    }

    bb21 (cleanup): {
        drop(_37) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb22 (cleanup): {
        drop(_44) -> [return: bb23, unwind terminate(cleanup)];
    }

    bb23 (cleanup): {
        drop(_42) -> [return: bb24, unwind terminate(cleanup)];
    }

    bb24 (cleanup): {
        drop(_40) -> [return: bb25, unwind terminate(cleanup)];
    }

    bb25 (cleanup): {
        drop(_38) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        drop(_17) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb27 (cleanup): {
        drop(_26) -> [return: bb28, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        drop(_19) -> [return: bb29, unwind terminate(cleanup)];
    }

    bb29 (cleanup): {
        drop(_35) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb30 (cleanup): {
        drop(_26) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_19) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33: {
        (*_69) = [move _27, move _29, move _31, move _33];
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        _22 = move _26;
        _21 = move _22 as std::boxed::Box<[anchor_lang::prelude::AccountMeta]> (PointerCoercion(Unsize));
        StorageDead(_26);
        StorageDead(_22);
        _20 = std::slice::<impl [anchor_lang::prelude::AccountMeta]>::into_vec::<std::alloc::Global>(move _21) -> [return: bb10, unwind: bb28];
    }
}
