// MIR for `state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_quote_asset_reserve_prediction_market_bounds` after PreCodegen

fn state::perp_market::<impl at programs/drift/src/state/perp_market.rs:298:1: 298:16>::get_quote_asset_reserve_prediction_market_bounds(_1: &PerpMarket, _2: controller::position::PositionDirection) -> std::result::Result<(u128, u128), error::ErrorCode> {
    debug self => _1;
    debug direction => _2;
    let mut _0: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _3: u128;
    let mut _5: u128;
    let mut _6: &u128;
    let _7: u128;
    let mut _8: u128;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _10: std::result::Result<u128, error::ErrorCode>;
    let mut _11: u128;
    let mut _12: isize;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _18: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _19: std::result::Result<u128, error::ErrorCode>;
    let mut _20: u128;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _22: std::result::Result<u128, error::ErrorCode>;
    let mut _23: u128;
    let mut _24: u128;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _36: ();
    let mut _37: bool;
    let mut _38: &controller::position::PositionDirection;
    let mut _39: &controller::position::PositionDirection;
    let _40: controller::position::PositionDirection;
    let mut _41: u128;
    let mut _42: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _43: std::result::Result<u128, error::ErrorCode>;
    let mut _44: u128;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _46: std::result::Result<u128, error::ErrorCode>;
    let mut _47: u128;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _49: std::result::Result<u128, error::ErrorCode>;
    let mut _50: u128;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _52: std::result::Result<u128, error::ErrorCode>;
    let mut _53: u128;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: u128;
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: u128;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: u128;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _78: std::result::Result<u128, error::ErrorCode>;
    let mut _79: u128;
    let mut _80: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _81: std::result::Result<u128, error::ErrorCode>;
    let mut _82: u128;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _84: std::result::Result<u128, error::ErrorCode>;
    let mut _85: u128;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _87: std::result::Result<u128, error::ErrorCode>;
    let mut _88: u128;
    let mut _89: isize;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _94: u128;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _100: isize;
    let mut _102: !;
    let mut _103: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _105: u128;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _111: (u128, u128);
    let mut _112: u128;
    let mut _113: u128;
    scope 1 {
        debug quote_asset_reserve_lower_bound => _3;
        let _4: u128;
        let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _16: u128;
        scope 2 {
            debug peg_sqrt => _4;
            let mut _17: u128;
            let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _29: u128;
            let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _35: u128;
            scope 7 {
                debug quote_asset_reserve_upper_bound => _17;
                let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _58: u128;
                let _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _64: u128;
                let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _69: u128;
                let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _75: u128;
                let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _93: u128;
                let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _99: u128;
                let _101: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _104: u128;
                let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _110: u128;
                let mut _114: &controller::position::PositionDirection;
                scope 16 {
                    debug residual => _55;
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _58;
                    scope 19 {
                    }
                }
                scope 20 {
                    debug residual => _61;
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _64;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug residual => _66;
                    scope 25 {
                    }
                }
                scope 26 {
                    debug val => _69;
                    scope 27 {
                    }
                }
                scope 28 {
                    debug residual => _72;
                    scope 29 {
                    }
                }
                scope 30 {
                    debug val => _75;
                    scope 31 {
                    }
                }
                scope 32 {
                    debug residual => _90;
                    scope 33 {
                    }
                }
                scope 34 {
                    debug val => _93;
                    scope 35 {
                    }
                }
                scope 36 {
                    debug residual => _96;
                    scope 37 {
                    }
                }
                scope 38 {
                    debug val => _99;
                    scope 39 {
                    }
                }
                scope 40 {
                    debug residual => _101;
                    scope 41 {
                    }
                }
                scope 42 {
                    debug val => _104;
                    scope 43 {
                    }
                }
                scope 44 {
                    debug residual => _107;
                    scope 45 {
                    }
                }
                scope 46 {
                    debug val => _110;
                    scope 47 {
                    }
                }
            }
            scope 8 {
                debug residual => _26;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _29;
                scope 11 {
                }
            }
            scope 12 {
                debug residual => _32;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _35;
                scope 15 {
                }
            }
        }
        scope 3 {
            debug residual => _13;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _16;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        _3 = const 0_u128;
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = (((*_1).1: state::perp_market::AMM).11: u128);
        _10 = <u128 as SafeMath>::safe_mul(move _11, const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_11);
        _9 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_10);
        _12 = discriminant(_9);
        switchInt(move _12) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_16);
        _16 = ((_9 as Continue).0: u128);
        _8 = _16;
        StorageDead(_16);
        _7 = core::num::<impl u128>::saturating_add(move _8, const 1_u128) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_13);
        _13 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb73;
    }

    bb7: {
        _6 = &_7;
        StorageDead(_8);
        _5 = <u128 as Roots>::nth_root(move _6, const 2_u32) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_6);
        _4 = core::num::<impl u128>::saturating_add(move _5, const 1_u128) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_5);
        StorageDead(_9);
        StorageDead(_7);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = (((*_1).1: state::perp_market::AMM).10: u128);
        StorageLive(_24);
        _24 = _4;
        _22 = <u128 as SafeMath>::safe_mul(move _23, move _24) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_24);
        StorageDead(_23);
        _21 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_22);
        _25 = discriminant(_21);
        switchInt(move _25) -> [0: bb12, 1: bb13, otherwise: bb4];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_21 as Continue).0: u128);
        _20 = _29;
        StorageDead(_29);
        StorageLive(_30);
        _30 = (((*_1).1: state::perp_market::AMM).11: u128);
        _19 = <u128 as SafeMath>::safe_div(move _20, move _30) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_26);
        _26 = ((_21 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_20);
        StorageDead(_19);
        goto -> bb71;
    }

    bb15: {
        StorageDead(_30);
        StorageDead(_20);
        _18 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _19) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_19);
        _31 = discriminant(_18);
        switchInt(move _31) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_35);
        _35 = ((_18 as Continue).0: u128);
        _17 = _35;
        StorageDead(_35);
        StorageDead(_21);
        StorageDead(_18);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        _38 = &_2;
        StorageLive(_39);
        _114 = const _;
        _39 = &(*_114);
        _37 = <controller::position::PositionDirection as PartialEq>::eq(move _38, move _39) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_32);
        _32 = ((_18 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb71;
    }

    bb20: {
        switchInt(move _37) -> [0: bb42, otherwise: bb21];
    }

    bb21: {
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = (((*_1).1: state::perp_market::AMM).10: u128);
        _52 = <u128 as SafeMath>::safe_mul(move _53, const 22361_u128) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_53);
        _51 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _52) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_52);
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_58);
        _58 = ((_51 as Continue).0: u128);
        _50 = _58;
        StorageDead(_58);
        StorageLive(_59);
        _59 = _4;
        _49 = <u128 as SafeMath>::safe_mul(move _50, move _59) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_55);
        _55 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb67;
    }

    bb27: {
        StorageDead(_59);
        StorageDead(_50);
        _48 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _49) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_49);
        _60 = discriminant(_48);
        switchInt(move _60) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_64);
        _64 = ((_48 as Continue).0: u128);
        _47 = _64;
        StorageDead(_64);
        _46 = <u128 as SafeMath>::safe_div(move _47, const 100000_u128) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_61);
        _61 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_63);
        _63 = _61;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _63) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_63);
        StorageDead(_61);
        goto -> bb67;
    }

    bb32: {
        StorageDead(_47);
        _45 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _46) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_46);
        _65 = discriminant(_45);
        switchInt(move _65) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_69);
        _69 = ((_45 as Continue).0: u128);
        _44 = _69;
        StorageDead(_69);
        StorageLive(_70);
        _70 = (((*_1).1: state::perp_market::AMM).11: u128);
        _43 = <u128 as SafeMath>::safe_div(move _44, move _70) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_66);
        _66 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_68);
        StorageDead(_66);
        goto -> bb68;
    }

    bb37: {
        StorageDead(_70);
        StorageDead(_44);
        _42 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _43) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_43);
        _71 = discriminant(_42);
        switchInt(move _71) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_75);
        _75 = ((_42 as Continue).0: u128);
        _41 = _75;
        StorageDead(_75);
        _3 = move _41;
        _36 = const ();
        StorageDead(_41);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        goto -> bb63;
    }

    bb40: {
        StorageLive(_72);
        _72 = ((_42 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb69;
    }

    bb42: {
        StorageDead(_39);
        StorageDead(_38);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _88 = (((*_1).1: state::perp_market::AMM).10: u128);
        _87 = <u128 as SafeMath>::safe_mul(move _88, const 97467_u128) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_88);
        _86 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _87) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_87);
        _89 = discriminant(_86);
        switchInt(move _89) -> [0: bb45, 1: bb46, otherwise: bb4];
    }

    bb45: {
        StorageLive(_93);
        _93 = ((_86 as Continue).0: u128);
        _85 = _93;
        StorageDead(_93);
        StorageLive(_94);
        _94 = _4;
        _84 = <u128 as SafeMath>::safe_mul(move _85, move _94) -> [return: bb48, unwind continue];
    }

    bb46: {
        StorageLive(_90);
        _90 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb47, unwind continue];
    }

    bb47: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_85);
        StorageDead(_84);
        goto -> bb64;
    }

    bb48: {
        StorageDead(_94);
        StorageDead(_85);
        _83 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _84) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_84);
        _95 = discriminant(_83);
        switchInt(move _95) -> [0: bb50, 1: bb51, otherwise: bb4];
    }

    bb50: {
        StorageLive(_99);
        _99 = ((_83 as Continue).0: u128);
        _82 = _99;
        StorageDead(_99);
        _81 = <u128 as SafeMath>::safe_div(move _82, const 100000_u128) -> [return: bb53, unwind continue];
    }

    bb51: {
        StorageLive(_96);
        _96 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_98);
        StorageDead(_96);
        goto -> bb64;
    }

    bb53: {
        StorageDead(_82);
        _80 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _81) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_81);
        _100 = discriminant(_80);
        switchInt(move _100) -> [0: bb55, 1: bb56, otherwise: bb4];
    }

    bb55: {
        StorageLive(_104);
        _104 = ((_80 as Continue).0: u128);
        _79 = _104;
        StorageDead(_104);
        StorageLive(_105);
        _105 = (((*_1).1: state::perp_market::AMM).11: u128);
        _78 = <u128 as SafeMath>::safe_div(move _79, move _105) -> [return: bb58, unwind continue];
    }

    bb56: {
        StorageLive(_101);
        _101 = ((_80 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_103);
        _103 = _101;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _103) -> [return: bb57, unwind continue];
    }

    bb57: {
        StorageDead(_103);
        StorageDead(_101);
        goto -> bb65;
    }

    bb58: {
        StorageDead(_105);
        StorageDead(_79);
        _77 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _78) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_78);
        _106 = discriminant(_77);
        switchInt(move _106) -> [0: bb60, 1: bb61, otherwise: bb4];
    }

    bb60: {
        StorageLive(_110);
        _110 = ((_77 as Continue).0: u128);
        _76 = _110;
        StorageDead(_110);
        _17 = move _76;
        _36 = const ();
        StorageDead(_76);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        goto -> bb63;
    }

    bb61: {
        StorageLive(_107);
        _107 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<(u128, u128), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_109);
        StorageDead(_107);
        goto -> bb66;
    }

    bb63: {
        StorageDead(_37);
        StorageDead(_36);
        StorageLive(_111);
        StorageLive(_112);
        _112 = _3;
        StorageLive(_113);
        _113 = _17;
        _111 = (move _112, move _113);
        StorageDead(_113);
        StorageDead(_112);
        _0 = std::result::Result::<(u128, u128), error::ErrorCode>::Ok(move _111);
        StorageDead(_111);
        StorageDead(_17);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb74;
    }

    bb64: {
        StorageDead(_82);
        StorageDead(_81);
        goto -> bb65;
    }

    bb65: {
        StorageDead(_79);
        StorageDead(_78);
        goto -> bb66;
    }

    bb66: {
        StorageDead(_76);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_80);
        StorageDead(_77);
        goto -> bb70;
    }

    bb67: {
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb68;
    }

    bb68: {
        StorageDead(_44);
        StorageDead(_43);
        goto -> bb69;
    }

    bb69: {
        StorageDead(_41);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_45);
        StorageDead(_42);
        goto -> bb70;
    }

    bb70: {
        StorageDead(_37);
        StorageDead(_36);
        goto -> bb72;
    }

    bb71: {
        StorageDead(_21);
        StorageDead(_18);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_17);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb74;
    }

    bb74: {
        return;
    }
}
