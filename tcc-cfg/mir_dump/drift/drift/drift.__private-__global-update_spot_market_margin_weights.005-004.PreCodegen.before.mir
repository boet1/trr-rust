// MIR for `__global::update_spot_market_margin_weights` before PreCodegen

fn __global::update_spot_market_margin_weights(_1: &anchor_lang::prelude::Pubkey, _2: &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8]) -> std::result::Result<(), anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: ();
    let mut _5: &str;
    let _6: &str;
    let _7: instruction::UpdateSpotMarketMarginWeights;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, instruction::UpdateSpotMarketMarginWeights>;
    let mut _9: std::result::Result<instruction::UpdateSpotMarketMarginWeights, anchor_lang::error::ErrorCode>;
    let mut _10: std::result::Result<instruction::UpdateSpotMarketMarginWeights, std::io::Error>;
    let mut _11: &mut &[u8];
    let mut _12: &mut &[u8];
    let mut _13: &[u8];
    let _14: &[u8];
    let mut _15: &[u8];
    let mut _16: std::ops::RangeFull;
    let mut _17: {closure@programs/drift/src/lib.rs:69:1: 69:11};
    let mut _18: isize;
    let _19: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _20: !;
    let mut _21: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let _22: instruction::UpdateSpotMarketMarginWeights;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, instructions::admin::AdminUpdateSpotMarket<'_>>;
    let mut _33: std::result::Result<instructions::admin::AdminUpdateSpotMarket<'_>, anchor_lang::error::Error>;
    let mut _34: &anchor_lang::prelude::Pubkey;
    let mut _35: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _36: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _37: &[u8];
    let mut _38: &mut instructions::admin::AdminUpdateSpotMarketBumps;
    let mut _39: &mut instructions::admin::AdminUpdateSpotMarketBumps;
    let mut _40: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _41: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _42: isize;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _49: std::result::Result<(), anchor_lang::error::Error>;
    let mut _50: anchor_lang::context::Context<'_, '_, '_, '_, instructions::admin::AdminUpdateSpotMarket<'_>>;
    let mut _51: &anchor_lang::prelude::Pubkey;
    let mut _52: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _53: &mut instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _54: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _55: instructions::admin::AdminUpdateSpotMarketBumps;
    let mut _56: u32;
    let mut _57: u32;
    let mut _58: u32;
    let mut _59: u32;
    let mut _60: u32;
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: &instructions::admin::AdminUpdateSpotMarket<'_>;
    let mut _67: &anchor_lang::prelude::Pubkey;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    let mut _77: isize;
    scope 1 {
        debug ix => _7;
        let _23: u32;
        let _24: u32;
        let _25: u32;
        let _26: u32;
        let _27: u32;
        scope 6 {
            debug initial_asset_weight => _23;
            debug maintenance_asset_weight => _24;
            debug initial_liability_weight => _25;
            debug maintenance_liability_weight => _26;
            debug imf_factor => _27;
            let mut _28: instructions::admin::AdminUpdateSpotMarketBumps;
            scope 7 {
                debug __bumps => _28;
                let mut _29: std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
                scope 8 {
                    debug __reallocs => _29;
                    let mut _30: &[anchor_lang::prelude::AccountInfo<'_>];
                    scope 9 {
                        debug __remaining_accounts => _30;
                        let mut _31: instructions::admin::AdminUpdateSpotMarket<'_>;
                        let _43: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _46: instructions::admin::AdminUpdateSpotMarket<'_>;
                        scope 10 {
                            debug __accounts => _31;
                            let _47: ();
                            let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _65: ();
                            scope 15 {
                                debug result => _47;
                            }
                            scope 16 {
                                debug residual => _62;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _65;
                                scope 19 {
                                }
                            }
                        }
                        scope 11 {
                            debug residual => _43;
                            scope 12 {
                            }
                        }
                        scope 13 {
                            debug val => _46;
                            scope 14 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _19;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _22;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = const "Instruction: UpdateSpotMarketMarginWeights";
        _5 = &(*_6);
        _4 = solana_program::log::sol_log(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_6);
        StorageDead(_4);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        StorageLive(_16);
        _16 = RangeFull;
        _14 = <[u8] as Index<RangeFull>>::index(move _15, move _16) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_16);
        StorageDead(_15);
        _13 = &(*_14);
        _12 = &mut _13;
        _11 = &mut (*_12);
        _10 = <UpdateSpotMarketMarginWeights as BorshDeserialize>::deserialize(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_17);
        _17 = {closure@programs/drift/src/lib.rs:69:1: 69:11};
        _9 = std::result::Result::<UpdateSpotMarketMarginWeights, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/lib.rs:69:1: 69:11}>(move _10, move _17) -> [return: bb4, unwind: bb32];
    }

    bb4: {
        StorageDead(_17);
        StorageDead(_10);
        _8 = <std::result::Result<UpdateSpotMarketMarginWeights, anchor_lang::error::ErrorCode> as Try>::branch(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        _18 = discriminant(_8);
        switchInt(move _18) -> [0: bb6, 1: bb8, otherwise: bb7];
    }

    bb6: {
        StorageLive(_22);
        _22 = move ((_8 as Continue).0: instruction::UpdateSpotMarketMarginWeights);
        _7 = move _22;
        StorageDead(_22);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_8);
        StorageLive(_23);
        _23 = (_7.0: u32);
        StorageLive(_24);
        _24 = (_7.1: u32);
        StorageLive(_25);
        _25 = (_7.2: u32);
        StorageLive(_26);
        _26 = (_7.3: u32);
        StorageLive(_27);
        _27 = (_7.4: u32);
        StorageLive(_28);
        _28 = <AdminUpdateSpotMarketBumps as Default>::default() -> [return: bb10, unwind continue];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        StorageLive(_19);
        _19 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_21);
        _21 = _19;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _21) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_21);
        StorageDead(_19);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_8);
        goto -> bb28;
    }

    bb10: {
        StorageLive(_29);
        _29 = BTreeSet::<anchor_lang::prelude::Pubkey>::new() -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageLive(_30);
        _30 = &(*_2);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &(*_1);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &mut _30;
        _35 = &mut (*_36);
        StorageLive(_37);
        _37 = &(*_3);
        StorageLive(_38);
        StorageLive(_39);
        _39 = &mut _28;
        _38 = &mut (*_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &mut _29;
        _40 = &mut (*_41);
        _33 = <admin::AdminUpdateSpotMarket<'_> as anchor_lang::Accounts<'_, AdminUpdateSpotMarketBumps>>::try_accounts(move _34, move _35, move _37, move _38, move _40) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<admin::AdminUpdateSpotMarket<'_>, anchor_lang::error::Error> as Try>::branch(move _33) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        StorageDead(_33);
        _42 = discriminant(_32);
        switchInt(move _42) -> [0: bb14, 1: bb15, otherwise: bb7];
    }

    bb14: {
        StorageLive(_46);
        _46 = move ((_32 as Continue).0: instructions::admin::AdminUpdateSpotMarket<'_>);
        _31 = move _46;
        StorageDead(_46);
        _68 = discriminant(_32);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_32);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &(*_1);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &mut _31;
        _52 = &mut (*_53);
        StorageLive(_54);
        _54 = &(*_30);
        StorageLive(_55);
        _55 = move _28;
        _50 = anchor_lang::context::Context::<'_, '_, '_, '_, admin::AdminUpdateSpotMarket<'_>>::new(move _51, move _52, move _54, move _55) -> [return: bb17, unwind: bb30];
    }

    bb15: {
        StorageLive(_43);
        _43 = move ((_32 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_45);
        _45 = move _43;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _45) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        StorageDead(_45);
        StorageDead(_43);
        _74 = discriminant(_32);
        StorageDead(_41);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_32);
        goto -> bb26;
    }

    bb17: {
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_52);
        StorageDead(_51);
        StorageLive(_56);
        _56 = _23;
        StorageLive(_57);
        _57 = _24;
        StorageLive(_58);
        _58 = _25;
        StorageLive(_59);
        _59 = _26;
        StorageLive(_60);
        _60 = _27;
        _49 = drift::update_spot_market_margin_weights(move _50, move _56, move _57, move _58, move _59, move _60) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_50);
        _48 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _49) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        StorageDead(_49);
        _61 = discriminant(_48);
        switchInt(move _61) -> [0: bb20, 1: bb21, otherwise: bb7];
    }

    bb20: {
        StorageLive(_65);
        _65 = ((_48 as Continue).0: ());
        _47 = _65;
        StorageDead(_65);
        _70 = discriminant(_48);
        StorageDead(_53);
        StorageDead(_48);
        StorageLive(_66);
        _66 = &_31;
        StorageLive(_67);
        _67 = &(*_1);
        _0 = <admin::AdminUpdateSpotMarket<'_> as anchor_lang::AccountsExit<'_>>::exit(move _66, move _67) -> [return: bb23, unwind: bb30];
    }

    bb21: {
        StorageLive(_62);
        _62 = move ((_48 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb22, unwind: bb33];
    }

    bb22: {
        StorageDead(_64);
        StorageDead(_62);
        _72 = discriminant(_48);
        StorageDead(_53);
        StorageDead(_48);
        StorageDead(_47);
        drop(_31) -> [return: bb26, unwind: bb31];
    }

    bb23: {
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_47);
        drop(_31) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        StorageDead(_31);
        StorageDead(_30);
        drop(_29) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        StorageDead(_7);
        goto -> bb29;
    }

    bb26: {
        StorageDead(_31);
        StorageDead(_30);
        drop(_29) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_7);
        goto -> bb29;
    }

    bb29: {
        return;
    }

    bb30 (cleanup): {
        drop(_31) -> [return: bb31, unwind terminate(cleanup)];
    }

    bb31 (cleanup): {
        drop(_29) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        resume;
    }

    bb33 (cleanup): {
        _76 = discriminant(_48);
        goto -> bb30;
    }

    bb34 (cleanup): {
        _77 = discriminant(_32);
        goto -> bb31;
    }
}
