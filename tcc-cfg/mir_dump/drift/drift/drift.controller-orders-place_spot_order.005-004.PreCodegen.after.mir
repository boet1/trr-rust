// MIR for `controller::orders::place_spot_order` after PreCodegen

fn controller::orders::place_spot_order(_1: &state::state::State, _2: &mut User, _3: anchor_lang::prelude::Pubkey, _4: &PerpMarketMap<'_>, _5: &SpotMarketMap<'_>, _6: &mut OracleMap<'_>, _7: &anchor_lang::prelude::Clock, _8: order_params::OrderParams, _9: PlaceOrderOptions) -> std::result::Result<(), error::ErrorCode> {
    debug state => _1;
    debug user => _2;
    debug user_key => _3;
    debug perp_market_map => _4;
    debug spot_market_map => _5;
    debug oracle_map => _6;
    debug clock => _7;
    debug params => _8;
    debug options => _9;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _10: i64;
    let _12: ();
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _14: std::result::Result<(), error::ErrorCode>;
    let mut _15: &mut state::user::User;
    let mut _16: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _17: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _18: &mut state::oracle_map::OracleMap<'_>;
    let mut _19: u32;
    let mut _20: isize;
    let mut _22: !;
    let mut _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _25: ();
    let mut _26: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _27: std::result::Result<(), error::ErrorCode>;
    let mut _28: bool;
    let mut _29: &state::user::User;
    let mut _30: ();
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 2];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let mut _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &error::ErrorCode;
    let _50: &error::ErrorCode;
    let mut _51: error::ErrorCode;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _57: ();
    let mut _58: bool;
    let _59: ();
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _61: std::result::Result<(), error::ErrorCode>;
    let mut _62: &mut state::user::User;
    let mut _63: &anchor_lang::prelude::Pubkey;
    let _64: &anchor_lang::prelude::Pubkey;
    let mut _65: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _66: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _67: &mut state::oracle_map::OracleMap<'_>;
    let mut _68: i64;
    let mut _69: u64;
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _75: ();
    let mut _76: bool;
    let mut _77: &state::user::User;
    let _78: ();
    let mut _79: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _80: std::result::Result<(), error::ErrorCode>;
    let mut _81: bool;
    let mut _82: ();
    let _84: ();
    let mut _85: &str;
    let _86: &str;
    let mut _87: &std::string::String;
    let _88: &std::string::String;
    let _89: std::string::String;
    let mut _91: std::fmt::Arguments<'_>;
    let mut _92: &[&str];
    let mut _93: &[&str; 2];
    let _94: &[&str; 2];
    let _95: [&str; 2];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let mut _97: &[core::fmt::rt::Argument<'_>; 1];
    let _98: &[core::fmt::rt::Argument<'_>; 1];
    let _99: [core::fmt::rt::Argument<'_>; 1];
    let mut _100: core::fmt::rt::Argument<'_>;
    let mut _101: &error::ErrorCode;
    let _102: &error::ErrorCode;
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: error::ErrorCode;
    let mut _107: isize;
    let mut _109: !;
    let mut _110: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _113: isize;
    let mut _115: isize;
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _117: std::result::Result<i64, error::ErrorCode>;
    let mut _118: i64;
    let mut _119: isize;
    let mut _121: !;
    let mut _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _124: ();
    let mut _125: bool;
    let mut _126: i64;
    let mut _127: bool;
    let mut _128: i64;
    let mut _129: i64;
    let mut _130: !;
    let _131: ();
    let mut _132: &str;
    let _133: &str;
    let mut _134: &std::string::String;
    let _135: &std::string::String;
    let _136: std::string::String;
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[&str; 3];
    let _141: &[&str; 3];
    let _142: [&str; 3];
    let mut _143: &[core::fmt::rt::Argument<'_>];
    let mut _144: &[core::fmt::rt::Argument<'_>; 2];
    let _145: &[core::fmt::rt::Argument<'_>; 2];
    let _146: [core::fmt::rt::Argument<'_>; 2];
    let mut _147: core::fmt::rt::Argument<'_>;
    let mut _148: &i64;
    let _149: &i64;
    let mut _150: core::fmt::rt::Argument<'_>;
    let mut _151: &i64;
    let _152: &i64;
    let mut _153: ();
    let mut _155: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _156: std::result::Result<usize, error::ErrorCode>;
    let mut _157: std::option::Option<usize>;
    let mut _158: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _159: std::slice::Iter<'_, state::user::Order>;
    let mut _160: &[state::user::Order];
    let mut _161: &[state::user::Order; 32];
    let mut _162: {closure@programs/drift/src/controller/orders.rs:3451:19: 3451:26};
    let mut _163: error::ErrorCode;
    let mut _164: isize;
    let mut _166: !;
    let mut _167: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _169: ();
    let mut _170: bool;
    let mut _171: u8;
    let mut _173: &mut std::slice::Iter<'_, state::user::Order>;
    let mut _174: std::slice::Iter<'_, state::user::Order>;
    let mut _175: &[state::user::Order];
    let mut _176: &[state::user::Order; 32];
    let mut _177: {closure@programs/drift/src/controller/orders.rs:3458:23: 3458:30};
    let mut _178: &state::order_params::OrderParams;
    let mut _179: bool;
    let mut _180: &std::option::Option<usize>;
    let mut _181: !;
    let _182: ();
    let mut _183: &str;
    let _184: &str;
    let mut _185: &std::string::String;
    let _186: &std::string::String;
    let _187: std::string::String;
    let mut _189: std::fmt::Arguments<'_>;
    let mut _190: &[&str];
    let mut _191: &[&str; 1];
    let _192: &[&str; 1];
    let _193: [&str; 1];
    let mut _194: &[core::fmt::rt::Argument<'_>];
    let mut _195: &[core::fmt::rt::Argument<'_>; 1];
    let _196: &[core::fmt::rt::Argument<'_>; 1];
    let _197: [core::fmt::rt::Argument<'_>; 1];
    let mut _198: core::fmt::rt::Argument<'_>;
    let mut _199: &u8;
    let _200: &u8;
    let mut _201: error::ErrorCode;
    let _204: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _206: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _207: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _208: &u16;
    let _209: &u16;
    let mut _210: isize;
    let mut _212: !;
    let mut _213: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _216: &state::spot_market::SpotMarket;
    let _217: &state::spot_market::SpotMarket;
    let mut _218: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _220: &state::spot_market::SpotMarket;
    let mut _221: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _222: ();
    let mut _223: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _224: std::result::Result<(), error::ErrorCode>;
    let mut _225: bool;
    let mut _226: u8;
    let mut _227: ();
    let _229: ();
    let mut _230: &str;
    let _231: &str;
    let mut _232: &std::string::String;
    let _233: &std::string::String;
    let _234: std::string::String;
    let mut _236: std::fmt::Arguments<'_>;
    let mut _237: &[&str];
    let mut _238: &[&str; 2];
    let _239: &[&str; 2];
    let _240: [&str; 2];
    let mut _241: &[core::fmt::rt::Argument<'_>];
    let mut _242: &[core::fmt::rt::Argument<'_>; 1];
    let _243: &[core::fmt::rt::Argument<'_>; 1];
    let _244: [core::fmt::rt::Argument<'_>; 1];
    let mut _245: core::fmt::rt::Argument<'_>;
    let mut _246: &error::ErrorCode;
    let _247: &error::ErrorCode;
    let _248: ();
    let mut _249: &str;
    let _250: &str;
    let mut _251: &std::string::String;
    let _252: &std::string::String;
    let _253: std::string::String;
    let mut _255: std::fmt::Arguments<'_>;
    let mut _256: &[&str];
    let mut _257: &[&str; 2];
    let _258: &[&str; 2];
    let _259: [&str; 2];
    let mut _260: &[core::fmt::rt::Argument<'_>];
    let mut _261: &[core::fmt::rt::Argument<'_>; 1];
    let _262: &[core::fmt::rt::Argument<'_>; 1];
    let _263: [core::fmt::rt::Argument<'_>; 1];
    let mut _264: core::fmt::rt::Argument<'_>;
    let mut _265: &u8;
    let _266: &u8;
    let mut _267: error::ErrorCode;
    let mut _268: isize;
    let mut _270: !;
    let mut _271: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _273: ();
    let mut _274: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _275: std::result::Result<(), error::ErrorCode>;
    let mut _276: bool;
    let mut _277: &state::spot_market::SpotMarket;
    let mut _278: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _279: isize;
    let mut _280: ();
    let _282: ();
    let mut _283: &str;
    let _284: &str;
    let mut _285: &std::string::String;
    let _286: &std::string::String;
    let _287: std::string::String;
    let mut _289: std::fmt::Arguments<'_>;
    let mut _290: &[&str];
    let mut _291: &[&str; 2];
    let _292: &[&str; 2];
    let _293: [&str; 2];
    let mut _294: &[core::fmt::rt::Argument<'_>];
    let mut _295: &[core::fmt::rt::Argument<'_>; 1];
    let _296: &[core::fmt::rt::Argument<'_>; 1];
    let _297: [core::fmt::rt::Argument<'_>; 1];
    let mut _298: core::fmt::rt::Argument<'_>;
    let mut _299: &error::ErrorCode;
    let _300: &error::ErrorCode;
    let _301: ();
    let mut _302: &str;
    let _303: &str;
    let mut _304: error::ErrorCode;
    let mut _305: isize;
    let mut _307: !;
    let mut _308: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _311: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, usize>;
    let mut _312: std::result::Result<usize, error::ErrorCode>;
    let mut _313: std::result::Result<usize, error::ErrorCode>;
    let mut _314: &state::user::User;
    let mut _315: u16;
    let mut _316: {closure@programs/drift/src/controller/orders.rs:3486:18: 3486:21};
    let mut _317: &mut &mut state::user::User;
    let mut _318: &u16;
    let mut _319: isize;
    let mut _321: !;
    let mut _322: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _325: usize;
    let mut _326: usize;
    let mut _327: bool;
    let mut _329: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _330: std::result::Result<u128, error::ErrorCode>;
    let mut _331: &state::user::SpotPosition;
    let _332: usize;
    let mut _333: usize;
    let mut _334: bool;
    let mut _335: &state::spot_market::SpotMarket;
    let _336: &state::spot_market::SpotMarket;
    let mut _337: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _338: isize;
    let mut _340: !;
    let mut _341: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _344: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _345: std::result::Result<i128, error::ErrorCode>;
    let mut _346: u128;
    let mut _347: &state::spot_market::SpotBalanceType;
    let _348: &state::spot_market::SpotBalanceType;
    let mut _349: isize;
    let mut _351: !;
    let mut _352: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _355: &state::oracle::OraclePriceData;
    let mut _356: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _357: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _358: &mut state::oracle_map::OracleMap<'_>;
    let mut _359: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _360: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _361: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _362: &state::spot_market::SpotMarket;
    let _363: &state::spot_market::SpotMarket;
    let mut _364: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _365: isize;
    let mut _367: !;
    let mut _368: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _372: (controller::position::PositionDirection, u64);
    let _373: ();
    let mut _374: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _375: std::result::Result<(), error::ErrorCode>;
    let mut _376: bool;
    let mut _377: u64;
    let mut _378: u64;
    let mut _379: ();
    let _381: ();
    let mut _382: &str;
    let _383: &str;
    let mut _384: &std::string::String;
    let _385: &std::string::String;
    let _386: std::string::String;
    let mut _388: std::fmt::Arguments<'_>;
    let mut _389: &[&str];
    let mut _390: &[&str; 2];
    let _391: &[&str; 2];
    let _392: [&str; 2];
    let mut _393: &[core::fmt::rt::Argument<'_>];
    let mut _394: &[core::fmt::rt::Argument<'_>; 1];
    let _395: &[core::fmt::rt::Argument<'_>; 1];
    let _396: [core::fmt::rt::Argument<'_>; 1];
    let mut _397: core::fmt::rt::Argument<'_>;
    let mut _398: &error::ErrorCode;
    let _399: &error::ErrorCode;
    let _400: ();
    let mut _401: &str;
    let _402: &str;
    let mut _403: &std::string::String;
    let _404: &std::string::String;
    let _405: std::string::String;
    let mut _407: std::fmt::Arguments<'_>;
    let mut _408: &[&str];
    let mut _409: &[&str; 2];
    let _410: &[&str; 2];
    let _411: [&str; 2];
    let mut _412: &[core::fmt::rt::Argument<'_>];
    let mut _413: &[core::fmt::rt::Argument<'_>; 2];
    let _414: &[core::fmt::rt::Argument<'_>; 2];
    let _415: [core::fmt::rt::Argument<'_>; 2];
    let mut _416: core::fmt::rt::Argument<'_>;
    let mut _417: &u64;
    let _418: &u64;
    let mut _419: core::fmt::rt::Argument<'_>;
    let mut _420: &u64;
    let _421: &u64;
    let mut _422: error::ErrorCode;
    let mut _423: isize;
    let mut _425: !;
    let mut _426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _429: bool;
    let mut _430: u64;
    let mut _431: bool;
    let mut _432: &state::order_params::OrderParams;
    let mut _433: bool;
    let mut _434: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _435: std::result::Result<u64, error::ErrorCode>;
    let mut _436: &state::user::User;
    let mut _437: u16;
    let mut _438: controller::position::PositionDirection;
    let mut _439: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _440: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _441: &mut state::oracle_map::OracleMap<'_>;
    let mut _442: isize;
    let mut _444: !;
    let mut _445: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _447: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _448: std::result::Result<u64, error::ErrorCode>;
    let mut _449: u64;
    let mut _450: u64;
    let mut _451: isize;
    let mut _453: !;
    let mut _454: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _456: ();
    let mut _457: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _458: std::result::Result<(), error::ErrorCode>;
    let mut _459: bool;
    let mut _460: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _461: std::result::Result<bool, error::ErrorCode>;
    let mut _462: u64;
    let mut _463: u64;
    let mut _464: isize;
    let mut _466: !;
    let mut _467: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _469: ();
    let _471: ();
    let mut _472: &str;
    let _473: &str;
    let mut _474: &std::string::String;
    let _475: &std::string::String;
    let _476: std::string::String;
    let mut _478: std::fmt::Arguments<'_>;
    let mut _479: &[&str];
    let mut _480: &[&str; 2];
    let _481: &[&str; 2];
    let _482: [&str; 2];
    let mut _483: &[core::fmt::rt::Argument<'_>];
    let mut _484: &[core::fmt::rt::Argument<'_>; 1];
    let _485: &[core::fmt::rt::Argument<'_>; 1];
    let _486: [core::fmt::rt::Argument<'_>; 1];
    let mut _487: core::fmt::rt::Argument<'_>;
    let mut _488: &error::ErrorCode;
    let _489: &error::ErrorCode;
    let _490: ();
    let mut _491: &str;
    let _492: &str;
    let mut _493: &std::string::String;
    let _494: &std::string::String;
    let _495: std::string::String;
    let mut _497: std::fmt::Arguments<'_>;
    let mut _498: &[&str];
    let mut _499: &[&str; 3];
    let _500: &[&str; 3];
    let _501: [&str; 3];
    let mut _502: &[core::fmt::rt::Argument<'_>];
    let mut _503: &[core::fmt::rt::Argument<'_>; 2];
    let _504: &[core::fmt::rt::Argument<'_>; 2];
    let _505: [core::fmt::rt::Argument<'_>; 2];
    let mut _506: core::fmt::rt::Argument<'_>;
    let mut _507: &u64;
    let _508: &u64;
    let mut _509: core::fmt::rt::Argument<'_>;
    let mut _510: &u64;
    let _511: &u64;
    let mut _512: error::ErrorCode;
    let mut _513: isize;
    let mut _515: !;
    let mut _516: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _519: bool;
    let mut _520: i128;
    let mut _521: controller::position::PositionDirection;
    let mut _522: u64;
    let mut _523: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _524: std::result::Result<u64, error::ErrorCode>;
    let mut _525: u64;
    let mut _526: isize;
    let mut _528: !;
    let mut _529: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _534: (i64, i64, u8);
    let mut _535: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (i64, i64, u8)>;
    let mut _536: std::result::Result<(i64, i64, u8), error::ErrorCode>;
    let mut _537: &state::order_params::OrderParams;
    let _538: &state::order_params::OrderParams;
    let mut _539: &state::oracle::OraclePriceData;
    let _540: &state::oracle::OraclePriceData;
    let mut _541: u64;
    let mut _542: &state::spot_market::SpotMarket;
    let mut _543: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _544: u8;
    let mut _545: isize;
    let mut _547: !;
    let mut _548: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _550: ();
    let mut _551: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _552: std::result::Result<(), error::ErrorCode>;
    let mut _553: bool;
    let mut _554: &state::spot_market::SpotMarket;
    let mut _555: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _556: ();
    let _558: ();
    let mut _559: &str;
    let _560: &str;
    let mut _561: &std::string::String;
    let _562: &std::string::String;
    let _563: std::string::String;
    let mut _565: std::fmt::Arguments<'_>;
    let mut _566: &[&str];
    let mut _567: &[&str; 2];
    let _568: &[&str; 2];
    let _569: [&str; 2];
    let mut _570: &[core::fmt::rt::Argument<'_>];
    let mut _571: &[core::fmt::rt::Argument<'_>; 1];
    let _572: &[core::fmt::rt::Argument<'_>; 1];
    let _573: [core::fmt::rt::Argument<'_>; 1];
    let mut _574: core::fmt::rt::Argument<'_>;
    let mut _575: &error::ErrorCode;
    let _576: &error::ErrorCode;
    let mut _577: error::ErrorCode;
    let mut _578: isize;
    let mut _580: !;
    let mut _581: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _583: ();
    let mut _584: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _585: std::result::Result<(), error::ErrorCode>;
    let mut _586: bool;
    let mut _587: u16;
    let mut _588: ();
    let _590: ();
    let mut _591: &str;
    let _592: &str;
    let mut _593: &std::string::String;
    let _594: &std::string::String;
    let _595: std::string::String;
    let mut _597: std::fmt::Arguments<'_>;
    let mut _598: &[&str];
    let mut _599: &[&str; 2];
    let _600: &[&str; 2];
    let _601: [&str; 2];
    let mut _602: &[core::fmt::rt::Argument<'_>];
    let mut _603: &[core::fmt::rt::Argument<'_>; 1];
    let _604: &[core::fmt::rt::Argument<'_>; 1];
    let _605: [core::fmt::rt::Argument<'_>; 1];
    let mut _606: core::fmt::rt::Argument<'_>;
    let mut _607: &error::ErrorCode;
    let _608: &error::ErrorCode;
    let _609: ();
    let mut _610: &str;
    let _611: &str;
    let mut _612: error::ErrorCode;
    let mut _613: isize;
    let mut _615: !;
    let mut _616: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _618: ();
    let mut _619: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _620: std::result::Result<(), error::ErrorCode>;
    let mut _621: bool;
    let mut _622: &state::user::MarketType;
    let mut _623: &state::user::MarketType;
    let _624: state::user::MarketType;
    let mut _625: ();
    let _627: ();
    let mut _628: &str;
    let _629: &str;
    let mut _630: &std::string::String;
    let _631: &std::string::String;
    let _632: std::string::String;
    let mut _634: std::fmt::Arguments<'_>;
    let mut _635: &[&str];
    let mut _636: &[&str; 2];
    let _637: &[&str; 2];
    let _638: [&str; 2];
    let mut _639: &[core::fmt::rt::Argument<'_>];
    let mut _640: &[core::fmt::rt::Argument<'_>; 1];
    let _641: &[core::fmt::rt::Argument<'_>; 1];
    let _642: [core::fmt::rt::Argument<'_>; 1];
    let mut _643: core::fmt::rt::Argument<'_>;
    let mut _644: &error::ErrorCode;
    let _645: &error::ErrorCode;
    let _646: ();
    let mut _647: &str;
    let _648: &str;
    let mut _649: error::ErrorCode;
    let mut _650: isize;
    let mut _652: !;
    let mut _653: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _657: bool;
    let mut _658: u8;
    let mut _659: u8;
    let mut _660: bool;
    let mut _661: bool;
    let mut _662: &state::order_params::OrderParams;
    let mut _663: state::user::OrderBitFlag;
    let mut _665: state::user::OrderStatus;
    let mut _666: state::user::OrderType;
    let mut _667: state::user::MarketType;
    let mut _668: u64;
    let mut _669: u32;
    let mut _671: u32;
    let mut _672: std::option::Option<u32>;
    let mut _673: std::option::Option<u32>;
    let mut _674: u32;
    let mut _675: std::option::Option<u32>;
    let mut _676: u8;
    let mut _677: u16;
    let mut _678: u64;
    let mut _679: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _680: std::result::Result<u64, error::ErrorCode>;
    let mut _681: u64;
    let mut _682: u64;
    let mut _683: &state::spot_market::SpotMarket;
    let mut _684: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _685: controller::position::PositionDirection;
    let mut _686: isize;
    let mut _688: !;
    let mut _689: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _691: controller::position::PositionDirection;
    let mut _692: u64;
    let mut _693: controller::position::PositionDirection;
    let mut _694: bool;
    let mut _695: u64;
    let mut _696: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _697: std::result::Result<u64, error::ErrorCode>;
    let mut _698: u64;
    let mut _699: std::option::Option<u64>;
    let mut _700: u64;
    let mut _701: &state::spot_market::SpotMarket;
    let mut _702: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _703: controller::position::PositionDirection;
    let mut _704: isize;
    let mut _706: !;
    let mut _707: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _709: state::user::OrderTriggerCondition;
    let mut _710: bool;
    let mut _711: &state::order_params::PostOnlyParam;
    let mut _712: &state::order_params::PostOnlyParam;
    let _713: state::order_params::PostOnlyParam;
    let mut _714: i32;
    let mut _715: std::option::Option<i32>;
    let mut _716: bool;
    let mut _717: &state::order_params::OrderParams;
    let mut _718: i64;
    let mut _719: i64;
    let mut _720: u8;
    let mut _721: i64;
    let mut _722: u8;
    let mut _723: u64;
    let mut _724: u8;
    let mut _725: [u8; 1];
    let _726: ();
    let mut _727: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _728: std::result::Result<(), error::ErrorCode>;
    let mut _729: &state::user::Order;
    let _730: &state::user::Order;
    let mut _731: u64;
    let mut _732: &state::spot_market::SpotMarket;
    let mut _733: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _734: u64;
    let mut _735: &state::spot_market::SpotMarket;
    let mut _736: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _737: isize;
    let mut _739: !;
    let mut _740: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _743: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _744: std::result::Result<bool, error::ErrorCode>;
    let mut _745: &state::user::Order;
    let _746: &state::user::Order;
    let mut _747: i64;
    let mut _748: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _749: std::result::Result<i64, error::ErrorCode>;
    let mut _750: i128;
    let mut _751: isize;
    let mut _753: !;
    let mut _754: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _756: i64;
    let _757: usize;
    let mut _758: usize;
    let mut _759: bool;
    let mut _760: i64;
    let _761: usize;
    let mut _762: usize;
    let mut _763: bool;
    let mut _764: isize;
    let mut _766: !;
    let mut _767: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _769: ();
    let mut _770: &mut state::user::User;
    let mut _771: bool;
    let mut _772: &state::user::Order;
    let mut _773: state::user::Order;
    let _774: usize;
    let mut _775: usize;
    let mut _776: bool;
    let _777: usize;
    let mut _778: usize;
    let mut _779: bool;
    let mut _780: (u8, bool);
    let _781: ();
    let mut _782: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _783: std::result::Result<(), error::ErrorCode>;
    let mut _784: &mut state::user::SpotPosition;
    let mut _785: &mut state::user::SpotPosition;
    let _786: usize;
    let mut _787: usize;
    let mut _788: bool;
    let mut _789: &controller::position::PositionDirection;
    let _790: &controller::position::PositionDirection;
    let mut _791: u64;
    let mut _792: bool;
    let mut _793: &state::user::Order;
    let mut _794: isize;
    let mut _796: !;
    let mut _797: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _799: ();
    let mut _800: &mut state::order_params::PlaceOrderOptions;
    let mut _801: bool;
    let _802: ();
    let mut _803: bool;
    let _804: ();
    let mut _805: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _806: std::result::Result<(), error::ErrorCode>;
    let mut _807: &state::user::User;
    let mut _808: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _809: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _810: &mut state::oracle_map::OracleMap<'_>;
    let mut _811: bool;
    let mut _812: isize;
    let mut _814: !;
    let mut _815: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _817: ();
    let mut _818: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _819: std::result::Result<(), error::ErrorCode>;
    let mut _820: &state::user::User;
    let mut _821: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _822: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _823: &mut state::oracle_map::OracleMap<'_>;
    let mut _824: isize;
    let mut _826: !;
    let mut _827: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _829: ();
    let mut _830: bool;
    let _831: ();
    let mut _832: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _833: std::result::Result<(), error::ErrorCode>;
    let mut _834: &state::user::Order;
    let _835: &state::user::Order;
    let _836: usize;
    let mut _837: usize;
    let mut _838: bool;
    let mut _839: i64;
    let mut _840: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _841: std::result::Result<i64, error::ErrorCode>;
    let mut _842: i128;
    let mut _843: isize;
    let mut _845: !;
    let mut _846: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _848: isize;
    let mut _850: !;
    let mut _851: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _857: (std::option::Option<anchor_lang::prelude::Pubkey>, std::option::Option<state::user::Order>, std::option::Option<anchor_lang::prelude::Pubkey>, std::option::Option<state::user::Order>);
    let mut _858: &anchor_lang::prelude::Pubkey;
    let _859: &anchor_lang::prelude::Pubkey;
    let mut _860: &state::user::Order;
    let _861: &state::user::Order;
    let mut _863: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::events::OrderActionRecord>;
    let mut _864: std::result::Result<state::events::OrderActionRecord, error::ErrorCode>;
    let mut _865: i64;
    let mut _866: state::events::OrderAction;
    let mut _867: state::events::OrderActionExplanation;
    let mut _868: u16;
    let mut _869: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _870: std::option::Option<u64>;
    let mut _871: std::option::Option<u64>;
    let mut _872: std::option::Option<u64>;
    let mut _873: std::option::Option<u64>;
    let mut _874: std::option::Option<u64>;
    let mut _875: std::option::Option<u64>;
    let mut _876: std::option::Option<u64>;
    let mut _877: std::option::Option<i64>;
    let mut _878: std::option::Option<u64>;
    let mut _879: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _880: std::option::Option<state::user::Order>;
    let mut _881: std::option::Option<anchor_lang::prelude::Pubkey>;
    let mut _882: std::option::Option<state::user::Order>;
    let mut _883: i64;
    let mut _884: std::option::Option<u64>;
    let mut _885: std::option::Option<u64>;
    let mut _886: std::option::Option<u64>;
    let mut _887: std::option::Option<u64>;
    let mut _888: std::option::Option<u64>;
    let mut _889: isize;
    let mut _891: !;
    let mut _892: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _894: ();
    let mut _895: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _896: std::result::Result<(), error::ErrorCode>;
    let mut _897: state::events::OrderActionRecord;
    let mut _898: isize;
    let mut _900: !;
    let mut _901: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _904: i64;
    let mut _905: anchor_lang::prelude::Pubkey;
    let mut _906: state::user::Order;
    let _907: usize;
    let mut _908: usize;
    let mut _909: bool;
    let _910: ();
    let mut _911: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _912: std::result::Result<(), error::ErrorCode>;
    let mut _913: state::events::OrderRecord;
    let mut _914: isize;
    let mut _916: !;
    let mut _917: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _919: ();
    let mut _920: &mut state::user::User;
    let mut _921: u64;
    let mut _922: ();
    let mut _939: isize;
    let mut _940: isize;
    let mut _941: isize;
    let mut _942: isize;
    let mut _943: isize;
    scope 1 {
        debug now => _10;
        let _11: u64;
        scope 2 {
            debug slot => _11;
            let _21: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _24: ();
            let _31: error::ErrorCode;
            let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _56: ();
            let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _74: ();
            let _83: error::ErrorCode;
            let _108: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _111: ();
            let _112: i64;
            let _114: i64;
            let _120: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _123: i64;
            scope 3 {
                debug residual => _21;
                scope 4 {
                }
            }
            scope 5 {
                debug val => _24;
                scope 6 {
                }
            }
            scope 7 {
                debug error_code => _31;
                let _38: std::string::String;
                let mut _938: &[&str; 2];
                scope 8 {
                    debug res => _38;
                }
            }
            scope 9 {
                debug residual => _53;
                scope 10 {
                }
            }
            scope 11 {
                debug val => _56;
                scope 12 {
                }
            }
            scope 13 {
                debug residual => _71;
                scope 14 {
                }
            }
            scope 15 {
                debug val => _74;
                scope 16 {
                }
            }
            scope 17 {
                debug error_code => _83;
                let _90: std::string::String;
                let mut _937: &[&str; 2];
                scope 18 {
                    debug res => _90;
                }
            }
            scope 19 {
                debug residual => _108;
                scope 20 {
                }
            }
            scope 21 {
                debug val => _111;
                scope 22 {
                }
            }
            scope 23 {
                debug max_ts => _112;
                let _137: std::string::String;
                let _154: usize;
                let _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _168: usize;
                let mut _923: &[&str; 3];
                scope 29 {
                    debug res => _137;
                }
                scope 30 {
                    debug new_order_index => _154;
                    let _172: std::option::Option<usize>;
                    let _202: u16;
                    scope 35 {
                        debug user_order_id_already_used => _172;
                        let _188: std::string::String;
                        let mut _924: &[&str; 1];
                        scope 36 {
                            debug res => _188;
                        }
                    }
                    scope 37 {
                        debug market_index => _202;
                        let _203: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
                        let _211: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _214: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                        scope 38 {
                            debug spot_market => _203;
                            let _215: bool;
                            scope 43 {
                                debug force_reduce_only => _215;
                                let _219: u64;
                                scope 44 {
                                    debug step_size => _219;
                                    let _228: error::ErrorCode;
                                    let _269: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _272: ();
                                    let _281: error::ErrorCode;
                                    let _306: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _309: ();
                                    let _310: usize;
                                    let _320: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _323: usize;
                                    scope 45 {
                                        debug error_code => _228;
                                        let _235: std::string::String;
                                        let _254: std::string::String;
                                        let mut _935: &[&str; 2];
                                        let mut _936: &[&str; 2];
                                        scope 46 {
                                            debug res => _235;
                                        }
                                        scope 47 {
                                            debug res => _254;
                                        }
                                    }
                                    scope 48 {
                                        debug residual => _269;
                                        scope 49 {
                                        }
                                    }
                                    scope 50 {
                                        debug val => _272;
                                        scope 51 {
                                        }
                                    }
                                    scope 52 {
                                        debug error_code => _281;
                                        let _288: std::string::String;
                                        let mut _934: &[&str; 2];
                                        scope 53 {
                                            debug res => _288;
                                        }
                                    }
                                    scope 54 {
                                        debug residual => _306;
                                        scope 55 {
                                        }
                                    }
                                    scope 56 {
                                        debug val => _309;
                                        scope 57 {
                                        }
                                    }
                                    scope 58 {
                                        debug spot_position_index => _310;
                                        let _324: state::spot_market::SpotBalanceType;
                                        scope 63 {
                                            debug balance_type => _324;
                                            let _328: u128;
                                            let _339: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _342: u128;
                                            scope 64 {
                                                debug token_amount => _328;
                                                let _343: i128;
                                                let _350: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _353: i128;
                                                scope 69 {
                                                    debug signed_token_amount => _343;
                                                    let _354: state::oracle::OraclePriceData;
                                                    let _366: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _369: &state::oracle::OraclePriceData;
                                                    scope 74 {
                                                        debug oracle_price_data => _354;
                                                        let _370: controller::position::PositionDirection;
                                                        let _371: u64;
                                                        let _380: error::ErrorCode;
                                                        let _424: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _427: ();
                                                        let _428: u64;
                                                        let _443: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _446: u64;
                                                        let _452: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _455: u64;
                                                        scope 79 {
                                                            debug existing_position_direction => _370;
                                                            debug order_base_asset_amount => _371;
                                                            let _531: i64;
                                                            let _532: i64;
                                                            let _533: u8;
                                                            let _546: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _549: (i64, i64, u8);
                                                            scope 112 {
                                                                debug auction_start_price => _531;
                                                                debug auction_end_price => _532;
                                                                debug auction_duration => _533;
                                                                let _557: error::ErrorCode;
                                                                let _579: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _582: ();
                                                                let _589: error::ErrorCode;
                                                                let _614: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _617: ();
                                                                let _626: error::ErrorCode;
                                                                let _651: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _654: ();
                                                                let mut _655: u8;
                                                                let mut _927: &state::user::MarketType;
                                                                scope 117 {
                                                                    debug error_code => _557;
                                                                    let _564: std::string::String;
                                                                    let mut _929: &[&str; 2];
                                                                    scope 118 {
                                                                        debug res => _564;
                                                                    }
                                                                }
                                                                scope 119 {
                                                                    debug residual => _579;
                                                                    scope 120 {
                                                                    }
                                                                }
                                                                scope 121 {
                                                                    debug val => _582;
                                                                    scope 122 {
                                                                    }
                                                                }
                                                                scope 123 {
                                                                    debug error_code => _589;
                                                                    let _596: std::string::String;
                                                                    let mut _928: &[&str; 2];
                                                                    scope 124 {
                                                                        debug res => _596;
                                                                    }
                                                                }
                                                                scope 125 {
                                                                    debug residual => _614;
                                                                    scope 126 {
                                                                    }
                                                                }
                                                                scope 127 {
                                                                    debug val => _617;
                                                                    scope 128 {
                                                                    }
                                                                }
                                                                scope 129 {
                                                                    debug error_code => _626;
                                                                    let _633: std::string::String;
                                                                    let mut _926: &[&str; 2];
                                                                    scope 130 {
                                                                        debug res => _633;
                                                                    }
                                                                }
                                                                scope 131 {
                                                                    debug residual => _651;
                                                                    scope 132 {
                                                                    }
                                                                }
                                                                scope 133 {
                                                                    debug val => _654;
                                                                    scope 134 {
                                                                    }
                                                                }
                                                                scope 135 {
                                                                    debug bit_flags => _655;
                                                                    let _656: bool;
                                                                    scope 136 {
                                                                        debug reduce_only => _656;
                                                                        let _664: state::user::Order;
                                                                        let _670: u32;
                                                                        let _687: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _690: u64;
                                                                        let _705: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _708: u64;
                                                                        let mut _925: &state::order_params::PostOnlyParam;
                                                                        scope 137 {
                                                                            debug new_order => _664;
                                                                            let _738: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _741: ();
                                                                            let _742: bool;
                                                                            let _752: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _755: i64;
                                                                            let _765: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                            let _768: bool;
                                                                            scope 147 {
                                                                                debug residual => _738;
                                                                                scope 148 {
                                                                                }
                                                                            }
                                                                            scope 149 {
                                                                                debug val => _741;
                                                                                scope 150 {
                                                                                }
                                                                            }
                                                                            scope 151 {
                                                                                debug risk_increasing => _742;
                                                                                let _795: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _798: ();
                                                                                let _813: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _816: ();
                                                                                let _825: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _828: ();
                                                                                let _844: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _847: i64;
                                                                                let _849: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _852: ();
                                                                                let _853: std::option::Option<anchor_lang::prelude::Pubkey>;
                                                                                let _854: std::option::Option<state::user::Order>;
                                                                                let _855: std::option::Option<anchor_lang::prelude::Pubkey>;
                                                                                let _856: std::option::Option<state::user::Order>;
                                                                                scope 160 {
                                                                                    debug residual => _795;
                                                                                    scope 161 {
                                                                                    }
                                                                                }
                                                                                scope 162 {
                                                                                    debug val => _798;
                                                                                    scope 163 {
                                                                                    }
                                                                                }
                                                                                scope 164 {
                                                                                    debug residual => _813;
                                                                                    scope 165 {
                                                                                    }
                                                                                }
                                                                                scope 166 {
                                                                                    debug val => _816;
                                                                                    scope 167 {
                                                                                    }
                                                                                }
                                                                                scope 168 {
                                                                                    debug residual => _825;
                                                                                    scope 169 {
                                                                                    }
                                                                                }
                                                                                scope 170 {
                                                                                    debug val => _828;
                                                                                    scope 171 {
                                                                                    }
                                                                                }
                                                                                scope 172 {
                                                                                    debug residual => _844;
                                                                                    scope 173 {
                                                                                    }
                                                                                }
                                                                                scope 174 {
                                                                                    debug val => _847;
                                                                                    scope 175 {
                                                                                    }
                                                                                }
                                                                                scope 176 {
                                                                                    debug residual => _849;
                                                                                    scope 177 {
                                                                                    }
                                                                                }
                                                                                scope 178 {
                                                                                    debug val => _852;
                                                                                    scope 179 {
                                                                                    }
                                                                                }
                                                                                scope 180 {
                                                                                    debug taker => _853;
                                                                                    debug taker_order => _854;
                                                                                    debug maker => _855;
                                                                                    debug maker_order => _856;
                                                                                    let _862: state::events::OrderActionRecord;
                                                                                    let _890: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _893: state::events::OrderActionRecord;
                                                                                    scope 181 {
                                                                                        debug order_action_record => _862;
                                                                                        let _899: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _902: ();
                                                                                        let _903: state::events::OrderRecord;
                                                                                        scope 186 {
                                                                                            debug residual => _899;
                                                                                            scope 187 {
                                                                                            }
                                                                                        }
                                                                                        scope 188 {
                                                                                            debug val => _902;
                                                                                            scope 189 {
                                                                                            }
                                                                                        }
                                                                                        scope 190 {
                                                                                            debug order_record => _903;
                                                                                            let _915: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                            let _918: ();
                                                                                            scope 191 {
                                                                                                debug residual => _915;
                                                                                                scope 192 {
                                                                                                }
                                                                                            }
                                                                                            scope 193 {
                                                                                                debug val => _918;
                                                                                                scope 194 {
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 182 {
                                                                                        debug residual => _890;
                                                                                        scope 183 {
                                                                                        }
                                                                                    }
                                                                                    scope 184 {
                                                                                        debug val => _893;
                                                                                        scope 185 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            scope 152 {
                                                                                debug residual => _752;
                                                                                scope 153 {
                                                                                }
                                                                            }
                                                                            scope 154 {
                                                                                debug val => _755;
                                                                                scope 155 {
                                                                                }
                                                                            }
                                                                            scope 156 {
                                                                                debug residual => _765;
                                                                                scope 157 {
                                                                                }
                                                                            }
                                                                            scope 158 {
                                                                                debug val => _768;
                                                                                scope 159 {
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 138 {
                                                                            debug current_id => _670;
                                                                        }
                                                                        scope 139 {
                                                                            debug residual => _687;
                                                                            scope 140 {
                                                                            }
                                                                        }
                                                                        scope 141 {
                                                                            debug val => _690;
                                                                            scope 142 {
                                                                            }
                                                                        }
                                                                        scope 143 {
                                                                            debug residual => _705;
                                                                            scope 144 {
                                                                            }
                                                                        }
                                                                        scope 145 {
                                                                            debug val => _708;
                                                                            scope 146 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 113 {
                                                                debug residual => _546;
                                                                scope 114 {
                                                                }
                                                            }
                                                            scope 115 {
                                                                debug val => _549;
                                                                scope 116 {
                                                                }
                                                            }
                                                        }
                                                        scope 80 {
                                                            debug error_code => _380;
                                                            let _387: std::string::String;
                                                            let _406: std::string::String;
                                                            let mut _932: &[&str; 2];
                                                            let mut _933: &[&str; 2];
                                                            scope 81 {
                                                                debug res => _387;
                                                            }
                                                            scope 82 {
                                                                debug res => _406;
                                                            }
                                                        }
                                                        scope 83 {
                                                            debug residual => _424;
                                                            scope 84 {
                                                            }
                                                        }
                                                        scope 85 {
                                                            debug val => _427;
                                                            scope 86 {
                                                            }
                                                        }
                                                        scope 87 {
                                                            debug base_asset_amount => _428;
                                                            let _465: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _468: bool;
                                                            let _470: error::ErrorCode;
                                                            let _514: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _517: ();
                                                            let _518: controller::position::PositionDirection;
                                                            scope 96 {
                                                                debug residual => _465;
                                                                scope 97 {
                                                                }
                                                            }
                                                            scope 98 {
                                                                debug val => _468;
                                                                scope 99 {
                                                                }
                                                            }
                                                            scope 100 {
                                                                debug error_code => _470;
                                                                let _477: std::string::String;
                                                                let _496: std::string::String;
                                                                let mut _930: &[&str; 3];
                                                                let mut _931: &[&str; 2];
                                                                scope 101 {
                                                                    debug res => _477;
                                                                }
                                                                scope 102 {
                                                                    debug res => _496;
                                                                }
                                                            }
                                                            scope 103 {
                                                                debug residual => _514;
                                                                scope 104 {
                                                                }
                                                            }
                                                            scope 105 {
                                                                debug val => _517;
                                                                scope 106 {
                                                                }
                                                            }
                                                            scope 107 {
                                                                debug existing_position_direction => _518;
                                                                let _527: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _530: u64;
                                                                scope 108 {
                                                                    debug residual => _527;
                                                                    scope 109 {
                                                                    }
                                                                }
                                                                scope 110 {
                                                                    debug val => _530;
                                                                    scope 111 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 88 {
                                                            debug residual => _443;
                                                            scope 89 {
                                                            }
                                                        }
                                                        scope 90 {
                                                            debug val => _446;
                                                            scope 91 {
                                                            }
                                                        }
                                                        scope 92 {
                                                            debug residual => _452;
                                                            scope 93 {
                                                            }
                                                        }
                                                        scope 94 {
                                                            debug val => _455;
                                                            scope 95 {
                                                            }
                                                        }
                                                    }
                                                    scope 75 {
                                                        debug residual => _366;
                                                        scope 76 {
                                                        }
                                                    }
                                                    scope 77 {
                                                        debug val => _369;
                                                        scope 78 {
                                                        }
                                                    }
                                                }
                                                scope 70 {
                                                    debug residual => _350;
                                                    scope 71 {
                                                    }
                                                }
                                                scope 72 {
                                                    debug val => _353;
                                                    scope 73 {
                                                    }
                                                }
                                            }
                                            scope 65 {
                                                debug residual => _339;
                                                scope 66 {
                                                }
                                            }
                                            scope 67 {
                                                debug val => _342;
                                                scope 68 {
                                                }
                                            }
                                        }
                                    }
                                    scope 59 {
                                        debug residual => _320;
                                        scope 60 {
                                        }
                                    }
                                    scope 61 {
                                        debug val => _323;
                                        scope 62 {
                                        }
                                    }
                                }
                            }
                        }
                        scope 39 {
                            debug residual => _211;
                            scope 40 {
                            }
                        }
                        scope 41 {
                            debug val => _214;
                            scope 42 {
                            }
                        }
                    }
                }
                scope 31 {
                    debug residual => _165;
                    scope 32 {
                    }
                }
                scope 33 {
                    debug val => _168;
                    scope 34 {
                    }
                }
            }
            scope 24 {
                debug max_ts => _114;
            }
            scope 25 {
                debug residual => _120;
                scope 26 {
                }
            }
            scope 27 {
                debug val => _123;
                scope 28 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_10);
        _10 = ((*_7).4: i64);
        StorageLive(_11);
        _11 = ((*_7).0: u64);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &mut (*_2);
        StorageLive(_16);
        _16 = &(*_4);
        StorageLive(_17);
        _17 = &(*_5);
        StorageLive(_18);
        _18 = &mut (*_6);
        StorageLive(_19);
        _19 = ((*_1).11: u32);
        _14 = validate_user_not_being_liquidated(move _15, move _16, move _17, move _18, move _19) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        _13 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _14) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_14);
        _20 = discriminant(_13);
        switchInt(move _20) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_24);
        _24 = ((_13 as Continue).0: ());
        _12 = _24;
        StorageDead(_24);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = &(*_2);
        _28 = User::is_bankrupt(move _29) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_21);
        _21 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_23);
        _23 = _21;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _23) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb407;
    }

    bb7: {
        switchInt(move _28) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        StorageDead(_29);
        StorageLive(_31);
        _31 = error::ErrorCode::UserBankrupt;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _938 = const _;
        _42 = &(*_938);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_31;
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _49) -> [return: bb10, unwind continue];
    }

    bb9: {
        StorageDead(_29);
        StorageLive(_30);
        _30 = ();
        _27 = std::result::Result::<(), error::ErrorCode>::Ok(move _30);
        StorageDead(_30);
        goto -> bb16;
    }

    bb10: {
        StorageDead(_49);
        _47 = [move _48];
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = move _45 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_45);
        _39 = Arguments::<'_>::new_v1(move _40, move _44) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_44);
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_39);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <String as Deref>::deref(move _35) -> [return: bb13, unwind: bb423];
    }

    bb13: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb14, unwind: bb423];
    }

    bb14: {
        StorageDead(_33);
        drop(_37) -> [return: bb15, unwind: bb424];
    }

    bb15: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_51);
        _51 = _31;
        _27 = std::result::Result::<(), error::ErrorCode>::Err(move _51);
        StorageDead(_51);
        StorageDead(_31);
        goto -> bb16;
    }

    bb16: {
        StorageDead(_28);
        _26 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _27) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_27);
        _52 = discriminant(_26);
        switchInt(move _52) -> [0: bb18, 1: bb19, otherwise: bb4];
    }

    bb18: {
        StorageLive(_56);
        _56 = ((_26 as Continue).0: ());
        _25 = _56;
        StorageDead(_56);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_57);
        StorageLive(_58);
        _58 = (_9.1: bool);
        switchInt(move _58) -> [0: bb22, otherwise: bb21];
    }

    bb19: {
        StorageLive(_53);
        _53 = ((_26 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_26);
        StorageDead(_25);
        goto -> bb407;
    }

    bb21: {
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &mut (*_2);
        StorageLive(_63);
        StorageLive(_64);
        _64 = &_3;
        _63 = &(*_64);
        StorageLive(_65);
        _65 = &(*_4);
        StorageLive(_66);
        _66 = &(*_5);
        StorageLive(_67);
        _67 = &mut (*_6);
        StorageLive(_68);
        _68 = _10;
        StorageLive(_69);
        _69 = _11;
        _61 = expire_orders(move _62, move _63, move _65, move _66, move _67, move _68, move _69) -> [return: bb23, unwind continue];
    }

    bb22: {
        _57 = const ();
        goto -> bb28;
    }

    bb23: {
        StorageDead(_69);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _61) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_61);
        _70 = discriminant(_60);
        switchInt(move _70) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_74);
        _74 = ((_60 as Continue).0: ());
        _59 = _74;
        StorageDead(_74);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_59);
        _57 = const ();
        goto -> bb28;
    }

    bb26: {
        StorageLive(_71);
        _71 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_64);
        StorageDead(_60);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        goto -> bb407;
    }

    bb28: {
        StorageDead(_58);
        StorageDead(_57);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _77 = &(*_2);
        _76 = User::is_reduce_only(move _77) -> [return: bb29, unwind continue];
    }

    bb29: {
        switchInt(move _76) -> [0: bb45, otherwise: bb30];
    }

    bb30: {
        StorageDead(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        _81 = (_8.7: bool);
        switchInt(move _81) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageLive(_82);
        _82 = ();
        _80 = std::result::Result::<(), error::ErrorCode>::Ok(move _82);
        StorageDead(_82);
        goto -> bb40;
    }

    bb32: {
        StorageLive(_83);
        _83 = error::ErrorCode::UserReduceOnly;
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _937 = const _;
        _94 = &(*_937);
        _93 = &(*_94);
        _92 = move _93 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_93);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &_83;
        _101 = &(*_102);
        _100 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _101) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_101);
        _99 = [move _100];
        StorageDead(_100);
        _98 = &_99;
        _97 = &(*_98);
        _96 = move _97 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_97);
        _91 = Arguments::<'_>::new_v1(move _92, move _96) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_96);
        StorageDead(_92);
        _90 = format(move _91) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_91);
        StorageDead(_102);
        StorageDead(_99);
        StorageDead(_98);
        StorageDead(_94);
        _89 = move _90;
        StorageDead(_90);
        _88 = &_89;
        _87 = &(*_88);
        _86 = <String as Deref>::deref(move _87) -> [return: bb36, unwind: bb422];
    }

    bb36: {
        _85 = &(*_86);
        StorageDead(_87);
        _84 = solana_program::log::sol_log(move _85) -> [return: bb37, unwind: bb422];
    }

    bb37: {
        StorageDead(_85);
        drop(_89) -> [return: bb38, unwind: bb424];
    }

    bb38: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_84);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = const "order must be reduce only";
        _104 = &(*_105);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_106);
        _106 = _83;
        _80 = std::result::Result::<(), error::ErrorCode>::Err(move _106);
        StorageDead(_106);
        StorageDead(_83);
        goto -> bb40;
    }

    bb40: {
        StorageDead(_81);
        _79 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _80) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_80);
        _107 = discriminant(_79);
        switchInt(move _107) -> [0: bb42, 1: bb43, otherwise: bb4];
    }

    bb42: {
        StorageLive(_111);
        _111 = ((_79 as Continue).0: ());
        _78 = _111;
        StorageDead(_111);
        StorageDead(_79);
        StorageDead(_78);
        _75 = const ();
        goto -> bb46;
    }

    bb43: {
        StorageLive(_108);
        _108 = ((_79 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_110);
        _110 = _108;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _110) -> [return: bb44, unwind continue];
    }

    bb44: {
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_79);
        StorageDead(_78);
        StorageDead(_76);
        StorageDead(_75);
        goto -> bb407;
    }

    bb45: {
        StorageDead(_77);
        _75 = const ();
        goto -> bb46;
    }

    bb46: {
        StorageDead(_76);
        StorageDead(_75);
        StorageLive(_112);
        _113 = discriminant((_8.10: std::option::Option<i64>));
        switchInt(move _113) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        _115 = discriminant((_8.0: state::user::OrderType));
        switchInt(move _115) -> [0: bb50, 4: bb50, otherwise: bb49];
    }

    bb48: {
        StorageLive(_114);
        _114 = (((_8.10: std::option::Option<i64>) as Some).0: i64);
        _112 = _114;
        StorageDead(_114);
        goto -> bb56;
    }

    bb49: {
        _112 = const 0_i64;
        goto -> bb56;
    }

    bb50: {
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = _10;
        _117 = <i64 as SafeMath>::safe_add(move _118, const 30_i64) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_118);
        _116 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _117) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_117);
        _119 = discriminant(_116);
        switchInt(move _119) -> [0: bb53, 1: bb54, otherwise: bb4];
    }

    bb53: {
        StorageLive(_123);
        _123 = ((_116 as Continue).0: i64);
        _112 = _123;
        StorageDead(_123);
        StorageDead(_116);
        goto -> bb56;
    }

    bb54: {
        StorageLive(_120);
        _120 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_122);
        _122 = _120;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _122) -> [return: bb55, unwind continue];
    }

    bb55: {
        StorageDead(_122);
        StorageDead(_120);
        StorageDead(_116);
        goto -> bb406;
    }

    bb56: {
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = _112;
        _125 = Ne(move _126, const 0_i64);
        switchInt(move _125) -> [0: bb67, otherwise: bb57];
    }

    bb57: {
        StorageDead(_126);
        StorageLive(_127);
        StorageLive(_128);
        _128 = _112;
        StorageLive(_129);
        _129 = _10;
        _127 = Lt(move _128, move _129);
        switchInt(move _127) -> [0: bb66, otherwise: bb58];
    }

    bb58: {
        StorageDead(_129);
        StorageDead(_128);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        _923 = const _;
        _141 = &(*_923);
        _140 = &(*_141);
        _139 = move _140 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_140);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        _149 = &_112;
        _148 = &(*_149);
        _147 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _148) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_148);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        _152 = &_10;
        _151 = &(*_152);
        _150 = core::fmt::rt::Argument::<'_>::new_display::<i64>(move _151) -> [return: bb60, unwind continue];
    }

    bb60: {
        StorageDead(_151);
        _146 = [move _147, move _150];
        StorageDead(_150);
        StorageDead(_147);
        _145 = &_146;
        _144 = &(*_145);
        _143 = move _144 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_144);
        _138 = Arguments::<'_>::new_v1(move _139, move _143) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_143);
        StorageDead(_139);
        _137 = format(move _138) -> [return: bb62, unwind continue];
    }

    bb62: {
        StorageDead(_138);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_146);
        StorageDead(_145);
        StorageDead(_141);
        _136 = move _137;
        StorageDead(_137);
        _135 = &_136;
        _134 = &(*_135);
        _133 = <String as Deref>::deref(move _134) -> [return: bb63, unwind: bb421];
    }

    bb63: {
        _132 = &(*_133);
        StorageDead(_134);
        _131 = solana_program::log::sol_log(move _132) -> [return: bb64, unwind: bb421];
    }

    bb64: {
        StorageDead(_132);
        drop(_136) -> [return: bb65, unwind: bb424];
    }

    bb65: {
        StorageDead(_136);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageLive(_153);
        _153 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _153);
        StorageDead(_153);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_124);
        goto -> bb406;
    }

    bb66: {
        StorageDead(_129);
        StorageDead(_128);
        goto -> bb68;
    }

    bb67: {
        StorageDead(_126);
        goto -> bb68;
    }

    bb68: {
        _124 = const ();
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_124);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        _161 = &((*_2).5: [state::user::Order; 32]);
        _160 = move _161 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_161);
        _159 = core::slice::<impl [Order]>::iter(move _160) -> [return: bb69, unwind continue];
    }

    bb69: {
        _158 = &mut _159;
        StorageDead(_160);
        StorageLive(_162);
        _162 = {closure@programs/drift/src/controller/orders.rs:3451:19: 3451:26};
        _157 = <std::slice::Iter<'_, Order> as Iterator>::position::<{closure@programs/drift/src/controller/orders.rs:3451:19: 3451:26}>(move _158, move _162) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_162);
        StorageDead(_158);
        StorageLive(_163);
        _163 = error::ErrorCode::MaxNumberOfOrders;
        _156 = Option::<usize>::ok_or::<error::ErrorCode>(move _157, move _163) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_163);
        StorageDead(_157);
        _155 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _156) -> [return: bb72, unwind continue];
    }

    bb72: {
        StorageDead(_156);
        _164 = discriminant(_155);
        switchInt(move _164) -> [0: bb73, 1: bb74, otherwise: bb4];
    }

    bb73: {
        StorageLive(_168);
        _168 = ((_155 as Continue).0: usize);
        _154 = _168;
        StorageDead(_168);
        StorageDead(_159);
        StorageDead(_155);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = (_8.3: u8);
        _170 = Gt(move _171, const 0_u8);
        switchInt(move _170) -> [0: bb77, otherwise: bb76];
    }

    bb74: {
        StorageLive(_165);
        _165 = ((_155 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_167);
        _167 = _165;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _167) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_167);
        StorageDead(_165);
        StorageDead(_159);
        StorageDead(_155);
        goto -> bb405;
    }

    bb76: {
        StorageDead(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &((*_2).5: [state::user::Order; 32]);
        _175 = move _176 as &[state::user::Order] (PointerCoercion(Unsize));
        StorageDead(_176);
        _174 = core::slice::<impl [Order]>::iter(move _175) -> [return: bb78, unwind continue];
    }

    bb77: {
        StorageDead(_171);
        _169 = const ();
        goto -> bb89;
    }

    bb78: {
        _173 = &mut _174;
        StorageDead(_175);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &_8;
        _177 = {closure@programs/drift/src/controller/orders.rs:3458:23: 3458:30} { params: move _178 };
        StorageDead(_178);
        _172 = <std::slice::Iter<'_, Order> as Iterator>::position::<{closure@programs/drift/src/controller/orders.rs:3458:23: 3458:30}>(move _173, move _177) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_177);
        StorageDead(_173);
        StorageDead(_174);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_172;
        _179 = Option::<usize>::is_some(move _180) -> [return: bb80, unwind continue];
    }

    bb80: {
        switchInt(move _179) -> [0: bb88, otherwise: bb81];
    }

    bb81: {
        StorageDead(_180);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _924 = const _;
        _192 = &(*_924);
        _191 = &(*_192);
        _190 = move _191 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_191);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        _200 = &(_8.3: u8);
        _199 = &(*_200);
        _198 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _199) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_199);
        _197 = [move _198];
        StorageDead(_198);
        _196 = &_197;
        _195 = &(*_196);
        _194 = move _195 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_195);
        _189 = Arguments::<'_>::new_v1(move _190, move _194) -> [return: bb83, unwind continue];
    }

    bb83: {
        StorageDead(_194);
        StorageDead(_190);
        _188 = format(move _189) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_189);
        StorageDead(_200);
        StorageDead(_197);
        StorageDead(_196);
        StorageDead(_192);
        _187 = move _188;
        StorageDead(_188);
        _186 = &_187;
        _185 = &(*_186);
        _184 = <String as Deref>::deref(move _185) -> [return: bb85, unwind: bb420];
    }

    bb85: {
        _183 = &(*_184);
        StorageDead(_185);
        _182 = solana_program::log::sol_log(move _183) -> [return: bb86, unwind: bb420];
    }

    bb86: {
        StorageDead(_183);
        drop(_187) -> [return: bb87, unwind: bb424];
    }

    bb87: {
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_184);
        StorageDead(_182);
        StorageLive(_201);
        _201 = error::ErrorCode::UserOrderIdAlreadyInUse;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _201);
        StorageDead(_201);
        StorageDead(_179);
        StorageDead(_172);
        StorageDead(_170);
        StorageDead(_169);
        goto -> bb405;
    }

    bb88: {
        StorageDead(_180);
        _169 = const ();
        StorageDead(_179);
        StorageDead(_172);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_202);
        _202 = (_8.6: u16);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = &(*_5);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_202;
        _208 = &(*_209);
        _206 = SpotMarketMap::<'_>::get_ref(move _207, move _208) -> [return: bb90, unwind continue];
    }

    bb90: {
        StorageDead(_208);
        StorageDead(_207);
        _205 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _206) -> [return: bb91, unwind: bb424];
    }

    bb91: {
        StorageDead(_206);
        _210 = discriminant(_205);
        switchInt(move _210) -> [0: bb92, 1: bb93, otherwise: bb4];
    }

    bb92: {
        StorageLive(_214);
        _214 = move ((_205 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _204 = move _214;
        StorageDead(_214);
        _203 = &_204;
        _941 = discriminant(_205);
        StorageDead(_209);
        StorageDead(_205);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        _218 = &(*_203);
        _217 = <Ref<'_, SpotMarket> as Deref>::deref(move _218) -> [return: bb95, unwind: bb419];
    }

    bb93: {
        StorageLive(_211);
        _211 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_213);
        _213 = _211;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _213) -> [return: bb94, unwind: bb425];
    }

    bb94: {
        StorageDead(_213);
        StorageDead(_211);
        _939 = discriminant(_205);
        StorageDead(_209);
        StorageDead(_205);
        goto -> bb404;
    }

    bb95: {
        _216 = &(*_217);
        StorageDead(_218);
        _215 = SpotMarket::is_reduce_only(move _216) -> [return: bb96, unwind: bb419];
    }

    bb96: {
        StorageDead(_216);
        StorageDead(_217);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        _221 = &(*_203);
        _220 = <Ref<'_, SpotMarket> as Deref>::deref(move _221) -> [return: bb97, unwind: bb419];
    }

    bb97: {
        StorageDead(_221);
        _219 = ((*_220).25: u64);
        StorageDead(_220);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        _226 = ((*_2).27: u8);
        _225 = Eq(move _226, const 0_u8);
        switchInt(move _225) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        StorageDead(_226);
        StorageLive(_227);
        _227 = ();
        _224 = std::result::Result::<(), error::ErrorCode>::Ok(move _227);
        StorageDead(_227);
        goto -> bb112;
    }

    bb99: {
        StorageDead(_226);
        StorageLive(_228);
        _228 = error::ErrorCode::InvalidPoolId;
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        _936 = const _;
        _239 = &(*_936);
        _238 = &(*_239);
        _237 = move _238 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_238);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = &_228;
        _246 = &(*_247);
        _245 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _246) -> [return: bb100, unwind: bb419];
    }

    bb100: {
        StorageDead(_246);
        _244 = [move _245];
        StorageDead(_245);
        _243 = &_244;
        _242 = &(*_243);
        _241 = move _242 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_242);
        _236 = Arguments::<'_>::new_v1(move _237, move _241) -> [return: bb101, unwind: bb419];
    }

    bb101: {
        StorageDead(_241);
        StorageDead(_237);
        _235 = format(move _236) -> [return: bb102, unwind: bb419];
    }

    bb102: {
        StorageDead(_236);
        StorageDead(_247);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_239);
        _234 = move _235;
        StorageDead(_235);
        _233 = &_234;
        _232 = &(*_233);
        _231 = <String as Deref>::deref(move _232) -> [return: bb103, unwind: bb418];
    }

    bb103: {
        _230 = &(*_231);
        StorageDead(_232);
        _229 = solana_program::log::sol_log(move _230) -> [return: bb104, unwind: bb418];
    }

    bb104: {
        StorageDead(_230);
        drop(_234) -> [return: bb105, unwind: bb419];
    }

    bb105: {
        StorageDead(_234);
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_229);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _935 = const _;
        _258 = &(*_935);
        _257 = &(*_258);
        _256 = move _257 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_257);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &((*_2).27: u8);
        _265 = &(*_266);
        _264 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _265) -> [return: bb106, unwind: bb419];
    }

    bb106: {
        StorageDead(_265);
        _263 = [move _264];
        StorageDead(_264);
        _262 = &_263;
        _261 = &(*_262);
        _260 = move _261 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_261);
        _255 = Arguments::<'_>::new_v1(move _256, move _260) -> [return: bb107, unwind: bb419];
    }

    bb107: {
        StorageDead(_260);
        StorageDead(_256);
        _254 = format(move _255) -> [return: bb108, unwind: bb419];
    }

    bb108: {
        StorageDead(_255);
        StorageDead(_266);
        StorageDead(_263);
        StorageDead(_262);
        StorageDead(_258);
        _253 = move _254;
        StorageDead(_254);
        _252 = &_253;
        _251 = &(*_252);
        _250 = <String as Deref>::deref(move _251) -> [return: bb109, unwind: bb417];
    }

    bb109: {
        _249 = &(*_250);
        StorageDead(_251);
        _248 = solana_program::log::sol_log(move _249) -> [return: bb110, unwind: bb417];
    }

    bb110: {
        StorageDead(_249);
        drop(_253) -> [return: bb111, unwind: bb419];
    }

    bb111: {
        StorageDead(_253);
        StorageDead(_252);
        StorageDead(_250);
        StorageDead(_248);
        StorageLive(_267);
        _267 = _228;
        _224 = std::result::Result::<(), error::ErrorCode>::Err(move _267);
        StorageDead(_267);
        StorageDead(_228);
        goto -> bb112;
    }

    bb112: {
        StorageDead(_225);
        _223 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _224) -> [return: bb113, unwind: bb419];
    }

    bb113: {
        StorageDead(_224);
        _268 = discriminant(_223);
        switchInt(move _268) -> [0: bb114, 1: bb115, otherwise: bb4];
    }

    bb114: {
        StorageLive(_272);
        _272 = ((_223 as Continue).0: ());
        _222 = _272;
        StorageDead(_272);
        StorageDead(_223);
        StorageDead(_222);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        StorageLive(_277);
        StorageLive(_278);
        _278 = &(*_203);
        _277 = <Ref<'_, SpotMarket> as Deref>::deref(move _278) -> [return: bb117, unwind: bb419];
    }

    bb115: {
        StorageLive(_269);
        _269 = ((_223 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_271);
        _271 = _269;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _271) -> [return: bb116, unwind: bb419];
    }

    bb116: {
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_223);
        StorageDead(_222);
        goto -> bb403;
    }

    bb117: {
        StorageDead(_278);
        _279 = discriminant(((*_277).45: state::perp_market::MarketStatus));
        switchInt(move _279) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        _276 = const false;
        goto -> bb120;
    }

    bb119: {
        _276 = const true;
        goto -> bb120;
    }

    bb120: {
        switchInt(move _276) -> [0: bb121, otherwise: bb122];
    }

    bb121: {
        StorageDead(_277);
        StorageLive(_280);
        _280 = ();
        _275 = std::result::Result::<(), error::ErrorCode>::Ok(move _280);
        StorageDead(_280);
        goto -> bb130;
    }

    bb122: {
        StorageDead(_277);
        StorageLive(_281);
        _281 = error::ErrorCode::MarketBeingInitialized;
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        _934 = const _;
        _292 = &(*_934);
        _291 = &(*_292);
        _290 = move _291 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_291);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        StorageLive(_300);
        _300 = &_281;
        _299 = &(*_300);
        _298 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _299) -> [return: bb123, unwind: bb419];
    }

    bb123: {
        StorageDead(_299);
        _297 = [move _298];
        StorageDead(_298);
        _296 = &_297;
        _295 = &(*_296);
        _294 = move _295 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_295);
        _289 = Arguments::<'_>::new_v1(move _290, move _294) -> [return: bb124, unwind: bb419];
    }

    bb124: {
        StorageDead(_294);
        StorageDead(_290);
        _288 = format(move _289) -> [return: bb125, unwind: bb419];
    }

    bb125: {
        StorageDead(_289);
        StorageDead(_300);
        StorageDead(_297);
        StorageDead(_296);
        StorageDead(_292);
        _287 = move _288;
        StorageDead(_288);
        _286 = &_287;
        _285 = &(*_286);
        _284 = <String as Deref>::deref(move _285) -> [return: bb126, unwind: bb416];
    }

    bb126: {
        _283 = &(*_284);
        StorageDead(_285);
        _282 = solana_program::log::sol_log(move _283) -> [return: bb127, unwind: bb416];
    }

    bb127: {
        StorageDead(_283);
        drop(_287) -> [return: bb128, unwind: bb419];
    }

    bb128: {
        StorageDead(_287);
        StorageDead(_286);
        StorageDead(_284);
        StorageDead(_282);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        _303 = const "Market is being initialized";
        _302 = &(*_303);
        _301 = solana_program::log::sol_log(move _302) -> [return: bb129, unwind: bb419];
    }

    bb129: {
        StorageDead(_302);
        StorageDead(_303);
        StorageDead(_301);
        StorageLive(_304);
        _304 = _281;
        _275 = std::result::Result::<(), error::ErrorCode>::Err(move _304);
        StorageDead(_304);
        StorageDead(_281);
        goto -> bb130;
    }

    bb130: {
        StorageDead(_276);
        _274 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _275) -> [return: bb131, unwind: bb419];
    }

    bb131: {
        StorageDead(_275);
        _305 = discriminant(_274);
        switchInt(move _305) -> [0: bb132, 1: bb133, otherwise: bb4];
    }

    bb132: {
        StorageLive(_309);
        _309 = ((_274 as Continue).0: ());
        _273 = _309;
        StorageDead(_309);
        StorageDead(_274);
        StorageDead(_273);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        _314 = &(*_2);
        StorageLive(_315);
        _315 = _202;
        _313 = User::get_spot_position_index(move _314, move _315) -> [return: bb135, unwind: bb419];
    }

    bb133: {
        StorageLive(_306);
        _306 = ((_274 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_308);
        _308 = _306;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _308) -> [return: bb134, unwind: bb419];
    }

    bb134: {
        StorageDead(_308);
        StorageDead(_306);
        StorageDead(_274);
        StorageDead(_273);
        goto -> bb403;
    }

    bb135: {
        StorageDead(_315);
        StorageDead(_314);
        StorageLive(_316);
        StorageLive(_317);
        _317 = &mut _2;
        StorageLive(_318);
        _318 = &_202;
        _316 = {closure@programs/drift/src/controller/orders.rs:3486:18: 3486:21} { user: move _317, market_index: move _318 };
        StorageDead(_318);
        StorageDead(_317);
        _312 = std::result::Result::<usize, error::ErrorCode>::or_else::<error::ErrorCode, {closure@programs/drift/src/controller/orders.rs:3486:18: 3486:21}>(move _313, move _316) -> [return: bb136, unwind: bb419];
    }

    bb136: {
        StorageDead(_316);
        StorageDead(_313);
        _311 = <std::result::Result<usize, error::ErrorCode> as Try>::branch(move _312) -> [return: bb137, unwind: bb419];
    }

    bb137: {
        StorageDead(_312);
        _319 = discriminant(_311);
        switchInt(move _319) -> [0: bb138, 1: bb139, otherwise: bb4];
    }

    bb138: {
        StorageLive(_323);
        _323 = ((_311 as Continue).0: usize);
        _310 = _323;
        StorageDead(_323);
        StorageDead(_311);
        StorageLive(_324);
        StorageLive(_325);
        _325 = _310;
        _326 = Len(((*_2).3: [state::user::SpotPosition; 8]));
        _327 = Lt(_325, _326);
        assert(move _327, "index out of bounds: the length is {} but the index is {}", move _326, _325) -> [success: bb141, unwind: bb419];
    }

    bb139: {
        StorageLive(_320);
        _320 = ((_311 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_322);
        _322 = _320;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _322) -> [return: bb140, unwind: bb419];
    }

    bb140: {
        StorageDead(_322);
        StorageDead(_320);
        StorageDead(_311);
        goto -> bb402;
    }

    bb141: {
        _324 = (((*_2).3: [state::user::SpotPosition; 8])[_325].5: state::spot_market::SpotBalanceType);
        StorageDead(_325);
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = _310;
        _333 = Len(((*_2).3: [state::user::SpotPosition; 8]));
        _334 = Lt(_332, _333);
        assert(move _334, "index out of bounds: the length is {} but the index is {}", move _333, _332) -> [success: bb142, unwind: bb419];
    }

    bb142: {
        _331 = &((*_2).3: [state::user::SpotPosition; 8])[_332];
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        _337 = &(*_203);
        _336 = <Ref<'_, SpotMarket> as Deref>::deref(move _337) -> [return: bb143, unwind: bb419];
    }

    bb143: {
        _335 = &(*_336);
        StorageDead(_337);
        _330 = SpotPosition::get_token_amount(move _331, move _335) -> [return: bb144, unwind: bb419];
    }

    bb144: {
        StorageDead(_335);
        StorageDead(_331);
        _329 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _330) -> [return: bb145, unwind: bb419];
    }

    bb145: {
        StorageDead(_330);
        _338 = discriminant(_329);
        switchInt(move _338) -> [0: bb146, 1: bb147, otherwise: bb4];
    }

    bb146: {
        StorageLive(_342);
        _342 = ((_329 as Continue).0: u128);
        _328 = _342;
        StorageDead(_342);
        StorageDead(_336);
        StorageDead(_332);
        StorageDead(_329);
        StorageLive(_343);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = _328;
        StorageLive(_347);
        StorageLive(_348);
        _348 = &_324;
        _347 = &(*_348);
        _345 = get_signed_token_amount(move _346, move _347) -> [return: bb149, unwind: bb419];
    }

    bb147: {
        StorageLive(_339);
        _339 = ((_329 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_341);
        _341 = _339;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _341) -> [return: bb148, unwind: bb419];
    }

    bb148: {
        StorageDead(_341);
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_332);
        StorageDead(_329);
        goto -> bb401;
    }

    bb149: {
        StorageDead(_347);
        StorageDead(_346);
        _344 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _345) -> [return: bb150, unwind: bb419];
    }

    bb150: {
        StorageDead(_345);
        _349 = discriminant(_344);
        switchInt(move _349) -> [0: bb151, 1: bb152, otherwise: bb4];
    }

    bb151: {
        StorageLive(_353);
        _353 = ((_344 as Continue).0: i128);
        _343 = _353;
        StorageDead(_353);
        StorageDead(_348);
        StorageDead(_344);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        _358 = &mut (*_6);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        StorageLive(_363);
        StorageLive(_364);
        _364 = &(*_203);
        _363 = <Ref<'_, SpotMarket> as Deref>::deref(move _364) -> [return: bb154, unwind: bb419];
    }

    bb152: {
        StorageLive(_350);
        _350 = ((_344 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_352);
        _352 = _350;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _352) -> [return: bb153, unwind: bb419];
    }

    bb153: {
        StorageDead(_352);
        StorageDead(_350);
        StorageDead(_348);
        StorageDead(_344);
        goto -> bb400;
    }

    bb154: {
        _362 = &(*_363);
        StorageDead(_364);
        _361 = SpotMarket::oracle_id(move _362) -> [return: bb155, unwind: bb419];
    }

    bb155: {
        StorageDead(_362);
        _360 = &_361;
        _359 = &(*_360);
        _357 = OracleMap::<'_>::get_price_data(move _358, move _359) -> [return: bb156, unwind: bb419];
    }

    bb156: {
        StorageDead(_359);
        StorageDead(_358);
        _356 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _357) -> [return: bb157, unwind: bb419];
    }

    bb157: {
        StorageDead(_357);
        _365 = discriminant(_356);
        switchInt(move _365) -> [0: bb158, 1: bb159, otherwise: bb4];
    }

    bb158: {
        StorageLive(_369);
        _369 = ((_356 as Continue).0: &state::oracle::OraclePriceData);
        _355 = _369;
        StorageDead(_369);
        _354 = (*_355);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_356);
        StorageDead(_355);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        _377 = (_8.4: u64);
        StorageLive(_378);
        _378 = _219;
        _376 = Ge(move _377, move _378);
        switchInt(move _376) -> [0: bb162, otherwise: bb161];
    }

    bb159: {
        StorageLive(_366);
        _366 = ((_356 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_368);
        _368 = _366;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _368) -> [return: bb160, unwind: bb419];
    }

    bb160: {
        StorageDead(_368);
        StorageDead(_366);
        StorageDead(_363);
        StorageDead(_361);
        StorageDead(_360);
        StorageDead(_356);
        StorageDead(_355);
        goto -> bb399;
    }

    bb161: {
        StorageDead(_378);
        StorageDead(_377);
        StorageLive(_379);
        _379 = ();
        _375 = std::result::Result::<(), error::ErrorCode>::Ok(move _379);
        StorageDead(_379);
        goto -> bb176;
    }

    bb162: {
        StorageDead(_378);
        StorageDead(_377);
        StorageLive(_380);
        _380 = error::ErrorCode::InvalidOrderSizeTooSmall;
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _933 = const _;
        _391 = &(*_933);
        _390 = &(*_391);
        _389 = move _390 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_390);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        _399 = &_380;
        _398 = &(*_399);
        _397 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _398) -> [return: bb163, unwind: bb419];
    }

    bb163: {
        StorageDead(_398);
        _396 = [move _397];
        StorageDead(_397);
        _395 = &_396;
        _394 = &(*_395);
        _393 = move _394 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_394);
        _388 = Arguments::<'_>::new_v1(move _389, move _393) -> [return: bb164, unwind: bb419];
    }

    bb164: {
        StorageDead(_393);
        StorageDead(_389);
        _387 = format(move _388) -> [return: bb165, unwind: bb419];
    }

    bb165: {
        StorageDead(_388);
        StorageDead(_399);
        StorageDead(_396);
        StorageDead(_395);
        StorageDead(_391);
        _386 = move _387;
        StorageDead(_387);
        _385 = &_386;
        _384 = &(*_385);
        _383 = <String as Deref>::deref(move _384) -> [return: bb166, unwind: bb415];
    }

    bb166: {
        _382 = &(*_383);
        StorageDead(_384);
        _381 = solana_program::log::sol_log(move _382) -> [return: bb167, unwind: bb415];
    }

    bb167: {
        StorageDead(_382);
        drop(_386) -> [return: bb168, unwind: bb419];
    }

    bb168: {
        StorageDead(_386);
        StorageDead(_385);
        StorageDead(_383);
        StorageDead(_381);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        StorageLive(_410);
        _932 = const _;
        _410 = &(*_932);
        _409 = &(*_410);
        _408 = move _409 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_409);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        StorageLive(_416);
        StorageLive(_417);
        StorageLive(_418);
        _418 = &(_8.4: u64);
        _417 = &(*_418);
        _416 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _417) -> [return: bb169, unwind: bb419];
    }

    bb169: {
        StorageDead(_417);
        StorageLive(_419);
        StorageLive(_420);
        StorageLive(_421);
        _421 = &_219;
        _420 = &(*_421);
        _419 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _420) -> [return: bb170, unwind: bb419];
    }

    bb170: {
        StorageDead(_420);
        _415 = [move _416, move _419];
        StorageDead(_419);
        StorageDead(_416);
        _414 = &_415;
        _413 = &(*_414);
        _412 = move _413 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_413);
        _407 = Arguments::<'_>::new_v1(move _408, move _412) -> [return: bb171, unwind: bb419];
    }

    bb171: {
        StorageDead(_412);
        StorageDead(_408);
        _406 = format(move _407) -> [return: bb172, unwind: bb419];
    }

    bb172: {
        StorageDead(_407);
        StorageDead(_421);
        StorageDead(_418);
        StorageDead(_415);
        StorageDead(_414);
        StorageDead(_410);
        _405 = move _406;
        StorageDead(_406);
        _404 = &_405;
        _403 = &(*_404);
        _402 = <String as Deref>::deref(move _403) -> [return: bb173, unwind: bb414];
    }

    bb173: {
        _401 = &(*_402);
        StorageDead(_403);
        _400 = solana_program::log::sol_log(move _401) -> [return: bb174, unwind: bb414];
    }

    bb174: {
        StorageDead(_401);
        drop(_405) -> [return: bb175, unwind: bb419];
    }

    bb175: {
        StorageDead(_405);
        StorageDead(_404);
        StorageDead(_402);
        StorageDead(_400);
        StorageLive(_422);
        _422 = _380;
        _375 = std::result::Result::<(), error::ErrorCode>::Err(move _422);
        StorageDead(_422);
        StorageDead(_380);
        goto -> bb176;
    }

    bb176: {
        StorageDead(_376);
        _374 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _375) -> [return: bb177, unwind: bb419];
    }

    bb177: {
        StorageDead(_375);
        _423 = discriminant(_374);
        switchInt(move _423) -> [0: bb178, 1: bb179, otherwise: bb4];
    }

    bb178: {
        StorageLive(_427);
        _427 = ((_374 as Continue).0: ());
        _373 = _427;
        StorageDead(_427);
        StorageDead(_374);
        StorageDead(_373);
        StorageLive(_428);
        StorageLive(_429);
        StorageLive(_430);
        _430 = (_8.4: u64);
        _429 = Eq(move _430, const _);
        switchInt(move _429) -> [0: bb182, otherwise: bb181];
    }

    bb179: {
        StorageLive(_424);
        _424 = ((_374 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_426);
        _426 = _424;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _426) -> [return: bb180, unwind: bb419];
    }

    bb180: {
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_374);
        StorageDead(_373);
        goto -> bb398;
    }

    bb181: {
        StorageDead(_430);
        StorageLive(_431);
        StorageLive(_432);
        _432 = &_8;
        _431 = order_params::OrderParams::is_trigger_order(move _432) -> [return: bb183, unwind: bb419];
    }

    bb182: {
        StorageDead(_430);
        goto -> bb192;
    }

    bb183: {
        switchInt(move _431) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        StorageDead(_432);
        StorageLive(_433);
        _433 = (_8.7: bool);
        switchInt(move _433) -> [0: bb186, otherwise: bb192];
    }

    bb185: {
        StorageDead(_432);
        goto -> bb186;
    }

    bb186: {
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        _436 = &(*_2);
        StorageLive(_437);
        _437 = (_8.6: u16);
        StorageLive(_438);
        _438 = (_8.2: controller::position::PositionDirection);
        StorageLive(_439);
        _439 = &(*_4);
        StorageLive(_440);
        _440 = &(*_5);
        StorageLive(_441);
        _441 = &mut (*_6);
        _435 = math::orders::calculate_max_spot_order_size(move _436, move _437, move _438, move _439, move _440, move _441) -> [return: bb187, unwind: bb419];
    }

    bb187: {
        StorageDead(_441);
        StorageDead(_440);
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_437);
        StorageDead(_436);
        _434 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _435) -> [return: bb188, unwind: bb419];
    }

    bb188: {
        StorageDead(_435);
        _442 = discriminant(_434);
        switchInt(move _442) -> [0: bb189, 1: bb190, otherwise: bb4];
    }

    bb189: {
        StorageLive(_446);
        _446 = ((_434 as Continue).0: u64);
        _428 = _446;
        StorageDead(_446);
        StorageDead(_434);
        goto -> bb198;
    }

    bb190: {
        StorageLive(_443);
        _443 = ((_434 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_445);
        _445 = _443;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _445) -> [return: bb191, unwind: bb419];
    }

    bb191: {
        StorageDead(_445);
        StorageDead(_443);
        StorageDead(_434);
        goto -> bb396;
    }

    bb192: {
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        _449 = (_8.4: u64);
        StorageLive(_450);
        _450 = _219;
        _448 = math::orders::standardize_base_asset_amount(move _449, move _450) -> [return: bb193, unwind: bb419];
    }

    bb193: {
        StorageDead(_450);
        StorageDead(_449);
        _447 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _448) -> [return: bb194, unwind: bb419];
    }

    bb194: {
        StorageDead(_448);
        _451 = discriminant(_447);
        switchInt(move _451) -> [0: bb195, 1: bb196, otherwise: bb4];
    }

    bb195: {
        StorageLive(_455);
        _455 = ((_447 as Continue).0: u64);
        _428 = _455;
        StorageDead(_455);
        StorageDead(_447);
        goto -> bb198;
    }

    bb196: {
        StorageLive(_452);
        _452 = ((_447 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_454);
        _454 = _452;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _454) -> [return: bb197, unwind: bb419];
    }

    bb197: {
        StorageDead(_454);
        StorageDead(_452);
        StorageDead(_447);
        goto -> bb396;
    }

    bb198: {
        StorageDead(_433);
        StorageDead(_431);
        StorageDead(_429);
        StorageLive(_456);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        StorageLive(_462);
        _462 = _428;
        StorageLive(_463);
        _463 = _219;
        _461 = math::orders::is_multiple_of_step_size(move _462, move _463) -> [return: bb199, unwind: bb419];
    }

    bb199: {
        StorageDead(_463);
        StorageDead(_462);
        _460 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _461) -> [return: bb200, unwind: bb419];
    }

    bb200: {
        StorageDead(_461);
        _464 = discriminant(_460);
        switchInt(move _464) -> [0: bb201, 1: bb202, otherwise: bb4];
    }

    bb201: {
        StorageLive(_468);
        _468 = ((_460 as Continue).0: bool);
        _459 = _468;
        StorageDead(_468);
        switchInt(move _459) -> [0: bb205, otherwise: bb204];
    }

    bb202: {
        StorageLive(_465);
        _465 = ((_460 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_467);
        _467 = _465;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _467) -> [return: bb203, unwind: bb419];
    }

    bb203: {
        StorageDead(_467);
        StorageDead(_465);
        StorageDead(_460);
        StorageDead(_459);
        StorageDead(_458);
        goto -> bb395;
    }

    bb204: {
        StorageDead(_460);
        StorageLive(_469);
        _469 = ();
        _458 = std::result::Result::<(), error::ErrorCode>::Ok(move _469);
        StorageDead(_469);
        goto -> bb219;
    }

    bb205: {
        StorageDead(_460);
        StorageLive(_470);
        _470 = error::ErrorCode::InvalidOrderNotStepSizeMultiple;
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        StorageLive(_480);
        StorageLive(_481);
        _931 = const _;
        _481 = &(*_931);
        _480 = &(*_481);
        _479 = move _480 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_480);
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        _489 = &_470;
        _488 = &(*_489);
        _487 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _488) -> [return: bb206, unwind: bb419];
    }

    bb206: {
        StorageDead(_488);
        _486 = [move _487];
        StorageDead(_487);
        _485 = &_486;
        _484 = &(*_485);
        _483 = move _484 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_484);
        _478 = Arguments::<'_>::new_v1(move _479, move _483) -> [return: bb207, unwind: bb419];
    }

    bb207: {
        StorageDead(_483);
        StorageDead(_479);
        _477 = format(move _478) -> [return: bb208, unwind: bb419];
    }

    bb208: {
        StorageDead(_478);
        StorageDead(_489);
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_481);
        _476 = move _477;
        StorageDead(_477);
        _475 = &_476;
        _474 = &(*_475);
        _473 = <String as Deref>::deref(move _474) -> [return: bb209, unwind: bb413];
    }

    bb209: {
        _472 = &(*_473);
        StorageDead(_474);
        _471 = solana_program::log::sol_log(move _472) -> [return: bb210, unwind: bb413];
    }

    bb210: {
        StorageDead(_472);
        drop(_476) -> [return: bb211, unwind: bb419];
    }

    bb211: {
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_473);
        StorageDead(_471);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        _930 = const _;
        _500 = &(*_930);
        _499 = &(*_500);
        _498 = move _499 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_499);
        StorageLive(_502);
        StorageLive(_503);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        _508 = &_428;
        _507 = &(*_508);
        _506 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _507) -> [return: bb212, unwind: bb419];
    }

    bb212: {
        StorageDead(_507);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = &_219;
        _510 = &(*_511);
        _509 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _510) -> [return: bb213, unwind: bb419];
    }

    bb213: {
        StorageDead(_510);
        _505 = [move _506, move _509];
        StorageDead(_509);
        StorageDead(_506);
        _504 = &_505;
        _503 = &(*_504);
        _502 = move _503 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_503);
        _497 = Arguments::<'_>::new_v1(move _498, move _502) -> [return: bb214, unwind: bb419];
    }

    bb214: {
        StorageDead(_502);
        StorageDead(_498);
        _496 = format(move _497) -> [return: bb215, unwind: bb419];
    }

    bb215: {
        StorageDead(_497);
        StorageDead(_511);
        StorageDead(_508);
        StorageDead(_505);
        StorageDead(_504);
        StorageDead(_500);
        _495 = move _496;
        StorageDead(_496);
        _494 = &_495;
        _493 = &(*_494);
        _492 = <String as Deref>::deref(move _493) -> [return: bb216, unwind: bb412];
    }

    bb216: {
        _491 = &(*_492);
        StorageDead(_493);
        _490 = solana_program::log::sol_log(move _491) -> [return: bb217, unwind: bb412];
    }

    bb217: {
        StorageDead(_491);
        drop(_495) -> [return: bb218, unwind: bb419];
    }

    bb218: {
        StorageDead(_495);
        StorageDead(_494);
        StorageDead(_492);
        StorageDead(_490);
        StorageLive(_512);
        _512 = _470;
        _458 = std::result::Result::<(), error::ErrorCode>::Err(move _512);
        StorageDead(_512);
        StorageDead(_470);
        goto -> bb219;
    }

    bb219: {
        StorageDead(_459);
        _457 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _458) -> [return: bb220, unwind: bb419];
    }

    bb220: {
        StorageDead(_458);
        _513 = discriminant(_457);
        switchInt(move _513) -> [0: bb221, 1: bb222, otherwise: bb4];
    }

    bb221: {
        StorageLive(_517);
        _517 = ((_457 as Continue).0: ());
        _456 = _517;
        StorageDead(_517);
        StorageDead(_457);
        StorageDead(_456);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        _520 = _343;
        _519 = Ge(move _520, const 0_i128);
        switchInt(move _519) -> [0: bb225, otherwise: bb224];
    }

    bb222: {
        StorageLive(_514);
        _514 = ((_457 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_516);
        _516 = _514;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _516) -> [return: bb223, unwind: bb419];
    }

    bb223: {
        StorageDead(_516);
        StorageDead(_514);
        goto -> bb395;
    }

    bb224: {
        StorageDead(_520);
        _518 = controller::position::PositionDirection::Long;
        goto -> bb226;
    }

    bb225: {
        StorageDead(_520);
        _518 = controller::position::PositionDirection::Short;
        goto -> bb226;
    }

    bb226: {
        StorageDead(_519);
        StorageLive(_521);
        _521 = _518;
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        _525 = _428;
        _524 = <u64 as Cast>::cast::<u64>(move _525) -> [return: bb227, unwind: bb419];
    }

    bb227: {
        StorageDead(_525);
        _523 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _524) -> [return: bb228, unwind: bb419];
    }

    bb228: {
        StorageDead(_524);
        _526 = discriminant(_523);
        switchInt(move _526) -> [0: bb229, 1: bb230, otherwise: bb4];
    }

    bb229: {
        StorageLive(_530);
        _530 = ((_523 as Continue).0: u64);
        _522 = _530;
        StorageDead(_530);
        _372 = (move _521, move _522);
        StorageDead(_522);
        StorageDead(_521);
        StorageDead(_518);
        StorageDead(_428);
        StorageLive(_370);
        _370 = (_372.0: controller::position::PositionDirection);
        StorageLive(_371);
        _371 = (_372.1: u64);
        StorageDead(_523);
        StorageDead(_372);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        _538 = &_8;
        _537 = &(*_538);
        StorageLive(_539);
        StorageLive(_540);
        _540 = &_354;
        _539 = &(*_540);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        _543 = &(*_203);
        _542 = <Ref<'_, SpotMarket> as Deref>::deref(move _543) -> [return: bb232, unwind: bb419];
    }

    bb230: {
        StorageLive(_527);
        _527 = ((_523 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_529);
        _529 = _527;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _529) -> [return: bb231, unwind: bb419];
    }

    bb231: {
        StorageDead(_529);
        StorageDead(_527);
        StorageDead(_522);
        StorageDead(_521);
        StorageDead(_518);
        StorageDead(_428);
        StorageDead(_523);
        goto -> bb398;
    }

    bb232: {
        StorageDead(_543);
        _541 = ((*_542).26: u64);
        StorageLive(_544);
        _544 = ((*_1).18: u8);
        _536 = get_auction_params(move _537, move _539, move _541, move _544) -> [return: bb233, unwind: bb419];
    }

    bb233: {
        StorageDead(_544);
        StorageDead(_541);
        StorageDead(_539);
        StorageDead(_537);
        _535 = <std::result::Result<(i64, i64, u8), error::ErrorCode> as Try>::branch(move _536) -> [return: bb234, unwind: bb419];
    }

    bb234: {
        StorageDead(_536);
        _545 = discriminant(_535);
        switchInt(move _545) -> [0: bb235, 1: bb236, otherwise: bb4];
    }

    bb235: {
        StorageLive(_549);
        _549 = ((_535 as Continue).0: (i64, i64, u8));
        _534 = _549;
        StorageDead(_549);
        StorageLive(_531);
        _531 = (_534.0: i64);
        StorageLive(_532);
        _532 = (_534.1: i64);
        StorageLive(_533);
        _533 = (_534.2: u8);
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_538);
        StorageDead(_535);
        StorageDead(_534);
        StorageLive(_550);
        StorageLive(_551);
        StorageLive(_552);
        StorageLive(_553);
        StorageLive(_554);
        StorageLive(_555);
        _555 = &(*_203);
        _554 = <Ref<'_, SpotMarket> as Deref>::deref(move _555) -> [return: bb238, unwind: bb419];
    }

    bb236: {
        StorageLive(_546);
        _546 = ((_535 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_548);
        _548 = _546;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _548) -> [return: bb237, unwind: bb419];
    }

    bb237: {
        StorageDead(_548);
        StorageDead(_546);
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_538);
        StorageDead(_535);
        StorageDead(_534);
        goto -> bb394;
    }

    bb238: {
        StorageDead(_555);
        _553 = ((*_554).43: bool);
        switchInt(move _553) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        StorageDead(_554);
        StorageLive(_556);
        _556 = ();
        _552 = std::result::Result::<(), error::ErrorCode>::Ok(move _556);
        StorageDead(_556);
        goto -> bb247;
    }

    bb240: {
        StorageDead(_554);
        StorageLive(_557);
        _557 = error::ErrorCode::SpotOrdersDisabled;
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        StorageLive(_561);
        StorageLive(_562);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _929 = const _;
        _568 = &(*_929);
        _567 = &(*_568);
        _566 = move _567 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_567);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        StorageLive(_575);
        StorageLive(_576);
        _576 = &_557;
        _575 = &(*_576);
        _574 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _575) -> [return: bb241, unwind: bb419];
    }

    bb241: {
        StorageDead(_575);
        _573 = [move _574];
        StorageDead(_574);
        _572 = &_573;
        _571 = &(*_572);
        _570 = move _571 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_571);
        _565 = Arguments::<'_>::new_v1(move _566, move _570) -> [return: bb242, unwind: bb419];
    }

    bb242: {
        StorageDead(_570);
        StorageDead(_566);
        _564 = format(move _565) -> [return: bb243, unwind: bb419];
    }

    bb243: {
        StorageDead(_565);
        StorageDead(_576);
        StorageDead(_573);
        StorageDead(_572);
        StorageDead(_568);
        _563 = move _564;
        StorageDead(_564);
        _562 = &_563;
        _561 = &(*_562);
        _560 = <String as Deref>::deref(move _561) -> [return: bb244, unwind: bb411];
    }

    bb244: {
        _559 = &(*_560);
        StorageDead(_561);
        _558 = solana_program::log::sol_log(move _559) -> [return: bb245, unwind: bb411];
    }

    bb245: {
        StorageDead(_559);
        drop(_563) -> [return: bb246, unwind: bb419];
    }

    bb246: {
        StorageDead(_563);
        StorageDead(_562);
        StorageDead(_560);
        StorageDead(_558);
        StorageLive(_577);
        _577 = _557;
        _552 = std::result::Result::<(), error::ErrorCode>::Err(move _577);
        StorageDead(_577);
        StorageDead(_557);
        goto -> bb247;
    }

    bb247: {
        StorageDead(_553);
        _551 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _552) -> [return: bb248, unwind: bb419];
    }

    bb248: {
        StorageDead(_552);
        _578 = discriminant(_551);
        switchInt(move _578) -> [0: bb249, 1: bb250, otherwise: bb4];
    }

    bb249: {
        StorageLive(_582);
        _582 = ((_551 as Continue).0: ());
        _550 = _582;
        StorageDead(_582);
        StorageDead(_551);
        StorageDead(_550);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        StorageLive(_587);
        _587 = (_8.6: u16);
        _586 = Ne(move _587, const _);
        switchInt(move _586) -> [0: bb253, otherwise: bb252];
    }

    bb250: {
        StorageLive(_579);
        _579 = ((_551 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_581);
        _581 = _579;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _581) -> [return: bb251, unwind: bb419];
    }

    bb251: {
        StorageDead(_581);
        StorageDead(_579);
        StorageDead(_551);
        StorageDead(_550);
        goto -> bb393;
    }

    bb252: {
        StorageDead(_587);
        StorageLive(_588);
        _588 = ();
        _585 = std::result::Result::<(), error::ErrorCode>::Ok(move _588);
        StorageDead(_588);
        goto -> bb261;
    }

    bb253: {
        StorageDead(_587);
        StorageLive(_589);
        _589 = error::ErrorCode::InvalidOrderBaseQuoteAsset;
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        _928 = const _;
        _600 = &(*_928);
        _599 = &(*_600);
        _598 = move _599 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_599);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        StorageLive(_605);
        StorageLive(_606);
        StorageLive(_607);
        StorageLive(_608);
        _608 = &_589;
        _607 = &(*_608);
        _606 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _607) -> [return: bb254, unwind: bb419];
    }

    bb254: {
        StorageDead(_607);
        _605 = [move _606];
        StorageDead(_606);
        _604 = &_605;
        _603 = &(*_604);
        _602 = move _603 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_603);
        _597 = Arguments::<'_>::new_v1(move _598, move _602) -> [return: bb255, unwind: bb419];
    }

    bb255: {
        StorageDead(_602);
        StorageDead(_598);
        _596 = format(move _597) -> [return: bb256, unwind: bb419];
    }

    bb256: {
        StorageDead(_597);
        StorageDead(_608);
        StorageDead(_605);
        StorageDead(_604);
        StorageDead(_600);
        _595 = move _596;
        StorageDead(_596);
        _594 = &_595;
        _593 = &(*_594);
        _592 = <String as Deref>::deref(move _593) -> [return: bb257, unwind: bb410];
    }

    bb257: {
        _591 = &(*_592);
        StorageDead(_593);
        _590 = solana_program::log::sol_log(move _591) -> [return: bb258, unwind: bb410];
    }

    bb258: {
        StorageDead(_591);
        drop(_595) -> [return: bb259, unwind: bb419];
    }

    bb259: {
        StorageDead(_595);
        StorageDead(_594);
        StorageDead(_592);
        StorageDead(_590);
        StorageLive(_609);
        StorageLive(_610);
        StorageLive(_611);
        _611 = const "can not place order for quote asset";
        _610 = &(*_611);
        _609 = solana_program::log::sol_log(move _610) -> [return: bb260, unwind: bb419];
    }

    bb260: {
        StorageDead(_610);
        StorageDead(_611);
        StorageDead(_609);
        StorageLive(_612);
        _612 = _589;
        _585 = std::result::Result::<(), error::ErrorCode>::Err(move _612);
        StorageDead(_612);
        StorageDead(_589);
        goto -> bb261;
    }

    bb261: {
        StorageDead(_586);
        _584 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _585) -> [return: bb262, unwind: bb419];
    }

    bb262: {
        StorageDead(_585);
        _613 = discriminant(_584);
        switchInt(move _613) -> [0: bb263, 1: bb264, otherwise: bb4];
    }

    bb263: {
        StorageLive(_617);
        _617 = ((_584 as Continue).0: ());
        _583 = _617;
        StorageDead(_617);
        StorageDead(_584);
        StorageDead(_583);
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        _622 = &(_8.1: state::user::MarketType);
        StorageLive(_623);
        _927 = const _;
        _623 = &(*_927);
        _621 = <state::user::MarketType as PartialEq>::eq(move _622, move _623) -> [return: bb266, unwind: bb419];
    }

    bb264: {
        StorageLive(_614);
        _614 = ((_584 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_616);
        _616 = _614;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _616) -> [return: bb265, unwind: bb419];
    }

    bb265: {
        StorageDead(_616);
        StorageDead(_614);
        StorageDead(_584);
        StorageDead(_583);
        goto -> bb393;
    }

    bb266: {
        switchInt(move _621) -> [0: bb268, otherwise: bb267];
    }

    bb267: {
        StorageDead(_623);
        StorageDead(_622);
        StorageLive(_625);
        _625 = ();
        _620 = std::result::Result::<(), error::ErrorCode>::Ok(move _625);
        StorageDead(_625);
        goto -> bb276;
    }

    bb268: {
        StorageDead(_623);
        StorageDead(_622);
        StorageLive(_626);
        _626 = error::ErrorCode::InvalidOrderMarketType;
        StorageLive(_627);
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        _926 = const _;
        _637 = &(*_926);
        _636 = &(*_637);
        _635 = move _636 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_636);
        StorageLive(_639);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        _645 = &_626;
        _644 = &(*_645);
        _643 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _644) -> [return: bb269, unwind: bb419];
    }

    bb269: {
        StorageDead(_644);
        _642 = [move _643];
        StorageDead(_643);
        _641 = &_642;
        _640 = &(*_641);
        _639 = move _640 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_640);
        _634 = Arguments::<'_>::new_v1(move _635, move _639) -> [return: bb270, unwind: bb419];
    }

    bb270: {
        StorageDead(_639);
        StorageDead(_635);
        _633 = format(move _634) -> [return: bb271, unwind: bb419];
    }

    bb271: {
        StorageDead(_634);
        StorageDead(_645);
        StorageDead(_642);
        StorageDead(_641);
        StorageDead(_637);
        _632 = move _633;
        StorageDead(_633);
        _631 = &_632;
        _630 = &(*_631);
        _629 = <String as Deref>::deref(move _630) -> [return: bb272, unwind: bb409];
    }

    bb272: {
        _628 = &(*_629);
        StorageDead(_630);
        _627 = solana_program::log::sol_log(move _628) -> [return: bb273, unwind: bb409];
    }

    bb273: {
        StorageDead(_628);
        drop(_632) -> [return: bb274, unwind: bb419];
    }

    bb274: {
        StorageDead(_632);
        StorageDead(_631);
        StorageDead(_629);
        StorageDead(_627);
        StorageLive(_646);
        StorageLive(_647);
        StorageLive(_648);
        _648 = const "must be spot order";
        _647 = &(*_648);
        _646 = solana_program::log::sol_log(move _647) -> [return: bb275, unwind: bb419];
    }

    bb275: {
        StorageDead(_647);
        StorageDead(_648);
        StorageDead(_646);
        StorageLive(_649);
        _649 = _626;
        _620 = std::result::Result::<(), error::ErrorCode>::Err(move _649);
        StorageDead(_649);
        StorageDead(_626);
        goto -> bb276;
    }

    bb276: {
        StorageDead(_621);
        _619 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _620) -> [return: bb277, unwind: bb419];
    }

    bb277: {
        StorageDead(_620);
        _650 = discriminant(_619);
        switchInt(move _650) -> [0: bb278, 1: bb279, otherwise: bb4];
    }

    bb278: {
        StorageLive(_654);
        _654 = ((_619 as Continue).0: ());
        _618 = _654;
        StorageDead(_654);
        StorageDead(_619);
        StorageDead(_618);
        StorageLive(_655);
        _655 = const 0_u8;
        StorageLive(_656);
        StorageLive(_657);
        _657 = (_8.7: bool);
        switchInt(move _657) -> [0: bb282, otherwise: bb281];
    }

    bb279: {
        StorageLive(_651);
        _651 = ((_619 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_653);
        _653 = _651;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _653) -> [return: bb280, unwind: bb419];
    }

    bb280: {
        StorageDead(_653);
        StorageDead(_651);
        StorageDead(_619);
        StorageDead(_618);
        goto -> bb393;
    }

    bb281: {
        _656 = const true;
        goto -> bb283;
    }

    bb282: {
        _656 = _215;
        goto -> bb283;
    }

    bb283: {
        StorageDead(_657);
        StorageLive(_658);
        StorageLive(_659);
        _659 = _655;
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        _662 = &_8;
        _661 = order_params::OrderParams::is_trigger_order(move _662) -> [return: bb284, unwind: bb419];
    }

    bb284: {
        switchInt(move _661) -> [0: bb286, otherwise: bb285];
    }

    bb285: {
        StorageDead(_662);
        _660 = _656;
        goto -> bb287;
    }

    bb286: {
        StorageDead(_662);
        _660 = const false;
        goto -> bb287;
    }

    bb287: {
        StorageDead(_661);
        StorageLive(_663);
        _663 = OrderBitFlag::NewTriggerReduceOnly;
        _658 = math::orders::set_order_bit_flag(move _659, move _660, move _663) -> [return: bb288, unwind: bb419];
    }

    bb288: {
        StorageDead(_663);
        StorageDead(_660);
        StorageDead(_659);
        _655 = move _658;
        StorageDead(_658);
        StorageLive(_664);
        StorageLive(_665);
        _665 = OrderStatus::Open;
        StorageLive(_666);
        _666 = (_8.0: state::user::OrderType);
        StorageLive(_667);
        _667 = (_8.1: state::user::MarketType);
        StorageLive(_668);
        _668 = _11;
        StorageLive(_669);
        StorageLive(_670);
        _670 = ((*_2).15: u32);
        StorageLive(_671);
        StorageLive(_672);
        StorageLive(_673);
        StorageLive(_674);
        _674 = _670;
        _673 = core::num::<impl u32>::checked_add(move _674, const 1_u32) -> [return: bb289, unwind: bb419];
    }

    bb289: {
        StorageDead(_674);
        StorageLive(_675);
        _675 = Option::<u32>::Some(const 1_u32);
        _672 = Option::<u32>::or(move _673, move _675) -> [return: bb290, unwind: bb419];
    }

    bb290: {
        StorageDead(_675);
        StorageDead(_673);
        _671 = Option::<u32>::unwrap(move _672) -> [return: bb291, unwind: bb419];
    }

    bb291: {
        StorageDead(_672);
        ((*_2).15: u32) = move _671;
        StorageDead(_671);
        _669 = _670;
        StorageDead(_670);
        StorageLive(_676);
        _676 = (_8.3: u8);
        StorageLive(_677);
        _677 = (_8.6: u16);
        StorageLive(_678);
        StorageLive(_679);
        StorageLive(_680);
        StorageLive(_681);
        _681 = (_8.5: u64);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        _684 = &(*_203);
        _683 = <Ref<'_, SpotMarket> as Deref>::deref(move _684) -> [return: bb292, unwind: bb419];
    }

    bb292: {
        StorageDead(_684);
        _682 = ((*_683).26: u64);
        StorageLive(_685);
        _685 = (_8.2: controller::position::PositionDirection);
        _680 = math::orders::standardize_price(move _681, move _682, move _685) -> [return: bb293, unwind: bb419];
    }

    bb293: {
        StorageDead(_685);
        StorageDead(_682);
        StorageDead(_681);
        _679 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _680) -> [return: bb294, unwind: bb419];
    }

    bb294: {
        StorageDead(_680);
        _686 = discriminant(_679);
        switchInt(move _686) -> [0: bb295, 1: bb296, otherwise: bb4];
    }

    bb295: {
        StorageLive(_690);
        _690 = ((_679 as Continue).0: u64);
        _678 = _690;
        StorageDead(_690);
        StorageLive(_691);
        _691 = _370;
        StorageLive(_692);
        _692 = _371;
        StorageLive(_693);
        _693 = (_8.2: controller::position::PositionDirection);
        StorageLive(_694);
        _694 = _656;
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        _699 = (_8.11: std::option::Option<u64>);
        _698 = Option::<u64>::unwrap_or(move _699, const 0_u64) -> [return: bb298, unwind: bb419];
    }

    bb296: {
        StorageLive(_687);
        _687 = ((_679 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_689);
        _689 = _687;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _689) -> [return: bb297, unwind: bb419];
    }

    bb297: {
        StorageDead(_689);
        StorageDead(_687);
        StorageDead(_678);
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_669);
        StorageDead(_668);
        StorageDead(_667);
        StorageDead(_666);
        StorageDead(_665);
        goto -> bb391;
    }

    bb298: {
        StorageDead(_699);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        _702 = &(*_203);
        _701 = <Ref<'_, SpotMarket> as Deref>::deref(move _702) -> [return: bb299, unwind: bb419];
    }

    bb299: {
        StorageDead(_702);
        _700 = ((*_701).26: u64);
        StorageLive(_703);
        _703 = (_8.2: controller::position::PositionDirection);
        _697 = math::orders::standardize_price(move _698, move _700, move _703) -> [return: bb300, unwind: bb419];
    }

    bb300: {
        StorageDead(_703);
        StorageDead(_700);
        StorageDead(_698);
        _696 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _697) -> [return: bb301, unwind: bb419];
    }

    bb301: {
        StorageDead(_697);
        _704 = discriminant(_696);
        switchInt(move _704) -> [0: bb302, 1: bb303, otherwise: bb4];
    }

    bb302: {
        StorageLive(_708);
        _708 = ((_696 as Continue).0: u64);
        _695 = _708;
        StorageDead(_708);
        StorageLive(_709);
        _709 = (_8.12: state::user::OrderTriggerCondition);
        StorageLive(_710);
        StorageLive(_711);
        _711 = &(_8.8: state::order_params::PostOnlyParam);
        StorageLive(_712);
        _925 = const _;
        _712 = &(*_925);
        _710 = <PostOnlyParam as PartialEq>::ne(move _711, move _712) -> [return: bb305, unwind: bb419];
    }

    bb303: {
        StorageLive(_705);
        _705 = ((_696 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_707);
        _707 = _705;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _707) -> [return: bb304, unwind: bb419];
    }

    bb304: {
        StorageDead(_707);
        StorageDead(_705);
        StorageDead(_695);
        StorageDead(_694);
        StorageDead(_693);
        StorageDead(_692);
        StorageDead(_691);
        StorageDead(_678);
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_669);
        StorageDead(_668);
        StorageDead(_667);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_701);
        StorageDead(_696);
        goto -> bb391;
    }

    bb305: {
        StorageDead(_712);
        StorageDead(_711);
        StorageLive(_714);
        StorageLive(_715);
        _715 = (_8.13: std::option::Option<i32>);
        _714 = Option::<i32>::unwrap_or(move _715, const 0_i32) -> [return: bb306, unwind: bb419];
    }

    bb306: {
        StorageDead(_715);
        StorageLive(_716);
        StorageLive(_717);
        _717 = &_8;
        _716 = order_params::OrderParams::is_immediate_or_cancel(move _717) -> [return: bb307, unwind: bb419];
    }

    bb307: {
        StorageDead(_717);
        StorageLive(_718);
        _718 = _531;
        StorageLive(_719);
        _719 = _532;
        StorageLive(_720);
        _720 = _533;
        StorageLive(_721);
        _721 = _112;
        StorageLive(_722);
        StorageLive(_723);
        _723 = _11;
        _722 = math::orders::get_posted_slot_from_clock_slot(move _723) -> [return: bb308, unwind: bb419];
    }

    bb308: {
        StorageDead(_723);
        StorageLive(_724);
        _724 = _655;
        StorageLive(_725);
        _725 = [const 0_u8; 1];
        _664 = Order { slot: move _668, price: move _678, base_asset_amount: move _692, base_asset_amount_filled: const 0_u64, quote_asset_amount_filled: const 0_u64, trigger_price: move _695, auction_start_price: move _718, auction_end_price: move _719, max_ts: move _721, oracle_price_offset: move _714, order_id: move _669, market_index: move _677, status: move _665, order_type: move _666, market_type: move _667, user_order_id: move _676, existing_position_direction: move _691, direction: move _693, reduce_only: move _694, post_only: move _710, immediate_or_cancel: move _716, trigger_condition: move _709, auction_duration: move _720, posted_slot_tail: move _722, bit_flags: move _724, padding: move _725 };
        StorageDead(_725);
        StorageDead(_724);
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_720);
        StorageDead(_719);
        StorageDead(_718);
        StorageDead(_716);
        StorageDead(_714);
        StorageDead(_710);
        StorageDead(_709);
        StorageDead(_695);
        StorageDead(_694);
        StorageDead(_693);
        StorageDead(_692);
        StorageDead(_691);
        StorageDead(_678);
        StorageDead(_677);
        StorageDead(_676);
        StorageDead(_669);
        StorageDead(_668);
        StorageDead(_667);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_701);
        StorageDead(_696);
        StorageDead(_683);
        StorageDead(_679);
        StorageLive(_726);
        StorageLive(_727);
        StorageLive(_728);
        StorageLive(_729);
        StorageLive(_730);
        _730 = &_664;
        _729 = &(*_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        _733 = &(*_203);
        _732 = <Ref<'_, SpotMarket> as Deref>::deref(move _733) -> [return: bb309, unwind: bb419];
    }

    bb309: {
        StorageDead(_733);
        _731 = ((*_732).25: u64);
        StorageLive(_734);
        StorageLive(_735);
        StorageLive(_736);
        _736 = &(*_203);
        _735 = <Ref<'_, SpotMarket> as Deref>::deref(move _736) -> [return: bb310, unwind: bb419];
    }

    bb310: {
        StorageDead(_736);
        _734 = ((*_735).27: u64);
        _728 = validate_spot_order(move _729, move _731, move _734) -> [return: bb311, unwind: bb419];
    }

    bb311: {
        StorageDead(_734);
        StorageDead(_731);
        StorageDead(_729);
        _727 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _728) -> [return: bb312, unwind: bb419];
    }

    bb312: {
        StorageDead(_728);
        _737 = discriminant(_727);
        switchInt(move _737) -> [0: bb313, 1: bb314, otherwise: bb4];
    }

    bb313: {
        StorageLive(_741);
        _741 = ((_727 as Continue).0: ());
        _726 = _741;
        StorageDead(_741);
        StorageDead(_735);
        StorageDead(_732);
        StorageDead(_730);
        StorageDead(_727);
        StorageDead(_726);
        StorageLive(_742);
        StorageLive(_743);
        StorageLive(_744);
        StorageLive(_745);
        StorageLive(_746);
        _746 = &_664;
        _745 = &(*_746);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = _343;
        _749 = <i128 as Cast>::cast::<i64>(move _750) -> [return: bb316, unwind: bb419];
    }

    bb314: {
        StorageLive(_738);
        _738 = ((_727 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_740);
        _740 = _738;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _740) -> [return: bb315, unwind: bb419];
    }

    bb315: {
        StorageDead(_740);
        StorageDead(_738);
        StorageDead(_735);
        StorageDead(_732);
        StorageDead(_730);
        StorageDead(_727);
        StorageDead(_726);
        goto -> bb392;
    }

    bb316: {
        StorageDead(_750);
        _748 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _749) -> [return: bb317, unwind: bb419];
    }

    bb317: {
        StorageDead(_749);
        _751 = discriminant(_748);
        switchInt(move _751) -> [0: bb318, 1: bb319, otherwise: bb4];
    }

    bb318: {
        StorageLive(_755);
        _755 = ((_748 as Continue).0: i64);
        _747 = _755;
        StorageDead(_755);
        StorageLive(_756);
        StorageLive(_757);
        _757 = _310;
        _758 = Len(((*_2).3: [state::user::SpotPosition; 8]));
        _759 = Lt(_757, _758);
        assert(move _759, "index out of bounds: the length is {} but the index is {}", move _758, _757) -> [success: bb321, unwind: bb419];
    }

    bb319: {
        StorageLive(_752);
        _752 = ((_748 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_754);
        _754 = _752;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _754) -> [return: bb320, unwind: bb419];
    }

    bb320: {
        StorageDead(_754);
        StorageDead(_752);
        StorageDead(_747);
        StorageDead(_745);
        StorageDead(_744);
        goto -> bb389;
    }

    bb321: {
        _756 = (((*_2).3: [state::user::SpotPosition; 8])[_757].1: i64);
        StorageLive(_760);
        StorageLive(_761);
        _761 = _310;
        _762 = Len(((*_2).3: [state::user::SpotPosition; 8]));
        _763 = Lt(_761, _762);
        assert(move _763, "index out of bounds: the length is {} but the index is {}", move _762, _761) -> [success: bb322, unwind: bb419];
    }

    bb322: {
        _760 = (((*_2).3: [state::user::SpotPosition; 8])[_761].2: i64);
        _744 = math::orders::is_new_order_risk_increasing(move _745, move _747, move _756, move _760) -> [return: bb323, unwind: bb419];
    }

    bb323: {
        StorageDead(_760);
        StorageDead(_756);
        StorageDead(_747);
        StorageDead(_745);
        _743 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _744) -> [return: bb324, unwind: bb419];
    }

    bb324: {
        StorageDead(_744);
        _764 = discriminant(_743);
        switchInt(move _764) -> [0: bb325, 1: bb326, otherwise: bb4];
    }

    bb325: {
        StorageLive(_768);
        _768 = ((_743 as Continue).0: bool);
        _742 = _768;
        StorageDead(_768);
        StorageDead(_761);
        StorageDead(_757);
        StorageDead(_748);
        StorageDead(_746);
        StorageDead(_743);
        StorageLive(_769);
        StorageLive(_770);
        _770 = &mut (*_2);
        StorageLive(_771);
        StorageLive(_772);
        _772 = &_664;
        _771 = Order::has_auction(move _772) -> [return: bb328, unwind: bb419];
    }

    bb326: {
        StorageLive(_765);
        _765 = ((_743 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_767);
        _767 = _765;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _767) -> [return: bb327, unwind: bb419];
    }

    bb327: {
        StorageDead(_767);
        StorageDead(_765);
        StorageDead(_761);
        StorageDead(_757);
        goto -> bb389;
    }

    bb328: {
        StorageDead(_772);
        _769 = User::increment_open_orders(move _770, move _771) -> [return: bb329, unwind: bb419];
    }

    bb329: {
        StorageDead(_771);
        StorageDead(_770);
        StorageDead(_769);
        StorageLive(_773);
        _773 = _664;
        StorageLive(_774);
        _774 = _154;
        _775 = Len(((*_2).5: [state::user::Order; 32]));
        _776 = Lt(_774, _775);
        assert(move _776, "index out of bounds: the length is {} but the index is {}", move _775, _774) -> [success: bb330, unwind: bb419];
    }

    bb330: {
        ((*_2).5: [state::user::Order; 32])[_774] = move _773;
        StorageDead(_773);
        StorageDead(_774);
        StorageLive(_777);
        _777 = _310;
        _778 = Len(((*_2).3: [state::user::SpotPosition; 8]));
        _779 = Lt(_777, _778);
        assert(move _779, "index out of bounds: the length is {} but the index is {}", move _778, _777) -> [success: bb331, unwind: bb419];
    }

    bb331: {
        _780 = CheckedAdd((((*_2).3: [state::user::SpotPosition; 8])[_777].6: u8), const 1_u8);
        assert(!move (_780.1: bool), "attempt to compute `{} + {}`, which would overflow", (((*_2).3: [state::user::SpotPosition; 8])[_777].6: u8), const 1_u8) -> [success: bb332, unwind: bb419];
    }

    bb332: {
        (((*_2).3: [state::user::SpotPosition; 8])[_777].6: u8) = move (_780.0: u8);
        StorageDead(_777);
        StorageLive(_781);
        StorageLive(_782);
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        _786 = _310;
        _787 = Len(((*_2).3: [state::user::SpotPosition; 8]));
        _788 = Lt(_786, _787);
        assert(move _788, "index out of bounds: the length is {} but the index is {}", move _787, _786) -> [success: bb333, unwind: bb419];
    }

    bb333: {
        _785 = &mut ((*_2).3: [state::user::SpotPosition; 8])[_786];
        _784 = &mut (*_785);
        StorageLive(_789);
        StorageLive(_790);
        _790 = &(_8.2: controller::position::PositionDirection);
        _789 = &(*_790);
        StorageLive(_791);
        _791 = _371;
        StorageLive(_792);
        StorageLive(_793);
        _793 = &_664;
        _792 = Order::update_open_bids_and_asks(move _793) -> [return: bb334, unwind: bb419];
    }

    bb334: {
        StorageDead(_793);
        _783 = increase_spot_open_bids_and_asks(move _784, move _789, move _791, move _792) -> [return: bb335, unwind: bb419];
    }

    bb335: {
        StorageDead(_792);
        StorageDead(_791);
        StorageDead(_789);
        StorageDead(_784);
        _782 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _783) -> [return: bb336, unwind: bb419];
    }

    bb336: {
        StorageDead(_783);
        _794 = discriminant(_782);
        switchInt(move _794) -> [0: bb337, 1: bb338, otherwise: bb4];
    }

    bb337: {
        StorageLive(_798);
        _798 = ((_782 as Continue).0: ());
        _781 = _798;
        StorageDead(_798);
        StorageDead(_790);
        StorageDead(_786);
        StorageDead(_785);
        StorageDead(_782);
        StorageDead(_781);
        StorageLive(_799);
        StorageLive(_800);
        _800 = &mut _9;
        StorageLive(_801);
        _801 = _742;
        _799 = PlaceOrderOptions::update_risk_increasing(move _800, move _801) -> [return: bb340, unwind: bb419];
    }

    bb338: {
        StorageLive(_795);
        _795 = ((_782 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_797);
        _797 = _795;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _797) -> [return: bb339, unwind: bb419];
    }

    bb339: {
        StorageDead(_797);
        StorageDead(_795);
        StorageDead(_790);
        StorageDead(_786);
        StorageDead(_785);
        StorageDead(_782);
        StorageDead(_781);
        goto -> bb390;
    }

    bb340: {
        StorageDead(_801);
        StorageDead(_800);
        StorageDead(_799);
        StorageLive(_802);
        StorageLive(_803);
        _803 = (_9.2: bool);
        switchInt(move _803) -> [0: bb347, otherwise: bb341];
    }

    bb341: {
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        _807 = &(*_2);
        StorageLive(_808);
        _808 = &(*_4);
        StorageLive(_809);
        _809 = &(*_5);
        StorageLive(_810);
        _810 = &mut (*_6);
        StorageLive(_811);
        _811 = (_9.3: bool);
        _806 = math::margin::meets_place_order_margin_requirement(move _807, move _808, move _809, move _810, move _811) -> [return: bb342, unwind: bb419];
    }

    bb342: {
        StorageDead(_811);
        StorageDead(_810);
        StorageDead(_809);
        StorageDead(_808);
        StorageDead(_807);
        _805 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _806) -> [return: bb343, unwind: bb419];
    }

    bb343: {
        StorageDead(_806);
        _812 = discriminant(_805);
        switchInt(move _812) -> [0: bb344, 1: bb345, otherwise: bb4];
    }

    bb344: {
        StorageLive(_816);
        _816 = ((_805 as Continue).0: ());
        _804 = _816;
        StorageDead(_816);
        StorageDead(_805);
        StorageDead(_804);
        _802 = const ();
        goto -> bb348;
    }

    bb345: {
        StorageLive(_813);
        _813 = ((_805 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_815);
        _815 = _813;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _815) -> [return: bb346, unwind: bb419];
    }

    bb346: {
        StorageDead(_815);
        StorageDead(_813);
        StorageDead(_805);
        StorageDead(_804);
        StorageDead(_803);
        StorageDead(_802);
        goto -> bb390;
    }

    bb347: {
        _802 = const ();
        goto -> bb348;
    }

    bb348: {
        StorageDead(_803);
        StorageDead(_802);
        StorageLive(_817);
        StorageLive(_818);
        StorageLive(_819);
        StorageLive(_820);
        _820 = &(*_2);
        StorageLive(_821);
        _821 = &(*_4);
        StorageLive(_822);
        _822 = &(*_5);
        StorageLive(_823);
        _823 = &mut (*_6);
        _819 = math::margin::validate_spot_margin_trading(move _820, move _821, move _822, move _823) -> [return: bb349, unwind: bb419];
    }

    bb349: {
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_821);
        StorageDead(_820);
        _818 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _819) -> [return: bb350, unwind: bb419];
    }

    bb350: {
        StorageDead(_819);
        _824 = discriminant(_818);
        switchInt(move _824) -> [0: bb351, 1: bb352, otherwise: bb4];
    }

    bb351: {
        StorageLive(_828);
        _828 = ((_818 as Continue).0: ());
        _817 = _828;
        StorageDead(_828);
        StorageDead(_818);
        StorageDead(_817);
        StorageLive(_829);
        StorageLive(_830);
        _830 = _215;
        switchInt(move _830) -> [0: bb355, otherwise: bb354];
    }

    bb352: {
        StorageLive(_825);
        _825 = ((_818 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_827);
        _827 = _825;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _827) -> [return: bb353, unwind: bb419];
    }

    bb353: {
        StorageDead(_827);
        StorageDead(_825);
        StorageDead(_818);
        StorageDead(_817);
        goto -> bb390;
    }

    bb354: {
        StorageLive(_831);
        StorageLive(_832);
        StorageLive(_833);
        StorageLive(_834);
        StorageLive(_835);
        StorageLive(_836);
        _836 = _154;
        _837 = Len(((*_2).5: [state::user::Order; 32]));
        _838 = Lt(_836, _837);
        assert(move _838, "index out of bounds: the length is {} but the index is {}", move _837, _836) -> [success: bb356, unwind: bb419];
    }

    bb355: {
        _829 = const ();
        goto -> bb367;
    }

    bb356: {
        _835 = &((*_2).5: [state::user::Order; 32])[_836];
        _834 = &(*_835);
        StorageLive(_839);
        StorageLive(_840);
        StorageLive(_841);
        StorageLive(_842);
        _842 = _343;
        _841 = <i128 as Cast>::cast::<i64>(move _842) -> [return: bb357, unwind: bb419];
    }

    bb357: {
        StorageDead(_842);
        _840 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _841) -> [return: bb358, unwind: bb419];
    }

    bb358: {
        StorageDead(_841);
        _843 = discriminant(_840);
        switchInt(move _843) -> [0: bb359, 1: bb360, otherwise: bb4];
    }

    bb359: {
        StorageLive(_847);
        _847 = ((_840 as Continue).0: i64);
        _839 = _847;
        StorageDead(_847);
        _833 = validate_order_for_force_reduce_only(move _834, move _839) -> [return: bb362, unwind: bb419];
    }

    bb360: {
        StorageLive(_844);
        _844 = ((_840 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_846);
        _846 = _844;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _846) -> [return: bb361, unwind: bb419];
    }

    bb361: {
        StorageDead(_846);
        StorageDead(_844);
        StorageDead(_839);
        StorageDead(_834);
        StorageDead(_833);
        goto -> bb388;
    }

    bb362: {
        StorageDead(_839);
        StorageDead(_834);
        _832 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _833) -> [return: bb363, unwind: bb419];
    }

    bb363: {
        StorageDead(_833);
        _848 = discriminant(_832);
        switchInt(move _848) -> [0: bb364, 1: bb365, otherwise: bb4];
    }

    bb364: {
        StorageLive(_852);
        _852 = ((_832 as Continue).0: ());
        _831 = _852;
        StorageDead(_852);
        StorageDead(_840);
        StorageDead(_836);
        StorageDead(_835);
        StorageDead(_832);
        StorageDead(_831);
        _829 = const ();
        goto -> bb367;
    }

    bb365: {
        StorageLive(_849);
        _849 = ((_832 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_851);
        _851 = _849;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _851) -> [return: bb366, unwind: bb419];
    }

    bb366: {
        StorageDead(_851);
        StorageDead(_849);
        goto -> bb388;
    }

    bb367: {
        StorageDead(_830);
        StorageDead(_829);
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        _859 = &_3;
        _858 = &(*_859);
        StorageLive(_860);
        StorageLive(_861);
        _861 = &_664;
        _860 = &(*_861);
        _857 = get_taker_and_maker_for_order_record(move _858, move _860) -> [return: bb368, unwind: bb419];
    }

    bb368: {
        StorageDead(_860);
        StorageDead(_858);
        StorageLive(_853);
        _853 = (_857.0: std::option::Option<anchor_lang::prelude::Pubkey>);
        StorageLive(_854);
        _854 = (_857.1: std::option::Option<state::user::Order>);
        StorageLive(_855);
        _855 = (_857.2: std::option::Option<anchor_lang::prelude::Pubkey>);
        StorageLive(_856);
        _856 = (_857.3: std::option::Option<state::user::Order>);
        StorageDead(_861);
        StorageDead(_859);
        StorageDead(_857);
        StorageLive(_862);
        StorageLive(_863);
        StorageLive(_864);
        StorageLive(_865);
        _865 = _10;
        StorageLive(_866);
        _866 = OrderAction::Place;
        StorageLive(_867);
        _867 = OrderActionExplanation::None;
        StorageLive(_868);
        _868 = (_8.6: u16);
        StorageLive(_869);
        _869 = Option::<anchor_lang::prelude::Pubkey>::None;
        StorageLive(_870);
        _870 = Option::<u64>::None;
        StorageLive(_871);
        _871 = Option::<u64>::None;
        StorageLive(_872);
        _872 = Option::<u64>::None;
        StorageLive(_873);
        _873 = Option::<u64>::None;
        StorageLive(_874);
        _874 = Option::<u64>::None;
        StorageLive(_875);
        _875 = Option::<u64>::None;
        StorageLive(_876);
        _876 = Option::<u64>::None;
        StorageLive(_877);
        _877 = Option::<i64>::None;
        StorageLive(_878);
        _878 = Option::<u64>::None;
        StorageLive(_879);
        _879 = _853;
        StorageLive(_880);
        _880 = _854;
        StorageLive(_881);
        _881 = _855;
        StorageLive(_882);
        _882 = _856;
        StorageLive(_883);
        _883 = (_354.0: i64);
        StorageLive(_884);
        _884 = Option::<u64>::None;
        StorageLive(_885);
        _885 = Option::<u64>::None;
        StorageLive(_886);
        _886 = Option::<u64>::None;
        StorageLive(_887);
        _887 = Option::<u64>::None;
        StorageLive(_888);
        _888 = Option::<u64>::None;
        _864 = get_order_action_record(move _865, move _866, move _867, move _868, move _869, move _870, move _871, move _872, move _873, move _874, move _875, move _876, move _877, move _878, move _879, move _880, move _881, move _882, move _883, const 0_u8, move _884, move _885, move _886, move _887, move _888) -> [return: bb369, unwind: bb419];
    }

    bb369: {
        StorageDead(_888);
        StorageDead(_887);
        StorageDead(_886);
        StorageDead(_885);
        StorageDead(_884);
        StorageDead(_883);
        StorageDead(_882);
        StorageDead(_881);
        StorageDead(_880);
        StorageDead(_879);
        StorageDead(_878);
        StorageDead(_877);
        StorageDead(_876);
        StorageDead(_875);
        StorageDead(_874);
        StorageDead(_873);
        StorageDead(_872);
        StorageDead(_871);
        StorageDead(_870);
        StorageDead(_869);
        StorageDead(_868);
        StorageDead(_867);
        StorageDead(_866);
        StorageDead(_865);
        _863 = <std::result::Result<OrderActionRecord, error::ErrorCode> as Try>::branch(move _864) -> [return: bb370, unwind: bb419];
    }

    bb370: {
        StorageDead(_864);
        _889 = discriminant(_863);
        switchInt(move _889) -> [0: bb371, 1: bb372, otherwise: bb4];
    }

    bb371: {
        StorageLive(_893);
        _893 = move ((_863 as Continue).0: state::events::OrderActionRecord);
        _862 = move _893;
        StorageDead(_893);
        StorageDead(_863);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        _897 = move _862;
        _896 = emit_stack::<OrderActionRecord, 464>(move _897) -> [return: bb374, unwind: bb419];
    }

    bb372: {
        StorageLive(_890);
        _890 = ((_863 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_892);
        _892 = _890;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _892) -> [return: bb373, unwind: bb419];
    }

    bb373: {
        StorageDead(_892);
        StorageDead(_890);
        StorageDead(_863);
        goto -> bb387;
    }

    bb374: {
        StorageDead(_897);
        _895 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _896) -> [return: bb375, unwind: bb419];
    }

    bb375: {
        StorageDead(_896);
        _898 = discriminant(_895);
        switchInt(move _898) -> [0: bb376, 1: bb377, otherwise: bb4];
    }

    bb376: {
        StorageLive(_902);
        _902 = ((_895 as Continue).0: ());
        _894 = _902;
        StorageDead(_902);
        StorageDead(_895);
        StorageDead(_894);
        StorageLive(_903);
        StorageLive(_904);
        _904 = _10;
        StorageLive(_905);
        _905 = _3;
        StorageLive(_906);
        StorageLive(_907);
        _907 = _154;
        _908 = Len(((*_2).5: [state::user::Order; 32]));
        _909 = Lt(_907, _908);
        assert(move _909, "index out of bounds: the length is {} but the index is {}", move _908, _907) -> [success: bb379, unwind: bb419];
    }

    bb377: {
        StorageLive(_899);
        _899 = ((_895 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_901);
        _901 = _899;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _901) -> [return: bb378, unwind: bb419];
    }

    bb378: {
        StorageDead(_901);
        StorageDead(_899);
        StorageDead(_895);
        StorageDead(_894);
        goto -> bb387;
    }

    bb379: {
        _906 = ((*_2).5: [state::user::Order; 32])[_907];
        _903 = OrderRecord { ts: move _904, user: move _905, order: move _906 };
        StorageDead(_906);
        StorageDead(_905);
        StorageDead(_904);
        StorageDead(_907);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        _913 = move _903;
        _912 = emit_stack::<OrderRecord, 192>(move _913) -> [return: bb380, unwind: bb419];
    }

    bb380: {
        StorageDead(_913);
        _911 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _912) -> [return: bb381, unwind: bb419];
    }

    bb381: {
        StorageDead(_912);
        _914 = discriminant(_911);
        switchInt(move _914) -> [0: bb382, 1: bb383, otherwise: bb4];
    }

    bb382: {
        StorageLive(_918);
        _918 = ((_911 as Continue).0: ());
        _910 = _918;
        StorageDead(_918);
        StorageDead(_911);
        StorageDead(_910);
        StorageLive(_919);
        StorageLive(_920);
        _920 = &mut (*_2);
        StorageLive(_921);
        _921 = _11;
        _919 = User::update_last_active_slot(move _920, move _921) -> [return: bb385, unwind: bb419];
    }

    bb383: {
        StorageLive(_915);
        _915 = ((_911 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_917);
        _917 = _915;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _917) -> [return: bb384, unwind: bb419];
    }

    bb384: {
        StorageDead(_917);
        StorageDead(_915);
        StorageDead(_911);
        StorageDead(_910);
        StorageDead(_903);
        goto -> bb387;
    }

    bb385: {
        StorageDead(_921);
        StorageDead(_920);
        StorageDead(_919);
        StorageLive(_922);
        _922 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _922);
        StorageDead(_922);
        StorageDead(_903);
        StorageDead(_862);
        StorageDead(_856);
        StorageDead(_855);
        StorageDead(_854);
        StorageDead(_853);
        StorageDead(_742);
        StorageDead(_664);
        StorageDead(_656);
        StorageDead(_655);
        StorageDead(_533);
        StorageDead(_532);
        StorageDead(_531);
        StorageDead(_371);
        StorageDead(_370);
        StorageDead(_354);
        StorageDead(_343);
        StorageDead(_328);
        StorageDead(_324);
        StorageDead(_310);
        StorageDead(_219);
        StorageDead(_215);
        drop(_204) -> [return: bb386, unwind: bb424];
    }

    bb386: {
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_202);
        StorageDead(_154);
        StorageDead(_112);
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb408;
    }

    bb387: {
        StorageDead(_862);
        StorageDead(_856);
        StorageDead(_855);
        StorageDead(_854);
        StorageDead(_853);
        goto -> bb390;
    }

    bb388: {
        StorageDead(_840);
        StorageDead(_836);
        StorageDead(_835);
        StorageDead(_832);
        StorageDead(_831);
        StorageDead(_830);
        StorageDead(_829);
        goto -> bb390;
    }

    bb389: {
        StorageDead(_748);
        StorageDead(_746);
        StorageDead(_743);
        goto -> bb390;
    }

    bb390: {
        StorageDead(_742);
        goto -> bb392;
    }

    bb391: {
        StorageDead(_683);
        StorageDead(_679);
        goto -> bb392;
    }

    bb392: {
        StorageDead(_664);
        StorageDead(_656);
        StorageDead(_655);
        goto -> bb393;
    }

    bb393: {
        StorageDead(_533);
        StorageDead(_532);
        StorageDead(_531);
        goto -> bb394;
    }

    bb394: {
        StorageDead(_371);
        StorageDead(_370);
        goto -> bb399;
    }

    bb395: {
        StorageDead(_457);
        StorageDead(_456);
        goto -> bb397;
    }

    bb396: {
        StorageDead(_433);
        StorageDead(_431);
        StorageDead(_429);
        goto -> bb397;
    }

    bb397: {
        StorageDead(_428);
        goto -> bb398;
    }

    bb398: {
        StorageDead(_372);
        goto -> bb399;
    }

    bb399: {
        StorageDead(_354);
        goto -> bb400;
    }

    bb400: {
        StorageDead(_343);
        goto -> bb401;
    }

    bb401: {
        StorageDead(_328);
        StorageDead(_324);
        goto -> bb402;
    }

    bb402: {
        StorageDead(_310);
        goto -> bb403;
    }

    bb403: {
        StorageDead(_219);
        StorageDead(_215);
        drop(_204) -> [return: bb404, unwind: bb424];
    }

    bb404: {
        StorageDead(_204);
        StorageDead(_203);
        StorageDead(_202);
        goto -> bb405;
    }

    bb405: {
        StorageDead(_154);
        goto -> bb406;
    }

    bb406: {
        StorageDead(_112);
        goto -> bb407;
    }

    bb407: {
        StorageDead(_11);
        StorageDead(_10);
        goto -> bb408;
    }

    bb408: {
        return;
    }

    bb409 (cleanup): {
        drop(_632) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb410 (cleanup): {
        drop(_595) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb411 (cleanup): {
        drop(_563) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb412 (cleanup): {
        drop(_495) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb413 (cleanup): {
        drop(_476) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb414 (cleanup): {
        drop(_405) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb415 (cleanup): {
        drop(_386) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb416 (cleanup): {
        drop(_287) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb417 (cleanup): {
        drop(_253) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb418 (cleanup): {
        drop(_234) -> [return: bb419, unwind terminate(cleanup)];
    }

    bb419 (cleanup): {
        drop(_204) -> [return: bb424, unwind terminate(cleanup)];
    }

    bb420 (cleanup): {
        drop(_187) -> [return: bb424, unwind terminate(cleanup)];
    }

    bb421 (cleanup): {
        drop(_136) -> [return: bb424, unwind terminate(cleanup)];
    }

    bb422 (cleanup): {
        drop(_89) -> [return: bb424, unwind terminate(cleanup)];
    }

    bb423 (cleanup): {
        drop(_37) -> [return: bb424, unwind terminate(cleanup)];
    }

    bb424 (cleanup): {
        resume;
    }

    bb425 (cleanup): {
        _943 = discriminant(_205);
        goto -> bb424;
    }
}
