// MIR for `math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info` after PreCodegen

fn math::margin::calculate_margin_requirement_and_total_collateral_and_liability_info(_1: &User, _2: &PerpMarketMap<'_>, _3: &SpotMarketMap<'_>, _4: &mut OracleMap<'_>, _5: MarginContext) -> std::result::Result<MarginCalculation, error::ErrorCode> {
    debug user => _1;
    debug perp_market_map => _2;
    debug spot_market_map => _3;
    debug oracle_map => _4;
    debug context => _5;
    let mut _0: std::result::Result<state::margin_calculation::MarginCalculation, error::ErrorCode>;
    let mut _6: state::margin_calculation::MarginCalculation;
    let mut _7: state::margin_calculation::MarginContext;
    let mut _9: bool;
    let mut _10: &math::margin::MarginRequirementType;
    let mut _11: &math::margin::MarginRequirementType;
    let _12: math::margin::MarginRequirementType;
    let _13: ();
    let mut _14: isize;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: u32;
    let mut _21: &state::user::User;
    let mut _22: math::margin::MarginRequirementType;
    let _23: ();
    let mut _24: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _25: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _26: &[state::user::SpotPosition];
    let mut _27: &[state::user::SpotPosition; 8];
    let mut _29: ();
    let _30: ();
    let mut _31: std::option::Option<&state::user::SpotPosition>;
    let mut _32: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _33: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _34: isize;
    let mut _35: !;
    let _37: ();
    let mut _38: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _39: std::result::Result<(), error::ErrorCode>;
    let mut _40: &state::user::SpotPosition;
    let mut _41: isize;
    let mut _43: !;
    let mut _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: ();
    let mut _47: bool;
    let mut _48: &state::user::SpotPosition;
    let mut _49: !;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _52: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _53: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _54: &u16;
    let _55: &u16;
    let mut _56: isize;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, math::oracle::OracleValidity)>;
    let mut _65: std::result::Result<(&state::oracle::OraclePriceData, math::oracle::OracleValidity), error::ErrorCode>;
    let mut _66: &mut state::oracle_map::OracleMap<'_>;
    let mut _67: state::user::MarketType;
    let mut _68: u16;
    let mut _69: &state::spot_market::SpotMarket;
    let mut _70: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _71: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _72: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _73: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _74: &state::spot_market::SpotMarket;
    let _75: &state::spot_market::SpotMarket;
    let mut _76: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _77: i64;
    let mut _78: &state::spot_market::SpotMarket;
    let mut _79: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _80: u64;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _82: std::result::Result<u64, error::ErrorCode>;
    let mut _83: &state::spot_market::SpotMarket;
    let _84: &state::spot_market::SpotMarket;
    let mut _85: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _86: isize;
    let mut _88: !;
    let mut _89: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _97: ();
    let mut _98: bool;
    let mut _99: u8;
    let mut _100: bool;
    let mut _101: u16;
    let mut _102: &state::spot_market::SpotMarket;
    let mut _103: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _104: bool;
    let mut _105: &state::user::SpotPosition;
    let _106: ();
    let mut _107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _108: std::result::Result<(), error::ErrorCode>;
    let mut _109: bool;
    let mut _110: u8;
    let mut _111: u8;
    let mut _112: &state::spot_market::SpotMarket;
    let mut _113: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _114: ();
    let _116: ();
    let mut _117: &str;
    let _118: &str;
    let mut _119: &std::string::String;
    let _120: &std::string::String;
    let _121: std::string::String;
    let mut _123: std::fmt::Arguments<'_>;
    let mut _124: &[&str];
    let mut _125: &[&str; 2];
    let _126: &[&str; 2];
    let _127: [&str; 2];
    let mut _128: &[core::fmt::rt::Argument<'_>];
    let mut _129: &[core::fmt::rt::Argument<'_>; 1];
    let _130: &[core::fmt::rt::Argument<'_>; 1];
    let _131: [core::fmt::rt::Argument<'_>; 1];
    let mut _132: core::fmt::rt::Argument<'_>;
    let mut _133: &error::ErrorCode;
    let _134: &error::ErrorCode;
    let _135: ();
    let mut _136: &str;
    let _137: &str;
    let mut _138: &std::string::String;
    let _139: &std::string::String;
    let _140: std::string::String;
    let mut _142: std::fmt::Arguments<'_>;
    let mut _143: &[&str];
    let mut _144: &[&str; 3];
    let _145: &[&str; 3];
    let _146: [&str; 3];
    let mut _147: &[core::fmt::rt::Argument<'_>];
    let mut _148: &[core::fmt::rt::Argument<'_>; 2];
    let _149: &[core::fmt::rt::Argument<'_>; 2];
    let _150: [core::fmt::rt::Argument<'_>; 2];
    let mut _151: core::fmt::rt::Argument<'_>;
    let mut _152: &u8;
    let _153: &u8;
    let mut _154: core::fmt::rt::Argument<'_>;
    let mut _155: &u8;
    let _156: &u8;
    let _157: &state::spot_market::SpotMarket;
    let mut _158: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _159: error::ErrorCode;
    let mut _160: isize;
    let mut _162: !;
    let mut _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _166: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _167: std::result::Result<bool, error::ErrorCode>;
    let mut _168: math::oracle::OracleValidity;
    let mut _169: std::option::Option<math::oracle::DriftAction>;
    let mut _170: math::oracle::DriftAction;
    let mut _171: isize;
    let mut _173: !;
    let mut _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _177: i64;
    let mut _178: i64;
    let mut _179: &state::spot_market::SpotMarket;
    let mut _180: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _181: bool;
    let _182: ();
    let mut _183: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _184: std::result::Result<(), error::ErrorCode>;
    let mut _185: &state::oracle::StrictOraclePrice;
    let mut _186: isize;
    let mut _188: !;
    let mut _189: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _191: bool;
    let mut _192: u16;
    let mut _193: &state::spot_market::SpotMarket;
    let mut _194: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _196: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _197: std::result::Result<i128, error::ErrorCode>;
    let mut _198: &state::user::SpotPosition;
    let mut _199: &state::spot_market::SpotMarket;
    let _200: &state::spot_market::SpotMarket;
    let mut _201: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _202: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _203: isize;
    let mut _205: !;
    let mut _206: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _208: ();
    let mut _209: bool;
    let mut _210: i128;
    let _211: ();
    let mut _212: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _213: std::result::Result<(), error::ErrorCode>;
    let mut _214: bool;
    let mut _215: u64;
    let mut _216: ();
    let _218: ();
    let mut _219: &str;
    let _220: &str;
    let mut _221: &std::string::String;
    let _222: &std::string::String;
    let _223: std::string::String;
    let mut _225: std::fmt::Arguments<'_>;
    let mut _226: &[&str];
    let mut _227: &[&str; 2];
    let _228: &[&str; 2];
    let _229: [&str; 2];
    let mut _230: &[core::fmt::rt::Argument<'_>];
    let mut _231: &[core::fmt::rt::Argument<'_>; 1];
    let _232: &[core::fmt::rt::Argument<'_>; 1];
    let _233: [core::fmt::rt::Argument<'_>; 1];
    let mut _234: core::fmt::rt::Argument<'_>;
    let mut _235: &error::ErrorCode;
    let _236: &error::ErrorCode;
    let _237: ();
    let mut _238: &str;
    let _239: &str;
    let mut _240: &std::string::String;
    let _241: &std::string::String;
    let _242: std::string::String;
    let mut _244: std::fmt::Arguments<'_>;
    let mut _245: &[&str];
    let mut _246: &[&str; 2];
    let _247: &[&str; 2];
    let _248: [&str; 2];
    let mut _249: &[core::fmt::rt::Argument<'_>];
    let mut _250: &[core::fmt::rt::Argument<'_>; 2];
    let _251: &[core::fmt::rt::Argument<'_>; 2];
    let _252: [core::fmt::rt::Argument<'_>; 2];
    let mut _253: core::fmt::rt::Argument<'_>;
    let mut _254: &u64;
    let _255: &u64;
    let mut _256: core::fmt::rt::Argument<'_>;
    let mut _257: &i128;
    let _258: &i128;
    let mut _259: error::ErrorCode;
    let mut _260: isize;
    let mut _262: !;
    let mut _263: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _265: ();
    let mut _266: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _267: std::result::Result<(), error::ErrorCode>;
    let mut _268: &mut state::margin_calculation::MarginCalculation;
    let mut _269: &state::spot_market::SpotMarket;
    let _270: &state::spot_market::SpotMarket;
    let mut _271: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _272: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _273: i128;
    let mut _274: &state::oracle::StrictOraclePrice;
    let _275: &state::oracle::StrictOraclePrice;
    let mut _276: isize;
    let mut _278: !;
    let mut _279: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _282: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _283: std::result::Result<i128, error::ErrorCode>;
    let mut _284: i128;
    let mut _285: u32;
    let mut _286: &state::spot_market::SpotMarket;
    let mut _287: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _288: &state::oracle::StrictOraclePrice;
    let _289: &state::oracle::StrictOraclePrice;
    let mut _290: isize;
    let mut _292: !;
    let mut _293: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _295: isize;
    let _296: ();
    let mut _297: bool;
    let mut _298: bool;
    let _299: ();
    let mut _300: &str;
    let _301: &str;
    let mut _302: &std::string::String;
    let _303: &std::string::String;
    let _304: std::string::String;
    let mut _306: std::fmt::Arguments<'_>;
    let mut _307: &[&str];
    let mut _308: &[&str; 1];
    let _309: &[&str; 1];
    let _310: [&str; 1];
    let mut _311: &[core::fmt::rt::Argument<'_>];
    let mut _312: &[core::fmt::rt::Argument<'_>; 1];
    let _313: &[core::fmt::rt::Argument<'_>; 1];
    let _314: [core::fmt::rt::Argument<'_>; 1];
    let mut _315: core::fmt::rt::Argument<'_>;
    let mut _316: &u16;
    let _317: &u16;
    let _318: &state::spot_market::SpotMarket;
    let mut _319: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _320: ();
    let mut _321: bool;
    let _322: ();
    let mut _323: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _324: std::result::Result<(), error::ErrorCode>;
    let mut _325: &mut state::margin_calculation::MarginCalculation;
    let mut _326: i128;
    let mut _327: isize;
    let mut _329: !;
    let mut _330: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _332: ();
    let mut _333: &mut state::margin_calculation::MarginCalculation;
    let mut _334: bool;
    let mut _336: i128;
    let _337: ();
    let mut _338: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _339: std::result::Result<(), error::ErrorCode>;
    let mut _340: bool;
    let mut _341: u128;
    let mut _342: ();
    let _344: ();
    let mut _345: &str;
    let _346: &str;
    let mut _347: &std::string::String;
    let _348: &std::string::String;
    let _349: std::string::String;
    let mut _351: std::fmt::Arguments<'_>;
    let mut _352: &[&str];
    let mut _353: &[&str; 2];
    let _354: &[&str; 2];
    let _355: [&str; 2];
    let mut _356: &[core::fmt::rt::Argument<'_>];
    let mut _357: &[core::fmt::rt::Argument<'_>; 1];
    let _358: &[core::fmt::rt::Argument<'_>; 1];
    let _359: [core::fmt::rt::Argument<'_>; 1];
    let mut _360: core::fmt::rt::Argument<'_>;
    let mut _361: &error::ErrorCode;
    let _362: &error::ErrorCode;
    let _363: ();
    let mut _364: &str;
    let _365: &str;
    let mut _366: &std::string::String;
    let _367: &std::string::String;
    let _368: std::string::String;
    let mut _370: std::fmt::Arguments<'_>;
    let mut _371: &[&str];
    let mut _372: &[&str; 2];
    let _373: &[&str; 2];
    let _374: [&str; 2];
    let mut _375: &[core::fmt::rt::Argument<'_>];
    let mut _376: &[core::fmt::rt::Argument<'_>; 2];
    let _377: &[core::fmt::rt::Argument<'_>; 2];
    let _378: [core::fmt::rt::Argument<'_>; 2];
    let mut _379: core::fmt::rt::Argument<'_>;
    let mut _380: &i128;
    let _381: &i128;
    let mut _382: core::fmt::rt::Argument<'_>;
    let mut _383: &u16;
    let _384: &u16;
    let _385: &state::spot_market::SpotMarket;
    let mut _386: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _387: error::ErrorCode;
    let mut _388: isize;
    let mut _390: !;
    let mut _391: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _393: ();
    let mut _394: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _395: std::result::Result<(), error::ErrorCode>;
    let mut _396: &mut state::margin_calculation::MarginCalculation;
    let mut _397: u128;
    let mut _398: u128;
    let mut _399: state::margin_calculation::MarketIdentifier;
    let mut _400: isize;
    let mut _402: !;
    let mut _403: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _405: ();
    let mut _406: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _407: std::result::Result<(), error::ErrorCode>;
    let mut _408: &mut state::margin_calculation::MarginCalculation;
    let mut _409: isize;
    let mut _411: !;
    let mut _412: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _414: ();
    let mut _415: &mut state::margin_calculation::MarginCalculation;
    let mut _416: bool;
    let mut _418: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _419: std::result::Result<i128, error::ErrorCode>;
    let mut _420: &state::user::SpotPosition;
    let mut _421: &state::spot_market::SpotMarket;
    let _422: &state::spot_market::SpotMarket;
    let mut _423: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _424: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _425: isize;
    let mut _427: !;
    let mut _428: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _430: ();
    let mut _431: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _432: std::result::Result<(), error::ErrorCode>;
    let mut _433: &mut state::margin_calculation::MarginCalculation;
    let mut _434: &state::spot_market::SpotMarket;
    let _435: &state::spot_market::SpotMarket;
    let mut _436: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _437: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _438: i128;
    let mut _439: &state::oracle::StrictOraclePrice;
    let _440: &state::oracle::StrictOraclePrice;
    let mut _441: isize;
    let mut _443: !;
    let mut _444: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _450: state::user::OrderFillSimulation;
    let mut _451: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::user::OrderFillSimulation>;
    let mut _452: std::result::Result<state::user::OrderFillSimulation, error::ErrorCode>;
    let mut _453: state::user::OrderFillSimulation;
    let mut _454: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::user::OrderFillSimulation>;
    let mut _455: std::result::Result<state::user::OrderFillSimulation, error::ErrorCode>;
    let mut _456: &state::user::SpotPosition;
    let mut _457: &state::spot_market::SpotMarket;
    let _458: &state::spot_market::SpotMarket;
    let mut _459: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _460: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _461: &state::oracle::StrictOraclePrice;
    let _462: &state::oracle::StrictOraclePrice;
    let mut _463: std::option::Option<i128>;
    let mut _464: i128;
    let mut _465: math::margin::MarginRequirementType;
    let mut _466: isize;
    let mut _468: !;
    let mut _469: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _471: &state::spot_market::SpotMarket;
    let _472: &state::spot_market::SpotMarket;
    let mut _473: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _474: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _475: i64;
    let mut _476: u32;
    let mut _477: isize;
    let mut _479: !;
    let mut _480: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _482: ();
    let mut _483: bool;
    let mut _484: i128;
    let _485: ();
    let mut _486: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _487: std::result::Result<(), error::ErrorCode>;
    let mut _488: bool;
    let mut _489: u64;
    let mut _490: ();
    let _492: ();
    let mut _493: &str;
    let _494: &str;
    let mut _495: &std::string::String;
    let _496: &std::string::String;
    let _497: std::string::String;
    let mut _499: std::fmt::Arguments<'_>;
    let mut _500: &[&str];
    let mut _501: &[&str; 2];
    let _502: &[&str; 2];
    let _503: [&str; 2];
    let mut _504: &[core::fmt::rt::Argument<'_>];
    let mut _505: &[core::fmt::rt::Argument<'_>; 1];
    let _506: &[core::fmt::rt::Argument<'_>; 1];
    let _507: [core::fmt::rt::Argument<'_>; 1];
    let mut _508: core::fmt::rt::Argument<'_>;
    let mut _509: &error::ErrorCode;
    let _510: &error::ErrorCode;
    let _511: ();
    let mut _512: &str;
    let _513: &str;
    let mut _514: &std::string::String;
    let _515: &std::string::String;
    let _516: std::string::String;
    let mut _518: std::fmt::Arguments<'_>;
    let mut _519: &[&str];
    let mut _520: &[&str; 3];
    let _521: &[&str; 3];
    let _522: [&str; 3];
    let mut _523: &[core::fmt::rt::Argument<'_>];
    let mut _524: &[core::fmt::rt::Argument<'_>; 3];
    let _525: &[core::fmt::rt::Argument<'_>; 3];
    let _526: [core::fmt::rt::Argument<'_>; 3];
    let mut _527: core::fmt::rt::Argument<'_>;
    let mut _528: &u64;
    let _529: &u64;
    let mut _530: core::fmt::rt::Argument<'_>;
    let mut _531: &i128;
    let _532: &i128;
    let mut _533: core::fmt::rt::Argument<'_>;
    let mut _534: &u16;
    let _535: &u16;
    let _536: &state::spot_market::SpotMarket;
    let mut _537: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _538: error::ErrorCode;
    let mut _539: isize;
    let mut _541: !;
    let mut _542: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _544: ();
    let mut _545: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _546: std::result::Result<(), error::ErrorCode>;
    let mut _547: &mut state::margin_calculation::MarginCalculation;
    let mut _548: u128;
    let mut _549: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _550: std::result::Result<u128, error::ErrorCode>;
    let mut _551: &state::user::SpotPosition;
    let mut _552: isize;
    let mut _554: !;
    let mut _555: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _557: state::margin_calculation::MarketIdentifier;
    let mut _558: u16;
    let mut _559: &state::spot_market::SpotMarket;
    let mut _560: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _561: isize;
    let mut _563: !;
    let mut _564: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _566: ();
    let mut _567: std::cmp::Ordering;
    let mut _568: &i128;
    let mut _569: &i128;
    let _570: &i128;
    let _571: i128;
    let mut _572: i8;
    let _573: ();
    let mut _574: bool;
    let mut _575: bool;
    let _576: ();
    let mut _577: &str;
    let _578: &str;
    let mut _579: &std::string::String;
    let _580: &std::string::String;
    let _581: std::string::String;
    let mut _583: std::fmt::Arguments<'_>;
    let mut _584: &[&str];
    let mut _585: &[&str; 1];
    let _586: &[&str; 1];
    let _587: [&str; 1];
    let mut _588: &[core::fmt::rt::Argument<'_>];
    let mut _589: &[core::fmt::rt::Argument<'_>; 1];
    let _590: &[core::fmt::rt::Argument<'_>; 1];
    let _591: [core::fmt::rt::Argument<'_>; 1];
    let mut _592: core::fmt::rt::Argument<'_>;
    let mut _593: &u16;
    let _594: &u16;
    let _595: &state::spot_market::SpotMarket;
    let mut _596: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _597: ();
    let mut _598: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _599: std::result::Result<(), error::ErrorCode>;
    let mut _600: &mut state::margin_calculation::MarginCalculation;
    let mut _601: i128;
    let mut _602: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _603: std::result::Result<i128, error::ErrorCode>;
    let mut _604: i128;
    let mut _605: isize;
    let mut _607: !;
    let mut _608: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _610: isize;
    let mut _612: !;
    let mut _613: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _615: ();
    let mut _616: &mut state::margin_calculation::MarginCalculation;
    let mut _617: bool;
    let _618: ();
    let mut _619: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _620: std::result::Result<(), error::ErrorCode>;
    let mut _621: bool;
    let mut _622: u128;
    let mut _623: i128;
    let mut _624: u128;
    let mut _625: i128;
    let mut _626: ();
    let _628: ();
    let mut _629: &str;
    let _630: &str;
    let mut _631: &std::string::String;
    let _632: &std::string::String;
    let _633: std::string::String;
    let mut _635: std::fmt::Arguments<'_>;
    let mut _636: &[&str];
    let mut _637: &[&str; 2];
    let _638: &[&str; 2];
    let _639: [&str; 2];
    let mut _640: &[core::fmt::rt::Argument<'_>];
    let mut _641: &[core::fmt::rt::Argument<'_>; 1];
    let _642: &[core::fmt::rt::Argument<'_>; 1];
    let _643: [core::fmt::rt::Argument<'_>; 1];
    let mut _644: core::fmt::rt::Argument<'_>;
    let mut _645: &error::ErrorCode;
    let _646: &error::ErrorCode;
    let _647: ();
    let mut _648: &str;
    let _649: &str;
    let mut _650: &std::string::String;
    let _651: &std::string::String;
    let _652: std::string::String;
    let mut _654: std::fmt::Arguments<'_>;
    let mut _655: &[&str];
    let mut _656: &[&str; 1];
    let _657: &[&str; 1];
    let _658: [&str; 1];
    let mut _659: &[core::fmt::rt::Argument<'_>];
    let mut _660: &[core::fmt::rt::Argument<'_>; 1];
    let _661: &[core::fmt::rt::Argument<'_>; 1];
    let _662: [core::fmt::rt::Argument<'_>; 1];
    let mut _663: core::fmt::rt::Argument<'_>;
    let mut _664: &u16;
    let _665: &u16;
    let _666: &state::spot_market::SpotMarket;
    let mut _667: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _668: error::ErrorCode;
    let mut _669: isize;
    let mut _671: !;
    let mut _672: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _674: ();
    let mut _675: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _676: std::result::Result<(), error::ErrorCode>;
    let mut _677: bool;
    let mut _678: i128;
    let mut _679: ();
    let _681: ();
    let mut _682: &str;
    let _683: &str;
    let mut _684: &std::string::String;
    let _685: &std::string::String;
    let _686: std::string::String;
    let mut _688: std::fmt::Arguments<'_>;
    let mut _689: &[&str];
    let mut _690: &[&str; 2];
    let _691: &[&str; 2];
    let _692: [&str; 2];
    let mut _693: &[core::fmt::rt::Argument<'_>];
    let mut _694: &[core::fmt::rt::Argument<'_>; 1];
    let _695: &[core::fmt::rt::Argument<'_>; 1];
    let _696: [core::fmt::rt::Argument<'_>; 1];
    let mut _697: core::fmt::rt::Argument<'_>;
    let mut _698: &error::ErrorCode;
    let _699: &error::ErrorCode;
    let _700: ();
    let mut _701: &str;
    let _702: &str;
    let mut _703: &std::string::String;
    let _704: &std::string::String;
    let _705: std::string::String;
    let mut _707: std::fmt::Arguments<'_>;
    let mut _708: &[&str];
    let mut _709: &[&str; 2];
    let _710: &[&str; 2];
    let _711: [&str; 2];
    let mut _712: &[core::fmt::rt::Argument<'_>];
    let mut _713: &[core::fmt::rt::Argument<'_>; 2];
    let _714: &[core::fmt::rt::Argument<'_>; 2];
    let _715: [core::fmt::rt::Argument<'_>; 2];
    let mut _716: core::fmt::rt::Argument<'_>;
    let mut _717: &i128;
    let _718: &i128;
    let mut _719: core::fmt::rt::Argument<'_>;
    let mut _720: &u16;
    let _721: &u16;
    let _722: &state::spot_market::SpotMarket;
    let mut _723: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _724: error::ErrorCode;
    let mut _725: isize;
    let mut _727: !;
    let mut _728: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _730: ();
    let mut _731: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _732: std::result::Result<(), error::ErrorCode>;
    let mut _733: &mut state::margin_calculation::MarginCalculation;
    let mut _734: u128;
    let mut _735: i128;
    let mut _736: u128;
    let mut _737: i128;
    let mut _738: state::margin_calculation::MarketIdentifier;
    let mut _739: u16;
    let mut _740: &state::spot_market::SpotMarket;
    let mut _741: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _742: isize;
    let mut _744: !;
    let mut _745: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _747: ();
    let mut _748: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _749: std::result::Result<(), error::ErrorCode>;
    let mut _750: &mut state::margin_calculation::MarginCalculation;
    let mut _751: isize;
    let mut _753: !;
    let mut _754: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _756: ();
    let mut _757: &mut state::margin_calculation::MarginCalculation;
    let mut _758: bool;
    let mut _759: &state::spot_market::AssetTier;
    let _760: &state::spot_market::SpotMarket;
    let mut _761: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _762: &state::spot_market::AssetTier;
    let _763: state::spot_market::AssetTier;
    let _764: ();
    let mut _765: &mut state::margin_calculation::MarginCalculation;
    let mut _766: bool;
    let mut _767: bool;
    let mut _768: &state::user::SpotPosition;
    let _769: ();
    let mut _770: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _771: std::result::Result<(), error::ErrorCode>;
    let mut _772: &mut state::margin_calculation::MarginCalculation;
    let mut _773: isize;
    let mut _775: !;
    let mut _776: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _778: ();
    let mut _779: &mut state::margin_calculation::MarginCalculation;
    let mut _780: bool;
    let _781: ();
    let mut _782: &mut state::margin_calculation::MarginCalculation;
    let mut _783: bool;
    let mut _784: &state::spot_market::AssetTier;
    let _785: &state::spot_market::SpotMarket;
    let mut _786: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _787: &state::spot_market::AssetTier;
    let _788: state::spot_market::AssetTier;
    let mut _789: std::cmp::Ordering;
    let mut _790: &i128;
    let mut _791: &i128;
    let _792: &i128;
    let _793: i128;
    let mut _794: i8;
    let _795: ();
    let mut _796: bool;
    let mut _797: bool;
    let _798: ();
    let mut _799: &str;
    let _800: &str;
    let mut _801: &std::string::String;
    let _802: &std::string::String;
    let _803: std::string::String;
    let mut _805: std::fmt::Arguments<'_>;
    let mut _806: &[&str];
    let mut _807: &[&str; 1];
    let _808: &[&str; 1];
    let _809: [&str; 1];
    let mut _810: &[core::fmt::rt::Argument<'_>];
    let mut _811: &[core::fmt::rt::Argument<'_>; 1];
    let _812: &[core::fmt::rt::Argument<'_>; 1];
    let _813: [core::fmt::rt::Argument<'_>; 1];
    let mut _814: core::fmt::rt::Argument<'_>;
    let mut _815: &u16;
    let _816: &u16;
    let _817: &state::spot_market::SpotMarket;
    let mut _818: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _819: ();
    let mut _820: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _821: std::result::Result<(), error::ErrorCode>;
    let mut _822: &mut state::margin_calculation::MarginCalculation;
    let mut _823: i128;
    let mut _824: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _825: std::result::Result<i128, error::ErrorCode>;
    let mut _826: i128;
    let mut _827: isize;
    let mut _829: !;
    let mut _830: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _832: isize;
    let mut _834: !;
    let mut _835: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _837: ();
    let mut _838: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _839: std::result::Result<(), error::ErrorCode>;
    let mut _840: &mut state::margin_calculation::MarginCalculation;
    let mut _841: u128;
    let mut _842: i128;
    let mut _843: u128;
    let mut _844: i128;
    let mut _845: state::margin_calculation::MarketIdentifier;
    let mut _846: isize;
    let mut _848: !;
    let mut _849: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _851: ();
    let mut _852: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _853: std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _854: &[state::user::PerpPosition];
    let mut _855: &[state::user::PerpPosition; 8];
    let _857: ();
    let mut _858: std::option::Option<&state::user::PerpPosition>;
    let mut _859: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _860: &mut std::slice::Iter<'_, state::user::PerpPosition>;
    let mut _861: isize;
    let mut _862: !;
    let _864: ();
    let mut _865: bool;
    let mut _866: &state::user::PerpPosition;
    let mut _867: !;
    let _869: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _870: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _871: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _872: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _873: &u16;
    let _874: &u16;
    let mut _875: isize;
    let mut _877: !;
    let mut _878: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _880: ();
    let mut _881: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _882: std::result::Result<(), error::ErrorCode>;
    let mut _883: bool;
    let mut _884: u8;
    let mut _885: u8;
    let mut _886: &state::perp_market::PerpMarket;
    let mut _887: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _888: ();
    let _890: ();
    let mut _891: &str;
    let _892: &str;
    let mut _893: &std::string::String;
    let _894: &std::string::String;
    let _895: std::string::String;
    let mut _897: std::fmt::Arguments<'_>;
    let mut _898: &[&str];
    let mut _899: &[&str; 2];
    let _900: &[&str; 2];
    let _901: [&str; 2];
    let mut _902: &[core::fmt::rt::Argument<'_>];
    let mut _903: &[core::fmt::rt::Argument<'_>; 1];
    let _904: &[core::fmt::rt::Argument<'_>; 1];
    let _905: [core::fmt::rt::Argument<'_>; 1];
    let mut _906: core::fmt::rt::Argument<'_>;
    let mut _907: &error::ErrorCode;
    let _908: &error::ErrorCode;
    let _909: ();
    let mut _910: &str;
    let _911: &str;
    let mut _912: &std::string::String;
    let _913: &std::string::String;
    let _914: std::string::String;
    let mut _916: std::fmt::Arguments<'_>;
    let mut _917: &[&str];
    let mut _918: &[&str; 3];
    let _919: &[&str; 3];
    let _920: [&str; 3];
    let mut _921: &[core::fmt::rt::Argument<'_>];
    let mut _922: &[core::fmt::rt::Argument<'_>; 2];
    let _923: &[core::fmt::rt::Argument<'_>; 2];
    let _924: [core::fmt::rt::Argument<'_>; 2];
    let mut _925: core::fmt::rt::Argument<'_>;
    let mut _926: &u8;
    let _927: &u8;
    let mut _928: core::fmt::rt::Argument<'_>;
    let mut _929: &u8;
    let _930: &u8;
    let _931: &state::perp_market::PerpMarket;
    let mut _932: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _933: error::ErrorCode;
    let mut _934: isize;
    let mut _936: !;
    let mut _937: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _940: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _941: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _942: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _943: &u16;
    let _944: &u16;
    let _945: &state::perp_market::PerpMarket;
    let mut _946: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _947: isize;
    let mut _949: !;
    let mut _950: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _954: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
    let mut _955: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, math::oracle::OracleValidity)>;
    let mut _956: std::result::Result<(&state::oracle::OraclePriceData, math::oracle::OracleValidity), error::ErrorCode>;
    let mut _957: &mut state::oracle_map::OracleMap<'_>;
    let mut _958: state::user::MarketType;
    let mut _959: u16;
    let mut _960: &state::spot_market::SpotMarket;
    let mut _961: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _962: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _963: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _964: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _965: &state::spot_market::SpotMarket;
    let _966: &state::spot_market::SpotMarket;
    let mut _967: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _968: i64;
    let mut _969: &state::spot_market::SpotMarket;
    let mut _970: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _971: u64;
    let mut _972: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _973: std::result::Result<u64, error::ErrorCode>;
    let mut _974: &state::spot_market::SpotMarket;
    let _975: &state::spot_market::SpotMarket;
    let mut _976: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _977: isize;
    let mut _979: !;
    let mut _980: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _982: isize;
    let mut _984: !;
    let mut _985: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _988: i64;
    let mut _989: i64;
    let mut _990: &state::spot_market::SpotMarket;
    let mut _991: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _992: bool;
    let _993: ();
    let mut _994: std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _997: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
    let mut _998: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (&state::oracle::OraclePriceData, math::oracle::OracleValidity)>;
    let mut _999: std::result::Result<(&state::oracle::OraclePriceData, math::oracle::OracleValidity), error::ErrorCode>;
    let mut _1000: &mut state::oracle_map::OracleMap<'_>;
    let mut _1001: state::user::MarketType;
    let mut _1002: u16;
    let mut _1003: &state::perp_market::PerpMarket;
    let mut _1004: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1005: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1006: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1007: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _1008: &state::perp_market::PerpMarket;
    let _1009: &state::perp_market::PerpMarket;
    let mut _1010: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1011: i64;
    let mut _1012: &state::perp_market::PerpMarket;
    let mut _1013: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1014: u64;
    let mut _1015: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _1016: std::result::Result<u64, error::ErrorCode>;
    let mut _1017: state::perp_market::PerpMarket;
    let mut _1018: &state::perp_market::PerpMarket;
    let mut _1019: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1020: isize;
    let mut _1022: !;
    let mut _1023: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1025: isize;
    let mut _1027: !;
    let mut _1028: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1031: bool;
    let mut _1032: &math::margin::MarginRequirementType;
    let mut _1033: &math::margin::MarginRequirementType;
    let _1034: math::margin::MarginRequirementType;
    let mut _1035: u16;
    let mut _1041: (u128, i128, u128, u128, u128);
    let mut _1042: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, i128, u128, u128, u128)>;
    let mut _1043: std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode>;
    let mut _1044: &state::user::PerpPosition;
    let mut _1045: &state::perp_market::PerpMarket;
    let _1046: &state::perp_market::PerpMarket;
    let mut _1047: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1048: &state::oracle::OraclePriceData;
    let mut _1049: &state::oracle::StrictOraclePrice;
    let _1050: &state::oracle::StrictOraclePrice;
    let mut _1051: math::margin::MarginRequirementType;
    let mut _1052: u32;
    let mut _1053: u32;
    let mut _1054: u32;
    let mut _1055: bool;
    let mut _1056: bool;
    let mut _1057: &state::margin_calculation::MarginCalculation;
    let mut _1058: isize;
    let mut _1060: !;
    let mut _1061: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1063: ();
    let mut _1064: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1065: std::result::Result<(), error::ErrorCode>;
    let mut _1066: &mut state::margin_calculation::MarginCalculation;
    let mut _1067: &state::perp_market::PerpMarket;
    let _1068: &state::perp_market::PerpMarket;
    let mut _1069: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1070: &state::user::PerpPosition;
    let mut _1071: u128;
    let mut _1072: i64;
    let mut _1073: isize;
    let mut _1075: !;
    let mut _1076: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1078: ();
    let mut _1079: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1080: std::result::Result<(), error::ErrorCode>;
    let mut _1081: &mut state::margin_calculation::MarginCalculation;
    let mut _1082: u128;
    let mut _1083: u128;
    let mut _1084: state::margin_calculation::MarketIdentifier;
    let mut _1085: u16;
    let mut _1086: &state::perp_market::PerpMarket;
    let mut _1087: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1088: isize;
    let mut _1090: !;
    let mut _1091: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1093: ();
    let mut _1094: bool;
    let mut _1095: &state::margin_calculation::MarginCalculation;
    let _1096: ();
    let mut _1097: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1098: std::result::Result<(), error::ErrorCode>;
    let mut _1099: &mut state::margin_calculation::MarginCalculation;
    let mut _1100: u128;
    let mut _1101: isize;
    let mut _1103: !;
    let mut _1104: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1106: ();
    let mut _1107: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1108: std::result::Result<(), error::ErrorCode>;
    let mut _1109: &mut state::margin_calculation::MarginCalculation;
    let mut _1110: i128;
    let mut _1111: isize;
    let mut _1113: !;
    let mut _1114: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1117: bool;
    let mut _1118: i64;
    let mut _1119: bool;
    let mut _1120: i64;
    let mut _1121: &state::user::PerpPosition;
    let _1122: ();
    let mut _1123: bool;
    let _1124: ();
    let mut _1125: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1126: std::result::Result<(), error::ErrorCode>;
    let mut _1127: &mut state::margin_calculation::MarginCalculation;
    let mut _1128: isize;
    let mut _1130: !;
    let mut _1131: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1133: ();
    let mut _1134: &mut state::margin_calculation::MarginCalculation;
    let mut _1135: bool;
    let mut _1136: &state::perp_market::ContractTier;
    let _1137: &state::perp_market::PerpMarket;
    let mut _1138: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _1139: &state::perp_market::ContractTier;
    let _1140: state::perp_market::ContractTier;
    let mut _1141: bool;
    let mut _1142: bool;
    let mut _1143: &math::margin::MarginRequirementType;
    let mut _1144: &math::margin::MarginRequirementType;
    let _1145: math::margin::MarginRequirementType;
    let _1146: ();
    let mut _1147: &mut state::margin_calculation::MarginCalculation;
    let mut _1148: bool;
    let mut _1149: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1150: std::result::Result<bool, error::ErrorCode>;
    let mut _1151: math::oracle::OracleValidity;
    let mut _1152: std::option::Option<math::oracle::DriftAction>;
    let mut _1153: math::oracle::DriftAction;
    let mut _1154: isize;
    let mut _1156: !;
    let mut _1157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1159: ();
    let mut _1160: &mut state::margin_calculation::MarginCalculation;
    let mut _1161: bool;
    let mut _1162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, bool>;
    let mut _1163: std::result::Result<bool, error::ErrorCode>;
    let mut _1164: math::oracle::OracleValidity;
    let mut _1165: std::option::Option<math::oracle::DriftAction>;
    let mut _1166: math::oracle::DriftAction;
    let mut _1167: isize;
    let mut _1169: !;
    let mut _1170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1172: ();
    let mut _1173: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1174: std::result::Result<(), error::ErrorCode>;
    let mut _1175: &state::margin_calculation::MarginCalculation;
    let mut _1176: isize;
    let mut _1178: !;
    let mut _1179: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1182: ();
    let mut _1183: std::slice::Iter<'_, (u16, i128)>;
    let mut _1184: std::slice::Iter<'_, (u16, i128)>;
    let mut _1185: &[(u16, i128)];
    let mut _1186: &[(u16, i128); 2];
    let _1188: ();
    let mut _1189: std::option::Option<&(u16, i128)>;
    let mut _1190: &mut std::slice::Iter<'_, (u16, i128)>;
    let mut _1191: &mut std::slice::Iter<'_, (u16, i128)>;
    let mut _1192: isize;
    let mut _1193: !;
    let _1196: ();
    let mut _1197: bool;
    let mut _1198: i128;
    let mut _1199: !;
    let _1200: ();
    let mut _1201: bool;
    let mut _1202: &mut std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _1203: std::slice::Iter<'_, state::user::SpotPosition>;
    let mut _1204: &[state::user::SpotPosition];
    let mut _1205: &[state::user::SpotPosition; 8];
    let mut _1206: {closure@programs/drift/src/math/margin.rs:623:18: 623:21};
    let mut _1207: &&u16;
    let mut _1208: !;
    let mut _1210: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, state::spot_market::SpotMarket>>;
    let mut _1211: std::result::Result<std::cell::Ref<'_, state::spot_market::SpotMarket>, error::ErrorCode>;
    let mut _1212: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _1213: &u16;
    let mut _1214: isize;
    let mut _1216: !;
    let mut _1217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1220: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, &state::oracle::OraclePriceData>;
    let mut _1221: std::result::Result<&state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _1222: &mut state::oracle_map::OracleMap<'_>;
    let mut _1223: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1224: &(anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let _1225: (anchor_lang::prelude::Pubkey, state::oracle::OracleSource);
    let mut _1226: &state::spot_market::SpotMarket;
    let _1227: &state::spot_market::SpotMarket;
    let mut _1228: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1229: isize;
    let mut _1231: !;
    let mut _1232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1235: i64;
    let mut _1236: i64;
    let mut _1237: &state::spot_market::SpotMarket;
    let mut _1238: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1239: bool;
    let _1240: ();
    let mut _1241: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1242: std::result::Result<(), error::ErrorCode>;
    let mut _1243: &state::oracle::StrictOraclePrice;
    let mut _1244: isize;
    let mut _1246: !;
    let mut _1247: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _1249: ();
    let mut _1250: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _1251: std::result::Result<(), error::ErrorCode>;
    let mut _1252: &mut state::margin_calculation::MarginCalculation;
    let mut _1253: &state::spot_market::SpotMarket;
    let _1254: &state::spot_market::SpotMarket;
    let mut _1255: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _1256: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _1257: &state::oracle::StrictOraclePrice;
    let _1258: &state::oracle::StrictOraclePrice;
    let mut _1259: isize;
    let mut _1261: !;
    let mut _1262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _1264: state::margin_calculation::MarginCalculation;
    let mut _1290: &(u16, i128);
    let mut _1291: &(u16, i128);
    let mut _1292: bool;
    let mut _1293: isize;
    let mut _1294: isize;
    let mut _1295: isize;
    let mut _1296: isize;
    let mut _1297: isize;
    let mut _1298: isize;
    let mut _1299: isize;
    let mut _1300: isize;
    let mut _1301: isize;
    let mut _1302: isize;
    let mut _1303: isize;
    let mut _1304: isize;
    let mut _1305: isize;
    let mut _1306: isize;
    let mut _1307: isize;
    let mut _1308: isize;
    let mut _1309: isize;
    let mut _1310: isize;
    let mut _1311: isize;
    let mut _1312: isize;
    scope 1 {
        debug calculation => _6;
        let mut _8: u32;
        let mut _1289: &math::margin::MarginRequirementType;
        scope 2 {
            debug user_custom_margin_ratio => _8;
            let _19: u8;
            scope 3 {
                debug margin_ratio_override => _15;
                let _15: u32;
            }
            scope 4 {
                debug user_pool_id => _19;
                let _20: bool;
                scope 5 {
                    debug user_high_leverage_mode => _20;
                    let mut _28: std::slice::Iter<'_, state::user::SpotPosition>;
                    let mut _856: std::slice::Iter<'_, state::user::PerpPosition>;
                    let _1177: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _1180: ();
                    let _1181: [(u16, i128); 2];
                    scope 6 {
                        debug iter => _28;
                        let _36: &state::user::SpotPosition;
                        scope 7 {
                            debug spot_position => _36;
                            let _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _45: ();
                            let _50: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _60: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                            scope 8 {
                                debug residual => _42;
                                scope 9 {
                                }
                            }
                            scope 10 {
                                debug val => _45;
                                scope 11 {
                                }
                            }
                            scope 12 {
                                debug spot_market => _50;
                                let _61: &state::oracle::OraclePriceData;
                                let _62: math::oracle::OracleValidity;
                                let _87: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _90: u64;
                                let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _95: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
                                scope 17 {
                                    debug oracle_price_data => _61;
                                    debug oracle_validity => _62;
                                    let mut _96: bool;
                                    scope 26 {
                                        debug skip_token_value => _96;
                                        let _115: error::ErrorCode;
                                        let _161: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _164: ();
                                        let _165: bool;
                                        let _172: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _175: bool;
                                        scope 27 {
                                            debug error_code => _115;
                                            let _122: std::string::String;
                                            let _141: std::string::String;
                                            let mut _1282: &[&str; 3];
                                            let mut _1283: &[&str; 2];
                                            scope 28 {
                                                debug res => _122;
                                            }
                                            scope 29 {
                                                debug res => _141;
                                            }
                                        }
                                        scope 30 {
                                            debug residual => _161;
                                            scope 31 {
                                            }
                                        }
                                        scope 32 {
                                            debug val => _164;
                                            scope 33 {
                                            }
                                        }
                                        scope 34 {
                                            debug oracle_valid => _165;
                                            let _176: state::oracle::StrictOraclePrice;
                                            scope 39 {
                                                debug strict_oracle_price => _176;
                                                let _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _190: ();
                                                let _195: i128;
                                                let _204: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _207: i128;
                                                let _417: i128;
                                                let _426: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                let _429: i128;
                                                scope 40 {
                                                    debug residual => _187;
                                                    scope 41 {
                                                    }
                                                }
                                                scope 42 {
                                                    debug val => _190;
                                                    scope 43 {
                                                    }
                                                }
                                                scope 44 {
                                                    debug token_amount => _195;
                                                    let _217: error::ErrorCode;
                                                    let _261: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _264: ();
                                                    let _277: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _280: ();
                                                    let mut _281: i128;
                                                    let _291: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _294: i128;
                                                    scope 49 {
                                                        debug error_code => _217;
                                                        let _224: std::string::String;
                                                        let _243: std::string::String;
                                                        let mut _1268: &[&str; 2];
                                                        let mut _1269: &[&str; 2];
                                                        scope 50 {
                                                            debug res => _224;
                                                        }
                                                        scope 51 {
                                                            debug res => _243;
                                                        }
                                                    }
                                                    scope 52 {
                                                        debug residual => _261;
                                                        scope 53 {
                                                        }
                                                    }
                                                    scope 54 {
                                                        debug val => _264;
                                                        scope 55 {
                                                        }
                                                    }
                                                    scope 56 {
                                                        debug residual => _277;
                                                        scope 57 {
                                                        }
                                                    }
                                                    scope 58 {
                                                        debug val => _280;
                                                        scope 59 {
                                                        }
                                                    }
                                                    scope 60 {
                                                        debug token_value => _281;
                                                        let _305: std::string::String;
                                                        let _328: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _331: ();
                                                        let _335: u128;
                                                        let mut _1267: &[&str; 1];
                                                        scope 65 {
                                                            debug res => _305;
                                                        }
                                                        scope 66 {
                                                            debug residual => _328;
                                                            scope 67 {
                                                            }
                                                        }
                                                        scope 68 {
                                                            debug val => _331;
                                                            scope 69 {
                                                            }
                                                        }
                                                        scope 70 {
                                                            debug token_value => _335;
                                                            let _343: error::ErrorCode;
                                                            let _389: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _392: ();
                                                            let _401: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _404: ();
                                                            let _410: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _413: ();
                                                            scope 71 {
                                                                debug error_code => _343;
                                                                let _350: std::string::String;
                                                                let _369: std::string::String;
                                                                let mut _1265: &[&str; 2];
                                                                let mut _1266: &[&str; 2];
                                                                scope 72 {
                                                                    debug res => _350;
                                                                }
                                                                scope 73 {
                                                                    debug res => _369;
                                                                }
                                                            }
                                                            scope 74 {
                                                                debug residual => _389;
                                                                scope 75 {
                                                                }
                                                            }
                                                            scope 76 {
                                                                debug val => _392;
                                                                scope 77 {
                                                                }
                                                            }
                                                            scope 78 {
                                                                debug residual => _401;
                                                                scope 79 {
                                                                }
                                                            }
                                                            scope 80 {
                                                                debug val => _404;
                                                                scope 81 {
                                                                }
                                                            }
                                                            scope 82 {
                                                                debug residual => _410;
                                                                scope 83 {
                                                                }
                                                            }
                                                            scope 84 {
                                                                debug val => _413;
                                                                scope 85 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 61 {
                                                        debug residual => _291;
                                                        scope 62 {
                                                        }
                                                    }
                                                    scope 63 {
                                                        debug val => _294;
                                                        scope 64 {
                                                        }
                                                    }
                                                }
                                                scope 45 {
                                                    debug residual => _204;
                                                    scope 46 {
                                                    }
                                                }
                                                scope 47 {
                                                    debug val => _207;
                                                    scope 48 {
                                                    }
                                                }
                                                scope 86 {
                                                    debug signed_token_amount => _417;
                                                    let _442: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _445: ();
                                                    let _446: i128;
                                                    let mut _447: i128;
                                                    let _448: i128;
                                                    let mut _449: i128;
                                                    let _467: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _470: state::user::OrderFillSimulation;
                                                    let _478: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _481: state::user::OrderFillSimulation;
                                                    scope 91 {
                                                        debug residual => _442;
                                                        scope 92 {
                                                        }
                                                    }
                                                    scope 93 {
                                                        debug val => _445;
                                                        scope 94 {
                                                        }
                                                    }
                                                    scope 95 {
                                                        debug worst_case_token_amount => _446;
                                                        debug worst_case_orders_value => _447;
                                                        debug worst_case_token_value => _448;
                                                        debug worst_case_weighted_token_value => _449;
                                                        let _491: error::ErrorCode;
                                                        let _540: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _543: ();
                                                        let _553: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _556: u128;
                                                        let _562: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _565: ();
                                                        let _582: std::string::String;
                                                        let _606: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _609: i128;
                                                        let _611: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _614: ();
                                                        let _627: error::ErrorCode;
                                                        let _670: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _673: ();
                                                        let _680: error::ErrorCode;
                                                        let _726: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _729: ();
                                                        let _743: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _746: ();
                                                        let _752: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _755: ();
                                                        let _774: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _777: ();
                                                        let _804: std::string::String;
                                                        let _828: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _831: i128;
                                                        let _833: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _836: ();
                                                        let _847: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _850: ();
                                                        let mut _1270: &[&str; 1];
                                                        let mut _1271: &i128;
                                                        let mut _1272: &state::spot_market::AssetTier;
                                                        let mut _1273: &state::spot_market::AssetTier;
                                                        let mut _1278: &[&str; 1];
                                                        let mut _1279: &i128;
                                                        scope 104 {
                                                            debug error_code => _491;
                                                            let _498: std::string::String;
                                                            let _517: std::string::String;
                                                            let mut _1280: &[&str; 3];
                                                            let mut _1281: &[&str; 2];
                                                            scope 105 {
                                                                debug res => _498;
                                                            }
                                                            scope 106 {
                                                                debug res => _517;
                                                            }
                                                        }
                                                        scope 107 {
                                                            debug residual => _540;
                                                            scope 108 {
                                                            }
                                                        }
                                                        scope 109 {
                                                            debug val => _543;
                                                            scope 110 {
                                                            }
                                                        }
                                                        scope 111 {
                                                            debug residual => _553;
                                                            scope 112 {
                                                            }
                                                        }
                                                        scope 113 {
                                                            debug val => _556;
                                                            scope 114 {
                                                            }
                                                        }
                                                        scope 115 {
                                                            debug residual => _562;
                                                            scope 116 {
                                                            }
                                                        }
                                                        scope 117 {
                                                            debug val => _565;
                                                            scope 118 {
                                                            }
                                                        }
                                                        scope 119 {
                                                            debug res => _582;
                                                        }
                                                        scope 120 {
                                                            debug residual => _606;
                                                            scope 121 {
                                                            }
                                                        }
                                                        scope 122 {
                                                            debug val => _609;
                                                            scope 123 {
                                                            }
                                                        }
                                                        scope 124 {
                                                            debug residual => _611;
                                                            scope 125 {
                                                            }
                                                        }
                                                        scope 126 {
                                                            debug val => _614;
                                                            scope 127 {
                                                            }
                                                        }
                                                        scope 128 {
                                                            debug error_code => _627;
                                                            let _634: std::string::String;
                                                            let _653: std::string::String;
                                                            let mut _1276: &[&str; 1];
                                                            let mut _1277: &[&str; 2];
                                                            scope 129 {
                                                                debug res => _634;
                                                            }
                                                            scope 130 {
                                                                debug res => _653;
                                                            }
                                                        }
                                                        scope 131 {
                                                            debug residual => _670;
                                                            scope 132 {
                                                            }
                                                        }
                                                        scope 133 {
                                                            debug val => _673;
                                                            scope 134 {
                                                            }
                                                        }
                                                        scope 135 {
                                                            debug error_code => _680;
                                                            let _687: std::string::String;
                                                            let _706: std::string::String;
                                                            let mut _1274: &[&str; 2];
                                                            let mut _1275: &[&str; 2];
                                                            scope 136 {
                                                                debug res => _687;
                                                            }
                                                            scope 137 {
                                                                debug res => _706;
                                                            }
                                                        }
                                                        scope 138 {
                                                            debug residual => _726;
                                                            scope 139 {
                                                            }
                                                        }
                                                        scope 140 {
                                                            debug val => _729;
                                                            scope 141 {
                                                            }
                                                        }
                                                        scope 142 {
                                                            debug residual => _743;
                                                            scope 143 {
                                                            }
                                                        }
                                                        scope 144 {
                                                            debug val => _746;
                                                            scope 145 {
                                                            }
                                                        }
                                                        scope 146 {
                                                            debug residual => _752;
                                                            scope 147 {
                                                            }
                                                        }
                                                        scope 148 {
                                                            debug val => _755;
                                                            scope 149 {
                                                            }
                                                        }
                                                        scope 150 {
                                                            debug residual => _774;
                                                            scope 151 {
                                                            }
                                                        }
                                                        scope 152 {
                                                            debug val => _777;
                                                            scope 153 {
                                                            }
                                                        }
                                                        scope 154 {
                                                            debug res => _804;
                                                        }
                                                        scope 155 {
                                                            debug residual => _828;
                                                            scope 156 {
                                                            }
                                                        }
                                                        scope 157 {
                                                            debug val => _831;
                                                            scope 158 {
                                                            }
                                                        }
                                                        scope 159 {
                                                            debug residual => _833;
                                                            scope 160 {
                                                            }
                                                        }
                                                        scope 161 {
                                                            debug val => _836;
                                                            scope 162 {
                                                            }
                                                        }
                                                        scope 163 {
                                                            debug residual => _847;
                                                            scope 164 {
                                                            }
                                                        }
                                                        scope 165 {
                                                            debug val => _850;
                                                            scope 166 {
                                                            }
                                                        }
                                                    }
                                                    scope 96 {
                                                        debug residual => _467;
                                                        scope 97 {
                                                        }
                                                    }
                                                    scope 98 {
                                                        debug val => _470;
                                                        scope 99 {
                                                        }
                                                    }
                                                    scope 100 {
                                                        debug residual => _478;
                                                        scope 101 {
                                                        }
                                                    }
                                                    scope 102 {
                                                        debug val => _481;
                                                        scope 103 {
                                                        }
                                                    }
                                                }
                                                scope 87 {
                                                    debug residual => _426;
                                                    scope 88 {
                                                    }
                                                }
                                                scope 89 {
                                                    debug val => _429;
                                                    scope 90 {
                                                    }
                                                }
                                            }
                                        }
                                        scope 35 {
                                            debug residual => _172;
                                            scope 36 {
                                            }
                                        }
                                        scope 37 {
                                            debug val => _175;
                                            scope 38 {
                                            }
                                        }
                                    }
                                }
                                scope 18 {
                                    debug residual => _87;
                                    scope 19 {
                                    }
                                }
                                scope 20 {
                                    debug val => _90;
                                    scope 21 {
                                    }
                                }
                                scope 22 {
                                    debug residual => _92;
                                    scope 23 {
                                    }
                                }
                                scope 24 {
                                    debug val => _95;
                                    scope 25 {
                                    }
                                }
                            }
                            scope 13 {
                                debug residual => _57;
                                scope 14 {
                                }
                            }
                            scope 15 {
                                debug val => _60;
                                scope 16 {
                                }
                            }
                        }
                    }
                    scope 167 {
                        debug iter => _856;
                        let _863: &state::user::PerpPosition;
                        scope 168 {
                            debug market_position => _863;
                            let _868: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
                            let _876: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _879: std::cell::Ref<'_, state::perp_market::PerpMarket>;
                            scope 169 {
                                debug market => _868;
                                let _889: error::ErrorCode;
                                let _935: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _938: ();
                                let _939: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                let _948: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _951: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                scope 174 {
                                    debug error_code => _889;
                                    let _896: std::string::String;
                                    let _915: std::string::String;
                                    let mut _1287: &[&str; 3];
                                    let mut _1288: &[&str; 2];
                                    scope 175 {
                                        debug res => _896;
                                    }
                                    scope 176 {
                                        debug res => _915;
                                    }
                                }
                                scope 177 {
                                    debug residual => _935;
                                    scope 178 {
                                    }
                                }
                                scope 179 {
                                    debug val => _938;
                                    scope 180 {
                                    }
                                }
                                scope 181 {
                                    debug quote_spot_market => _939;
                                    let _952: &state::oracle::OraclePriceData;
                                    let _953: math::oracle::OracleValidity;
                                    let _978: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _981: u64;
                                    let _983: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _986: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
                                    scope 186 {
                                        debug quote_oracle_price_data => _952;
                                        debug quote_oracle_validity => _953;
                                        let _987: state::oracle::StrictOraclePrice;
                                        scope 195 {
                                            debug strict_quote_price => _987;
                                            let _995: &state::oracle::OraclePriceData;
                                            let _996: math::oracle::OracleValidity;
                                            let _1021: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _1024: u64;
                                            let _1026: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _1029: (&state::oracle::OraclePriceData, math::oracle::OracleValidity);
                                            scope 196 {
                                                debug oracle_price_data => _995;
                                                debug oracle_validity => _996;
                                                let _1030: u32;
                                                let mut _1286: &math::margin::MarginRequirementType;
                                                scope 205 {
                                                    debug perp_position_custom_margin_ratio => _1030;
                                                    let _1036: u128;
                                                    let _1037: i128;
                                                    let _1038: u128;
                                                    let _1039: u128;
                                                    let _1040: u128;
                                                    let _1059: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _1062: (u128, i128, u128, u128, u128);
                                                    scope 206 {
                                                        debug perp_margin_requirement => _1036;
                                                        debug weighted_pnl => _1037;
                                                        debug worst_case_liability_value => _1038;
                                                        debug open_order_margin_requirement => _1039;
                                                        debug base_asset_value => _1040;
                                                        let _1074: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _1077: ();
                                                        let _1089: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _1092: ();
                                                        let _1102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _1105: ();
                                                        let _1112: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _1115: ();
                                                        let _1116: bool;
                                                        scope 211 {
                                                            debug residual => _1074;
                                                            scope 212 {
                                                            }
                                                        }
                                                        scope 213 {
                                                            debug val => _1077;
                                                            scope 214 {
                                                            }
                                                        }
                                                        scope 215 {
                                                            debug residual => _1089;
                                                            scope 216 {
                                                            }
                                                        }
                                                        scope 217 {
                                                            debug val => _1092;
                                                            scope 218 {
                                                            }
                                                        }
                                                        scope 219 {
                                                            debug residual => _1102;
                                                            scope 220 {
                                                            }
                                                        }
                                                        scope 221 {
                                                            debug val => _1105;
                                                            scope 222 {
                                                            }
                                                        }
                                                        scope 223 {
                                                            debug residual => _1112;
                                                            scope 224 {
                                                            }
                                                        }
                                                        scope 225 {
                                                            debug val => _1115;
                                                            scope 226 {
                                                            }
                                                        }
                                                        scope 227 {
                                                            debug has_perp_liability => _1116;
                                                            let _1129: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _1132: ();
                                                            let _1155: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _1158: bool;
                                                            let _1168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                            let _1171: bool;
                                                            let mut _1284: &math::margin::MarginRequirementType;
                                                            let mut _1285: &state::perp_market::ContractTier;
                                                            scope 228 {
                                                                debug residual => _1129;
                                                                scope 229 {
                                                                }
                                                            }
                                                            scope 230 {
                                                                debug val => _1132;
                                                                scope 231 {
                                                                }
                                                            }
                                                            scope 232 {
                                                                debug residual => _1155;
                                                                scope 233 {
                                                                }
                                                            }
                                                            scope 234 {
                                                                debug val => _1158;
                                                                scope 235 {
                                                                }
                                                            }
                                                            scope 236 {
                                                                debug residual => _1168;
                                                                scope 237 {
                                                                }
                                                            }
                                                            scope 238 {
                                                                debug val => _1171;
                                                                scope 239 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 207 {
                                                        debug residual => _1059;
                                                        scope 208 {
                                                        }
                                                    }
                                                    scope 209 {
                                                        debug val => _1062;
                                                        scope 210 {
                                                        }
                                                    }
                                                }
                                            }
                                            scope 197 {
                                                debug residual => _1021;
                                                scope 198 {
                                                }
                                            }
                                            scope 199 {
                                                debug val => _1024;
                                                scope 200 {
                                                }
                                            }
                                            scope 201 {
                                                debug residual => _1026;
                                                scope 202 {
                                                }
                                            }
                                            scope 203 {
                                                debug val => _1029;
                                                scope 204 {
                                                }
                                            }
                                        }
                                    }
                                    scope 187 {
                                        debug residual => _978;
                                        scope 188 {
                                        }
                                    }
                                    scope 189 {
                                        debug val => _981;
                                        scope 190 {
                                        }
                                    }
                                    scope 191 {
                                        debug residual => _983;
                                        scope 192 {
                                        }
                                    }
                                    scope 193 {
                                        debug val => _986;
                                        scope 194 {
                                        }
                                    }
                                }
                                scope 182 {
                                    debug residual => _948;
                                    scope 183 {
                                    }
                                }
                                scope 184 {
                                    debug val => _951;
                                    scope 185 {
                                    }
                                }
                            }
                            scope 170 {
                                debug residual => _876;
                                scope 171 {
                                }
                            }
                            scope 172 {
                                debug val => _879;
                                scope 173 {
                                }
                            }
                        }
                    }
                    scope 240 {
                        debug residual => _1177;
                        scope 241 {
                        }
                    }
                    scope 242 {
                        debug val => _1180;
                        scope 243 {
                        }
                    }
                    scope 244 {
                        debug spot_fuel_deltas => _1181;
                        let mut _1187: std::slice::Iter<'_, (u16, i128)>;
                        scope 245 {
                            debug iter => _1187;
                            let _1194: &u16;
                            let _1195: &i128;
                            scope 246 {
                                debug market_index => _1194;
                                debug delta => _1195;
                                let _1209: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                let _1215: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _1218: std::cell::Ref<'_, state::spot_market::SpotMarket>;
                                scope 247 {
                                    debug spot_market => _1209;
                                    let _1219: &state::oracle::OraclePriceData;
                                    let _1230: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _1233: &state::oracle::OraclePriceData;
                                    scope 252 {
                                        debug oracle_price_data => _1219;
                                        let _1234: state::oracle::StrictOraclePrice;
                                        scope 257 {
                                            debug strict_oracle_price => _1234;
                                            let _1245: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _1248: ();
                                            let _1260: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _1263: ();
                                            scope 258 {
                                                debug residual => _1245;
                                                scope 259 {
                                                }
                                            }
                                            scope 260 {
                                                debug val => _1248;
                                                scope 261 {
                                                }
                                            }
                                            scope 262 {
                                                debug residual => _1260;
                                                scope 263 {
                                                }
                                            }
                                            scope 264 {
                                                debug val => _1263;
                                                scope 265 {
                                                }
                                            }
                                        }
                                    }
                                    scope 253 {
                                        debug residual => _1230;
                                        scope 254 {
                                        }
                                    }
                                    scope 255 {
                                        debug val => _1233;
                                        scope 256 {
                                        }
                                    }
                                }
                                scope 248 {
                                    debug residual => _1215;
                                    scope 249 {
                                    }
                                }
                                scope 250 {
                                    debug val => _1218;
                                    scope 251 {
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1292 = const false;
        StorageLive(_6);
        StorageLive(_7);
        _7 = _5;
        _6 = MarginCalculation::new(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(_5.0: math::margin::MarginRequirementType);
        StorageLive(_11);
        _1289 = const _;
        _11 = &(*_1289);
        _9 = <math::margin::MarginRequirementType as PartialEq>::eq(move _10, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = ((*_1).16: u32);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_11);
        StorageDead(_10);
        _8 = const 0_u32;
        goto -> bb5;
    }

    bb5: {
        StorageDead(_9);
        StorageLive(_13);
        _14 = discriminant((_5.9: std::option::Option<u32>));
        switchInt(move _14) -> [1: bb6, otherwise: bb8];
    }

    bb6: {
        StorageLive(_15);
        _15 = (((_5.9: std::option::Option<u32>) as Some).0: u32);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _15;
        StorageLive(_18);
        _18 = _8;
        _16 = <u32 as Ord>::max(move _17, move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        _8 = move _16;
        StorageDead(_16);
        _13 = const ();
        StorageDead(_15);
        goto -> bb9;
    }

    bb8: {
        _13 = const ();
        goto -> bb9;
    }

    bb9: {
        StorageDead(_13);
        StorageLive(_19);
        _19 = ((*_1).27: u8);
        StorageLive(_20);
        StorageLive(_21);
        _21 = &(*_1);
        StorageLive(_22);
        _22 = (_5.0: math::margin::MarginRequirementType);
        _20 = User::is_high_leverage_mode(move _21, move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_22);
        StorageDead(_21);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).3: [state::user::SpotPosition; 8]);
        _26 = move _27 as &[state::user::SpotPosition] (PointerCoercion(Unsize));
        StorageDead(_27);
        _25 = core::slice::<impl [SpotPosition]>::iter(move _26) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_26);
        _24 = <std::slice::Iter<'_, SpotPosition> as IntoIterator>::into_iter(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageLive(_28);
        _28 = move _24;
        goto -> bb13;
    }

    bb13: {
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _28;
        _32 = &mut (*_33);
        _31 = <std::slice::Iter<'_, SpotPosition> as Iterator>::next(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        _34 = discriminant(_31);
        switchInt(move _34) -> [0: bb17, 1: bb15, otherwise: bb16];
    }

    bb15: {
        StorageLive(_36);
        _36 = ((_31 as Some).0: &state::user::SpotPosition);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_36);
        _39 = validate_spot_position(move _40) -> [return: bb18, unwind continue];
    }

    bb16: {
        unreachable;
    }

    bb17: {
        _23 = const ();
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_24);
        StorageDead(_23);
        StorageLive(_851);
        StorageLive(_852);
        StorageLive(_853);
        StorageLive(_854);
        StorageLive(_855);
        _855 = &((*_1).4: [state::user::PerpPosition; 8]);
        _854 = move _855 as &[state::user::PerpPosition] (PointerCoercion(Unsize));
        StorageDead(_855);
        _853 = core::slice::<impl [PerpPosition]>::iter(move _854) -> [return: bb389, unwind continue];
    }

    bb18: {
        StorageDead(_40);
        _38 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _39) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_39);
        _41 = discriminant(_38);
        switchInt(move _41) -> [0: bb20, 1: bb21, otherwise: bb16];
    }

    bb20: {
        StorageLive(_45);
        _45 = ((_38 as Continue).0: ());
        _37 = _45;
        StorageDead(_45);
        StorageDead(_38);
        StorageDead(_37);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _48 = &(*_36);
        _47 = SpotPosition::is_available(move _48) -> [return: bb23, unwind continue];
    }

    bb21: {
        StorageLive(_42);
        _42 = ((_38 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_44);
        _44 = _42;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _44) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_38);
        StorageDead(_37);
        goto -> bb613;
    }

    bb23: {
        switchInt(move _47) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb13;
    }

    bb25: {
        StorageDead(_48);
        _46 = const ();
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_3);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &((*_36).4: u16);
        _54 = &(*_55);
        _52 = SpotMarketMap::<'_>::get_ref(move _53, move _54) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_54);
        StorageDead(_53);
        _51 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _52) -> [return: bb27, unwind: bb636];
    }

    bb27: {
        StorageDead(_52);
        _56 = discriminant(_51);
        switchInt(move _56) -> [0: bb28, 1: bb29, otherwise: bb16];
    }

    bb28: {
        StorageLive(_60);
        _60 = move ((_51 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _50 = move _60;
        StorageDead(_60);
        _1295 = discriminant(_51);
        StorageDead(_55);
        StorageDead(_51);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut (*_4);
        StorageLive(_67);
        _67 = state::user::MarketType::Spot;
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &_50;
        _69 = <Ref<'_, SpotMarket> as Deref>::deref(move _70) -> [return: bb31, unwind: bb635];
    }

    bb29: {
        StorageLive(_57);
        _57 = ((_51 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb30, unwind: bb644];
    }

    bb30: {
        StorageDead(_59);
        StorageDead(_57);
        _1293 = discriminant(_51);
        StorageDead(_55);
        StorageDead(_51);
        goto -> bb612;
    }

    bb31: {
        StorageDead(_70);
        _68 = ((*_69).42: u16);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = &_50;
        _75 = <Ref<'_, SpotMarket> as Deref>::deref(move _76) -> [return: bb32, unwind: bb635];
    }

    bb32: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = SpotMarket::oracle_id(move _74) -> [return: bb33, unwind: bb635];
    }

    bb33: {
        StorageDead(_74);
        _72 = &_73;
        _71 = &(*_72);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = &_50;
        _78 = <Ref<'_, SpotMarket> as Deref>::deref(move _79) -> [return: bb34, unwind: bb635];
    }

    bb34: {
        StorageDead(_79);
        _77 = (((*_78).5: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_50;
        _84 = <Ref<'_, SpotMarket> as Deref>::deref(move _85) -> [return: bb35, unwind: bb635];
    }

    bb35: {
        _83 = &(*_84);
        StorageDead(_85);
        _82 = SpotMarket::get_max_confidence_interval_multiplier(move _83) -> [return: bb36, unwind: bb635];
    }

    bb36: {
        StorageDead(_83);
        _81 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _82) -> [return: bb37, unwind: bb635];
    }

    bb37: {
        StorageDead(_82);
        _86 = discriminant(_81);
        switchInt(move _86) -> [0: bb38, 1: bb39, otherwise: bb16];
    }

    bb38: {
        StorageLive(_90);
        _90 = ((_81 as Continue).0: u64);
        _80 = _90;
        StorageDead(_90);
        _65 = OracleMap::<'_>::get_price_data_and_validity(move _66, move _67, move _68, move _71, move _77, move _80, const 0_i8) -> [return: bb41, unwind: bb635];
    }

    bb39: {
        StorageLive(_87);
        _87 = ((_81 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_89);
        _89 = _87;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _89) -> [return: bb40, unwind: bb635];
    }

    bb40: {
        StorageDead(_89);
        StorageDead(_87);
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        StorageDead(_65);
        goto -> bb610;
    }

    bb41: {
        StorageDead(_80);
        StorageDead(_77);
        StorageDead(_71);
        StorageDead(_68);
        StorageDead(_67);
        StorageDead(_66);
        _64 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as Try>::branch(move _65) -> [return: bb42, unwind: bb635];
    }

    bb42: {
        StorageDead(_65);
        _91 = discriminant(_64);
        switchInt(move _91) -> [0: bb43, 1: bb44, otherwise: bb16];
    }

    bb43: {
        StorageLive(_95);
        _95 = ((_64 as Continue).0: (&state::oracle::OraclePriceData, math::oracle::OracleValidity));
        _63 = _95;
        StorageDead(_95);
        StorageLive(_61);
        _61 = (_63.0: &state::oracle::OraclePriceData);
        StorageLive(_62);
        _62 = (_63.1: math::oracle::OracleValidity);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_96);
        _96 = const false;
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = _19;
        _98 = Eq(move _99, const 1_u8);
        switchInt(move _98) -> [0: bb47, otherwise: bb46];
    }

    bb44: {
        StorageLive(_92);
        _92 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb45, unwind: bb635];
    }

    bb45: {
        StorageDead(_94);
        StorageDead(_92);
        goto -> bb610;
    }

    bb46: {
        StorageDead(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &_50;
        _102 = <Ref<'_, SpotMarket> as Deref>::deref(move _103) -> [return: bb48, unwind: bb635];
    }

    bb47: {
        StorageDead(_99);
        goto -> bb54;
    }

    bb48: {
        StorageDead(_103);
        _101 = ((*_102).42: u16);
        _100 = Eq(move _101, const 0_u16);
        switchInt(move _100) -> [0: bb53, otherwise: bb49];
    }

    bb49: {
        StorageDead(_102);
        StorageDead(_101);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &(*_36);
        _104 = SpotPosition::is_borrow(move _105) -> [return: bb50, unwind: bb635];
    }

    bb50: {
        switchInt(move _104) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        StorageDead(_105);
        goto -> bb54;
    }

    bb52: {
        StorageDead(_105);
        _96 = const true;
        _97 = const ();
        goto -> bb77;
    }

    bb53: {
        StorageDead(_102);
        StorageDead(_101);
        goto -> bb54;
    }

    bb54: {
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = _19;
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _113 = &_50;
        _112 = <Ref<'_, SpotMarket> as Deref>::deref(move _113) -> [return: bb55, unwind: bb635];
    }

    bb55: {
        StorageDead(_113);
        _111 = ((*_112).62: u8);
        _109 = Eq(move _110, move _111);
        switchInt(move _109) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_114);
        _114 = ();
        _108 = std::result::Result::<(), error::ErrorCode>::Ok(move _114);
        StorageDead(_114);
        goto -> bb72;
    }

    bb57: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageLive(_115);
        _115 = error::ErrorCode::InvalidPoolId;
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _1283 = const _;
        _126 = &(*_1283);
        _125 = &(*_126);
        _124 = move _125 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_125);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        _134 = &_115;
        _133 = &(*_134);
        _132 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _133) -> [return: bb58, unwind: bb635];
    }

    bb58: {
        StorageDead(_133);
        _131 = [move _132];
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = move _129 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_129);
        _123 = Arguments::<'_>::new_v1(move _124, move _128) -> [return: bb59, unwind: bb635];
    }

    bb59: {
        StorageDead(_128);
        StorageDead(_124);
        _122 = format(move _123) -> [return: bb60, unwind: bb635];
    }

    bb60: {
        StorageDead(_123);
        StorageDead(_134);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_126);
        _121 = move _122;
        StorageDead(_122);
        _120 = &_121;
        _119 = &(*_120);
        _118 = <String as Deref>::deref(move _119) -> [return: bb61, unwind: bb634];
    }

    bb61: {
        _117 = &(*_118);
        StorageDead(_119);
        _116 = solana_program::log::sol_log(move _117) -> [return: bb62, unwind: bb634];
    }

    bb62: {
        StorageDead(_117);
        drop(_121) -> [return: bb63, unwind: bb635];
    }

    bb63: {
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_118);
        StorageDead(_116);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _1282 = const _;
        _145 = &(*_1282);
        _144 = &(*_145);
        _143 = move _144 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = &_19;
        _152 = &(*_153);
        _151 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _152) -> [return: bb64, unwind: bb635];
    }

    bb64: {
        StorageDead(_152);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &_50;
        _157 = <Ref<'_, SpotMarket> as Deref>::deref(move _158) -> [return: bb65, unwind: bb635];
    }

    bb65: {
        StorageDead(_158);
        _156 = &((*_157).62: u8);
        _155 = &(*_156);
        _154 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _155) -> [return: bb66, unwind: bb635];
    }

    bb66: {
        StorageDead(_155);
        _150 = [move _151, move _154];
        StorageDead(_154);
        StorageDead(_151);
        _149 = &_150;
        _148 = &(*_149);
        _147 = move _148 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_148);
        _142 = Arguments::<'_>::new_v1(move _143, move _147) -> [return: bb67, unwind: bb635];
    }

    bb67: {
        StorageDead(_147);
        StorageDead(_143);
        _141 = format(move _142) -> [return: bb68, unwind: bb635];
    }

    bb68: {
        StorageDead(_142);
        StorageDead(_157);
        StorageDead(_156);
        StorageDead(_153);
        StorageDead(_150);
        StorageDead(_149);
        StorageDead(_145);
        _140 = move _141;
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = <String as Deref>::deref(move _138) -> [return: bb69, unwind: bb633];
    }

    bb69: {
        _136 = &(*_137);
        StorageDead(_138);
        _135 = solana_program::log::sol_log(move _136) -> [return: bb70, unwind: bb633];
    }

    bb70: {
        StorageDead(_136);
        drop(_140) -> [return: bb71, unwind: bb635];
    }

    bb71: {
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_137);
        StorageDead(_135);
        StorageLive(_159);
        _159 = _115;
        _108 = std::result::Result::<(), error::ErrorCode>::Err(move _159);
        StorageDead(_159);
        StorageDead(_115);
        goto -> bb72;
    }

    bb72: {
        StorageDead(_109);
        _107 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _108) -> [return: bb73, unwind: bb635];
    }

    bb73: {
        StorageDead(_108);
        _160 = discriminant(_107);
        switchInt(move _160) -> [0: bb74, 1: bb75, otherwise: bb16];
    }

    bb74: {
        StorageLive(_164);
        _164 = ((_107 as Continue).0: ());
        _106 = _164;
        StorageDead(_164);
        StorageDead(_107);
        StorageDead(_106);
        _97 = const ();
        goto -> bb77;
    }

    bb75: {
        StorageLive(_161);
        _161 = ((_107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_163);
        _163 = _161;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _163) -> [return: bb76, unwind: bb635];
    }

    bb76: {
        StorageDead(_163);
        StorageDead(_161);
        StorageDead(_107);
        StorageDead(_106);
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        goto -> bb609;
    }

    bb77: {
        StorageDead(_104);
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_97);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = _62;
        StorageLive(_169);
        StorageLive(_170);
        _170 = DriftAction::MarginCalc;
        _169 = Option::<DriftAction>::Some(move _170);
        StorageDead(_170);
        _167 = is_oracle_valid_for_action(move _168, move _169) -> [return: bb78, unwind: bb635];
    }

    bb78: {
        StorageDead(_169);
        StorageDead(_168);
        _166 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _167) -> [return: bb79, unwind: bb635];
    }

    bb79: {
        StorageDead(_167);
        _171 = discriminant(_166);
        switchInt(move _171) -> [0: bb80, 1: bb81, otherwise: bb16];
    }

    bb80: {
        StorageLive(_175);
        _175 = ((_166 as Continue).0: bool);
        _165 = _175;
        StorageDead(_175);
        StorageDead(_166);
        StorageLive(_176);
        StorageLive(_177);
        _177 = ((*_61).0: i64);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = &_50;
        _179 = <Ref<'_, SpotMarket> as Deref>::deref(move _180) -> [return: bb83, unwind: bb635];
    }

    bb81: {
        StorageLive(_172);
        _172 = ((_166 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_174);
        _174 = _172;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _174) -> [return: bb82, unwind: bb635];
    }

    bb82: {
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_166);
        goto -> bb608;
    }

    bb83: {
        StorageDead(_180);
        _178 = (((*_179).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_181);
        _181 = ((_6.0: state::margin_calculation::MarginContext).2: bool);
        _176 = StrictOraclePrice::new(move _177, move _178, move _181) -> [return: bb84, unwind: bb635];
    }

    bb84: {
        StorageDead(_181);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_179);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        _185 = &_176;
        _184 = StrictOraclePrice::validate(move _185) -> [return: bb85, unwind: bb635];
    }

    bb85: {
        StorageDead(_185);
        _183 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _184) -> [return: bb86, unwind: bb635];
    }

    bb86: {
        StorageDead(_184);
        _186 = discriminant(_183);
        switchInt(move _186) -> [0: bb87, 1: bb88, otherwise: bb16];
    }

    bb87: {
        StorageLive(_190);
        _190 = ((_183 as Continue).0: ());
        _182 = _190;
        StorageDead(_190);
        StorageDead(_183);
        StorageDead(_182);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = &_50;
        _193 = <Ref<'_, SpotMarket> as Deref>::deref(move _194) -> [return: bb90, unwind: bb635];
    }

    bb88: {
        StorageLive(_187);
        _187 = ((_183 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_189);
        _189 = _187;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _189) -> [return: bb89, unwind: bb635];
    }

    bb89: {
        StorageDead(_189);
        StorageDead(_187);
        StorageDead(_183);
        StorageDead(_182);
        goto -> bb607;
    }

    bb90: {
        StorageDead(_194);
        _192 = ((*_193).42: u16);
        _191 = Eq(move _192, const 0_u16);
        switchInt(move _191) -> [0: bb190, otherwise: bb91];
    }

    bb91: {
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        _198 = &(*_36);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = &_50;
        _201 = &(*_202);
        _200 = <Ref<'_, SpotMarket> as Deref>::deref(move _201) -> [return: bb92, unwind: bb635];
    }

    bb92: {
        _199 = &(*_200);
        StorageDead(_201);
        _197 = SpotPosition::get_signed_token_amount(move _198, move _199) -> [return: bb93, unwind: bb635];
    }

    bb93: {
        StorageDead(_199);
        StorageDead(_198);
        _196 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _197) -> [return: bb94, unwind: bb635];
    }

    bb94: {
        StorageDead(_197);
        _203 = discriminant(_196);
        switchInt(move _203) -> [0: bb95, 1: bb96, otherwise: bb16];
    }

    bb95: {
        StorageLive(_207);
        _207 = ((_196 as Continue).0: i128);
        _195 = _207;
        StorageDead(_207);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_196);
        StorageLive(_208);
        StorageLive(_209);
        StorageLive(_210);
        _210 = _195;
        _209 = Eq(move _210, const 0_i128);
        switchInt(move _209) -> [0: bb99, otherwise: bb98];
    }

    bb96: {
        StorageLive(_204);
        _204 = ((_196 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_206);
        _206 = _204;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _206) -> [return: bb97, unwind: bb635];
    }

    bb97: {
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_202);
        StorageDead(_200);
        StorageDead(_196);
        goto -> bb605;
    }

    bb98: {
        StorageDead(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = ((*_36).0: u64);
        _214 = Eq(move _215, const 0_u64);
        switchInt(move _214) -> [0: bb101, otherwise: bb100];
    }

    bb99: {
        StorageDead(_210);
        _208 = const ();
        goto -> bb120;
    }

    bb100: {
        StorageDead(_215);
        StorageLive(_216);
        _216 = ();
        _213 = std::result::Result::<(), error::ErrorCode>::Ok(move _216);
        StorageDead(_216);
        goto -> bb115;
    }

    bb101: {
        StorageDead(_215);
        StorageLive(_217);
        _217 = error::ErrorCode::InvalidMarginRatio;
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _1269 = const _;
        _228 = &(*_1269);
        _227 = &(*_228);
        _226 = move _227 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_227);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &_217;
        _235 = &(*_236);
        _234 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _235) -> [return: bb102, unwind: bb635];
    }

    bb102: {
        StorageDead(_235);
        _233 = [move _234];
        StorageDead(_234);
        _232 = &_233;
        _231 = &(*_232);
        _230 = move _231 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_231);
        _225 = Arguments::<'_>::new_v1(move _226, move _230) -> [return: bb103, unwind: bb635];
    }

    bb103: {
        StorageDead(_230);
        StorageDead(_226);
        _224 = format(move _225) -> [return: bb104, unwind: bb635];
    }

    bb104: {
        StorageDead(_225);
        StorageDead(_236);
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_228);
        _223 = move _224;
        StorageDead(_224);
        _222 = &_223;
        _221 = &(*_222);
        _220 = <String as Deref>::deref(move _221) -> [return: bb105, unwind: bb632];
    }

    bb105: {
        _219 = &(*_220);
        StorageDead(_221);
        _218 = solana_program::log::sol_log(move _219) -> [return: bb106, unwind: bb632];
    }

    bb106: {
        StorageDead(_219);
        drop(_223) -> [return: bb107, unwind: bb635];
    }

    bb107: {
        StorageDead(_223);
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_218);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _1268 = const _;
        _247 = &(*_1268);
        _246 = &(*_247);
        _245 = move _246 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_246);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        _255 = &((*_36).0: u64);
        _254 = &(*_255);
        _253 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _254) -> [return: bb108, unwind: bb635];
    }

    bb108: {
        StorageDead(_254);
        StorageLive(_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &_195;
        _257 = &(*_258);
        _256 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _257) -> [return: bb109, unwind: bb635];
    }

    bb109: {
        StorageDead(_257);
        _252 = [move _253, move _256];
        StorageDead(_256);
        StorageDead(_253);
        _251 = &_252;
        _250 = &(*_251);
        _249 = move _250 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_250);
        _244 = Arguments::<'_>::new_v1(move _245, move _249) -> [return: bb110, unwind: bb635];
    }

    bb110: {
        StorageDead(_249);
        StorageDead(_245);
        _243 = format(move _244) -> [return: bb111, unwind: bb635];
    }

    bb111: {
        StorageDead(_244);
        StorageDead(_258);
        StorageDead(_255);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_247);
        _242 = move _243;
        StorageDead(_243);
        _241 = &_242;
        _240 = &(*_241);
        _239 = <String as Deref>::deref(move _240) -> [return: bb112, unwind: bb631];
    }

    bb112: {
        _238 = &(*_239);
        StorageDead(_240);
        _237 = solana_program::log::sol_log(move _238) -> [return: bb113, unwind: bb631];
    }

    bb113: {
        StorageDead(_238);
        drop(_242) -> [return: bb114, unwind: bb635];
    }

    bb114: {
        StorageDead(_242);
        StorageDead(_241);
        StorageDead(_239);
        StorageDead(_237);
        StorageLive(_259);
        _259 = _217;
        _213 = std::result::Result::<(), error::ErrorCode>::Err(move _259);
        StorageDead(_259);
        StorageDead(_217);
        goto -> bb115;
    }

    bb115: {
        StorageDead(_214);
        _212 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _213) -> [return: bb116, unwind: bb635];
    }

    bb116: {
        StorageDead(_213);
        _260 = discriminant(_212);
        switchInt(move _260) -> [0: bb117, 1: bb118, otherwise: bb16];
    }

    bb117: {
        StorageLive(_264);
        _264 = ((_212 as Continue).0: ());
        _211 = _264;
        StorageDead(_264);
        StorageDead(_212);
        StorageDead(_211);
        _208 = const ();
        goto -> bb120;
    }

    bb118: {
        StorageLive(_261);
        _261 = ((_212 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_263);
        _263 = _261;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _263) -> [return: bb119, unwind: bb635];
    }

    bb119: {
        StorageDead(_263);
        StorageDead(_261);
        StorageDead(_212);
        StorageDead(_211);
        StorageDead(_209);
        StorageDead(_208);
        goto -> bb605;
    }

    bb120: {
        StorageDead(_209);
        StorageDead(_208);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        _268 = &mut _6;
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &_50;
        _271 = &(*_272);
        _270 = <Ref<'_, SpotMarket> as Deref>::deref(move _271) -> [return: bb121, unwind: bb635];
    }

    bb121: {
        _269 = &(*_270);
        StorageDead(_271);
        StorageLive(_273);
        _273 = _195;
        StorageLive(_274);
        StorageLive(_275);
        _275 = &_176;
        _274 = &(*_275);
        _267 = MarginCalculation::update_fuel_spot_bonus(move _268, move _269, move _273, move _274) -> [return: bb122, unwind: bb635];
    }

    bb122: {
        StorageDead(_274);
        StorageDead(_273);
        StorageDead(_269);
        StorageDead(_268);
        _266 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _267) -> [return: bb123, unwind: bb635];
    }

    bb123: {
        StorageDead(_267);
        _276 = discriminant(_266);
        switchInt(move _276) -> [0: bb124, 1: bb125, otherwise: bb16];
    }

    bb124: {
        StorageLive(_280);
        _280 = ((_266 as Continue).0: ());
        _265 = _280;
        StorageDead(_280);
        StorageDead(_275);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_266);
        StorageDead(_265);
        StorageLive(_281);
        StorageLive(_282);
        StorageLive(_283);
        StorageLive(_284);
        _284 = _195;
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_50;
        _286 = <Ref<'_, SpotMarket> as Deref>::deref(move _287) -> [return: bb127, unwind: bb635];
    }

    bb125: {
        StorageLive(_277);
        _277 = ((_266 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_279);
        _279 = _277;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _279) -> [return: bb126, unwind: bb635];
    }

    bb126: {
        StorageDead(_279);
        StorageDead(_277);
        StorageDead(_275);
        StorageDead(_272);
        StorageDead(_270);
        StorageDead(_266);
        StorageDead(_265);
        goto -> bb605;
    }

    bb127: {
        StorageDead(_287);
        _285 = ((*_286).41: u32);
        StorageLive(_288);
        StorageLive(_289);
        _289 = &_176;
        _288 = &(*_289);
        _283 = get_strict_token_value(move _284, move _285, move _288) -> [return: bb128, unwind: bb635];
    }

    bb128: {
        StorageDead(_288);
        StorageDead(_285);
        StorageDead(_284);
        _282 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _283) -> [return: bb129, unwind: bb635];
    }

    bb129: {
        StorageDead(_283);
        _290 = discriminant(_282);
        switchInt(move _290) -> [0: bb130, 1: bb131, otherwise: bb16];
    }

    bb130: {
        StorageLive(_294);
        _294 = ((_282 as Continue).0: i128);
        _281 = _294;
        StorageDead(_294);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_282);
        _295 = discriminant(((*_36).5: state::spot_market::SpotBalanceType));
        switchInt(move _295) -> [0: bb134, 1: bb133, otherwise: bb16];
    }

    bb131: {
        StorageLive(_291);
        _291 = ((_282 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_293);
        _293 = _291;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _293) -> [return: bb132, unwind: bb635];
    }

    bb132: {
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_289);
        StorageDead(_286);
        StorageDead(_282);
        goto -> bb604;
    }

    bb133: {
        StorageLive(_335);
        StorageLive(_336);
        _336 = _281;
        _335 = core::num::<impl i128>::unsigned_abs(move _336) -> [return: bb155, unwind: bb635];
    }

    bb134: {
        StorageLive(_296);
        StorageLive(_297);
        _297 = ((_6.0: state::margin_calculation::MarginContext).3: bool);
        switchInt(move _297) -> [0: bb144, otherwise: bb135];
    }

    bb135: {
        StorageLive(_298);
        _298 = _165;
        switchInt(move _298) -> [0: bb136, otherwise: bb144];
    }

    bb136: {
        StorageLive(_299);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _1267 = const _;
        _309 = &(*_1267);
        _308 = &(*_309);
        _307 = move _308 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_308);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        StorageLive(_319);
        _319 = &_50;
        _318 = <Ref<'_, SpotMarket> as Deref>::deref(move _319) -> [return: bb137, unwind: bb635];
    }

    bb137: {
        StorageDead(_319);
        _317 = &((*_318).42: u16);
        _316 = &(*_317);
        _315 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _316) -> [return: bb138, unwind: bb635];
    }

    bb138: {
        StorageDead(_316);
        _314 = [move _315];
        StorageDead(_315);
        _313 = &_314;
        _312 = &(*_313);
        _311 = move _312 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_312);
        _306 = Arguments::<'_>::new_v1(move _307, move _311) -> [return: bb139, unwind: bb635];
    }

    bb139: {
        StorageDead(_311);
        StorageDead(_307);
        _305 = format(move _306) -> [return: bb140, unwind: bb635];
    }

    bb140: {
        StorageDead(_306);
        StorageDead(_318);
        StorageDead(_317);
        StorageDead(_314);
        StorageDead(_313);
        StorageDead(_309);
        _304 = move _305;
        StorageDead(_305);
        _303 = &_304;
        _302 = &(*_303);
        _301 = <String as Deref>::deref(move _302) -> [return: bb141, unwind: bb630];
    }

    bb141: {
        _300 = &(*_301);
        StorageDead(_302);
        _299 = solana_program::log::sol_log(move _300) -> [return: bb142, unwind: bb630];
    }

    bb142: {
        StorageDead(_300);
        drop(_304) -> [return: bb143, unwind: bb635];
    }

    bb143: {
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_301);
        StorageDead(_299);
        _281 = const 0_i128;
        _296 = const ();
        goto -> bb145;
    }

    bb144: {
        _296 = const ();
        goto -> bb145;
    }

    bb145: {
        StorageDead(_298);
        StorageDead(_297);
        StorageDead(_296);
        StorageLive(_320);
        StorageLive(_321);
        _321 = _96;
        switchInt(move _321) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _281 = const 0_i128;
        _320 = const ();
        goto -> bb148;
    }

    bb147: {
        _320 = const ();
        goto -> bb148;
    }

    bb148: {
        StorageDead(_321);
        StorageDead(_320);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        _325 = &mut _6;
        StorageLive(_326);
        _326 = _281;
        _324 = MarginCalculation::add_total_collateral(move _325, move _326) -> [return: bb149, unwind: bb635];
    }

    bb149: {
        StorageDead(_326);
        StorageDead(_325);
        _323 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _324) -> [return: bb150, unwind: bb635];
    }

    bb150: {
        StorageDead(_324);
        _327 = discriminant(_323);
        switchInt(move _327) -> [0: bb151, 1: bb152, otherwise: bb16];
    }

    bb151: {
        StorageLive(_331);
        _331 = ((_323 as Continue).0: ());
        _322 = _331;
        StorageDead(_331);
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_332);
        StorageLive(_333);
        _333 = &mut _6;
        StorageLive(_334);
        _334 = _165;
        _332 = MarginCalculation::update_all_deposit_oracles_valid(move _333, move _334) -> [return: bb154, unwind: bb635];
    }

    bb152: {
        StorageLive(_328);
        _328 = ((_323 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_330);
        _330 = _328;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _330) -> [return: bb153, unwind: bb635];
    }

    bb153: {
        StorageDead(_330);
        StorageDead(_328);
        StorageDead(_323);
        StorageDead(_322);
        goto -> bb604;
    }

    bb154: {
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_332);
        _30 = const ();
        goto -> bb189;
    }

    bb155: {
        StorageDead(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        _341 = _335;
        _340 = Ne(move _341, const 0_u128);
        switchInt(move _340) -> [0: bb157, otherwise: bb156];
    }

    bb156: {
        StorageDead(_341);
        StorageLive(_342);
        _342 = ();
        _339 = std::result::Result::<(), error::ErrorCode>::Ok(move _342);
        StorageDead(_342);
        goto -> bb172;
    }

    bb157: {
        StorageDead(_341);
        StorageLive(_343);
        _343 = error::ErrorCode::InvalidMarginRatio;
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _1266 = const _;
        _354 = &(*_1266);
        _353 = &(*_354);
        _352 = move _353 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_353);
        StorageLive(_356);
        StorageLive(_357);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = &_343;
        _361 = &(*_362);
        _360 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _361) -> [return: bb158, unwind: bb635];
    }

    bb158: {
        StorageDead(_361);
        _359 = [move _360];
        StorageDead(_360);
        _358 = &_359;
        _357 = &(*_358);
        _356 = move _357 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_357);
        _351 = Arguments::<'_>::new_v1(move _352, move _356) -> [return: bb159, unwind: bb635];
    }

    bb159: {
        StorageDead(_356);
        StorageDead(_352);
        _350 = format(move _351) -> [return: bb160, unwind: bb635];
    }

    bb160: {
        StorageDead(_351);
        StorageDead(_362);
        StorageDead(_359);
        StorageDead(_358);
        StorageDead(_354);
        _349 = move _350;
        StorageDead(_350);
        _348 = &_349;
        _347 = &(*_348);
        _346 = <String as Deref>::deref(move _347) -> [return: bb161, unwind: bb629];
    }

    bb161: {
        _345 = &(*_346);
        StorageDead(_347);
        _344 = solana_program::log::sol_log(move _345) -> [return: bb162, unwind: bb629];
    }

    bb162: {
        StorageDead(_345);
        drop(_349) -> [return: bb163, unwind: bb635];
    }

    bb163: {
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_346);
        StorageDead(_344);
        StorageLive(_363);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        _1265 = const _;
        _373 = &(*_1265);
        _372 = &(*_373);
        _371 = move _372 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_372);
        StorageLive(_375);
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        _381 = &_195;
        _380 = &(*_381);
        _379 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _380) -> [return: bb164, unwind: bb635];
    }

    bb164: {
        StorageDead(_380);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        _386 = &_50;
        _385 = <Ref<'_, SpotMarket> as Deref>::deref(move _386) -> [return: bb165, unwind: bb635];
    }

    bb165: {
        StorageDead(_386);
        _384 = &((*_385).42: u16);
        _383 = &(*_384);
        _382 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _383) -> [return: bb166, unwind: bb635];
    }

    bb166: {
        StorageDead(_383);
        _378 = [move _379, move _382];
        StorageDead(_382);
        StorageDead(_379);
        _377 = &_378;
        _376 = &(*_377);
        _375 = move _376 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_376);
        _370 = Arguments::<'_>::new_v1(move _371, move _375) -> [return: bb167, unwind: bb635];
    }

    bb167: {
        StorageDead(_375);
        StorageDead(_371);
        _369 = format(move _370) -> [return: bb168, unwind: bb635];
    }

    bb168: {
        StorageDead(_370);
        StorageDead(_385);
        StorageDead(_384);
        StorageDead(_381);
        StorageDead(_378);
        StorageDead(_377);
        StorageDead(_373);
        _368 = move _369;
        StorageDead(_369);
        _367 = &_368;
        _366 = &(*_367);
        _365 = <String as Deref>::deref(move _366) -> [return: bb169, unwind: bb628];
    }

    bb169: {
        _364 = &(*_365);
        StorageDead(_366);
        _363 = solana_program::log::sol_log(move _364) -> [return: bb170, unwind: bb628];
    }

    bb170: {
        StorageDead(_364);
        drop(_368) -> [return: bb171, unwind: bb635];
    }

    bb171: {
        StorageDead(_368);
        StorageDead(_367);
        StorageDead(_365);
        StorageDead(_363);
        StorageLive(_387);
        _387 = _343;
        _339 = std::result::Result::<(), error::ErrorCode>::Err(move _387);
        StorageDead(_387);
        StorageDead(_343);
        goto -> bb172;
    }

    bb172: {
        StorageDead(_340);
        _338 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _339) -> [return: bb173, unwind: bb635];
    }

    bb173: {
        StorageDead(_339);
        _388 = discriminant(_338);
        switchInt(move _388) -> [0: bb174, 1: bb175, otherwise: bb16];
    }

    bb174: {
        StorageLive(_392);
        _392 = ((_338 as Continue).0: ());
        _337 = _392;
        StorageDead(_392);
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = &mut _6;
        StorageLive(_397);
        _397 = _335;
        StorageLive(_398);
        _398 = _335;
        StorageLive(_399);
        _399 = MarketIdentifier::spot(const 0_u16) -> [return: bb177, unwind: bb635];
    }

    bb175: {
        StorageLive(_389);
        _389 = ((_338 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_391);
        _391 = _389;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _391) -> [return: bb176, unwind: bb635];
    }

    bb176: {
        StorageDead(_391);
        StorageDead(_389);
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb603;
    }

    bb177: {
        _395 = MarginCalculation::add_margin_requirement(move _396, move _397, move _398, move _399) -> [return: bb178, unwind: bb635];
    }

    bb178: {
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_397);
        StorageDead(_396);
        _394 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _395) -> [return: bb179, unwind: bb635];
    }

    bb179: {
        StorageDead(_395);
        _400 = discriminant(_394);
        switchInt(move _400) -> [0: bb180, 1: bb181, otherwise: bb16];
    }

    bb180: {
        StorageLive(_404);
        _404 = ((_394 as Continue).0: ());
        _393 = _404;
        StorageDead(_404);
        StorageDead(_394);
        StorageDead(_393);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        _408 = &mut _6;
        _407 = MarginCalculation::add_spot_liability(move _408) -> [return: bb183, unwind: bb635];
    }

    bb181: {
        StorageLive(_401);
        _401 = ((_394 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_403);
        _403 = _401;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _403) -> [return: bb182, unwind: bb635];
    }

    bb182: {
        StorageDead(_403);
        StorageDead(_401);
        StorageDead(_394);
        StorageDead(_393);
        goto -> bb603;
    }

    bb183: {
        StorageDead(_408);
        _406 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _407) -> [return: bb184, unwind: bb635];
    }

    bb184: {
        StorageDead(_407);
        _409 = discriminant(_406);
        switchInt(move _409) -> [0: bb185, 1: bb186, otherwise: bb16];
    }

    bb185: {
        StorageLive(_413);
        _413 = ((_406 as Continue).0: ());
        _405 = _413;
        StorageDead(_413);
        StorageDead(_406);
        StorageDead(_405);
        StorageLive(_414);
        StorageLive(_415);
        _415 = &mut _6;
        StorageLive(_416);
        _416 = _165;
        _414 = MarginCalculation::update_all_liability_oracles_valid(move _415, move _416) -> [return: bb188, unwind: bb635];
    }

    bb186: {
        StorageLive(_410);
        _410 = ((_406 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_412);
        _412 = _410;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _412) -> [return: bb187, unwind: bb635];
    }

    bb187: {
        StorageDead(_412);
        StorageDead(_410);
        StorageDead(_406);
        StorageDead(_405);
        goto -> bb603;
    }

    bb188: {
        StorageDead(_416);
        StorageDead(_415);
        StorageDead(_414);
        _30 = const ();
        StorageDead(_335);
        goto -> bb189;
    }

    bb189: {
        StorageDead(_281);
        StorageDead(_195);
        goto -> bb387;
    }

    bb190: {
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        StorageLive(_420);
        _420 = &(*_36);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        _424 = &_50;
        _423 = &(*_424);
        _422 = <Ref<'_, SpotMarket> as Deref>::deref(move _423) -> [return: bb191, unwind: bb635];
    }

    bb191: {
        _421 = &(*_422);
        StorageDead(_423);
        _419 = SpotPosition::get_signed_token_amount(move _420, move _421) -> [return: bb192, unwind: bb635];
    }

    bb192: {
        StorageDead(_421);
        StorageDead(_420);
        _418 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _419) -> [return: bb193, unwind: bb635];
    }

    bb193: {
        StorageDead(_419);
        _425 = discriminant(_418);
        switchInt(move _425) -> [0: bb194, 1: bb195, otherwise: bb16];
    }

    bb194: {
        StorageLive(_429);
        _429 = ((_418 as Continue).0: i128);
        _417 = _429;
        StorageDead(_429);
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_418);
        StorageLive(_430);
        StorageLive(_431);
        StorageLive(_432);
        StorageLive(_433);
        _433 = &mut _6;
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        _437 = &_50;
        _436 = &(*_437);
        _435 = <Ref<'_, SpotMarket> as Deref>::deref(move _436) -> [return: bb197, unwind: bb635];
    }

    bb195: {
        StorageLive(_426);
        _426 = ((_418 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_428);
        _428 = _426;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _428) -> [return: bb196, unwind: bb635];
    }

    bb196: {
        StorageDead(_428);
        StorageDead(_426);
        StorageDead(_424);
        StorageDead(_422);
        StorageDead(_418);
        goto -> bb602;
    }

    bb197: {
        _434 = &(*_435);
        StorageDead(_436);
        StorageLive(_438);
        _438 = _417;
        StorageLive(_439);
        StorageLive(_440);
        _440 = &_176;
        _439 = &(*_440);
        _432 = MarginCalculation::update_fuel_spot_bonus(move _433, move _434, move _438, move _439) -> [return: bb198, unwind: bb635];
    }

    bb198: {
        StorageDead(_439);
        StorageDead(_438);
        StorageDead(_434);
        StorageDead(_433);
        _431 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _432) -> [return: bb199, unwind: bb635];
    }

    bb199: {
        StorageDead(_432);
        _441 = discriminant(_431);
        switchInt(move _441) -> [0: bb200, 1: bb201, otherwise: bb16];
    }

    bb200: {
        StorageLive(_445);
        _445 = ((_431 as Continue).0: ());
        _430 = _445;
        StorageDead(_445);
        StorageDead(_440);
        StorageDead(_437);
        StorageDead(_435);
        StorageDead(_431);
        StorageDead(_430);
        StorageLive(_450);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        _456 = &(*_36);
        StorageLive(_457);
        StorageLive(_458);
        StorageLive(_459);
        StorageLive(_460);
        _460 = &_50;
        _459 = &(*_460);
        _458 = <Ref<'_, SpotMarket> as Deref>::deref(move _459) -> [return: bb203, unwind: bb635];
    }

    bb201: {
        StorageLive(_442);
        _442 = ((_431 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_444);
        _444 = _442;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _444) -> [return: bb202, unwind: bb635];
    }

    bb202: {
        StorageDead(_444);
        StorageDead(_442);
        StorageDead(_440);
        StorageDead(_437);
        StorageDead(_435);
        StorageDead(_431);
        StorageDead(_430);
        goto -> bb602;
    }

    bb203: {
        _457 = &(*_458);
        StorageDead(_459);
        StorageLive(_461);
        StorageLive(_462);
        _462 = &_176;
        _461 = &(*_462);
        StorageLive(_463);
        StorageLive(_464);
        _464 = _417;
        _463 = Option::<i128>::Some(move _464);
        StorageDead(_464);
        StorageLive(_465);
        _465 = (_5.0: math::margin::MarginRequirementType);
        _455 = SpotPosition::get_worst_case_fill_simulation(move _456, move _457, move _461, move _463, move _465) -> [return: bb204, unwind: bb635];
    }

    bb204: {
        StorageDead(_465);
        StorageDead(_463);
        StorageDead(_461);
        StorageDead(_457);
        StorageDead(_456);
        _454 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as Try>::branch(move _455) -> [return: bb205, unwind: bb635];
    }

    bb205: {
        StorageDead(_455);
        _466 = discriminant(_454);
        switchInt(move _466) -> [0: bb206, 1: bb207, otherwise: bb16];
    }

    bb206: {
        StorageLive(_470);
        _470 = ((_454 as Continue).0: state::user::OrderFillSimulation);
        _453 = _470;
        StorageDead(_470);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        _474 = &_50;
        _473 = &(*_474);
        _472 = <Ref<'_, SpotMarket> as Deref>::deref(move _473) -> [return: bb209, unwind: bb635];
    }

    bb207: {
        StorageLive(_467);
        _467 = ((_454 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_469);
        _469 = _467;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _469) -> [return: bb208, unwind: bb635];
    }

    bb208: {
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_453);
        StorageDead(_452);
        goto -> bb601;
    }

    bb209: {
        _471 = &(*_472);
        StorageDead(_473);
        StorageLive(_475);
        _475 = (_176.0: i64);
        StorageLive(_476);
        _476 = _8;
        _452 = OrderFillSimulation::apply_user_custom_margin_ratio(move _453, move _471, move _475, move _476) -> [return: bb210, unwind: bb635];
    }

    bb210: {
        StorageDead(_476);
        StorageDead(_475);
        StorageDead(_471);
        StorageDead(_453);
        _451 = <std::result::Result<OrderFillSimulation, error::ErrorCode> as Try>::branch(move _452) -> [return: bb211, unwind: bb635];
    }

    bb211: {
        StorageDead(_452);
        _477 = discriminant(_451);
        switchInt(move _477) -> [0: bb212, 1: bb213, otherwise: bb16];
    }

    bb212: {
        StorageLive(_481);
        _481 = ((_451 as Continue).0: state::user::OrderFillSimulation);
        _450 = _481;
        StorageDead(_481);
        StorageLive(_446);
        _446 = (_450.0: i128);
        StorageLive(_447);
        _447 = (_450.1: i128);
        StorageLive(_448);
        _448 = (_450.2: i128);
        StorageLive(_449);
        _449 = (_450.3: i128);
        StorageDead(_474);
        StorageDead(_472);
        StorageDead(_462);
        StorageDead(_460);
        StorageDead(_458);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_450);
        StorageLive(_482);
        StorageLive(_483);
        StorageLive(_484);
        _484 = _446;
        _483 = Eq(move _484, const 0_i128);
        switchInt(move _483) -> [0: bb216, otherwise: bb215];
    }

    bb213: {
        StorageLive(_478);
        _478 = ((_451 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_480);
        _480 = _478;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _480) -> [return: bb214, unwind: bb635];
    }

    bb214: {
        StorageDead(_480);
        StorageDead(_478);
        StorageDead(_474);
        StorageDead(_472);
        goto -> bb601;
    }

    bb215: {
        StorageDead(_484);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        _489 = ((*_36).0: u64);
        _488 = Eq(move _489, const 0_u64);
        switchInt(move _488) -> [0: bb218, otherwise: bb217];
    }

    bb216: {
        StorageDead(_484);
        _482 = const ();
        goto -> bb239;
    }

    bb217: {
        StorageDead(_489);
        StorageLive(_490);
        _490 = ();
        _487 = std::result::Result::<(), error::ErrorCode>::Ok(move _490);
        StorageDead(_490);
        goto -> bb234;
    }

    bb218: {
        StorageDead(_489);
        StorageLive(_491);
        _491 = error::ErrorCode::InvalidMarginRatio;
        StorageLive(_492);
        StorageLive(_493);
        StorageLive(_494);
        StorageLive(_495);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        StorageLive(_502);
        _1281 = const _;
        _502 = &(*_1281);
        _501 = &(*_502);
        _500 = move _501 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_501);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        _510 = &_491;
        _509 = &(*_510);
        _508 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _509) -> [return: bb219, unwind: bb635];
    }

    bb219: {
        StorageDead(_509);
        _507 = [move _508];
        StorageDead(_508);
        _506 = &_507;
        _505 = &(*_506);
        _504 = move _505 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_505);
        _499 = Arguments::<'_>::new_v1(move _500, move _504) -> [return: bb220, unwind: bb635];
    }

    bb220: {
        StorageDead(_504);
        StorageDead(_500);
        _498 = format(move _499) -> [return: bb221, unwind: bb635];
    }

    bb221: {
        StorageDead(_499);
        StorageDead(_510);
        StorageDead(_507);
        StorageDead(_506);
        StorageDead(_502);
        _497 = move _498;
        StorageDead(_498);
        _496 = &_497;
        _495 = &(*_496);
        _494 = <String as Deref>::deref(move _495) -> [return: bb222, unwind: bb627];
    }

    bb222: {
        _493 = &(*_494);
        StorageDead(_495);
        _492 = solana_program::log::sol_log(move _493) -> [return: bb223, unwind: bb627];
    }

    bb223: {
        StorageDead(_493);
        drop(_497) -> [return: bb224, unwind: bb635];
    }

    bb224: {
        StorageDead(_497);
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_492);
        StorageLive(_511);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        StorageLive(_517);
        StorageLive(_518);
        StorageLive(_519);
        StorageLive(_520);
        StorageLive(_521);
        _1280 = const _;
        _521 = &(*_1280);
        _520 = &(*_521);
        _519 = move _520 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_520);
        StorageLive(_523);
        StorageLive(_524);
        StorageLive(_525);
        StorageLive(_526);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        _529 = &((*_36).0: u64);
        _528 = &(*_529);
        _527 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _528) -> [return: bb225, unwind: bb635];
    }

    bb225: {
        StorageDead(_528);
        StorageLive(_530);
        StorageLive(_531);
        StorageLive(_532);
        _532 = &_446;
        _531 = &(*_532);
        _530 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _531) -> [return: bb226, unwind: bb635];
    }

    bb226: {
        StorageDead(_531);
        StorageLive(_533);
        StorageLive(_534);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        _537 = &_50;
        _536 = <Ref<'_, SpotMarket> as Deref>::deref(move _537) -> [return: bb227, unwind: bb635];
    }

    bb227: {
        StorageDead(_537);
        _535 = &((*_536).42: u16);
        _534 = &(*_535);
        _533 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _534) -> [return: bb228, unwind: bb635];
    }

    bb228: {
        StorageDead(_534);
        _526 = [move _527, move _530, move _533];
        StorageDead(_533);
        StorageDead(_530);
        StorageDead(_527);
        _525 = &_526;
        _524 = &(*_525);
        _523 = move _524 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_524);
        _518 = Arguments::<'_>::new_v1(move _519, move _523) -> [return: bb229, unwind: bb635];
    }

    bb229: {
        StorageDead(_523);
        StorageDead(_519);
        _517 = format(move _518) -> [return: bb230, unwind: bb635];
    }

    bb230: {
        StorageDead(_518);
        StorageDead(_536);
        StorageDead(_535);
        StorageDead(_532);
        StorageDead(_529);
        StorageDead(_526);
        StorageDead(_525);
        StorageDead(_521);
        _516 = move _517;
        StorageDead(_517);
        _515 = &_516;
        _514 = &(*_515);
        _513 = <String as Deref>::deref(move _514) -> [return: bb231, unwind: bb626];
    }

    bb231: {
        _512 = &(*_513);
        StorageDead(_514);
        _511 = solana_program::log::sol_log(move _512) -> [return: bb232, unwind: bb626];
    }

    bb232: {
        StorageDead(_512);
        drop(_516) -> [return: bb233, unwind: bb635];
    }

    bb233: {
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_511);
        StorageLive(_538);
        _538 = _491;
        _487 = std::result::Result::<(), error::ErrorCode>::Err(move _538);
        StorageDead(_538);
        StorageDead(_491);
        goto -> bb234;
    }

    bb234: {
        StorageDead(_488);
        _486 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _487) -> [return: bb235, unwind: bb635];
    }

    bb235: {
        StorageDead(_487);
        _539 = discriminant(_486);
        switchInt(move _539) -> [0: bb236, 1: bb237, otherwise: bb16];
    }

    bb236: {
        StorageLive(_543);
        _543 = ((_486 as Continue).0: ());
        _485 = _543;
        StorageDead(_543);
        StorageDead(_486);
        StorageDead(_485);
        _482 = const ();
        goto -> bb239;
    }

    bb237: {
        StorageLive(_540);
        _540 = ((_486 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_542);
        _542 = _540;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _542) -> [return: bb238, unwind: bb635];
    }

    bb238: {
        StorageDead(_542);
        StorageDead(_540);
        StorageDead(_486);
        StorageDead(_485);
        StorageDead(_483);
        StorageDead(_482);
        goto -> bb600;
    }

    bb239: {
        StorageDead(_483);
        StorageDead(_482);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        _547 = &mut _6;
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        _551 = &(*_36);
        _550 = SpotPosition::margin_requirement_for_open_orders(move _551) -> [return: bb240, unwind: bb635];
    }

    bb240: {
        StorageDead(_551);
        _549 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _550) -> [return: bb241, unwind: bb635];
    }

    bb241: {
        StorageDead(_550);
        _552 = discriminant(_549);
        switchInt(move _552) -> [0: bb242, 1: bb243, otherwise: bb16];
    }

    bb242: {
        StorageLive(_556);
        _556 = ((_549 as Continue).0: u128);
        _548 = _556;
        StorageDead(_556);
        StorageLive(_557);
        StorageLive(_558);
        StorageLive(_559);
        StorageLive(_560);
        _560 = &_50;
        _559 = <Ref<'_, SpotMarket> as Deref>::deref(move _560) -> [return: bb245, unwind: bb635];
    }

    bb243: {
        StorageLive(_553);
        _553 = ((_549 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_555);
        _555 = _553;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _555) -> [return: bb244, unwind: bb635];
    }

    bb244: {
        StorageDead(_555);
        StorageDead(_553);
        StorageDead(_548);
        StorageDead(_547);
        StorageDead(_546);
        goto -> bb599;
    }

    bb245: {
        StorageDead(_560);
        _558 = ((*_559).42: u16);
        _557 = MarketIdentifier::spot(move _558) -> [return: bb246, unwind: bb635];
    }

    bb246: {
        StorageDead(_558);
        _546 = MarginCalculation::add_margin_requirement(move _547, move _548, const 0_u128, move _557) -> [return: bb247, unwind: bb635];
    }

    bb247: {
        StorageDead(_557);
        StorageDead(_548);
        StorageDead(_547);
        _545 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _546) -> [return: bb248, unwind: bb635];
    }

    bb248: {
        StorageDead(_546);
        _561 = discriminant(_545);
        switchInt(move _561) -> [0: bb249, 1: bb250, otherwise: bb16];
    }

    bb249: {
        StorageLive(_565);
        _565 = ((_545 as Continue).0: ());
        _544 = _565;
        StorageDead(_565);
        StorageDead(_559);
        StorageDead(_549);
        StorageDead(_545);
        StorageDead(_544);
        StorageLive(_566);
        StorageLive(_567);
        StorageLive(_568);
        _568 = &_448;
        StorageLive(_569);
        StorageLive(_570);
        _1279 = const _;
        _570 = &(*_1279);
        _569 = &(*_570);
        _567 = <i128 as Ord>::cmp(move _568, move _569) -> [return: bb252, unwind: bb635];
    }

    bb250: {
        StorageLive(_562);
        _562 = ((_545 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_564);
        _564 = _562;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _564) -> [return: bb251, unwind: bb635];
    }

    bb251: {
        StorageDead(_564);
        StorageDead(_562);
        StorageDead(_559);
        goto -> bb599;
    }

    bb252: {
        StorageDead(_569);
        StorageDead(_568);
        _572 = discriminant(_567);
        switchInt(move _572) -> [255: bb277, 0: bb253, 1: bb254, otherwise: bb16];
    }

    bb253: {
        StorageLive(_767);
        StorageLive(_768);
        _768 = &(*_36);
        _767 = SpotPosition::has_open_order(move _768) -> [return: bb339, unwind: bb635];
    }

    bb254: {
        StorageLive(_573);
        StorageLive(_574);
        _574 = ((_6.0: state::margin_calculation::MarginContext).3: bool);
        switchInt(move _574) -> [0: bb264, otherwise: bb255];
    }

    bb255: {
        StorageLive(_575);
        _575 = _165;
        switchInt(move _575) -> [0: bb256, otherwise: bb264];
    }

    bb256: {
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        StorageLive(_579);
        StorageLive(_580);
        StorageLive(_581);
        StorageLive(_582);
        StorageLive(_583);
        StorageLive(_584);
        StorageLive(_585);
        StorageLive(_586);
        _1278 = const _;
        _586 = &(*_1278);
        _585 = &(*_586);
        _584 = move _585 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_585);
        StorageLive(_588);
        StorageLive(_589);
        StorageLive(_590);
        StorageLive(_591);
        StorageLive(_592);
        StorageLive(_593);
        StorageLive(_594);
        StorageLive(_595);
        StorageLive(_596);
        _596 = &_50;
        _595 = <Ref<'_, SpotMarket> as Deref>::deref(move _596) -> [return: bb257, unwind: bb635];
    }

    bb257: {
        StorageDead(_596);
        _594 = &((*_595).42: u16);
        _593 = &(*_594);
        _592 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _593) -> [return: bb258, unwind: bb635];
    }

    bb258: {
        StorageDead(_593);
        _591 = [move _592];
        StorageDead(_592);
        _590 = &_591;
        _589 = &(*_590);
        _588 = move _589 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_589);
        _583 = Arguments::<'_>::new_v1(move _584, move _588) -> [return: bb259, unwind: bb635];
    }

    bb259: {
        StorageDead(_588);
        StorageDead(_584);
        _582 = format(move _583) -> [return: bb260, unwind: bb635];
    }

    bb260: {
        StorageDead(_583);
        StorageDead(_595);
        StorageDead(_594);
        StorageDead(_591);
        StorageDead(_590);
        StorageDead(_586);
        _581 = move _582;
        StorageDead(_582);
        _580 = &_581;
        _579 = &(*_580);
        _578 = <String as Deref>::deref(move _579) -> [return: bb261, unwind: bb625];
    }

    bb261: {
        _577 = &(*_578);
        StorageDead(_579);
        _576 = solana_program::log::sol_log(move _577) -> [return: bb262, unwind: bb625];
    }

    bb262: {
        StorageDead(_577);
        drop(_581) -> [return: bb263, unwind: bb635];
    }

    bb263: {
        StorageDead(_581);
        StorageDead(_580);
        StorageDead(_578);
        StorageDead(_576);
        _449 = const 0_i128;
        _573 = const ();
        goto -> bb265;
    }

    bb264: {
        _573 = const ();
        goto -> bb265;
    }

    bb265: {
        StorageDead(_575);
        StorageDead(_574);
        StorageDead(_573);
        StorageLive(_597);
        StorageLive(_598);
        StorageLive(_599);
        StorageLive(_600);
        _600 = &mut _6;
        StorageLive(_601);
        StorageLive(_602);
        StorageLive(_603);
        StorageLive(_604);
        _604 = _449;
        _603 = <i128 as Cast>::cast::<i128>(move _604) -> [return: bb266, unwind: bb635];
    }

    bb266: {
        StorageDead(_604);
        _602 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _603) -> [return: bb267, unwind: bb635];
    }

    bb267: {
        StorageDead(_603);
        _605 = discriminant(_602);
        switchInt(move _605) -> [0: bb268, 1: bb269, otherwise: bb16];
    }

    bb268: {
        StorageLive(_609);
        _609 = ((_602 as Continue).0: i128);
        _601 = _609;
        StorageDead(_609);
        _599 = MarginCalculation::add_total_collateral(move _600, move _601) -> [return: bb271, unwind: bb635];
    }

    bb269: {
        StorageLive(_606);
        _606 = ((_602 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_608);
        _608 = _606;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _608) -> [return: bb270, unwind: bb635];
    }

    bb270: {
        StorageDead(_608);
        StorageDead(_606);
        StorageDead(_601);
        StorageDead(_600);
        StorageDead(_599);
        goto -> bb597;
    }

    bb271: {
        StorageDead(_601);
        StorageDead(_600);
        _598 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _599) -> [return: bb272, unwind: bb635];
    }

    bb272: {
        StorageDead(_599);
        _610 = discriminant(_598);
        switchInt(move _610) -> [0: bb273, 1: bb274, otherwise: bb16];
    }

    bb273: {
        StorageLive(_614);
        _614 = ((_598 as Continue).0: ());
        _597 = _614;
        StorageDead(_614);
        StorageDead(_602);
        StorageDead(_598);
        StorageDead(_597);
        StorageLive(_615);
        StorageLive(_616);
        _616 = &mut _6;
        StorageLive(_617);
        _617 = _165;
        _615 = MarginCalculation::update_all_deposit_oracles_valid(move _616, move _617) -> [return: bb276, unwind: bb635];
    }

    bb274: {
        StorageLive(_611);
        _611 = ((_598 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_613);
        _613 = _611;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _613) -> [return: bb275, unwind: bb635];
    }

    bb275: {
        StorageDead(_613);
        StorageDead(_611);
        goto -> bb597;
    }

    bb276: {
        StorageDead(_617);
        StorageDead(_616);
        StorageDead(_615);
        _566 = const ();
        goto -> bb352;
    }

    bb277: {
        StorageLive(_618);
        StorageLive(_619);
        StorageLive(_620);
        StorageLive(_621);
        StorageLive(_622);
        StorageLive(_623);
        _623 = _449;
        _622 = core::num::<impl i128>::unsigned_abs(move _623) -> [return: bb278, unwind: bb635];
    }

    bb278: {
        StorageDead(_623);
        StorageLive(_624);
        StorageLive(_625);
        _625 = _448;
        _624 = core::num::<impl i128>::unsigned_abs(move _625) -> [return: bb279, unwind: bb635];
    }

    bb279: {
        StorageDead(_625);
        _621 = Ge(move _622, move _624);
        switchInt(move _621) -> [0: bb281, otherwise: bb280];
    }

    bb280: {
        StorageDead(_624);
        StorageDead(_622);
        StorageLive(_626);
        _626 = ();
        _620 = std::result::Result::<(), error::ErrorCode>::Ok(move _626);
        StorageDead(_626);
        goto -> bb295;
    }

    bb281: {
        StorageDead(_624);
        StorageDead(_622);
        StorageLive(_627);
        _627 = error::ErrorCode::InvalidMarginRatio;
        StorageLive(_628);
        StorageLive(_629);
        StorageLive(_630);
        StorageLive(_631);
        StorageLive(_632);
        StorageLive(_633);
        StorageLive(_634);
        StorageLive(_635);
        StorageLive(_636);
        StorageLive(_637);
        StorageLive(_638);
        _1277 = const _;
        _638 = &(*_1277);
        _637 = &(*_638);
        _636 = move _637 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_637);
        StorageLive(_640);
        StorageLive(_641);
        StorageLive(_642);
        StorageLive(_643);
        StorageLive(_644);
        StorageLive(_645);
        StorageLive(_646);
        _646 = &_627;
        _645 = &(*_646);
        _644 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _645) -> [return: bb282, unwind: bb635];
    }

    bb282: {
        StorageDead(_645);
        _643 = [move _644];
        StorageDead(_644);
        _642 = &_643;
        _641 = &(*_642);
        _640 = move _641 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_641);
        _635 = Arguments::<'_>::new_v1(move _636, move _640) -> [return: bb283, unwind: bb635];
    }

    bb283: {
        StorageDead(_640);
        StorageDead(_636);
        _634 = format(move _635) -> [return: bb284, unwind: bb635];
    }

    bb284: {
        StorageDead(_635);
        StorageDead(_646);
        StorageDead(_643);
        StorageDead(_642);
        StorageDead(_638);
        _633 = move _634;
        StorageDead(_634);
        _632 = &_633;
        _631 = &(*_632);
        _630 = <String as Deref>::deref(move _631) -> [return: bb285, unwind: bb624];
    }

    bb285: {
        _629 = &(*_630);
        StorageDead(_631);
        _628 = solana_program::log::sol_log(move _629) -> [return: bb286, unwind: bb624];
    }

    bb286: {
        StorageDead(_629);
        drop(_633) -> [return: bb287, unwind: bb635];
    }

    bb287: {
        StorageDead(_633);
        StorageDead(_632);
        StorageDead(_630);
        StorageDead(_628);
        StorageLive(_647);
        StorageLive(_648);
        StorageLive(_649);
        StorageLive(_650);
        StorageLive(_651);
        StorageLive(_652);
        StorageLive(_653);
        StorageLive(_654);
        StorageLive(_655);
        StorageLive(_656);
        StorageLive(_657);
        _1276 = const _;
        _657 = &(*_1276);
        _656 = &(*_657);
        _655 = move _656 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_656);
        StorageLive(_659);
        StorageLive(_660);
        StorageLive(_661);
        StorageLive(_662);
        StorageLive(_663);
        StorageLive(_664);
        StorageLive(_665);
        StorageLive(_666);
        StorageLive(_667);
        _667 = &_50;
        _666 = <Ref<'_, SpotMarket> as Deref>::deref(move _667) -> [return: bb288, unwind: bb635];
    }

    bb288: {
        StorageDead(_667);
        _665 = &((*_666).42: u16);
        _664 = &(*_665);
        _663 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _664) -> [return: bb289, unwind: bb635];
    }

    bb289: {
        StorageDead(_664);
        _662 = [move _663];
        StorageDead(_663);
        _661 = &_662;
        _660 = &(*_661);
        _659 = move _660 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_660);
        _654 = Arguments::<'_>::new_v1(move _655, move _659) -> [return: bb290, unwind: bb635];
    }

    bb290: {
        StorageDead(_659);
        StorageDead(_655);
        _653 = format(move _654) -> [return: bb291, unwind: bb635];
    }

    bb291: {
        StorageDead(_654);
        StorageDead(_666);
        StorageDead(_665);
        StorageDead(_662);
        StorageDead(_661);
        StorageDead(_657);
        _652 = move _653;
        StorageDead(_653);
        _651 = &_652;
        _650 = &(*_651);
        _649 = <String as Deref>::deref(move _650) -> [return: bb292, unwind: bb623];
    }

    bb292: {
        _648 = &(*_649);
        StorageDead(_650);
        _647 = solana_program::log::sol_log(move _648) -> [return: bb293, unwind: bb623];
    }

    bb293: {
        StorageDead(_648);
        drop(_652) -> [return: bb294, unwind: bb635];
    }

    bb294: {
        StorageDead(_652);
        StorageDead(_651);
        StorageDead(_649);
        StorageDead(_647);
        StorageLive(_668);
        _668 = _627;
        _620 = std::result::Result::<(), error::ErrorCode>::Err(move _668);
        StorageDead(_668);
        StorageDead(_627);
        goto -> bb295;
    }

    bb295: {
        StorageDead(_621);
        _619 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _620) -> [return: bb296, unwind: bb635];
    }

    bb296: {
        StorageDead(_620);
        _669 = discriminant(_619);
        switchInt(move _669) -> [0: bb297, 1: bb298, otherwise: bb16];
    }

    bb297: {
        StorageLive(_673);
        _673 = ((_619 as Continue).0: ());
        _618 = _673;
        StorageDead(_673);
        StorageDead(_619);
        StorageDead(_618);
        StorageLive(_674);
        StorageLive(_675);
        StorageLive(_676);
        StorageLive(_677);
        StorageLive(_678);
        _678 = _449;
        _677 = Ne(move _678, const 0_i128);
        switchInt(move _677) -> [0: bb301, otherwise: bb300];
    }

    bb298: {
        StorageLive(_670);
        _670 = ((_619 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_672);
        _672 = _670;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _672) -> [return: bb299, unwind: bb635];
    }

    bb299: {
        StorageDead(_672);
        StorageDead(_670);
        StorageDead(_619);
        StorageDead(_618);
        goto -> bb598;
    }

    bb300: {
        StorageDead(_678);
        StorageLive(_679);
        _679 = ();
        _676 = std::result::Result::<(), error::ErrorCode>::Ok(move _679);
        StorageDead(_679);
        goto -> bb316;
    }

    bb301: {
        StorageDead(_678);
        StorageLive(_680);
        _680 = error::ErrorCode::InvalidOracle;
        StorageLive(_681);
        StorageLive(_682);
        StorageLive(_683);
        StorageLive(_684);
        StorageLive(_685);
        StorageLive(_686);
        StorageLive(_687);
        StorageLive(_688);
        StorageLive(_689);
        StorageLive(_690);
        StorageLive(_691);
        _1275 = const _;
        _691 = &(*_1275);
        _690 = &(*_691);
        _689 = move _690 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_690);
        StorageLive(_693);
        StorageLive(_694);
        StorageLive(_695);
        StorageLive(_696);
        StorageLive(_697);
        StorageLive(_698);
        StorageLive(_699);
        _699 = &_680;
        _698 = &(*_699);
        _697 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _698) -> [return: bb302, unwind: bb635];
    }

    bb302: {
        StorageDead(_698);
        _696 = [move _697];
        StorageDead(_697);
        _695 = &_696;
        _694 = &(*_695);
        _693 = move _694 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_694);
        _688 = Arguments::<'_>::new_v1(move _689, move _693) -> [return: bb303, unwind: bb635];
    }

    bb303: {
        StorageDead(_693);
        StorageDead(_689);
        _687 = format(move _688) -> [return: bb304, unwind: bb635];
    }

    bb304: {
        StorageDead(_688);
        StorageDead(_699);
        StorageDead(_696);
        StorageDead(_695);
        StorageDead(_691);
        _686 = move _687;
        StorageDead(_687);
        _685 = &_686;
        _684 = &(*_685);
        _683 = <String as Deref>::deref(move _684) -> [return: bb305, unwind: bb622];
    }

    bb305: {
        _682 = &(*_683);
        StorageDead(_684);
        _681 = solana_program::log::sol_log(move _682) -> [return: bb306, unwind: bb622];
    }

    bb306: {
        StorageDead(_682);
        drop(_686) -> [return: bb307, unwind: bb635];
    }

    bb307: {
        StorageDead(_686);
        StorageDead(_685);
        StorageDead(_683);
        StorageDead(_681);
        StorageLive(_700);
        StorageLive(_701);
        StorageLive(_702);
        StorageLive(_703);
        StorageLive(_704);
        StorageLive(_705);
        StorageLive(_706);
        StorageLive(_707);
        StorageLive(_708);
        StorageLive(_709);
        StorageLive(_710);
        _1274 = const _;
        _710 = &(*_1274);
        _709 = &(*_710);
        _708 = move _709 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_709);
        StorageLive(_712);
        StorageLive(_713);
        StorageLive(_714);
        StorageLive(_715);
        StorageLive(_716);
        StorageLive(_717);
        StorageLive(_718);
        _718 = &_446;
        _717 = &(*_718);
        _716 = core::fmt::rt::Argument::<'_>::new_display::<i128>(move _717) -> [return: bb308, unwind: bb635];
    }

    bb308: {
        StorageDead(_717);
        StorageLive(_719);
        StorageLive(_720);
        StorageLive(_721);
        StorageLive(_722);
        StorageLive(_723);
        _723 = &_50;
        _722 = <Ref<'_, SpotMarket> as Deref>::deref(move _723) -> [return: bb309, unwind: bb635];
    }

    bb309: {
        StorageDead(_723);
        _721 = &((*_722).42: u16);
        _720 = &(*_721);
        _719 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _720) -> [return: bb310, unwind: bb635];
    }

    bb310: {
        StorageDead(_720);
        _715 = [move _716, move _719];
        StorageDead(_719);
        StorageDead(_716);
        _714 = &_715;
        _713 = &(*_714);
        _712 = move _713 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_713);
        _707 = Arguments::<'_>::new_v1(move _708, move _712) -> [return: bb311, unwind: bb635];
    }

    bb311: {
        StorageDead(_712);
        StorageDead(_708);
        _706 = format(move _707) -> [return: bb312, unwind: bb635];
    }

    bb312: {
        StorageDead(_707);
        StorageDead(_722);
        StorageDead(_721);
        StorageDead(_718);
        StorageDead(_715);
        StorageDead(_714);
        StorageDead(_710);
        _705 = move _706;
        StorageDead(_706);
        _704 = &_705;
        _703 = &(*_704);
        _702 = <String as Deref>::deref(move _703) -> [return: bb313, unwind: bb621];
    }

    bb313: {
        _701 = &(*_702);
        StorageDead(_703);
        _700 = solana_program::log::sol_log(move _701) -> [return: bb314, unwind: bb621];
    }

    bb314: {
        StorageDead(_701);
        drop(_705) -> [return: bb315, unwind: bb635];
    }

    bb315: {
        StorageDead(_705);
        StorageDead(_704);
        StorageDead(_702);
        StorageDead(_700);
        StorageLive(_724);
        _724 = _680;
        _676 = std::result::Result::<(), error::ErrorCode>::Err(move _724);
        StorageDead(_724);
        StorageDead(_680);
        goto -> bb316;
    }

    bb316: {
        StorageDead(_677);
        _675 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _676) -> [return: bb317, unwind: bb635];
    }

    bb317: {
        StorageDead(_676);
        _725 = discriminant(_675);
        switchInt(move _725) -> [0: bb318, 1: bb319, otherwise: bb16];
    }

    bb318: {
        StorageLive(_729);
        _729 = ((_675 as Continue).0: ());
        _674 = _729;
        StorageDead(_729);
        StorageDead(_675);
        StorageDead(_674);
        StorageLive(_730);
        StorageLive(_731);
        StorageLive(_732);
        StorageLive(_733);
        _733 = &mut _6;
        StorageLive(_734);
        StorageLive(_735);
        _735 = _449;
        _734 = core::num::<impl i128>::unsigned_abs(move _735) -> [return: bb321, unwind: bb635];
    }

    bb319: {
        StorageLive(_726);
        _726 = ((_675 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_728);
        _728 = _726;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _728) -> [return: bb320, unwind: bb635];
    }

    bb320: {
        StorageDead(_728);
        StorageDead(_726);
        StorageDead(_675);
        StorageDead(_674);
        goto -> bb598;
    }

    bb321: {
        StorageDead(_735);
        StorageLive(_736);
        StorageLive(_737);
        _737 = _448;
        _736 = core::num::<impl i128>::unsigned_abs(move _737) -> [return: bb322, unwind: bb635];
    }

    bb322: {
        StorageDead(_737);
        StorageLive(_738);
        StorageLive(_739);
        StorageLive(_740);
        StorageLive(_741);
        _741 = &_50;
        _740 = <Ref<'_, SpotMarket> as Deref>::deref(move _741) -> [return: bb323, unwind: bb635];
    }

    bb323: {
        StorageDead(_741);
        _739 = ((*_740).42: u16);
        _738 = MarketIdentifier::spot(move _739) -> [return: bb324, unwind: bb635];
    }

    bb324: {
        StorageDead(_739);
        _732 = MarginCalculation::add_margin_requirement(move _733, move _734, move _736, move _738) -> [return: bb325, unwind: bb635];
    }

    bb325: {
        StorageDead(_738);
        StorageDead(_736);
        StorageDead(_734);
        StorageDead(_733);
        _731 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _732) -> [return: bb326, unwind: bb635];
    }

    bb326: {
        StorageDead(_732);
        _742 = discriminant(_731);
        switchInt(move _742) -> [0: bb327, 1: bb328, otherwise: bb16];
    }

    bb327: {
        StorageLive(_746);
        _746 = ((_731 as Continue).0: ());
        _730 = _746;
        StorageDead(_746);
        StorageDead(_740);
        StorageDead(_731);
        StorageDead(_730);
        StorageLive(_747);
        StorageLive(_748);
        StorageLive(_749);
        StorageLive(_750);
        _750 = &mut _6;
        _749 = MarginCalculation::add_spot_liability(move _750) -> [return: bb330, unwind: bb635];
    }

    bb328: {
        StorageLive(_743);
        _743 = ((_731 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_745);
        _745 = _743;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _745) -> [return: bb329, unwind: bb635];
    }

    bb329: {
        StorageDead(_745);
        StorageDead(_743);
        StorageDead(_740);
        StorageDead(_731);
        StorageDead(_730);
        goto -> bb598;
    }

    bb330: {
        StorageDead(_750);
        _748 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _749) -> [return: bb331, unwind: bb635];
    }

    bb331: {
        StorageDead(_749);
        _751 = discriminant(_748);
        switchInt(move _751) -> [0: bb332, 1: bb333, otherwise: bb16];
    }

    bb332: {
        StorageLive(_755);
        _755 = ((_748 as Continue).0: ());
        _747 = _755;
        StorageDead(_755);
        StorageDead(_748);
        StorageDead(_747);
        StorageLive(_756);
        StorageLive(_757);
        _757 = &mut _6;
        StorageLive(_758);
        StorageLive(_759);
        StorageLive(_760);
        StorageLive(_761);
        _761 = &_50;
        _760 = <Ref<'_, SpotMarket> as Deref>::deref(move _761) -> [return: bb335, unwind: bb635];
    }

    bb333: {
        StorageLive(_752);
        _752 = ((_748 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_754);
        _754 = _752;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _754) -> [return: bb334, unwind: bb635];
    }

    bb334: {
        StorageDead(_754);
        StorageDead(_752);
        StorageDead(_748);
        StorageDead(_747);
        goto -> bb598;
    }

    bb335: {
        StorageDead(_761);
        _759 = &((*_760).46: state::spot_market::AssetTier);
        StorageLive(_762);
        _1273 = const _;
        _762 = &(*_1273);
        _758 = <state::spot_market::AssetTier as PartialEq>::eq(move _759, move _762) -> [return: bb336, unwind: bb635];
    }

    bb336: {
        StorageDead(_762);
        StorageDead(_759);
        _756 = MarginCalculation::update_with_spot_isolated_liability(move _757, move _758) -> [return: bb337, unwind: bb635];
    }

    bb337: {
        StorageDead(_758);
        StorageDead(_757);
        StorageDead(_760);
        StorageDead(_756);
        StorageLive(_764);
        StorageLive(_765);
        _765 = &mut _6;
        StorageLive(_766);
        _766 = _165;
        _764 = MarginCalculation::update_all_liability_oracles_valid(move _765, move _766) -> [return: bb338, unwind: bb635];
    }

    bb338: {
        StorageDead(_766);
        StorageDead(_765);
        StorageDead(_764);
        _566 = const ();
        goto -> bb352;
    }

    bb339: {
        switchInt(move _767) -> [0: bb350, otherwise: bb340];
    }

    bb340: {
        StorageDead(_768);
        StorageLive(_769);
        StorageLive(_770);
        StorageLive(_771);
        StorageLive(_772);
        _772 = &mut _6;
        _771 = MarginCalculation::add_spot_liability(move _772) -> [return: bb341, unwind: bb635];
    }

    bb341: {
        StorageDead(_772);
        _770 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _771) -> [return: bb342, unwind: bb635];
    }

    bb342: {
        StorageDead(_771);
        _773 = discriminant(_770);
        switchInt(move _773) -> [0: bb343, 1: bb344, otherwise: bb16];
    }

    bb343: {
        StorageLive(_777);
        _777 = ((_770 as Continue).0: ());
        _769 = _777;
        StorageDead(_777);
        StorageDead(_770);
        StorageDead(_769);
        StorageLive(_778);
        StorageLive(_779);
        _779 = &mut _6;
        StorageLive(_780);
        _780 = _165;
        _778 = MarginCalculation::update_all_liability_oracles_valid(move _779, move _780) -> [return: bb346, unwind: bb635];
    }

    bb344: {
        StorageLive(_774);
        _774 = ((_770 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_776);
        _776 = _774;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _776) -> [return: bb345, unwind: bb635];
    }

    bb345: {
        StorageDead(_776);
        StorageDead(_774);
        StorageDead(_770);
        StorageDead(_769);
        StorageDead(_767);
        goto -> bb598;
    }

    bb346: {
        StorageDead(_780);
        StorageDead(_779);
        StorageDead(_778);
        StorageLive(_781);
        StorageLive(_782);
        _782 = &mut _6;
        StorageLive(_783);
        StorageLive(_784);
        StorageLive(_785);
        StorageLive(_786);
        _786 = &_50;
        _785 = <Ref<'_, SpotMarket> as Deref>::deref(move _786) -> [return: bb347, unwind: bb635];
    }

    bb347: {
        StorageDead(_786);
        _784 = &((*_785).46: state::spot_market::AssetTier);
        StorageLive(_787);
        _1272 = const _;
        _787 = &(*_1272);
        _783 = <state::spot_market::AssetTier as PartialEq>::eq(move _784, move _787) -> [return: bb348, unwind: bb635];
    }

    bb348: {
        StorageDead(_787);
        StorageDead(_784);
        _781 = MarginCalculation::update_with_spot_isolated_liability(move _782, move _783) -> [return: bb349, unwind: bb635];
    }

    bb349: {
        StorageDead(_783);
        StorageDead(_782);
        StorageDead(_785);
        StorageDead(_781);
        _566 = const ();
        goto -> bb351;
    }

    bb350: {
        StorageDead(_768);
        _566 = const ();
        goto -> bb351;
    }

    bb351: {
        StorageDead(_767);
        goto -> bb352;
    }

    bb352: {
        StorageDead(_570);
        StorageDead(_567);
        StorageDead(_566);
        StorageLive(_789);
        StorageLive(_790);
        _790 = &_447;
        StorageLive(_791);
        StorageLive(_792);
        _1271 = const _;
        _792 = &(*_1271);
        _791 = &(*_792);
        _789 = <i128 as Ord>::cmp(move _790, move _791) -> [return: bb353, unwind: bb635];
    }

    bb353: {
        StorageDead(_791);
        StorageDead(_790);
        _794 = discriminant(_789);
        switchInt(move _794) -> [255: bb377, 0: bb354, 1: bb355, otherwise: bb16];
    }

    bb354: {
        _30 = const ();
        goto -> bb386;
    }

    bb355: {
        StorageLive(_795);
        StorageLive(_796);
        _796 = ((_6.0: state::margin_calculation::MarginContext).3: bool);
        switchInt(move _796) -> [0: bb365, otherwise: bb356];
    }

    bb356: {
        StorageLive(_797);
        _797 = _165;
        switchInt(move _797) -> [0: bb357, otherwise: bb365];
    }

    bb357: {
        StorageLive(_798);
        StorageLive(_799);
        StorageLive(_800);
        StorageLive(_801);
        StorageLive(_802);
        StorageLive(_803);
        StorageLive(_804);
        StorageLive(_805);
        StorageLive(_806);
        StorageLive(_807);
        StorageLive(_808);
        _1270 = const _;
        _808 = &(*_1270);
        _807 = &(*_808);
        _806 = move _807 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_807);
        StorageLive(_810);
        StorageLive(_811);
        StorageLive(_812);
        StorageLive(_813);
        StorageLive(_814);
        StorageLive(_815);
        StorageLive(_816);
        StorageLive(_817);
        StorageLive(_818);
        _818 = &_50;
        _817 = <Ref<'_, SpotMarket> as Deref>::deref(move _818) -> [return: bb358, unwind: bb635];
    }

    bb358: {
        StorageDead(_818);
        _816 = &((*_817).42: u16);
        _815 = &(*_816);
        _814 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _815) -> [return: bb359, unwind: bb635];
    }

    bb359: {
        StorageDead(_815);
        _813 = [move _814];
        StorageDead(_814);
        _812 = &_813;
        _811 = &(*_812);
        _810 = move _811 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_811);
        _805 = Arguments::<'_>::new_v1(move _806, move _810) -> [return: bb360, unwind: bb635];
    }

    bb360: {
        StorageDead(_810);
        StorageDead(_806);
        _804 = format(move _805) -> [return: bb361, unwind: bb635];
    }

    bb361: {
        StorageDead(_805);
        StorageDead(_817);
        StorageDead(_816);
        StorageDead(_813);
        StorageDead(_812);
        StorageDead(_808);
        _803 = move _804;
        StorageDead(_804);
        _802 = &_803;
        _801 = &(*_802);
        _800 = <String as Deref>::deref(move _801) -> [return: bb362, unwind: bb620];
    }

    bb362: {
        _799 = &(*_800);
        StorageDead(_801);
        _798 = solana_program::log::sol_log(move _799) -> [return: bb363, unwind: bb620];
    }

    bb363: {
        StorageDead(_799);
        drop(_803) -> [return: bb364, unwind: bb635];
    }

    bb364: {
        StorageDead(_803);
        StorageDead(_802);
        StorageDead(_800);
        StorageDead(_798);
        _447 = const 0_i128;
        _795 = const ();
        goto -> bb366;
    }

    bb365: {
        _795 = const ();
        goto -> bb366;
    }

    bb366: {
        StorageDead(_797);
        StorageDead(_796);
        StorageDead(_795);
        StorageLive(_819);
        StorageLive(_820);
        StorageLive(_821);
        StorageLive(_822);
        _822 = &mut _6;
        StorageLive(_823);
        StorageLive(_824);
        StorageLive(_825);
        StorageLive(_826);
        _826 = _447;
        _825 = <i128 as Cast>::cast::<i128>(move _826) -> [return: bb367, unwind: bb635];
    }

    bb367: {
        StorageDead(_826);
        _824 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _825) -> [return: bb368, unwind: bb635];
    }

    bb368: {
        StorageDead(_825);
        _827 = discriminant(_824);
        switchInt(move _827) -> [0: bb369, 1: bb370, otherwise: bb16];
    }

    bb369: {
        StorageLive(_831);
        _831 = ((_824 as Continue).0: i128);
        _823 = _831;
        StorageDead(_831);
        _821 = MarginCalculation::add_total_collateral(move _822, move _823) -> [return: bb372, unwind: bb635];
    }

    bb370: {
        StorageLive(_828);
        _828 = ((_824 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_830);
        _830 = _828;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _830) -> [return: bb371, unwind: bb635];
    }

    bb371: {
        StorageDead(_830);
        StorageDead(_828);
        StorageDead(_823);
        StorageDead(_822);
        StorageDead(_821);
        goto -> bb595;
    }

    bb372: {
        StorageDead(_823);
        StorageDead(_822);
        _820 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _821) -> [return: bb373, unwind: bb635];
    }

    bb373: {
        StorageDead(_821);
        _832 = discriminant(_820);
        switchInt(move _832) -> [0: bb374, 1: bb375, otherwise: bb16];
    }

    bb374: {
        StorageLive(_836);
        _836 = ((_820 as Continue).0: ());
        _819 = _836;
        StorageDead(_836);
        StorageDead(_824);
        StorageDead(_820);
        StorageDead(_819);
        _30 = const ();
        goto -> bb386;
    }

    bb375: {
        StorageLive(_833);
        _833 = ((_820 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_835);
        _835 = _833;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _835) -> [return: bb376, unwind: bb635];
    }

    bb376: {
        StorageDead(_835);
        StorageDead(_833);
        goto -> bb595;
    }

    bb377: {
        StorageLive(_837);
        StorageLive(_838);
        StorageLive(_839);
        StorageLive(_840);
        _840 = &mut _6;
        StorageLive(_841);
        StorageLive(_842);
        _842 = _447;
        _841 = core::num::<impl i128>::unsigned_abs(move _842) -> [return: bb378, unwind: bb635];
    }

    bb378: {
        StorageDead(_842);
        StorageLive(_843);
        StorageLive(_844);
        _844 = _447;
        _843 = core::num::<impl i128>::unsigned_abs(move _844) -> [return: bb379, unwind: bb635];
    }

    bb379: {
        StorageDead(_844);
        StorageLive(_845);
        _845 = MarketIdentifier::spot(const 0_u16) -> [return: bb380, unwind: bb635];
    }

    bb380: {
        _839 = MarginCalculation::add_margin_requirement(move _840, move _841, move _843, move _845) -> [return: bb381, unwind: bb635];
    }

    bb381: {
        StorageDead(_845);
        StorageDead(_843);
        StorageDead(_841);
        StorageDead(_840);
        _838 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _839) -> [return: bb382, unwind: bb635];
    }

    bb382: {
        StorageDead(_839);
        _846 = discriminant(_838);
        switchInt(move _846) -> [0: bb383, 1: bb384, otherwise: bb16];
    }

    bb383: {
        StorageLive(_850);
        _850 = ((_838 as Continue).0: ());
        _837 = _850;
        StorageDead(_850);
        StorageDead(_838);
        StorageDead(_837);
        _30 = const ();
        goto -> bb386;
    }

    bb384: {
        StorageLive(_847);
        _847 = ((_838 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_849);
        _849 = _847;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _849) -> [return: bb385, unwind: bb635];
    }

    bb385: {
        StorageDead(_849);
        StorageDead(_847);
        StorageDead(_838);
        StorageDead(_837);
        goto -> bb596;
    }

    bb386: {
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_417);
        StorageDead(_792);
        StorageDead(_789);
        goto -> bb387;
    }

    bb387: {
        StorageDead(_191);
        StorageDead(_176);
        StorageDead(_165);
        StorageDead(_96);
        StorageDead(_62);
        StorageDead(_61);
        drop(_50) -> [return: bb388, unwind: bb636];
    }

    bb388: {
        StorageDead(_50);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        _29 = const ();
        goto -> bb13;
    }

    bb389: {
        StorageDead(_854);
        _852 = <std::slice::Iter<'_, PerpPosition> as IntoIterator>::into_iter(move _853) -> [return: bb390, unwind continue];
    }

    bb390: {
        StorageDead(_853);
        StorageLive(_856);
        _856 = move _852;
        goto -> bb391;
    }

    bb391: {
        StorageLive(_857);
        StorageLive(_858);
        StorageLive(_859);
        StorageLive(_860);
        _860 = &mut _856;
        _859 = &mut (*_860);
        _858 = <std::slice::Iter<'_, PerpPosition> as Iterator>::next(move _859) -> [return: bb392, unwind continue];
    }

    bb392: {
        StorageDead(_859);
        _861 = discriminant(_858);
        switchInt(move _861) -> [0: bb394, 1: bb393, otherwise: bb16];
    }

    bb393: {
        StorageLive(_863);
        _863 = ((_858 as Some).0: &state::user::PerpPosition);
        StorageLive(_864);
        StorageLive(_865);
        StorageLive(_866);
        _866 = &(*_863);
        _865 = PerpPosition::is_available(move _866) -> [return: bb395, unwind continue];
    }

    bb394: {
        _851 = const ();
        StorageDead(_860);
        StorageDead(_858);
        StorageDead(_857);
        StorageDead(_856);
        StorageDead(_852);
        StorageDead(_851);
        StorageLive(_1172);
        StorageLive(_1173);
        StorageLive(_1174);
        StorageLive(_1175);
        _1175 = &_6;
        _1174 = MarginCalculation::validate_num_spot_liabilities(move _1175) -> [return: bb538, unwind continue];
    }

    bb395: {
        switchInt(move _865) -> [0: bb397, otherwise: bb396];
    }

    bb396: {
        StorageDead(_866);
        StorageDead(_865);
        StorageDead(_864);
        StorageDead(_863);
        StorageDead(_860);
        StorageDead(_858);
        StorageDead(_857);
        goto -> bb391;
    }

    bb397: {
        StorageDead(_866);
        _864 = const ();
        StorageDead(_865);
        StorageDead(_864);
        StorageLive(_868);
        StorageLive(_869);
        StorageLive(_870);
        StorageLive(_871);
        StorageLive(_872);
        _872 = &(*_2);
        StorageLive(_873);
        StorageLive(_874);
        _874 = &((*_863).13: u16);
        _873 = &(*_874);
        _871 = PerpMarketMap::<'_>::get_ref(move _872, move _873) -> [return: bb398, unwind continue];
    }

    bb398: {
        StorageDead(_873);
        StorageDead(_872);
        _870 = <std::result::Result<Ref<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _871) -> [return: bb399, unwind: bb636];
    }

    bb399: {
        StorageDead(_871);
        _875 = discriminant(_870);
        switchInt(move _875) -> [0: bb400, 1: bb401, otherwise: bb16];
    }

    bb400: {
        StorageLive(_879);
        _879 = move ((_870 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _869 = move _879;
        StorageDead(_879);
        _868 = &_869;
        _1299 = discriminant(_870);
        StorageDead(_874);
        StorageDead(_870);
        StorageLive(_880);
        StorageLive(_881);
        StorageLive(_882);
        StorageLive(_883);
        StorageLive(_884);
        _884 = _19;
        StorageLive(_885);
        StorageLive(_886);
        StorageLive(_887);
        _887 = &(*_868);
        _886 = <Ref<'_, PerpMarket> as Deref>::deref(move _887) -> [return: bb403, unwind: bb619];
    }

    bb401: {
        StorageLive(_876);
        _876 = ((_870 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_878);
        _878 = _876;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _878) -> [return: bb402, unwind: bb643];
    }

    bb402: {
        StorageDead(_878);
        StorageDead(_876);
        _1297 = discriminant(_870);
        StorageDead(_874);
        StorageDead(_870);
        goto -> bb594;
    }

    bb403: {
        StorageDead(_887);
        _885 = ((*_886).31: u8);
        _883 = Eq(move _884, move _885);
        switchInt(move _883) -> [0: bb405, otherwise: bb404];
    }

    bb404: {
        StorageDead(_886);
        StorageDead(_885);
        StorageDead(_884);
        StorageLive(_888);
        _888 = ();
        _882 = std::result::Result::<(), error::ErrorCode>::Ok(move _888);
        StorageDead(_888);
        goto -> bb420;
    }

    bb405: {
        StorageDead(_886);
        StorageDead(_885);
        StorageDead(_884);
        StorageLive(_889);
        _889 = error::ErrorCode::InvalidPoolId;
        StorageLive(_890);
        StorageLive(_891);
        StorageLive(_892);
        StorageLive(_893);
        StorageLive(_894);
        StorageLive(_895);
        StorageLive(_896);
        StorageLive(_897);
        StorageLive(_898);
        StorageLive(_899);
        StorageLive(_900);
        _1288 = const _;
        _900 = &(*_1288);
        _899 = &(*_900);
        _898 = move _899 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_899);
        StorageLive(_902);
        StorageLive(_903);
        StorageLive(_904);
        StorageLive(_905);
        StorageLive(_906);
        StorageLive(_907);
        StorageLive(_908);
        _908 = &_889;
        _907 = &(*_908);
        _906 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _907) -> [return: bb406, unwind: bb619];
    }

    bb406: {
        StorageDead(_907);
        _905 = [move _906];
        StorageDead(_906);
        _904 = &_905;
        _903 = &(*_904);
        _902 = move _903 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_903);
        _897 = Arguments::<'_>::new_v1(move _898, move _902) -> [return: bb407, unwind: bb619];
    }

    bb407: {
        StorageDead(_902);
        StorageDead(_898);
        _896 = format(move _897) -> [return: bb408, unwind: bb619];
    }

    bb408: {
        StorageDead(_897);
        StorageDead(_908);
        StorageDead(_905);
        StorageDead(_904);
        StorageDead(_900);
        _895 = move _896;
        StorageDead(_896);
        _894 = &_895;
        _893 = &(*_894);
        _892 = <String as Deref>::deref(move _893) -> [return: bb409, unwind: bb618];
    }

    bb409: {
        _891 = &(*_892);
        StorageDead(_893);
        _890 = solana_program::log::sol_log(move _891) -> [return: bb410, unwind: bb618];
    }

    bb410: {
        StorageDead(_891);
        drop(_895) -> [return: bb411, unwind: bb619];
    }

    bb411: {
        StorageDead(_895);
        StorageDead(_894);
        StorageDead(_892);
        StorageDead(_890);
        StorageLive(_909);
        StorageLive(_910);
        StorageLive(_911);
        StorageLive(_912);
        StorageLive(_913);
        StorageLive(_914);
        StorageLive(_915);
        StorageLive(_916);
        StorageLive(_917);
        StorageLive(_918);
        StorageLive(_919);
        _1287 = const _;
        _919 = &(*_1287);
        _918 = &(*_919);
        _917 = move _918 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_918);
        StorageLive(_921);
        StorageLive(_922);
        StorageLive(_923);
        StorageLive(_924);
        StorageLive(_925);
        StorageLive(_926);
        StorageLive(_927);
        _927 = &_19;
        _926 = &(*_927);
        _925 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _926) -> [return: bb412, unwind: bb619];
    }

    bb412: {
        StorageDead(_926);
        StorageLive(_928);
        StorageLive(_929);
        StorageLive(_930);
        StorageLive(_931);
        StorageLive(_932);
        _932 = &(*_868);
        _931 = <Ref<'_, PerpMarket> as Deref>::deref(move _932) -> [return: bb413, unwind: bb619];
    }

    bb413: {
        StorageDead(_932);
        _930 = &((*_931).31: u8);
        _929 = &(*_930);
        _928 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _929) -> [return: bb414, unwind: bb619];
    }

    bb414: {
        StorageDead(_929);
        _924 = [move _925, move _928];
        StorageDead(_928);
        StorageDead(_925);
        _923 = &_924;
        _922 = &(*_923);
        _921 = move _922 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_922);
        _916 = Arguments::<'_>::new_v1(move _917, move _921) -> [return: bb415, unwind: bb619];
    }

    bb415: {
        StorageDead(_921);
        StorageDead(_917);
        _915 = format(move _916) -> [return: bb416, unwind: bb619];
    }

    bb416: {
        StorageDead(_916);
        StorageDead(_931);
        StorageDead(_930);
        StorageDead(_927);
        StorageDead(_924);
        StorageDead(_923);
        StorageDead(_919);
        _914 = move _915;
        StorageDead(_915);
        _913 = &_914;
        _912 = &(*_913);
        _911 = <String as Deref>::deref(move _912) -> [return: bb417, unwind: bb617];
    }

    bb417: {
        _910 = &(*_911);
        StorageDead(_912);
        _909 = solana_program::log::sol_log(move _910) -> [return: bb418, unwind: bb617];
    }

    bb418: {
        StorageDead(_910);
        drop(_914) -> [return: bb419, unwind: bb619];
    }

    bb419: {
        StorageDead(_914);
        StorageDead(_913);
        StorageDead(_911);
        StorageDead(_909);
        StorageLive(_933);
        _933 = _889;
        _882 = std::result::Result::<(), error::ErrorCode>::Err(move _933);
        StorageDead(_933);
        StorageDead(_889);
        goto -> bb420;
    }

    bb420: {
        StorageDead(_883);
        _881 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _882) -> [return: bb421, unwind: bb619];
    }

    bb421: {
        StorageDead(_882);
        _934 = discriminant(_881);
        switchInt(move _934) -> [0: bb422, 1: bb423, otherwise: bb16];
    }

    bb422: {
        StorageLive(_938);
        _938 = ((_881 as Continue).0: ());
        _880 = _938;
        StorageDead(_938);
        StorageDead(_881);
        StorageDead(_880);
        StorageLive(_939);
        StorageLive(_940);
        StorageLive(_941);
        StorageLive(_942);
        _942 = &(*_3);
        StorageLive(_943);
        StorageLive(_944);
        StorageLive(_945);
        StorageLive(_946);
        _946 = &(*_868);
        _945 = <Ref<'_, PerpMarket> as Deref>::deref(move _946) -> [return: bb425, unwind: bb619];
    }

    bb423: {
        StorageLive(_935);
        _935 = ((_881 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_937);
        _937 = _935;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _937) -> [return: bb424, unwind: bb619];
    }

    bb424: {
        StorageDead(_937);
        StorageDead(_935);
        StorageDead(_881);
        StorageDead(_880);
        goto -> bb593;
    }

    bb425: {
        StorageDead(_946);
        _944 = &((*_945).26: u16);
        _943 = &(*_944);
        _941 = SpotMarketMap::<'_>::get_ref(move _942, move _943) -> [return: bb426, unwind: bb619];
    }

    bb426: {
        StorageDead(_943);
        StorageDead(_942);
        _940 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _941) -> [return: bb427, unwind: bb619];
    }

    bb427: {
        StorageDead(_941);
        _947 = discriminant(_940);
        switchInt(move _947) -> [0: bb428, 1: bb429, otherwise: bb16];
    }

    bb428: {
        StorageLive(_951);
        _951 = move ((_940 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1292 = const true;
        _939 = move _951;
        StorageDead(_951);
        _1303 = discriminant(_940);
        StorageDead(_945);
        StorageDead(_944);
        StorageDead(_940);
        StorageLive(_954);
        StorageLive(_955);
        StorageLive(_956);
        StorageLive(_957);
        _957 = &mut (*_4);
        StorageLive(_958);
        _958 = state::user::MarketType::Spot;
        StorageLive(_959);
        StorageLive(_960);
        StorageLive(_961);
        _961 = &_939;
        _960 = <Ref<'_, SpotMarket> as Deref>::deref(move _961) -> [return: bb431, unwind: bb641];
    }

    bb429: {
        StorageLive(_948);
        _948 = ((_940 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_950);
        _950 = _948;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _950) -> [return: bb430, unwind: bb642];
    }

    bb430: {
        StorageDead(_950);
        StorageDead(_948);
        _1301 = discriminant(_940);
        StorageDead(_945);
        StorageDead(_944);
        StorageDead(_940);
        goto -> bb592;
    }

    bb431: {
        StorageDead(_961);
        _959 = ((*_960).42: u16);
        StorageLive(_962);
        StorageLive(_963);
        StorageLive(_964);
        StorageLive(_965);
        StorageLive(_966);
        StorageLive(_967);
        _967 = &_939;
        _966 = <Ref<'_, SpotMarket> as Deref>::deref(move _967) -> [return: bb432, unwind: bb641];
    }

    bb432: {
        _965 = &(*_966);
        StorageDead(_967);
        _964 = SpotMarket::oracle_id(move _965) -> [return: bb433, unwind: bb641];
    }

    bb433: {
        StorageDead(_965);
        _963 = &_964;
        _962 = &(*_963);
        StorageLive(_968);
        StorageLive(_969);
        StorageLive(_970);
        _970 = &_939;
        _969 = <Ref<'_, SpotMarket> as Deref>::deref(move _970) -> [return: bb434, unwind: bb641];
    }

    bb434: {
        StorageDead(_970);
        _968 = (((*_969).5: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_971);
        StorageLive(_972);
        StorageLive(_973);
        StorageLive(_974);
        StorageLive(_975);
        StorageLive(_976);
        _976 = &_939;
        _975 = <Ref<'_, SpotMarket> as Deref>::deref(move _976) -> [return: bb435, unwind: bb641];
    }

    bb435: {
        _974 = &(*_975);
        StorageDead(_976);
        _973 = SpotMarket::get_max_confidence_interval_multiplier(move _974) -> [return: bb436, unwind: bb641];
    }

    bb436: {
        StorageDead(_974);
        _972 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _973) -> [return: bb437, unwind: bb641];
    }

    bb437: {
        StorageDead(_973);
        _977 = discriminant(_972);
        switchInt(move _977) -> [0: bb438, 1: bb439, otherwise: bb16];
    }

    bb438: {
        StorageLive(_981);
        _981 = ((_972 as Continue).0: u64);
        _971 = _981;
        StorageDead(_981);
        _956 = OracleMap::<'_>::get_price_data_and_validity(move _957, move _958, move _959, move _962, move _968, move _971, const 0_i8) -> [return: bb441, unwind: bb641];
    }

    bb439: {
        StorageLive(_978);
        _978 = ((_972 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_980);
        _980 = _978;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _980) -> [return: bb440, unwind: bb641];
    }

    bb440: {
        StorageDead(_980);
        StorageDead(_978);
        StorageDead(_971);
        StorageDead(_968);
        StorageDead(_962);
        StorageDead(_959);
        StorageDead(_958);
        StorageDead(_957);
        StorageDead(_956);
        goto -> bb591;
    }

    bb441: {
        StorageDead(_971);
        StorageDead(_968);
        StorageDead(_962);
        StorageDead(_959);
        StorageDead(_958);
        StorageDead(_957);
        _955 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as Try>::branch(move _956) -> [return: bb442, unwind: bb641];
    }

    bb442: {
        StorageDead(_956);
        _982 = discriminant(_955);
        switchInt(move _982) -> [0: bb443, 1: bb444, otherwise: bb16];
    }

    bb443: {
        StorageLive(_986);
        _986 = ((_955 as Continue).0: (&state::oracle::OraclePriceData, math::oracle::OracleValidity));
        _954 = _986;
        StorageDead(_986);
        StorageLive(_952);
        _952 = (_954.0: &state::oracle::OraclePriceData);
        StorageLive(_953);
        _953 = (_954.1: math::oracle::OracleValidity);
        StorageDead(_975);
        StorageDead(_972);
        StorageDead(_969);
        StorageDead(_966);
        StorageDead(_964);
        StorageDead(_963);
        StorageDead(_960);
        StorageDead(_955);
        StorageDead(_954);
        StorageLive(_987);
        StorageLive(_988);
        _988 = ((*_952).0: i64);
        StorageLive(_989);
        StorageLive(_990);
        StorageLive(_991);
        _991 = &_939;
        _990 = <Ref<'_, SpotMarket> as Deref>::deref(move _991) -> [return: bb446, unwind: bb641];
    }

    bb444: {
        StorageLive(_983);
        _983 = ((_955 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_985);
        _985 = _983;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _985) -> [return: bb445, unwind: bb641];
    }

    bb445: {
        StorageDead(_985);
        StorageDead(_983);
        goto -> bb591;
    }

    bb446: {
        StorageDead(_991);
        _989 = (((*_990).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_992);
        _992 = ((_6.0: state::margin_calculation::MarginContext).2: bool);
        _987 = StrictOraclePrice::new(move _988, move _989, move _992) -> [return: bb447, unwind: bb641];
    }

    bb447: {
        StorageDead(_992);
        StorageDead(_989);
        StorageDead(_988);
        StorageDead(_990);
        StorageLive(_993);
        StorageLive(_994);
        _1292 = const false;
        _994 = move _939;
        _993 = std::mem::drop::<Ref<'_, SpotMarket>>(move _994) -> [return: bb448, unwind: bb641];
    }

    bb448: {
        StorageDead(_994);
        StorageDead(_993);
        StorageLive(_997);
        StorageLive(_998);
        StorageLive(_999);
        StorageLive(_1000);
        _1000 = &mut (*_4);
        StorageLive(_1001);
        _1001 = state::user::MarketType::Perp;
        StorageLive(_1002);
        StorageLive(_1003);
        StorageLive(_1004);
        _1004 = &(*_868);
        _1003 = <Ref<'_, PerpMarket> as Deref>::deref(move _1004) -> [return: bb449, unwind: bb641];
    }

    bb449: {
        StorageDead(_1004);
        _1002 = ((*_1003).21: u16);
        StorageLive(_1005);
        StorageLive(_1006);
        StorageLive(_1007);
        StorageLive(_1008);
        StorageLive(_1009);
        StorageLive(_1010);
        _1010 = &(*_868);
        _1009 = <Ref<'_, PerpMarket> as Deref>::deref(move _1010) -> [return: bb450, unwind: bb641];
    }

    bb450: {
        _1008 = &(*_1009);
        StorageDead(_1010);
        _1007 = PerpMarket::oracle_id(move _1008) -> [return: bb451, unwind: bb641];
    }

    bb451: {
        StorageDead(_1008);
        _1006 = &_1007;
        _1005 = &(*_1006);
        StorageLive(_1011);
        StorageLive(_1012);
        StorageLive(_1013);
        _1013 = &(*_868);
        _1012 = <Ref<'_, PerpMarket> as Deref>::deref(move _1013) -> [return: bb452, unwind: bb641];
    }

    bb452: {
        StorageDead(_1013);
        _1011 = ((((*_1012).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).3: i64);
        StorageLive(_1014);
        StorageLive(_1015);
        StorageLive(_1016);
        StorageLive(_1017);
        StorageLive(_1018);
        StorageLive(_1019);
        _1019 = &(*_868);
        _1018 = <Ref<'_, PerpMarket> as Deref>::deref(move _1019) -> [return: bb453, unwind: bb641];
    }

    bb453: {
        _1017 = (*_1018);
        StorageDead(_1019);
        _1016 = PerpMarket::get_max_confidence_interval_multiplier(move _1017) -> [return: bb454, unwind: bb641];
    }

    bb454: {
        StorageDead(_1017);
        _1015 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _1016) -> [return: bb455, unwind: bb641];
    }

    bb455: {
        StorageDead(_1016);
        _1020 = discriminant(_1015);
        switchInt(move _1020) -> [0: bb456, 1: bb457, otherwise: bb16];
    }

    bb456: {
        StorageLive(_1024);
        _1024 = ((_1015 as Continue).0: u64);
        _1014 = _1024;
        StorageDead(_1024);
        _999 = OracleMap::<'_>::get_price_data_and_validity(move _1000, move _1001, move _1002, move _1005, move _1011, move _1014, const 0_i8) -> [return: bb459, unwind: bb641];
    }

    bb457: {
        StorageLive(_1021);
        _1021 = ((_1015 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1023);
        _1023 = _1021;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1023) -> [return: bb458, unwind: bb641];
    }

    bb458: {
        StorageDead(_1023);
        StorageDead(_1021);
        StorageDead(_1014);
        StorageDead(_1011);
        StorageDead(_1005);
        StorageDead(_1002);
        StorageDead(_1001);
        StorageDead(_1000);
        StorageDead(_999);
        goto -> bb589;
    }

    bb459: {
        StorageDead(_1014);
        StorageDead(_1011);
        StorageDead(_1005);
        StorageDead(_1002);
        StorageDead(_1001);
        StorageDead(_1000);
        _998 = <std::result::Result<(&OraclePriceData, OracleValidity), error::ErrorCode> as Try>::branch(move _999) -> [return: bb460, unwind: bb641];
    }

    bb460: {
        StorageDead(_999);
        _1025 = discriminant(_998);
        switchInt(move _1025) -> [0: bb461, 1: bb462, otherwise: bb16];
    }

    bb461: {
        StorageLive(_1029);
        _1029 = ((_998 as Continue).0: (&state::oracle::OraclePriceData, math::oracle::OracleValidity));
        _997 = _1029;
        StorageDead(_1029);
        StorageLive(_995);
        _995 = (_997.0: &state::oracle::OraclePriceData);
        StorageLive(_996);
        _996 = (_997.1: math::oracle::OracleValidity);
        StorageDead(_1018);
        StorageDead(_1015);
        StorageDead(_1012);
        StorageDead(_1009);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1003);
        StorageDead(_998);
        StorageDead(_997);
        StorageLive(_1030);
        StorageLive(_1031);
        StorageLive(_1032);
        _1032 = &(_5.0: math::margin::MarginRequirementType);
        StorageLive(_1033);
        _1286 = const _;
        _1033 = &(*_1286);
        _1031 = <math::margin::MarginRequirementType as PartialEq>::eq(move _1032, move _1033) -> [return: bb464, unwind: bb641];
    }

    bb462: {
        StorageLive(_1026);
        _1026 = ((_998 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1028);
        _1028 = _1026;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1028) -> [return: bb463, unwind: bb641];
    }

    bb463: {
        StorageDead(_1028);
        StorageDead(_1026);
        goto -> bb589;
    }

    bb464: {
        switchInt(move _1031) -> [0: bb466, otherwise: bb465];
    }

    bb465: {
        StorageDead(_1033);
        StorageDead(_1032);
        StorageLive(_1035);
        _1035 = ((*_863).12: u16);
        _1030 = move _1035 as u32 (IntToInt);
        StorageDead(_1035);
        goto -> bb467;
    }

    bb466: {
        StorageDead(_1033);
        StorageDead(_1032);
        _1030 = const 0_u32;
        goto -> bb467;
    }

    bb467: {
        StorageDead(_1031);
        StorageLive(_1041);
        StorageLive(_1042);
        StorageLive(_1043);
        StorageLive(_1044);
        _1044 = &(*_863);
        StorageLive(_1045);
        StorageLive(_1046);
        StorageLive(_1047);
        _1047 = &(*_868);
        _1046 = <Ref<'_, PerpMarket> as Deref>::deref(move _1047) -> [return: bb468, unwind: bb641];
    }

    bb468: {
        _1045 = &(*_1046);
        StorageDead(_1047);
        StorageLive(_1048);
        _1048 = &(*_995);
        StorageLive(_1049);
        StorageLive(_1050);
        _1050 = &_987;
        _1049 = &(*_1050);
        StorageLive(_1051);
        _1051 = (_5.0: math::margin::MarginRequirementType);
        StorageLive(_1052);
        StorageLive(_1053);
        _1053 = _8;
        StorageLive(_1054);
        _1054 = _1030;
        _1052 = <u32 as Ord>::max(move _1053, move _1054) -> [return: bb469, unwind: bb641];
    }

    bb469: {
        StorageDead(_1054);
        StorageDead(_1053);
        StorageLive(_1055);
        _1055 = _20;
        StorageLive(_1056);
        StorageLive(_1057);
        _1057 = &_6;
        _1056 = MarginCalculation::track_open_orders_fraction(move _1057) -> [return: bb470, unwind: bb641];
    }

    bb470: {
        StorageDead(_1057);
        _1043 = calculate_perp_position_value_and_pnl(move _1044, move _1045, move _1048, move _1049, move _1051, move _1052, move _1055, move _1056) -> [return: bb471, unwind: bb641];
    }

    bb471: {
        StorageDead(_1056);
        StorageDead(_1055);
        StorageDead(_1052);
        StorageDead(_1051);
        StorageDead(_1049);
        StorageDead(_1048);
        StorageDead(_1045);
        StorageDead(_1044);
        _1042 = <std::result::Result<(u128, i128, u128, u128, u128), error::ErrorCode> as Try>::branch(move _1043) -> [return: bb472, unwind: bb641];
    }

    bb472: {
        StorageDead(_1043);
        _1058 = discriminant(_1042);
        switchInt(move _1058) -> [0: bb473, 1: bb474, otherwise: bb16];
    }

    bb473: {
        StorageLive(_1062);
        _1062 = ((_1042 as Continue).0: (u128, i128, u128, u128, u128));
        _1041 = _1062;
        StorageDead(_1062);
        StorageLive(_1036);
        _1036 = (_1041.0: u128);
        StorageLive(_1037);
        _1037 = (_1041.1: i128);
        StorageLive(_1038);
        _1038 = (_1041.2: u128);
        StorageLive(_1039);
        _1039 = (_1041.3: u128);
        StorageLive(_1040);
        _1040 = (_1041.4: u128);
        StorageDead(_1050);
        StorageDead(_1046);
        StorageDead(_1042);
        StorageDead(_1041);
        StorageLive(_1063);
        StorageLive(_1064);
        StorageLive(_1065);
        StorageLive(_1066);
        _1066 = &mut _6;
        StorageLive(_1067);
        StorageLive(_1068);
        StorageLive(_1069);
        _1069 = &(*_868);
        _1068 = <Ref<'_, PerpMarket> as Deref>::deref(move _1069) -> [return: bb476, unwind: bb641];
    }

    bb474: {
        StorageLive(_1059);
        _1059 = ((_1042 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1061);
        _1061 = _1059;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1061) -> [return: bb475, unwind: bb641];
    }

    bb475: {
        StorageDead(_1061);
        StorageDead(_1059);
        StorageDead(_1050);
        StorageDead(_1046);
        StorageDead(_1042);
        StorageDead(_1041);
        goto -> bb588;
    }

    bb476: {
        _1067 = &(*_1068);
        StorageDead(_1069);
        StorageLive(_1070);
        _1070 = &(*_863);
        StorageLive(_1071);
        _1071 = _1040;
        StorageLive(_1072);
        _1072 = ((*_995).0: i64);
        _1065 = MarginCalculation::update_fuel_perp_bonus(move _1066, move _1067, move _1070, move _1071, move _1072) -> [return: bb477, unwind: bb641];
    }

    bb477: {
        StorageDead(_1072);
        StorageDead(_1071);
        StorageDead(_1070);
        StorageDead(_1067);
        StorageDead(_1066);
        _1064 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1065) -> [return: bb478, unwind: bb641];
    }

    bb478: {
        StorageDead(_1065);
        _1073 = discriminant(_1064);
        switchInt(move _1073) -> [0: bb479, 1: bb480, otherwise: bb16];
    }

    bb479: {
        StorageLive(_1077);
        _1077 = ((_1064 as Continue).0: ());
        _1063 = _1077;
        StorageDead(_1077);
        StorageDead(_1068);
        StorageDead(_1064);
        StorageDead(_1063);
        StorageLive(_1078);
        StorageLive(_1079);
        StorageLive(_1080);
        StorageLive(_1081);
        _1081 = &mut _6;
        StorageLive(_1082);
        _1082 = _1036;
        StorageLive(_1083);
        _1083 = _1038;
        StorageLive(_1084);
        StorageLive(_1085);
        StorageLive(_1086);
        StorageLive(_1087);
        _1087 = &(*_868);
        _1086 = <Ref<'_, PerpMarket> as Deref>::deref(move _1087) -> [return: bb482, unwind: bb641];
    }

    bb480: {
        StorageLive(_1074);
        _1074 = ((_1064 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1076);
        _1076 = _1074;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1076) -> [return: bb481, unwind: bb641];
    }

    bb481: {
        StorageDead(_1076);
        StorageDead(_1074);
        StorageDead(_1068);
        StorageDead(_1064);
        StorageDead(_1063);
        goto -> bb587;
    }

    bb482: {
        StorageDead(_1087);
        _1085 = ((*_1086).21: u16);
        _1084 = MarketIdentifier::perp(move _1085) -> [return: bb483, unwind: bb641];
    }

    bb483: {
        StorageDead(_1085);
        _1080 = MarginCalculation::add_margin_requirement(move _1081, move _1082, move _1083, move _1084) -> [return: bb484, unwind: bb641];
    }

    bb484: {
        StorageDead(_1084);
        StorageDead(_1083);
        StorageDead(_1082);
        StorageDead(_1081);
        _1079 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1080) -> [return: bb485, unwind: bb641];
    }

    bb485: {
        StorageDead(_1080);
        _1088 = discriminant(_1079);
        switchInt(move _1088) -> [0: bb486, 1: bb487, otherwise: bb16];
    }

    bb486: {
        StorageLive(_1092);
        _1092 = ((_1079 as Continue).0: ());
        _1078 = _1092;
        StorageDead(_1092);
        StorageDead(_1086);
        StorageDead(_1079);
        StorageDead(_1078);
        StorageLive(_1093);
        StorageLive(_1094);
        StorageLive(_1095);
        _1095 = &_6;
        _1094 = MarginCalculation::track_open_orders_fraction(move _1095) -> [return: bb489, unwind: bb641];
    }

    bb487: {
        StorageLive(_1089);
        _1089 = ((_1079 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1091);
        _1091 = _1089;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1091) -> [return: bb488, unwind: bb641];
    }

    bb488: {
        StorageDead(_1091);
        StorageDead(_1089);
        StorageDead(_1086);
        StorageDead(_1079);
        StorageDead(_1078);
        goto -> bb587;
    }

    bb489: {
        switchInt(move _1094) -> [0: bb496, otherwise: bb490];
    }

    bb490: {
        StorageDead(_1095);
        StorageLive(_1096);
        StorageLive(_1097);
        StorageLive(_1098);
        StorageLive(_1099);
        _1099 = &mut _6;
        StorageLive(_1100);
        _1100 = _1039;
        _1098 = MarginCalculation::add_open_orders_margin_requirement(move _1099, move _1100) -> [return: bb491, unwind: bb641];
    }

    bb491: {
        StorageDead(_1100);
        StorageDead(_1099);
        _1097 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1098) -> [return: bb492, unwind: bb641];
    }

    bb492: {
        StorageDead(_1098);
        _1101 = discriminant(_1097);
        switchInt(move _1101) -> [0: bb493, 1: bb494, otherwise: bb16];
    }

    bb493: {
        StorageLive(_1105);
        _1105 = ((_1097 as Continue).0: ());
        _1096 = _1105;
        StorageDead(_1105);
        StorageDead(_1097);
        StorageDead(_1096);
        _1093 = const ();
        goto -> bb497;
    }

    bb494: {
        StorageLive(_1102);
        _1102 = ((_1097 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1104);
        _1104 = _1102;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1104) -> [return: bb495, unwind: bb641];
    }

    bb495: {
        StorageDead(_1104);
        StorageDead(_1102);
        StorageDead(_1097);
        StorageDead(_1096);
        StorageDead(_1094);
        StorageDead(_1093);
        goto -> bb587;
    }

    bb496: {
        StorageDead(_1095);
        _1093 = const ();
        goto -> bb497;
    }

    bb497: {
        StorageDead(_1094);
        StorageDead(_1093);
        StorageLive(_1106);
        StorageLive(_1107);
        StorageLive(_1108);
        StorageLive(_1109);
        _1109 = &mut _6;
        StorageLive(_1110);
        _1110 = _1037;
        _1108 = MarginCalculation::add_total_collateral(move _1109, move _1110) -> [return: bb498, unwind: bb641];
    }

    bb498: {
        StorageDead(_1110);
        StorageDead(_1109);
        _1107 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1108) -> [return: bb499, unwind: bb641];
    }

    bb499: {
        StorageDead(_1108);
        _1111 = discriminant(_1107);
        switchInt(move _1111) -> [0: bb500, 1: bb501, otherwise: bb16];
    }

    bb500: {
        StorageLive(_1115);
        _1115 = ((_1107 as Continue).0: ());
        _1106 = _1115;
        StorageDead(_1115);
        StorageDead(_1107);
        StorageDead(_1106);
        StorageLive(_1116);
        StorageLive(_1117);
        StorageLive(_1118);
        _1118 = ((*_863).1: i64);
        _1117 = Ne(move _1118, const 0_i64);
        switchInt(move _1117) -> [0: bb504, otherwise: bb503];
    }

    bb501: {
        StorageLive(_1112);
        _1112 = ((_1107 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1114);
        _1114 = _1112;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1114) -> [return: bb502, unwind: bb641];
    }

    bb502: {
        StorageDead(_1114);
        StorageDead(_1112);
        StorageDead(_1107);
        StorageDead(_1106);
        goto -> bb587;
    }

    bb503: {
        StorageDead(_1118);
        goto -> bb505;
    }

    bb504: {
        StorageDead(_1118);
        StorageLive(_1119);
        StorageLive(_1120);
        _1120 = ((*_863).2: i64);
        _1119 = Lt(move _1120, const 0_i64);
        switchInt(move _1119) -> [0: bb506, otherwise: bb505];
    }

    bb505: {
        StorageDead(_1120);
        _1116 = const true;
        goto -> bb508;
    }

    bb506: {
        StorageDead(_1120);
        StorageLive(_1121);
        _1121 = &(*_863);
        _1116 = PerpPosition::has_open_order(move _1121) -> [return: bb507, unwind: bb641];
    }

    bb507: {
        StorageDead(_1121);
        goto -> bb508;
    }

    bb508: {
        StorageDead(_1119);
        StorageDead(_1117);
        StorageLive(_1122);
        StorageLive(_1123);
        _1123 = _1116;
        switchInt(move _1123) -> [0: bb518, otherwise: bb509];
    }

    bb509: {
        StorageLive(_1124);
        StorageLive(_1125);
        StorageLive(_1126);
        StorageLive(_1127);
        _1127 = &mut _6;
        _1126 = MarginCalculation::add_perp_liability(move _1127) -> [return: bb510, unwind: bb641];
    }

    bb510: {
        StorageDead(_1127);
        _1125 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1126) -> [return: bb511, unwind: bb641];
    }

    bb511: {
        StorageDead(_1126);
        _1128 = discriminant(_1125);
        switchInt(move _1128) -> [0: bb512, 1: bb513, otherwise: bb16];
    }

    bb512: {
        StorageLive(_1132);
        _1132 = ((_1125 as Continue).0: ());
        _1124 = _1132;
        StorageDead(_1132);
        StorageDead(_1125);
        StorageDead(_1124);
        StorageLive(_1133);
        StorageLive(_1134);
        _1134 = &mut _6;
        StorageLive(_1135);
        StorageLive(_1136);
        StorageLive(_1137);
        StorageLive(_1138);
        _1138 = &(*_868);
        _1137 = <Ref<'_, PerpMarket> as Deref>::deref(move _1138) -> [return: bb515, unwind: bb641];
    }

    bb513: {
        StorageLive(_1129);
        _1129 = ((_1125 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1131);
        _1131 = _1129;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1131) -> [return: bb514, unwind: bb641];
    }

    bb514: {
        StorageDead(_1131);
        StorageDead(_1129);
        StorageDead(_1125);
        StorageDead(_1124);
        StorageDead(_1123);
        StorageDead(_1122);
        goto -> bb586;
    }

    bb515: {
        StorageDead(_1138);
        _1136 = &((*_1137).24: state::perp_market::ContractTier);
        StorageLive(_1139);
        _1285 = const _;
        _1139 = &(*_1285);
        _1135 = <state::perp_market::ContractTier as PartialEq>::eq(move _1136, move _1139) -> [return: bb516, unwind: bb641];
    }

    bb516: {
        StorageDead(_1139);
        StorageDead(_1136);
        _1133 = MarginCalculation::update_with_perp_isolated_liability(move _1134, move _1135) -> [return: bb517, unwind: bb641];
    }

    bb517: {
        StorageDead(_1135);
        StorageDead(_1134);
        StorageDead(_1137);
        StorageDead(_1133);
        _1122 = const ();
        goto -> bb519;
    }

    bb518: {
        _1122 = const ();
        goto -> bb519;
    }

    bb519: {
        StorageDead(_1123);
        StorageDead(_1122);
        StorageLive(_1141);
        _1141 = _1116;
        switchInt(move _1141) -> [0: bb520, otherwise: bb522];
    }

    bb520: {
        StorageLive(_1142);
        StorageLive(_1143);
        _1143 = &((_6.0: state::margin_calculation::MarginContext).0: math::margin::MarginRequirementType);
        StorageLive(_1144);
        _1284 = const _;
        _1144 = &(*_1284);
        _1142 = <math::margin::MarginRequirementType as PartialEq>::ne(move _1143, move _1144) -> [return: bb521, unwind: bb641];
    }

    bb521: {
        switchInt(move _1142) -> [0: bb535, otherwise: bb522];
    }

    bb522: {
        StorageDead(_1144);
        StorageDead(_1143);
        StorageLive(_1146);
        StorageLive(_1147);
        _1147 = &mut _6;
        StorageLive(_1148);
        StorageLive(_1149);
        StorageLive(_1150);
        StorageLive(_1151);
        _1151 = _953;
        StorageLive(_1152);
        StorageLive(_1153);
        _1153 = DriftAction::MarginCalc;
        _1152 = Option::<DriftAction>::Some(move _1153);
        StorageDead(_1153);
        _1150 = is_oracle_valid_for_action(move _1151, move _1152) -> [return: bb523, unwind: bb641];
    }

    bb523: {
        StorageDead(_1152);
        StorageDead(_1151);
        _1149 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1150) -> [return: bb524, unwind: bb641];
    }

    bb524: {
        StorageDead(_1150);
        _1154 = discriminant(_1149);
        switchInt(move _1154) -> [0: bb525, 1: bb526, otherwise: bb16];
    }

    bb525: {
        StorageLive(_1158);
        _1158 = ((_1149 as Continue).0: bool);
        _1148 = _1158;
        StorageDead(_1158);
        _1146 = MarginCalculation::update_all_liability_oracles_valid(move _1147, move _1148) -> [return: bb528, unwind: bb641];
    }

    bb526: {
        StorageLive(_1155);
        _1155 = ((_1149 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1157);
        _1157 = _1155;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1157) -> [return: bb527, unwind: bb641];
    }

    bb527: {
        StorageDead(_1157);
        StorageDead(_1155);
        StorageDead(_1148);
        StorageDead(_1147);
        StorageDead(_1149);
        StorageDead(_1146);
        goto -> bb585;
    }

    bb528: {
        StorageDead(_1148);
        StorageDead(_1147);
        StorageDead(_1149);
        StorageDead(_1146);
        StorageLive(_1159);
        StorageLive(_1160);
        _1160 = &mut _6;
        StorageLive(_1161);
        StorageLive(_1162);
        StorageLive(_1163);
        StorageLive(_1164);
        _1164 = _996;
        StorageLive(_1165);
        StorageLive(_1166);
        _1166 = DriftAction::MarginCalc;
        _1165 = Option::<DriftAction>::Some(move _1166);
        StorageDead(_1166);
        _1163 = is_oracle_valid_for_action(move _1164, move _1165) -> [return: bb529, unwind: bb641];
    }

    bb529: {
        StorageDead(_1165);
        StorageDead(_1164);
        _1162 = <std::result::Result<bool, error::ErrorCode> as Try>::branch(move _1163) -> [return: bb530, unwind: bb641];
    }

    bb530: {
        StorageDead(_1163);
        _1167 = discriminant(_1162);
        switchInt(move _1167) -> [0: bb531, 1: bb532, otherwise: bb16];
    }

    bb531: {
        StorageLive(_1171);
        _1171 = ((_1162 as Continue).0: bool);
        _1161 = _1171;
        StorageDead(_1171);
        _1159 = MarginCalculation::update_all_liability_oracles_valid(move _1160, move _1161) -> [return: bb534, unwind: bb641];
    }

    bb532: {
        StorageLive(_1168);
        _1168 = ((_1162 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1170);
        _1170 = _1168;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1170) -> [return: bb533, unwind: bb641];
    }

    bb533: {
        StorageDead(_1170);
        StorageDead(_1168);
        StorageDead(_1161);
        StorageDead(_1160);
        StorageDead(_1162);
        StorageDead(_1159);
        goto -> bb585;
    }

    bb534: {
        StorageDead(_1161);
        StorageDead(_1160);
        StorageDead(_1162);
        StorageDead(_1159);
        _857 = const ();
        goto -> bb536;
    }

    bb535: {
        StorageDead(_1144);
        StorageDead(_1143);
        _857 = const ();
        goto -> bb536;
    }

    bb536: {
        StorageDead(_1142);
        StorageDead(_1141);
        StorageDead(_1116);
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1038);
        StorageDead(_1037);
        StorageDead(_1036);
        StorageDead(_1030);
        StorageDead(_996);
        StorageDead(_995);
        StorageDead(_987);
        StorageDead(_953);
        StorageDead(_952);
        _1292 = const false;
        StorageDead(_939);
        drop(_869) -> [return: bb537, unwind: bb636];
    }

    bb537: {
        StorageDead(_869);
        StorageDead(_868);
        StorageDead(_863);
        StorageDead(_860);
        StorageDead(_858);
        StorageDead(_857);
        _29 = const ();
        goto -> bb391;
    }

    bb538: {
        StorageDead(_1175);
        _1173 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1174) -> [return: bb539, unwind continue];
    }

    bb539: {
        StorageDead(_1174);
        _1176 = discriminant(_1173);
        switchInt(move _1176) -> [0: bb540, 1: bb541, otherwise: bb16];
    }

    bb540: {
        StorageLive(_1180);
        _1180 = ((_1173 as Continue).0: ());
        _1172 = _1180;
        StorageDead(_1180);
        StorageDead(_1173);
        StorageDead(_1172);
        StorageLive(_1181);
        _1181 = ((_6.0: state::margin_calculation::MarginContext).8: [(u16, i128); 2]);
        StorageLive(_1182);
        StorageLive(_1183);
        StorageLive(_1184);
        StorageLive(_1185);
        StorageLive(_1186);
        _1186 = &_1181;
        _1185 = move _1186 as &[(u16, i128)] (PointerCoercion(Unsize));
        StorageDead(_1186);
        _1184 = core::slice::<impl [(u16, i128)]>::iter(move _1185) -> [return: bb543, unwind continue];
    }

    bb541: {
        StorageLive(_1177);
        _1177 = ((_1173 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1179);
        _1179 = _1177;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1179) -> [return: bb542, unwind continue];
    }

    bb542: {
        StorageDead(_1179);
        StorageDead(_1177);
        StorageDead(_1173);
        StorageDead(_1172);
        goto -> bb614;
    }

    bb543: {
        StorageDead(_1185);
        _1183 = <std::slice::Iter<'_, (u16, i128)> as IntoIterator>::into_iter(move _1184) -> [return: bb544, unwind continue];
    }

    bb544: {
        StorageDead(_1184);
        StorageLive(_1187);
        _1187 = move _1183;
        goto -> bb545;
    }

    bb545: {
        StorageLive(_1188);
        StorageLive(_1189);
        StorageLive(_1190);
        StorageLive(_1191);
        _1191 = &mut _1187;
        _1190 = &mut (*_1191);
        _1189 = <std::slice::Iter<'_, (u16, i128)> as Iterator>::next(move _1190) -> [return: bb546, unwind continue];
    }

    bb546: {
        StorageDead(_1190);
        _1192 = discriminant(_1189);
        switchInt(move _1192) -> [0: bb548, 1: bb547, otherwise: bb16];
    }

    bb547: {
        StorageLive(_1194);
        _1290 = deref_copy ((_1189 as Some).0: &(u16, i128));
        _1194 = &((*_1290).0: u16);
        StorageLive(_1195);
        _1291 = deref_copy ((_1189 as Some).0: &(u16, i128));
        _1195 = &((*_1291).1: i128);
        StorageLive(_1196);
        StorageLive(_1197);
        StorageLive(_1198);
        _1198 = (*_1195);
        _1197 = Eq(move _1198, const 0_i128);
        switchInt(move _1197) -> [0: bb550, otherwise: bb549];
    }

    bb548: {
        _1182 = const ();
        StorageDead(_1191);
        StorageDead(_1189);
        StorageDead(_1188);
        StorageDead(_1187);
        StorageDead(_1183);
        StorageDead(_1182);
        StorageLive(_1264);
        _1264 = _6;
        _0 = std::result::Result::<MarginCalculation, error::ErrorCode>::Ok(move _1264);
        StorageDead(_1264);
        StorageDead(_1181);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_8);
        StorageDead(_6);
        goto -> bb615;
    }

    bb549: {
        StorageDead(_1198);
        StorageDead(_1197);
        StorageDead(_1196);
        goto -> bb581;
    }

    bb550: {
        StorageDead(_1198);
        _1196 = const ();
        StorageDead(_1197);
        StorageDead(_1196);
        StorageLive(_1200);
        StorageLive(_1201);
        StorageLive(_1202);
        StorageLive(_1203);
        StorageLive(_1204);
        StorageLive(_1205);
        _1205 = &((*_1).3: [state::user::SpotPosition; 8]);
        _1204 = move _1205 as &[state::user::SpotPosition] (PointerCoercion(Unsize));
        StorageDead(_1205);
        _1203 = core::slice::<impl [SpotPosition]>::iter(move _1204) -> [return: bb551, unwind continue];
    }

    bb551: {
        _1202 = &mut _1203;
        StorageDead(_1204);
        StorageLive(_1206);
        StorageLive(_1207);
        _1207 = &_1194;
        _1206 = {closure@programs/drift/src/math/margin.rs:623:18: 623:21} { market_index: move _1207 };
        StorageDead(_1207);
        _1201 = <std::slice::Iter<'_, SpotPosition> as Iterator>::any::<{closure@programs/drift/src/math/margin.rs:623:18: 623:21}>(move _1202, move _1206) -> [return: bb552, unwind continue];
    }

    bb552: {
        switchInt(move _1201) -> [0: bb554, otherwise: bb553];
    }

    bb553: {
        StorageDead(_1206);
        StorageDead(_1203);
        StorageDead(_1202);
        StorageDead(_1201);
        StorageDead(_1200);
        goto -> bb581;
    }

    bb554: {
        StorageDead(_1206);
        StorageDead(_1203);
        StorageDead(_1202);
        _1200 = const ();
        StorageDead(_1201);
        StorageDead(_1200);
        StorageLive(_1209);
        StorageLive(_1210);
        StorageLive(_1211);
        StorageLive(_1212);
        _1212 = &(*_3);
        StorageLive(_1213);
        _1213 = &(*_1194);
        _1211 = SpotMarketMap::<'_>::get_ref(move _1212, move _1213) -> [return: bb555, unwind continue];
    }

    bb555: {
        StorageDead(_1213);
        StorageDead(_1212);
        _1210 = <std::result::Result<Ref<'_, SpotMarket>, error::ErrorCode> as Try>::branch(move _1211) -> [return: bb556, unwind: bb636];
    }

    bb556: {
        StorageDead(_1211);
        _1214 = discriminant(_1210);
        switchInt(move _1214) -> [0: bb557, 1: bb558, otherwise: bb16];
    }

    bb557: {
        StorageLive(_1218);
        _1218 = move ((_1210 as Continue).0: std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _1209 = move _1218;
        StorageDead(_1218);
        _1307 = discriminant(_1210);
        StorageDead(_1210);
        StorageLive(_1219);
        StorageLive(_1220);
        StorageLive(_1221);
        StorageLive(_1222);
        _1222 = &mut (*_4);
        StorageLive(_1223);
        StorageLive(_1224);
        StorageLive(_1225);
        StorageLive(_1226);
        StorageLive(_1227);
        StorageLive(_1228);
        _1228 = &_1209;
        _1227 = <Ref<'_, SpotMarket> as Deref>::deref(move _1228) -> [return: bb560, unwind: bb616];
    }

    bb558: {
        StorageLive(_1215);
        _1215 = ((_1210 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1217);
        _1217 = _1215;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1217) -> [return: bb559, unwind: bb639];
    }

    bb559: {
        StorageDead(_1217);
        StorageDead(_1215);
        _1305 = discriminant(_1210);
        StorageDead(_1210);
        goto -> bb584;
    }

    bb560: {
        _1226 = &(*_1227);
        StorageDead(_1228);
        _1225 = SpotMarket::oracle_id(move _1226) -> [return: bb561, unwind: bb616];
    }

    bb561: {
        StorageDead(_1226);
        _1224 = &_1225;
        _1223 = &(*_1224);
        _1221 = OracleMap::<'_>::get_price_data(move _1222, move _1223) -> [return: bb562, unwind: bb616];
    }

    bb562: {
        StorageDead(_1223);
        StorageDead(_1222);
        _1220 = <std::result::Result<&OraclePriceData, error::ErrorCode> as Try>::branch(move _1221) -> [return: bb563, unwind: bb616];
    }

    bb563: {
        StorageDead(_1221);
        _1229 = discriminant(_1220);
        switchInt(move _1229) -> [0: bb564, 1: bb565, otherwise: bb16];
    }

    bb564: {
        StorageLive(_1233);
        _1233 = ((_1220 as Continue).0: &state::oracle::OraclePriceData);
        _1219 = _1233;
        StorageDead(_1233);
        StorageDead(_1227);
        StorageDead(_1225);
        StorageDead(_1224);
        StorageDead(_1220);
        StorageLive(_1234);
        StorageLive(_1235);
        _1235 = ((*_1219).0: i64);
        StorageLive(_1236);
        StorageLive(_1237);
        StorageLive(_1238);
        _1238 = &_1209;
        _1237 = <Ref<'_, SpotMarket> as Deref>::deref(move _1238) -> [return: bb567, unwind: bb616];
    }

    bb565: {
        StorageLive(_1230);
        _1230 = ((_1220 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1232);
        _1232 = _1230;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1232) -> [return: bb566, unwind: bb616];
    }

    bb566: {
        StorageDead(_1232);
        StorageDead(_1230);
        StorageDead(_1227);
        StorageDead(_1225);
        StorageDead(_1224);
        StorageDead(_1220);
        goto -> bb583;
    }

    bb567: {
        StorageDead(_1238);
        _1236 = (((*_1237).5: state::oracle::HistoricalOracleData).4: i64);
        StorageLive(_1239);
        _1239 = ((_6.0: state::margin_calculation::MarginContext).2: bool);
        _1234 = StrictOraclePrice::new(move _1235, move _1236, move _1239) -> [return: bb568, unwind: bb616];
    }

    bb568: {
        StorageDead(_1239);
        StorageDead(_1236);
        StorageDead(_1235);
        StorageDead(_1237);
        StorageLive(_1240);
        StorageLive(_1241);
        StorageLive(_1242);
        StorageLive(_1243);
        _1243 = &_1234;
        _1242 = StrictOraclePrice::validate(move _1243) -> [return: bb569, unwind: bb616];
    }

    bb569: {
        StorageDead(_1243);
        _1241 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1242) -> [return: bb570, unwind: bb616];
    }

    bb570: {
        StorageDead(_1242);
        _1244 = discriminant(_1241);
        switchInt(move _1244) -> [0: bb571, 1: bb572, otherwise: bb16];
    }

    bb571: {
        StorageLive(_1248);
        _1248 = ((_1241 as Continue).0: ());
        _1240 = _1248;
        StorageDead(_1248);
        StorageDead(_1241);
        StorageDead(_1240);
        StorageLive(_1249);
        StorageLive(_1250);
        StorageLive(_1251);
        StorageLive(_1252);
        _1252 = &mut _6;
        StorageLive(_1253);
        StorageLive(_1254);
        StorageLive(_1255);
        StorageLive(_1256);
        _1256 = &_1209;
        _1255 = &(*_1256);
        _1254 = <Ref<'_, SpotMarket> as Deref>::deref(move _1255) -> [return: bb574, unwind: bb616];
    }

    bb572: {
        StorageLive(_1245);
        _1245 = ((_1241 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1247);
        _1247 = _1245;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1247) -> [return: bb573, unwind: bb616];
    }

    bb573: {
        StorageDead(_1247);
        StorageDead(_1245);
        StorageDead(_1241);
        StorageDead(_1240);
        goto -> bb582;
    }

    bb574: {
        _1253 = &(*_1254);
        StorageDead(_1255);
        StorageLive(_1257);
        StorageLive(_1258);
        _1258 = &_1234;
        _1257 = &(*_1258);
        _1251 = MarginCalculation::update_fuel_spot_bonus(move _1252, move _1253, const 0_i128, move _1257) -> [return: bb575, unwind: bb616];
    }

    bb575: {
        StorageDead(_1257);
        StorageDead(_1253);
        StorageDead(_1252);
        _1250 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _1251) -> [return: bb576, unwind: bb616];
    }

    bb576: {
        StorageDead(_1251);
        _1259 = discriminant(_1250);
        switchInt(move _1259) -> [0: bb577, 1: bb578, otherwise: bb16];
    }

    bb577: {
        StorageLive(_1263);
        _1263 = ((_1250 as Continue).0: ());
        _1249 = _1263;
        StorageDead(_1263);
        StorageDead(_1258);
        StorageDead(_1256);
        StorageDead(_1254);
        StorageDead(_1250);
        StorageDead(_1249);
        _1188 = const ();
        StorageDead(_1234);
        StorageDead(_1219);
        drop(_1209) -> [return: bb580, unwind: bb636];
    }

    bb578: {
        StorageLive(_1260);
        _1260 = ((_1250 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_1262);
        _1262 = _1260;
        _0 = <std::result::Result<MarginCalculation, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _1262) -> [return: bb579, unwind: bb616];
    }

    bb579: {
        StorageDead(_1262);
        StorageDead(_1260);
        StorageDead(_1258);
        StorageDead(_1256);
        StorageDead(_1254);
        StorageDead(_1250);
        StorageDead(_1249);
        goto -> bb582;
    }

    bb580: {
        StorageDead(_1209);
        StorageDead(_1195);
        StorageDead(_1194);
        StorageDead(_1191);
        StorageDead(_1189);
        StorageDead(_1188);
        _29 = const ();
        goto -> bb545;
    }

    bb581: {
        StorageDead(_1195);
        StorageDead(_1194);
        StorageDead(_1191);
        StorageDead(_1189);
        StorageDead(_1188);
        goto -> bb545;
    }

    bb582: {
        StorageDead(_1234);
        goto -> bb583;
    }

    bb583: {
        StorageDead(_1219);
        drop(_1209) -> [return: bb584, unwind: bb636];
    }

    bb584: {
        StorageDead(_1209);
        StorageDead(_1195);
        StorageDead(_1194);
        StorageDead(_1191);
        StorageDead(_1189);
        StorageDead(_1188);
        StorageDead(_1187);
        StorageDead(_1183);
        StorageDead(_1182);
        StorageDead(_1181);
        goto -> bb614;
    }

    bb585: {
        StorageDead(_1142);
        StorageDead(_1141);
        goto -> bb586;
    }

    bb586: {
        StorageDead(_1116);
        goto -> bb587;
    }

    bb587: {
        StorageDead(_1040);
        StorageDead(_1039);
        StorageDead(_1038);
        StorageDead(_1037);
        StorageDead(_1036);
        goto -> bb588;
    }

    bb588: {
        StorageDead(_1030);
        StorageDead(_996);
        StorageDead(_995);
        goto -> bb590;
    }

    bb589: {
        StorageDead(_1018);
        StorageDead(_1015);
        StorageDead(_1012);
        StorageDead(_1009);
        StorageDead(_1007);
        StorageDead(_1006);
        StorageDead(_1003);
        StorageDead(_998);
        StorageDead(_997);
        goto -> bb590;
    }

    bb590: {
        StorageDead(_987);
        StorageDead(_953);
        StorageDead(_952);
        goto -> bb638;
    }

    bb591: {
        StorageDead(_975);
        StorageDead(_972);
        StorageDead(_969);
        StorageDead(_966);
        StorageDead(_964);
        StorageDead(_963);
        StorageDead(_960);
        StorageDead(_955);
        StorageDead(_954);
        goto -> bb638;
    }

    bb592: {
        _1292 = const false;
        StorageDead(_939);
        goto -> bb593;
    }

    bb593: {
        drop(_869) -> [return: bb594, unwind: bb636];
    }

    bb594: {
        StorageDead(_869);
        StorageDead(_868);
        StorageDead(_863);
        StorageDead(_860);
        StorageDead(_858);
        StorageDead(_857);
        StorageDead(_856);
        StorageDead(_852);
        StorageDead(_851);
        goto -> bb614;
    }

    bb595: {
        StorageDead(_824);
        StorageDead(_820);
        StorageDead(_819);
        goto -> bb596;
    }

    bb596: {
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_446);
        StorageDead(_417);
        StorageDead(_792);
        StorageDead(_789);
        goto -> bb606;
    }

    bb597: {
        StorageDead(_602);
        StorageDead(_598);
        StorageDead(_597);
        goto -> bb598;
    }

    bb598: {
        StorageDead(_570);
        StorageDead(_567);
        StorageDead(_566);
        goto -> bb600;
    }

    bb599: {
        StorageDead(_549);
        StorageDead(_545);
        StorageDead(_544);
        goto -> bb600;
    }

    bb600: {
        StorageDead(_449);
        StorageDead(_448);
        StorageDead(_447);
        StorageDead(_446);
        goto -> bb602;
    }

    bb601: {
        StorageDead(_462);
        StorageDead(_460);
        StorageDead(_458);
        StorageDead(_454);
        StorageDead(_451);
        StorageDead(_450);
        goto -> bb602;
    }

    bb602: {
        StorageDead(_417);
        goto -> bb606;
    }

    bb603: {
        StorageDead(_335);
        goto -> bb604;
    }

    bb604: {
        StorageDead(_281);
        goto -> bb605;
    }

    bb605: {
        StorageDead(_195);
        goto -> bb606;
    }

    bb606: {
        StorageDead(_191);
        goto -> bb607;
    }

    bb607: {
        StorageDead(_176);
        goto -> bb608;
    }

    bb608: {
        StorageDead(_165);
        goto -> bb609;
    }

    bb609: {
        StorageDead(_96);
        StorageDead(_62);
        StorageDead(_61);
        goto -> bb611;
    }

    bb610: {
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb611;
    }

    bb611: {
        drop(_50) -> [return: bb612, unwind: bb636];
    }

    bb612: {
        StorageDead(_50);
        goto -> bb613;
    }

    bb613: {
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb614;
    }

    bb614: {
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_8);
        StorageDead(_6);
        goto -> bb615;
    }

    bb615: {
        return;
    }

    bb616 (cleanup): {
        drop(_1209) -> [return: bb636, unwind terminate(cleanup)];
    }

    bb617 (cleanup): {
        drop(_914) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb618 (cleanup): {
        drop(_895) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb619 (cleanup): {
        drop(_869) -> [return: bb636, unwind terminate(cleanup)];
    }

    bb620 (cleanup): {
        drop(_803) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb621 (cleanup): {
        drop(_705) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb622 (cleanup): {
        drop(_686) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb623 (cleanup): {
        drop(_652) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb624 (cleanup): {
        drop(_633) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb625 (cleanup): {
        drop(_581) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb626 (cleanup): {
        drop(_516) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb627 (cleanup): {
        drop(_497) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb628 (cleanup): {
        drop(_368) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb629 (cleanup): {
        drop(_349) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb630 (cleanup): {
        drop(_304) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb631 (cleanup): {
        drop(_242) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb632 (cleanup): {
        drop(_223) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb633 (cleanup): {
        drop(_140) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb634 (cleanup): {
        drop(_121) -> [return: bb635, unwind terminate(cleanup)];
    }

    bb635 (cleanup): {
        drop(_50) -> [return: bb636, unwind terminate(cleanup)];
    }

    bb636 (cleanup): {
        resume;
    }

    bb637: {
        drop(_939) -> [return: bb592, unwind: bb619];
    }

    bb638: {
        switchInt(_1292) -> [0: bb592, otherwise: bb637];
    }

    bb639 (cleanup): {
        _1309 = discriminant(_1210);
        goto -> bb636;
    }

    bb640 (cleanup): {
        drop(_939) -> [return: bb619, unwind terminate(cleanup)];
    }

    bb641 (cleanup): {
        switchInt(_1292) -> [0: bb619, otherwise: bb640];
    }

    bb642 (cleanup): {
        _1310 = discriminant(_940);
        goto -> bb619;
    }

    bb643 (cleanup): {
        _1311 = discriminant(_870);
        goto -> bb636;
    }

    bb644 (cleanup): {
        _1312 = discriminant(_51);
        goto -> bb636;
    }
}
