// MIR for `log10_iter` after PreCodegen

fn log10_iter(_1: u128) -> u128 {
    debug n => _1;
    let mut _0: u128;
    let mut _2: u128;
    let _4: ();
    let mut _5: ();
    let mut _6: bool;
    let mut _7: u128;
    let mut _8: (u128, bool);
    let mut _9: bool;
    let mut _10: !;
    let _11: ();
    let mut _12: !;
    scope 1 {
        debug result => _2;
        let mut _3: u128;
        scope 2 {
            debug n_copy => _3;
        }
    }

    bb0: {
        StorageLive(_2);
        _2 = const 0_u128;
        StorageLive(_3);
        _3 = _1;
        StorageLive(_4);
        goto -> bb1;
    }

    bb1: {
        StorageLive(_6);
        StorageLive(_7);
        _7 = _3;
        _6 = Ge(move _7, const 10_u128);
        switchInt(move _6) -> [0: bb5, otherwise: bb2];
    }

    bb2: {
        StorageDead(_7);
        _8 = CheckedAdd(_2, const 1_u128);
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_u128) -> [success: bb3, unwind continue];
    }

    bb3: {
        _2 = move (_8.0: u128);
        _9 = Eq(const 10_u128, const 0_u128);
        assert(!move _9, "attempt to divide `{}` by zero", _3) -> [success: bb4, unwind continue];
    }

    bb4: {
        _3 = Div(_3, const 10_u128);
        _5 = const ();
        StorageDead(_6);
        goto -> bb1;
    }

    bb5: {
        StorageDead(_7);
        StorageLive(_11);
        _4 = const ();
        StorageDead(_11);
        StorageDead(_6);
        StorageDead(_4);
        _0 = _2;
        StorageDead(_3);
        StorageDead(_2);
        return;
    }
}
