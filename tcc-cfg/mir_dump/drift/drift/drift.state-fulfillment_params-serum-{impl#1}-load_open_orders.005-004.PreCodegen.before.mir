// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::load_open_orders` before PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:67:1: 67:34>::load_open_orders(_1: &SerumContext<'_, '_>) -> std::result::Result<Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode> {
    debug self => _1;
    let mut _0: std::result::Result<std::cell::Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode>;
    let _2: ();
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _4: std::result::Result<(), error::ErrorCode>;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: ();
    let _9: error::ErrorCode;
    let _10: ();
    let mut _11: &str;
    let _12: &str;
    let mut _13: &std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[&str; 2];
    let _20: &[&str; 2];
    let _21: [&str; 2];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let mut _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: &[core::fmt::rt::Argument<'_>; 1];
    let _25: [core::fmt::rt::Argument<'_>; 1];
    let mut _26: core::fmt::rt::Argument<'_>;
    let mut _27: &error::ErrorCode;
    let _28: &error::ErrorCode;
    let mut _29: error::ErrorCode;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: ();
    let _35: std::cell::Ref<'_, [u8]>;
    let mut _36: std::cell::Ref<'_, &mut [u8]>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, &mut [u8]>>;
    let mut _38: std::result::Result<std::cell::Ref<'_, &mut [u8]>, error::ErrorCode>;
    let mut _39: std::result::Result<std::cell::Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>;
    let mut _40: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _41: {closure@programs/drift/src/state/fulfillment_params/serum.rs:83:26: 83:30};
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: std::cell::Ref<'_, &mut [u8]>;
    let mut _47: {closure@programs/drift/src/state/fulfillment_params/serum.rs:84:13: 84:19};
    let mut _48: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
    let mut _49: std::cell::Ref<'_, [u8]>;
    let mut _51: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _52: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: isize;
    let mut _56: isize;
    let mut _57: isize;
    let mut _58: isize;
    let mut _59: isize;
    scope 1 {
        debug error_code => _9;
        let _16: std::string::String;
        let mut _50: &[&str; 2];
        scope 2 {
            debug res => _16;
        }
    }
    scope 3 {
        debug residual => _31;
        scope 4 {
        }
    }
    scope 5 {
        debug val => _34;
        scope 6 {
        }
    }
    scope 7 {
        debug unpadded_data => _35;
    }
    scope 8 {
        debug residual => _43;
        scope 9 {
        }
    }
    scope 10 {
        debug val => _46;
        scope 11 {
        }
    }

    bb0: {
        _53 = const false;
        _54 = const false;
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _51 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _7 = &(*_51);
        _6 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = Ge(move _6, const 12_usize);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = ();
        _4 = std::result::Result::<(), error::ErrorCode>::Ok(move _8);
        StorageDead(_8);
        goto -> bb10;
    }

    bb3: {
        StorageDead(_6);
        StorageLive(_9);
        _9 = error::ErrorCode::InvalidSerumOpenOrders;
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _50 = const _;
        _20 = &(*_50);
        _19 = &(*_20);
        _18 = move _19 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_19);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_9;
        _27 = &(*_28);
        _26 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _27) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_27);
        _25 = [move _26];
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = move _23 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_23);
        _17 = Arguments::<'_>::new_v1(move _18, move _22) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_22);
        StorageDead(_18);
        _16 = format(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_17);
        StorageDead(_28);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_20);
        _15 = move _16;
        StorageDead(_16);
        _14 = &_15;
        _13 = &(*_14);
        _12 = <String as Deref>::deref(move _13) -> [return: bb7, unwind: bb25];
    }

    bb7: {
        _11 = &(*_12);
        StorageDead(_13);
        _10 = solana_program::log::sol_log(move _11) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        StorageDead(_11);
        drop(_15) -> [return: bb9, unwind: bb26];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_10);
        StorageLive(_29);
        _29 = _9;
        _4 = std::result::Result::<(), error::ErrorCode>::Err(move _29);
        StorageDead(_29);
        StorageDead(_9);
        goto -> bb10;
    }

    bb10: {
        StorageDead(_5);
        _3 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _4) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_4);
        _30 = discriminant(_3);
        switchInt(move _30) -> [0: bb12, 1: bb14, otherwise: bb13];
    }

    bb12: {
        StorageLive(_34);
        _34 = ((_3 as Continue).0: ());
        _2 = _34;
        StorageDead(_34);
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _52 = deref_copy ((*_1).2: &anchor_lang::prelude::AccountInfo<'_>);
        _40 = &(*_52);
        _39 = anchor_lang::prelude::AccountInfo::<'_>::try_borrow_data(move _40) -> [return: bb16, unwind continue];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_33);
        StorageDead(_31);
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb24;
    }

    bb16: {
        StorageDead(_40);
        StorageLive(_41);
        _41 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:83:26: 83:30};
        _38 = std::result::Result::<Ref<'_, &mut [u8]>, anchor_lang::prelude::ProgramError>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:83:26: 83:30}>(move _39, move _41) -> [return: bb17, unwind: bb26];
    }

    bb17: {
        StorageDead(_41);
        StorageDead(_39);
        _37 = <std::result::Result<Ref<'_, &mut [u8]>, error::ErrorCode> as Try>::branch(move _38) -> [return: bb18, unwind: bb26];
    }

    bb18: {
        _54 = const true;
        StorageDead(_38);
        _42 = discriminant(_37);
        switchInt(move _42) -> [0: bb19, 1: bb20, otherwise: bb13];
    }

    bb19: {
        StorageLive(_46);
        _46 = move ((_37 as Continue).0: std::cell::Ref<'_, &mut [u8]>);
        _36 = move _46;
        StorageDead(_46);
        StorageLive(_47);
        _47 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:84:13: 84:19};
        _35 = Ref::<'_, &mut [u8]>::map::<[u8], {closure@programs/drift/src/state/fulfillment_params/serum.rs:84:13: 84:19}>(move _36, move _47) -> [return: bb22, unwind: bb29];
    }

    bb20: {
        StorageLive(_43);
        _43 = ((_37 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        StorageDead(_45);
        StorageDead(_43);
        StorageDead(_36);
        _55 = discriminant(_37);
        _54 = const false;
        StorageDead(_37);
        _53 = const false;
        StorageDead(_35);
        goto -> bb24;
    }

    bb22: {
        _53 = const true;
        StorageDead(_47);
        StorageDead(_36);
        _57 = discriminant(_37);
        _54 = const false;
        StorageDead(_37);
        StorageLive(_48);
        StorageLive(_49);
        _53 = const false;
        _49 = move _35;
        _48 = Ref::<'_, [u8]>::map::<serum_dex::state::OpenOrders, for<'a> fn(&'a [u8]) -> &'a serum_dex::state::OpenOrders {bytemuck::from_bytes::<serum_dex::state::OpenOrders>}>(move _49, bytemuck::from_bytes::<serum_dex::state::OpenOrders>) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        StorageDead(_49);
        _0 = std::result::Result::<Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode>::Ok(move _48);
        StorageDead(_48);
        _53 = const false;
        StorageDead(_35);
        goto -> bb24;
    }

    bb24: {
        return;
    }

    bb25 (cleanup): {
        drop(_15) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb26 (cleanup): {
        resume;
    }

    bb27 (cleanup): {
        drop(_35) -> [return: bb26, unwind terminate(cleanup)];
    }

    bb28 (cleanup): {
        switchInt(_53) -> [0: bb26, otherwise: bb27];
    }

    bb29 (cleanup): {
        _59 = discriminant(_37);
        goto -> bb26;
    }
}
