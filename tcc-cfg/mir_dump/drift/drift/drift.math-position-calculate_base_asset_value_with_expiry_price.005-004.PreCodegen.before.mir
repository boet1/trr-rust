// MIR for `calculate_base_asset_value_with_expiry_price` before PreCodegen

fn calculate_base_asset_value_with_expiry_price(_1: &PerpPosition, _2: i64) -> std::result::Result<i64, error::ErrorCode> {
    debug market_position => _1;
    debug expiry_price => _2;
    let mut _0: std::result::Result<i64, error::ErrorCode>;
    let _3: ();
    let mut _4: bool;
    let mut _5: i64;
    let mut _6: !;
    let mut _7: i128;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _9: std::result::Result<i128, error::ErrorCode>;
    let mut _10: i128;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _12: std::result::Result<i128, error::ErrorCode>;
    let mut _13: i128;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _15: std::result::Result<i128, error::ErrorCode>;
    let mut _16: i64;
    let mut _17: isize;
    let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _21: i128;
    let mut _22: i128;
    let mut _23: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _24: std::result::Result<i128, error::ErrorCode>;
    let mut _25: i64;
    let mut _26: isize;
    let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _30: i128;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: i128;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: i128;
    scope 1 {
        debug residual => _18;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _21;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _27;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _30;
        scope 8 {
        }
    }
    scope 9 {
        debug residual => _32;
        scope 10 {
        }
    }
    scope 11 {
        debug val => _35;
        scope 12 {
        }
    }
    scope 13 {
        debug residual => _37;
        scope 14 {
        }
    }
    scope 15 {
        debug val => _40;
        scope 16 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = ((*_1).1: i64);
        _4 = Eq(move _5, const 0_i64);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        _0 = std::result::Result::<i64, error::ErrorCode>::Ok(const 0_i64);
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb28;
    }

    bb2: {
        StorageDead(_5);
        _3 = const ();
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).1: i64);
        _15 = <i64 as Cast>::cast::<i128>(move _16) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_16);
        _14 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_15);
        _17 = discriminant(_14);
        switchInt(move _17) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_21);
        _21 = ((_14 as Continue).0: i128);
        _13 = _21;
        StorageDead(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = _2;
        _24 = <i64 as Cast>::cast::<i128>(move _25) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_18);
        _18 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_7);
        goto -> bb27;
    }

    bb9: {
        StorageDead(_25);
        _23 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _24) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_24);
        _26 = discriminant(_23);
        switchInt(move _26) -> [0: bb11, 1: bb12, otherwise: bb6];
    }

    bb11: {
        StorageLive(_30);
        _30 = ((_23 as Continue).0: i128);
        _22 = _30;
        StorageDead(_30);
        _12 = <i128 as SafeMath>::safe_mul(move _13, move _22) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_27);
        _27 = ((_23 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_22);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb25;
    }

    bb14: {
        StorageDead(_22);
        StorageDead(_13);
        _11 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _12) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_12);
        _31 = discriminant(_11);
        switchInt(move _31) -> [0: bb16, 1: bb17, otherwise: bb6];
    }

    bb16: {
        StorageLive(_35);
        _35 = ((_11 as Continue).0: i128);
        _10 = _35;
        StorageDead(_35);
        _9 = <i128 as SafeMath>::safe_div(move _10, const _) -> [return: bb19, unwind continue];
    }

    bb17: {
        StorageLive(_32);
        _32 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_34);
        StorageDead(_32);
        goto -> bb25;
    }

    bb19: {
        StorageDead(_10);
        _8 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _9) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_9);
        _36 = discriminant(_8);
        switchInt(move _36) -> [0: bb21, 1: bb22, otherwise: bb6];
    }

    bb21: {
        StorageLive(_40);
        _40 = ((_8 as Continue).0: i128);
        _7 = _40;
        StorageDead(_40);
        _0 = <i128 as Cast>::cast::<i64>(move _7) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_37);
        _37 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<i64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb26;
    }

    bb24: {
        StorageDead(_7);
        StorageDead(_23);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb28;
    }

    bb25: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb26;
    }

    bb26: {
        StorageDead(_7);
        StorageDead(_23);
        goto -> bb27;
    }

    bb27: {
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        goto -> bb28;
    }

    bb28: {
        return;
    }
}
