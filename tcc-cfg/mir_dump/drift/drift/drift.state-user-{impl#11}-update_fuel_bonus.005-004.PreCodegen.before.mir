// MIR for `state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_fuel_bonus` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:1703:1: 1703:15>::update_fuel_bonus(_1: &mut UserStats, _2: &mut User, _3: u32, _4: u32, _5: u32, _6: i64) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug user => _2;
    debug fuel_deposits => _3;
    debug fuel_borrows => _4;
    debug fuel_positions => _5;
    debug now => _6;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _7: ();
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: bool;
    let mut _11: i64;
    let mut _12: u32;
    let mut _13: u32;
    let mut _14: u32;
    let mut _15: u32;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: u32;
    let mut _19: u32;
    let mut _20: u32;
    let mut _21: u32;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _23: std::result::Result<u32, error::ErrorCode>;
    let mut _24: i64;
    let mut _25: isize;
    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _29: u32;
    let mut _30: ();
    scope 1 {
        debug residual => _26;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _29;
        scope 4 {
        }
    }

    bb0: {
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = ((*_2).29: u32);
        _8 = Ne(move _9, const 0_u32);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_9);
        goto -> bb3;
    }

    bb2: {
        StorageDead(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = _6;
        _10 = Gt(move _11, const _);
        switchInt(move _10) -> [0: bb13, otherwise: bb3];
    }

    bb3: {
        StorageDead(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = ((*_1).18: u32);
        StorageLive(_14);
        _14 = _3;
        _12 = core::num::<impl u32>::saturating_add(move _13, move _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_14);
        StorageDead(_13);
        ((*_1).18: u32) = move _12;
        StorageDead(_12);
        StorageLive(_15);
        StorageLive(_16);
        _16 = ((*_1).19: u32);
        StorageLive(_17);
        _17 = _4;
        _15 = core::num::<impl u32>::saturating_add(move _16, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_17);
        StorageDead(_16);
        ((*_1).19: u32) = move _15;
        StorageDead(_15);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).20: u32);
        StorageLive(_20);
        _20 = _5;
        _18 = core::num::<impl u32>::saturating_add(move _19, move _20) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_20);
        StorageDead(_19);
        ((*_1).20: u32) = move _18;
        StorageDead(_18);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _6;
        _23 = <i64 as Cast>::cast::<u32>(move _24) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_24);
        _22 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb9, 1: bb11, otherwise: bb10];
    }

    bb9: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: u32);
        _21 = _29;
        StorageDead(_29);
        ((*_2).29: u32) = move _21;
        StorageDead(_21);
        StorageDead(_22);
        _7 = const ();
        goto -> bb14;
    }

    bb10: {
        unreachable;
    }

    bb11: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_22);
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb15;
    }

    bb13: {
        StorageDead(_11);
        _7 = const ();
        goto -> bb14;
    }

    bb14: {
        StorageDead(_10);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_30);
        _30 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _30);
        StorageDead(_30);
        goto -> bb15;
    }

    bb15: {
        return;
    }
}
