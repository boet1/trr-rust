// MIR for `math::orders::calculate_max_spot_order_size::{closure#1}` before PreCodegen

fn math::orders::calculate_max_spot_order_size::{closure#1}(_1: &{closure@programs/drift/src/math/orders.rs:1144:58: 1144:86}, _2: u32) -> std::result::Result<(u64, u32), error::ErrorCode> {
    debug free_collateral_delta => _2;
    debug free_collateral => (*((*_1).0: &i128));
    debug numerator_scale => (*((*_1).1: &i128));
    debug denominator_scale => (*((*_1).2: &i128));
    debug max_oracle_price => (*((*_1).3: &i64));
    debug spot_market => (*((*_1).4: &std::cell::Ref<'_, state::spot_market::SpotMarket>));
    debug worst_case_token_amount => (*((*_1).5: &i128));
    debug strict_oracle_price => (*((*_1).6: &state::oracle::StrictOraclePrice));
    debug direction => (*((*_1).7: &controller::position::PositionDirection));
    debug user_custom_liability_weight => (*((*_1).8: &u32));
    debug user_custom_asset_weight => (*((*_1).9: &u32));
    let mut _0: std::result::Result<(u64, u32), error::ErrorCode>;
    let _3: u64;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _5: std::result::Result<u64, error::ErrorCode>;
    let mut _6: i128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _8: std::result::Result<i128, error::ErrorCode>;
    let mut _9: i128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _11: std::result::Result<i128, error::ErrorCode>;
    let mut _12: i128;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _14: std::result::Result<i128, error::ErrorCode>;
    let mut _15: i128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _17: std::result::Result<i128, error::ErrorCode>;
    let mut _18: i128;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _20: std::result::Result<i128, error::ErrorCode>;
    let mut _21: i128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _23: std::result::Result<i128, error::ErrorCode>;
    let mut _24: i128;
    let mut _25: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _26: std::result::Result<i128, error::ErrorCode>;
    let mut _27: i128;
    let mut _28: i128;
    let mut _29: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _30: std::result::Result<i128, error::ErrorCode>;
    let mut _31: isize;
    let _32: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _35: i128;
    let mut _36: isize;
    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _40: i128;
    let mut _41: i128;
    let mut _42: isize;
    let _43: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: !;
    let mut _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _46: i128;
    let mut _47: i128;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: i128;
    let mut _53: i128;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _55: std::result::Result<i128, error::ErrorCode>;
    let mut _56: isize;
    let _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: !;
    let mut _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _60: i128;
    let mut _61: isize;
    let _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _65: i128;
    let mut _66: i128;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _68: std::result::Result<i128, error::ErrorCode>;
    let mut _69: u32;
    let mut _70: isize;
    let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _74: i128;
    let mut _75: isize;
    let _76: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _79: i128;
    let mut _80: isize;
    let _81: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: !;
    let mut _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _84: i128;
    let mut _85: i128;
    let mut _86: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _87: std::result::Result<i128, error::ErrorCode>;
    let mut _88: i64;
    let mut _89: isize;
    let _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _91: !;
    let mut _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _93: i128;
    let mut _94: isize;
    let _95: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _96: !;
    let mut _97: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _98: i128;
    let mut _99: isize;
    let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _103: u64;
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u32>;
    let mut _106: std::result::Result<u32, error::ErrorCode>;
    let mut _107: &state::spot_market::SpotMarket;
    let _108: &state::spot_market::SpotMarket;
    let mut _109: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let _110: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _111: u128;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _113: std::result::Result<u128, error::ErrorCode>;
    let mut _114: u128;
    let mut _115: i128;
    let mut _116: u128;
    let mut _117: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _118: std::result::Result<u128, error::ErrorCode>;
    let mut _119: u64;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _125: isize;
    let mut _127: !;
    let mut _128: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _130: &state::oracle::StrictOraclePrice;
    let _131: &state::oracle::StrictOraclePrice;
    let mut _132: controller::position::PositionDirection;
    let mut _133: u32;
    let mut _134: u32;
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _140: (u64, u32);
    let mut _141: u64;
    let mut _142: u32;
    let mut _143: &i128;
    let mut _144: &i128;
    let mut _145: &i128;
    let mut _146: &i64;
    let mut _147: &std::cell::Ref<'_, state::spot_market::SpotMarket>;
    let mut _148: &i128;
    let mut _149: &state::oracle::StrictOraclePrice;
    let mut _150: &controller::position::PositionDirection;
    let mut _151: &u32;
    let mut _152: &u32;
    scope 1 {
        debug new_order_size => _3;
        let _104: u32;
        let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _124: u128;
        let _126: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _129: u128;
        let _136: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _139: u32;
        scope 50 {
            debug new_free_collateral_delta => _104;
        }
        scope 51 {
            debug residual => _121;
            scope 52 {
            }
        }
        scope 53 {
            debug val => _124;
            scope 54 {
            }
        }
        scope 55 {
            debug residual => _126;
            scope 56 {
            }
        }
        scope 57 {
            debug val => _129;
            scope 58 {
            }
        }
        scope 59 {
            debug residual => _136;
            scope 60 {
            }
        }
        scope 61 {
            debug val => _139;
            scope 62 {
            }
        }
    }
    scope 2 {
        debug residual => _32;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _35;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _37;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _40;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _43;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _46;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _49;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _52;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _57;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _60;
        scope 21 {
        }
    }
    scope 22 {
        debug residual => _62;
        scope 23 {
        }
    }
    scope 24 {
        debug val => _65;
        scope 25 {
        }
    }
    scope 26 {
        debug residual => _71;
        scope 27 {
        }
    }
    scope 28 {
        debug val => _74;
        scope 29 {
        }
    }
    scope 30 {
        debug residual => _76;
        scope 31 {
        }
    }
    scope 32 {
        debug val => _79;
        scope 33 {
        }
    }
    scope 34 {
        debug residual => _81;
        scope 35 {
        }
    }
    scope 36 {
        debug val => _84;
        scope 37 {
        }
    }
    scope 38 {
        debug residual => _90;
        scope 39 {
        }
    }
    scope 40 {
        debug val => _93;
        scope 41 {
        }
    }
    scope 42 {
        debug residual => _95;
        scope 43 {
        }
    }
    scope 44 {
        debug val => _98;
        scope 45 {
        }
    }
    scope 46 {
        debug residual => _100;
        scope 47 {
        }
    }
    scope 48 {
        debug val => _103;
        scope 49 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        _143 = deref_copy ((*_1).0: &i128);
        _27 = (*_143);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = <u128 as Cast>::cast::<i128>(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _29 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _30) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_30);
        _31 = discriminant(_29);
        switchInt(move _31) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_35);
        _35 = ((_29 as Continue).0: i128);
        _28 = _35;
        StorageDead(_35);
        _26 = <i128 as SafeMath>::safe_sub(move _27, move _28) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_32);
        _32 = ((_29 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_34);
        _34 = _32;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _34) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        goto -> bb88;
    }

    bb7: {
        StorageDead(_28);
        StorageDead(_27);
        _25 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        _36 = discriminant(_25);
        switchInt(move _36) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_40);
        _40 = ((_25 as Continue).0: i128);
        _24 = _40;
        StorageDead(_40);
        StorageLive(_41);
        _144 = deref_copy ((*_1).1: &i128);
        _41 = (*_144);
        _23 = <i128 as SafeMath>::safe_mul(move _24, move _41) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_37);
        _37 = ((_25 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_39);
        StorageDead(_37);
        goto -> bb88;
    }

    bb12: {
        StorageDead(_41);
        StorageDead(_24);
        _22 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_23);
        _42 = discriminant(_22);
        switchInt(move _42) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_46);
        _46 = ((_22 as Continue).0: i128);
        _21 = _46;
        StorageDead(_46);
        StorageLive(_47);
        _145 = deref_copy ((*_1).2: &i128);
        _47 = (*_145);
        _20 = <i128 as SafeMath>::safe_div(move _21, move _47) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_43);
        _43 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_45);
        _45 = _43;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _45) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_45);
        StorageDead(_43);
        goto -> bb89;
    }

    bb17: {
        StorageDead(_47);
        StorageDead(_21);
        _19 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _20) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_20);
        _48 = discriminant(_19);
        switchInt(move _48) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_52);
        _52 = ((_19 as Continue).0: i128);
        _18 = _52;
        StorageDead(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = <u32 as Cast>::cast::<i128>(const _) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_49);
        _49 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        StorageDead(_49);
        goto -> bb90;
    }

    bb22: {
        _54 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _55) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_55);
        _56 = discriminant(_54);
        switchInt(move _56) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_60);
        _60 = ((_54 as Continue).0: i128);
        _53 = _60;
        StorageDead(_60);
        _17 = <i128 as SafeMath>::safe_mul(move _18, move _53) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_57);
        _57 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_59);
        _59 = _57;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _59) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_59);
        StorageDead(_57);
        StorageDead(_53);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb86;
    }

    bb27: {
        StorageDead(_53);
        StorageDead(_18);
        _16 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_17);
        _61 = discriminant(_16);
        switchInt(move _61) -> [0: bb29, 1: bb30, otherwise: bb4];
    }

    bb29: {
        StorageLive(_65);
        _65 = ((_16 as Continue).0: i128);
        _15 = _65;
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = _2;
        _68 = <u32 as Cast>::cast::<i128>(move _69) -> [return: bb32, unwind continue];
    }

    bb30: {
        StorageLive(_62);
        _62 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_64);
        _64 = _62;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _64) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_64);
        StorageDead(_62);
        goto -> bb86;
    }

    bb32: {
        StorageDead(_69);
        _67 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _68) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_68);
        _70 = discriminant(_67);
        switchInt(move _70) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_74);
        _74 = ((_67 as Continue).0: i128);
        _66 = _74;
        StorageDead(_74);
        _14 = <i128 as SafeMath>::safe_div(move _15, move _66) -> [return: bb37, unwind continue];
    }

    bb35: {
        StorageLive(_71);
        _71 = ((_67 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb36, unwind continue];
    }

    bb36: {
        StorageDead(_73);
        StorageDead(_71);
        StorageDead(_66);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb83;
    }

    bb37: {
        StorageDead(_66);
        StorageDead(_15);
        _13 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _14) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_14);
        _75 = discriminant(_13);
        switchInt(move _75) -> [0: bb39, 1: bb40, otherwise: bb4];
    }

    bb39: {
        StorageLive(_79);
        _79 = ((_13 as Continue).0: i128);
        _12 = _79;
        StorageDead(_79);
        _11 = <i128 as SafeMath>::safe_mul(move _12, const _) -> [return: bb42, unwind continue];
    }

    bb40: {
        StorageLive(_76);
        _76 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_78);
        _78 = _76;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _78) -> [return: bb41, unwind continue];
    }

    bb41: {
        StorageDead(_78);
        StorageDead(_76);
        goto -> bb83;
    }

    bb42: {
        StorageDead(_12);
        _10 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_11);
        _80 = discriminant(_10);
        switchInt(move _80) -> [0: bb44, 1: bb45, otherwise: bb4];
    }

    bb44: {
        StorageLive(_84);
        _84 = ((_10 as Continue).0: i128);
        _9 = _84;
        StorageDead(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _146 = deref_copy ((*_1).3: &i64);
        _88 = (*_146);
        _87 = <i64 as Cast>::cast::<i128>(move _88) -> [return: bb47, unwind continue];
    }

    bb45: {
        StorageLive(_81);
        _81 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_83);
        _83 = _81;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _83) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_83);
        StorageDead(_81);
        goto -> bb84;
    }

    bb47: {
        StorageDead(_88);
        _86 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _87) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_87);
        _89 = discriminant(_86);
        switchInt(move _89) -> [0: bb49, 1: bb50, otherwise: bb4];
    }

    bb49: {
        StorageLive(_93);
        _93 = ((_86 as Continue).0: i128);
        _85 = _93;
        StorageDead(_93);
        _8 = <i128 as SafeMath>::safe_div(move _9, move _85) -> [return: bb52, unwind continue];
    }

    bb50: {
        StorageLive(_90);
        _90 = ((_86 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_92);
        _92 = _90;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _92) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_92);
        StorageDead(_90);
        StorageDead(_85);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb81;
    }

    bb52: {
        StorageDead(_85);
        StorageDead(_9);
        _7 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_8);
        _94 = discriminant(_7);
        switchInt(move _94) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_98);
        _98 = ((_7 as Continue).0: i128);
        _6 = _98;
        StorageDead(_98);
        _5 = <i128 as Cast>::cast::<u64>(move _6) -> [return: bb57, unwind continue];
    }

    bb55: {
        StorageLive(_95);
        _95 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_97);
        _97 = _95;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _97) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_97);
        StorageDead(_95);
        goto -> bb81;
    }

    bb57: {
        StorageDead(_6);
        _4 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _5) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_5);
        _99 = discriminant(_4);
        switchInt(move _99) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_103);
        _103 = ((_4 as Continue).0: u64);
        _3 = _103;
        StorageDead(_103);
        StorageDead(_86);
        StorageDead(_67);
        StorageDead(_54);
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _147 = deref_copy ((*_1).4: &std::cell::Ref<'_, state::spot_market::SpotMarket>);
        _110 = &(*_147);
        _109 = &(*_110);
        _108 = <Ref<'_, SpotMarket> as Deref>::deref(move _109) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_100);
        _100 = ((_4 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_102);
        StorageDead(_100);
        goto -> bb82;
    }

    bb62: {
        _107 = &(*_108);
        StorageDead(_109);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _148 = deref_copy ((*_1).5: &i128);
        _115 = (*_148);
        _114 = core::num::<impl i128>::unsigned_abs(move _115) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = _3;
        _118 = <u64 as Cast>::cast::<u128>(move _119) -> [return: bb64, unwind continue];
    }

    bb64: {
        StorageDead(_119);
        _117 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _118) -> [return: bb65, unwind continue];
    }

    bb65: {
        StorageDead(_118);
        _120 = discriminant(_117);
        switchInt(move _120) -> [0: bb66, 1: bb67, otherwise: bb4];
    }

    bb66: {
        StorageLive(_124);
        _124 = ((_117 as Continue).0: u128);
        _116 = _124;
        StorageDead(_124);
        _113 = <u128 as SafeMath>::safe_add(move _114, move _116) -> [return: bb69, unwind continue];
    }

    bb67: {
        StorageLive(_121);
        _121 = ((_117 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_116);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb79;
    }

    bb69: {
        StorageDead(_116);
        StorageDead(_114);
        _112 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _113) -> [return: bb70, unwind continue];
    }

    bb70: {
        StorageDead(_113);
        _125 = discriminant(_112);
        switchInt(move _125) -> [0: bb71, 1: bb72, otherwise: bb4];
    }

    bb71: {
        StorageLive(_129);
        _129 = ((_112 as Continue).0: u128);
        _111 = _129;
        StorageDead(_129);
        StorageLive(_130);
        StorageLive(_131);
        _149 = deref_copy ((*_1).6: &state::oracle::StrictOraclePrice);
        _131 = &(*_149);
        _130 = &(*_131);
        StorageLive(_132);
        _150 = deref_copy ((*_1).7: &controller::position::PositionDirection);
        _132 = (*_150);
        StorageLive(_133);
        _151 = deref_copy ((*_1).8: &u32);
        _133 = (*_151);
        StorageLive(_134);
        _152 = deref_copy ((*_1).9: &u32);
        _134 = (*_152);
        _106 = calculate_free_collateral_delta_for_spot(move _107, move _111, move _130, move _132, move _133, move _134) -> [return: bb74, unwind continue];
    }

    bb72: {
        StorageLive(_126);
        _126 = ((_112 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_128);
        _128 = _126;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _128) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_128);
        StorageDead(_126);
        goto -> bb79;
    }

    bb74: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_111);
        StorageDead(_107);
        _105 = <std::result::Result<u32, error::ErrorCode> as Try>::branch(move _106) -> [return: bb75, unwind continue];
    }

    bb75: {
        StorageDead(_106);
        _135 = discriminant(_105);
        switchInt(move _135) -> [0: bb76, 1: bb77, otherwise: bb4];
    }

    bb76: {
        StorageLive(_139);
        _139 = ((_105 as Continue).0: u32);
        _104 = _139;
        StorageDead(_139);
        StorageDead(_131);
        StorageDead(_117);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_105);
        StorageLive(_140);
        StorageLive(_141);
        _141 = _3;
        StorageLive(_142);
        _142 = _104;
        _140 = (move _141, move _142);
        StorageDead(_142);
        StorageDead(_141);
        _0 = std::result::Result::<(u64, u32), error::ErrorCode>::Ok(move _140);
        StorageDead(_140);
        StorageDead(_104);
        StorageDead(_3);
        goto -> bb93;
    }

    bb77: {
        StorageLive(_136);
        _136 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_138);
        _138 = _136;
        _0 = <std::result::Result<(u64, u32), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _138) -> [return: bb78, unwind continue];
    }

    bb78: {
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_131);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_111);
        StorageDead(_107);
        StorageDead(_106);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_117);
        StorageDead(_112);
        StorageDead(_110);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb92;
    }

    bb81: {
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb82;
    }

    bb82: {
        StorageDead(_86);
        goto -> bb85;
    }

    bb83: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb84;
    }

    bb84: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb85;
    }

    bb85: {
        StorageDead(_67);
        goto -> bb87;
    }

    bb86: {
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb87;
    }

    bb87: {
        StorageDead(_54);
        goto -> bb91;
    }

    bb88: {
        StorageDead(_24);
        StorageDead(_23);
        goto -> bb89;
    }

    bb89: {
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb90;
    }

    bb90: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_11);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_29);
        StorageDead(_25);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_4);
        goto -> bb92;
    }

    bb92: {
        StorageDead(_3);
        goto -> bb93;
    }

    bb93: {
        return;
    }
}
