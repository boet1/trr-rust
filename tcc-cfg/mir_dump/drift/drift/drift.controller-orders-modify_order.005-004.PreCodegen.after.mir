// MIR for `controller::orders::modify_order` after PreCodegen

fn controller::orders::modify_order(_1: ModifyOrderId, _2: order_params::ModifyOrderParams, _3: &anchor_lang::prelude::AccountLoader<'_, User>, _4: &state::state::State, _5: &PerpMarketMap<'_>, _6: &SpotMarketMap<'_>, _7: &mut OracleMap<'_>, _8: &anchor_lang::prelude::Clock) -> std::result::Result<(), error::ErrorCode> {
    debug order_id => _1;
    debug modify_order_params => _2;
    debug user_loader => _3;
    debug state => _4;
    debug perp_market_map => _5;
    debug spot_market_map => _6;
    debug oracle_map => _7;
    debug clock => _8;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _9: anchor_lang::prelude::Pubkey;
    let mut _10: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _12: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _13: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _14: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _15: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _16: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _17: isize;
    let mut _19: !;
    let mut _20: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _23: isize;
    let mut _25: std::result::Result<usize, error::ErrorCode>;
    let mut _26: &state::user::User;
    let _27: &state::user::User;
    let mut _28: &std::cell::RefMut<'_, state::user::User>;
    let mut _29: u8;
    let mut _30: isize;
    let _33: ();
    let mut _34: &str;
    let _35: &str;
    let mut _36: &std::string::String;
    let _37: &std::string::String;
    let _38: std::string::String;
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[&str; 2];
    let _43: &[&str; 2];
    let _44: [&str; 2];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let mut _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let mut _50: &u8;
    let _51: &u8;
    let mut _52: bool;
    let mut _53: &state::order_params::ModifyOrderParams;
    let mut _54: !;
    let mut _55: error::ErrorCode;
    let mut _56: !;
    let mut _57: ();
    let mut _59: std::result::Result<usize, error::ErrorCode>;
    let mut _60: &state::user::User;
    let _61: &state::user::User;
    let mut _62: &std::cell::RefMut<'_, state::user::User>;
    let mut _63: u32;
    let mut _64: isize;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let mut _70: &std::string::String;
    let _71: &std::string::String;
    let _72: std::string::String;
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[&str; 2];
    let _77: &[&str; 2];
    let _78: [&str; 2];
    let mut _79: &[core::fmt::rt::Argument<'_>];
    let mut _80: &[core::fmt::rt::Argument<'_>; 1];
    let _81: &[core::fmt::rt::Argument<'_>; 1];
    let _82: [core::fmt::rt::Argument<'_>; 1];
    let mut _83: core::fmt::rt::Argument<'_>;
    let mut _84: &u32;
    let _85: &u32;
    let mut _86: bool;
    let mut _87: &state::order_params::ModifyOrderParams;
    let mut _88: !;
    let mut _89: error::ErrorCode;
    let mut _90: !;
    let mut _91: ();
    let mut _93: &state::user::User;
    let mut _94: &std::cell::RefMut<'_, state::user::User>;
    let _95: usize;
    let mut _96: usize;
    let mut _97: bool;
    let _98: ();
    let mut _99: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _100: std::result::Result<(), error::ErrorCode>;
    let mut _101: usize;
    let mut _102: &mut state::user::User;
    let mut _103: &mut state::user::User;
    let mut _104: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _105: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _106: &anchor_lang::prelude::Pubkey;
    let _107: &anchor_lang::prelude::Pubkey;
    let mut _108: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _109: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _110: &mut state::oracle_map::OracleMap<'_>;
    let mut _111: i64;
    let mut _112: u64;
    let mut _113: state::events::OrderActionExplanation;
    let mut _114: std::option::Option<&anchor_lang::prelude::Pubkey>;
    let mut _115: isize;
    let mut _117: !;
    let mut _118: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _120: ();
    let mut _121: &mut state::user::User;
    let mut _122: &mut state::user::User;
    let mut _123: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _124: u64;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<state::order_params::OrderParams>>;
    let mut _127: std::result::Result<std::option::Option<state::order_params::OrderParams>, error::ErrorCode>;
    let mut _128: &state::user::Order;
    let _129: &state::user::Order;
    let mut _130: &state::order_params::ModifyOrderParams;
    let _131: &state::order_params::ModifyOrderParams;
    let mut _132: isize;
    let mut _134: !;
    let mut _135: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _137: ();
    let mut _138: isize;
    let mut _140: bool;
    let mut _141: &state::user::MarketType;
    let mut _142: &state::user::MarketType;
    let _143: state::user::MarketType;
    let _144: ();
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _146: std::result::Result<(), error::ErrorCode>;
    let mut _147: &state::state::State;
    let mut _148: &mut state::user::User;
    let mut _149: &mut state::user::User;
    let mut _150: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _151: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _152: anchor_lang::prelude::Pubkey;
    let mut _153: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _154: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _155: &mut state::oracle_map::OracleMap<'_>;
    let mut _156: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _157: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let _158: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
    let mut _159: &anchor_lang::prelude::Clock;
    let mut _160: state::order_params::OrderParams;
    let mut _161: state::order_params::PlaceOrderOptions;
    let mut _162: isize;
    let mut _164: !;
    let mut _165: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _167: ();
    let mut _168: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _169: std::result::Result<(), error::ErrorCode>;
    let mut _170: &state::state::State;
    let mut _171: &mut state::user::User;
    let mut _172: &mut state::user::User;
    let mut _173: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _174: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _175: anchor_lang::prelude::Pubkey;
    let mut _176: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _177: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _178: &mut state::oracle_map::OracleMap<'_>;
    let mut _179: &anchor_lang::prelude::Clock;
    let mut _180: state::order_params::OrderParams;
    let mut _181: state::order_params::PlaceOrderOptions;
    let mut _182: isize;
    let mut _184: !;
    let mut _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _187: ();
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: isize;
    scope 1 {
        debug user_key => _9;
        let mut _11: std::cell::RefMut<'_, state::user::User>;
        let _18: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _21: std::cell::RefMut<'_, state::user::User>;
        scope 2 {
            debug user => _11;
            let _22: usize;
            let _24: u8;
            let _58: u32;
            scope 7 {
                debug order_index => _22;
                let _92: state::user::Order;
                scope 16 {
                    debug existing_order => _92;
                    let _116: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _119: ();
                    let _125: std::option::Option<state::order_params::OrderParams>;
                    let _133: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _136: std::option::Option<state::order_params::OrderParams>;
                    scope 17 {
                        debug residual => _116;
                        scope 18 {
                        }
                    }
                    scope 19 {
                        debug val => _119;
                        scope 20 {
                        }
                    }
                    scope 21 {
                        debug order_params => _125;
                        scope 26 {
                            debug order_params => _139;
                            let _139: state::order_params::OrderParams;
                            let _163: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _166: ();
                            let _183: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _186: ();
                            let mut _189: &std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::high_leverage_mode_config::HighLeverageModeConfig>>;
                            let mut _190: &state::user::MarketType;
                            scope 27 {
                                debug residual => _163;
                                scope 28 {
                                }
                            }
                            scope 29 {
                                debug val => _166;
                                scope 30 {
                                }
                            }
                            scope 31 {
                                debug residual => _183;
                                scope 32 {
                                }
                            }
                            scope 33 {
                                debug val => _186;
                                scope 34 {
                                }
                            }
                        }
                    }
                    scope 22 {
                        debug residual => _133;
                        scope 23 {
                        }
                    }
                    scope 24 {
                        debug val => _136;
                        scope 25 {
                        }
                    }
                }
            }
            scope 8 {
                debug user_order_id => _24;
                let _31: usize;
                let _32: error::ErrorCode;
                scope 9 {
                    debug order_index => _31;
                }
                scope 10 {
                    debug e => _32;
                    let _39: std::string::String;
                    let mut _191: &[&str; 2];
                    scope 11 {
                        debug res => _39;
                    }
                }
            }
            scope 12 {
                debug order_id => _58;
                let _65: usize;
                let _66: error::ErrorCode;
                scope 13 {
                    debug order_index => _65;
                }
                scope 14 {
                    debug e => _66;
                    let _73: std::string::String;
                    let mut _188: &[&str; 2];
                    scope 15 {
                        debug res => _73;
                    }
                }
            }
        }
        scope 3 {
            debug residual => _18;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _21;
            scope 6 {
            }
        }
    }

    bb0: {
        StorageLive(_9);
        StorageLive(_10);
        _10 = &(*_3);
        _9 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        _15 = &(*_3);
        _14 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _15) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_15);
        StorageLive(_16);
        _16 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _13 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _14, move _16) -> [return: bb3, unwind: bb86];
    }

    bb3: {
        StorageDead(_16);
        StorageDead(_14);
        _12 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _13) -> [return: bb4, unwind: bb86];
    }

    bb4: {
        StorageDead(_13);
        _17 = discriminant(_12);
        switchInt(move _17) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_21);
        _21 = move ((_12 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _11 = move _21;
        StorageDead(_21);
        _194 = discriminant(_12);
        StorageDead(_12);
        StorageLive(_22);
        _23 = discriminant(_1);
        switchInt(move _23) -> [0: bb10, 1: bb9, otherwise: bb6];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_18);
        _18 = ((_12 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_20);
        _20 = _18;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _20) -> [return: bb8, unwind: bb87];
    }

    bb8: {
        StorageDead(_20);
        StorageDead(_18);
        _192 = discriminant(_12);
        StorageDead(_12);
        goto -> bb81;
    }

    bb9: {
        StorageLive(_58);
        _58 = ((_1 as OrderId).0: u32);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &_11;
        _61 = <RefMut<'_, User> as Deref>::deref(move _62) -> [return: bb24, unwind: bb85];
    }

    bb10: {
        StorageLive(_24);
        _24 = ((_1 as UserOrderId).0: u8);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        _28 = &_11;
        _27 = <RefMut<'_, User> as Deref>::deref(move _28) -> [return: bb11, unwind: bb85];
    }

    bb11: {
        _26 = &(*_27);
        StorageDead(_28);
        StorageLive(_29);
        _29 = _24;
        _25 = User::get_order_index_by_user_order_id(move _26, move _29) -> [return: bb12, unwind: bb85];
    }

    bb12: {
        StorageDead(_29);
        StorageDead(_26);
        _30 = discriminant(_25);
        switchInt(move _30) -> [0: bb14, 1: bb13, otherwise: bb6];
    }

    bb13: {
        StorageLive(_32);
        _32 = ((_25 as Err).0: error::ErrorCode);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _191 = const _;
        _43 = &(*_191);
        _42 = &(*_43);
        _41 = move _42 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_42);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_24;
        _50 = &(*_51);
        _49 = core::fmt::rt::Argument::<'_>::new_display::<u8>(move _50) -> [return: bb15, unwind: bb85];
    }

    bb14: {
        StorageLive(_31);
        _31 = ((_25 as Ok).0: usize);
        _22 = _31;
        StorageDead(_31);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb37;
    }

    bb15: {
        StorageDead(_50);
        _48 = [move _49];
        StorageDead(_49);
        _47 = &_48;
        _46 = &(*_47);
        _45 = move _46 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_46);
        _40 = Arguments::<'_>::new_v1(move _41, move _45) -> [return: bb16, unwind: bb85];
    }

    bb16: {
        StorageDead(_45);
        StorageDead(_41);
        _39 = format(move _40) -> [return: bb17, unwind: bb85];
    }

    bb17: {
        StorageDead(_40);
        StorageDead(_51);
        StorageDead(_48);
        StorageDead(_47);
        StorageDead(_43);
        _38 = move _39;
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = <String as Deref>::deref(move _36) -> [return: bb18, unwind: bb84];
    }

    bb18: {
        _34 = &(*_35);
        StorageDead(_36);
        _33 = solana_program::log::sol_log(move _34) -> [return: bb19, unwind: bb84];
    }

    bb19: {
        StorageDead(_34);
        drop(_38) -> [return: bb20, unwind: bb85];
    }

    bb20: {
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_35);
        StorageDead(_33);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &_2;
        _52 = order_params::ModifyOrderParams::must_modify(move _53) -> [return: bb21, unwind: bb85];
    }

    bb21: {
        switchInt(move _52) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        StorageDead(_53);
        StorageLive(_55);
        _55 = _32;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _55);
        StorageDead(_55);
        goto -> bb79;
    }

    bb23: {
        StorageDead(_53);
        StorageLive(_57);
        _57 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _57);
        StorageDead(_57);
        goto -> bb79;
    }

    bb24: {
        _60 = &(*_61);
        StorageDead(_62);
        StorageLive(_63);
        _63 = _58;
        _59 = User::get_order_index(move _60, move _63) -> [return: bb25, unwind: bb85];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_60);
        _64 = discriminant(_59);
        switchInt(move _64) -> [0: bb27, 1: bb26, otherwise: bb6];
    }

    bb26: {
        StorageLive(_66);
        _66 = ((_59 as Err).0: error::ErrorCode);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        _188 = const _;
        _77 = &(*_188);
        _76 = &(*_77);
        _75 = move _76 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_76);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &_58;
        _84 = &(*_85);
        _83 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _84) -> [return: bb28, unwind: bb85];
    }

    bb27: {
        StorageLive(_65);
        _65 = ((_59 as Ok).0: usize);
        _22 = _65;
        StorageDead(_65);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb37;
    }

    bb28: {
        StorageDead(_84);
        _82 = [move _83];
        StorageDead(_83);
        _81 = &_82;
        _80 = &(*_81);
        _79 = move _80 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_80);
        _74 = Arguments::<'_>::new_v1(move _75, move _79) -> [return: bb29, unwind: bb85];
    }

    bb29: {
        StorageDead(_79);
        StorageDead(_75);
        _73 = format(move _74) -> [return: bb30, unwind: bb85];
    }

    bb30: {
        StorageDead(_74);
        StorageDead(_85);
        StorageDead(_82);
        StorageDead(_81);
        StorageDead(_77);
        _72 = move _73;
        StorageDead(_73);
        _71 = &_72;
        _70 = &(*_71);
        _69 = <String as Deref>::deref(move _70) -> [return: bb31, unwind: bb83];
    }

    bb31: {
        _68 = &(*_69);
        StorageDead(_70);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb32, unwind: bb83];
    }

    bb32: {
        StorageDead(_68);
        drop(_72) -> [return: bb33, unwind: bb85];
    }

    bb33: {
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_69);
        StorageDead(_67);
        StorageLive(_86);
        StorageLive(_87);
        _87 = &_2;
        _86 = order_params::ModifyOrderParams::must_modify(move _87) -> [return: bb34, unwind: bb85];
    }

    bb34: {
        switchInt(move _86) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        StorageDead(_87);
        StorageLive(_89);
        _89 = _66;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _89);
        StorageDead(_89);
        goto -> bb78;
    }

    bb36: {
        StorageDead(_87);
        StorageLive(_91);
        _91 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _91);
        StorageDead(_91);
        goto -> bb78;
    }

    bb37: {
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        _94 = &_11;
        _93 = <RefMut<'_, User> as Deref>::deref(move _94) -> [return: bb38, unwind: bb85];
    }

    bb38: {
        StorageDead(_94);
        StorageLive(_95);
        _95 = _22;
        _96 = Len(((*_93).5: [state::user::Order; 32]));
        _97 = Lt(_95, _96);
        assert(move _97, "index out of bounds: the length is {} but the index is {}", move _96, _95) -> [success: bb39, unwind: bb85];
    }

    bb39: {
        _92 = ((*_93).5: [state::user::Order; 32])[_95];
        StorageDead(_95);
        StorageDead(_93);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        _101 = _22;
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = &mut _11;
        _104 = &mut (*_105);
        _103 = <RefMut<'_, User> as DerefMut>::deref_mut(move _104) -> [return: bb40, unwind: bb85];
    }

    bb40: {
        _102 = &mut (*_103);
        StorageDead(_104);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_9;
        _106 = &(*_107);
        StorageLive(_108);
        _108 = &(*_5);
        StorageLive(_109);
        _109 = &(*_6);
        StorageLive(_110);
        _110 = &mut (*_7);
        StorageLive(_111);
        _111 = ((*_8).4: i64);
        StorageLive(_112);
        _112 = ((*_8).0: u64);
        StorageLive(_113);
        _113 = OrderActionExplanation::None;
        StorageLive(_114);
        _114 = Option::<&anchor_lang::prelude::Pubkey>::None;
        _100 = controller::orders::cancel_order(move _101, move _102, move _106, move _108, move _109, move _110, move _111, move _112, move _113, move _114, const 0_u64, const false) -> [return: bb41, unwind: bb85];
    }

    bb41: {
        StorageDead(_114);
        StorageDead(_113);
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_110);
        StorageDead(_109);
        StorageDead(_108);
        StorageDead(_106);
        StorageDead(_102);
        StorageDead(_101);
        _99 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _100) -> [return: bb42, unwind: bb85];
    }

    bb42: {
        StorageDead(_100);
        _115 = discriminant(_99);
        switchInt(move _115) -> [0: bb43, 1: bb44, otherwise: bb6];
    }

    bb43: {
        StorageLive(_119);
        _119 = ((_99 as Continue).0: ());
        _98 = _119;
        StorageDead(_119);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_98);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        _123 = &mut _11;
        _122 = <RefMut<'_, User> as DerefMut>::deref_mut(move _123) -> [return: bb46, unwind: bb85];
    }

    bb44: {
        StorageLive(_116);
        _116 = ((_99 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_118);
        _118 = _116;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _118) -> [return: bb45, unwind: bb85];
    }

    bb45: {
        StorageDead(_118);
        StorageDead(_116);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageDead(_99);
        StorageDead(_98);
        goto -> bb77;
    }

    bb46: {
        _121 = &mut (*_122);
        StorageDead(_123);
        StorageLive(_124);
        _124 = ((*_8).0: u64);
        _120 = User::update_last_active_slot(move _121, move _124) -> [return: bb47, unwind: bb85];
    }

    bb47: {
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_122);
        StorageDead(_120);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &_92;
        _128 = &(*_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_2;
        _130 = &(*_131);
        _127 = merge_modify_order_params_with_existing_order(move _128, move _130) -> [return: bb48, unwind: bb85];
    }

    bb48: {
        StorageDead(_130);
        StorageDead(_128);
        _126 = <std::result::Result<Option<order_params::OrderParams>, error::ErrorCode> as Try>::branch(move _127) -> [return: bb49, unwind: bb85];
    }

    bb49: {
        StorageDead(_127);
        _132 = discriminant(_126);
        switchInt(move _132) -> [0: bb50, 1: bb51, otherwise: bb6];
    }

    bb50: {
        StorageLive(_136);
        _136 = ((_126 as Continue).0: std::option::Option<state::order_params::OrderParams>);
        _125 = _136;
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_126);
        StorageLive(_137);
        _138 = discriminant(_125);
        switchInt(move _138) -> [1: bb54, otherwise: bb53];
    }

    bb51: {
        StorageLive(_133);
        _133 = ((_126 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_135);
        _135 = _133;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _135) -> [return: bb52, unwind: bb85];
    }

    bb52: {
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_129);
        StorageDead(_126);
        goto -> bb76;
    }

    bb53: {
        _137 = const ();
        goto -> bb73;
    }

    bb54: {
        StorageLive(_139);
        _139 = ((_125 as Some).0: state::order_params::OrderParams);
        StorageLive(_140);
        StorageLive(_141);
        _141 = &(_139.1: state::user::MarketType);
        StorageLive(_142);
        _190 = const _;
        _142 = &(*_190);
        _140 = <state::user::MarketType as PartialEq>::eq(move _141, move _142) -> [return: bb55, unwind: bb85];
    }

    bb55: {
        switchInt(move _140) -> [0: bb64, otherwise: bb56];
    }

    bb56: {
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &(*_4);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        _151 = &mut _11;
        _150 = &mut (*_151);
        _149 = <RefMut<'_, User> as DerefMut>::deref_mut(move _150) -> [return: bb57, unwind: bb85];
    }

    bb57: {
        _148 = &mut (*_149);
        StorageDead(_150);
        StorageLive(_152);
        _152 = _9;
        StorageLive(_153);
        _153 = &(*_5);
        StorageLive(_154);
        _154 = &(*_6);
        StorageLive(_155);
        _155 = &mut (*_7);
        StorageLive(_156);
        StorageLive(_157);
        _189 = const _;
        _157 = &(*_189);
        _156 = &(*_157);
        StorageLive(_159);
        _159 = &(*_8);
        StorageLive(_160);
        _160 = _139;
        StorageLive(_161);
        _161 = <PlaceOrderOptions as Default>::default() -> [return: bb58, unwind: bb85];
    }

    bb58: {
        _146 = controller::orders::place_perp_order(move _147, move _148, move _152, move _153, move _154, move _155, move _156, move _159, move _160, move _161) -> [return: bb59, unwind: bb85];
    }

    bb59: {
        StorageDead(_161);
        StorageDead(_160);
        StorageDead(_159);
        StorageDead(_156);
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_152);
        StorageDead(_148);
        StorageDead(_147);
        _145 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _146) -> [return: bb60, unwind: bb85];
    }

    bb60: {
        StorageDead(_146);
        _162 = discriminant(_145);
        switchInt(move _162) -> [0: bb61, 1: bb62, otherwise: bb6];
    }

    bb61: {
        StorageLive(_166);
        _166 = ((_145 as Continue).0: ());
        _144 = _166;
        StorageDead(_166);
        StorageDead(_157);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_145);
        StorageDead(_144);
        _137 = const ();
        goto -> bb72;
    }

    bb62: {
        StorageLive(_163);
        _163 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_165);
        _165 = _163;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _165) -> [return: bb63, unwind: bb85];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_163);
        StorageDead(_157);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb75;
    }

    bb64: {
        StorageDead(_142);
        StorageDead(_141);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = &(*_4);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &mut _11;
        _173 = &mut (*_174);
        _172 = <RefMut<'_, User> as DerefMut>::deref_mut(move _173) -> [return: bb65, unwind: bb85];
    }

    bb65: {
        _171 = &mut (*_172);
        StorageDead(_173);
        StorageLive(_175);
        _175 = _9;
        StorageLive(_176);
        _176 = &(*_5);
        StorageLive(_177);
        _177 = &(*_6);
        StorageLive(_178);
        _178 = &mut (*_7);
        StorageLive(_179);
        _179 = &(*_8);
        StorageLive(_180);
        _180 = _139;
        StorageLive(_181);
        _181 = <PlaceOrderOptions as Default>::default() -> [return: bb66, unwind: bb85];
    }

    bb66: {
        _169 = controller::orders::place_spot_order(move _170, move _171, move _175, move _176, move _177, move _178, move _179, move _180, move _181) -> [return: bb67, unwind: bb85];
    }

    bb67: {
        StorageDead(_181);
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageDead(_171);
        StorageDead(_170);
        _168 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _169) -> [return: bb68, unwind: bb85];
    }

    bb68: {
        StorageDead(_169);
        _182 = discriminant(_168);
        switchInt(move _182) -> [0: bb69, 1: bb70, otherwise: bb6];
    }

    bb69: {
        StorageLive(_186);
        _186 = ((_168 as Continue).0: ());
        _167 = _186;
        StorageDead(_186);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_168);
        StorageDead(_167);
        _137 = const ();
        goto -> bb72;
    }

    bb70: {
        StorageLive(_183);
        _183 = ((_168 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_185);
        _185 = _183;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _185) -> [return: bb71, unwind: bb85];
    }

    bb71: {
        StorageDead(_185);
        StorageDead(_183);
        StorageDead(_174);
        StorageDead(_172);
        StorageDead(_168);
        StorageDead(_167);
        goto -> bb75;
    }

    bb72: {
        StorageDead(_140);
        StorageDead(_139);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_137);
        StorageLive(_187);
        _187 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _187);
        StorageDead(_187);
        StorageDead(_125);
        StorageDead(_92);
        StorageDead(_22);
        drop(_11) -> [return: bb74, unwind: bb86];
    }

    bb74: {
        StorageDead(_11);
        StorageDead(_9);
        goto -> bb82;
    }

    bb75: {
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_137);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_125);
        goto -> bb77;
    }

    bb77: {
        StorageDead(_92);
        goto -> bb80;
    }

    bb78: {
        StorageDead(_86);
        StorageDead(_66);
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_58);
        goto -> bb80;
    }

    bb79: {
        StorageDead(_52);
        StorageDead(_32);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb80;
    }

    bb80: {
        StorageDead(_22);
        drop(_11) -> [return: bb81, unwind: bb86];
    }

    bb81: {
        StorageDead(_11);
        StorageDead(_9);
        goto -> bb82;
    }

    bb82: {
        return;
    }

    bb83 (cleanup): {
        drop(_72) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_38) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_11) -> [return: bb86, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        resume;
    }

    bb87 (cleanup): {
        _196 = discriminant(_12);
        goto -> bb86;
    }
}
