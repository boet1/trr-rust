digraph Mir_0_13770 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn &lt;&lt;instructions::user::Swap&lt;'info&gt; as anchor_lang::Accounts&lt;'info, SwapBumps&gt;&gt;::try_accounts::__Args as BorshDeserialize&gt;::deserialize_reader(_1: &amp;ReErased mut R/#0) -&gt; std::result::Result&lt;&lt;instructions::user::Swap&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::user::SwapBumps&gt;&gt;::try_accounts::__Args, std::io::Error&gt;<br align="left"/>let mut _2: &lt;instructions::user::Swap&lt;'info&gt; as anchor_lang::Accounts&lt;'info, instructions::user::SwapBumps&gt;&gt;::try_accounts::__Args;<br align="left"/>let mut _3: u16;<br align="left"/>let mut _4: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;, u16&gt;;<br align="left"/>let mut _5: std::result::Result&lt;u16, std::io::Error&gt;;<br align="left"/>let mut _6: &amp;ReErased mut R/#0;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;;<br align="left"/>let mut _9: !;<br align="left"/>let mut _10: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;;<br align="left"/>let _11: u16;<br align="left"/>let mut _12: u16;<br align="left"/>let mut _13: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;, u16&gt;;<br align="left"/>let mut _14: std::result::Result&lt;u16, std::io::Error&gt;;<br align="left"/>let mut _15: &amp;ReErased mut R/#0;<br align="left"/>let mut _16: isize;<br align="left"/>let _17: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;;<br align="left"/>let mut _18: !;<br align="left"/>let mut _19: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;;<br align="left"/>let _20: u16;<br align="left"/>let mut _21: bool;<br align="left"/>let mut _22: isize;<br align="left"/>let mut _23: isize;<br align="left"/>let mut _24: isize;<br align="left"/>let mut _25: isize;<br align="left"/>let mut _26: isize;<br align="left"/>let mut _27: isize;<br align="left"/>let mut _28: isize;<br align="left"/>let mut _29: isize;<br align="left"/>let mut _30: isize;<br align="left"/>let mut _31: isize;<br align="left"/>debug reader =&gt; _1;<br align="left"/>debug residual =&gt; _8;<br align="left"/>debug val =&gt; _11;<br align="left"/>debug residual =&gt; _17;<br align="left"/>debug val =&gt; _20;<br align="left"/>>;
    bb0__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">_21 = const false<br/>StorageLive(_2)<br/>StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_5 = &lt;u16 as BorshDeserialize&gt;::deserialize_reader::&lt;R&gt;(move _6)</td></tr></table>>];
    bb1__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">_4 = &lt;std::result::Result&lt;u16, std::io::Error&gt; as Try&gt;::branch(move _5)</td></tr></table>>];
    bb2__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_21 = const true<br/>StorageDead(_5)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb3__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_11)<br/>_11 = ((_4 as Continue).0: u16)<br/>_3 = _11<br/>StorageDead(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>_15 = &amp;mut (*_1)<br/></td></tr><tr><td align="left">_14 = &lt;u16 as BorshDeserialize&gt;::deserialize_reader::&lt;R&gt;(move _15)</td></tr></table>>];
    bb4__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = move ((_4 as Break).0: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;)<br/>StorageLive(_10)<br/>_10 = move _8<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;&lt;instructions::user::Swap&lt;'info&gt; as anchor_lang::Accounts&lt;'info, SwapBumps&gt;&gt;::try_accounts::__Args, std::io::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, std::io::Error&gt;&gt;&gt;::from_residual(move _10)</td></tr></table>>];
    bb6__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/></td></tr><tr><td align="left">_13 = &lt;std::result::Result&lt;u16, std::io::Error&gt; as Try&gt;::branch(move _14)</td></tr></table>>];
    bb8__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>_16 = discriminant(_13)<br/></td></tr><tr><td align="left">switchInt(move _16)</td></tr></table>>];
    bb9__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_20)<br/>_20 = ((_13 as Continue).0: u16)<br/>_12 = _20<br/>StorageDead(_20)<br/>_2 = &lt;instructions::user::Swap&lt;'info&gt; as anchor_lang::Accounts&lt;'info, SwapBumps&gt;&gt;::try_accounts::__Args { in_market_index: move _3, out_market_index: move _12 }<br/>StorageDead(_12)<br/>StorageDead(_3)<br/>_0 = std::result::Result::&lt;&lt;instructions::user::Swap&lt;'info&gt; as anchor_lang::Accounts&lt;'info, SwapBumps&gt;&gt;::try_accounts::__Args, std::io::Error&gt;::Ok(move _2)<br/>StorageDead(_2)<br/>_22 = discriminant(_13)<br/>StorageDead(_13)<br/>_24 = discriminant(_4)<br/>_21 = const false<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = move ((_13 as Break).0: std::result::Result&lt;std::convert::Infallible, std::io::Error&gt;)<br/>StorageLive(_19)<br/>_19 = move _17<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;&lt;instructions::user::Swap&lt;'info&gt; as anchor_lang::Accounts&lt;'info, SwapBumps&gt;&gt;::try_accounts::__Args, std::io::Error&gt; as FromResidual&lt;std::result::Result&lt;Infallible, std::io::Error&gt;&gt;&gt;::from_residual(move _19)</td></tr></table>>];
    bb11__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>StorageDead(_17)<br/>StorageDead(_12)<br/>StorageDead(_3)<br/>StorageDead(_2)<br/>_26 = discriminant(_13)<br/>StorageDead(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb13__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">13 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb14__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">_28 = discriminant(_4)<br/>_21 = const false<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">15 (cleanup)</td></tr><tr><td align="left" balign="left">_30 = discriminant(_13)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb16__0_13770 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">16 (cleanup)</td></tr><tr><td align="left" balign="left">_31 = discriminant(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb0__0_13770 -> bb1__0_13770 [label="return"];
    bb1__0_13770 -> bb2__0_13770 [label="return"];
    bb1__0_13770 -> bb13__0_13770 [label="unwind"];
    bb2__0_13770 -> bb3__0_13770 [label="0"];
    bb2__0_13770 -> bb5__0_13770 [label="1"];
    bb2__0_13770 -> bb4__0_13770 [label="otherwise"];
    bb3__0_13770 -> bb7__0_13770 [label="return"];
    bb3__0_13770 -> bb16__0_13770 [label="unwind"];
    bb5__0_13770 -> bb6__0_13770 [label="return"];
    bb5__0_13770 -> bb16__0_13770 [label="unwind"];
    bb6__0_13770 -> bb14__0_13770 [label=""];
    bb7__0_13770 -> bb8__0_13770 [label="return"];
    bb7__0_13770 -> bb16__0_13770 [label="unwind"];
    bb8__0_13770 -> bb9__0_13770 [label="0"];
    bb8__0_13770 -> bb10__0_13770 [label="1"];
    bb8__0_13770 -> bb4__0_13770 [label="otherwise"];
    bb9__0_13770 -> bb12__0_13770 [label=""];
    bb10__0_13770 -> bb11__0_13770 [label="return"];
    bb10__0_13770 -> bb15__0_13770 [label="unwind"];
    bb11__0_13770 -> bb14__0_13770 [label=""];
    bb14__0_13770 -> bb12__0_13770 [label=""];
    bb15__0_13770 -> bb16__0_13770 [label=""];
    bb16__0_13770 -> bb13__0_13770 [label=""];
}
