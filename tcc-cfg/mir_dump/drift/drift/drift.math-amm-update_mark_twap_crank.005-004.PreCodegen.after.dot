digraph Mir_0_1790 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn update_mark_twap_crank(_1: &amp;ReErased mut state::perp_market::AMM, _2: i64, _3: &amp;ReErased state::oracle::OraclePriceData, _4: std::option::Option&lt;u64&gt;, _5: std::option::Option&lt;u64&gt;, _6: std::option::Option&lt;i64&gt;) -&gt; std::result::Result&lt;(), error::ErrorCode&gt;<br align="left"/>let _7: u64;<br align="left"/>let mut _8: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _9: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _10: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _11: isize;<br align="left"/>let _12: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _13: !;<br align="left"/>let mut _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _15: u64;<br align="left"/>let _16: u64;<br align="left"/>let _17: u64;<br align="left"/>let mut _18: (u64, u64);<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, (u64, u64)&gt;;<br align="left"/>let mut _20: std::result::Result&lt;(u64, u64), error::ErrorCode&gt;;<br align="left"/>let mut _21: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: isize;<br align="left"/>let _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _25: !;<br align="left"/>let mut _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _27: (u64, u64);<br align="left"/>let mut _28: u64;<br align="left"/>let mut _29: isize;<br align="left"/>let _30: u64;<br align="left"/>let mut _31: u64;<br align="left"/>let mut _32: u64;<br align="left"/>let mut _33: u64;<br align="left"/>let mut _34: isize;<br align="left"/>let _35: u64;<br align="left"/>let mut _36: u64;<br align="left"/>let mut _37: u64;<br align="left"/>let _38: ();<br align="left"/>let mut _39: bool;<br align="left"/>let mut _40: u64;<br align="left"/>let mut _41: u64;<br align="left"/>let _42: i64;<br align="left"/>let mut _43: i64;<br align="left"/>let mut _44: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _45: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _46: i64;<br align="left"/>let mut _47: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _48: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _49: u64;<br align="left"/>let mut _50: isize;<br align="left"/>let _51: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _52: !;<br align="left"/>let mut _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _54: i64;<br align="left"/>let mut _55: i64;<br align="left"/>let mut _56: isize;<br align="left"/>let _57: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _58: !;<br align="left"/>let mut _59: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _60: i64;<br align="left"/>let mut _61: i64;<br align="left"/>let mut _62: i64;<br align="left"/>let mut _63: i64;<br align="left"/>let mut _64: bool;<br align="left"/>let mut _65: bool;<br align="left"/>let mut _66: bool;<br align="left"/>let mut _67: bool;<br align="left"/>let mut _68: bool;<br align="left"/>let mut _69: i64;<br align="left"/>let mut _70: i64;<br align="left"/>let mut _71: bool;<br align="left"/>let mut _72: bool;<br align="left"/>let mut _73: bool;<br align="left"/>let mut _74: bool;<br align="left"/>let mut _75: bool;<br align="left"/>let mut _76: u64;<br align="left"/>let mut _77: u64;<br align="left"/>let mut _78: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _79: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _80: i64;<br align="left"/>let mut _81: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _82: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _83: i64;<br align="left"/>let mut _84: i64;<br align="left"/>let mut _85: isize;<br align="left"/>let _86: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _87: !;<br align="left"/>let mut _88: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _89: i64;<br align="left"/>let mut _90: isize;<br align="left"/>let _91: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _92: !;<br align="left"/>let mut _93: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _94: u64;<br align="left"/>let mut _95: u64;<br align="left"/>let mut _96: u64;<br align="left"/>let _97: u64;<br align="left"/>let mut _98: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _99: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _100: &amp;ReErased mut state::perp_market::AMM;<br align="left"/>let mut _101: i64;<br align="left"/>let mut _102: u64;<br align="left"/>let mut _103: u64;<br align="left"/>let mut _104: std::option::Option&lt;u64&gt;;<br align="left"/>let mut _105: std::option::Option&lt;i64&gt;;<br align="left"/>let mut _106: isize;<br align="left"/>let _107: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _108: !;<br align="left"/>let mut _109: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _110: u64;<br align="left"/>let mut _111: ();<br align="left"/>debug amm =&gt; _1;<br align="left"/>debug now =&gt; _2;<br align="left"/>debug oracle_price_data =&gt; _3;<br align="left"/>debug best_dlob_bid_price =&gt; _4;<br align="left"/>debug best_dlob_ask_price =&gt; _5;<br align="left"/>debug sanitize_clamp =&gt; _6;<br align="left"/>debug amm_reserve_price =&gt; _7;<br align="left"/>debug residual =&gt; _12;<br align="left"/>debug val =&gt; _15;<br align="left"/>debug amm_bid_price =&gt; _16;<br align="left"/>debug amm_ask_price =&gt; _17;<br align="left"/>debug residual =&gt; _24;<br align="left"/>debug val =&gt; _27;<br align="left"/>debug best_bid_price =&gt; _28;<br align="left"/>debug best_dlob_bid_price =&gt; _30;<br align="left"/>debug best_ask_price =&gt; _33;<br align="left"/>debug best_dlob_ask_price =&gt; _35;<br align="left"/>debug market_basis =&gt; _42;<br align="left"/>debug residual =&gt; _51;<br align="left"/>debug val =&gt; _54;<br align="left"/>debug residual =&gt; _57;<br align="left"/>debug val =&gt; _60;<br align="left"/>debug residual =&gt; _86;<br align="left"/>debug val =&gt; _89;<br align="left"/>debug residual =&gt; _91;<br align="left"/>debug val =&gt; _94;<br align="left"/>debug residual =&gt; _107;<br align="left"/>debug val =&gt; _110;<br align="left"/>>;
    bb0__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>_10 = &amp;(*_1)<br/></td></tr><tr><td align="left">_9 = AMM::reserve_price(move _10)</td></tr></table>>];
    bb1__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/></td></tr><tr><td align="left">_8 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _9)</td></tr></table>>];
    bb2__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_9)<br/>_11 = discriminant(_8)<br/></td></tr><tr><td align="left">switchInt(move _11)</td></tr></table>>];
    bb3__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_15)<br/>_15 = ((_8 as Continue).0: u64)<br/>_7 = _15<br/>StorageDead(_15)<br/>StorageDead(_8)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;(*_1)<br/>StorageLive(_22)<br/>_22 = _7<br/></td></tr><tr><td align="left">_20 = AMM::bid_ask_price(move _21, move _22)</td></tr></table>>];
    bb4__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb5__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageLive(_12)<br/>_12 = ((_8 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_14)<br/>_14 = _12<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _14)</td></tr></table>>];
    bb6__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_12)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::result::Result&lt;(u64, u64), error::ErrorCode&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb8__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_23 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb9__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_19 as Continue).0: (u64, u64))<br/>_18 = _27<br/>StorageDead(_27)<br/>StorageLive(_16)<br/>_16 = (_18.0: u64)<br/>StorageLive(_17)<br/>_17 = (_18.1: u64)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/>StorageLive(_28)<br/>_29 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _29)</td></tr></table>>];
    bb10__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_26)<br/>_26 = _24<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _26)</td></tr></table>>];
    bb11__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_19)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">_28 = _16<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb13__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_30)<br/>_30 = ((_4 as Some).0: u64)<br/>StorageLive(_31)<br/>_31 = _30<br/>StorageLive(_32)<br/>_32 = _16<br/></td></tr><tr><td align="left">_28 = &lt;u64 as Ord&gt;::max(move _31, move _32)</td></tr></table>>];
    bb14__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageLive(_33)<br/>_34 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb16__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">_33 = _17<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageLive(_35)<br/>_35 = ((_5 as Some).0: u64)<br/>StorageLive(_36)<br/>_36 = _35<br/>StorageLive(_37)<br/>_37 = _17<br/></td></tr><tr><td align="left">_33 = &lt;u64 as Ord&gt;::min(move _36, move _37)</td></tr></table>>];
    bb18__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageDead(_36)<br/>StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb19__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_38)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>_40 = _28<br/>StorageLive(_41)<br/>_41 = _33<br/>_39 = Gt(move _40, move _41)<br/></td></tr><tr><td align="left">switchInt(move _39)</td></tr></table>>];
    bb20__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = ((*_1).46: u64)<br/></td></tr><tr><td align="left">_48 = &lt;u64 as Cast&gt;::cast::&lt;i64&gt;(move _49)</td></tr></table>>];
    bb21__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/></td></tr><tr><td align="left">_47 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _48)</td></tr></table>>];
    bb22__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_50 = discriminant(_47)<br/></td></tr><tr><td align="left">switchInt(move _50)</td></tr></table>>];
    bb23__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageLive(_54)<br/>_54 = ((_47 as Continue).0: i64)<br/>_46 = _54<br/>StorageDead(_54)<br/>StorageLive(_55)<br/>_55 = (((*_1).1: state::oracle::HistoricalOracleData).4: i64)<br/></td></tr><tr><td align="left">_45 = &lt;i64 as SafeMath&gt;::safe_sub(move _46, move _55)</td></tr></table>>];
    bb24__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageLive(_51)<br/>_51 = ((_47 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_53)<br/>_53 = _51<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _53)</td></tr></table>>];
    bb25__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_53)<br/>StorageDead(_51)<br/>StorageDead(_46)<br/>StorageDead(_45)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb26__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">_44 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _45)</td></tr></table>>];
    bb27__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>_56 = discriminant(_44)<br/></td></tr><tr><td align="left">switchInt(move _56)</td></tr></table>>];
    bb28__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_60)<br/>_60 = ((_44 as Continue).0: i64)<br/>_43 = _60<br/>StorageDead(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>_63 = ((*_3).0: i64)<br/>_64 = Eq(_63, const i64::MIN)<br/></td></tr><tr><td align="left">assert(!move _64, &quot;attempt to negate `{}`, which would overflow&quot;, _63)</td></tr></table>>];
    bb29__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_57)<br/>_57 = ((_44 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_59)<br/>_59 = _57<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _59)</td></tr></table>>];
    bb30__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_59)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">_62 = Neg(move _63)<br/>StorageDead(_63)<br/>_65 = Eq(const 100_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _65, &quot;attempt to divide `{}` by zero&quot;, _62)</td></tr></table>>];
    bb32__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">_66 = Eq(const 100_i64, const -1_i64)<br/>_67 = Eq(_62, const i64::MIN)<br/>_68 = BitAnd(move _66, move _67)<br/></td></tr><tr><td align="left">assert(!move _68, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _62, const 100_i64)</td></tr></table>>];
    bb33__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">_61 = Div(move _62, const 100_i64)<br/>StorageDead(_62)<br/>StorageLive(_69)<br/>StorageLive(_70)<br/>_70 = ((*_3).0: i64)<br/>_71 = Eq(const 100_i64, const 0_i64)<br/></td></tr><tr><td align="left">assert(!move _71, &quot;attempt to divide `{}` by zero&quot;, _70)</td></tr></table>>];
    bb34__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">_72 = Eq(const 100_i64, const -1_i64)<br/>_73 = Eq(_70, const i64::MIN)<br/>_74 = BitAnd(move _72, move _73)<br/></td></tr><tr><td align="left">assert(!move _74, &quot;attempt to compute `{} / {}`, which would overflow&quot;, _70, const 100_i64)</td></tr></table>>];
    bb35__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">_69 = Div(move _70, const 100_i64)<br/>StorageDead(_70)<br/></td></tr><tr><td align="left">_42 = &lt;i64 as Ord&gt;::clamp(move _43, move _61, move _69)</td></tr></table>>];
    bb36__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_69)<br/>StorageDead(_61)<br/>StorageDead(_43)<br/>StorageDead(_47)<br/>StorageDead(_44)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>_76 = _28<br/>StorageLive(_77)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = ((*_3).0: i64)<br/>StorageLive(_84)<br/>_84 = _42<br/></td></tr><tr><td align="left">_82 = &lt;i64 as SafeMath&gt;::safe_add(move _83, move _84)</td></tr></table>>];
    bb37__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageDead(_84)<br/>StorageDead(_83)<br/></td></tr><tr><td align="left">_81 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _82)</td></tr></table>>];
    bb38__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>_85 = discriminant(_81)<br/></td></tr><tr><td align="left">switchInt(move _85)</td></tr></table>>];
    bb39__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageLive(_89)<br/>_89 = ((_81 as Continue).0: i64)<br/>_80 = _89<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">_79 = &lt;i64 as Cast&gt;::cast::&lt;u64&gt;(move _80)</td></tr></table>>];
    bb40__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageLive(_86)<br/>_86 = ((_81 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_88)<br/>_88 = _86<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _88)</td></tr></table>>];
    bb41__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/>StorageDead(_86)<br/>StorageDead(_80)<br/>StorageDead(_79)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb42__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_80)<br/></td></tr><tr><td align="left">_78 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _79)</td></tr></table>>];
    bb43__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>_90 = discriminant(_78)<br/></td></tr><tr><td align="left">switchInt(move _90)</td></tr></table>>];
    bb44__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_94)<br/>_94 = ((_78 as Continue).0: u64)<br/>_77 = _94<br/>StorageDead(_94)<br/>_75 = Ge(move _76, move _77)<br/></td></tr><tr><td align="left">switchInt(move _75)</td></tr></table>>];
    bb45__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageLive(_91)<br/>_91 = ((_78 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_93)<br/>_93 = _91<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _93)</td></tr></table>>];
    bb46__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>StorageLive(_95)<br/>_95 = _33<br/>_28 = move _95<br/>StorageDead(_95)<br/>_38 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>StorageLive(_96)<br/>_96 = _28<br/>_33 = move _96<br/>StorageDead(_96)<br/>_38 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_75)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/>_38 = const ()<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_38)<br/>StorageLive(_97)<br/>StorageLive(_98)<br/>StorageLive(_99)<br/>StorageLive(_100)<br/>_100 = &amp;mut (*_1)<br/>StorageLive(_101)<br/>_101 = _2<br/>StorageLive(_102)<br/>_102 = _28<br/>StorageLive(_103)<br/>_103 = _33<br/>StorageLive(_104)<br/>_104 = Option::&lt;u64&gt;::None<br/>StorageLive(_105)<br/>_105 = _6<br/></td></tr><tr><td align="left">_99 = update_mark_twap(move _100, move _101, move _102, move _103, move _104, move _105)</td></tr></table>>];
    bb52__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_105)<br/>StorageDead(_104)<br/>StorageDead(_103)<br/>StorageDead(_102)<br/>StorageDead(_101)<br/>StorageDead(_100)<br/></td></tr><tr><td align="left">_98 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _99)</td></tr></table>>];
    bb53__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_99)<br/>_106 = discriminant(_98)<br/></td></tr><tr><td align="left">switchInt(move _106)</td></tr></table>>];
    bb54__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">StorageLive(_110)<br/>_110 = ((_98 as Continue).0: u64)<br/>_97 = _110<br/>StorageDead(_110)<br/>StorageDead(_98)<br/>StorageDead(_97)<br/>StorageLive(_111)<br/>_111 = ()<br/>_0 = std::result::Result::&lt;(), error::ErrorCode&gt;::Ok(move _111)<br/>StorageDead(_111)<br/>StorageDead(_33)<br/>StorageDead(_28)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb55__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageLive(_107)<br/>_107 = ((_98 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_109)<br/>_109 = _107<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;(), error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _109)</td></tr></table>>];
    bb56__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_109)<br/>StorageDead(_107)<br/>StorageDead(_98)<br/>StorageDead(_97)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_81)<br/>StorageDead(_78)<br/>StorageDead(_77)<br/>StorageDead(_76)<br/>StorageDead(_75)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageDead(_47)<br/>StorageDead(_44)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_42)<br/>StorageDead(_39)<br/>StorageDead(_38)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_28)<br/>StorageDead(_17)<br/>StorageDead(_16)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_1790 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_1790 -> bb1__0_1790 [label="return"];
    bb1__0_1790 -> bb2__0_1790 [label="return"];
    bb2__0_1790 -> bb3__0_1790 [label="0"];
    bb2__0_1790 -> bb5__0_1790 [label="1"];
    bb2__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb3__0_1790 -> bb7__0_1790 [label="return"];
    bb5__0_1790 -> bb6__0_1790 [label="return"];
    bb6__0_1790 -> bb61__0_1790 [label=""];
    bb7__0_1790 -> bb8__0_1790 [label="return"];
    bb8__0_1790 -> bb9__0_1790 [label="0"];
    bb8__0_1790 -> bb10__0_1790 [label="1"];
    bb8__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb9__0_1790 -> bb12__0_1790 [label="0"];
    bb9__0_1790 -> bb13__0_1790 [label="1"];
    bb9__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb10__0_1790 -> bb11__0_1790 [label="return"];
    bb11__0_1790 -> bb61__0_1790 [label=""];
    bb12__0_1790 -> bb15__0_1790 [label=""];
    bb13__0_1790 -> bb14__0_1790 [label="return"];
    bb14__0_1790 -> bb15__0_1790 [label=""];
    bb15__0_1790 -> bb16__0_1790 [label="0"];
    bb15__0_1790 -> bb17__0_1790 [label="1"];
    bb15__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb16__0_1790 -> bb19__0_1790 [label=""];
    bb17__0_1790 -> bb18__0_1790 [label="return"];
    bb18__0_1790 -> bb19__0_1790 [label=""];
    bb19__0_1790 -> bb50__0_1790 [label="0"];
    bb19__0_1790 -> bb20__0_1790 [label="otherwise"];
    bb20__0_1790 -> bb21__0_1790 [label="return"];
    bb21__0_1790 -> bb22__0_1790 [label="return"];
    bb22__0_1790 -> bb23__0_1790 [label="0"];
    bb22__0_1790 -> bb24__0_1790 [label="1"];
    bb22__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb23__0_1790 -> bb26__0_1790 [label="return"];
    bb24__0_1790 -> bb25__0_1790 [label="return"];
    bb25__0_1790 -> bb58__0_1790 [label=""];
    bb26__0_1790 -> bb27__0_1790 [label="return"];
    bb27__0_1790 -> bb28__0_1790 [label="0"];
    bb27__0_1790 -> bb29__0_1790 [label="1"];
    bb27__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb28__0_1790 -> bb31__0_1790 [label="success"];
    bb29__0_1790 -> bb30__0_1790 [label="return"];
    bb30__0_1790 -> bb58__0_1790 [label=""];
    bb31__0_1790 -> bb32__0_1790 [label="success"];
    bb32__0_1790 -> bb33__0_1790 [label="success"];
    bb33__0_1790 -> bb34__0_1790 [label="success"];
    bb34__0_1790 -> bb35__0_1790 [label="success"];
    bb35__0_1790 -> bb36__0_1790 [label="return"];
    bb36__0_1790 -> bb37__0_1790 [label="return"];
    bb37__0_1790 -> bb38__0_1790 [label="return"];
    bb38__0_1790 -> bb39__0_1790 [label="0"];
    bb38__0_1790 -> bb40__0_1790 [label="1"];
    bb38__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb39__0_1790 -> bb42__0_1790 [label="return"];
    bb40__0_1790 -> bb41__0_1790 [label="return"];
    bb41__0_1790 -> bb57__0_1790 [label=""];
    bb42__0_1790 -> bb43__0_1790 [label="return"];
    bb43__0_1790 -> bb44__0_1790 [label="0"];
    bb43__0_1790 -> bb45__0_1790 [label="1"];
    bb43__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb44__0_1790 -> bb48__0_1790 [label="0"];
    bb44__0_1790 -> bb47__0_1790 [label="otherwise"];
    bb45__0_1790 -> bb46__0_1790 [label="return"];
    bb46__0_1790 -> bb57__0_1790 [label=""];
    bb47__0_1790 -> bb49__0_1790 [label=""];
    bb48__0_1790 -> bb49__0_1790 [label=""];
    bb49__0_1790 -> bb51__0_1790 [label=""];
    bb50__0_1790 -> bb51__0_1790 [label=""];
    bb51__0_1790 -> bb52__0_1790 [label="return"];
    bb52__0_1790 -> bb53__0_1790 [label="return"];
    bb53__0_1790 -> bb54__0_1790 [label="0"];
    bb53__0_1790 -> bb55__0_1790 [label="1"];
    bb53__0_1790 -> bb4__0_1790 [label="otherwise"];
    bb54__0_1790 -> bb62__0_1790 [label=""];
    bb55__0_1790 -> bb56__0_1790 [label="return"];
    bb56__0_1790 -> bb60__0_1790 [label=""];
    bb57__0_1790 -> bb59__0_1790 [label=""];
    bb58__0_1790 -> bb59__0_1790 [label=""];
    bb59__0_1790 -> bb60__0_1790 [label=""];
    bb60__0_1790 -> bb61__0_1790 [label=""];
    bb61__0_1790 -> bb62__0_1790 [label=""];
}
