// MIR for `validate_market_order` before PreCodegen

fn validate_market_order(_1: &Order, _2: u64, _3: u64) -> std::result::Result<(), error::ErrorCode> {
    debug order => _1;
    debug step_size => _2;
    debug min_order_size => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: &state::user::Order;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: bool;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: ();
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: bool;
    let mut _20: i64;
    let mut _21: bool;
    let mut _22: i64;
    let mut _23: ();
    let _24: error::ErrorCode;
    let _25: ();
    let mut _26: &str;
    let _27: &str;
    let mut _28: &std::string::String;
    let _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[&str; 2];
    let _35: &[&str; 2];
    let _36: [&str; 2];
    let mut _37: &[core::fmt::rt::Argument<'_>];
    let mut _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: &[core::fmt::rt::Argument<'_>; 1];
    let _40: [core::fmt::rt::Argument<'_>; 1];
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &error::ErrorCode;
    let _43: &error::ErrorCode;
    let _44: ();
    let mut _45: &str;
    let _46: &str;
    let mut _47: error::ErrorCode;
    let mut _48: isize;
    let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _52: ();
    let _53: ();
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _55: std::result::Result<(), error::ErrorCode>;
    let mut _56: &state::user::Order;
    let mut _57: isize;
    let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _61: ();
    let _62: ();
    let mut _63: bool;
    let mut _64: u64;
    let mut _65: !;
    let _66: ();
    let mut _67: &str;
    let _68: &str;
    let mut _69: error::ErrorCode;
    let _70: ();
    let mut _71: bool;
    let mut _72: !;
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: error::ErrorCode;
    let _77: ();
    let mut _78: bool;
    let mut _79: state::user::Order;
    let mut _80: !;
    let _81: ();
    let mut _82: &str;
    let _83: &str;
    let mut _84: error::ErrorCode;
    let _85: ();
    let mut _86: bool;
    let mut _87: !;
    let _88: ();
    let mut _89: &str;
    let _90: &str;
    let mut _91: error::ErrorCode;
    let mut _92: ();
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug error_code => _24;
        let _31: std::string::String;
        let mut _93: &[&str; 2];
        scope 6 {
            debug res => _31;
        }
    }
    scope 7 {
        debug residual => _49;
        scope 8 {
        }
    }
    scope 9 {
        debug val => _52;
        scope 10 {
        }
    }
    scope 11 {
        debug residual => _58;
        scope 12 {
        }
    }
    scope 13 {
        debug val => _61;
        scope 14 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _9 = _3;
        StorageLive(_10);
        _10 = ((*_1).18: bool);
        _6 = validate_base_asset_amount(move _7, move _8, move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _11 = discriminant(_5);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_5 as Continue).0: ());
        _4 = _15;
        StorageDead(_15);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = ((*_1).6: i64);
        _19 = Gt(move _20, const 0_i64);
        switchInt(move _19) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb42;
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = ((*_1).7: i64);
        _21 = Gt(move _22, const 0_i64);
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb8: {
        StorageDead(_20);
        goto -> bb11;
    }

    bb9: {
        StorageDead(_22);
        StorageLive(_23);
        _23 = ();
        _18 = std::result::Result::<(), error::ErrorCode>::Ok(move _23);
        StorageDead(_23);
        goto -> bb19;
    }

    bb10: {
        StorageDead(_22);
        goto -> bb11;
    }

    bb11: {
        StorageLive(_24);
        _24 = error::ErrorCode::InvalidOrderAuction;
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _93 = const _;
        _35 = &(*_93);
        _34 = &(*_35);
        _33 = move _34 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_34);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        _43 = &_24;
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _42) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_42);
        _40 = [move _41];
        StorageDead(_41);
        _39 = &_40;
        _38 = &(*_39);
        _37 = move _38 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_38);
        _32 = Arguments::<'_>::new_v1(move _33, move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_37);
        StorageDead(_33);
        _31 = format(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_32);
        StorageDead(_43);
        StorageDead(_40);
        StorageDead(_39);
        StorageDead(_35);
        _30 = move _31;
        StorageDead(_31);
        _29 = &_30;
        _28 = &(*_29);
        _27 = <String as Deref>::deref(move _28) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        _26 = &(*_27);
        StorageDead(_28);
        _25 = solana_program::log::sol_log(move _26) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        StorageDead(_26);
        drop(_30) -> [return: bb17, unwind: bb44];
    }

    bb17: {
        StorageDead(_30);
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_25);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        _46 = const "Auction start and end price must be greater than 0";
        _45 = &(*_46);
        _44 = solana_program::log::sol_log(move _45) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_45);
        StorageDead(_46);
        StorageDead(_44);
        StorageLive(_47);
        _47 = _24;
        _18 = std::result::Result::<(), error::ErrorCode>::Err(move _47);
        StorageDead(_47);
        StorageDead(_24);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_18);
        _48 = discriminant(_17);
        switchInt(move _48) -> [0: bb21, 1: bb22, otherwise: bb4];
    }

    bb21: {
        StorageLive(_52);
        _52 = ((_17 as Continue).0: ());
        _16 = _52;
        StorageDead(_52);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &(*_1);
        _55 = validate_auction_params(move _56) -> [return: bb24, unwind continue];
    }

    bb22: {
        StorageLive(_49);
        _49 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb42;
    }

    bb24: {
        StorageDead(_56);
        _54 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _55) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb26, 1: bb27, otherwise: bb4];
    }

    bb26: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: ());
        _53 = _61;
        StorageDead(_61);
        StorageDead(_54);
        StorageDead(_53);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        _64 = ((*_1).5: u64);
        _63 = Gt(move _64, const 0_u64);
        switchInt(move _63) -> [0: bb30, otherwise: bb29];
    }

    bb27: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb28, unwind continue];
    }

    bb28: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_54);
        StorageDead(_53);
        goto -> bb42;
    }

    bb29: {
        StorageDead(_64);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = const "Market should not have trigger price";
        _67 = &(*_68);
        _66 = solana_program::log::sol_log(move _67) -> [return: bb31, unwind continue];
    }

    bb30: {
        StorageDead(_64);
        _62 = const ();
        StorageDead(_63);
        StorageDead(_62);
        StorageLive(_70);
        StorageLive(_71);
        _71 = ((*_1).19: bool);
        switchInt(move _71) -> [0: bb33, otherwise: bb32];
    }

    bb31: {
        StorageDead(_67);
        StorageDead(_68);
        StorageDead(_66);
        StorageLive(_69);
        _69 = error::ErrorCode::InvalidOrderTrigger;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _69);
        StorageDead(_69);
        StorageDead(_63);
        StorageDead(_62);
        goto -> bb42;
    }

    bb32: {
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = const "Market order can not be post only";
        _74 = &(*_75);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb34, unwind continue];
    }

    bb33: {
        _70 = const ();
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        _79 = (*_1);
        _78 = Order::has_oracle_price_offset(move _79) -> [return: bb35, unwind continue];
    }

    bb34: {
        StorageDead(_74);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_76);
        _76 = error::ErrorCode::InvalidOrderPostOnly;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _76);
        StorageDead(_76);
        StorageDead(_71);
        StorageDead(_70);
        goto -> bb42;
    }

    bb35: {
        switchInt(move _78) -> [0: bb38, otherwise: bb36];
    }

    bb36: {
        StorageDead(_79);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _83 = const "Market order can not have oracle offset";
        _82 = &(*_83);
        _81 = solana_program::log::sol_log(move _82) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_82);
        StorageDead(_83);
        StorageDead(_81);
        StorageLive(_84);
        _84 = error::ErrorCode::InvalidOrderOracleOffset;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _84);
        StorageDead(_84);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb42;
    }

    bb38: {
        StorageDead(_79);
        _77 = const ();
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_85);
        StorageLive(_86);
        _86 = ((*_1).20: bool);
        switchInt(move _86) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = const "Market order can not be immediate or cancel";
        _89 = &(*_90);
        _88 = solana_program::log::sol_log(move _89) -> [return: bb41, unwind continue];
    }

    bb40: {
        _85 = const ();
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_92);
        _92 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _92);
        StorageDead(_92);
        goto -> bb42;
    }

    bb41: {
        StorageDead(_89);
        StorageDead(_90);
        StorageDead(_88);
        StorageLive(_91);
        _91 = error::ErrorCode::InvalidOrderIOC;
        _0 = std::result::Result::<(), error::ErrorCode>::Err(move _91);
        StorageDead(_91);
        StorageDead(_86);
        StorageDead(_85);
        goto -> bb42;
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        drop(_30) -> [return: bb44, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        resume;
    }
}
