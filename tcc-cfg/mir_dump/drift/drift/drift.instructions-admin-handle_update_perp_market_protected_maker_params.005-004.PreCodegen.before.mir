// MIR for `admin::handle_update_perp_market_protected_maker_params` before PreCodegen

fn admin::handle_update_perp_market_protected_maker_params(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: Option<u8>, _3: Option<u8>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug protected_maker_limit_price_divisor => _2;
    debug protected_maker_dynamic_divisor => _3;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _4: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _5: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _7: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _8: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _10: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _16: ();
    let mut _17: &str;
    let _18: &str;
    let mut _19: &std::string::String;
    let _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[&str; 1];
    let _26: &[&str; 1];
    let _27: [&str; 1];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let mut _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: &[core::fmt::rt::Argument<'_>; 1];
    let _31: [core::fmt::rt::Argument<'_>; 1];
    let mut _32: core::fmt::rt::Argument<'_>;
    let mut _33: &u16;
    let _34: &u16;
    let _35: &state::perp_market::PerpMarket;
    let mut _36: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _37: ();
    let mut _38: isize;
    let _40: ();
    let mut _41: &str;
    let _42: &str;
    let mut _43: &std::string::String;
    let _44: &std::string::String;
    let _45: std::string::String;
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let mut _49: &[&str; 2];
    let _50: &[&str; 2];
    let _51: [&str; 2];
    let mut _52: &[core::fmt::rt::Argument<'_>];
    let mut _53: &[core::fmt::rt::Argument<'_>; 2];
    let _54: &[core::fmt::rt::Argument<'_>; 2];
    let _55: [core::fmt::rt::Argument<'_>; 2];
    let mut _56: core::fmt::rt::Argument<'_>;
    let mut _57: &u8;
    let _58: &u8;
    let _59: &state::perp_market::PerpMarket;
    let mut _60: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _61: core::fmt::rt::Argument<'_>;
    let mut _62: &u8;
    let _63: &u8;
    let mut _64: u8;
    let mut _65: &mut state::perp_market::PerpMarket;
    let mut _66: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _67: ();
    let mut _68: &str;
    let _69: &str;
    let _70: ();
    let mut _71: isize;
    let _73: ();
    let mut _74: &str;
    let _75: &str;
    let mut _76: &std::string::String;
    let _77: &std::string::String;
    let _78: std::string::String;
    let mut _80: std::fmt::Arguments<'_>;
    let mut _81: &[&str];
    let mut _82: &[&str; 2];
    let _83: &[&str; 2];
    let _84: [&str; 2];
    let mut _85: &[core::fmt::rt::Argument<'_>];
    let mut _86: &[core::fmt::rt::Argument<'_>; 2];
    let _87: &[core::fmt::rt::Argument<'_>; 2];
    let _88: [core::fmt::rt::Argument<'_>; 2];
    let mut _89: core::fmt::rt::Argument<'_>;
    let mut _90: &u8;
    let _91: &u8;
    let _92: &state::perp_market::PerpMarket;
    let mut _93: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _94: core::fmt::rt::Argument<'_>;
    let mut _95: &u8;
    let _96: &u8;
    let mut _97: u8;
    let mut _98: &mut state::perp_market::PerpMarket;
    let mut _99: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _100: ();
    let mut _101: &str;
    let _102: &str;
    let mut _103: ();
    let mut _107: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _108: isize;
    let mut _109: isize;
    let mut _110: isize;
    let mut _111: isize;
    let mut _112: isize;
    scope 1 {
        debug perp_market => _4;
        let _22: std::string::String;
        let mut _106: &[&str; 1];
        scope 6 {
            debug res => _22;
        }
        scope 7 {
            debug protected_maker_limit_price_divisor => _39;
            let _39: u8;
            let _46: std::string::String;
            let mut _105: &[&str; 2];
            scope 8 {
                debug res => _46;
            }
        }
        scope 9 {
            debug protected_maker_dynamic_divisor => _72;
            let _72: u8;
            let _79: std::string::String;
            let mut _104: &[&str; 2];
            scope 10 {
                debug res => _79;
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _107 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _9 = &((*_107).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _8 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageLive(_10);
        _10 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _7 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _8, move _10) -> [return: bb2, unwind: bb47];
    }

    bb2: {
        StorageDead(_10);
        StorageDead(_8);
        _6 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _7) -> [return: bb3, unwind: bb47];
    }

    bb3: {
        StorageDead(_7);
        _11 = discriminant(_6);
        switchInt(move _11) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_15);
        _15 = move ((_6 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _5 = move _15;
        StorageDead(_15);
        _4 = &mut _5;
        _110 = discriminant(_6);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _106 = const _;
        _26 = &(*_106);
        _25 = &(*_26);
        _24 = move _25 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_25);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        _36 = &(*_4);
        _35 = <RefMut<'_, PerpMarket> as Deref>::deref(move _36) -> [return: bb8, unwind: bb46];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_12);
        _12 = ((_6 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb7, unwind: bb48];
    }

    bb7: {
        StorageDead(_14);
        StorageDead(_12);
        _108 = discriminant(_6);
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb42;
    }

    bb8: {
        StorageDead(_36);
        _34 = &((*_35).21: u16);
        _33 = &(*_34);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _33) -> [return: bb9, unwind: bb46];
    }

    bb9: {
        StorageDead(_33);
        _31 = [move _32];
        StorageDead(_32);
        _30 = &_31;
        _29 = &(*_30);
        _28 = move _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_29);
        _23 = Arguments::<'_>::new_v1(move _24, move _28) -> [return: bb10, unwind: bb46];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_24);
        _22 = format(move _23) -> [return: bb11, unwind: bb46];
    }

    bb11: {
        StorageDead(_23);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_26);
        _21 = move _22;
        StorageDead(_22);
        _20 = &_21;
        _19 = &(*_20);
        _18 = <String as Deref>::deref(move _19) -> [return: bb12, unwind: bb45];
    }

    bb12: {
        _17 = &(*_18);
        StorageDead(_19);
        _16 = solana_program::log::sol_log(move _17) -> [return: bb13, unwind: bb45];
    }

    bb13: {
        StorageDead(_17);
        drop(_21) -> [return: bb14, unwind: bb46];
    }

    bb14: {
        StorageDead(_21);
        StorageDead(_20);
        StorageDead(_18);
        StorageDead(_16);
        StorageLive(_37);
        _38 = discriminant(_2);
        switchInt(move _38) -> [1: bb15, otherwise: bb25];
    }

    bb15: {
        StorageLive(_39);
        _39 = ((_2 as Some).0: u8);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _105 = const _;
        _50 = &(*_105);
        _49 = &(*_50);
        _48 = move _49 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_49);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        _60 = &(*_4);
        _59 = <RefMut<'_, PerpMarket> as Deref>::deref(move _60) -> [return: bb16, unwind: bb46];
    }

    bb16: {
        StorageDead(_60);
        _58 = &((*_59).34: u8);
        _57 = &(*_58);
        _56 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _57) -> [return: bb17, unwind: bb46];
    }

    bb17: {
        StorageDead(_57);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &_39;
        _62 = &(*_63);
        _61 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _62) -> [return: bb18, unwind: bb46];
    }

    bb18: {
        StorageDead(_62);
        _55 = [move _56, move _61];
        StorageDead(_61);
        StorageDead(_56);
        _54 = &_55;
        _53 = &(*_54);
        _52 = move _53 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_53);
        _47 = Arguments::<'_>::new_v1(move _48, move _52) -> [return: bb19, unwind: bb46];
    }

    bb19: {
        StorageDead(_52);
        StorageDead(_48);
        _46 = format(move _47) -> [return: bb20, unwind: bb46];
    }

    bb20: {
        StorageDead(_47);
        StorageDead(_63);
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_55);
        StorageDead(_54);
        StorageDead(_50);
        _45 = move _46;
        StorageDead(_46);
        _44 = &_45;
        _43 = &(*_44);
        _42 = <String as Deref>::deref(move _43) -> [return: bb21, unwind: bb44];
    }

    bb21: {
        _41 = &(*_42);
        StorageDead(_43);
        _40 = solana_program::log::sol_log(move _41) -> [return: bb22, unwind: bb44];
    }

    bb22: {
        StorageDead(_41);
        drop(_45) -> [return: bb23, unwind: bb46];
    }

    bb23: {
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_42);
        StorageDead(_40);
        StorageLive(_64);
        _64 = _39;
        StorageLive(_65);
        StorageLive(_66);
        _66 = &mut (*_4);
        _65 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _66) -> [return: bb24, unwind: bb46];
    }

    bb24: {
        StorageDead(_66);
        ((*_65).34: u8) = move _64;
        StorageDead(_64);
        StorageDead(_65);
        _37 = const ();
        StorageDead(_39);
        goto -> bb27;
    }

    bb25: {
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = const "perp_market.protected_maker_limit_price_divisor: unchanged";
        _68 = &(*_69);
        _67 = solana_program::log::sol_log(move _68) -> [return: bb26, unwind: bb46];
    }

    bb26: {
        StorageDead(_68);
        StorageDead(_69);
        StorageDead(_67);
        _37 = const ();
        goto -> bb27;
    }

    bb27: {
        StorageDead(_37);
        StorageLive(_70);
        _71 = discriminant(_3);
        switchInt(move _71) -> [1: bb28, otherwise: bb38];
    }

    bb28: {
        StorageLive(_72);
        _72 = ((_3 as Some).0: u8);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        _104 = const _;
        _83 = &(*_104);
        _82 = &(*_83);
        _81 = move _82 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_82);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &(*_4);
        _92 = <RefMut<'_, PerpMarket> as Deref>::deref(move _93) -> [return: bb29, unwind: bb46];
    }

    bb29: {
        StorageDead(_93);
        _91 = &((*_92).35: u8);
        _90 = &(*_91);
        _89 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _90) -> [return: bb30, unwind: bb46];
    }

    bb30: {
        StorageDead(_90);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &_72;
        _95 = &(*_96);
        _94 = core::fmt::rt::Argument::<'_>::new_debug::<u8>(move _95) -> [return: bb31, unwind: bb46];
    }

    bb31: {
        StorageDead(_95);
        _88 = [move _89, move _94];
        StorageDead(_94);
        StorageDead(_89);
        _87 = &_88;
        _86 = &(*_87);
        _85 = move _86 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_86);
        _80 = Arguments::<'_>::new_v1(move _81, move _85) -> [return: bb32, unwind: bb46];
    }

    bb32: {
        StorageDead(_85);
        StorageDead(_81);
        _79 = format(move _80) -> [return: bb33, unwind: bb46];
    }

    bb33: {
        StorageDead(_80);
        StorageDead(_96);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_83);
        _78 = move _79;
        StorageDead(_79);
        _77 = &_78;
        _76 = &(*_77);
        _75 = <String as Deref>::deref(move _76) -> [return: bb34, unwind: bb43];
    }

    bb34: {
        _74 = &(*_75);
        StorageDead(_76);
        _73 = solana_program::log::sol_log(move _74) -> [return: bb35, unwind: bb43];
    }

    bb35: {
        StorageDead(_74);
        drop(_78) -> [return: bb36, unwind: bb46];
    }

    bb36: {
        StorageDead(_78);
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_73);
        StorageLive(_97);
        _97 = _72;
        StorageLive(_98);
        StorageLive(_99);
        _99 = &mut (*_4);
        _98 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _99) -> [return: bb37, unwind: bb46];
    }

    bb37: {
        StorageDead(_99);
        ((*_98).35: u8) = move _97;
        StorageDead(_97);
        StorageDead(_98);
        _70 = const ();
        StorageDead(_72);
        goto -> bb40;
    }

    bb38: {
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = const "perp_market.protected_maker_dynamic_divisor: unchanged";
        _101 = &(*_102);
        _100 = solana_program::log::sol_log(move _101) -> [return: bb39, unwind: bb46];
    }

    bb39: {
        StorageDead(_101);
        StorageDead(_102);
        StorageDead(_100);
        _70 = const ();
        goto -> bb40;
    }

    bb40: {
        StorageDead(_70);
        StorageLive(_103);
        _103 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _103);
        StorageDead(_103);
        drop(_5) -> [return: bb41, unwind: bb47];
    }

    bb41: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb42;
    }

    bb42: {
        return;
    }

    bb43 (cleanup): {
        drop(_78) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb44 (cleanup): {
        drop(_45) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb45 (cleanup): {
        drop(_21) -> [return: bb46, unwind terminate(cleanup)];
    }

    bb46 (cleanup): {
        drop(_5) -> [return: bb47, unwind terminate(cleanup)];
    }

    bb47 (cleanup): {
        resume;
    }

    bb48 (cleanup): {
        _112 = discriminant(_6);
        goto -> bb47;
    }
}
