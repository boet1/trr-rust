// MIR for `if_staker::<impl at programs/drift/src/instructions/if_staker.rs:827:10: 827:18>::try_accounts` after PreCodegen

fn if_staker::<impl at programs/drift/src/instructions/if_staker.rs:827:10: 827:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut InitializeInsuranceFundStakeBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _8: <instructions::if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::InitializeInsuranceFundStakeBumps>>::try_accounts::__Args;
    let mut _9: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::InitializeInsuranceFundStakeBumps>>::try_accounts::__Args>;
    let mut _10: std::result::Result<<instructions::if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::InitializeInsuranceFundStakeBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _11: std::result::Result<<instructions::if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::InitializeInsuranceFundStakeBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _12: &mut &[u8];
    let mut _13: &mut &[u8];
    let mut _14: {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _21: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>>;
    let mut _22: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _23: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>, anchor_lang::error::Error>;
    let mut _24: &anchor_lang::prelude::Pubkey;
    let mut _25: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _26: &[u8];
    let mut _27: &mut instructions::if_staker::InitializeInsuranceFundStakeBumps;
    let mut _28: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _29: {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
    let mut _30: isize;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _35: ();
    let mut _36: bool;
    let mut _37: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _38: !;
    let mut _39: anchor_lang::error::Error;
    let mut _40: anchor_lang::error::ErrorCode;
    let _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    let mut _45: &[anchor_lang::prelude::AccountInfo<'_>];
    let _46: &[anchor_lang::prelude::AccountInfo<'_>];
    let _47: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _48: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _49: std::ops::RangeFrom<usize>;
    let mut _51: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _52: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _54: &anchor_lang::prelude::Pubkey;
    let mut _55: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _56: &[u8];
    let mut _57: &mut instructions::if_staker::InitializeInsuranceFundStakeBumps;
    let mut _58: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _59: {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
    let mut _60: isize;
    let mut _62: !;
    let mut _63: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _66: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _67: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _68: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _69: &anchor_lang::prelude::Pubkey;
    let mut _70: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _71: &[u8];
    let mut _72: &mut instructions::if_staker::InitializeInsuranceFundStakeBumps;
    let mut _73: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _74: {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
    let mut _75: isize;
    let mut _77: !;
    let mut _78: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _81: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _82: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _83: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _84: &anchor_lang::prelude::Pubkey;
    let mut _85: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _86: &[u8];
    let mut _87: &mut instructions::if_staker::InitializeInsuranceFundStakeBumps;
    let mut _88: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _89: {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
    let mut _90: isize;
    let mut _92: !;
    let mut _93: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _96: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _97: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _98: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _99: &anchor_lang::prelude::Pubkey;
    let mut _100: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _101: &[u8];
    let mut _102: &mut instructions::if_staker::InitializeInsuranceFundStakeBumps;
    let mut _103: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _104: {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
    let mut _105: isize;
    let mut _107: !;
    let mut _108: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _111: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>>;
    let mut _112: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _113: std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>;
    let mut _114: &anchor_lang::prelude::Pubkey;
    let mut _115: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _116: &[u8];
    let mut _117: &mut instructions::if_staker::InitializeInsuranceFundStakeBumps;
    let mut _118: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _119: {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _126: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>>;
    let mut _127: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _128: std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>;
    let mut _129: &anchor_lang::prelude::Pubkey;
    let mut _130: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _131: &[u8];
    let mut _132: &mut instructions::if_staker::InitializeInsuranceFundStakeBumps;
    let mut _133: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _134: {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
    let mut _135: isize;
    let mut _137: !;
    let mut _138: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _141: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Rent>;
    let mut _142: std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError>;
    let mut _143: isize;
    let mut _145: !;
    let mut _146: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _150: (anchor_lang::prelude::Pubkey, u8);
    let mut _151: &[&[u8]];
    let mut _152: &[&[u8]; 3];
    let _153: &[&[u8]; 3];
    let _154: [&[u8]; 3];
    let mut _155: &[u8];
    let mut _156: &[u8; 20];
    let _157: &[u8; 20];
    let mut _158: &[u8];
    let _159: &[u8];
    let mut _160: &anchor_lang::prelude::Pubkey;
    let _161: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _162: &anchor_lang::prelude::Signer<'_>;
    let mut _163: &[u8];
    let _164: &[u8];
    let mut _165: &[u8; 2];
    let _166: [u8; 2];
    let mut _167: u16;
    let mut _168: &anchor_lang::prelude::Pubkey;
    let mut _169: u8;
    let _170: ();
    let mut _171: bool;
    let mut _172: &anchor_lang::prelude::Pubkey;
    let _173: anchor_lang::prelude::Pubkey;
    let mut _174: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: !;
    let mut _177: anchor_lang::error::Error;
    let mut _178: anchor_lang::error::Error;
    let mut _179: anchor_lang::error::Error;
    let mut _180: anchor_lang::error::ErrorCode;
    let mut _181: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _182: anchor_lang::prelude::Pubkey;
    let mut _183: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _184: anchor_lang::prelude::Pubkey;
    let mut _187: &&anchor_lang::prelude::AccountInfo<'_>;
    let _188: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _192: bool;
    let mut _193: bool;
    let mut _194: &&anchor_lang::prelude::Pubkey;
    let mut _195: &&anchor_lang::prelude::Pubkey;
    let _196: &anchor_lang::prelude::Pubkey;
    let _197: anchor_lang::prelude::Pubkey;
    let mut _199: &anchor_lang::prelude::AccountInfo<'_>;
    let _200: ();
    let mut _201: bool;
    let mut _202: u64;
    let mut _205: &anchor_lang::prelude::Rent;
    let mut _206: usize;
    let mut _208: anchor_lang::prelude::AccountInfo<'_>;
    let mut _209: &anchor_lang::prelude::Signer<'_>;
    let mut _210: anchor_lang::prelude::AccountInfo<'_>;
    let mut _211: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _213: anchor_lang::prelude::AccountInfo<'_>;
    let mut _214: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _215: anchor_lang::system_program::CreateAccount<'_>;
    let _216: ();
    let mut _217: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _218: std::result::Result<(), anchor_lang::error::Error>;
    let mut _219: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _220: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
    let mut _221: &[&[&[u8]]];
    let mut _222: &[&[&[u8]]; 1];
    let _223: &[&[&[u8]]; 1];
    let _224: [&[&[u8]]; 1];
    let mut _225: &[&[u8]];
    let _226: &[&[u8]];
    let _227: &[&[u8]];
    let mut _228: &[&[u8]; 4];
    let _229: [&[u8]; 4];
    let mut _230: &[u8];
    let mut _231: &[u8; 20];
    let _232: &[u8; 20];
    let mut _233: &[u8];
    let mut _234: &anchor_lang::prelude::Pubkey;
    let _235: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _236: &anchor_lang::prelude::Signer<'_>;
    let mut _237: &[u8];
    let _238: &[u8];
    let mut _239: &[u8; 2];
    let _240: [u8; 2];
    let mut _241: u16;
    let mut _242: &[u8];
    let _243: &[u8];
    let _244: &[u8];
    let mut _245: &[u8; 1];
    let _246: [u8; 1];
    let mut _247: u8;
    let mut _248: std::ops::RangeFull;
    let mut _249: std::ops::RangeFull;
    let mut _250: u64;
    let mut _251: u64;
    let mut _252: usize;
    let mut _253: &anchor_lang::prelude::Pubkey;
    let mut _254: isize;
    let mut _256: !;
    let mut _257: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _259: ();
    let mut _260: bool;
    let mut _261: &anchor_lang::prelude::Pubkey;
    let _262: anchor_lang::prelude::Pubkey;
    let mut _263: &anchor_lang::prelude::Signer<'_>;
    let mut _264: &anchor_lang::prelude::Pubkey;
    let _265: anchor_lang::prelude::Pubkey;
    let mut _266: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _267: !;
    let mut _268: anchor_lang::error::Error;
    let mut _269: anchor_lang::error::Error;
    let mut _270: anchor_lang::error::AnchorError;
    let mut _271: std::string::String;
    let mut _272: &anchor_lang::error::ErrorCode;
    let _273: anchor_lang::error::ErrorCode;
    let mut _274: u32;
    let mut _275: anchor_lang::error::ErrorCode;
    let mut _276: std::string::String;
    let mut _277: &anchor_lang::error::ErrorCode;
    let _278: anchor_lang::error::ErrorCode;
    let mut _279: std::option::Option<anchor_lang::error::ErrorOrigin>;
    let mut _280: anchor_lang::error::ErrorOrigin;
    let mut _281: anchor_lang::error::Source;
    let mut _282: std::option::Option<anchor_lang::error::ComparedValues>;
    let mut _283: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _284: anchor_lang::prelude::Pubkey;
    let mut _285: &anchor_lang::prelude::Signer<'_>;
    let mut _286: anchor_lang::prelude::Pubkey;
    let mut _287: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _289: u64;
    let mut _290: u64;
    let mut _291: &anchor_lang::prelude::Rent;
    let mut _292: usize;
    let mut _293: u64;
    let _294: ();
    let mut _295: bool;
    let mut _296: u64;
    let mut _298: anchor_lang::prelude::AccountInfo<'_>;
    let mut _299: &anchor_lang::prelude::Signer<'_>;
    let mut _300: anchor_lang::prelude::AccountInfo<'_>;
    let mut _301: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _303: anchor_lang::prelude::AccountInfo<'_>;
    let mut _304: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _305: anchor_lang::system_program::Transfer<'_>;
    let _306: ();
    let mut _307: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _308: std::result::Result<(), anchor_lang::error::Error>;
    let mut _309: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
    let mut _310: u64;
    let mut _311: isize;
    let mut _313: !;
    let mut _314: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _317: anchor_lang::prelude::AccountInfo<'_>;
    let mut _318: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _320: anchor_lang::prelude::AccountInfo<'_>;
    let mut _321: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _322: anchor_lang::system_program::Allocate<'_>;
    let _323: ();
    let mut _324: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _325: std::result::Result<(), anchor_lang::error::Error>;
    let mut _326: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _327: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
    let mut _328: &[&[&[u8]]];
    let mut _329: &[&[&[u8]]; 1];
    let _330: &[&[&[u8]]; 1];
    let _331: [&[&[u8]]; 1];
    let mut _332: &[&[u8]];
    let _333: &[&[u8]];
    let _334: &[&[u8]];
    let mut _335: &[&[u8]; 4];
    let _336: [&[u8]; 4];
    let mut _337: &[u8];
    let mut _338: &[u8; 20];
    let _339: &[u8; 20];
    let mut _340: &[u8];
    let mut _341: &anchor_lang::prelude::Pubkey;
    let _342: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _343: &anchor_lang::prelude::Signer<'_>;
    let mut _344: &[u8];
    let _345: &[u8];
    let mut _346: &[u8; 2];
    let _347: [u8; 2];
    let mut _348: u16;
    let mut _349: &[u8];
    let _350: &[u8];
    let _351: &[u8];
    let mut _352: &[u8; 1];
    let _353: [u8; 1];
    let mut _354: u8;
    let mut _355: std::ops::RangeFull;
    let mut _356: std::ops::RangeFull;
    let mut _357: u64;
    let mut _358: usize;
    let mut _359: isize;
    let mut _361: !;
    let mut _362: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _365: anchor_lang::prelude::AccountInfo<'_>;
    let mut _366: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _368: anchor_lang::prelude::AccountInfo<'_>;
    let mut _369: &anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _370: anchor_lang::system_program::Assign<'_>;
    let _371: ();
    let mut _372: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _373: std::result::Result<(), anchor_lang::error::Error>;
    let mut _374: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _375: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
    let mut _376: &[&[&[u8]]];
    let mut _377: &[&[&[u8]]; 1];
    let _378: &[&[&[u8]]; 1];
    let _379: [&[&[u8]]; 1];
    let mut _380: &[&[u8]];
    let _381: &[&[u8]];
    let _382: &[&[u8]];
    let mut _383: &[&[u8]; 4];
    let _384: [&[u8]; 4];
    let mut _385: &[u8];
    let mut _386: &[u8; 20];
    let _387: &[u8; 20];
    let mut _388: &[u8];
    let mut _389: &anchor_lang::prelude::Pubkey;
    let _390: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _391: &anchor_lang::prelude::Signer<'_>;
    let mut _392: &[u8];
    let _393: &[u8];
    let mut _394: &[u8; 2];
    let _395: [u8; 2];
    let mut _396: u16;
    let mut _397: &[u8];
    let _398: &[u8];
    let _399: &[u8];
    let mut _400: &[u8; 1];
    let _401: [u8; 1];
    let mut _402: u8;
    let mut _403: std::ops::RangeFull;
    let mut _404: std::ops::RangeFull;
    let mut _405: &anchor_lang::prelude::Pubkey;
    let mut _406: isize;
    let mut _408: !;
    let mut _409: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _411: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _412: &anchor_lang::prelude::Pubkey;
    let mut _413: &anchor_lang::prelude::AccountInfo<'_>;
    let _414: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _415: isize;
    let mut _418: !;
    let mut _419: anchor_lang::error::Error;
    let mut _420: anchor_lang::error::Error;
    let mut _421: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>, anchor_lang::error::Error>;
    let mut _422: &anchor_lang::prelude::AccountInfo<'_>;
    let _423: &&anchor_lang::prelude::AccountInfo<'_>;
    let mut _424: isize;
    let mut _427: !;
    let mut _428: anchor_lang::error::Error;
    let mut _429: anchor_lang::error::Error;
    let _430: ();
    let mut _431: bool;
    let _432: ();
    let mut _433: bool;
    let mut _434: usize;
    let mut _435: usize;
    let mut _436: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _437: !;
    let mut _438: anchor_lang::error::Error;
    let mut _439: anchor_lang::error::Error;
    let mut _440: anchor_lang::error::Error;
    let mut _441: anchor_lang::error::ErrorCode;
    let mut _442: (usize, usize);
    let mut _443: usize;
    let mut _444: usize;
    let mut _445: &anchor_lang::prelude::AccountInfo<'_>;
    let _446: ();
    let mut _447: bool;
    let mut _448: &&anchor_lang::prelude::Pubkey;
    let mut _449: &&anchor_lang::prelude::Pubkey;
    let mut _450: !;
    let mut _451: anchor_lang::error::Error;
    let mut _452: anchor_lang::error::Error;
    let mut _453: anchor_lang::error::Error;
    let mut _454: anchor_lang::error::ErrorCode;
    let mut _455: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _456: anchor_lang::prelude::Pubkey;
    let mut _457: anchor_lang::prelude::Pubkey;
    let mut _459: &anchor_lang::prelude::Rent;
    let mut _460: usize;
    let mut _461: bool;
    let mut _462: u64;
    let mut _463: &anchor_lang::prelude::AccountInfo<'_>;
    let _464: anchor_lang::prelude::AccountInfo<'_>;
    let mut _465: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _466: u64;
    let mut _467: !;
    let mut _468: anchor_lang::error::Error;
    let mut _469: anchor_lang::error::Error;
    let mut _470: anchor_lang::error::ErrorCode;
    let _471: ();
    let mut _472: bool;
    let mut _473: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _474: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let _475: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _476: !;
    let mut _477: anchor_lang::error::Error;
    let mut _478: anchor_lang::error::Error;
    let mut _479: anchor_lang::error::ErrorCode;
    let _480: ();
    let mut _481: bool;
    let mut _482: &anchor_lang::prelude::Rent;
    let mut _483: u64;
    let mut _484: &anchor_lang::prelude::AccountInfo<'_>;
    let _485: anchor_lang::prelude::AccountInfo<'_>;
    let mut _486: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _487: usize;
    let mut _488: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, usize>;
    let mut _489: std::result::Result<usize, anchor_lang::prelude::ProgramError>;
    let mut _490: &anchor_lang::prelude::AccountInfo<'_>;
    let _491: anchor_lang::prelude::AccountInfo<'_>;
    let mut _492: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _493: isize;
    let mut _495: !;
    let mut _496: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _498: !;
    let mut _499: anchor_lang::error::Error;
    let mut _500: anchor_lang::error::Error;
    let mut _501: anchor_lang::error::ErrorCode;
    let mut _504: (anchor_lang::prelude::Pubkey, u8);
    let mut _505: &[&[u8]];
    let mut _506: &[&[u8]; 2];
    let _507: &[&[u8]; 2];
    let _508: [&[u8]; 2];
    let mut _509: &[u8];
    let mut _510: &[u8; 11];
    let _511: &[u8; 11];
    let mut _512: &[u8];
    let _513: &[u8];
    let mut _514: &[u8; 2];
    let _515: [u8; 2];
    let mut _516: u16;
    let mut _517: &anchor_lang::prelude::Pubkey;
    let _518: &&anchor_lang::prelude::Pubkey;
    let mut _519: u8;
    let _520: ();
    let mut _521: bool;
    let mut _522: &anchor_lang::prelude::Pubkey;
    let _523: anchor_lang::prelude::Pubkey;
    let mut _524: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _525: &anchor_lang::prelude::Pubkey;
    let mut _526: !;
    let mut _527: anchor_lang::error::Error;
    let mut _528: anchor_lang::error::Error;
    let mut _529: anchor_lang::error::Error;
    let mut _530: anchor_lang::error::ErrorCode;
    let mut _531: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _532: anchor_lang::prelude::Pubkey;
    let mut _533: &anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _534: anchor_lang::prelude::Pubkey;
    let _535: ();
    let mut _536: bool;
    let mut _537: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _538: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _539: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _540: !;
    let mut _541: anchor_lang::error::Error;
    let mut _542: anchor_lang::error::Error;
    let mut _543: anchor_lang::error::ErrorCode;
    let _544: ();
    let mut _546: &state::user::UserStats;
    let mut _547: &std::cell::Ref<'_, state::user::UserStats>;
    let _548: std::cell::Ref<'_, state::user::UserStats>;
    let mut _549: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::user::UserStats>>;
    let mut _550: std::result::Result<std::cell::Ref<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _551: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _552: isize;
    let mut _554: !;
    let mut _555: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _558: &anchor_lang::prelude::Signer<'_>;
    let mut _559: bool;
    let mut _560: &anchor_lang::prelude::Pubkey;
    let mut _561: &anchor_lang::prelude::Pubkey;
    let mut _562: !;
    let mut _563: anchor_lang::error::Error;
    let mut _564: anchor_lang::error::Error;
    let mut _565: anchor_lang::error::Error;
    let mut _566: anchor_lang::error::ErrorCode;
    let mut _567: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _568: anchor_lang::prelude::Pubkey;
    let mut _569: anchor_lang::prelude::Pubkey;
    let _570: ();
    let mut _571: bool;
    let mut _572: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _573: &anchor_lang::prelude::Signer<'_>;
    let _574: &anchor_lang::prelude::Signer<'_>;
    let mut _575: !;
    let mut _576: anchor_lang::error::Error;
    let mut _577: anchor_lang::error::Error;
    let mut _578: anchor_lang::error::ErrorCode;
    let mut _579: instructions::if_staker::InitializeInsuranceFundStake<'_>;
    let mut _580: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
    let mut _581: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
    let mut _582: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _583: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _584: anchor_lang::prelude::Signer<'_>;
    let mut _585: anchor_lang::prelude::Signer<'_>;
    let mut _586: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
    let mut _587: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
    let mut _591: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _592: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _593: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _594: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _595: &anchor_lang::prelude::Pubkey;
    let mut _596: &anchor_lang::prelude::Pubkey;
    let mut _597: &anchor_lang::prelude::Pubkey;
    let mut _598: &anchor_lang::prelude::Pubkey;
    let mut _599: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _600: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _601: &anchor_lang::prelude::Pubkey;
    let mut _602: bool;
    let mut _603: bool;
    let mut _604: bool;
    let mut _605: bool;
    let mut _606: bool;
    let mut _607: bool;
    let mut _608: bool;
    let mut _609: bool;
    let mut _610: bool;
    let mut _611: bool;
    let mut _612: bool;
    let mut _613: bool;
    let mut _614: bool;
    let mut _615: bool;
    let mut _616: isize;
    let mut _617: isize;
    let mut _618: isize;
    let mut _619: isize;
    let mut _620: isize;
    let mut _621: isize;
    let mut _622: isize;
    let mut _623: isize;
    let mut _624: isize;
    let mut _625: isize;
    let mut _626: isize;
    let mut _627: isize;
    let mut _628: isize;
    let mut _629: isize;
    let mut _630: isize;
    let mut _631: isize;
    let mut _632: isize;
    let mut _633: isize;
    let mut _634: isize;
    let mut _635: isize;
    let mut _636: isize;
    let mut _637: isize;
    let mut _638: isize;
    let mut _639: isize;
    let mut _640: isize;
    let mut _641: isize;
    let mut _642: isize;
    let mut _643: isize;
    let mut _644: isize;
    let mut _645: isize;
    let mut _646: isize;
    let mut _647: isize;
    let mut _648: isize;
    let mut _649: isize;
    let mut _650: isize;
    let mut _651: isize;
    let mut _652: isize;
    let mut _653: isize;
    let mut _654: isize;
    let mut _655: isize;
    let mut _656: isize;
    let mut _657: isize;
    let mut _658: isize;
    let mut _659: isize;
    let mut _660: isize;
    let mut _661: isize;
    let mut _662: isize;
    let mut _663: isize;
    let mut _664: isize;
    let mut _665: isize;
    let mut _666: isize;
    let mut _667: isize;
    let mut _668: isize;
    let mut _669: isize;
    let mut _670: isize;
    let mut _671: isize;
    let mut _672: isize;
    let mut _673: isize;
    let mut _674: isize;
    let mut _675: isize;
    let mut _676: isize;
    let mut _677: isize;
    let mut _678: isize;
    let mut _679: isize;
    let mut _680: isize;
    let mut _681: isize;
    let mut _682: isize;
    let mut _683: isize;
    let mut _684: isize;
    let mut _685: isize;
    let mut _686: isize;
    let mut _687: isize;
    let mut _688: isize;
    let mut _689: isize;
    let mut _690: isize;
    let mut _691: isize;
    let mut _692: isize;
    let mut _693: isize;
    let mut _694: isize;
    let mut _695: isize;
    let mut _696: isize;
    let mut _697: isize;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _19: <instructions::if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::InitializeInsuranceFundStakeBumps>>::try_accounts::__Args;
        scope 2 {
            debug market_index => _7;
            let _20: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            let _31: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _34: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>;
            scope 7 {
                debug spot_market => _20;
                let _41: &anchor_lang::prelude::AccountInfo<'_>;
                scope 12 {
                    debug insurance_fund_stake => _41;
                    let _50: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    let _61: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _64: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                    scope 13 {
                        debug user_stats => _50;
                        let _65: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        let _76: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _79: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
                        scope 18 {
                            debug state => _65;
                            let _80: anchor_lang::prelude::Signer<'_>;
                            let _91: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _94: anchor_lang::prelude::Signer<'_>;
                            scope 23 {
                                debug authority => _80;
                                let _95: anchor_lang::prelude::Signer<'_>;
                                let _106: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _109: anchor_lang::prelude::Signer<'_>;
                                scope 28 {
                                    debug payer => _95;
                                    let _110: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                    let _121: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _124: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>;
                                    scope 33 {
                                        debug rent => _110;
                                        let _125: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                        let _136: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _139: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>;
                                        scope 38 {
                                            debug system_program => _125;
                                            let _140: anchor_lang::prelude::Rent;
                                            let _144: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                            let _147: anchor_lang::prelude::Rent;
                                            scope 43 {
                                                debug __anchor_rent => _140;
                                                let _148: anchor_lang::prelude::Pubkey;
                                                let _149: u8;
                                                scope 48 {
                                                    debug __pda_address => _148;
                                                    debug __bump => _149;
                                                    let _185: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
                                                    let _186: &anchor_lang::prelude::AccountInfo<'_>;
                                                    scope 49 {
                                                        debug insurance_fund_stake => _185;
                                                        let _494: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
                                                        let _497: usize;
                                                        let _502: anchor_lang::prelude::Pubkey;
                                                        let _503: u8;
                                                        scope 87 {
                                                            debug residual => _494;
                                                            scope 88 {
                                                            }
                                                        }
                                                        scope 89 {
                                                            debug val => _497;
                                                            scope 90 {
                                                            }
                                                        }
                                                        scope 91 {
                                                            debug __pda_address => _502;
                                                            debug __bump => _503;
                                                            let _545: anchor_lang::prelude::Pubkey;
                                                            let _553: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _556: std::cell::Ref<'_, state::user::UserStats>;
                                                            scope 92 {
                                                                debug my_key => _545;
                                                                let _557: anchor_lang::prelude::Pubkey;
                                                                scope 97 {
                                                                    debug target_key => _557;
                                                                }
                                                            }
                                                            scope 93 {
                                                                debug residual => _553;
                                                                scope 94 {
                                                                }
                                                            }
                                                            scope 95 {
                                                                debug val => _556;
                                                                scope 96 {
                                                                }
                                                            }
                                                        }
                                                    }
                                                    scope 50 {
                                                        debug actual_field => _186;
                                                        let _189: &anchor_lang::prelude::Pubkey;
                                                        scope 51 {
                                                            debug actual_owner => _189;
                                                            let _190: usize;
                                                            scope 52 {
                                                                debug space => _190;
                                                                let _191: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
                                                                let _198: u64;
                                                                let _425: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
                                                                let _426: anchor_lang::error::Error;
                                                                let mut _590: &&anchor_lang::prelude::Pubkey;
                                                                scope 53 {
                                                                    debug pa => _191;
                                                                    let _458: u64;
                                                                    scope 86 {
                                                                        debug required_lamports => _458;
                                                                    }
                                                                }
                                                                scope 54 {
                                                                    debug __current_lamports => _198;
                                                                    let _203: usize;
                                                                    let _288: u64;
                                                                    let _416: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>;
                                                                    let _417: anchor_lang::error::Error;
                                                                    let mut _588: &anchor_lang::error::ErrorCode;
                                                                    let mut _589: &anchor_lang::error::ErrorCode;
                                                                    scope 55 {
                                                                        debug space => _203;
                                                                        let _204: u64;
                                                                        scope 56 {
                                                                            debug lamports => _204;
                                                                            let _207: anchor_lang::system_program::CreateAccount<'_>;
                                                                            scope 57 {
                                                                                debug cpi_accounts => _207;
                                                                                let _212: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>;
                                                                                scope 58 {
                                                                                    debug cpi_context => _212;
                                                                                    let _255: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                    let _258: ();
                                                                                    scope 59 {
                                                                                        debug residual => _255;
                                                                                        scope 60 {
                                                                                        }
                                                                                    }
                                                                                    scope 61 {
                                                                                        debug val => _258;
                                                                                        scope 62 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 63 {
                                                                        debug required_lamports => _288;
                                                                        let _297: anchor_lang::system_program::Transfer<'_>;
                                                                        let _316: anchor_lang::system_program::Allocate<'_>;
                                                                        scope 64 {
                                                                            debug cpi_accounts => _297;
                                                                            let _302: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>;
                                                                            scope 65 {
                                                                                debug cpi_context => _302;
                                                                                let _312: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _315: ();
                                                                                scope 66 {
                                                                                    debug residual => _312;
                                                                                    scope 67 {
                                                                                    }
                                                                                }
                                                                                scope 68 {
                                                                                    debug val => _315;
                                                                                    scope 69 {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 70 {
                                                                            debug cpi_accounts => _316;
                                                                            let _319: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>;
                                                                            scope 71 {
                                                                                debug cpi_context => _319;
                                                                                let _360: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                let _363: ();
                                                                                let _364: anchor_lang::system_program::Assign<'_>;
                                                                                scope 72 {
                                                                                    debug residual => _360;
                                                                                    scope 73 {
                                                                                    }
                                                                                }
                                                                                scope 74 {
                                                                                    debug val => _363;
                                                                                    scope 75 {
                                                                                    }
                                                                                }
                                                                                scope 76 {
                                                                                    debug cpi_accounts => _364;
                                                                                    let _367: anchor_lang::context::CpiContext<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>;
                                                                                    scope 77 {
                                                                                        debug cpi_context => _367;
                                                                                        let _407: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                                        let _410: ();
                                                                                        scope 78 {
                                                                                            debug residual => _407;
                                                                                            scope 79 {
                                                                                            }
                                                                                        }
                                                                                        scope 80 {
                                                                                            debug val => _410;
                                                                                            scope 81 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    scope 82 {
                                                                        debug val => _416;
                                                                    }
                                                                    scope 83 {
                                                                        debug e => _417;
                                                                    }
                                                                }
                                                                scope 84 {
                                                                    debug val => _425;
                                                                }
                                                                scope 85 {
                                                                    debug e => _426;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 44 {
                                                debug residual => _144;
                                                scope 45 {
                                                }
                                            }
                                            scope 46 {
                                                debug val => _147;
                                                scope 47 {
                                                }
                                            }
                                        }
                                        scope 39 {
                                            debug residual => _136;
                                            scope 40 {
                                            }
                                        }
                                        scope 41 {
                                            debug val => _139;
                                            scope 42 {
                                            }
                                        }
                                    }
                                    scope 34 {
                                        debug residual => _121;
                                        scope 35 {
                                        }
                                    }
                                    scope 36 {
                                        debug val => _124;
                                        scope 37 {
                                        }
                                    }
                                }
                                scope 29 {
                                    debug residual => _106;
                                    scope 30 {
                                    }
                                }
                                scope 31 {
                                    debug val => _109;
                                    scope 32 {
                                    }
                                }
                            }
                            scope 24 {
                                debug residual => _91;
                                scope 25 {
                                }
                            }
                            scope 26 {
                                debug val => _94;
                                scope 27 {
                                }
                            }
                        }
                        scope 19 {
                            debug residual => _76;
                            scope 20 {
                            }
                        }
                        scope 21 {
                            debug val => _79;
                            scope 22 {
                            }
                        }
                    }
                    scope 14 {
                        debug residual => _61;
                        scope 15 {
                        }
                    }
                    scope 16 {
                        debug val => _64;
                        scope 17 {
                        }
                    }
                }
            }
            scope 8 {
                debug residual => _31;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _34;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _16;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _19;
            scope 6 {
            }
        }
    }

    bb0: {
        _615 = const false;
        _614 = const false;
        _613 = const false;
        _612 = const false;
        _611 = const false;
        _610 = const false;
        _609 = const false;
        _608 = const false;
        _607 = const false;
        _606 = const false;
        _604 = const false;
        _605 = const false;
        _603 = const false;
        _602 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        _13 = &mut _6;
        _12 = &mut (*_13);
        _11 = <<if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, InitializeInsuranceFundStakeBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_12);
        StorageLive(_14);
        _14 = {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
        _10 = std::result::Result::<<if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, InitializeInsuranceFundStakeBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18}>(move _11, move _14) -> [return: bb2, unwind: bb278];
    }

    bb2: {
        StorageDead(_14);
        StorageDead(_11);
        _9 = <std::result::Result<<if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, InitializeInsuranceFundStakeBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_10);
        _15 = discriminant(_9);
        switchInt(move _15) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_19);
        _19 = move ((_9 as Continue).0: <instructions::if_staker::InitializeInsuranceFundStake<'info> as anchor_lang::Accounts<'info, instructions::if_staker::InitializeInsuranceFundStakeBumps>>::try_accounts::__Args);
        _8 = move _19;
        StorageDead(_19);
        StorageLive(_7);
        _7 = (_8.0: u16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = &(*_1);
        StorageLive(_25);
        _25 = &mut (*_2);
        StorageLive(_26);
        _26 = &(*_6);
        StorageLive(_27);
        _27 = &mut (*_4);
        StorageLive(_28);
        _28 = &mut (*_5);
        _23 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Accounts<'_, InitializeInsuranceFundStakeBumps>>::try_accounts(move _24, move _25, move _26, move _27, move _28) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_16);
        _16 = ((_9 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_18);
        _18 = _16;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _18) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb268;
    }

    bb8: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_29);
        _29 = {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
        _22 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18}>(move _23, move _29) -> [return: bb9, unwind: bb278];
    }

    bb9: {
        StorageDead(_29);
        StorageDead(_23);
        _21 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, SpotMarket>, anchor_lang::error::Error> as Try>::branch(move _22) -> [return: bb10, unwind: bb278];
    }

    bb10: {
        StorageDead(_22);
        _30 = discriminant(_21);
        switchInt(move _30) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_34);
        _34 = move ((_21 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::spot_market::SpotMarket>);
        _20 = move _34;
        StorageDead(_34);
        _616 = discriminant(_21);
        StorageDead(_21);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _591 = deref_copy (*_2);
        _37 = &(*_591);
        _36 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::is_empty(move _37) -> [return: bb14, unwind continue];
    }

    bb12: {
        StorageLive(_31);
        _31 = move ((_21 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_33);
        _33 = move _31;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _33) -> [return: bb13, unwind: bb317];
    }

    bb13: {
        StorageDead(_33);
        StorageDead(_31);
        _680 = discriminant(_21);
        StorageDead(_21);
        goto -> bb267;
    }

    bb14: {
        switchInt(move _36) -> [0: bb17, otherwise: bb15];
    }

    bb15: {
        StorageDead(_37);
        StorageLive(_39);
        StorageLive(_40);
        _40 = AccountNotEnoughKeys;
        _39 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _39);
        StorageDead(_39);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb267;
    }

    bb17: {
        StorageDead(_37);
        _35 = const ();
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_41);
        StorageLive(_42);
        _42 = const 0_usize;
        _592 = deref_copy (*_2);
        _43 = Len((*_592));
        _44 = Lt(_42, _43);
        assert(move _44, "index out of bounds: the length is {} but the index is {}", move _43, _42) -> [success: bb18, unwind continue];
    }

    bb18: {
        _593 = deref_copy (*_2);
        _41 = &(*_593)[_42];
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _594 = deref_copy (*_2);
        _48 = &(*_594);
        StorageLive(_49);
        _49 = RangeFrom::<usize> { start: const 1_usize };
        _47 = <[anchor_lang::prelude::AccountInfo<'_>] as Index<RangeFrom<usize>>>::index(move _48, move _49) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_48);
        _46 = &(*_47);
        _45 = &(*_46);
        (*_2) = move _45;
        StorageDead(_45);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        _54 = &(*_1);
        StorageLive(_55);
        _55 = &mut (*_2);
        StorageLive(_56);
        _56 = &(*_6);
        StorageLive(_57);
        _57 = &mut (*_4);
        StorageLive(_58);
        _58 = &mut (*_5);
        _53 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, InitializeInsuranceFundStakeBumps>>::try_accounts(move _54, move _55, move _56, move _57, move _58) -> [return: bb20, unwind continue];
    }

    bb20: {
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_54);
        StorageLive(_59);
        _59 = {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
        _52 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18}>(move _53, move _59) -> [return: bb21, unwind: bb278];
    }

    bb21: {
        StorageDead(_59);
        StorageDead(_53);
        _51 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _52) -> [return: bb22, unwind: bb278];
    }

    bb22: {
        StorageDead(_52);
        _60 = discriminant(_51);
        switchInt(move _60) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_64);
        _64 = move ((_51 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _50 = move _64;
        StorageDead(_64);
        _618 = discriminant(_51);
        StorageDead(_51);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &(*_1);
        StorageLive(_70);
        _70 = &mut (*_2);
        StorageLive(_71);
        _71 = &(*_6);
        StorageLive(_72);
        _72 = &mut (*_4);
        StorageLive(_73);
        _73 = &mut (*_5);
        _68 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, InitializeInsuranceFundStakeBumps>>::try_accounts(move _69, move _70, move _71, move _72, move _73) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_61);
        _61 = move ((_51 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_63);
        _63 = move _61;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _63) -> [return: bb25, unwind: bb316];
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_61);
        _678 = discriminant(_51);
        StorageDead(_51);
        goto -> bb266;
    }

    bb26: {
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageLive(_74);
        _74 = {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
        _67 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18}>(move _68, move _74) -> [return: bb27, unwind: bb278];
    }

    bb27: {
        StorageDead(_74);
        StorageDead(_68);
        _66 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _67) -> [return: bb28, unwind: bb278];
    }

    bb28: {
        StorageDead(_67);
        _75 = discriminant(_66);
        switchInt(move _75) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_79);
        _79 = move ((_66 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _65 = move _79;
        StorageDead(_79);
        _620 = discriminant(_66);
        StorageDead(_66);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        StorageLive(_85);
        _85 = &mut (*_2);
        StorageLive(_86);
        _86 = &(*_6);
        StorageLive(_87);
        _87 = &mut (*_4);
        StorageLive(_88);
        _88 = &mut (*_5);
        _83 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeInsuranceFundStakeBumps>>::try_accounts(move _84, move _85, move _86, move _87, move _88) -> [return: bb32, unwind: bb277];
    }

    bb30: {
        StorageLive(_76);
        _76 = move ((_66 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_78);
        _78 = move _76;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _78) -> [return: bb31, unwind: bb315];
    }

    bb31: {
        StorageDead(_78);
        StorageDead(_76);
        _676 = discriminant(_66);
        StorageDead(_66);
        goto -> bb265;
    }

    bb32: {
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageDead(_84);
        StorageLive(_89);
        _89 = {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
        _82 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18}>(move _83, move _89) -> [return: bb33, unwind: bb277];
    }

    bb33: {
        StorageDead(_89);
        StorageDead(_83);
        _81 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _82) -> [return: bb34, unwind: bb277];
    }

    bb34: {
        StorageDead(_82);
        _90 = discriminant(_81);
        switchInt(move _90) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_94);
        _94 = move ((_81 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _80 = move _94;
        StorageDead(_94);
        _622 = discriminant(_81);
        StorageDead(_81);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_1);
        StorageLive(_100);
        _100 = &mut (*_2);
        StorageLive(_101);
        _101 = &(*_6);
        StorageLive(_102);
        _102 = &mut (*_4);
        StorageLive(_103);
        _103 = &mut (*_5);
        _98 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, InitializeInsuranceFundStakeBumps>>::try_accounts(move _99, move _100, move _101, move _102, move _103) -> [return: bb38, unwind: bb277];
    }

    bb36: {
        StorageLive(_91);
        _91 = move ((_81 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_93);
        _93 = move _91;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _93) -> [return: bb37, unwind: bb314];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _674 = discriminant(_81);
        StorageDead(_81);
        goto -> bb264;
    }

    bb38: {
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageDead(_99);
        StorageLive(_104);
        _104 = {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
        _97 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18}>(move _98, move _104) -> [return: bb39, unwind: bb277];
    }

    bb39: {
        StorageDead(_104);
        StorageDead(_98);
        _96 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _97) -> [return: bb40, unwind: bb277];
    }

    bb40: {
        StorageDead(_97);
        _105 = discriminant(_96);
        switchInt(move _105) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_109);
        _109 = move ((_96 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _95 = move _109;
        StorageDead(_109);
        _624 = discriminant(_96);
        StorageDead(_96);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        _114 = &(*_1);
        StorageLive(_115);
        _115 = &mut (*_2);
        StorageLive(_116);
        _116 = &(*_6);
        StorageLive(_117);
        _117 = &mut (*_4);
        StorageLive(_118);
        _118 = &mut (*_5);
        _113 = <anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent> as anchor_lang::Accounts<'_, InitializeInsuranceFundStakeBumps>>::try_accounts(move _114, move _115, move _116, move _117, move _118) -> [return: bb44, unwind: bb277];
    }

    bb42: {
        StorageLive(_106);
        _106 = move ((_96 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_108);
        _108 = move _106;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _108) -> [return: bb43, unwind: bb313];
    }

    bb43: {
        StorageDead(_108);
        StorageDead(_106);
        _672 = discriminant(_96);
        StorageDead(_96);
        goto -> bb263;
    }

    bb44: {
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageDead(_114);
        StorageLive(_119);
        _119 = {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
        _112 = std::result::Result::<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18}>(move _113, move _119) -> [return: bb45, unwind: bb277];
    }

    bb45: {
        StorageDead(_119);
        StorageDead(_113);
        _111 = <std::result::Result<anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>, anchor_lang::error::Error> as Try>::branch(move _112) -> [return: bb46, unwind: bb277];
    }

    bb46: {
        StorageDead(_112);
        _120 = discriminant(_111);
        switchInt(move _120) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_124);
        _124 = move ((_111 as Continue).0: anchor_lang::prelude::Sysvar<'_, anchor_lang::prelude::Rent>);
        _110 = move _124;
        StorageDead(_124);
        _626 = discriminant(_111);
        StorageDead(_111);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &(*_1);
        StorageLive(_130);
        _130 = &mut (*_2);
        StorageLive(_131);
        _131 = &(*_6);
        StorageLive(_132);
        _132 = &mut (*_4);
        StorageLive(_133);
        _133 = &mut (*_5);
        _128 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::Accounts<'_, InitializeInsuranceFundStakeBumps>>::try_accounts(move _129, move _130, move _131, move _132, move _133) -> [return: bb50, unwind: bb277];
    }

    bb48: {
        StorageLive(_121);
        _121 = move ((_111 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_123);
        _123 = move _121;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _123) -> [return: bb49, unwind: bb312];
    }

    bb49: {
        StorageDead(_123);
        StorageDead(_121);
        _670 = discriminant(_111);
        StorageDead(_111);
        goto -> bb262;
    }

    bb50: {
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_129);
        StorageLive(_134);
        _134 = {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18};
        _127 = std::result::Result::<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/if_staker.rs:827:10: 827:18}>(move _128, move _134) -> [return: bb51, unwind: bb277];
    }

    bb51: {
        StorageDead(_134);
        StorageDead(_128);
        _126 = <std::result::Result<anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>, anchor_lang::error::Error> as Try>::branch(move _127) -> [return: bb52, unwind: bb277];
    }

    bb52: {
        StorageDead(_127);
        _135 = discriminant(_126);
        switchInt(move _135) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_139);
        _139 = move ((_126 as Continue).0: anchor_lang::prelude::Program<'_, anchor_lang::system_program::System>);
        _125 = move _139;
        StorageDead(_139);
        _628 = discriminant(_126);
        StorageDead(_126);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _142 = <anchor_lang::prelude::Rent as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb56, unwind: bb277];
    }

    bb54: {
        StorageLive(_136);
        _136 = move ((_126 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_138);
        _138 = move _136;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _138) -> [return: bb55, unwind: bb311];
    }

    bb55: {
        StorageDead(_138);
        StorageDead(_136);
        _668 = discriminant(_126);
        StorageDead(_126);
        goto -> bb261;
    }

    bb56: {
        _141 = <std::result::Result<anchor_lang::prelude::Rent, anchor_lang::prelude::ProgramError> as Try>::branch(move _142) -> [return: bb57, unwind: bb277];
    }

    bb57: {
        StorageDead(_142);
        _143 = discriminant(_141);
        switchInt(move _143) -> [0: bb58, 1: bb59, otherwise: bb5];
    }

    bb58: {
        StorageLive(_147);
        _147 = ((_141 as Continue).0: anchor_lang::prelude::Rent);
        _140 = _147;
        StorageDead(_147);
        _630 = discriminant(_141);
        StorageDead(_141);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = const b"insurance_fund_stake";
        _156 = &(*_157);
        _155 = move _156 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_156);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        _162 = &_80;
        _161 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _162) -> [return: bb61, unwind: bb277];
    }

    bb59: {
        StorageLive(_144);
        _144 = move ((_141 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_146);
        _146 = move _144;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _146) -> [return: bb60, unwind: bb310];
    }

    bb60: {
        StorageDead(_146);
        StorageDead(_144);
        _666 = discriminant(_141);
        StorageDead(_141);
        goto -> bb260;
    }

    bb61: {
        StorageDead(_162);
        _595 = deref_copy ((*_161).0: &anchor_lang::prelude::Pubkey);
        _160 = &(*_595);
        _159 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _160) -> [return: bb62, unwind: bb277];
    }

    bb62: {
        _158 = &(*_159);
        StorageDead(_160);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        _167 = _7;
        _166 = core::num::<impl u16>::to_le_bytes(move _167) -> [return: bb63, unwind: bb277];
    }

    bb63: {
        _165 = &_166;
        StorageDead(_167);
        _164 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _165) -> [return: bb64, unwind: bb277];
    }

    bb64: {
        _163 = &(*_164);
        StorageDead(_165);
        _154 = [move _155, move _158, move _163];
        StorageDead(_163);
        StorageDead(_158);
        StorageDead(_155);
        _153 = &_154;
        _152 = &(*_153);
        _151 = move _152 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_152);
        StorageLive(_168);
        _168 = &(*_1);
        _150 = anchor_lang::prelude::Pubkey::find_program_address(move _151, move _168) -> [return: bb65, unwind: bb277];
    }

    bb65: {
        StorageDead(_168);
        StorageDead(_151);
        StorageLive(_148);
        _148 = (_150.0: anchor_lang::prelude::Pubkey);
        StorageLive(_149);
        _149 = (_150.1: u8);
        StorageDead(_166);
        StorageDead(_164);
        StorageDead(_161);
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_150);
        StorageLive(_169);
        _169 = _149;
        ((*_4).1: u8) = move _169;
        StorageDead(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        _174 = &(*_41);
        _173 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _174) -> [return: bb66, unwind: bb277];
    }

    bb66: {
        _172 = &_173;
        StorageDead(_174);
        StorageLive(_175);
        _175 = &_148;
        _171 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _172, move _175) -> [return: bb67, unwind: bb277];
    }

    bb67: {
        switchInt(move _171) -> [0: bb73, otherwise: bb68];
    }

    bb68: {
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_172);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        _180 = ConstraintSeeds;
        _179 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _180) -> [return: bb69, unwind: bb277];
    }

    bb69: {
        StorageDead(_180);
        _178 = anchor_lang::error::Error::with_account_name::<&str>(move _179, const "insurance_fund_stake") -> [return: bb70, unwind: bb277];
    }

    bb70: {
        _615 = const true;
        StorageDead(_179);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        _183 = &(*_41);
        _182 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _183) -> [return: bb71, unwind: bb309];
    }

    bb71: {
        StorageDead(_183);
        StorageLive(_184);
        _184 = _148;
        _181 = (move _182, move _184);
        StorageDead(_184);
        StorageDead(_182);
        _615 = const false;
        _177 = anchor_lang::error::Error::with_pubkeys(move _178, move _181) -> [return: bb72, unwind: bb309];
    }

    bb72: {
        StorageDead(_181);
        _615 = const false;
        StorageDead(_178);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _177);
        StorageDead(_177);
        StorageDead(_171);
        StorageDead(_170);
        goto -> bb259;
    }

    bb73: {
        StorageDead(_175);
        StorageDead(_173);
        StorageDead(_172);
        _170 = const ();
        StorageDead(_171);
        StorageDead(_170);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        _188 = &_41;
        _187 = &(*_188);
        _186 = <&anchor_lang::prelude::AccountInfo<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _187) -> [return: bb74, unwind: bb277];
    }

    bb74: {
        StorageDead(_187);
        StorageDead(_188);
        StorageLive(_189);
        _189 = ((*_186).3: &anchor_lang::prelude::Pubkey);
        StorageLive(_190);
        _190 = const _;
        StorageLive(_191);
        StorageLive(_192);
        _192 = const false;
        switchInt(move _192) -> [0: bb77, otherwise: bb75];
    }

    bb75: {
        StorageLive(_193);
        StorageLive(_194);
        _194 = &_189;
        StorageLive(_195);
        _590 = const _;
        _195 = &(*_590);
        _193 = <&anchor_lang::prelude::Pubkey as PartialEq>::eq(move _194, move _195) -> [return: bb76, unwind: bb277];
    }

    bb76: {
        switchInt(move _193) -> [0: bb160, otherwise: bb77];
    }

    bb77: {
        StorageDead(_195);
        StorageDead(_194);
        StorageLive(_198);
        StorageLive(_199);
        _199 = &(*_41);
        _198 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _199) -> [return: bb78, unwind: bb277];
    }

    bb78: {
        StorageDead(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        _202 = _198;
        _201 = Eq(move _202, const 0_u64);
        switchInt(move _201) -> [0: bb97, otherwise: bb79];
    }

    bb79: {
        StorageDead(_202);
        StorageLive(_203);
        _203 = _190;
        StorageLive(_204);
        StorageLive(_205);
        _205 = &_140;
        StorageLive(_206);
        _206 = _203;
        _204 = anchor_lang::prelude::Rent::minimum_balance(move _205, move _206) -> [return: bb80, unwind: bb277];
    }

    bb80: {
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_95;
        _208 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _209) -> [return: bb81, unwind: bb277];
    }

    bb81: {
        StorageDead(_209);
        StorageLive(_210);
        StorageLive(_211);
        _211 = &(*_41);
        _210 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _211) -> [return: bb82, unwind: bb276];
    }

    bb82: {
        StorageDead(_211);
        _614 = const true;
        _207 = anchor_lang::system_program::CreateAccount::<'_> { from: move _208, to: move _210 };
        StorageDead(_210);
        StorageDead(_208);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        _214 = &_125;
        _213 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _214) -> [return: bb83, unwind: bb307];
    }

    bb83: {
        StorageDead(_214);
        StorageLive(_215);
        _614 = const false;
        _215 = move _207;
        _212 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::new(move _213, move _215) -> [return: bb84, unwind: bb307];
    }

    bb84: {
        StorageDead(_215);
        StorageDead(_213);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _613 = const true;
        _220 = move _212;
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = const b"insurance_fund_stake";
        _231 = &(*_232);
        _230 = move _231 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_231);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        _236 = &_80;
        _235 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _236) -> [return: bb85, unwind: bb305];
    }

    bb85: {
        StorageDead(_236);
        _596 = deref_copy ((*_235).0: &anchor_lang::prelude::Pubkey);
        _234 = &(*_596);
        _233 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _234) -> [return: bb86, unwind: bb305];
    }

    bb86: {
        StorageDead(_234);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = _7;
        _240 = core::num::<impl u16>::to_le_bytes(move _241) -> [return: bb87, unwind: bb305];
    }

    bb87: {
        _239 = &_240;
        StorageDead(_241);
        _238 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _239) -> [return: bb88, unwind: bb305];
    }

    bb88: {
        _237 = &(*_238);
        StorageDead(_239);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        StorageLive(_247);
        _247 = _149;
        _246 = [move _247];
        _245 = &_246;
        StorageDead(_247);
        StorageLive(_248);
        _248 = RangeFull;
        _244 = <[u8; 1] as Index<RangeFull>>::index(move _245, move _248) -> [return: bb89, unwind: bb305];
    }

    bb89: {
        StorageDead(_248);
        StorageDead(_245);
        _243 = &(*_244);
        _242 = &(*_243);
        _229 = [move _230, move _233, move _237, move _242];
        _228 = &_229;
        StorageDead(_242);
        StorageDead(_237);
        StorageDead(_233);
        StorageDead(_230);
        StorageLive(_249);
        _249 = RangeFull;
        _227 = <[&[u8]; 4] as Index<RangeFull>>::index(move _228, move _249) -> [return: bb90, unwind: bb305];
    }

    bb90: {
        StorageDead(_249);
        StorageDead(_228);
        _226 = &(*_227);
        _225 = &(*_226);
        _224 = [move _225];
        StorageDead(_225);
        _223 = &_224;
        _222 = &(*_223);
        _221 = move _222 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_222);
        _613 = const false;
        _219 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::CreateAccount<'_>>::with_signer(move _220, move _221) -> [return: bb91, unwind: bb305];
    }

    bb91: {
        StorageDead(_221);
        _613 = const false;
        StorageDead(_220);
        StorageLive(_250);
        _250 = _204;
        StorageLive(_251);
        StorageLive(_252);
        _252 = _203;
        _251 = move _252 as u64 (IntToInt);
        StorageDead(_252);
        StorageLive(_253);
        _253 = &(*_1);
        _218 = anchor_lang::system_program::create_account(move _219, move _250, move _251, move _253) -> [return: bb92, unwind: bb307];
    }

    bb92: {
        StorageDead(_253);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_219);
        _217 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _218) -> [return: bb93, unwind: bb307];
    }

    bb93: {
        StorageDead(_218);
        _254 = discriminant(_217);
        switchInt(move _254) -> [0: bb94, 1: bb95, otherwise: bb5];
    }

    bb94: {
        StorageLive(_258);
        _258 = ((_217 as Continue).0: ());
        _216 = _258;
        StorageDead(_258);
        _632 = discriminant(_217);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_217);
        StorageDead(_216);
        _200 = const ();
        StorageDead(_212);
        _614 = const false;
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb155;
    }

    bb95: {
        StorageLive(_255);
        _255 = move ((_217 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_257);
        _257 = move _255;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _257) -> [return: bb96, unwind: bb303];
    }

    bb96: {
        StorageDead(_257);
        StorageDead(_255);
        _664 = discriminant(_217);
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_243);
        StorageDead(_240);
        StorageDead(_238);
        StorageDead(_235);
        StorageDead(_232);
        StorageDead(_229);
        StorageDead(_227);
        StorageDead(_226);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_217);
        StorageDead(_216);
        StorageDead(_212);
        _614 = const false;
        StorageDead(_207);
        StorageDead(_204);
        StorageDead(_203);
        goto -> bb255;
    }

    bb97: {
        StorageDead(_202);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        _263 = &_95;
        _262 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _263) -> [return: bb98, unwind: bb277];
    }

    bb98: {
        _261 = &_262;
        StorageDead(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = &(*_41);
        _265 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _266) -> [return: bb99, unwind: bb277];
    }

    bb99: {
        _264 = &_265;
        StorageDead(_266);
        _260 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _261, move _264) -> [return: bb100, unwind: bb277];
    }

    bb100: {
        switchInt(move _260) -> [0: bb109, otherwise: bb101];
    }

    bb101: {
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_261);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _589 = const _;
        _272 = &(*_589);
        _271 = anchor_lang::error::ErrorCode::name(move _272) -> [return: bb102, unwind: bb277];
    }

    bb102: {
        StorageDead(_272);
        StorageLive(_274);
        StorageLive(_275);
        _275 = TryingToInitPayerAsProgramAccount;
        _274 = <anchor_lang::error::ErrorCode as Into<u32>>::into(move _275) -> [return: bb103, unwind: bb275];
    }

    bb103: {
        StorageDead(_275);
        StorageLive(_276);
        StorageLive(_277);
        _588 = const _;
        _277 = &(*_588);
        _276 = <anchor_lang::error::ErrorCode as ToString>::to_string(move _277) -> [return: bb104, unwind: bb275];
    }

    bb104: {
        StorageDead(_277);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = anchor_lang::error::Source { filename: const "programs/drift/src/instructions/if_staker.rs", line: const 827_u32 };
        _280 = anchor_lang::error::ErrorOrigin::Source(move _281);
        StorageDead(_281);
        _279 = Option::<ErrorOrigin>::Some(move _280);
        StorageDead(_280);
        StorageLive(_282);
        _282 = Option::<ComparedValues>::None;
        _270 = anchor_lang::error::AnchorError { error_name: move _271, error_code_number: move _274, error_msg: move _276, error_origin: move _279, compared_values: move _282 };
        StorageDead(_282);
        StorageDead(_279);
        StorageDead(_276);
        StorageDead(_274);
        StorageDead(_271);
        _269 = <anchor_lang::error::Error as From<anchor_lang::error::AnchorError>>::from(move _270) -> [return: bb105, unwind: bb277];
    }

    bb105: {
        _612 = const true;
        StorageDead(_270);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = &_95;
        _284 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _285) -> [return: bb106, unwind: bb302];
    }

    bb106: {
        StorageDead(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &(*_41);
        _286 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _287) -> [return: bb107, unwind: bb302];
    }

    bb107: {
        StorageDead(_287);
        _283 = (move _284, move _286);
        StorageDead(_286);
        StorageDead(_284);
        _612 = const false;
        _268 = anchor_lang::error::Error::with_pubkeys(move _269, move _283) -> [return: bb108, unwind: bb302];
    }

    bb108: {
        StorageDead(_283);
        _612 = const false;
        StorageDead(_269);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _268);
        StorageDead(_268);
        StorageDead(_260);
        StorageDead(_259);
        goto -> bb255;
    }

    bb109: {
        StorageDead(_265);
        StorageDead(_264);
        StorageDead(_262);
        StorageDead(_261);
        _259 = const ();
        StorageDead(_260);
        StorageDead(_259);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_140;
        StorageLive(_292);
        _292 = _190;
        _290 = anchor_lang::prelude::Rent::minimum_balance(move _291, move _292) -> [return: bb110, unwind: bb277];
    }

    bb110: {
        StorageDead(_292);
        StorageDead(_291);
        _289 = <u64 as Ord>::max(move _290, const 1_u64) -> [return: bb111, unwind: bb277];
    }

    bb111: {
        StorageDead(_290);
        StorageLive(_293);
        _293 = _198;
        _288 = core::num::<impl u64>::saturating_sub(move _289, move _293) -> [return: bb112, unwind: bb277];
    }

    bb112: {
        StorageDead(_293);
        StorageDead(_289);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = _288;
        _295 = Gt(move _296, const 0_u64);
        switchInt(move _295) -> [0: bb123, otherwise: bb113];
    }

    bb113: {
        StorageDead(_296);
        StorageLive(_297);
        StorageLive(_298);
        StorageLive(_299);
        _299 = &_95;
        _298 = <anchor_lang::prelude::Signer<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _299) -> [return: bb114, unwind: bb277];
    }

    bb114: {
        StorageDead(_299);
        StorageLive(_300);
        StorageLive(_301);
        _301 = &(*_41);
        _300 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _301) -> [return: bb115, unwind: bb274];
    }

    bb115: {
        StorageDead(_301);
        _611 = const true;
        _297 = anchor_lang::system_program::Transfer::<'_> { from: move _298, to: move _300 };
        StorageDead(_300);
        StorageDead(_298);
        StorageLive(_302);
        StorageLive(_303);
        StorageLive(_304);
        _304 = &_125;
        _303 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _304) -> [return: bb116, unwind: bb300];
    }

    bb116: {
        StorageDead(_304);
        StorageLive(_305);
        _611 = const false;
        _305 = move _297;
        _302 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Transfer<'_>>::new(move _303, move _305) -> [return: bb117, unwind: bb300];
    }

    bb117: {
        StorageDead(_305);
        StorageDead(_303);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        _309 = move _302;
        StorageLive(_310);
        _310 = _288;
        _308 = anchor_lang::system_program::transfer(move _309, move _310) -> [return: bb118, unwind: bb300];
    }

    bb118: {
        StorageDead(_310);
        StorageDead(_309);
        _307 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _308) -> [return: bb119, unwind: bb300];
    }

    bb119: {
        StorageDead(_308);
        _311 = discriminant(_307);
        switchInt(move _311) -> [0: bb120, 1: bb121, otherwise: bb5];
    }

    bb120: {
        StorageLive(_315);
        _315 = ((_307 as Continue).0: ());
        _306 = _315;
        StorageDead(_315);
        _634 = discriminant(_307);
        StorageDead(_307);
        StorageDead(_306);
        _294 = const ();
        StorageDead(_302);
        _611 = const false;
        StorageDead(_297);
        goto -> bb124;
    }

    bb121: {
        StorageLive(_312);
        _312 = move ((_307 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_314);
        _314 = move _312;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _314) -> [return: bb122, unwind: bb298];
    }

    bb122: {
        StorageDead(_314);
        StorageDead(_312);
        _662 = discriminant(_307);
        StorageDead(_307);
        StorageDead(_306);
        StorageDead(_302);
        _611 = const false;
        StorageDead(_297);
        StorageDead(_295);
        StorageDead(_294);
        goto -> bb254;
    }

    bb123: {
        StorageDead(_296);
        _294 = const ();
        goto -> bb124;
    }

    bb124: {
        StorageDead(_295);
        StorageDead(_294);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = &(*_41);
        _317 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _318) -> [return: bb125, unwind: bb277];
    }

    bb125: {
        StorageDead(_318);
        _610 = const true;
        _316 = anchor_lang::system_program::Allocate::<'_> { account_to_allocate: move _317 };
        StorageDead(_317);
        StorageLive(_319);
        StorageLive(_320);
        StorageLive(_321);
        _321 = &_125;
        _320 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _321) -> [return: bb126, unwind: bb297];
    }

    bb126: {
        StorageDead(_321);
        StorageLive(_322);
        _610 = const false;
        _322 = move _316;
        _319 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::new(move _320, move _322) -> [return: bb127, unwind: bb297];
    }

    bb127: {
        StorageDead(_322);
        StorageDead(_320);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        StorageLive(_327);
        _609 = const true;
        _327 = move _319;
        StorageLive(_328);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        StorageLive(_336);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        _339 = const b"insurance_fund_stake";
        _338 = &(*_339);
        _337 = move _338 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_338);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        StorageLive(_343);
        _343 = &_80;
        _342 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _343) -> [return: bb128, unwind: bb295];
    }

    bb128: {
        StorageDead(_343);
        _597 = deref_copy ((*_342).0: &anchor_lang::prelude::Pubkey);
        _341 = &(*_597);
        _340 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _341) -> [return: bb129, unwind: bb295];
    }

    bb129: {
        StorageDead(_341);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        StorageLive(_347);
        StorageLive(_348);
        _348 = _7;
        _347 = core::num::<impl u16>::to_le_bytes(move _348) -> [return: bb130, unwind: bb295];
    }

    bb130: {
        _346 = &_347;
        StorageDead(_348);
        _345 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _346) -> [return: bb131, unwind: bb295];
    }

    bb131: {
        _344 = &(*_345);
        StorageDead(_346);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        _354 = _149;
        _353 = [move _354];
        _352 = &_353;
        StorageDead(_354);
        StorageLive(_355);
        _355 = RangeFull;
        _351 = <[u8; 1] as Index<RangeFull>>::index(move _352, move _355) -> [return: bb132, unwind: bb295];
    }

    bb132: {
        StorageDead(_355);
        StorageDead(_352);
        _350 = &(*_351);
        _349 = &(*_350);
        _336 = [move _337, move _340, move _344, move _349];
        _335 = &_336;
        StorageDead(_349);
        StorageDead(_344);
        StorageDead(_340);
        StorageDead(_337);
        StorageLive(_356);
        _356 = RangeFull;
        _334 = <[&[u8]; 4] as Index<RangeFull>>::index(move _335, move _356) -> [return: bb133, unwind: bb295];
    }

    bb133: {
        StorageDead(_356);
        StorageDead(_335);
        _333 = &(*_334);
        _332 = &(*_333);
        _331 = [move _332];
        StorageDead(_332);
        _330 = &_331;
        _329 = &(*_330);
        _328 = move _329 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_329);
        _609 = const false;
        _326 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Allocate<'_>>::with_signer(move _327, move _328) -> [return: bb134, unwind: bb295];
    }

    bb134: {
        StorageDead(_328);
        _609 = const false;
        StorageDead(_327);
        StorageLive(_357);
        StorageLive(_358);
        _358 = _190;
        _357 = move _358 as u64 (IntToInt);
        StorageDead(_358);
        _325 = anchor_lang::system_program::allocate(move _326, move _357) -> [return: bb135, unwind: bb297];
    }

    bb135: {
        StorageDead(_357);
        StorageDead(_326);
        _324 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _325) -> [return: bb136, unwind: bb297];
    }

    bb136: {
        StorageDead(_325);
        _359 = discriminant(_324);
        switchInt(move _359) -> [0: bb137, 1: bb138, otherwise: bb5];
    }

    bb137: {
        StorageLive(_363);
        _363 = ((_324 as Continue).0: ());
        _323 = _363;
        StorageDead(_363);
        _636 = discriminant(_324);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_324);
        StorageDead(_323);
        StorageLive(_364);
        StorageLive(_365);
        StorageLive(_366);
        _366 = &(*_41);
        _365 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _366) -> [return: bb140, unwind: bb297];
    }

    bb138: {
        StorageLive(_360);
        _360 = move ((_324 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_362);
        _362 = move _360;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _362) -> [return: bb139, unwind: bb293];
    }

    bb139: {
        StorageDead(_362);
        StorageDead(_360);
        _660 = discriminant(_324);
        StorageDead(_353);
        StorageDead(_351);
        StorageDead(_350);
        StorageDead(_347);
        StorageDead(_345);
        StorageDead(_342);
        StorageDead(_339);
        StorageDead(_336);
        StorageDead(_334);
        StorageDead(_333);
        StorageDead(_331);
        StorageDead(_330);
        StorageDead(_324);
        StorageDead(_323);
        goto -> bb253;
    }

    bb140: {
        StorageDead(_366);
        _608 = const true;
        _364 = anchor_lang::system_program::Assign::<'_> { account_to_assign: move _365 };
        StorageDead(_365);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        _369 = &_125;
        _368 = <anchor_lang::prelude::Program<'_, anchor_lang::system_program::System> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _369) -> [return: bb141, unwind: bb292];
    }

    bb141: {
        StorageDead(_369);
        StorageLive(_370);
        _608 = const false;
        _370 = move _364;
        _367 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::new(move _368, move _370) -> [return: bb142, unwind: bb292];
    }

    bb142: {
        StorageDead(_370);
        StorageDead(_368);
        StorageLive(_371);
        StorageLive(_372);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        _607 = const true;
        _375 = move _367;
        StorageLive(_376);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        StorageLive(_380);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        StorageLive(_387);
        _387 = const b"insurance_fund_stake";
        _386 = &(*_387);
        _385 = move _386 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_386);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        StorageLive(_391);
        _391 = &_80;
        _390 = <anchor_lang::prelude::Signer<'_> as Deref>::deref(move _391) -> [return: bb143, unwind: bb290];
    }

    bb143: {
        StorageDead(_391);
        _598 = deref_copy ((*_390).0: &anchor_lang::prelude::Pubkey);
        _389 = &(*_598);
        _388 = <anchor_lang::prelude::Pubkey as AsRef<[u8]>>::as_ref(move _389) -> [return: bb144, unwind: bb290];
    }

    bb144: {
        StorageDead(_389);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = _7;
        _395 = core::num::<impl u16>::to_le_bytes(move _396) -> [return: bb145, unwind: bb290];
    }

    bb145: {
        _394 = &_395;
        StorageDead(_396);
        _393 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _394) -> [return: bb146, unwind: bb290];
    }

    bb146: {
        _392 = &(*_393);
        StorageDead(_394);
        StorageLive(_397);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        StorageLive(_401);
        StorageLive(_402);
        _402 = _149;
        _401 = [move _402];
        _400 = &_401;
        StorageDead(_402);
        StorageLive(_403);
        _403 = RangeFull;
        _399 = <[u8; 1] as Index<RangeFull>>::index(move _400, move _403) -> [return: bb147, unwind: bb290];
    }

    bb147: {
        StorageDead(_403);
        StorageDead(_400);
        _398 = &(*_399);
        _397 = &(*_398);
        _384 = [move _385, move _388, move _392, move _397];
        _383 = &_384;
        StorageDead(_397);
        StorageDead(_392);
        StorageDead(_388);
        StorageDead(_385);
        StorageLive(_404);
        _404 = RangeFull;
        _382 = <[&[u8]; 4] as Index<RangeFull>>::index(move _383, move _404) -> [return: bb148, unwind: bb290];
    }

    bb148: {
        StorageDead(_404);
        StorageDead(_383);
        _381 = &(*_382);
        _380 = &(*_381);
        _379 = [move _380];
        StorageDead(_380);
        _378 = &_379;
        _377 = &(*_378);
        _376 = move _377 as &[&[&[u8]]] (PointerCoercion(Unsize));
        StorageDead(_377);
        _607 = const false;
        _374 = anchor_lang::context::CpiContext::<'_, '_, '_, '_, anchor_lang::system_program::Assign<'_>>::with_signer(move _375, move _376) -> [return: bb149, unwind: bb290];
    }

    bb149: {
        StorageDead(_376);
        _607 = const false;
        StorageDead(_375);
        StorageLive(_405);
        _405 = &(*_1);
        _373 = anchor_lang::system_program::assign(move _374, move _405) -> [return: bb150, unwind: bb292];
    }

    bb150: {
        StorageDead(_405);
        StorageDead(_374);
        _372 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _373) -> [return: bb151, unwind: bb292];
    }

    bb151: {
        StorageDead(_373);
        _406 = discriminant(_372);
        switchInt(move _406) -> [0: bb152, 1: bb153, otherwise: bb5];
    }

    bb152: {
        StorageLive(_410);
        _410 = ((_372 as Continue).0: ());
        _371 = _410;
        StorageDead(_410);
        _638 = discriminant(_372);
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_387);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_372);
        StorageDead(_371);
        _200 = const ();
        StorageDead(_367);
        _608 = const false;
        StorageDead(_364);
        StorageDead(_319);
        _610 = const false;
        StorageDead(_316);
        StorageDead(_288);
        goto -> bb155;
    }

    bb153: {
        StorageLive(_407);
        _407 = move ((_372 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_409);
        _409 = move _407;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _409) -> [return: bb154, unwind: bb288];
    }

    bb154: {
        StorageDead(_409);
        StorageDead(_407);
        _658 = discriminant(_372);
        StorageDead(_401);
        StorageDead(_399);
        StorageDead(_398);
        StorageDead(_395);
        StorageDead(_393);
        StorageDead(_390);
        StorageDead(_387);
        StorageDead(_384);
        StorageDead(_382);
        StorageDead(_381);
        StorageDead(_379);
        StorageDead(_378);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_367);
        _608 = const false;
        StorageDead(_364);
        goto -> bb253;
    }

    bb155: {
        StorageDead(_201);
        StorageDead(_200);
        StorageLive(_411);
        StorageLive(_412);
        _412 = &(*_1);
        StorageLive(_413);
        StorageLive(_414);
        _414 = &_41;
        _599 = deref_copy (*_414);
        _413 = &(*_599);
        _411 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::try_from_unchecked(move _412, move _413) -> [return: bb156, unwind: bb277];
    }

    bb156: {
        StorageDead(_413);
        StorageDead(_412);
        _415 = discriminant(_411);
        switchInt(move _415) -> [0: bb158, 1: bb157, otherwise: bb5];
    }

    bb157: {
        StorageLive(_417);
        _417 = move ((_411 as Err).0: anchor_lang::error::Error);
        StorageLive(_419);
        StorageLive(_420);
        _420 = move _417;
        _419 = anchor_lang::error::Error::with_account_name::<&str>(move _420, const "insurance_fund_stake") -> [return: bb159, unwind: bb287];
    }

    bb158: {
        StorageLive(_416);
        _416 = move ((_411 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _191 = move _416;
        StorageDead(_416);
        StorageDead(_198);
        _640 = discriminant(_411);
        StorageDead(_414);
        StorageDead(_411);
        goto -> bb165;
    }

    bb159: {
        StorageDead(_420);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _419);
        StorageDead(_419);
        StorageDead(_417);
        StorageDead(_198);
        _656 = discriminant(_411);
        StorageDead(_414);
        StorageDead(_411);
        goto -> bb256;
    }

    bb160: {
        StorageDead(_195);
        StorageDead(_194);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        _423 = &_41;
        _600 = deref_copy (*_423);
        _422 = &(*_600);
        _421 = anchor_lang::prelude::AccountLoader::<'_, InsuranceFundStake>::try_from(move _422) -> [return: bb161, unwind: bb277];
    }

    bb161: {
        StorageDead(_422);
        _424 = discriminant(_421);
        switchInt(move _424) -> [0: bb163, 1: bb162, otherwise: bb5];
    }

    bb162: {
        StorageLive(_426);
        _426 = move ((_421 as Err).0: anchor_lang::error::Error);
        StorageLive(_428);
        StorageLive(_429);
        _429 = move _426;
        _428 = anchor_lang::error::Error::with_account_name::<&str>(move _429, const "insurance_fund_stake") -> [return: bb164, unwind: bb286];
    }

    bb163: {
        StorageLive(_425);
        _425 = move ((_421 as Ok).0: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::InsuranceFundStake>);
        _191 = move _425;
        StorageDead(_425);
        _642 = discriminant(_421);
        StorageDead(_423);
        StorageDead(_421);
        goto -> bb165;
    }

    bb164: {
        StorageDead(_429);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _428);
        StorageDead(_428);
        StorageDead(_426);
        _654 = discriminant(_421);
        StorageDead(_423);
        StorageDead(_421);
        goto -> bb256;
    }

    bb165: {
        StorageDead(_193);
        StorageDead(_192);
        StorageLive(_430);
        StorageLive(_431);
        _431 = const false;
        switchInt(move _431) -> [0: bb189, otherwise: bb166];
    }

    bb166: {
        StorageLive(_432);
        StorageLive(_433);
        StorageLive(_434);
        _434 = _190;
        StorageLive(_435);
        StorageLive(_436);
        _436 = &(*_186);
        _435 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _436) -> [return: bb167, unwind: bb277];
    }

    bb167: {
        StorageDead(_436);
        _433 = Ne(move _434, move _435);
        switchInt(move _433) -> [0: bb173, otherwise: bb168];
    }

    bb168: {
        StorageDead(_435);
        StorageDead(_434);
        StorageLive(_438);
        StorageLive(_439);
        StorageLive(_440);
        StorageLive(_441);
        _441 = ConstraintSpace;
        _440 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _441) -> [return: bb169, unwind: bb277];
    }

    bb169: {
        StorageDead(_441);
        _439 = anchor_lang::error::Error::with_account_name::<&str>(move _440, const "insurance_fund_stake") -> [return: bb170, unwind: bb277];
    }

    bb170: {
        _606 = const true;
        StorageDead(_440);
        StorageLive(_442);
        StorageLive(_443);
        _443 = _190;
        StorageLive(_444);
        StorageLive(_445);
        _445 = &(*_186);
        _444 = anchor_lang::prelude::AccountInfo::<'_>::data_len(move _445) -> [return: bb171, unwind: bb285];
    }

    bb171: {
        StorageDead(_445);
        _442 = (move _443, move _444);
        StorageDead(_444);
        StorageDead(_443);
        _606 = const false;
        _438 = anchor_lang::error::Error::with_values::<usize, usize>(move _439, move _442) -> [return: bb172, unwind: bb285];
    }

    bb172: {
        StorageDead(_442);
        _606 = const false;
        StorageDead(_439);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _438);
        StorageDead(_438);
        StorageDead(_433);
        StorageDead(_432);
        goto -> bb252;
    }

    bb173: {
        StorageDead(_435);
        StorageDead(_434);
        _432 = const ();
        StorageDead(_433);
        StorageDead(_432);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        _448 = &_189;
        StorageLive(_449);
        _449 = &_1;
        _447 = <&anchor_lang::prelude::Pubkey as PartialEq>::ne(move _448, move _449) -> [return: bb174, unwind: bb277];
    }

    bb174: {
        switchInt(move _447) -> [0: bb179, otherwise: bb175];
    }

    bb175: {
        StorageDead(_449);
        StorageDead(_448);
        StorageLive(_451);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        _454 = ConstraintOwner;
        _453 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _454) -> [return: bb176, unwind: bb277];
    }

    bb176: {
        StorageDead(_454);
        _452 = anchor_lang::error::Error::with_account_name::<&str>(move _453, const "insurance_fund_stake") -> [return: bb177, unwind: bb277];
    }

    bb177: {
        StorageDead(_453);
        StorageLive(_455);
        StorageLive(_456);
        _456 = (*_189);
        StorageLive(_457);
        _457 = (*_1);
        _455 = (move _456, move _457);
        StorageDead(_457);
        StorageDead(_456);
        _451 = anchor_lang::error::Error::with_pubkeys(move _452, move _455) -> [return: bb178, unwind: bb277];
    }

    bb178: {
        StorageDead(_455);
        StorageDead(_452);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _451);
        StorageDead(_451);
        StorageDead(_447);
        StorageDead(_446);
        goto -> bb252;
    }

    bb179: {
        StorageDead(_449);
        StorageDead(_448);
        _446 = const ();
        StorageDead(_447);
        StorageDead(_446);
        StorageLive(_458);
        StorageLive(_459);
        _459 = &_140;
        StorageLive(_460);
        _460 = _190;
        _458 = anchor_lang::prelude::Rent::minimum_balance(move _459, move _460) -> [return: bb180, unwind: bb277];
    }

    bb180: {
        StorageDead(_460);
        StorageDead(_459);
        StorageLive(_461);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        _465 = &_191;
        _464 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _465) -> [return: bb181, unwind: bb277];
    }

    bb181: {
        _463 = &_464;
        StorageDead(_465);
        _462 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _463) -> [return: bb182, unwind: bb273];
    }

    bb182: {
        StorageDead(_463);
        StorageLive(_466);
        _466 = _458;
        _461 = Lt(move _462, move _466);
        switchInt(move _461) -> [0: bb187, otherwise: bb183];
    }

    bb183: {
        StorageDead(_466);
        drop(_464) -> [return: bb184, unwind: bb277];
    }

    bb184: {
        StorageDead(_464);
        StorageDead(_462);
        StorageLive(_468);
        StorageLive(_469);
        StorageLive(_470);
        _470 = ConstraintRentExempt;
        _469 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _470) -> [return: bb185, unwind: bb277];
    }

    bb185: {
        StorageDead(_470);
        _468 = anchor_lang::error::Error::with_account_name::<&str>(move _469, const "insurance_fund_stake") -> [return: bb186, unwind: bb277];
    }

    bb186: {
        StorageDead(_469);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _468);
        StorageDead(_468);
        StorageDead(_461);
        StorageDead(_458);
        goto -> bb252;
    }

    bb187: {
        StorageDead(_466);
        drop(_464) -> [return: bb188, unwind: bb277];
    }

    bb188: {
        StorageDead(_464);
        StorageDead(_462);
        _430 = const ();
        StorageDead(_461);
        StorageDead(_458);
        goto -> bb190;
    }

    bb189: {
        _430 = const ();
        goto -> bb190;
    }

    bb190: {
        StorageDead(_431);
        StorageDead(_430);
        _185 = move _191;
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        StorageLive(_471);
        StorageLive(_472);
        StorageLive(_473);
        StorageLive(_474);
        StorageLive(_475);
        _475 = &_185;
        _474 = &(*_475);
        _473 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _474) -> [return: bb191, unwind: bb277];
    }

    bb191: {
        StorageDead(_474);
        _472 = ((*_473).6: bool);
        switchInt(move _472) -> [0: bb192, otherwise: bb195];
    }

    bb192: {
        StorageDead(_475);
        StorageDead(_473);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _479 = ConstraintMut;
        _478 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _479) -> [return: bb193, unwind: bb277];
    }

    bb193: {
        StorageDead(_479);
        _477 = anchor_lang::error::Error::with_account_name::<&str>(move _478, const "insurance_fund_stake") -> [return: bb194, unwind: bb277];
    }

    bb194: {
        StorageDead(_478);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _477);
        StorageDead(_477);
        StorageDead(_472);
        StorageDead(_471);
        goto -> bb258;
    }

    bb195: {
        StorageDead(_475);
        StorageDead(_473);
        _471 = const ();
        StorageDead(_472);
        StorageDead(_471);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        _482 = &_140;
        StorageLive(_483);
        StorageLive(_484);
        StorageLive(_485);
        StorageLive(_486);
        _486 = &_185;
        _485 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _486) -> [return: bb196, unwind: bb277];
    }

    bb196: {
        _484 = &_485;
        StorageDead(_486);
        _483 = anchor_lang::prelude::AccountInfo::<'_>::lamports(move _484) -> [return: bb197, unwind: bb272];
    }

    bb197: {
        StorageDead(_484);
        StorageLive(_487);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        StorageLive(_491);
        StorageLive(_492);
        _492 = &_185;
        _491 = <anchor_lang::prelude::AccountLoader<'_, InsuranceFundStake> as anchor_lang::ToAccountInfo<'_>>::to_account_info(move _492) -> [return: bb198, unwind: bb272];
    }

    bb198: {
        _490 = &_491;
        StorageDead(_492);
        _489 = anchor_lang::prelude::AccountInfo::<'_>::try_data_len(move _490) -> [return: bb199, unwind: bb271];
    }

    bb199: {
        StorageDead(_490);
        _488 = <std::result::Result<usize, anchor_lang::prelude::ProgramError> as Try>::branch(move _489) -> [return: bb200, unwind: bb271];
    }

    bb200: {
        _605 = const true;
        StorageDead(_489);
        _493 = discriminant(_488);
        switchInt(move _493) -> [0: bb201, 1: bb202, otherwise: bb5];
    }

    bb201: {
        StorageLive(_497);
        _497 = ((_488 as Continue).0: usize);
        _487 = _497;
        StorageDead(_497);
        _481 = anchor_lang::prelude::Rent::is_exempt(move _482, move _483, move _487) -> [return: bb204, unwind: bb283];
    }

    bb202: {
        StorageLive(_494);
        _494 = move ((_488 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_496);
        _496 = move _494;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _496) -> [return: bb203, unwind: bb283];
    }

    bb203: {
        StorageDead(_496);
        StorageDead(_494);
        StorageDead(_487);
        StorageDead(_483);
        StorageDead(_482);
        _652 = discriminant(_488);
        drop(_491) -> [return: bb249, unwind: bb272];
    }

    bb204: {
        switchInt(move _481) -> [0: bb206, otherwise: bb205];
    }

    bb205: {
        StorageDead(_487);
        StorageDead(_483);
        StorageDead(_482);
        _644 = discriminant(_488);
        drop(_491) -> [return: bb211, unwind: bb272];
    }

    bb206: {
        StorageDead(_487);
        StorageDead(_483);
        StorageDead(_482);
        _646 = discriminant(_488);
        drop(_491) -> [return: bb207, unwind: bb272];
    }

    bb207: {
        StorageDead(_491);
        _605 = const false;
        StorageDead(_488);
        drop(_485) -> [return: bb208, unwind: bb277];
    }

    bb208: {
        StorageDead(_485);
        StorageLive(_499);
        StorageLive(_500);
        StorageLive(_501);
        _501 = ConstraintRentExempt;
        _500 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _501) -> [return: bb209, unwind: bb277];
    }

    bb209: {
        StorageDead(_501);
        _499 = anchor_lang::error::Error::with_account_name::<&str>(move _500, const "insurance_fund_stake") -> [return: bb210, unwind: bb277];
    }

    bb210: {
        StorageDead(_500);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _499);
        StorageDead(_499);
        goto -> bb251;
    }

    bb211: {
        StorageDead(_491);
        _605 = const false;
        StorageDead(_488);
        drop(_485) -> [return: bb212, unwind: bb277];
    }

    bb212: {
        StorageDead(_485);
        _480 = const ();
        StorageDead(_481);
        StorageDead(_480);
        StorageLive(_504);
        StorageLive(_505);
        StorageLive(_506);
        StorageLive(_507);
        StorageLive(_508);
        StorageLive(_509);
        StorageLive(_510);
        StorageLive(_511);
        _511 = const b"spot_market";
        _510 = &(*_511);
        _509 = move _510 as &[u8] (PointerCoercion(Unsize));
        StorageDead(_510);
        StorageLive(_512);
        StorageLive(_513);
        StorageLive(_514);
        StorageLive(_515);
        StorageLive(_516);
        _516 = _7;
        _515 = core::num::<impl u16>::to_le_bytes(move _516) -> [return: bb213, unwind: bb277];
    }

    bb213: {
        _514 = &_515;
        StorageDead(_516);
        _513 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _514) -> [return: bb214, unwind: bb277];
    }

    bb214: {
        _512 = &(*_513);
        StorageDead(_514);
        _508 = [move _509, move _512];
        StorageDead(_512);
        StorageDead(_509);
        _507 = &_508;
        _506 = &(*_507);
        _505 = move _506 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_506);
        StorageLive(_517);
        StorageLive(_518);
        _518 = &_1;
        _601 = deref_copy (*_518);
        _517 = &(*_601);
        _504 = anchor_lang::prelude::Pubkey::find_program_address(move _505, move _517) -> [return: bb215, unwind: bb277];
    }

    bb215: {
        StorageDead(_517);
        StorageDead(_505);
        StorageLive(_502);
        _502 = (_504.0: anchor_lang::prelude::Pubkey);
        StorageLive(_503);
        _503 = (_504.1: u8);
        StorageDead(_518);
        StorageDead(_515);
        StorageDead(_513);
        StorageDead(_511);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_504);
        StorageLive(_519);
        _519 = _503;
        ((*_4).0: u8) = move _519;
        StorageDead(_519);
        StorageLive(_520);
        StorageLive(_521);
        StorageLive(_522);
        StorageLive(_523);
        StorageLive(_524);
        _524 = &_20;
        _523 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _524) -> [return: bb216, unwind: bb277];
    }

    bb216: {
        _522 = &_523;
        StorageDead(_524);
        StorageLive(_525);
        _525 = &_502;
        _521 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _522, move _525) -> [return: bb217, unwind: bb277];
    }

    bb217: {
        switchInt(move _521) -> [0: bb223, otherwise: bb218];
    }

    bb218: {
        StorageDead(_525);
        StorageDead(_523);
        StorageDead(_522);
        StorageLive(_527);
        StorageLive(_528);
        StorageLive(_529);
        StorageLive(_530);
        _530 = ConstraintSeeds;
        _529 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _530) -> [return: bb219, unwind: bb277];
    }

    bb219: {
        StorageDead(_530);
        _528 = anchor_lang::error::Error::with_account_name::<&str>(move _529, const "spot_market") -> [return: bb220, unwind: bb277];
    }

    bb220: {
        _604 = const true;
        StorageDead(_529);
        StorageLive(_531);
        StorageLive(_532);
        StorageLive(_533);
        _533 = &_20;
        _532 = <anchor_lang::prelude::AccountLoader<'_, SpotMarket> as anchor_lang::Key>::key(move _533) -> [return: bb221, unwind: bb282];
    }

    bb221: {
        StorageDead(_533);
        StorageLive(_534);
        _534 = _502;
        _531 = (move _532, move _534);
        StorageDead(_534);
        StorageDead(_532);
        _604 = const false;
        _527 = anchor_lang::error::Error::with_pubkeys(move _528, move _531) -> [return: bb222, unwind: bb282];
    }

    bb222: {
        StorageDead(_531);
        _604 = const false;
        StorageDead(_528);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _527);
        StorageDead(_527);
        StorageDead(_521);
        StorageDead(_520);
        goto -> bb248;
    }

    bb223: {
        StorageDead(_525);
        StorageDead(_523);
        StorageDead(_522);
        _520 = const ();
        StorageDead(_521);
        StorageDead(_520);
        StorageLive(_535);
        StorageLive(_536);
        StorageLive(_537);
        StorageLive(_538);
        StorageLive(_539);
        _539 = &_50;
        _538 = &(*_539);
        _537 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _538) -> [return: bb224, unwind: bb277];
    }

    bb224: {
        StorageDead(_538);
        _536 = ((*_537).6: bool);
        switchInt(move _536) -> [0: bb225, otherwise: bb228];
    }

    bb225: {
        StorageDead(_539);
        StorageDead(_537);
        StorageLive(_541);
        StorageLive(_542);
        StorageLive(_543);
        _543 = ConstraintMut;
        _542 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _543) -> [return: bb226, unwind: bb277];
    }

    bb226: {
        StorageDead(_543);
        _541 = anchor_lang::error::Error::with_account_name::<&str>(move _542, const "user_stats") -> [return: bb227, unwind: bb277];
    }

    bb227: {
        StorageDead(_542);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _541);
        StorageDead(_541);
        StorageDead(_536);
        StorageDead(_535);
        goto -> bb248;
    }

    bb228: {
        StorageDead(_539);
        StorageDead(_537);
        _535 = const ();
        StorageDead(_536);
        StorageDead(_535);
        StorageLive(_544);
        StorageLive(_545);
        StorageLive(_546);
        StorageLive(_547);
        StorageLive(_548);
        StorageLive(_549);
        StorageLive(_550);
        StorageLive(_551);
        _551 = &_50;
        _550 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load(move _551) -> [return: bb229, unwind: bb277];
    }

    bb229: {
        StorageDead(_551);
        _549 = <std::result::Result<Ref<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _550) -> [return: bb230, unwind: bb277];
    }

    bb230: {
        _602 = const true;
        _603 = const true;
        StorageDead(_550);
        _552 = discriminant(_549);
        switchInt(move _552) -> [0: bb231, 1: bb232, otherwise: bb5];
    }

    bb231: {
        StorageLive(_556);
        _556 = move ((_549 as Continue).0: std::cell::Ref<'_, state::user::UserStats>);
        _548 = move _556;
        StorageDead(_556);
        _547 = &_548;
        _546 = <Ref<'_, UserStats> as Deref>::deref(move _547) -> [return: bb234, unwind: bb270];
    }

    bb232: {
        StorageLive(_553);
        _553 = move ((_549 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_555);
        _555 = move _553;
        _0 = <std::result::Result<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _555) -> [return: bb233, unwind: bb280];
    }

    bb233: {
        StorageDead(_555);
        StorageDead(_553);
        StorageDead(_547);
        _650 = discriminant(_549);
        _602 = const false;
        _603 = const false;
        StorageDead(_549);
        StorageDead(_548);
        StorageDead(_546);
        goto -> bb247;
    }

    bb234: {
        StorageDead(_547);
        _545 = ((*_546).0: anchor_lang::prelude::Pubkey);
        drop(_548) -> [return: bb279, unwind: bb280];
    }

    bb235: {
        StorageDead(_558);
        StorageLive(_559);
        StorageLive(_560);
        _560 = &_545;
        StorageLive(_561);
        _561 = &_557;
        _559 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _560, move _561) -> [return: bb236, unwind: bb277];
    }

    bb236: {
        switchInt(move _559) -> [0: bb241, otherwise: bb237];
    }

    bb237: {
        StorageDead(_561);
        StorageDead(_560);
        StorageLive(_563);
        StorageLive(_564);
        StorageLive(_565);
        StorageLive(_566);
        _566 = ConstraintHasOne;
        _565 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _566) -> [return: bb238, unwind: bb277];
    }

    bb238: {
        StorageDead(_566);
        _564 = anchor_lang::error::Error::with_account_name::<&str>(move _565, const "user_stats") -> [return: bb239, unwind: bb277];
    }

    bb239: {
        StorageDead(_565);
        StorageLive(_567);
        StorageLive(_568);
        _568 = _545;
        StorageLive(_569);
        _569 = _557;
        _567 = (move _568, move _569);
        StorageDead(_569);
        StorageDead(_568);
        _563 = anchor_lang::error::Error::with_pubkeys(move _564, move _567) -> [return: bb240, unwind: bb277];
    }

    bb240: {
        StorageDead(_567);
        StorageDead(_564);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _563);
        StorageDead(_563);
        StorageDead(_559);
        StorageDead(_557);
        goto -> bb247;
    }

    bb241: {
        StorageDead(_561);
        StorageDead(_560);
        _544 = const ();
        StorageDead(_559);
        StorageDead(_557);
        StorageDead(_545);
        StorageDead(_544);
        StorageLive(_570);
        StorageLive(_571);
        StorageLive(_572);
        StorageLive(_573);
        StorageLive(_574);
        _574 = &_95;
        _573 = &(*_574);
        _572 = <anchor_lang::prelude::Signer<'_> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _573) -> [return: bb242, unwind: bb277];
    }

    bb242: {
        StorageDead(_573);
        _571 = ((*_572).6: bool);
        switchInt(move _571) -> [0: bb243, otherwise: bb246];
    }

    bb243: {
        StorageDead(_574);
        StorageDead(_572);
        StorageLive(_576);
        StorageLive(_577);
        StorageLive(_578);
        _578 = ConstraintMut;
        _577 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _578) -> [return: bb244, unwind: bb277];
    }

    bb244: {
        StorageDead(_578);
        _576 = anchor_lang::error::Error::with_account_name::<&str>(move _577, const "payer") -> [return: bb245, unwind: bb277];
    }

    bb245: {
        StorageDead(_577);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Err(move _576);
        StorageDead(_576);
        StorageDead(_571);
        StorageDead(_570);
        goto -> bb248;
    }

    bb246: {
        StorageDead(_574);
        StorageDead(_572);
        _570 = const ();
        StorageDead(_571);
        StorageDead(_570);
        StorageLive(_579);
        StorageLive(_580);
        _580 = move _20;
        StorageLive(_581);
        _581 = move _185;
        StorageLive(_582);
        _582 = move _50;
        StorageLive(_583);
        _583 = move _65;
        StorageLive(_584);
        _584 = move _80;
        StorageLive(_585);
        _585 = move _95;
        StorageLive(_586);
        _586 = move _110;
        StorageLive(_587);
        _587 = move _125;
        _579 = if_staker::InitializeInsuranceFundStake::<'_> { spot_market: move _580, insurance_fund_stake: move _581, user_stats: move _582, state: move _583, authority: move _584, payer: move _585, rent: move _586, system_program: move _587 };
        StorageDead(_587);
        StorageDead(_586);
        StorageDead(_585);
        StorageDead(_584);
        StorageDead(_583);
        StorageDead(_582);
        StorageDead(_581);
        StorageDead(_580);
        _0 = std::result::Result::<if_staker::InitializeInsuranceFundStake<'_>, anchor_lang::error::Error>::Ok(move _579);
        StorageDead(_579);
        StorageDead(_503);
        StorageDead(_502);
        StorageDead(_185);
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_140);
        StorageDead(_125);
        StorageDead(_110);
        StorageDead(_95);
        StorageDead(_80);
        StorageDead(_65);
        StorageDead(_50);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_20);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb269;
    }

    bb247: {
        StorageDead(_545);
        StorageDead(_544);
        goto -> bb248;
    }

    bb248: {
        StorageDead(_503);
        StorageDead(_502);
        goto -> bb258;
    }

    bb249: {
        StorageDead(_491);
        _605 = const false;
        StorageDead(_488);
        drop(_485) -> [return: bb250, unwind: bb277];
    }

    bb250: {
        StorageDead(_485);
        goto -> bb251;
    }

    bb251: {
        StorageDead(_481);
        StorageDead(_480);
        goto -> bb258;
    }

    bb252: {
        StorageDead(_431);
        StorageDead(_430);
        goto -> bb257;
    }

    bb253: {
        StorageDead(_319);
        _610 = const false;
        StorageDead(_316);
        goto -> bb254;
    }

    bb254: {
        StorageDead(_288);
        goto -> bb255;
    }

    bb255: {
        StorageDead(_201);
        StorageDead(_200);
        StorageDead(_198);
        goto -> bb256;
    }

    bb256: {
        StorageDead(_193);
        StorageDead(_192);
        goto -> bb257;
    }

    bb257: {
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_186);
        goto -> bb258;
    }

    bb258: {
        StorageDead(_185);
        goto -> bb259;
    }

    bb259: {
        StorageDead(_149);
        StorageDead(_148);
        goto -> bb260;
    }

    bb260: {
        StorageDead(_140);
        goto -> bb261;
    }

    bb261: {
        StorageDead(_125);
        goto -> bb262;
    }

    bb262: {
        StorageDead(_110);
        goto -> bb263;
    }

    bb263: {
        StorageDead(_95);
        goto -> bb264;
    }

    bb264: {
        StorageDead(_80);
        drop(_65) -> [return: bb265, unwind: bb278];
    }

    bb265: {
        StorageDead(_65);
        goto -> bb266;
    }

    bb266: {
        StorageDead(_50);
        StorageDead(_42);
        StorageDead(_41);
        goto -> bb267;
    }

    bb267: {
        StorageDead(_20);
        StorageDead(_7);
        goto -> bb268;
    }

    bb268: {
        StorageDead(_6);
        goto -> bb269;
    }

    bb269: {
        return;
    }

    bb270 (cleanup): {
        drop(_548) -> [return: bb280, unwind terminate(cleanup)];
    }

    bb271 (cleanup): {
        drop(_491) -> [return: bb272, unwind terminate(cleanup)];
    }

    bb272 (cleanup): {
        drop(_485) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb273 (cleanup): {
        drop(_464) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb274 (cleanup): {
        drop(_298) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb275 (cleanup): {
        drop(_271) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb276 (cleanup): {
        drop(_208) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb277 (cleanup): {
        drop(_65) -> [return: bb278, unwind terminate(cleanup)];
    }

    bb278 (cleanup): {
        resume;
    }

    bb279: {
        _648 = discriminant(_549);
        _602 = const false;
        _603 = const false;
        StorageDead(_549);
        StorageDead(_548);
        StorageDead(_546);
        StorageLive(_557);
        StorageLive(_558);
        _558 = &_80;
        _557 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _558) -> [return: bb235, unwind: bb277];
    }

    bb280 (cleanup): {
        _682 = discriminant(_549);
        goto -> bb277;
    }

    bb281 (cleanup): {
        drop(_528) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb282 (cleanup): {
        switchInt(_604) -> [0: bb277, otherwise: bb281];
    }

    bb283 (cleanup): {
        _683 = discriminant(_488);
        goto -> bb271;
    }

    bb284 (cleanup): {
        drop(_439) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb285 (cleanup): {
        switchInt(_606) -> [0: bb277, otherwise: bb284];
    }

    bb286 (cleanup): {
        _684 = discriminant(_421);
        goto -> bb277;
    }

    bb287 (cleanup): {
        _685 = discriminant(_411);
        goto -> bb277;
    }

    bb288 (cleanup): {
        _686 = discriminant(_372);
        goto -> bb292;
    }

    bb289 (cleanup): {
        drop(_375) -> [return: bb292, unwind terminate(cleanup)];
    }

    bb290 (cleanup): {
        switchInt(_607) -> [0: bb292, otherwise: bb289];
    }

    bb291 (cleanup): {
        drop(_364) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb292 (cleanup): {
        switchInt(_608) -> [0: bb297, otherwise: bb291];
    }

    bb293 (cleanup): {
        _687 = discriminant(_324);
        goto -> bb297;
    }

    bb294 (cleanup): {
        drop(_327) -> [return: bb297, unwind terminate(cleanup)];
    }

    bb295 (cleanup): {
        switchInt(_609) -> [0: bb297, otherwise: bb294];
    }

    bb296 (cleanup): {
        drop(_316) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb297 (cleanup): {
        switchInt(_610) -> [0: bb277, otherwise: bb296];
    }

    bb298 (cleanup): {
        _688 = discriminant(_307);
        goto -> bb300;
    }

    bb299 (cleanup): {
        drop(_297) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb300 (cleanup): {
        switchInt(_611) -> [0: bb277, otherwise: bb299];
    }

    bb301 (cleanup): {
        drop(_269) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb302 (cleanup): {
        switchInt(_612) -> [0: bb277, otherwise: bb301];
    }

    bb303 (cleanup): {
        _689 = discriminant(_217);
        goto -> bb307;
    }

    bb304 (cleanup): {
        drop(_220) -> [return: bb307, unwind terminate(cleanup)];
    }

    bb305 (cleanup): {
        switchInt(_613) -> [0: bb307, otherwise: bb304];
    }

    bb306 (cleanup): {
        drop(_207) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb307 (cleanup): {
        switchInt(_614) -> [0: bb277, otherwise: bb306];
    }

    bb308 (cleanup): {
        drop(_178) -> [return: bb277, unwind terminate(cleanup)];
    }

    bb309 (cleanup): {
        switchInt(_615) -> [0: bb277, otherwise: bb308];
    }

    bb310 (cleanup): {
        _690 = discriminant(_141);
        goto -> bb277;
    }

    bb311 (cleanup): {
        _691 = discriminant(_126);
        goto -> bb277;
    }

    bb312 (cleanup): {
        _692 = discriminant(_111);
        goto -> bb277;
    }

    bb313 (cleanup): {
        _693 = discriminant(_96);
        goto -> bb277;
    }

    bb314 (cleanup): {
        _694 = discriminant(_81);
        goto -> bb277;
    }

    bb315 (cleanup): {
        _695 = discriminant(_66);
        goto -> bb278;
    }

    bb316 (cleanup): {
        _696 = discriminant(_51);
        goto -> bb278;
    }

    bb317 (cleanup): {
        _697 = discriminant(_21);
        goto -> bb278;
    }
}

alloc251 (size: 11, align: 1) {
    73 70 6f 74 5f 6d 61 72 6b 65 74                │ spot_market
}

alloc250 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 73 │ insurance_fund_s
    0x10 │ 74 61 6b 65                                     │ take
}

alloc249 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 73 │ insurance_fund_s
    0x10 │ 74 61 6b 65                                     │ take
}

alloc248 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 73 │ insurance_fund_s
    0x10 │ 74 61 6b 65                                     │ take
}

alloc247 (size: 20, align: 1) {
    0x00 │ 69 6e 73 75 72 61 6e 63 65 5f 66 75 6e 64 5f 73 │ insurance_fund_s
    0x10 │ 74 61 6b 65                                     │ take
}
