// MIR for `_calculate_funding_payment` before PreCodegen

fn _calculate_funding_payment(_1: i128, _2: i128) -> std::result::Result<i128, error::ErrorCode> {
    debug funding_rate_delta => _1;
    debug base_asset_amount => _2;
    let mut _0: std::result::Result<i128, error::ErrorCode>;
    let _3: i128;
    let mut _4: bool;
    let mut _5: i128;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _8: std::result::Result<i128, error::ErrorCode>;
    let mut _9: u128;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _11: std::result::Result<u128, error::ErrorCode>;
    let mut _12: math::bn::U192;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _14: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _15: math::bn::U192;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _17: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _18: math::bn::U192;
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _20: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _21: math::bn::U192;
    let mut _22: u128;
    let mut _23: i128;
    let mut _24: math::bn::U192;
    let mut _25: u128;
    let mut _26: i128;
    let mut _27: isize;
    let mut _29: !;
    let mut _30: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: math::bn::U192;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _38: math::bn::U192;
    let mut _39: isize;
    let mut _41: !;
    let mut _42: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: isize;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _55: bool;
    let mut _56: i128;
    let mut _58: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _59: std::result::Result<i128, error::ErrorCode>;
    let mut _60: i128;
    let mut _61: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i128>;
    let mut _62: std::result::Result<i128, error::ErrorCode>;
    let mut _63: i128;
    let mut _64: i128;
    let mut _65: isize;
    let mut _67: !;
    let mut _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: i128;
    let mut _71: isize;
    let mut _73: !;
    let mut _74: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: i128;
    scope 1 {
        debug funding_rate_delta_sign => _3;
        let _6: i128;
        let _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _31: math::bn::U192;
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: math::bn::U192;
        let _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _43: math::bn::U192;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: u128;
        let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _53: i128;
        scope 2 {
            debug funding_rate_payment_magnitude => _6;
            let _54: i128;
            scope 23 {
                debug funding_rate_payment_sign => _54;
                let _57: i128;
                let _66: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _69: i128;
                let _72: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _75: i128;
                scope 24 {
                    debug funding_rate_payment => _57;
                }
                scope 25 {
                    debug residual => _66;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _69;
                    scope 28 {
                    }
                }
                scope 29 {
                    debug residual => _72;
                    scope 30 {
                    }
                }
                scope 31 {
                    debug val => _75;
                    scope 32 {
                    }
                }
            }
        }
        scope 3 {
            debug residual => _28;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _31;
            scope 6 {
            }
        }
        scope 7 {
            debug residual => _34;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _37;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _40;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _43;
            scope 14 {
            }
        }
        scope 15 {
            debug residual => _45;
            scope 16 {
            }
        }
        scope 17 {
            debug val => _48;
            scope 18 {
            }
        }
        scope 19 {
            debug residual => _50;
            scope 20 {
            }
        }
        scope 21 {
            debug val => _53;
            scope 22 {
            }
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = _1;
        _4 = Gt(move _5, const 0_i128);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        StorageDead(_5);
        _3 = const 1_i128;
        goto -> bb3;
    }

    bb2: {
        StorageDead(_5);
        _3 = const -1_i128;
        goto -> bb3;
    }

    bb3: {
        StorageDead(_4);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _23 = _1;
        _22 = core::num::<impl i128>::unsigned_abs(move _23) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_23);
        _21 = <U192 as From<u128>>::from(move _22) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_22);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        _26 = _2;
        _25 = core::num::<impl i128>::unsigned_abs(move _26) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_26);
        _24 = <U192 as From<u128>>::from(move _25) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_25);
        _20 = <U192 as SafeMath>::safe_mul(move _21, move _24) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_21);
        _19 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_20);
        _27 = discriminant(_19);
        switchInt(move _27) -> [0: bb10, 1: bb12, otherwise: bb11];
    }

    bb10: {
        StorageLive(_31);
        _31 = ((_19 as Continue).0: math::bn::U192);
        _18 = _31;
        StorageDead(_31);
        StorageLive(_32);
        _32 = <U192 as From<u128>>::from(const _) -> [return: bb14, unwind continue];
    }

    bb11: {
        unreachable;
    }

    bb12: {
        StorageLive(_28);
        _28 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_30);
        _30 = _28;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _30) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_30);
        StorageDead(_28);
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb50;
    }

    bb14: {
        _17 = <U192 as SafeMath>::safe_div(move _18, move _32) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_18);
        _16 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _17) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_17);
        _33 = discriminant(_16);
        switchInt(move _33) -> [0: bb17, 1: bb18, otherwise: bb11];
    }

    bb17: {
        StorageLive(_37);
        _37 = ((_16 as Continue).0: math::bn::U192);
        _15 = _37;
        StorageDead(_37);
        StorageLive(_38);
        _38 = <U192 as From<u128>>::from(const _) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_34);
        _34 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_34);
        goto -> bb50;
    }

    bb20: {
        _14 = <U192 as SafeMath>::safe_div(move _15, move _38) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_38);
        StorageDead(_15);
        _13 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _14) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_14);
        _39 = discriminant(_13);
        switchInt(move _39) -> [0: bb23, 1: bb24, otherwise: bb11];
    }

    bb23: {
        StorageLive(_43);
        _43 = ((_13 as Continue).0: math::bn::U192);
        _12 = _43;
        StorageDead(_43);
        _11 = U192::try_to_u128(move _12) -> [return: bb26, unwind continue];
    }

    bb24: {
        StorageLive(_40);
        _40 = ((_13 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_42);
        _42 = _40;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _42) -> [return: bb25, unwind continue];
    }

    bb25: {
        StorageDead(_42);
        StorageDead(_40);
        goto -> bb51;
    }

    bb26: {
        StorageDead(_12);
        _10 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _11) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_11);
        _44 = discriminant(_10);
        switchInt(move _44) -> [0: bb28, 1: bb29, otherwise: bb11];
    }

    bb28: {
        StorageLive(_48);
        _48 = ((_10 as Continue).0: u128);
        _9 = _48;
        StorageDead(_48);
        _8 = <u128 as Cast>::cast::<i128>(move _9) -> [return: bb31, unwind continue];
    }

    bb29: {
        StorageLive(_45);
        _45 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb30, unwind continue];
    }

    bb30: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb52;
    }

    bb31: {
        StorageDead(_9);
        _7 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _8) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_8);
        _49 = discriminant(_7);
        switchInt(move _49) -> [0: bb33, 1: bb34, otherwise: bb11];
    }

    bb33: {
        StorageLive(_53);
        _53 = ((_7 as Continue).0: i128);
        _6 = _53;
        StorageDead(_53);
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _2;
        _55 = Gt(move _56, const 0_i128);
        switchInt(move _55) -> [0: bb37, otherwise: bb36];
    }

    bb34: {
        StorageLive(_50);
        _50 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb35, unwind continue];
    }

    bb35: {
        StorageDead(_52);
        StorageDead(_50);
        goto -> bb53;
    }

    bb36: {
        StorageDead(_56);
        _54 = const -1_i128;
        goto -> bb38;
    }

    bb37: {
        StorageDead(_56);
        _54 = const 1_i128;
        goto -> bb38;
    }

    bb38: {
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = _6;
        StorageLive(_64);
        _64 = _54;
        _62 = <i128 as SafeMath>::safe_mul(move _63, move _64) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_64);
        StorageDead(_63);
        _61 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _62) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_62);
        _65 = discriminant(_61);
        switchInt(move _65) -> [0: bb41, 1: bb42, otherwise: bb11];
    }

    bb41: {
        StorageLive(_69);
        _69 = ((_61 as Continue).0: i128);
        _60 = _69;
        StorageDead(_69);
        StorageLive(_70);
        _70 = _3;
        _59 = <i128 as SafeMath>::safe_mul(move _60, move _70) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_66);
        _66 = ((_61 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_68);
        _68 = _66;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _68) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_68);
        StorageDead(_66);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb49;
    }

    bb44: {
        StorageDead(_70);
        StorageDead(_60);
        _58 = <std::result::Result<i128, error::ErrorCode> as Try>::branch(move _59) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_59);
        _71 = discriminant(_58);
        switchInt(move _71) -> [0: bb46, 1: bb47, otherwise: bb11];
    }

    bb46: {
        StorageLive(_75);
        _75 = ((_58 as Continue).0: i128);
        _57 = _75;
        StorageDead(_75);
        StorageDead(_61);
        StorageDead(_58);
        StorageLive(_76);
        _76 = _57;
        _0 = std::result::Result::<i128, error::ErrorCode>::Ok(move _76);
        StorageDead(_76);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb55;
    }

    bb47: {
        StorageLive(_72);
        _72 = ((_58 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_74);
        _74 = _72;
        _0 = <std::result::Result<i128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _74) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_74);
        StorageDead(_72);
        goto -> bb49;
    }

    bb49: {
        StorageDead(_61);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_54);
        goto -> bb54;
    }

    bb50: {
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb51;
    }

    bb51: {
        StorageDead(_12);
        StorageDead(_11);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_9);
        StorageDead(_8);
        goto -> bb53;
    }

    bb53: {
        StorageDead(_19);
        StorageDead(_16);
        StorageDead(_13);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_6);
        StorageDead(_3);
        goto -> bb55;
    }

    bb55: {
        return;
    }
}
