// MIR for `calculate_peg_from_target_price` before PreCodegen

fn calculate_peg_from_target_price(_1: u128, _2: u128, _3: u64) -> std::result::Result<u128, error::ErrorCode> {
    debug quote_asset_reserve => _1;
    debug base_asset_reserve => _2;
    debug target_price => _3;
    let mut _0: std::result::Result<u128, error::ErrorCode>;
    let _4: u128;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _6: std::result::Result<u128, error::ErrorCode>;
    let mut _7: math::bn::U192;
    let mut _8: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _9: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _10: math::bn::U192;
    let mut _11: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _12: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _13: math::bn::U192;
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _15: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _16: math::bn::U192;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, math::bn::U192>;
    let mut _18: std::result::Result<math::bn::U192, error::ErrorCode>;
    let mut _19: math::bn::U192;
    let mut _20: u64;
    let mut _21: math::bn::U192;
    let mut _22: u128;
    let mut _23: isize;
    let _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _25: !;
    let mut _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _27: math::bn::U192;
    let mut _28: math::bn::U192;
    let mut _29: u128;
    let mut _30: isize;
    let _31: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: !;
    let mut _33: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _34: math::bn::U192;
    let mut _35: math::bn::U192;
    let mut _36: u128;
    let mut _37: bool;
    let mut _38: isize;
    let _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _40: !;
    let mut _41: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _42: math::bn::U192;
    let mut _43: math::bn::U192;
    let mut _44: isize;
    let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _48: math::bn::U192;
    let mut _49: isize;
    let _50: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _51: !;
    let mut _52: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _53: u128;
    let mut _54: u128;
    let mut _55: u128;
    scope 1 {
        debug new_peg => _4;
    }
    scope 2 {
        debug residual => _24;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _27;
        scope 5 {
        }
    }
    scope 6 {
        debug residual => _31;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _34;
        scope 9 {
        }
    }
    scope 10 {
        debug residual => _39;
        scope 11 {
        }
    }
    scope 12 {
        debug val => _42;
        scope 13 {
        }
    }
    scope 14 {
        debug residual => _45;
        scope 15 {
        }
    }
    scope 16 {
        debug val => _48;
        scope 17 {
        }
    }
    scope 18 {
        debug residual => _50;
        scope 19 {
        }
    }
    scope 20 {
        debug val => _53;
        scope 21 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _3;
        _19 = <U192 as From<u64>>::from(move _20) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _2;
        _21 = <U192 as From<u128>>::from(move _22) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_22);
        _18 = <U192 as SafeMath>::safe_mul(move _19, move _21) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_18);
        _23 = discriminant(_17);
        switchInt(move _23) -> [0: bb5, 1: bb7, otherwise: bb6];
    }

    bb5: {
        StorageLive(_27);
        _27 = ((_17 as Continue).0: math::bn::U192);
        _16 = _27;
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _1;
        _28 = <U192 as From<u128>>::from(move _29) -> [return: bb9, unwind continue];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        StorageLive(_24);
        _24 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_26);
        _26 = _24;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_26);
        StorageDead(_24);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb34;
    }

    bb9: {
        StorageDead(_29);
        _15 = <U192 as SafeMath>::safe_div(move _16, move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_28);
        StorageDead(_16);
        _14 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _15) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_15);
        _30 = discriminant(_14);
        switchInt(move _30) -> [0: bb12, 1: bb13, otherwise: bb6];
    }

    bb12: {
        StorageLive(_34);
        _34 = ((_14 as Continue).0: math::bn::U192);
        _13 = _34;
        StorageDead(_34);
        StorageLive(_35);
        StorageLive(_36);
        _37 = Eq(const 2_u128, const 0_u128);
        assert(!move _37, "attempt to divide `{}` by zero", const _) -> [success: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_31);
        _31 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_33);
        _33 = _31;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _33) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_33);
        StorageDead(_31);
        goto -> bb34;
    }

    bb15: {
        _36 = Div(const _, const 2_u128);
        _35 = <U192 as From<u128>>::from(move _36) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_36);
        _12 = <U192 as SafeMath>::safe_add(move _13, move _35) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_35);
        StorageDead(_13);
        _11 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _12) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_12);
        _38 = discriminant(_11);
        switchInt(move _38) -> [0: bb19, 1: bb20, otherwise: bb6];
    }

    bb19: {
        StorageLive(_42);
        _42 = ((_11 as Continue).0: math::bn::U192);
        _10 = _42;
        StorageDead(_42);
        StorageLive(_43);
        _43 = <U192 as From<u128>>::from(const _) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_39);
        _39 = ((_11 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_41);
        _41 = _39;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _41) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_41);
        StorageDead(_39);
        goto -> bb35;
    }

    bb22: {
        _9 = <U192 as SafeMath>::safe_div(move _10, move _43) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_43);
        StorageDead(_10);
        _8 = <std::result::Result<U192, error::ErrorCode> as Try>::branch(move _9) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_9);
        _44 = discriminant(_8);
        switchInt(move _44) -> [0: bb25, 1: bb26, otherwise: bb6];
    }

    bb25: {
        StorageLive(_48);
        _48 = ((_8 as Continue).0: math::bn::U192);
        _7 = _48;
        StorageDead(_48);
        _6 = U192::try_to_u128(move _7) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_45);
        _45 = ((_8 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_47);
        StorageDead(_45);
        goto -> bb36;
    }

    bb28: {
        StorageDead(_7);
        _5 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _6) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_6);
        _49 = discriminant(_5);
        switchInt(move _49) -> [0: bb30, 1: bb31, otherwise: bb6];
    }

    bb30: {
        StorageLive(_53);
        _53 = ((_5 as Continue).0: u128);
        _4 = _53;
        StorageDead(_53);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageLive(_54);
        StorageLive(_55);
        _55 = _4;
        _54 = <u128 as Ord>::max(move _55, const 1_u128) -> [return: bb33, unwind continue];
    }

    bb31: {
        StorageLive(_50);
        _50 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_52);
        _52 = _50;
        _0 = <std::result::Result<u128, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _52) -> [return: bb32, unwind continue];
    }

    bb32: {
        StorageDead(_52);
        StorageDead(_50);
        goto -> bb37;
    }

    bb33: {
        StorageDead(_55);
        _0 = std::result::Result::<u128, error::ErrorCode>::Ok(move _54);
        StorageDead(_54);
        StorageDead(_4);
        goto -> bb38;
    }

    bb34: {
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb35;
    }

    bb35: {
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb36;
    }

    bb36: {
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb37;
    }

    bb37: {
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_11);
        StorageDead(_8);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb38;
    }

    bb38: {
        return;
    }
}
