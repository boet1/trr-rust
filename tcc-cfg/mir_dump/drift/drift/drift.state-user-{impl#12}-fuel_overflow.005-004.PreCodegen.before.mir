// MIR for `state::user::<impl at programs/drift/src/state/user.rs:2000:1: 2001:38>::fuel_overflow` before PreCodegen

fn state::user::<impl at programs/drift/src/state/user.rs:2000:1: 2001:38>::fuel_overflow(_1: &anchor_lang::context::Context<'_, '_, '_, '_, T>) -> Option<anchor_lang::prelude::AccountLoader<'_, FuelOverflow>> {
    debug self => _1;
    let mut _0: std::option::Option<anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>>;
    let _2: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _3: std::option::Option<&anchor_lang::prelude::AccountInfo<'_>>;
    let mut _4: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _5: isize;
    let _6: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _7: !;
    let mut _8: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>, anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _10: &[anchor_lang::prelude::AccountInfo<'_>];
    scope 1 {
        debug acct => _2;
    }
    scope 2 {
        debug acct => _6;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _10 = deref_copy ((*_1).2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _4 = &(*_10);
        _3 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::get::<usize>(move _4, const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb2, 1: bb4, otherwise: bb3];
    }

    bb2: {
        _0 = Option::<anchor_lang::prelude::AccountLoader<'_, FuelOverflow>>::None;
        StorageDead(_3);
        StorageDead(_2);
        goto -> bb7;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        StorageLive(_6);
        _6 = ((_3 as Some).0: &anchor_lang::prelude::AccountInfo<'_>);
        _2 = _6;
        StorageDead(_6);
        StorageDead(_3);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_2);
        _8 = anchor_lang::prelude::AccountLoader::<'_, FuelOverflow>::try_from(move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_9);
        _0 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, FuelOverflow>, anchor_lang::error::Error>::ok(move _8) -> [return: bb6, unwind: bb8];
    }

    bb6: {
        StorageDead(_8);
        StorageDead(_2);
        goto -> bb7;
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        resume;
    }
}
