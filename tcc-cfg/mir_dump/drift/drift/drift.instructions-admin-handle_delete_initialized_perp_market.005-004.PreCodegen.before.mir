// MIR for `admin::handle_delete_initialized_perp_market` before PreCodegen

fn admin::handle_delete_initialized_perp_market(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::DeleteInitializedPerpMarket<'_>>, _2: u16) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug market_index => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _3: &mut std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _4: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::Ref<'_, state::perp_market::PerpMarket>>;
    let mut _6: std::result::Result<std::cell::Ref<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _7: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _8: isize;
    let _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _10: !;
    let mut _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _12: std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _13: ();
    let mut _14: &str;
    let _15: &str;
    let mut _16: &std::string::String;
    let _17: &std::string::String;
    let _18: std::string::String;
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[&str; 1];
    let _23: &[&str; 1];
    let _24: [&str; 1];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let mut _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let mut _30: &u16;
    let _31: &u16;
    let _32: &state::perp_market::PerpMarket;
    let mut _33: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let _35: ();
    let mut _36: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _37: std::result::Result<(), error::ErrorCode>;
    let mut _38: bool;
    let mut _39: u16;
    let mut _40: u16;
    let mut _41: &state::state::State;
    let mut _42: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _43: (u16, bool);
    let mut _44: u16;
    let mut _45: ();
    let _47: ();
    let mut _48: &str;
    let _49: &str;
    let mut _50: &std::string::String;
    let _51: &std::string::String;
    let _52: std::string::String;
    let mut _54: std::fmt::Arguments<'_>;
    let mut _55: &[&str];
    let mut _56: &[&str; 2];
    let _57: &[&str; 2];
    let _58: [&str; 2];
    let mut _59: &[core::fmt::rt::Argument<'_>];
    let mut _60: &[core::fmt::rt::Argument<'_>; 1];
    let _61: &[core::fmt::rt::Argument<'_>; 1];
    let _62: [core::fmt::rt::Argument<'_>; 1];
    let mut _63: core::fmt::rt::Argument<'_>;
    let mut _64: &error::ErrorCode;
    let _65: &error::ErrorCode;
    let _66: ();
    let mut _67: &str;
    let _68: &str;
    let mut _69: &std::string::String;
    let _70: &std::string::String;
    let _71: std::string::String;
    let mut _73: std::fmt::Arguments<'_>;
    let mut _74: &[&str];
    let mut _75: &[&str; 2];
    let _76: &[&str; 2];
    let _77: [&str; 2];
    let mut _78: &[core::fmt::rt::Argument<'_>];
    let mut _79: &[core::fmt::rt::Argument<'_>; 2];
    let _80: &[core::fmt::rt::Argument<'_>; 2];
    let _81: [core::fmt::rt::Argument<'_>; 2];
    let mut _82: core::fmt::rt::Argument<'_>;
    let mut _83: &u16;
    let _84: &u16;
    let _85: &state::state::State;
    let mut _86: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _87: core::fmt::rt::Argument<'_>;
    let mut _88: &u16;
    let _89: &u16;
    let mut _90: error::ErrorCode;
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _96: ();
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _98: std::result::Result<(), error::ErrorCode>;
    let mut _99: bool;
    let mut _100: &state::perp_market::MarketStatus;
    let _101: &state::perp_market::PerpMarket;
    let mut _102: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _103: &state::perp_market::MarketStatus;
    let _104: state::perp_market::MarketStatus;
    let mut _105: ();
    let _107: ();
    let mut _108: &str;
    let _109: &str;
    let mut _110: &std::string::String;
    let _111: &std::string::String;
    let _112: std::string::String;
    let mut _114: std::fmt::Arguments<'_>;
    let mut _115: &[&str];
    let mut _116: &[&str; 2];
    let _117: &[&str; 2];
    let _118: [&str; 2];
    let mut _119: &[core::fmt::rt::Argument<'_>];
    let mut _120: &[core::fmt::rt::Argument<'_>; 1];
    let _121: &[core::fmt::rt::Argument<'_>; 1];
    let _122: [core::fmt::rt::Argument<'_>; 1];
    let mut _123: core::fmt::rt::Argument<'_>;
    let mut _124: &error::ErrorCode;
    let _125: &error::ErrorCode;
    let _126: ();
    let mut _127: &str;
    let _128: &str;
    let mut _129: &std::string::String;
    let _130: &std::string::String;
    let _131: std::string::String;
    let mut _133: std::fmt::Arguments<'_>;
    let mut _134: &[&str];
    let mut _135: &[&str; 1];
    let _136: &[&str; 1];
    let _137: [&str; 1];
    let mut _138: error::ErrorCode;
    let mut _139: isize;
    let mut _141: !;
    let mut _142: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _144: ();
    let mut _145: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _146: std::result::Result<(), error::ErrorCode>;
    let mut _147: bool;
    let mut _148: u32;
    let mut _149: &state::perp_market::PerpMarket;
    let mut _150: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _151: ();
    let _153: ();
    let mut _154: &str;
    let _155: &str;
    let mut _156: &std::string::String;
    let _157: &std::string::String;
    let _158: std::string::String;
    let mut _160: std::fmt::Arguments<'_>;
    let mut _161: &[&str];
    let mut _162: &[&str; 2];
    let _163: &[&str; 2];
    let _164: [&str; 2];
    let mut _165: &[core::fmt::rt::Argument<'_>];
    let mut _166: &[core::fmt::rt::Argument<'_>; 1];
    let _167: &[core::fmt::rt::Argument<'_>; 1];
    let _168: [core::fmt::rt::Argument<'_>; 1];
    let mut _169: core::fmt::rt::Argument<'_>;
    let mut _170: &error::ErrorCode;
    let _171: &error::ErrorCode;
    let _172: ();
    let mut _173: &str;
    let _174: &str;
    let mut _175: &std::string::String;
    let _176: &std::string::String;
    let _177: std::string::String;
    let mut _179: std::fmt::Arguments<'_>;
    let mut _180: &[&str];
    let mut _181: &[&str; 2];
    let _182: &[&str; 2];
    let _183: [&str; 2];
    let mut _184: &[core::fmt::rt::Argument<'_>];
    let mut _185: &[core::fmt::rt::Argument<'_>; 1];
    let _186: &[core::fmt::rt::Argument<'_>; 1];
    let _187: [core::fmt::rt::Argument<'_>; 1];
    let mut _188: core::fmt::rt::Argument<'_>;
    let mut _189: &u32;
    let _190: &u32;
    let _191: &state::perp_market::PerpMarket;
    let mut _192: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _193: error::ErrorCode;
    let mut _194: isize;
    let mut _196: !;
    let mut _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _199: ();
    let mut _200: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _201: std::result::Result<(), error::ErrorCode>;
    let mut _202: bool;
    let mut _203: u16;
    let mut _204: &state::perp_market::PerpMarket;
    let mut _205: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _206: u16;
    let mut _207: ();
    let _209: ();
    let mut _210: &str;
    let _211: &str;
    let mut _212: &std::string::String;
    let _213: &std::string::String;
    let _214: std::string::String;
    let mut _216: std::fmt::Arguments<'_>;
    let mut _217: &[&str];
    let mut _218: &[&str; 2];
    let _219: &[&str; 2];
    let _220: [&str; 2];
    let mut _221: &[core::fmt::rt::Argument<'_>];
    let mut _222: &[core::fmt::rt::Argument<'_>; 1];
    let _223: &[core::fmt::rt::Argument<'_>; 1];
    let _224: [core::fmt::rt::Argument<'_>; 1];
    let mut _225: core::fmt::rt::Argument<'_>;
    let mut _226: &error::ErrorCode;
    let _227: &error::ErrorCode;
    let _228: ();
    let mut _229: &str;
    let _230: &str;
    let mut _231: &std::string::String;
    let _232: &std::string::String;
    let _233: std::string::String;
    let mut _235: std::fmt::Arguments<'_>;
    let mut _236: &[&str];
    let mut _237: &[&str; 2];
    let _238: &[&str; 2];
    let _239: [&str; 2];
    let mut _240: &[core::fmt::rt::Argument<'_>];
    let mut _241: &[core::fmt::rt::Argument<'_>; 2];
    let _242: &[core::fmt::rt::Argument<'_>; 2];
    let _243: [core::fmt::rt::Argument<'_>; 2];
    let mut _244: core::fmt::rt::Argument<'_>;
    let mut _245: &u16;
    let _246: &u16;
    let mut _247: core::fmt::rt::Argument<'_>;
    let mut _248: &u16;
    let _249: &u16;
    let _250: &state::perp_market::PerpMarket;
    let mut _251: &std::cell::Ref<'_, state::perp_market::PerpMarket>;
    let mut _252: error::ErrorCode;
    let mut _253: isize;
    let mut _255: !;
    let mut _256: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _258: ();
    let mut _259: u16;
    let mut _260: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u16>;
    let mut _261: std::result::Result<u16, error::ErrorCode>;
    let mut _262: std::option::Option<u16>;
    let mut _263: u16;
    let mut _264: &state::state::State;
    let mut _265: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _266: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _267: isize;
    let mut _269: !;
    let mut _270: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _272: &mut state::state::State;
    let mut _273: &mut anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _274: ();
    let mut _285: &mut instructions::admin::DeleteInitializedPerpMarket<'_>;
    let mut _286: &mut instructions::admin::DeleteInitializedPerpMarket<'_>;
    let mut _287: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _288: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _289: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _290: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _291: isize;
    let mut _292: isize;
    let mut _293: isize;
    let mut _294: isize;
    let mut _295: isize;
    let mut _296: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _297: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _298: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _299: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug perp_market => _3;
        let _19: std::string::String;
        let _34: &mut std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
        let mut _284: &[&str; 1];
        scope 6 {
            debug res => _19;
        }
        scope 7 {
            debug state => _34;
            let _46: error::ErrorCode;
            let _92: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _95: ();
            let _106: error::ErrorCode;
            let _140: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _143: ();
            let _152: error::ErrorCode;
            let _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _198: ();
            let _208: error::ErrorCode;
            let _254: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _257: ();
            let _268: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _271: u16;
            let mut _281: &state::perp_market::MarketStatus;
            scope 8 {
                debug error_code => _46;
                let _53: std::string::String;
                let _72: std::string::String;
                let mut _282: &[&str; 2];
                let mut _283: &[&str; 2];
                scope 9 {
                    debug res => _53;
                }
                scope 10 {
                    debug res => _72;
                }
            }
            scope 11 {
                debug residual => _92;
                scope 12 {
                }
            }
            scope 13 {
                debug val => _95;
                scope 14 {
                }
            }
            scope 15 {
                debug error_code => _106;
                let _113: std::string::String;
                let _132: std::string::String;
                let mut _279: &[&str; 1];
                let mut _280: &[&str; 2];
                scope 16 {
                    debug res => _113;
                }
                scope 17 {
                    debug res => _132;
                }
            }
            scope 18 {
                debug residual => _140;
                scope 19 {
                }
            }
            scope 20 {
                debug val => _143;
                scope 21 {
                }
            }
            scope 22 {
                debug error_code => _152;
                let _159: std::string::String;
                let _178: std::string::String;
                let mut _277: &[&str; 2];
                let mut _278: &[&str; 2];
                scope 23 {
                    debug res => _159;
                }
                scope 24 {
                    debug res => _178;
                }
            }
            scope 25 {
                debug residual => _195;
                scope 26 {
                }
            }
            scope 27 {
                debug val => _198;
                scope 28 {
                }
            }
            scope 29 {
                debug error_code => _208;
                let _215: std::string::String;
                let _234: std::string::String;
                let mut _275: &[&str; 2];
                let mut _276: &[&str; 2];
                scope 30 {
                    debug res => _215;
                }
                scope 31 {
                    debug res => _234;
                }
            }
            scope 32 {
                debug residual => _254;
                scope 33 {
                }
            }
            scope 34 {
                debug val => _257;
                scope 35 {
                }
            }
            scope 36 {
                debug residual => _268;
                scope 37 {
                }
            }
            scope 38 {
                debug val => _271;
                scope 39 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _9;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _12;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _285 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedPerpMarket<'_>);
        _7 = &((*_285).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _6 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_7);
        _5 = <std::result::Result<Ref<'_, PerpMarket>, anchor_lang::error::Error> as Try>::branch(move _6) -> [return: bb2, unwind: bb122];
    }

    bb2: {
        StorageDead(_6);
        _8 = discriminant(_5);
        switchInt(move _8) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_12);
        _12 = move ((_5 as Continue).0: std::cell::Ref<'_, state::perp_market::PerpMarket>);
        _4 = move _12;
        StorageDead(_12);
        _3 = &mut _4;
        _291 = discriminant(_5);
        StorageDead(_5);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        _284 = const _;
        _23 = &(*_284);
        _22 = &(*_23);
        _21 = move _22 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_22);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &(*_3);
        _32 = <Ref<'_, PerpMarket> as Deref>::deref(move _33) -> [return: bb7, unwind: bb121];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_9);
        _9 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_11);
        _11 = move _9;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _11) -> [return: bb6, unwind: bb123];
    }

    bb6: {
        StorageDead(_11);
        StorageDead(_9);
        _293 = discriminant(_5);
        StorageDead(_5);
        goto -> bb110;
    }

    bb7: {
        StorageDead(_33);
        _31 = &((*_32).21: u16);
        _30 = &(*_31);
        _29 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _30) -> [return: bb8, unwind: bb121];
    }

    bb8: {
        StorageDead(_30);
        _28 = [move _29];
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = move _26 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_26);
        _20 = Arguments::<'_>::new_v1(move _21, move _25) -> [return: bb9, unwind: bb121];
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_21);
        _19 = format(move _20) -> [return: bb10, unwind: bb121];
    }

    bb10: {
        StorageDead(_20);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_23);
        _18 = move _19;
        StorageDead(_19);
        _17 = &_18;
        _16 = &(*_17);
        _15 = <String as Deref>::deref(move _16) -> [return: bb11, unwind: bb120];
    }

    bb11: {
        _14 = &(*_15);
        StorageDead(_16);
        _13 = solana_program::log::sol_log(move _14) -> [return: bb12, unwind: bb120];
    }

    bb12: {
        StorageDead(_14);
        drop(_18) -> [return: bb13, unwind: bb121];
    }

    bb13: {
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_15);
        StorageDead(_13);
        StorageLive(_34);
        _286 = deref_copy (_1.1: &mut instructions::admin::DeleteInitializedPerpMarket<'_>);
        _34 = &mut ((*_286).1: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _287 = deref_copy (*_34);
        _296 = (((_287.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _42 = &(*_296);
        _41 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _42) -> [return: bb14, unwind: bb121];
    }

    bb14: {
        StorageDead(_42);
        _40 = ((*_41).13: u16);
        _43 = CheckedSub(_40, const 1_u16);
        assert(!move (_43.1: bool), "attempt to compute `{} - {}`, which would overflow", move _40, const 1_u16) -> [success: bb15, unwind: bb121];
    }

    bb15: {
        _39 = move (_43.0: u16);
        StorageDead(_40);
        StorageLive(_44);
        _44 = _2;
        _38 = Eq(move _39, move _44);
        switchInt(move _38) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_45);
        _45 = ();
        _37 = std::result::Result::<(), error::ErrorCode>::Ok(move _45);
        StorageDead(_45);
        goto -> bb32;
    }

    bb17: {
        StorageDead(_44);
        StorageDead(_41);
        StorageDead(_39);
        StorageLive(_46);
        _46 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        _283 = const _;
        _57 = &(*_283);
        _56 = &(*_57);
        _55 = move _56 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_56);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = &_46;
        _64 = &(*_65);
        _63 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _64) -> [return: bb18, unwind: bb121];
    }

    bb18: {
        StorageDead(_64);
        _62 = [move _63];
        StorageDead(_63);
        _61 = &_62;
        _60 = &(*_61);
        _59 = move _60 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_60);
        _54 = Arguments::<'_>::new_v1(move _55, move _59) -> [return: bb19, unwind: bb121];
    }

    bb19: {
        StorageDead(_59);
        StorageDead(_55);
        _53 = format(move _54) -> [return: bb20, unwind: bb121];
    }

    bb20: {
        StorageDead(_54);
        StorageDead(_65);
        StorageDead(_62);
        StorageDead(_61);
        StorageDead(_57);
        _52 = move _53;
        StorageDead(_53);
        _51 = &_52;
        _50 = &(*_51);
        _49 = <String as Deref>::deref(move _50) -> [return: bb21, unwind: bb119];
    }

    bb21: {
        _48 = &(*_49);
        StorageDead(_50);
        _47 = solana_program::log::sol_log(move _48) -> [return: bb22, unwind: bb119];
    }

    bb22: {
        StorageDead(_48);
        drop(_52) -> [return: bb23, unwind: bb121];
    }

    bb23: {
        StorageDead(_52);
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_47);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _282 = const _;
        _76 = &(*_282);
        _75 = &(*_76);
        _74 = move _75 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_75);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _288 = deref_copy (*_34);
        _297 = (((_288.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _86 = &(*_297);
        _85 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _86) -> [return: bb24, unwind: bb121];
    }

    bb24: {
        StorageDead(_86);
        _84 = &((*_85).13: u16);
        _83 = &(*_84);
        _82 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _83) -> [return: bb25, unwind: bb121];
    }

    bb25: {
        StorageDead(_83);
        StorageLive(_87);
        StorageLive(_88);
        StorageLive(_89);
        _89 = &_2;
        _88 = &(*_89);
        _87 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _88) -> [return: bb26, unwind: bb121];
    }

    bb26: {
        StorageDead(_88);
        _81 = [move _82, move _87];
        StorageDead(_87);
        StorageDead(_82);
        _80 = &_81;
        _79 = &(*_80);
        _78 = move _79 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_79);
        _73 = Arguments::<'_>::new_v1(move _74, move _78) -> [return: bb27, unwind: bb121];
    }

    bb27: {
        StorageDead(_78);
        StorageDead(_74);
        _72 = format(move _73) -> [return: bb28, unwind: bb121];
    }

    bb28: {
        StorageDead(_73);
        StorageDead(_89);
        StorageDead(_85);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_76);
        _71 = move _72;
        StorageDead(_72);
        _70 = &_71;
        _69 = &(*_70);
        _68 = <String as Deref>::deref(move _69) -> [return: bb29, unwind: bb118];
    }

    bb29: {
        _67 = &(*_68);
        StorageDead(_69);
        _66 = solana_program::log::sol_log(move _67) -> [return: bb30, unwind: bb118];
    }

    bb30: {
        StorageDead(_67);
        drop(_71) -> [return: bb31, unwind: bb121];
    }

    bb31: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_68);
        StorageDead(_66);
        StorageLive(_90);
        _90 = _46;
        _37 = std::result::Result::<(), error::ErrorCode>::Err(move _90);
        StorageDead(_90);
        StorageDead(_46);
        goto -> bb32;
    }

    bb32: {
        StorageDead(_38);
        _36 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _37) -> [return: bb33, unwind: bb121];
    }

    bb33: {
        StorageDead(_37);
        _91 = discriminant(_36);
        switchInt(move _91) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_95);
        _95 = ((_36 as Continue).0: ());
        _35 = _95;
        StorageDead(_95);
        StorageDead(_36);
        StorageDead(_35);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &(*_3);
        _101 = <Ref<'_, PerpMarket> as Deref>::deref(move _102) -> [return: bb37, unwind: bb121];
    }

    bb35: {
        StorageLive(_92);
        _92 = ((_36 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_94);
        _94 = _92;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _94) -> [return: bb36, unwind: bb121];
    }

    bb36: {
        StorageDead(_94);
        StorageDead(_92);
        StorageDead(_36);
        StorageDead(_35);
        goto -> bb109;
    }

    bb37: {
        StorageDead(_102);
        _100 = &((*_101).22: state::perp_market::MarketStatus);
        StorageLive(_103);
        _281 = const _;
        _103 = &(*_281);
        _99 = <state::perp_market::MarketStatus as PartialEq>::eq(move _100, move _103) -> [return: bb38, unwind: bb121];
    }

    bb38: {
        switchInt(move _99) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = ();
        _98 = std::result::Result::<(), error::ErrorCode>::Ok(move _105);
        StorageDead(_105);
        goto -> bb52;
    }

    bb40: {
        StorageDead(_103);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_106);
        _106 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _280 = const _;
        _117 = &(*_280);
        _116 = &(*_117);
        _115 = move _116 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_116);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        _125 = &_106;
        _124 = &(*_125);
        _123 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _124) -> [return: bb41, unwind: bb121];
    }

    bb41: {
        StorageDead(_124);
        _122 = [move _123];
        StorageDead(_123);
        _121 = &_122;
        _120 = &(*_121);
        _119 = move _120 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_120);
        _114 = Arguments::<'_>::new_v1(move _115, move _119) -> [return: bb42, unwind: bb121];
    }

    bb42: {
        StorageDead(_119);
        StorageDead(_115);
        _113 = format(move _114) -> [return: bb43, unwind: bb121];
    }

    bb43: {
        StorageDead(_114);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_117);
        _112 = move _113;
        StorageDead(_113);
        _111 = &_112;
        _110 = &(*_111);
        _109 = <String as Deref>::deref(move _110) -> [return: bb44, unwind: bb117];
    }

    bb44: {
        _108 = &(*_109);
        StorageDead(_110);
        _107 = solana_program::log::sol_log(move _108) -> [return: bb45, unwind: bb117];
    }

    bb45: {
        StorageDead(_108);
        drop(_112) -> [return: bb46, unwind: bb121];
    }

    bb46: {
        StorageDead(_112);
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_107);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        _279 = const _;
        _136 = &(*_279);
        _135 = &(*_136);
        _134 = move _135 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_135);
        _133 = Arguments::<'_>::new_const(move _134) -> [return: bb47, unwind: bb121];
    }

    bb47: {
        StorageDead(_134);
        _132 = format(move _133) -> [return: bb48, unwind: bb121];
    }

    bb48: {
        StorageDead(_133);
        StorageDead(_136);
        _131 = move _132;
        StorageDead(_132);
        _130 = &_131;
        _129 = &(*_130);
        _128 = <String as Deref>::deref(move _129) -> [return: bb49, unwind: bb116];
    }

    bb49: {
        _127 = &(*_128);
        StorageDead(_129);
        _126 = solana_program::log::sol_log(move _127) -> [return: bb50, unwind: bb116];
    }

    bb50: {
        StorageDead(_127);
        drop(_131) -> [return: bb51, unwind: bb121];
    }

    bb51: {
        StorageDead(_131);
        StorageDead(_130);
        StorageDead(_128);
        StorageDead(_126);
        StorageLive(_138);
        _138 = _106;
        _98 = std::result::Result::<(), error::ErrorCode>::Err(move _138);
        StorageDead(_138);
        StorageDead(_106);
        goto -> bb52;
    }

    bb52: {
        StorageDead(_99);
        _97 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _98) -> [return: bb53, unwind: bb121];
    }

    bb53: {
        StorageDead(_98);
        _139 = discriminant(_97);
        switchInt(move _139) -> [0: bb54, 1: bb55, otherwise: bb4];
    }

    bb54: {
        StorageLive(_143);
        _143 = ((_97 as Continue).0: ());
        _96 = _143;
        StorageDead(_143);
        StorageDead(_97);
        StorageDead(_96);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &(*_3);
        _149 = <Ref<'_, PerpMarket> as Deref>::deref(move _150) -> [return: bb57, unwind: bb121];
    }

    bb55: {
        StorageLive(_140);
        _140 = ((_97 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_142);
        _142 = _140;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _142) -> [return: bb56, unwind: bb121];
    }

    bb56: {
        StorageDead(_142);
        StorageDead(_140);
        StorageDead(_97);
        StorageDead(_96);
        goto -> bb109;
    }

    bb57: {
        StorageDead(_150);
        _148 = ((*_149).20: u32);
        _147 = Eq(move _148, const 0_u32);
        switchInt(move _147) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_151);
        _151 = ();
        _146 = std::result::Result::<(), error::ErrorCode>::Ok(move _151);
        StorageDead(_151);
        goto -> bb73;
    }

    bb59: {
        StorageDead(_149);
        StorageDead(_148);
        StorageLive(_152);
        _152 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        _278 = const _;
        _163 = &(*_278);
        _162 = &(*_163);
        _161 = move _162 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_162);
        StorageLive(_165);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        _171 = &_152;
        _170 = &(*_171);
        _169 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _170) -> [return: bb60, unwind: bb121];
    }

    bb60: {
        StorageDead(_170);
        _168 = [move _169];
        StorageDead(_169);
        _167 = &_168;
        _166 = &(*_167);
        _165 = move _166 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_166);
        _160 = Arguments::<'_>::new_v1(move _161, move _165) -> [return: bb61, unwind: bb121];
    }

    bb61: {
        StorageDead(_165);
        StorageDead(_161);
        _159 = format(move _160) -> [return: bb62, unwind: bb121];
    }

    bb62: {
        StorageDead(_160);
        StorageDead(_171);
        StorageDead(_168);
        StorageDead(_167);
        StorageDead(_163);
        _158 = move _159;
        StorageDead(_159);
        _157 = &_158;
        _156 = &(*_157);
        _155 = <String as Deref>::deref(move _156) -> [return: bb63, unwind: bb115];
    }

    bb63: {
        _154 = &(*_155);
        StorageDead(_156);
        _153 = solana_program::log::sol_log(move _154) -> [return: bb64, unwind: bb115];
    }

    bb64: {
        StorageDead(_154);
        drop(_158) -> [return: bb65, unwind: bb121];
    }

    bb65: {
        StorageDead(_158);
        StorageDead(_157);
        StorageDead(_155);
        StorageDead(_153);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _277 = const _;
        _182 = &(*_277);
        _181 = &(*_182);
        _180 = move _181 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_181);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        _192 = &(*_3);
        _191 = <Ref<'_, PerpMarket> as Deref>::deref(move _192) -> [return: bb66, unwind: bb121];
    }

    bb66: {
        StorageDead(_192);
        _190 = &((*_191).20: u32);
        _189 = &(*_190);
        _188 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _189) -> [return: bb67, unwind: bb121];
    }

    bb67: {
        StorageDead(_189);
        _187 = [move _188];
        StorageDead(_188);
        _186 = &_187;
        _185 = &(*_186);
        _184 = move _185 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_185);
        _179 = Arguments::<'_>::new_v1(move _180, move _184) -> [return: bb68, unwind: bb121];
    }

    bb68: {
        StorageDead(_184);
        StorageDead(_180);
        _178 = format(move _179) -> [return: bb69, unwind: bb121];
    }

    bb69: {
        StorageDead(_179);
        StorageDead(_191);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_186);
        StorageDead(_182);
        _177 = move _178;
        StorageDead(_178);
        _176 = &_177;
        _175 = &(*_176);
        _174 = <String as Deref>::deref(move _175) -> [return: bb70, unwind: bb114];
    }

    bb70: {
        _173 = &(*_174);
        StorageDead(_175);
        _172 = solana_program::log::sol_log(move _173) -> [return: bb71, unwind: bb114];
    }

    bb71: {
        StorageDead(_173);
        drop(_177) -> [return: bb72, unwind: bb121];
    }

    bb72: {
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_172);
        StorageLive(_193);
        _193 = _152;
        _146 = std::result::Result::<(), error::ErrorCode>::Err(move _193);
        StorageDead(_193);
        StorageDead(_152);
        goto -> bb73;
    }

    bb73: {
        StorageDead(_147);
        _145 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _146) -> [return: bb74, unwind: bb121];
    }

    bb74: {
        StorageDead(_146);
        _194 = discriminant(_145);
        switchInt(move _194) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_198);
        _198 = ((_145 as Continue).0: ());
        _144 = _198;
        StorageDead(_198);
        StorageDead(_145);
        StorageDead(_144);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_3);
        _204 = <Ref<'_, PerpMarket> as Deref>::deref(move _205) -> [return: bb78, unwind: bb121];
    }

    bb76: {
        StorageLive(_195);
        _195 = ((_145 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_197);
        _197 = _195;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _197) -> [return: bb77, unwind: bb121];
    }

    bb77: {
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_145);
        StorageDead(_144);
        goto -> bb109;
    }

    bb78: {
        StorageDead(_205);
        _203 = ((*_204).21: u16);
        StorageLive(_206);
        _206 = _2;
        _202 = Eq(move _203, move _206);
        switchInt(move _202) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_207);
        _207 = ();
        _201 = std::result::Result::<(), error::ErrorCode>::Ok(move _207);
        StorageDead(_207);
        goto -> bb95;
    }

    bb80: {
        StorageDead(_206);
        StorageDead(_204);
        StorageDead(_203);
        StorageLive(_208);
        _208 = error::ErrorCode::InvalidMarketAccountforDeletion;
        StorageLive(_209);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        _276 = const _;
        _219 = &(*_276);
        _218 = &(*_219);
        _217 = move _218 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_218);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        _227 = &_208;
        _226 = &(*_227);
        _225 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _226) -> [return: bb81, unwind: bb121];
    }

    bb81: {
        StorageDead(_226);
        _224 = [move _225];
        StorageDead(_225);
        _223 = &_224;
        _222 = &(*_223);
        _221 = move _222 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_222);
        _216 = Arguments::<'_>::new_v1(move _217, move _221) -> [return: bb82, unwind: bb121];
    }

    bb82: {
        StorageDead(_221);
        StorageDead(_217);
        _215 = format(move _216) -> [return: bb83, unwind: bb121];
    }

    bb83: {
        StorageDead(_216);
        StorageDead(_227);
        StorageDead(_224);
        StorageDead(_223);
        StorageDead(_219);
        _214 = move _215;
        StorageDead(_215);
        _213 = &_214;
        _212 = &(*_213);
        _211 = <String as Deref>::deref(move _212) -> [return: bb84, unwind: bb113];
    }

    bb84: {
        _210 = &(*_211);
        StorageDead(_212);
        _209 = solana_program::log::sol_log(move _210) -> [return: bb85, unwind: bb113];
    }

    bb85: {
        StorageDead(_210);
        drop(_214) -> [return: bb86, unwind: bb121];
    }

    bb86: {
        StorageDead(_214);
        StorageDead(_213);
        StorageDead(_211);
        StorageDead(_209);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        StorageLive(_231);
        StorageLive(_232);
        StorageLive(_233);
        StorageLive(_234);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        _275 = const _;
        _238 = &(*_275);
        _237 = &(*_238);
        _236 = move _237 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_237);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_2;
        _245 = &(*_246);
        _244 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _245) -> [return: bb87, unwind: bb121];
    }

    bb87: {
        StorageDead(_245);
        StorageLive(_247);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        StorageLive(_251);
        _251 = &(*_3);
        _250 = <Ref<'_, PerpMarket> as Deref>::deref(move _251) -> [return: bb88, unwind: bb121];
    }

    bb88: {
        StorageDead(_251);
        _249 = &((*_250).21: u16);
        _248 = &(*_249);
        _247 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _248) -> [return: bb89, unwind: bb121];
    }

    bb89: {
        StorageDead(_248);
        _243 = [move _244, move _247];
        StorageDead(_247);
        StorageDead(_244);
        _242 = &_243;
        _241 = &(*_242);
        _240 = move _241 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_241);
        _235 = Arguments::<'_>::new_v1(move _236, move _240) -> [return: bb90, unwind: bb121];
    }

    bb90: {
        StorageDead(_240);
        StorageDead(_236);
        _234 = format(move _235) -> [return: bb91, unwind: bb121];
    }

    bb91: {
        StorageDead(_235);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_246);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_238);
        _233 = move _234;
        StorageDead(_234);
        _232 = &_233;
        _231 = &(*_232);
        _230 = <String as Deref>::deref(move _231) -> [return: bb92, unwind: bb112];
    }

    bb92: {
        _229 = &(*_230);
        StorageDead(_231);
        _228 = solana_program::log::sol_log(move _229) -> [return: bb93, unwind: bb112];
    }

    bb93: {
        StorageDead(_229);
        drop(_233) -> [return: bb94, unwind: bb121];
    }

    bb94: {
        StorageDead(_233);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_228);
        StorageLive(_252);
        _252 = _208;
        _201 = std::result::Result::<(), error::ErrorCode>::Err(move _252);
        StorageDead(_252);
        StorageDead(_208);
        goto -> bb95;
    }

    bb95: {
        StorageDead(_202);
        _200 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _201) -> [return: bb96, unwind: bb121];
    }

    bb96: {
        StorageDead(_201);
        _253 = discriminant(_200);
        switchInt(move _253) -> [0: bb97, 1: bb98, otherwise: bb4];
    }

    bb97: {
        StorageLive(_257);
        _257 = ((_200 as Continue).0: ());
        _199 = _257;
        StorageDead(_257);
        StorageDead(_200);
        StorageDead(_199);
        StorageLive(_258);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        _289 = deref_copy (*_34);
        _298 = (((_289.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _265 = &(*_298);
        _264 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _265) -> [return: bb100, unwind: bb121];
    }

    bb98: {
        StorageLive(_254);
        _254 = ((_200 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_256);
        _256 = _254;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _256) -> [return: bb99, unwind: bb121];
    }

    bb99: {
        StorageDead(_256);
        StorageDead(_254);
        StorageDead(_200);
        StorageDead(_199);
        goto -> bb109;
    }

    bb100: {
        StorageDead(_265);
        _263 = ((*_264).13: u16);
        _262 = core::num::<impl u16>::checked_sub(move _263, const 1_u16) -> [return: bb101, unwind: bb121];
    }

    bb101: {
        StorageDead(_263);
        StorageLive(_266);
        _266 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _261 = Option::<u16>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _262, move _266) -> [return: bb102, unwind: bb121];
    }

    bb102: {
        StorageDead(_266);
        StorageDead(_262);
        _260 = <std::result::Result<u16, error::ErrorCode> as Try>::branch(move _261) -> [return: bb103, unwind: bb121];
    }

    bb103: {
        StorageDead(_261);
        _267 = discriminant(_260);
        switchInt(move _267) -> [0: bb104, 1: bb105, otherwise: bb4];
    }

    bb104: {
        StorageLive(_271);
        _271 = ((_260 as Continue).0: u16);
        _259 = _271;
        StorageDead(_271);
        StorageLive(_272);
        StorageLive(_273);
        _290 = deref_copy (*_34);
        _299 = (((_290.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _273 = &mut (*_299);
        _272 = <anchor_lang::prelude::Account<'_, state::state::State> as DerefMut>::deref_mut(move _273) -> [return: bb107, unwind: bb121];
    }

    bb105: {
        StorageLive(_268);
        _268 = ((_260 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_270);
        _270 = _268;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _270) -> [return: bb106, unwind: bb121];
    }

    bb106: {
        StorageDead(_270);
        StorageDead(_268);
        StorageDead(_259);
        StorageDead(_264);
        StorageDead(_260);
        StorageDead(_258);
        goto -> bb109;
    }

    bb107: {
        StorageDead(_273);
        ((*_272).13: u16) = move _259;
        _258 = const ();
        StorageDead(_259);
        StorageDead(_272);
        StorageDead(_264);
        StorageDead(_260);
        StorageDead(_258);
        StorageLive(_274);
        _274 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _274);
        StorageDead(_274);
        StorageDead(_34);
        drop(_4) -> [return: bb108, unwind: bb122];
    }

    bb108: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb111;
    }

    bb109: {
        StorageDead(_34);
        drop(_4) -> [return: bb110, unwind: bb122];
    }

    bb110: {
        StorageDead(_4);
        StorageDead(_3);
        goto -> bb111;
    }

    bb111: {
        return;
    }

    bb112 (cleanup): {
        drop(_233) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb113 (cleanup): {
        drop(_214) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb114 (cleanup): {
        drop(_177) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb115 (cleanup): {
        drop(_158) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb116 (cleanup): {
        drop(_131) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb117 (cleanup): {
        drop(_112) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb118 (cleanup): {
        drop(_71) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb119 (cleanup): {
        drop(_52) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb120 (cleanup): {
        drop(_18) -> [return: bb121, unwind terminate(cleanup)];
    }

    bb121 (cleanup): {
        drop(_4) -> [return: bb122, unwind terminate(cleanup)];
    }

    bb122 (cleanup): {
        resume;
    }

    bb123 (cleanup): {
        _295 = discriminant(_5);
        goto -> bb122;
    }
}
