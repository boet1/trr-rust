// MIR for `insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:36:1: 36:24>::increase_if_shares` before PreCodegen

fn insurance_fund_stake::<impl at programs/drift/src/state/insurance_fund_stake.rs:36:1: 36:24>::increase_if_shares(_1: &mut InsuranceFundStake, _2: u128, _3: &SpotMarket) -> std::result::Result<(), error::ErrorCode> {
    debug self => _1;
    debug delta => _2;
    debug spot_market => _3;
    let mut _0: std::result::Result<(), error::ErrorCode>;
    let _4: ();
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _6: std::result::Result<(), error::ErrorCode>;
    let mut _7: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _8: &state::spot_market::SpotMarket;
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: ();
    let _14: ();
    let mut _15: u128;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _17: std::result::Result<u128, error::ErrorCode>;
    let mut _18: std::option::Option<u128>;
    let mut _19: u128;
    let mut _20: u128;
    let mut _21: {closure@programs/drift/src/error.rs:658:9: 658:11};
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: u128;
    let mut _27: ();
    scope 1 {
        debug residual => _10;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _13;
        scope 4 {
        }
    }
    scope 5 {
        debug residual => _23;
        scope 6 {
        }
    }
    scope 7 {
        debug val => _26;
        scope 8 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = &(*_3);
        _6 = InsuranceFundStake::validate_base(move _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _9 = discriminant(_5);
        switchInt(move _9) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_13);
        _13 = ((_5 as Continue).0: ());
        _4 = _13;
        StorageDead(_13);
        StorageDead(_5);
        StorageDead(_4);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        _19 = ((*_1).1: u128);
        StorageLive(_20);
        _20 = _2;
        _18 = core::num::<impl u128>::checked_add(move _19, move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_10);
        _10 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb13;
    }

    bb7: {
        StorageDead(_20);
        StorageDead(_19);
        StorageLive(_21);
        _21 = {closure@programs/drift/src/error.rs:658:9: 658:11};
        _17 = Option::<u128>::ok_or_else::<error::ErrorCode, {closure@programs/drift/src/error.rs:658:9: 658:11}>(move _18, move _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_18);
        _16 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_17);
        _22 = discriminant(_16);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_16 as Continue).0: u128);
        _15 = _26;
        StorageDead(_26);
        ((*_1).1: u128) = move _15;
        _14 = const ();
        StorageDead(_15);
        StorageDead(_16);
        StorageDead(_14);
        StorageLive(_27);
        _27 = ();
        _0 = std::result::Result::<(), error::ErrorCode>::Ok(move _27);
        StorageDead(_27);
        goto -> bb13;
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        StorageDead(_15);
        StorageDead(_16);
        StorageDead(_14);
        goto -> bb13;
    }

    bb13: {
        return;
    }
}
