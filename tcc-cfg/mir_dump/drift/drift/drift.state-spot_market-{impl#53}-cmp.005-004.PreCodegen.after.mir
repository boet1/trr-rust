// MIR for `state::spot_market::<impl at programs/drift/src/state/spot_market.rs:671:86: 671:89>::cmp` after PreCodegen

fn state::spot_market::<impl at programs/drift/src/state/spot_market.rs:671:86: 671:89>::cmp(_1: &state::spot_market::AssetTier, _2: &state::spot_market::AssetTier) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: isize;
    let mut _4: &state::spot_market::AssetTier;
    let mut _6: &state::spot_market::AssetTier;
    let mut _7: &isize;
    let _8: &isize;
    let mut _9: &isize;
    let _10: &isize;
    scope 1 {
        debug __self_tag => _3;
        let _5: isize;
        scope 2 {
            debug __arg1_tag => _5;
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        _4 = &(*_1);
        _3 = discriminant((*_4));
        StorageDead(_4);
        StorageLive(_5);
        StorageLive(_6);
        _6 = &(*_2);
        _5 = discriminant((*_6));
        StorageDead(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_3;
        _7 = &(*_8);
        StorageLive(_9);
        StorageLive(_10);
        _10 = &_5;
        _9 = &(*_10);
        _0 = <isize as Ord>::cmp(move _7, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_7);
        StorageDead(_5);
        StorageDead(_3);
        StorageDead(_10);
        StorageDead(_8);
        return;
    }
}
