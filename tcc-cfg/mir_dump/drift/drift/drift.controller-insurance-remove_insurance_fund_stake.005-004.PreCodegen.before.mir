// MIR for `controller::insurance::remove_insurance_fund_stake` before PreCodegen

fn controller::insurance::remove_insurance_fund_stake(_1: u64, _2: &mut InsuranceFundStake, _3: &mut UserStats, _4: &mut SpotMarket, _5: i64) -> std::result::Result<u64, error::ErrorCode> {
    debug insurance_vault_amount => _1;
    debug insurance_fund_stake => _2;
    debug user_stats => _3;
    debug spot_market => _4;
    debug now => _5;
    let mut _0: std::result::Result<u64, error::ErrorCode>;
    let _6: i64;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _8: std::result::Result<i64, error::ErrorCode>;
    let mut _9: i64;
    let mut _10: i64;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _15: i64;
    let _16: ();
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _18: std::result::Result<(), error::ErrorCode>;
    let mut _19: bool;
    let mut _20: i64;
    let mut _21: i64;
    let mut _22: ();
    let _24: ();
    let mut _25: &str;
    let _26: &str;
    let mut _27: &std::string::String;
    let _28: &std::string::String;
    let _29: std::string::String;
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[&str; 2];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let mut _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: &[core::fmt::rt::Argument<'_>; 1];
    let _39: [core::fmt::rt::Argument<'_>; 1];
    let mut _40: core::fmt::rt::Argument<'_>;
    let mut _41: &error::ErrorCode;
    let _42: &error::ErrorCode;
    let mut _43: error::ErrorCode;
    let mut _44: isize;
    let mut _46: !;
    let mut _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _49: ();
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _51: std::result::Result<(), error::ErrorCode>;
    let mut _52: u64;
    let mut _53: &mut state::spot_market::SpotMarket;
    let mut _54: isize;
    let mut _56: !;
    let mut _57: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _59: ();
    let mut _60: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _61: std::result::Result<(), error::ErrorCode>;
    let mut _62: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _63: &mut state::spot_market::SpotMarket;
    let mut _64: isize;
    let mut _66: !;
    let mut _67: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _70: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _71: std::result::Result<u128, error::ErrorCode>;
    let mut _72: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _73: &state::spot_market::SpotMarket;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _82: ();
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _84: std::result::Result<(), error::ErrorCode>;
    let mut _85: bool;
    let mut _86: u128;
    let mut _87: ();
    let _89: ();
    let mut _90: &str;
    let _91: &str;
    let mut _92: &std::string::String;
    let _93: &std::string::String;
    let _94: std::string::String;
    let mut _96: std::fmt::Arguments<'_>;
    let mut _97: &[&str];
    let mut _98: &[&str; 2];
    let _99: &[&str; 2];
    let _100: [&str; 2];
    let mut _101: &[core::fmt::rt::Argument<'_>];
    let mut _102: &[core::fmt::rt::Argument<'_>; 1];
    let _103: &[core::fmt::rt::Argument<'_>; 1];
    let _104: [core::fmt::rt::Argument<'_>; 1];
    let mut _105: core::fmt::rt::Argument<'_>;
    let mut _106: &error::ErrorCode;
    let _107: &error::ErrorCode;
    let _108: ();
    let mut _109: &str;
    let _110: &str;
    let mut _111: error::ErrorCode;
    let mut _112: isize;
    let mut _114: !;
    let mut _115: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _117: ();
    let mut _118: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _119: std::result::Result<(), error::ErrorCode>;
    let mut _120: bool;
    let mut _121: u128;
    let mut _122: u128;
    let mut _123: ();
    let _125: ();
    let mut _126: &str;
    let _127: &str;
    let mut _128: &std::string::String;
    let _129: &std::string::String;
    let _130: std::string::String;
    let mut _132: std::fmt::Arguments<'_>;
    let mut _133: &[&str];
    let mut _134: &[&str; 2];
    let _135: &[&str; 2];
    let _136: [&str; 2];
    let mut _137: &[core::fmt::rt::Argument<'_>];
    let mut _138: &[core::fmt::rt::Argument<'_>; 1];
    let _139: &[core::fmt::rt::Argument<'_>; 1];
    let _140: [core::fmt::rt::Argument<'_>; 1];
    let mut _141: core::fmt::rt::Argument<'_>;
    let mut _142: &error::ErrorCode;
    let _143: &error::ErrorCode;
    let mut _144: error::ErrorCode;
    let mut _145: isize;
    let mut _147: !;
    let mut _148: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _151: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _152: std::result::Result<u64, error::ErrorCode>;
    let mut _153: u128;
    let mut _154: u128;
    let mut _155: u64;
    let mut _156: isize;
    let mut _158: !;
    let mut _159: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _162: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _163: std::result::Result<u128, error::ErrorCode>;
    let mut _164: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _165: &state::spot_market::SpotMarket;
    let mut _166: u64;
    let mut _167: isize;
    let mut _169: !;
    let mut _170: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _173: u64;
    let mut _174: u64;
    let _175: ();
    let mut _176: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _177: std::result::Result<(), error::ErrorCode>;
    let mut _178: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _179: u128;
    let mut _180: &state::spot_market::SpotMarket;
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _186: i64;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _188: std::result::Result<i64, error::ErrorCode>;
    let mut _189: i64;
    let mut _190: i64;
    let mut _191: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _192: std::result::Result<i64, error::ErrorCode>;
    let mut _193: u64;
    let mut _194: isize;
    let mut _196: !;
    let mut _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _199: isize;
    let mut _201: !;
    let mut _202: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _204: u128;
    let mut _205: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _206: std::result::Result<u128, error::ErrorCode>;
    let mut _207: u128;
    let mut _208: u128;
    let mut _209: isize;
    let mut _211: !;
    let mut _212: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _214: u128;
    let mut _215: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _216: std::result::Result<u128, error::ErrorCode>;
    let mut _217: u128;
    let mut _218: u128;
    let mut _219: isize;
    let mut _221: !;
    let mut _222: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _224: i64;
    let mut _226: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _227: std::result::Result<u128, error::ErrorCode>;
    let mut _228: &state::insurance_fund_stake::InsuranceFundStake;
    let mut _229: &state::spot_market::SpotMarket;
    let mut _230: isize;
    let mut _232: !;
    let mut _233: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _235: ();
    let mut _236: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _237: std::result::Result<(), error::ErrorCode>;
    let mut _238: i64;
    let mut _239: i64;
    let mut _240: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _241: std::result::Result<i64, error::ErrorCode>;
    let mut _242: u64;
    let mut _243: isize;
    let mut _245: !;
    let mut _246: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _248: bool;
    let mut _249: u64;
    let mut _250: &mut state::insurance_fund_stake::InsuranceFundStake;
    let mut _251: &mut state::user::UserStats;
    let mut _252: &mut state::spot_market::SpotMarket;
    let mut _253: i64;
    let mut _254: isize;
    let mut _256: !;
    let mut _257: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _259: ();
    let _260: ();
    let mut _261: &[&[u8]];
    let mut _262: &[&[u8]; 1];
    let _263: &[&[u8]; 1];
    let _264: [&[u8]; 1];
    let mut _265: &[u8];
    let _266: &[u8];
    let mut _267: &std::vec::Vec<u8>;
    let _268: &std::vec::Vec<u8>;
    let _269: std::vec::Vec<u8>;
    let mut _270: &state::events::InsuranceFundStakeRecord;
    let _271: &state::events::InsuranceFundStakeRecord;
    let _272: state::events::InsuranceFundStakeRecord;
    let mut _273: i64;
    let mut _274: anchor_lang::prelude::Pubkey;
    let mut _275: state::events::StakeAction;
    let mut _276: u64;
    let mut _277: u16;
    let mut _278: u64;
    let mut _279: u128;
    let mut _280: u128;
    let mut _281: u128;
    let mut _282: u128;
    let mut _283: u128;
    let mut _284: u128;
    let mut _285: u64;
    scope 1 {
        debug time_since_withdraw_request => _6;
        let _23: error::ErrorCode;
        let _45: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _48: ();
        let _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _58: ();
        let _65: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _68: ();
        let _69: u128;
        let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _78: u128;
        scope 6 {
            debug error_code => _23;
            let _30: std::string::String;
            let mut _288: &[&str; 2];
            scope 7 {
                debug res => _30;
            }
        }
        scope 8 {
            debug residual => _45;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _48;
            scope 11 {
            }
        }
        scope 12 {
            debug residual => _55;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _58;
            scope 15 {
            }
        }
        scope 16 {
            debug residual => _65;
            scope 17 {
            }
        }
        scope 18 {
            debug val => _68;
            scope 19 {
            }
        }
        scope 20 {
            debug if_shares_before => _69;
            let _79: u128;
            scope 25 {
                debug total_if_shares_before => _79;
                let _80: u128;
                scope 26 {
                    debug user_if_shares_before => _80;
                    let _81: u128;
                    scope 27 {
                        debug n_shares => _81;
                        let _88: error::ErrorCode;
                        let _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _116: ();
                        let _124: error::ErrorCode;
                        let _146: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _149: ();
                        let _150: u64;
                        let _157: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _160: u64;
                        scope 28 {
                            debug error_code => _88;
                            let _95: std::string::String;
                            let mut _287: &[&str; 2];
                            scope 29 {
                                debug res => _95;
                            }
                        }
                        scope 30 {
                            debug residual => _113;
                            scope 31 {
                            }
                        }
                        scope 32 {
                            debug val => _116;
                            scope 33 {
                            }
                        }
                        scope 34 {
                            debug error_code => _124;
                            let _131: std::string::String;
                            let mut _286: &[&str; 2];
                            scope 35 {
                                debug res => _131;
                            }
                        }
                        scope 36 {
                            debug residual => _146;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug val => _149;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug amount => _150;
                            let _161: u128;
                            let _168: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _171: u128;
                            scope 45 {
                                debug _if_shares_lost => _161;
                                let _172: u64;
                                scope 50 {
                                    debug withdraw_amount => _172;
                                    let _182: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _185: ();
                                    let _195: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _198: i64;
                                    let _200: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _203: i64;
                                    let _210: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _213: u128;
                                    let _220: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _223: u128;
                                    let _225: u128;
                                    let _231: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _234: u128;
                                    scope 51 {
                                        debug residual => _182;
                                        scope 52 {
                                        }
                                    }
                                    scope 53 {
                                        debug val => _185;
                                        scope 54 {
                                        }
                                    }
                                    scope 55 {
                                        debug residual => _195;
                                        scope 56 {
                                        }
                                    }
                                    scope 57 {
                                        debug val => _198;
                                        scope 58 {
                                        }
                                    }
                                    scope 59 {
                                        debug residual => _200;
                                        scope 60 {
                                        }
                                    }
                                    scope 61 {
                                        debug val => _203;
                                        scope 62 {
                                        }
                                    }
                                    scope 63 {
                                        debug residual => _210;
                                        scope 64 {
                                        }
                                    }
                                    scope 65 {
                                        debug val => _213;
                                        scope 66 {
                                        }
                                    }
                                    scope 67 {
                                        debug residual => _220;
                                        scope 68 {
                                        }
                                    }
                                    scope 69 {
                                        debug val => _223;
                                        scope 70 {
                                        }
                                    }
                                    scope 71 {
                                        debug if_shares_after => _225;
                                        let _244: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _247: i64;
                                        let _255: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                        let _258: ();
                                        scope 76 {
                                            debug residual => _244;
                                            scope 77 {
                                            }
                                        }
                                        scope 78 {
                                            debug val => _247;
                                            scope 79 {
                                            }
                                        }
                                        scope 80 {
                                            debug residual => _255;
                                            scope 81 {
                                            }
                                        }
                                        scope 82 {
                                            debug val => _258;
                                            scope 83 {
                                            }
                                        }
                                    }
                                    scope 72 {
                                        debug residual => _231;
                                        scope 73 {
                                        }
                                    }
                                    scope 74 {
                                        debug val => _234;
                                        scope 75 {
                                        }
                                    }
                                }
                            }
                            scope 46 {
                                debug residual => _168;
                                scope 47 {
                                }
                            }
                            scope 48 {
                                debug val => _171;
                                scope 49 {
                                }
                            }
                        }
                        scope 41 {
                            debug residual => _157;
                            scope 42 {
                            }
                        }
                        scope 43 {
                            debug val => _160;
                            scope 44 {
                            }
                        }
                    }
                }
            }
        }
        scope 21 {
            debug residual => _75;
            scope 22 {
            }
        }
        scope 23 {
            debug val => _78;
            scope 24 {
            }
        }
    }
    scope 2 {
        debug residual => _12;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _15;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = _5;
        StorageLive(_10);
        _10 = ((*_2).6: i64);
        _8 = <i64 as SafeMath>::safe_sub(move _9, move _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: i64);
        _6 = _15;
        StorageDead(_15);
        StorageDead(_7);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = _6;
        StorageLive(_21);
        _21 = (((*_4).9: state::spot_market::InsuranceFund).4: i64);
        _19 = Ge(move _20, move _21);
        switchInt(move _19) -> [0: bb8, otherwise: bb7];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_14);
        _14 = _12;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        StorageDead(_7);
        goto -> bb126;
    }

    bb7: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_22);
        _22 = ();
        _18 = std::result::Result::<(), error::ErrorCode>::Ok(move _22);
        StorageDead(_22);
        goto -> bb15;
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_20);
        StorageLive(_23);
        _23 = error::ErrorCode::TryingToRemoveLiquidityTooFast;
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _288 = const _;
        _34 = &(*_288);
        _33 = &(*_34);
        _32 = move _33 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_33);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _42 = &_23;
        _41 = &(*_42);
        _40 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _41) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_41);
        _39 = [move _40];
        StorageDead(_40);
        _38 = &_39;
        _37 = &(*_38);
        _36 = move _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_37);
        _31 = Arguments::<'_>::new_v1(move _32, move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        StorageDead(_36);
        StorageDead(_32);
        _30 = format(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_31);
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_34);
        _29 = move _30;
        StorageDead(_30);
        _28 = &_29;
        _27 = &(*_28);
        _26 = <String as Deref>::deref(move _27) -> [return: bb12, unwind: bb131];
    }

    bb12: {
        _25 = &(*_26);
        StorageDead(_27);
        _24 = solana_program::log::sol_log(move _25) -> [return: bb13, unwind: bb131];
    }

    bb13: {
        StorageDead(_25);
        drop(_29) -> [return: bb14, unwind: bb132];
    }

    bb14: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_24);
        StorageLive(_43);
        _43 = _23;
        _18 = std::result::Result::<(), error::ErrorCode>::Err(move _43);
        StorageDead(_43);
        StorageDead(_23);
        goto -> bb15;
    }

    bb15: {
        StorageDead(_19);
        _17 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _18) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_18);
        _44 = discriminant(_17);
        switchInt(move _44) -> [0: bb17, 1: bb18, otherwise: bb4];
    }

    bb17: {
        StorageLive(_48);
        _48 = ((_17 as Continue).0: ());
        _16 = _48;
        StorageDead(_48);
        StorageDead(_17);
        StorageDead(_16);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _1;
        StorageLive(_53);
        _53 = &mut (*_4);
        _51 = apply_rebase_to_insurance_fund(move _52, move _53) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_45);
        _45 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_47);
        _47 = _45;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _47) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_47);
        StorageDead(_45);
        StorageDead(_17);
        StorageDead(_16);
        goto -> bb126;
    }

    bb20: {
        StorageDead(_53);
        StorageDead(_52);
        _50 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _51) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_51);
        _54 = discriminant(_50);
        switchInt(move _54) -> [0: bb22, 1: bb23, otherwise: bb4];
    }

    bb22: {
        StorageLive(_58);
        _58 = ((_50 as Continue).0: ());
        _49 = _58;
        StorageDead(_58);
        StorageDead(_50);
        StorageDead(_49);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &mut (*_2);
        StorageLive(_63);
        _63 = &mut (*_4);
        _61 = apply_rebase_to_insurance_fund_stake(move _62, move _63) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_55);
        _55 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_57);
        _57 = _55;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _57) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_57);
        StorageDead(_55);
        StorageDead(_50);
        StorageDead(_49);
        goto -> bb126;
    }

    bb25: {
        StorageDead(_63);
        StorageDead(_62);
        _60 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _61) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_61);
        _64 = discriminant(_60);
        switchInt(move _64) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_68);
        _68 = ((_60 as Continue).0: ());
        _59 = _68;
        StorageDead(_68);
        StorageDead(_60);
        StorageDead(_59);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &(*_2);
        StorageLive(_73);
        _73 = &(*_4);
        _71 = InsuranceFundStake::checked_if_shares(move _72, move _73) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_65);
        _65 = ((_60 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_67);
        _67 = _65;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _67) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_67);
        StorageDead(_65);
        StorageDead(_60);
        StorageDead(_59);
        goto -> bb126;
    }

    bb30: {
        StorageDead(_73);
        StorageDead(_72);
        _70 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _71) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_71);
        _74 = discriminant(_70);
        switchInt(move _74) -> [0: bb32, 1: bb33, otherwise: bb4];
    }

    bb32: {
        StorageLive(_78);
        _78 = ((_70 as Continue).0: u128);
        _69 = _78;
        StorageDead(_78);
        StorageDead(_70);
        StorageLive(_79);
        _79 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_80);
        _80 = (((*_4).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_81);
        _81 = ((*_2).2: u128);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _81;
        _85 = Gt(move _86, const 0_u128);
        switchInt(move _85) -> [0: bb36, otherwise: bb35];
    }

    bb33: {
        StorageLive(_75);
        _75 = ((_70 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_70);
        goto -> bb125;
    }

    bb35: {
        StorageDead(_86);
        StorageLive(_87);
        _87 = ();
        _84 = std::result::Result::<(), error::ErrorCode>::Ok(move _87);
        StorageDead(_87);
        goto -> bb44;
    }

    bb36: {
        StorageDead(_86);
        StorageLive(_88);
        _88 = error::ErrorCode::InvalidIFUnstake;
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _287 = const _;
        _99 = &(*_287);
        _98 = &(*_99);
        _97 = move _98 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_98);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_88;
        _106 = &(*_107);
        _105 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _106) -> [return: bb37, unwind continue];
    }

    bb37: {
        StorageDead(_106);
        _104 = [move _105];
        StorageDead(_105);
        _103 = &_104;
        _102 = &(*_103);
        _101 = move _102 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_102);
        _96 = Arguments::<'_>::new_v1(move _97, move _101) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_101);
        StorageDead(_97);
        _95 = format(move _96) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_96);
        StorageDead(_107);
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_99);
        _94 = move _95;
        StorageDead(_95);
        _93 = &_94;
        _92 = &(*_93);
        _91 = <String as Deref>::deref(move _92) -> [return: bb40, unwind: bb130];
    }

    bb40: {
        _90 = &(*_91);
        StorageDead(_92);
        _89 = solana_program::log::sol_log(move _90) -> [return: bb41, unwind: bb130];
    }

    bb41: {
        StorageDead(_90);
        drop(_94) -> [return: bb42, unwind: bb132];
    }

    bb42: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_91);
        StorageDead(_89);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        _110 = const "Must submit withdraw request and wait the escrow period";
        _109 = &(*_110);
        _108 = solana_program::log::sol_log(move _109) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_110);
        StorageDead(_108);
        StorageLive(_111);
        _111 = _88;
        _84 = std::result::Result::<(), error::ErrorCode>::Err(move _111);
        StorageDead(_111);
        StorageDead(_88);
        goto -> bb44;
    }

    bb44: {
        StorageDead(_85);
        _83 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _84) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_84);
        _112 = discriminant(_83);
        switchInt(move _112) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_116);
        _116 = ((_83 as Continue).0: ());
        _82 = _116;
        StorageDead(_116);
        StorageDead(_83);
        StorageDead(_82);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = _69;
        StorageLive(_122);
        _122 = _81;
        _120 = Ge(move _121, move _122);
        switchInt(move _120) -> [0: bb50, otherwise: bb49];
    }

    bb47: {
        StorageLive(_113);
        _113 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_115);
        _115 = _113;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _115) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_115);
        StorageDead(_113);
        StorageDead(_83);
        StorageDead(_82);
        goto -> bb124;
    }

    bb49: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_123);
        _123 = ();
        _119 = std::result::Result::<(), error::ErrorCode>::Ok(move _123);
        StorageDead(_123);
        goto -> bb57;
    }

    bb50: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_124);
        _124 = error::ErrorCode::InsufficientIFShares;
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _286 = const _;
        _135 = &(*_286);
        _134 = &(*_135);
        _133 = move _134 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_134);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_124;
        _142 = &(*_143);
        _141 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _142) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_142);
        _140 = [move _141];
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = move _138 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_138);
        _132 = Arguments::<'_>::new_v1(move _133, move _137) -> [return: bb52, unwind continue];
    }

    bb52: {
        StorageDead(_137);
        StorageDead(_133);
        _131 = format(move _132) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_132);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_135);
        _130 = move _131;
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = <String as Deref>::deref(move _128) -> [return: bb54, unwind: bb129];
    }

    bb54: {
        _126 = &(*_127);
        StorageDead(_128);
        _125 = solana_program::log::sol_log(move _126) -> [return: bb55, unwind: bb129];
    }

    bb55: {
        StorageDead(_126);
        drop(_130) -> [return: bb56, unwind: bb132];
    }

    bb56: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageLive(_144);
        _144 = _124;
        _119 = std::result::Result::<(), error::ErrorCode>::Err(move _144);
        StorageDead(_144);
        StorageDead(_124);
        goto -> bb57;
    }

    bb57: {
        StorageDead(_120);
        _118 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _119) -> [return: bb58, unwind continue];
    }

    bb58: {
        StorageDead(_119);
        _145 = discriminant(_118);
        switchInt(move _145) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_149);
        _149 = ((_118 as Continue).0: ());
        _117 = _149;
        StorageDead(_149);
        StorageDead(_118);
        StorageDead(_117);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        _153 = _81;
        StorageLive(_154);
        _154 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_155);
        _155 = _1;
        _152 = if_shares_to_vault_amount(move _153, move _154, move _155) -> [return: bb62, unwind continue];
    }

    bb60: {
        StorageLive(_146);
        _146 = ((_118 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_148);
        _148 = _146;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _148) -> [return: bb61, unwind continue];
    }

    bb61: {
        StorageDead(_148);
        StorageDead(_146);
        StorageDead(_118);
        StorageDead(_117);
        goto -> bb124;
    }

    bb62: {
        StorageDead(_155);
        StorageDead(_154);
        StorageDead(_153);
        _151 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _152) -> [return: bb63, unwind continue];
    }

    bb63: {
        StorageDead(_152);
        _156 = discriminant(_151);
        switchInt(move _156) -> [0: bb64, 1: bb65, otherwise: bb4];
    }

    bb64: {
        StorageLive(_160);
        _160 = ((_151 as Continue).0: u64);
        _150 = _160;
        StorageDead(_160);
        StorageDead(_151);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        _164 = &(*_2);
        StorageLive(_165);
        _165 = &(*_4);
        StorageLive(_166);
        _166 = _1;
        _163 = calculate_if_shares_lost(move _164, move _165, move _166) -> [return: bb67, unwind continue];
    }

    bb65: {
        StorageLive(_157);
        _157 = ((_151 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_159);
        _159 = _157;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _159) -> [return: bb66, unwind continue];
    }

    bb66: {
        StorageDead(_159);
        StorageDead(_157);
        StorageDead(_151);
        goto -> bb123;
    }

    bb67: {
        StorageDead(_166);
        StorageDead(_165);
        StorageDead(_164);
        _162 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _163) -> [return: bb68, unwind continue];
    }

    bb68: {
        StorageDead(_163);
        _167 = discriminant(_162);
        switchInt(move _167) -> [0: bb69, 1: bb70, otherwise: bb4];
    }

    bb69: {
        StorageLive(_171);
        _171 = ((_162 as Continue).0: u128);
        _161 = _171;
        StorageDead(_171);
        StorageDead(_162);
        StorageLive(_172);
        StorageLive(_173);
        _173 = _150;
        StorageLive(_174);
        _174 = ((*_2).5: u64);
        _172 = <u64 as Ord>::min(move _173, move _174) -> [return: bb72, unwind continue];
    }

    bb70: {
        StorageLive(_168);
        _168 = ((_162 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_170);
        _170 = _168;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _170) -> [return: bb71, unwind continue];
    }

    bb71: {
        StorageDead(_170);
        StorageDead(_168);
        StorageDead(_162);
        goto -> bb122;
    }

    bb72: {
        StorageDead(_174);
        StorageDead(_173);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        _178 = &mut (*_2);
        StorageLive(_179);
        _179 = _81;
        StorageLive(_180);
        _180 = &(*_4);
        _177 = InsuranceFundStake::decrease_if_shares(move _178, move _179, move _180) -> [return: bb73, unwind continue];
    }

    bb73: {
        StorageDead(_180);
        StorageDead(_179);
        StorageDead(_178);
        _176 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _177) -> [return: bb74, unwind continue];
    }

    bb74: {
        StorageDead(_177);
        _181 = discriminant(_176);
        switchInt(move _181) -> [0: bb75, 1: bb76, otherwise: bb4];
    }

    bb75: {
        StorageLive(_185);
        _185 = ((_176 as Continue).0: ());
        _175 = _185;
        StorageDead(_185);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        _189 = ((*_2).7: i64);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _193 = _172;
        _192 = <u64 as Cast>::cast::<i64>(move _193) -> [return: bb78, unwind continue];
    }

    bb76: {
        StorageLive(_182);
        _182 = ((_176 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_184);
        _184 = _182;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _184) -> [return: bb77, unwind continue];
    }

    bb77: {
        StorageDead(_184);
        StorageDead(_182);
        StorageDead(_176);
        StorageDead(_175);
        goto -> bb121;
    }

    bb78: {
        StorageDead(_193);
        _191 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _192) -> [return: bb79, unwind continue];
    }

    bb79: {
        StorageDead(_192);
        _194 = discriminant(_191);
        switchInt(move _194) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_198);
        _198 = ((_191 as Continue).0: i64);
        _190 = _198;
        StorageDead(_198);
        _188 = <i64 as SafeMath>::safe_sub(move _189, move _190) -> [return: bb83, unwind continue];
    }

    bb81: {
        StorageLive(_195);
        _195 = ((_191 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_197);
        _197 = _195;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _197) -> [return: bb82, unwind continue];
    }

    bb82: {
        StorageDead(_197);
        StorageDead(_195);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_188);
        goto -> bb120;
    }

    bb83: {
        StorageDead(_190);
        StorageDead(_189);
        _187 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _188) -> [return: bb84, unwind continue];
    }

    bb84: {
        StorageDead(_188);
        _199 = discriminant(_187);
        switchInt(move _199) -> [0: bb85, 1: bb86, otherwise: bb4];
    }

    bb85: {
        StorageLive(_203);
        _203 = ((_187 as Continue).0: i64);
        _186 = _203;
        StorageDead(_203);
        ((*_2).7: i64) = move _186;
        StorageDead(_186);
        StorageDead(_191);
        StorageDead(_187);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        _207 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_208);
        _208 = _81;
        _206 = <u128 as SafeMath>::safe_sub(move _207, move _208) -> [return: bb88, unwind continue];
    }

    bb86: {
        StorageLive(_200);
        _200 = ((_187 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_202);
        _202 = _200;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _202) -> [return: bb87, unwind continue];
    }

    bb87: {
        StorageDead(_202);
        StorageDead(_200);
        goto -> bb120;
    }

    bb88: {
        StorageDead(_208);
        StorageDead(_207);
        _205 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _206) -> [return: bb89, unwind continue];
    }

    bb89: {
        StorageDead(_206);
        _209 = discriminant(_205);
        switchInt(move _209) -> [0: bb90, 1: bb91, otherwise: bb4];
    }

    bb90: {
        StorageLive(_213);
        _213 = ((_205 as Continue).0: u128);
        _204 = _213;
        StorageDead(_213);
        (((*_4).9: state::spot_market::InsuranceFund).1: u128) = move _204;
        StorageDead(_204);
        StorageDead(_205);
        StorageLive(_214);
        StorageLive(_215);
        StorageLive(_216);
        StorageLive(_217);
        _217 = (((*_4).9: state::spot_market::InsuranceFund).2: u128);
        StorageLive(_218);
        _218 = _81;
        _216 = <u128 as SafeMath>::safe_sub(move _217, move _218) -> [return: bb93, unwind continue];
    }

    bb91: {
        StorageLive(_210);
        _210 = ((_205 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_212);
        _212 = _210;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _212) -> [return: bb92, unwind continue];
    }

    bb92: {
        StorageDead(_212);
        StorageDead(_210);
        StorageDead(_204);
        StorageDead(_205);
        goto -> bb121;
    }

    bb93: {
        StorageDead(_218);
        StorageDead(_217);
        _215 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _216) -> [return: bb94, unwind continue];
    }

    bb94: {
        StorageDead(_216);
        _219 = discriminant(_215);
        switchInt(move _219) -> [0: bb95, 1: bb96, otherwise: bb4];
    }

    bb95: {
        StorageLive(_223);
        _223 = ((_215 as Continue).0: u128);
        _214 = _223;
        StorageDead(_223);
        (((*_4).9: state::spot_market::InsuranceFund).2: u128) = move _214;
        StorageDead(_214);
        StorageDead(_215);
        ((*_2).2: u128) = const 0_u128;
        ((*_2).5: u64) = const 0_u64;
        StorageLive(_224);
        _224 = _5;
        ((*_2).6: i64) = move _224;
        StorageDead(_224);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        _228 = &(*_2);
        StorageLive(_229);
        _229 = &(*_4);
        _227 = InsuranceFundStake::checked_if_shares(move _228, move _229) -> [return: bb98, unwind continue];
    }

    bb96: {
        StorageLive(_220);
        _220 = ((_215 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_222);
        _222 = _220;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _222) -> [return: bb97, unwind continue];
    }

    bb97: {
        StorageDead(_222);
        StorageDead(_220);
        StorageDead(_214);
        StorageDead(_215);
        goto -> bb121;
    }

    bb98: {
        StorageDead(_229);
        StorageDead(_228);
        _226 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _227) -> [return: bb99, unwind continue];
    }

    bb99: {
        StorageDead(_227);
        _230 = discriminant(_226);
        switchInt(move _230) -> [0: bb100, 1: bb101, otherwise: bb4];
    }

    bb100: {
        StorageLive(_234);
        _234 = ((_226 as Continue).0: u128);
        _225 = _234;
        StorageDead(_234);
        StorageDead(_226);
        StorageLive(_235);
        StorageLive(_236);
        StorageLive(_237);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        StorageLive(_242);
        _242 = _172;
        _241 = <u64 as Cast>::cast::<i64>(move _242) -> [return: bb103, unwind continue];
    }

    bb101: {
        StorageLive(_231);
        _231 = ((_226 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_233);
        _233 = _231;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _233) -> [return: bb102, unwind continue];
    }

    bb102: {
        StorageDead(_233);
        StorageDead(_231);
        StorageDead(_226);
        goto -> bb119;
    }

    bb103: {
        StorageDead(_242);
        _240 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _241) -> [return: bb104, unwind continue];
    }

    bb104: {
        StorageDead(_241);
        _243 = discriminant(_240);
        switchInt(move _243) -> [0: bb105, 1: bb106, otherwise: bb4];
    }

    bb105: {
        StorageLive(_247);
        _247 = ((_240 as Continue).0: i64);
        _239 = _247;
        StorageDead(_247);
        _248 = Eq(_239, const i64::MIN);
        assert(!move _248, "attempt to negate `{}`, which would overflow", _239) -> [success: bb108, unwind continue];
    }

    bb106: {
        StorageLive(_244);
        _244 = ((_240 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_246);
        _246 = _244;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _246) -> [return: bb107, unwind continue];
    }

    bb107: {
        StorageDead(_246);
        StorageDead(_244);
        StorageDead(_239);
        StorageDead(_238);
        StorageDead(_237);
        goto -> bb118;
    }

    bb108: {
        _238 = Neg(move _239);
        StorageDead(_239);
        StorageLive(_249);
        _249 = _1;
        StorageLive(_250);
        _250 = &mut (*_2);
        StorageLive(_251);
        _251 = &mut (*_3);
        StorageLive(_252);
        _252 = &mut (*_4);
        StorageLive(_253);
        _253 = _5;
        _237 = update_user_stats_if_stake_amount(move _238, move _249, move _250, move _251, move _252, move _253) -> [return: bb109, unwind continue];
    }

    bb109: {
        StorageDead(_253);
        StorageDead(_252);
        StorageDead(_251);
        StorageDead(_250);
        StorageDead(_249);
        StorageDead(_238);
        _236 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _237) -> [return: bb110, unwind continue];
    }

    bb110: {
        StorageDead(_237);
        _254 = discriminant(_236);
        switchInt(move _254) -> [0: bb111, 1: bb112, otherwise: bb4];
    }

    bb111: {
        StorageLive(_258);
        _258 = ((_236 as Continue).0: ());
        _235 = _258;
        StorageDead(_258);
        StorageDead(_240);
        StorageDead(_236);
        StorageDead(_235);
        StorageLive(_259);
        StorageLive(_260);
        StorageLive(_261);
        StorageLive(_262);
        StorageLive(_263);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        StorageLive(_273);
        _273 = _5;
        StorageLive(_274);
        _274 = ((*_3).0: anchor_lang::prelude::Pubkey);
        StorageLive(_275);
        _275 = StakeAction::Unstake;
        StorageLive(_276);
        _276 = _172;
        StorageLive(_277);
        _277 = ((*_4).42: u16);
        StorageLive(_278);
        _278 = _1;
        StorageLive(_279);
        _279 = _69;
        StorageLive(_280);
        _280 = _80;
        StorageLive(_281);
        _281 = _79;
        StorageLive(_282);
        _282 = _225;
        StorageLive(_283);
        _283 = (((*_4).9: state::spot_market::InsuranceFund).1: u128);
        StorageLive(_284);
        _284 = (((*_4).9: state::spot_market::InsuranceFund).2: u128);
        _272 = InsuranceFundStakeRecord { ts: move _273, user_authority: move _274, action: move _275, amount: move _276, market_index: move _277, insurance_vault_amount_before: move _278, if_shares_before: move _279, user_if_shares_before: move _280, total_if_shares_before: move _281, if_shares_after: move _282, user_if_shares_after: move _284, total_if_shares_after: move _283 };
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_281);
        StorageDead(_280);
        StorageDead(_279);
        StorageDead(_278);
        StorageDead(_277);
        StorageDead(_276);
        StorageDead(_275);
        StorageDead(_274);
        StorageDead(_273);
        _271 = &_272;
        _270 = &(*_271);
        _269 = <InsuranceFundStakeRecord as anchor_lang::Event>::data(move _270) -> [return: bb114, unwind continue];
    }

    bb112: {
        StorageLive(_255);
        _255 = ((_236 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_257);
        _257 = _255;
        _0 = <std::result::Result<u64, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _257) -> [return: bb113, unwind continue];
    }

    bb113: {
        StorageDead(_257);
        StorageDead(_255);
        goto -> bb118;
    }

    bb114: {
        StorageDead(_270);
        _268 = &_269;
        _267 = &(*_268);
        _266 = <Vec<u8> as Deref>::deref(move _267) -> [return: bb115, unwind: bb128];
    }

    bb115: {
        _265 = &(*_266);
        StorageDead(_267);
        _264 = [move _265];
        StorageDead(_265);
        _263 = &_264;
        _262 = &(*_263);
        _261 = move _262 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_262);
        _260 = solana_program::log::sol_log_data(move _261) -> [return: bb116, unwind: bb128];
    }

    bb116: {
        StorageDead(_261);
        drop(_269) -> [return: bb117, unwind: bb132];
    }

    bb117: {
        StorageDead(_272);
        StorageDead(_271);
        StorageDead(_269);
        StorageDead(_268);
        StorageDead(_266);
        StorageDead(_264);
        StorageDead(_263);
        StorageDead(_260);
        _259 = const ();
        StorageDead(_259);
        StorageLive(_285);
        _285 = _172;
        _0 = std::result::Result::<u64, error::ErrorCode>::Ok(move _285);
        StorageDead(_285);
        StorageDead(_225);
        StorageDead(_172);
        StorageDead(_161);
        StorageDead(_150);
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_69);
        StorageDead(_6);
        goto -> bb127;
    }

    bb118: {
        StorageDead(_240);
        StorageDead(_236);
        StorageDead(_235);
        goto -> bb119;
    }

    bb119: {
        StorageDead(_225);
        goto -> bb121;
    }

    bb120: {
        StorageDead(_186);
        StorageDead(_191);
        StorageDead(_187);
        goto -> bb121;
    }

    bb121: {
        StorageDead(_172);
        goto -> bb122;
    }

    bb122: {
        StorageDead(_161);
        goto -> bb123;
    }

    bb123: {
        StorageDead(_150);
        goto -> bb124;
    }

    bb124: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        goto -> bb125;
    }

    bb125: {
        StorageDead(_69);
        goto -> bb126;
    }

    bb126: {
        StorageDead(_6);
        goto -> bb127;
    }

    bb127: {
        return;
    }

    bb128 (cleanup): {
        drop(_269) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb129 (cleanup): {
        drop(_130) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb130 (cleanup): {
        drop(_94) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb131 (cleanup): {
        drop(_29) -> [return: bb132, unwind terminate(cleanup)];
    }

    bb132 (cleanup): {
        resume;
    }
}
