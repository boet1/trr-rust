// MIR for `admin::handle_initialize_prelaunch_oracle` before PreCodegen

fn admin::handle_initialize_prelaunch_oracle(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializePrelaunchOracle<'_>>, _2: state::oracle::PrelaunchOracleParams) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug params => _2;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _3: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let mut _4: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::oracle::PrelaunchOracle>>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::oracle::PrelaunchOracle>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>;
    let mut _7: isize;
    let _8: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _9: !;
    let mut _10: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _11: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let _12: ();
    let mut _13: &str;
    let _14: &str;
    let mut _15: &std::string::String;
    let _16: &std::string::String;
    let _17: std::string::String;
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 1];
    let _22: &[&str; 1];
    let _23: [&str; 1];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let mut _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let mut _29: &u16;
    let _30: &u16;
    let mut _31: u16;
    let mut _32: &mut state::oracle::PrelaunchOracle;
    let mut _33: &mut std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let _34: ();
    let mut _35: isize;
    let mut _37: i64;
    let mut _38: &mut state::oracle::PrelaunchOracle;
    let mut _39: &mut std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let _40: ();
    let mut _41: isize;
    let mut _43: i64;
    let mut _44: &mut state::oracle::PrelaunchOracle;
    let mut _45: &mut std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let _46: ();
    let mut _47: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _48: std::result::Result<(), error::ErrorCode>;
    let mut _49: &state::oracle::PrelaunchOracle;
    let _50: &state::oracle::PrelaunchOracle;
    let mut _51: &std::cell::RefMut<'_, state::oracle::PrelaunchOracle>;
    let mut _52: isize;
    let mut _54: !;
    let mut _55: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _57: ();
    let mut _59: &mut instructions::admin::InitializePrelaunchOracle<'_>;
    let mut _60: isize;
    let mut _61: isize;
    let mut _62: isize;
    let mut _63: isize;
    let mut _64: isize;
    scope 1 {
        debug oracle => _3;
        let _18: std::string::String;
        let _53: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _56: ();
        let mut _58: &[&str; 1];
        scope 6 {
            debug res => _18;
        }
        scope 7 {
            debug price => _36;
            let _36: i64;
        }
        scope 8 {
            debug max_price => _42;
            let _42: i64;
        }
        scope 9 {
            debug residual => _53;
            scope 10 {
            }
        }
        scope 11 {
            debug val => _56;
            scope 12 {
            }
        }
    }
    scope 2 {
        debug residual => _8;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _11;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        _59 = deref_copy (_1.1: &mut instructions::admin::InitializePrelaunchOracle<'_>);
        _6 = &((*_59).1: anchor_lang::prelude::AccountLoader<'_, state::oracle::PrelaunchOracle>);
        _5 = anchor_lang::prelude::AccountLoader::<'_, PrelaunchOracle>::load_init(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        _4 = <std::result::Result<RefMut<'_, PrelaunchOracle>, anchor_lang::error::Error> as Try>::branch(move _5) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        StorageDead(_5);
        _7 = discriminant(_4);
        switchInt(move _7) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_11);
        _11 = move ((_4 as Continue).0: std::cell::RefMut<'_, state::oracle::PrelaunchOracle>);
        _3 = move _11;
        StorageDead(_11);
        _60 = discriminant(_4);
        StorageDead(_4);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _58 = const _;
        _22 = &(*_58);
        _21 = &(*_22);
        _20 = move _21 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_21);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _30 = &(_2.0: u16);
        _29 = &(*_30);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _29) -> [return: bb7, unwind: bb32];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_8);
        _8 = move ((_4 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_10);
        _10 = move _8;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _10) -> [return: bb6, unwind: bb34];
    }

    bb6: {
        StorageDead(_10);
        StorageDead(_8);
        _62 = discriminant(_4);
        StorageDead(_4);
        goto -> bb29;
    }

    bb7: {
        StorageDead(_29);
        _27 = [move _28];
        StorageDead(_28);
        _26 = &_27;
        _25 = &(*_26);
        _24 = move _25 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_25);
        _19 = Arguments::<'_>::new_v1(move _20, move _24) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        StorageDead(_24);
        StorageDead(_20);
        _18 = format(move _19) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        StorageDead(_19);
        StorageDead(_30);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_22);
        _17 = move _18;
        StorageDead(_18);
        _16 = &_17;
        _15 = &(*_16);
        _14 = <String as Deref>::deref(move _15) -> [return: bb10, unwind: bb31];
    }

    bb10: {
        _13 = &(*_14);
        StorageDead(_15);
        _12 = solana_program::log::sol_log(move _13) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        StorageDead(_13);
        drop(_17) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_14);
        StorageDead(_12);
        StorageLive(_31);
        _31 = (_2.0: u16);
        StorageLive(_32);
        StorageLive(_33);
        _33 = &mut _3;
        _32 = <RefMut<'_, PrelaunchOracle> as DerefMut>::deref_mut(move _33) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        StorageDead(_33);
        ((*_32).5: u16) = move _31;
        StorageDead(_31);
        StorageDead(_32);
        StorageLive(_34);
        _35 = discriminant((_2.1: std::option::Option<i64>));
        switchInt(move _35) -> [1: bb14, otherwise: bb16];
    }

    bb14: {
        StorageLive(_36);
        _36 = (((_2.1: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_37);
        _37 = _36;
        StorageLive(_38);
        StorageLive(_39);
        _39 = &mut _3;
        _38 = <RefMut<'_, PrelaunchOracle> as DerefMut>::deref_mut(move _39) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        StorageDead(_39);
        ((*_38).0: i64) = move _37;
        StorageDead(_37);
        StorageDead(_38);
        _34 = const ();
        StorageDead(_36);
        goto -> bb17;
    }

    bb16: {
        _34 = const ();
        goto -> bb17;
    }

    bb17: {
        StorageDead(_34);
        StorageLive(_40);
        _41 = discriminant((_2.2: std::option::Option<i64>));
        switchInt(move _41) -> [1: bb18, otherwise: bb20];
    }

    bb18: {
        StorageLive(_42);
        _42 = (((_2.2: std::option::Option<i64>) as Some).0: i64);
        StorageLive(_43);
        _43 = _42;
        StorageLive(_44);
        StorageLive(_45);
        _45 = &mut _3;
        _44 = <RefMut<'_, PrelaunchOracle> as DerefMut>::deref_mut(move _45) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        StorageDead(_45);
        ((*_44).1: i64) = move _43;
        StorageDead(_43);
        StorageDead(_44);
        _40 = const ();
        StorageDead(_42);
        goto -> bb21;
    }

    bb20: {
        _40 = const ();
        goto -> bb21;
    }

    bb21: {
        StorageDead(_40);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = &_3;
        _50 = <RefMut<'_, PrelaunchOracle> as Deref>::deref(move _51) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _49 = &(*_50);
        StorageDead(_51);
        _48 = PrelaunchOracle::validate(move _49) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        StorageDead(_49);
        _47 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _48) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        StorageDead(_48);
        _52 = discriminant(_47);
        switchInt(move _52) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_56);
        _56 = ((_47 as Continue).0: ());
        _46 = _56;
        StorageDead(_56);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        StorageLive(_57);
        _57 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _57);
        StorageDead(_57);
        drop(_3) -> [return: bb28, unwind: bb33];
    }

    bb26: {
        StorageLive(_53);
        _53 = ((_47 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_55);
        _55 = _53;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _55) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        drop(_3) -> [return: bb29, unwind: bb33];
    }

    bb28: {
        StorageDead(_3);
        goto -> bb30;
    }

    bb29: {
        StorageDead(_3);
        goto -> bb30;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_17) -> [return: bb32, unwind terminate(cleanup)];
    }

    bb32 (cleanup): {
        drop(_3) -> [return: bb33, unwind terminate(cleanup)];
    }

    bb33 (cleanup): {
        resume;
    }

    bb34 (cleanup): {
        _64 = discriminant(_4);
        goto -> bb33;
    }
}
