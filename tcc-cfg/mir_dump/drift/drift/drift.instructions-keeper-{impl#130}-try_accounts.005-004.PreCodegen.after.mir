// MIR for `keeper::<impl at programs/drift/src/instructions/keeper.rs:3358:10: 3358:18>::try_accounts` after PreCodegen

fn keeper::<impl at programs/drift/src/instructions/keeper.rs:3358:10: 3358:18>::try_accounts(_1: &anchor_lang::prelude::Pubkey, _2: &mut &[anchor_lang::prelude::AccountInfo<'_>], _3: &[u8], _4: &mut LiquidateSpotWithSwapBumps, _5: &mut BTreeSet<anchor_lang::prelude::Pubkey>) -> std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> {
    debug __program_id => _1;
    debug __accounts => _2;
    debug __ix_data => _3;
    debug __bumps => _4;
    debug __reallocs => _5;
    let mut _0: std::result::Result<instructions::keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>;
    let mut _6: &[u8];
    let mut _9: <instructions::keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, instructions::keeper::LiquidateSpotWithSwapBumps>>::try_accounts::__Args;
    let mut _10: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>, <instructions::keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, instructions::keeper::LiquidateSpotWithSwapBumps>>::try_accounts::__Args>;
    let mut _11: std::result::Result<<instructions::keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, instructions::keeper::LiquidateSpotWithSwapBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode>;
    let mut _12: std::result::Result<<instructions::keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, instructions::keeper::LiquidateSpotWithSwapBumps>>::try_accounts::__Args, std::io::Error>;
    let mut _13: &mut &[u8];
    let mut _14: &mut &[u8];
    let mut _15: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _16: isize;
    let mut _18: !;
    let mut _19: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>>;
    let mut _23: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _24: std::result::Result<std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>;
    let mut _25: &anchor_lang::prelude::Pubkey;
    let mut _26: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _27: &[u8];
    let mut _28: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _29: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _30: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _31: isize;
    let mut _33: !;
    let mut _34: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _37: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Signer<'_>>;
    let mut _38: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _39: std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>;
    let mut _40: &anchor_lang::prelude::Pubkey;
    let mut _41: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _42: &[u8];
    let mut _43: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _44: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _45: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _53: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _54: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::Pubkey;
    let mut _56: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _57: &[u8];
    let mut _58: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _59: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _60: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _61: isize;
    let mut _63: !;
    let mut _64: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _67: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _68: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _69: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _70: &anchor_lang::prelude::Pubkey;
    let mut _71: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _72: &[u8];
    let mut _73: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _74: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _75: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _76: isize;
    let mut _78: !;
    let mut _79: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _82: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::User>>;
    let mut _83: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _84: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _85: &anchor_lang::prelude::Pubkey;
    let mut _86: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _87: &[u8];
    let mut _88: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _89: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _90: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _91: isize;
    let mut _93: !;
    let mut _94: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _97: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>>;
    let mut _98: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _99: std::result::Result<anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _100: &anchor_lang::prelude::Pubkey;
    let mut _101: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _102: &[u8];
    let mut _103: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _104: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _105: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _112: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _113: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _114: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _115: &anchor_lang::prelude::Pubkey;
    let mut _116: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _117: &[u8];
    let mut _118: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _119: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _120: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _127: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _128: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _129: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let mut _131: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _132: &[u8];
    let mut _133: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _134: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _135: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _136: isize;
    let mut _138: !;
    let mut _139: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _142: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _143: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _144: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _145: &anchor_lang::prelude::Pubkey;
    let mut _146: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _147: &[u8];
    let mut _148: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _149: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _150: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _157: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>;
    let mut _158: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _159: std::result::Result<std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>;
    let mut _160: &anchor_lang::prelude::Pubkey;
    let mut _161: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _162: &[u8];
    let mut _163: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _164: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _165: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _166: isize;
    let mut _168: !;
    let mut _169: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _172: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>>;
    let mut _173: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _174: std::result::Result<anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>, anchor_lang::error::Error>;
    let mut _175: &anchor_lang::prelude::Pubkey;
    let mut _176: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _177: &[u8];
    let mut _178: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _179: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _180: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _181: isize;
    let mut _183: !;
    let mut _184: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _187: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _188: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _189: std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>;
    let mut _190: &anchor_lang::prelude::Pubkey;
    let mut _191: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _192: &[u8];
    let mut _193: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _194: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _195: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _202: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, anchor_lang::prelude::UncheckedAccount<'_>>;
    let mut _203: std::result::Result<anchor_lang::prelude::UncheckedAccount<'_>, anchor_lang::error::Error>;
    let mut _204: std::result::Result<anchor_lang::prelude::UncheckedAccount<'_>, anchor_lang::error::Error>;
    let mut _205: &anchor_lang::prelude::Pubkey;
    let mut _206: &mut &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _207: &[u8];
    let mut _208: &mut instructions::keeper::LiquidateSpotWithSwapBumps;
    let mut _209: &mut std::collections::BTreeSet<anchor_lang::prelude::Pubkey>;
    let mut _210: {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
    let mut _211: isize;
    let mut _213: !;
    let mut _214: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _216: ();
    let mut _217: bool;
    let mut _218: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _219: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _220: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _221: !;
    let mut _222: anchor_lang::error::Error;
    let mut _223: anchor_lang::error::Error;
    let mut _224: anchor_lang::error::ErrorCode;
    let _225: ();
    let mut _226: bool;
    let mut _227: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _228: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _229: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _230: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _231: &anchor_lang::prelude::Signer<'_>;
    let _232: &anchor_lang::prelude::Signer<'_>;
    let mut _233: isize;
    let mut _235: !;
    let mut _236: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _238: !;
    let mut _239: anchor_lang::error::Error;
    let mut _240: anchor_lang::error::Error;
    let mut _241: anchor_lang::error::ErrorCode;
    let _242: ();
    let mut _243: bool;
    let mut _244: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _245: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _246: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _247: !;
    let mut _248: anchor_lang::error::Error;
    let mut _249: anchor_lang::error::Error;
    let mut _250: anchor_lang::error::ErrorCode;
    let _251: ();
    let mut _252: bool;
    let mut _253: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _254: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _255: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _256: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _257: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _258: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _259: isize;
    let mut _261: !;
    let mut _262: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _264: !;
    let mut _265: anchor_lang::error::Error;
    let mut _266: anchor_lang::error::Error;
    let mut _267: anchor_lang::error::ErrorCode;
    let _268: ();
    let mut _269: bool;
    let mut _270: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _271: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _272: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _273: !;
    let mut _274: anchor_lang::error::Error;
    let mut _275: anchor_lang::error::Error;
    let mut _276: anchor_lang::error::ErrorCode;
    let _277: ();
    let mut _278: bool;
    let mut _279: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _280: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _281: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _282: !;
    let mut _283: anchor_lang::error::Error;
    let mut _284: anchor_lang::error::Error;
    let mut _285: anchor_lang::error::ErrorCode;
    let _286: ();
    let mut _287: bool;
    let mut _288: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, bool>;
    let mut _289: std::result::Result<bool, anchor_lang::error::Error>;
    let mut _290: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _291: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _292: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _293: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _294: isize;
    let mut _296: !;
    let mut _297: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _299: !;
    let mut _300: anchor_lang::error::Error;
    let mut _301: anchor_lang::error::Error;
    let mut _302: anchor_lang::error::ErrorCode;
    let mut _305: (anchor_lang::prelude::Pubkey, u8);
    let mut _306: &[&[u8]];
    let mut _307: &[&[u8]; 2];
    let _308: &[&[u8]; 2];
    let _309: [&[u8]; 2];
    let mut _310: &[u8];
    let _311: &[u8];
    let mut _312: &[u8; 17];
    let _313: &[u8; 17];
    let mut _314: &[u8];
    let _315: &[u8];
    let mut _316: &[u8; 2];
    let _317: [u8; 2];
    let mut _318: u16;
    let mut _319: &anchor_lang::prelude::Pubkey;
    let _320: &&anchor_lang::prelude::Pubkey;
    let mut _321: u8;
    let _322: ();
    let mut _323: bool;
    let mut _324: &anchor_lang::prelude::Pubkey;
    let _325: anchor_lang::prelude::Pubkey;
    let mut _326: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _327: &anchor_lang::prelude::Pubkey;
    let mut _328: !;
    let mut _329: anchor_lang::error::Error;
    let mut _330: anchor_lang::error::Error;
    let mut _331: anchor_lang::error::Error;
    let mut _332: anchor_lang::error::ErrorCode;
    let mut _333: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _334: anchor_lang::prelude::Pubkey;
    let mut _335: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _336: anchor_lang::prelude::Pubkey;
    let _337: ();
    let mut _338: bool;
    let mut _339: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _340: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _341: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _342: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _343: !;
    let mut _344: anchor_lang::error::Error;
    let mut _345: anchor_lang::error::Error;
    let mut _346: anchor_lang::error::ErrorCode;
    let mut _349: (anchor_lang::prelude::Pubkey, u8);
    let mut _350: &[&[u8]];
    let mut _351: &[&[u8]; 2];
    let _352: &[&[u8]; 2];
    let _353: [&[u8]; 2];
    let mut _354: &[u8];
    let _355: &[u8];
    let mut _356: &[u8; 17];
    let _357: &[u8; 17];
    let mut _358: &[u8];
    let _359: &[u8];
    let mut _360: &[u8; 2];
    let _361: [u8; 2];
    let mut _362: u16;
    let mut _363: &anchor_lang::prelude::Pubkey;
    let _364: &&anchor_lang::prelude::Pubkey;
    let mut _365: u8;
    let _366: ();
    let mut _367: bool;
    let mut _368: &anchor_lang::prelude::Pubkey;
    let _369: anchor_lang::prelude::Pubkey;
    let mut _370: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _371: &anchor_lang::prelude::Pubkey;
    let mut _372: !;
    let mut _373: anchor_lang::error::Error;
    let mut _374: anchor_lang::error::Error;
    let mut _375: anchor_lang::error::Error;
    let mut _376: anchor_lang::error::ErrorCode;
    let mut _377: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _378: anchor_lang::prelude::Pubkey;
    let mut _379: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _380: anchor_lang::prelude::Pubkey;
    let _381: ();
    let mut _382: bool;
    let mut _383: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _384: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _385: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _386: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _387: !;
    let mut _388: anchor_lang::error::Error;
    let mut _389: anchor_lang::error::Error;
    let mut _390: anchor_lang::error::ErrorCode;
    let _391: ();
    let mut _392: bool;
    let mut _393: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _394: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _395: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _396: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _397: !;
    let mut _398: anchor_lang::error::Error;
    let mut _399: anchor_lang::error::Error;
    let mut _400: anchor_lang::error::ErrorCode;
    let _401: ();
    let mut _402: bool;
    let mut _403: &bool;
    let _404: bool;
    let mut _405: &anchor_lang::prelude::Pubkey;
    let _406: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _407: &anchor_spl::token_interface::TokenAccount;
    let _408: &anchor_spl::token_interface::TokenAccount;
    let mut _409: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _410: &anchor_lang::prelude::Pubkey;
    let _411: &anchor_lang::prelude::Pubkey;
    let _412: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _413: &anchor_spl::token_interface::TokenAccount;
    let _414: &anchor_spl::token_interface::TokenAccount;
    let mut _415: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _416: !;
    let mut _417: anchor_lang::error::Error;
    let mut _418: anchor_lang::error::Error;
    let mut _419: anchor_lang::error::ErrorCode;
    let _420: ();
    let mut _421: bool;
    let mut _422: &anchor_lang::prelude::Pubkey;
    let _423: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _424: &anchor_spl::token_interface::TokenAccount;
    let _425: &anchor_spl::token_interface::TokenAccount;
    let mut _426: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _427: &anchor_lang::prelude::Pubkey;
    let _428: anchor_lang::prelude::Pubkey;
    let mut _429: &anchor_lang::prelude::Signer<'_>;
    let mut _430: !;
    let mut _431: anchor_lang::error::Error;
    let mut _432: anchor_lang::error::ErrorCode;
    let _433: ();
    let mut _434: bool;
    let mut _435: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _436: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let _437: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _438: &std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _439: !;
    let mut _440: anchor_lang::error::Error;
    let mut _441: anchor_lang::error::Error;
    let mut _442: anchor_lang::error::ErrorCode;
    let _443: ();
    let mut _444: bool;
    let mut _445: &bool;
    let _446: bool;
    let mut _447: &anchor_lang::prelude::Pubkey;
    let _448: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _449: &anchor_spl::token_interface::TokenAccount;
    let _450: &anchor_spl::token_interface::TokenAccount;
    let mut _451: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _452: &anchor_lang::prelude::Pubkey;
    let _453: &anchor_lang::prelude::Pubkey;
    let _454: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _455: &anchor_spl::token_interface::TokenAccount;
    let _456: &anchor_spl::token_interface::TokenAccount;
    let mut _457: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _458: !;
    let mut _459: anchor_lang::error::Error;
    let mut _460: anchor_lang::error::Error;
    let mut _461: anchor_lang::error::ErrorCode;
    let _462: ();
    let mut _463: bool;
    let mut _464: &anchor_lang::prelude::Pubkey;
    let _465: &anchor_spl::token_2022::spl_token_2022::state::Account;
    let mut _466: &anchor_spl::token_interface::TokenAccount;
    let _467: &anchor_spl::token_interface::TokenAccount;
    let mut _468: &anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _469: &anchor_lang::prelude::Pubkey;
    let _470: anchor_lang::prelude::Pubkey;
    let mut _471: &anchor_lang::prelude::Signer<'_>;
    let mut _472: !;
    let mut _473: anchor_lang::error::Error;
    let mut _474: anchor_lang::error::ErrorCode;
    let _475: ();
    let mut _476: bool;
    let mut _477: &anchor_lang::prelude::Pubkey;
    let _478: &state::state::State;
    let mut _479: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _480: &anchor_lang::prelude::Pubkey;
    let _481: &anchor_lang::prelude::Pubkey;
    let _482: anchor_lang::prelude::Pubkey;
    let mut _483: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _484: !;
    let mut _485: anchor_lang::error::Error;
    let mut _486: anchor_lang::error::Error;
    let mut _487: anchor_lang::error::ErrorCode;
    let _488: ();
    let mut _490: &anchor_lang::prelude::UncheckedAccount<'_>;
    let mut _492: bool;
    let mut _493: &anchor_lang::prelude::Pubkey;
    let mut _494: &anchor_lang::prelude::Pubkey;
    let mut _495: !;
    let mut _496: anchor_lang::error::Error;
    let mut _497: anchor_lang::error::Error;
    let mut _498: anchor_lang::error::Error;
    let mut _499: anchor_lang::error::ErrorCode;
    let mut _500: (anchor_lang::prelude::Pubkey, anchor_lang::prelude::Pubkey);
    let mut _501: anchor_lang::prelude::Pubkey;
    let mut _502: anchor_lang::prelude::Pubkey;
    let mut _503: instructions::keeper::LiquidateSpotWithSwap<'_>;
    let mut _504: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _505: anchor_lang::prelude::Signer<'_>;
    let mut _506: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _507: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _508: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _509: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _510: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _511: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _512: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _513: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
    let mut _514: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
    let mut _515: anchor_lang::prelude::AccountInfo<'_>;
    let mut _516: anchor_lang::prelude::UncheckedAccount<'_>;
    let mut _517: &anchor_lang::prelude::Pubkey;
    let mut _518: &anchor_lang::prelude::Pubkey;
    let mut _519: bool;
    let mut _520: bool;
    let mut _521: isize;
    let mut _522: isize;
    let mut _523: isize;
    let mut _524: isize;
    let mut _525: isize;
    let mut _526: isize;
    let mut _527: isize;
    let mut _528: isize;
    let mut _529: isize;
    let mut _530: isize;
    let mut _531: isize;
    let mut _532: isize;
    let mut _533: isize;
    let mut _534: isize;
    let mut _535: isize;
    let mut _536: isize;
    let mut _537: isize;
    let mut _538: isize;
    let mut _539: isize;
    let mut _540: isize;
    let mut _541: isize;
    let mut _542: isize;
    let mut _543: isize;
    let mut _544: isize;
    let mut _545: isize;
    let mut _546: isize;
    let mut _547: isize;
    let mut _548: isize;
    let mut _549: isize;
    let mut _550: isize;
    let mut _551: isize;
    let mut _552: isize;
    let mut _553: isize;
    let mut _554: isize;
    let mut _555: isize;
    let mut _556: isize;
    let mut _557: isize;
    let mut _558: isize;
    let mut _559: isize;
    let mut _560: isize;
    let mut _561: isize;
    let mut _562: isize;
    let mut _563: isize;
    let mut _564: isize;
    let mut _565: isize;
    let mut _566: isize;
    let mut _567: isize;
    let mut _568: isize;
    let mut _569: isize;
    let mut _570: isize;
    let mut _571: isize;
    let mut _572: isize;
    let mut _573: isize;
    let mut _574: isize;
    let mut _575: isize;
    let mut _576: isize;
    let mut _577: isize;
    let mut _578: isize;
    let mut _579: isize;
    let mut _580: isize;
    let mut _581: isize;
    let mut _582: isize;
    let mut _583: isize;
    let mut _584: isize;
    let mut _585: isize;
    let mut _586: isize;
    let mut _587: isize;
    let mut _588: isize;
    let mut _589: isize;
    let mut _590: isize;
    let mut _591: isize;
    let mut _592: isize;
    let mut _593: isize;
    let mut _594: isize;
    let mut _595: isize;
    let mut _596: isize;
    let mut _597: isize;
    let mut _598: isize;
    let mut _599: isize;
    let mut _600: isize;
    let mut _601: isize;
    let mut _602: isize;
    let mut _603: isize;
    let mut _604: isize;
    let mut _605: isize;
    let mut _606: isize;
    let mut _607: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _608: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _609: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _610: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _611: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _612: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _613: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _614: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _615: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _616: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>;
    let mut _617: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug __ix_data => _6;
        let _7: u16;
        let _8: u16;
        let _17: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>;
        let _20: <instructions::keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, instructions::keeper::LiquidateSpotWithSwapBumps>>::try_accounts::__Args;
        scope 2 {
            debug asset_market_index => _7;
            debug liability_market_index => _8;
            let _21: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            let _32: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
            let _35: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 7 {
                debug state => _21;
                let _36: anchor_lang::prelude::Signer<'_>;
                let _47: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                let _50: anchor_lang::prelude::Signer<'_>;
                scope 12 {
                    debug authority => _36;
                    let _51: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                    let _62: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                    let _65: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                    scope 17 {
                        debug liquidator => _51;
                        let _66: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                        let _77: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                        let _80: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                        scope 22 {
                            debug liquidator_stats => _66;
                            let _81: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                            let _92: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                            let _95: anchor_lang::prelude::AccountLoader<'_, state::user::User>;
                            scope 27 {
                                debug user => _81;
                                let _96: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                let _107: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                let _110: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
                                scope 32 {
                                    debug user_stats => _96;
                                    let _111: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    let _122: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                    let _125: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                    scope 37 {
                                        debug liability_spot_market_vault => _111;
                                        let _126: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        let _137: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                        let _140: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                        scope 42 {
                                            debug asset_spot_market_vault => _126;
                                            let _141: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                            let _152: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                            let _155: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                            scope 47 {
                                                debug liability_token_account => _141;
                                                let _156: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                let _167: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                let _170: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>;
                                                scope 52 {
                                                    debug asset_token_account => _156;
                                                    let _171: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                    let _182: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                    let _185: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>;
                                                    scope 57 {
                                                        debug token_program => _171;
                                                        let _186: anchor_lang::prelude::AccountInfo<'_>;
                                                        let _197: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                        let _200: anchor_lang::prelude::AccountInfo<'_>;
                                                        scope 62 {
                                                            debug drift_signer => _186;
                                                            let _201: anchor_lang::prelude::UncheckedAccount<'_>;
                                                            let _212: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                            let _215: anchor_lang::prelude::UncheckedAccount<'_>;
                                                            scope 67 {
                                                                debug instructions => _201;
                                                                let _234: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _237: bool;
                                                                let _260: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _263: bool;
                                                                let _295: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
                                                                let _298: bool;
                                                                let _303: anchor_lang::prelude::Pubkey;
                                                                let _304: u8;
                                                                scope 72 {
                                                                    debug residual => _234;
                                                                    scope 73 {
                                                                    }
                                                                }
                                                                scope 74 {
                                                                    debug val => _237;
                                                                    scope 75 {
                                                                    }
                                                                }
                                                                scope 76 {
                                                                    debug residual => _260;
                                                                    scope 77 {
                                                                    }
                                                                }
                                                                scope 78 {
                                                                    debug val => _263;
                                                                    scope 79 {
                                                                    }
                                                                }
                                                                scope 80 {
                                                                    debug residual => _295;
                                                                    scope 81 {
                                                                    }
                                                                }
                                                                scope 82 {
                                                                    debug val => _298;
                                                                    scope 83 {
                                                                    }
                                                                }
                                                                scope 84 {
                                                                    debug __pda_address => _303;
                                                                    debug __bump => _304;
                                                                    let _347: anchor_lang::prelude::Pubkey;
                                                                    let _348: u8;
                                                                    scope 85 {
                                                                        debug __pda_address => _347;
                                                                        debug __bump => _348;
                                                                        let _489: anchor_lang::prelude::Pubkey;
                                                                        scope 86 {
                                                                            debug actual => _489;
                                                                            let _491: anchor_lang::prelude::Pubkey;
                                                                            scope 87 {
                                                                                debug expected => _491;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            scope 68 {
                                                                debug residual => _212;
                                                                scope 69 {
                                                                }
                                                            }
                                                            scope 70 {
                                                                debug val => _215;
                                                                scope 71 {
                                                                }
                                                            }
                                                        }
                                                        scope 63 {
                                                            debug residual => _197;
                                                            scope 64 {
                                                            }
                                                        }
                                                        scope 65 {
                                                            debug val => _200;
                                                            scope 66 {
                                                            }
                                                        }
                                                    }
                                                    scope 58 {
                                                        debug residual => _182;
                                                        scope 59 {
                                                        }
                                                    }
                                                    scope 60 {
                                                        debug val => _185;
                                                        scope 61 {
                                                        }
                                                    }
                                                }
                                                scope 53 {
                                                    debug residual => _167;
                                                    scope 54 {
                                                    }
                                                }
                                                scope 55 {
                                                    debug val => _170;
                                                    scope 56 {
                                                    }
                                                }
                                            }
                                            scope 48 {
                                                debug residual => _152;
                                                scope 49 {
                                                }
                                            }
                                            scope 50 {
                                                debug val => _155;
                                                scope 51 {
                                                }
                                            }
                                        }
                                        scope 43 {
                                            debug residual => _137;
                                            scope 44 {
                                            }
                                        }
                                        scope 45 {
                                            debug val => _140;
                                            scope 46 {
                                            }
                                        }
                                    }
                                    scope 38 {
                                        debug residual => _122;
                                        scope 39 {
                                        }
                                    }
                                    scope 40 {
                                        debug val => _125;
                                        scope 41 {
                                        }
                                    }
                                }
                                scope 33 {
                                    debug residual => _107;
                                    scope 34 {
                                    }
                                }
                                scope 35 {
                                    debug val => _110;
                                    scope 36 {
                                    }
                                }
                            }
                            scope 28 {
                                debug residual => _92;
                                scope 29 {
                                }
                            }
                            scope 30 {
                                debug val => _95;
                                scope 31 {
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _77;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _80;
                            scope 26 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _62;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _65;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _47;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _50;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _32;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _35;
                scope 11 {
                }
            }
        }
        scope 3 {
            debug residual => _17;
            scope 4 {
            }
        }
        scope 5 {
            debug val => _20;
            scope 6 {
            }
        }
    }

    bb0: {
        _520 = const false;
        _519 = const false;
        StorageLive(_6);
        _6 = _3;
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = &mut _6;
        _13 = &mut (*_14);
        _12 = <<keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, LiquidateSpotWithSwapBumps>>::try_accounts::__Args as BorshDeserialize>::deserialize(move _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_13);
        StorageLive(_15);
        _15 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _11 = std::result::Result::<<keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, LiquidateSpotWithSwapBumps>>::try_accounts::__Args, std::io::Error>::map_err::<anchor_lang::error::ErrorCode, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _12, move _15) -> [return: bb2, unwind: bb249];
    }

    bb2: {
        StorageDead(_15);
        StorageDead(_12);
        _10 = <std::result::Result<<keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, LiquidateSpotWithSwapBumps>>::try_accounts::__Args, anchor_lang::error::ErrorCode> as Try>::branch(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_11);
        _16 = discriminant(_10);
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_20);
        _20 = move ((_10 as Continue).0: <instructions::keeper::LiquidateSpotWithSwap<'info> as anchor_lang::Accounts<'info, instructions::keeper::LiquidateSpotWithSwapBumps>>::try_accounts::__Args);
        _9 = move _20;
        StorageDead(_20);
        StorageLive(_7);
        _7 = (_9.0: u16);
        StorageLive(_8);
        _8 = (_9.1: u16);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &(*_1);
        StorageLive(_26);
        _26 = &mut (*_2);
        StorageLive(_27);
        _27 = &(*_6);
        StorageLive(_28);
        _28 = &mut (*_4);
        StorageLive(_29);
        _29 = &mut (*_5);
        _24 = <Box<anchor_lang::prelude::Account<'_, state::state::State>> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _25, move _26, move _27, move _28, move _29) -> [return: bb8, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_17);
        _17 = ((_10 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::ErrorCode>);
        StorageLive(_19);
        _19 = _17;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::ErrorCode>>>::from_residual(move _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_17);
        StorageDead(_14);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb241;
    }

    bb8: {
        StorageDead(_29);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_26);
        StorageDead(_25);
        StorageLive(_30);
        _30 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _23 = std::result::Result::<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _24, move _30) -> [return: bb9, unwind: bb249];
    }

    bb9: {
        StorageDead(_30);
        StorageDead(_24);
        _22 = <std::result::Result<Box<anchor_lang::prelude::Account<'_, state::state::State>>, anchor_lang::error::Error> as Try>::branch(move _23) -> [return: bb10, unwind: bb249];
    }

    bb10: {
        StorageDead(_23);
        _31 = discriminant(_22);
        switchInt(move _31) -> [0: bb11, 1: bb12, otherwise: bb5];
    }

    bb11: {
        StorageLive(_35);
        _35 = move ((_22 as Continue).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _21 = move _35;
        StorageDead(_35);
        _521 = discriminant(_22);
        StorageDead(_22);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &(*_1);
        StorageLive(_41);
        _41 = &mut (*_2);
        StorageLive(_42);
        _42 = &(*_6);
        StorageLive(_43);
        _43 = &mut (*_4);
        StorageLive(_44);
        _44 = &mut (*_5);
        _39 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _40, move _41, move _42, move _43, move _44) -> [return: bb14, unwind: bb248];
    }

    bb12: {
        StorageLive(_32);
        _32 = move ((_22 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_34);
        _34 = move _32;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _34) -> [return: bb13, unwind: bb275];
    }

    bb13: {
        StorageDead(_34);
        StorageDead(_32);
        _589 = discriminant(_22);
        StorageDead(_22);
        goto -> bb240;
    }

    bb14: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_40);
        StorageLive(_45);
        _45 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _38 = std::result::Result::<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _39, move _45) -> [return: bb15, unwind: bb248];
    }

    bb15: {
        StorageDead(_45);
        StorageDead(_39);
        _37 = <std::result::Result<anchor_lang::prelude::Signer<'_>, anchor_lang::error::Error> as Try>::branch(move _38) -> [return: bb16, unwind: bb248];
    }

    bb16: {
        StorageDead(_38);
        _46 = discriminant(_37);
        switchInt(move _46) -> [0: bb17, 1: bb18, otherwise: bb5];
    }

    bb17: {
        StorageLive(_50);
        _50 = move ((_37 as Continue).0: anchor_lang::prelude::Signer<'_>);
        _36 = move _50;
        StorageDead(_50);
        _523 = discriminant(_37);
        StorageDead(_37);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _55 = &(*_1);
        StorageLive(_56);
        _56 = &mut (*_2);
        StorageLive(_57);
        _57 = &(*_6);
        StorageLive(_58);
        _58 = &mut (*_4);
        StorageLive(_59);
        _59 = &mut (*_5);
        _54 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _55, move _56, move _57, move _58, move _59) -> [return: bb20, unwind: bb248];
    }

    bb18: {
        StorageLive(_47);
        _47 = move ((_37 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_49);
        _49 = move _47;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _49) -> [return: bb19, unwind: bb274];
    }

    bb19: {
        StorageDead(_49);
        StorageDead(_47);
        _587 = discriminant(_37);
        StorageDead(_37);
        goto -> bb239;
    }

    bb20: {
        StorageDead(_59);
        StorageDead(_58);
        StorageDead(_57);
        StorageDead(_56);
        StorageDead(_55);
        StorageLive(_60);
        _60 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _53 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _54, move _60) -> [return: bb21, unwind: bb248];
    }

    bb21: {
        StorageDead(_60);
        StorageDead(_54);
        _52 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _53) -> [return: bb22, unwind: bb248];
    }

    bb22: {
        StorageDead(_53);
        _61 = discriminant(_52);
        switchInt(move _61) -> [0: bb23, 1: bb24, otherwise: bb5];
    }

    bb23: {
        StorageLive(_65);
        _65 = move ((_52 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _51 = move _65;
        StorageDead(_65);
        _525 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        StorageLive(_70);
        _70 = &(*_1);
        StorageLive(_71);
        _71 = &mut (*_2);
        StorageLive(_72);
        _72 = &(*_6);
        StorageLive(_73);
        _73 = &mut (*_4);
        StorageLive(_74);
        _74 = &mut (*_5);
        _69 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _70, move _71, move _72, move _73, move _74) -> [return: bb26, unwind: bb248];
    }

    bb24: {
        StorageLive(_62);
        _62 = move ((_52 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_64);
        _64 = move _62;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _64) -> [return: bb25, unwind: bb273];
    }

    bb25: {
        StorageDead(_64);
        StorageDead(_62);
        _585 = discriminant(_52);
        StorageDead(_52);
        goto -> bb238;
    }

    bb26: {
        StorageDead(_74);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_70);
        StorageLive(_75);
        _75 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _68 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _69, move _75) -> [return: bb27, unwind: bb248];
    }

    bb27: {
        StorageDead(_75);
        StorageDead(_69);
        _67 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _68) -> [return: bb28, unwind: bb248];
    }

    bb28: {
        StorageDead(_68);
        _76 = discriminant(_67);
        switchInt(move _76) -> [0: bb29, 1: bb30, otherwise: bb5];
    }

    bb29: {
        StorageLive(_80);
        _80 = move ((_67 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _66 = move _80;
        StorageDead(_80);
        _527 = discriminant(_67);
        StorageDead(_67);
        StorageLive(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        _85 = &(*_1);
        StorageLive(_86);
        _86 = &mut (*_2);
        StorageLive(_87);
        _87 = &(*_6);
        StorageLive(_88);
        _88 = &mut (*_4);
        StorageLive(_89);
        _89 = &mut (*_5);
        _84 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _85, move _86, move _87, move _88, move _89) -> [return: bb32, unwind: bb248];
    }

    bb30: {
        StorageLive(_77);
        _77 = move ((_67 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_79);
        _79 = move _77;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _79) -> [return: bb31, unwind: bb272];
    }

    bb31: {
        StorageDead(_79);
        StorageDead(_77);
        _583 = discriminant(_67);
        StorageDead(_67);
        goto -> bb237;
    }

    bb32: {
        StorageDead(_89);
        StorageDead(_88);
        StorageDead(_87);
        StorageDead(_86);
        StorageDead(_85);
        StorageLive(_90);
        _90 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _83 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _84, move _90) -> [return: bb33, unwind: bb248];
    }

    bb33: {
        StorageDead(_90);
        StorageDead(_84);
        _82 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, User>, anchor_lang::error::Error> as Try>::branch(move _83) -> [return: bb34, unwind: bb248];
    }

    bb34: {
        StorageDead(_83);
        _91 = discriminant(_82);
        switchInt(move _91) -> [0: bb35, 1: bb36, otherwise: bb5];
    }

    bb35: {
        StorageLive(_95);
        _95 = move ((_82 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _81 = move _95;
        StorageDead(_95);
        _529 = discriminant(_82);
        StorageDead(_82);
        StorageLive(_96);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = &(*_1);
        StorageLive(_101);
        _101 = &mut (*_2);
        StorageLive(_102);
        _102 = &(*_6);
        StorageLive(_103);
        _103 = &mut (*_4);
        StorageLive(_104);
        _104 = &mut (*_5);
        _99 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _100, move _101, move _102, move _103, move _104) -> [return: bb38, unwind: bb248];
    }

    bb36: {
        StorageLive(_92);
        _92 = move ((_82 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_94);
        _94 = move _92;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _94) -> [return: bb37, unwind: bb271];
    }

    bb37: {
        StorageDead(_94);
        StorageDead(_92);
        _581 = discriminant(_82);
        StorageDead(_82);
        goto -> bb236;
    }

    bb38: {
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_101);
        StorageDead(_100);
        StorageLive(_105);
        _105 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _98 = std::result::Result::<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _99, move _105) -> [return: bb39, unwind: bb248];
    }

    bb39: {
        StorageDead(_105);
        StorageDead(_99);
        _97 = <std::result::Result<anchor_lang::prelude::AccountLoader<'_, UserStats>, anchor_lang::error::Error> as Try>::branch(move _98) -> [return: bb40, unwind: bb248];
    }

    bb40: {
        StorageDead(_98);
        _106 = discriminant(_97);
        switchInt(move _106) -> [0: bb41, 1: bb42, otherwise: bb5];
    }

    bb41: {
        StorageLive(_110);
        _110 = move ((_97 as Continue).0: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _96 = move _110;
        StorageDead(_110);
        _531 = discriminant(_97);
        StorageDead(_97);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        _115 = &(*_1);
        StorageLive(_116);
        _116 = &mut (*_2);
        StorageLive(_117);
        _117 = &(*_6);
        StorageLive(_118);
        _118 = &mut (*_4);
        StorageLive(_119);
        _119 = &mut (*_5);
        _114 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _115, move _116, move _117, move _118, move _119) -> [return: bb44, unwind: bb248];
    }

    bb42: {
        StorageLive(_107);
        _107 = move ((_97 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_109);
        _109 = move _107;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _109) -> [return: bb43, unwind: bb270];
    }

    bb43: {
        StorageDead(_109);
        StorageDead(_107);
        _579 = discriminant(_97);
        StorageDead(_97);
        goto -> bb235;
    }

    bb44: {
        StorageDead(_119);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_120);
        _120 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _113 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _114, move _120) -> [return: bb45, unwind: bb248];
    }

    bb45: {
        StorageDead(_120);
        StorageDead(_114);
        _112 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _113) -> [return: bb46, unwind: bb248];
    }

    bb46: {
        StorageDead(_113);
        _121 = discriminant(_112);
        switchInt(move _121) -> [0: bb47, 1: bb48, otherwise: bb5];
    }

    bb47: {
        StorageLive(_125);
        _125 = move ((_112 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _111 = move _125;
        StorageDead(_125);
        _533 = discriminant(_112);
        StorageDead(_112);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _130 = &(*_1);
        StorageLive(_131);
        _131 = &mut (*_2);
        StorageLive(_132);
        _132 = &(*_6);
        StorageLive(_133);
        _133 = &mut (*_4);
        StorageLive(_134);
        _134 = &mut (*_5);
        _129 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _130, move _131, move _132, move _133, move _134) -> [return: bb50, unwind: bb247];
    }

    bb48: {
        StorageLive(_122);
        _122 = move ((_112 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_124);
        _124 = move _122;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _124) -> [return: bb49, unwind: bb269];
    }

    bb49: {
        StorageDead(_124);
        StorageDead(_122);
        _577 = discriminant(_112);
        StorageDead(_112);
        goto -> bb234;
    }

    bb50: {
        StorageDead(_134);
        StorageDead(_133);
        StorageDead(_132);
        StorageDead(_131);
        StorageDead(_130);
        StorageLive(_135);
        _135 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _128 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _129, move _135) -> [return: bb51, unwind: bb247];
    }

    bb51: {
        StorageDead(_135);
        StorageDead(_129);
        _127 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _128) -> [return: bb52, unwind: bb247];
    }

    bb52: {
        StorageDead(_128);
        _136 = discriminant(_127);
        switchInt(move _136) -> [0: bb53, 1: bb54, otherwise: bb5];
    }

    bb53: {
        StorageLive(_140);
        _140 = move ((_127 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _126 = move _140;
        StorageDead(_140);
        _535 = discriminant(_127);
        StorageDead(_127);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        _145 = &(*_1);
        StorageLive(_146);
        _146 = &mut (*_2);
        StorageLive(_147);
        _147 = &(*_6);
        StorageLive(_148);
        _148 = &mut (*_4);
        StorageLive(_149);
        _149 = &mut (*_5);
        _144 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _145, move _146, move _147, move _148, move _149) -> [return: bb56, unwind: bb246];
    }

    bb54: {
        StorageLive(_137);
        _137 = move ((_127 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_139);
        _139 = move _137;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _139) -> [return: bb55, unwind: bb268];
    }

    bb55: {
        StorageDead(_139);
        StorageDead(_137);
        _575 = discriminant(_127);
        StorageDead(_127);
        goto -> bb233;
    }

    bb56: {
        StorageDead(_149);
        StorageDead(_148);
        StorageDead(_147);
        StorageDead(_146);
        StorageDead(_145);
        StorageLive(_150);
        _150 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _143 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _144, move _150) -> [return: bb57, unwind: bb246];
    }

    bb57: {
        StorageDead(_150);
        StorageDead(_144);
        _142 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _143) -> [return: bb58, unwind: bb246];
    }

    bb58: {
        StorageDead(_143);
        _151 = discriminant(_142);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb5];
    }

    bb59: {
        StorageLive(_155);
        _155 = move ((_142 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _141 = move _155;
        StorageDead(_155);
        _537 = discriminant(_142);
        StorageDead(_142);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        StorageLive(_159);
        StorageLive(_160);
        _160 = &(*_1);
        StorageLive(_161);
        _161 = &mut (*_2);
        StorageLive(_162);
        _162 = &(*_6);
        StorageLive(_163);
        _163 = &mut (*_4);
        StorageLive(_164);
        _164 = &mut (*_5);
        _159 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _160, move _161, move _162, move _163, move _164) -> [return: bb62, unwind: bb245];
    }

    bb60: {
        StorageLive(_152);
        _152 = move ((_142 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_154);
        _154 = move _152;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _154) -> [return: bb61, unwind: bb267];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        _573 = discriminant(_142);
        StorageDead(_142);
        goto -> bb232;
    }

    bb62: {
        StorageDead(_164);
        StorageDead(_163);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_160);
        StorageLive(_165);
        _165 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _158 = std::result::Result::<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _159, move _165) -> [return: bb63, unwind: bb245];
    }

    bb63: {
        StorageDead(_165);
        StorageDead(_159);
        _157 = <std::result::Result<Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>, anchor_lang::error::Error> as Try>::branch(move _158) -> [return: bb64, unwind: bb245];
    }

    bb64: {
        StorageDead(_158);
        _166 = discriminant(_157);
        switchInt(move _166) -> [0: bb65, 1: bb66, otherwise: bb5];
    }

    bb65: {
        StorageLive(_170);
        _170 = move ((_157 as Continue).0: std::boxed::Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>);
        _156 = move _170;
        StorageDead(_170);
        _539 = discriminant(_157);
        StorageDead(_157);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        _175 = &(*_1);
        StorageLive(_176);
        _176 = &mut (*_2);
        StorageLive(_177);
        _177 = &(*_6);
        StorageLive(_178);
        _178 = &mut (*_4);
        StorageLive(_179);
        _179 = &mut (*_5);
        _174 = <anchor_lang::prelude::Interface<'_, TokenInterface> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _175, move _176, move _177, move _178, move _179) -> [return: bb68, unwind: bb244];
    }

    bb66: {
        StorageLive(_167);
        _167 = move ((_157 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_169);
        _169 = move _167;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _169) -> [return: bb67, unwind: bb266];
    }

    bb67: {
        StorageDead(_169);
        StorageDead(_167);
        _571 = discriminant(_157);
        StorageDead(_157);
        goto -> bb231;
    }

    bb68: {
        StorageDead(_179);
        StorageDead(_178);
        StorageDead(_177);
        StorageDead(_176);
        StorageDead(_175);
        StorageLive(_180);
        _180 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _173 = std::result::Result::<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _174, move _180) -> [return: bb69, unwind: bb244];
    }

    bb69: {
        StorageDead(_180);
        StorageDead(_174);
        _172 = <std::result::Result<anchor_lang::prelude::Interface<'_, TokenInterface>, anchor_lang::error::Error> as Try>::branch(move _173) -> [return: bb70, unwind: bb244];
    }

    bb70: {
        StorageDead(_173);
        _181 = discriminant(_172);
        switchInt(move _181) -> [0: bb71, 1: bb72, otherwise: bb5];
    }

    bb71: {
        StorageLive(_185);
        _185 = move ((_172 as Continue).0: anchor_lang::prelude::Interface<'_, anchor_spl::token_interface::TokenInterface>);
        _171 = move _185;
        StorageDead(_185);
        _541 = discriminant(_172);
        StorageDead(_172);
        StorageLive(_186);
        StorageLive(_187);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &(*_1);
        StorageLive(_191);
        _191 = &mut (*_2);
        StorageLive(_192);
        _192 = &(*_6);
        StorageLive(_193);
        _193 = &mut (*_4);
        StorageLive(_194);
        _194 = &mut (*_5);
        _189 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _190, move _191, move _192, move _193, move _194) -> [return: bb74, unwind: bb244];
    }

    bb72: {
        StorageLive(_182);
        _182 = move ((_172 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_184);
        _184 = move _182;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _184) -> [return: bb73, unwind: bb265];
    }

    bb73: {
        StorageDead(_184);
        StorageDead(_182);
        _569 = discriminant(_172);
        StorageDead(_172);
        goto -> bb230;
    }

    bb74: {
        StorageDead(_194);
        StorageDead(_193);
        StorageDead(_192);
        StorageDead(_191);
        StorageDead(_190);
        StorageLive(_195);
        _195 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _188 = std::result::Result::<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _189, move _195) -> [return: bb75, unwind: bb244];
    }

    bb75: {
        StorageDead(_195);
        StorageDead(_189);
        _187 = <std::result::Result<anchor_lang::prelude::AccountInfo<'_>, anchor_lang::error::Error> as Try>::branch(move _188) -> [return: bb76, unwind: bb244];
    }

    bb76: {
        StorageDead(_188);
        _196 = discriminant(_187);
        switchInt(move _196) -> [0: bb77, 1: bb78, otherwise: bb5];
    }

    bb77: {
        StorageLive(_200);
        _200 = move ((_187 as Continue).0: anchor_lang::prelude::AccountInfo<'_>);
        _186 = move _200;
        StorageDead(_200);
        _543 = discriminant(_187);
        StorageDead(_187);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        _205 = &(*_1);
        StorageLive(_206);
        _206 = &mut (*_2);
        StorageLive(_207);
        _207 = &(*_6);
        StorageLive(_208);
        _208 = &mut (*_4);
        StorageLive(_209);
        _209 = &mut (*_5);
        _204 = <anchor_lang::prelude::UncheckedAccount<'_> as anchor_lang::Accounts<'_, LiquidateSpotWithSwapBumps>>::try_accounts(move _205, move _206, move _207, move _208, move _209) -> [return: bb80, unwind: bb243];
    }

    bb78: {
        StorageLive(_197);
        _197 = move ((_187 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_199);
        _199 = move _197;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _199) -> [return: bb79, unwind: bb264];
    }

    bb79: {
        StorageDead(_199);
        StorageDead(_197);
        _567 = discriminant(_187);
        StorageDead(_187);
        goto -> bb229;
    }

    bb80: {
        StorageDead(_209);
        StorageDead(_208);
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageLive(_210);
        _210 = {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18};
        _203 = std::result::Result::<anchor_lang::prelude::UncheckedAccount<'_>, anchor_lang::error::Error>::map_err::<anchor_lang::error::Error, {closure@programs/drift/src/instructions/keeper.rs:3358:10: 3358:18}>(move _204, move _210) -> [return: bb81, unwind: bb243];
    }

    bb81: {
        StorageDead(_210);
        StorageDead(_204);
        _202 = <std::result::Result<anchor_lang::prelude::UncheckedAccount<'_>, anchor_lang::error::Error> as Try>::branch(move _203) -> [return: bb82, unwind: bb243];
    }

    bb82: {
        StorageDead(_203);
        _211 = discriminant(_202);
        switchInt(move _211) -> [0: bb83, 1: bb84, otherwise: bb5];
    }

    bb83: {
        StorageLive(_215);
        _215 = move ((_202 as Continue).0: anchor_lang::prelude::UncheckedAccount<'_>);
        _201 = move _215;
        StorageDead(_215);
        _545 = discriminant(_202);
        StorageDead(_202);
        StorageLive(_216);
        StorageLive(_217);
        StorageLive(_218);
        StorageLive(_219);
        StorageLive(_220);
        _220 = &_51;
        _219 = &(*_220);
        _218 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _219) -> [return: bb86, unwind: bb243];
    }

    bb84: {
        StorageLive(_212);
        _212 = move ((_202 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_214);
        _214 = move _212;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _214) -> [return: bb85, unwind: bb263];
    }

    bb85: {
        StorageDead(_214);
        StorageDead(_212);
        _565 = discriminant(_202);
        StorageDead(_202);
        goto -> bb228;
    }

    bb86: {
        StorageDead(_219);
        _217 = ((*_218).6: bool);
        switchInt(move _217) -> [0: bb87, otherwise: bb90];
    }

    bb87: {
        StorageDead(_220);
        StorageDead(_218);
        StorageLive(_222);
        StorageLive(_223);
        StorageLive(_224);
        _224 = ConstraintMut;
        _223 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _224) -> [return: bb88, unwind: bb243];
    }

    bb88: {
        StorageDead(_224);
        _222 = anchor_lang::error::Error::with_account_name::<&str>(move _223, const "liquidator") -> [return: bb89, unwind: bb243];
    }

    bb89: {
        StorageDead(_223);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _222);
        StorageDead(_222);
        StorageDead(_217);
        StorageDead(_216);
        goto -> bb228;
    }

    bb90: {
        StorageDead(_220);
        StorageDead(_218);
        _216 = const ();
        StorageDead(_217);
        StorageDead(_216);
        StorageLive(_225);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        StorageLive(_230);
        _230 = &_51;
        _229 = &(*_230);
        StorageLive(_231);
        StorageLive(_232);
        _232 = &_36;
        _231 = &(*_232);
        _228 = constraints::can_sign_for_user(move _229, move _231) -> [return: bb91, unwind: bb243];
    }

    bb91: {
        StorageDead(_231);
        StorageDead(_229);
        _227 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _228) -> [return: bb92, unwind: bb243];
    }

    bb92: {
        StorageDead(_228);
        _233 = discriminant(_227);
        switchInt(move _233) -> [0: bb93, 1: bb94, otherwise: bb5];
    }

    bb93: {
        StorageLive(_237);
        _237 = ((_227 as Continue).0: bool);
        _226 = _237;
        StorageDead(_237);
        switchInt(move _226) -> [0: bb251, otherwise: bb250];
    }

    bb94: {
        StorageLive(_234);
        _234 = move ((_227 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_236);
        _236 = move _234;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _236) -> [return: bb95, unwind: bb262];
    }

    bb95: {
        StorageDead(_236);
        StorageDead(_234);
        _563 = discriminant(_227);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_227);
        goto -> bb227;
    }

    bb96: {
        StorageDead(_241);
        _239 = anchor_lang::error::Error::with_account_name::<&str>(move _240, const "liquidator") -> [return: bb97, unwind: bb243];
    }

    bb97: {
        StorageDead(_240);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _239);
        StorageDead(_239);
        goto -> bb227;
    }

    bb98: {
        StorageDead(_245);
        _243 = ((*_244).6: bool);
        switchInt(move _243) -> [0: bb99, otherwise: bb102];
    }

    bb99: {
        StorageDead(_246);
        StorageDead(_244);
        StorageLive(_248);
        StorageLive(_249);
        StorageLive(_250);
        _250 = ConstraintMut;
        _249 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _250) -> [return: bb100, unwind: bb243];
    }

    bb100: {
        StorageDead(_250);
        _248 = anchor_lang::error::Error::with_account_name::<&str>(move _249, const "liquidator_stats") -> [return: bb101, unwind: bb243];
    }

    bb101: {
        StorageDead(_249);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _248);
        StorageDead(_248);
        StorageDead(_243);
        StorageDead(_242);
        goto -> bb228;
    }

    bb102: {
        StorageDead(_246);
        StorageDead(_244);
        _242 = const ();
        StorageDead(_243);
        StorageDead(_242);
        StorageLive(_251);
        StorageLive(_252);
        StorageLive(_253);
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        _256 = &_51;
        _255 = &(*_256);
        StorageLive(_257);
        StorageLive(_258);
        _258 = &_66;
        _257 = &(*_258);
        _254 = constraints::is_stats_for_user(move _255, move _257) -> [return: bb103, unwind: bb243];
    }

    bb103: {
        StorageDead(_257);
        StorageDead(_255);
        _253 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _254) -> [return: bb104, unwind: bb243];
    }

    bb104: {
        StorageDead(_254);
        _259 = discriminant(_253);
        switchInt(move _259) -> [0: bb105, 1: bb106, otherwise: bb5];
    }

    bb105: {
        StorageLive(_263);
        _263 = ((_253 as Continue).0: bool);
        _252 = _263;
        StorageDead(_263);
        switchInt(move _252) -> [0: bb253, otherwise: bb252];
    }

    bb106: {
        StorageLive(_260);
        _260 = move ((_253 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_262);
        _262 = move _260;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _262) -> [return: bb107, unwind: bb261];
    }

    bb107: {
        StorageDead(_262);
        StorageDead(_260);
        _561 = discriminant(_253);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_253);
        goto -> bb226;
    }

    bb108: {
        StorageDead(_267);
        _265 = anchor_lang::error::Error::with_account_name::<&str>(move _266, const "liquidator_stats") -> [return: bb109, unwind: bb243];
    }

    bb109: {
        StorageDead(_266);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _265);
        StorageDead(_265);
        goto -> bb226;
    }

    bb110: {
        StorageDead(_271);
        _269 = ((*_270).6: bool);
        switchInt(move _269) -> [0: bb111, otherwise: bb114];
    }

    bb111: {
        StorageDead(_272);
        StorageDead(_270);
        StorageLive(_274);
        StorageLive(_275);
        StorageLive(_276);
        _276 = ConstraintMut;
        _275 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _276) -> [return: bb112, unwind: bb243];
    }

    bb112: {
        StorageDead(_276);
        _274 = anchor_lang::error::Error::with_account_name::<&str>(move _275, const "user") -> [return: bb113, unwind: bb243];
    }

    bb113: {
        StorageDead(_275);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _274);
        StorageDead(_274);
        StorageDead(_269);
        StorageDead(_268);
        goto -> bb228;
    }

    bb114: {
        StorageDead(_272);
        StorageDead(_270);
        _268 = const ();
        StorageDead(_269);
        StorageDead(_268);
        StorageLive(_277);
        StorageLive(_278);
        StorageLive(_279);
        StorageLive(_280);
        StorageLive(_281);
        _281 = &_96;
        _280 = &(*_281);
        _279 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _280) -> [return: bb115, unwind: bb243];
    }

    bb115: {
        StorageDead(_280);
        _278 = ((*_279).6: bool);
        switchInt(move _278) -> [0: bb116, otherwise: bb119];
    }

    bb116: {
        StorageDead(_281);
        StorageDead(_279);
        StorageLive(_283);
        StorageLive(_284);
        StorageLive(_285);
        _285 = ConstraintMut;
        _284 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _285) -> [return: bb117, unwind: bb243];
    }

    bb117: {
        StorageDead(_285);
        _283 = anchor_lang::error::Error::with_account_name::<&str>(move _284, const "user_stats") -> [return: bb118, unwind: bb243];
    }

    bb118: {
        StorageDead(_284);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _283);
        StorageDead(_283);
        StorageDead(_278);
        StorageDead(_277);
        goto -> bb228;
    }

    bb119: {
        StorageDead(_281);
        StorageDead(_279);
        _277 = const ();
        StorageDead(_278);
        StorageDead(_277);
        StorageLive(_286);
        StorageLive(_287);
        StorageLive(_288);
        StorageLive(_289);
        StorageLive(_290);
        StorageLive(_291);
        _291 = &_81;
        _290 = &(*_291);
        StorageLive(_292);
        StorageLive(_293);
        _293 = &_96;
        _292 = &(*_293);
        _289 = constraints::is_stats_for_user(move _290, move _292) -> [return: bb120, unwind: bb243];
    }

    bb120: {
        StorageDead(_292);
        StorageDead(_290);
        _288 = <std::result::Result<bool, anchor_lang::error::Error> as Try>::branch(move _289) -> [return: bb121, unwind: bb243];
    }

    bb121: {
        StorageDead(_289);
        _294 = discriminant(_288);
        switchInt(move _294) -> [0: bb122, 1: bb123, otherwise: bb5];
    }

    bb122: {
        StorageLive(_298);
        _298 = ((_288 as Continue).0: bool);
        _287 = _298;
        StorageDead(_298);
        switchInt(move _287) -> [0: bb255, otherwise: bb254];
    }

    bb123: {
        StorageLive(_295);
        _295 = move ((_288 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_297);
        _297 = move _295;
        _0 = <std::result::Result<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _297) -> [return: bb124, unwind: bb260];
    }

    bb124: {
        StorageDead(_297);
        StorageDead(_295);
        _559 = discriminant(_288);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_288);
        goto -> bb225;
    }

    bb125: {
        StorageDead(_302);
        _300 = anchor_lang::error::Error::with_account_name::<&str>(move _301, const "user_stats") -> [return: bb126, unwind: bb243];
    }

    bb126: {
        StorageDead(_301);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _300);
        StorageDead(_300);
        goto -> bb225;
    }

    bb127: {
        _310 = &(*_311);
        StorageDead(_312);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        StorageLive(_317);
        StorageLive(_318);
        _318 = _8;
        _317 = core::num::<impl u16>::to_le_bytes(move _318) -> [return: bb128, unwind: bb243];
    }

    bb128: {
        _316 = &_317;
        StorageDead(_318);
        _315 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _316) -> [return: bb129, unwind: bb243];
    }

    bb129: {
        _314 = &(*_315);
        StorageDead(_316);
        _309 = [move _310, move _314];
        StorageDead(_314);
        StorageDead(_310);
        _308 = &_309;
        _307 = &(*_308);
        _306 = move _307 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_307);
        StorageLive(_319);
        StorageLive(_320);
        _320 = &_1;
        _517 = deref_copy (*_320);
        _319 = &(*_517);
        _305 = anchor_lang::prelude::Pubkey::find_program_address(move _306, move _319) -> [return: bb130, unwind: bb243];
    }

    bb130: {
        StorageDead(_319);
        StorageDead(_306);
        StorageLive(_303);
        _303 = (_305.0: anchor_lang::prelude::Pubkey);
        StorageLive(_304);
        _304 = (_305.1: u8);
        StorageDead(_320);
        StorageDead(_317);
        StorageDead(_315);
        StorageDead(_313);
        StorageDead(_311);
        StorageDead(_309);
        StorageDead(_308);
        StorageDead(_305);
        StorageLive(_321);
        _321 = _304;
        ((*_4).0: u8) = move _321;
        StorageDead(_321);
        StorageLive(_322);
        StorageLive(_323);
        StorageLive(_324);
        StorageLive(_325);
        StorageLive(_326);
        _607 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _326 = &(*_607);
        _325 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _326) -> [return: bb131, unwind: bb243];
    }

    bb131: {
        _324 = &_325;
        StorageDead(_326);
        StorageLive(_327);
        _327 = &_303;
        _323 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _324, move _327) -> [return: bb132, unwind: bb243];
    }

    bb132: {
        switchInt(move _323) -> [0: bb138, otherwise: bb133];
    }

    bb133: {
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_324);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        _332 = ConstraintSeeds;
        _331 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _332) -> [return: bb134, unwind: bb243];
    }

    bb134: {
        StorageDead(_332);
        _330 = anchor_lang::error::Error::with_account_name::<&str>(move _331, const "liability_spot_market_vault") -> [return: bb135, unwind: bb243];
    }

    bb135: {
        _520 = const true;
        StorageDead(_331);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _608 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _335 = &(*_608);
        _334 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _335) -> [return: bb136, unwind: bb259];
    }

    bb136: {
        StorageDead(_335);
        StorageLive(_336);
        _336 = _303;
        _333 = (move _334, move _336);
        StorageDead(_336);
        StorageDead(_334);
        _520 = const false;
        _329 = anchor_lang::error::Error::with_pubkeys(move _330, move _333) -> [return: bb137, unwind: bb259];
    }

    bb137: {
        StorageDead(_333);
        _520 = const false;
        StorageDead(_330);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _329);
        StorageDead(_329);
        StorageDead(_323);
        StorageDead(_322);
        goto -> bb224;
    }

    bb138: {
        StorageDead(_327);
        StorageDead(_325);
        StorageDead(_324);
        _322 = const ();
        StorageDead(_323);
        StorageDead(_322);
        StorageLive(_337);
        StorageLive(_338);
        StorageLive(_339);
        StorageLive(_340);
        StorageLive(_341);
        StorageLive(_342);
        _342 = &_111;
        _341 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _342) -> [return: bb139, unwind: bb243];
    }

    bb139: {
        _340 = &(*_341);
        StorageDead(_342);
        _339 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _340) -> [return: bb140, unwind: bb243];
    }

    bb140: {
        StorageDead(_340);
        _338 = ((*_339).6: bool);
        switchInt(move _338) -> [0: bb141, otherwise: bb144];
    }

    bb141: {
        StorageDead(_341);
        StorageDead(_339);
        StorageLive(_344);
        StorageLive(_345);
        StorageLive(_346);
        _346 = ConstraintMut;
        _345 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _346) -> [return: bb142, unwind: bb243];
    }

    bb142: {
        StorageDead(_346);
        _344 = anchor_lang::error::Error::with_account_name::<&str>(move _345, const "liability_spot_market_vault") -> [return: bb143, unwind: bb243];
    }

    bb143: {
        StorageDead(_345);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _344);
        StorageDead(_344);
        StorageDead(_338);
        StorageDead(_337);
        goto -> bb224;
    }

    bb144: {
        StorageDead(_341);
        StorageDead(_339);
        _337 = const ();
        StorageDead(_338);
        StorageDead(_337);
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        StorageLive(_356);
        StorageLive(_357);
        _357 = const b"spot_market_vault";
        _356 = &(*_357);
        _355 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _356) -> [return: bb145, unwind: bb243];
    }

    bb145: {
        _354 = &(*_355);
        StorageDead(_356);
        StorageLive(_358);
        StorageLive(_359);
        StorageLive(_360);
        StorageLive(_361);
        StorageLive(_362);
        _362 = _7;
        _361 = core::num::<impl u16>::to_le_bytes(move _362) -> [return: bb146, unwind: bb243];
    }

    bb146: {
        _360 = &_361;
        StorageDead(_362);
        _359 = <[u8; 2] as AsRef<[u8]>>::as_ref(move _360) -> [return: bb147, unwind: bb243];
    }

    bb147: {
        _358 = &(*_359);
        StorageDead(_360);
        _353 = [move _354, move _358];
        StorageDead(_358);
        StorageDead(_354);
        _352 = &_353;
        _351 = &(*_352);
        _350 = move _351 as &[&[u8]] (PointerCoercion(Unsize));
        StorageDead(_351);
        StorageLive(_363);
        StorageLive(_364);
        _364 = &_1;
        _518 = deref_copy (*_364);
        _363 = &(*_518);
        _349 = anchor_lang::prelude::Pubkey::find_program_address(move _350, move _363) -> [return: bb148, unwind: bb243];
    }

    bb148: {
        StorageDead(_363);
        StorageDead(_350);
        StorageLive(_347);
        _347 = (_349.0: anchor_lang::prelude::Pubkey);
        StorageLive(_348);
        _348 = (_349.1: u8);
        StorageDead(_364);
        StorageDead(_361);
        StorageDead(_359);
        StorageDead(_357);
        StorageDead(_355);
        StorageDead(_353);
        StorageDead(_352);
        StorageDead(_349);
        StorageLive(_365);
        _365 = _348;
        ((*_4).1: u8) = move _365;
        StorageDead(_365);
        StorageLive(_366);
        StorageLive(_367);
        StorageLive(_368);
        StorageLive(_369);
        StorageLive(_370);
        _609 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _370 = &(*_609);
        _369 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _370) -> [return: bb149, unwind: bb243];
    }

    bb149: {
        _368 = &_369;
        StorageDead(_370);
        StorageLive(_371);
        _371 = &_347;
        _367 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _368, move _371) -> [return: bb150, unwind: bb243];
    }

    bb150: {
        switchInt(move _367) -> [0: bb156, otherwise: bb151];
    }

    bb151: {
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        StorageLive(_373);
        StorageLive(_374);
        StorageLive(_375);
        StorageLive(_376);
        _376 = ConstraintSeeds;
        _375 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _376) -> [return: bb152, unwind: bb243];
    }

    bb152: {
        StorageDead(_376);
        _374 = anchor_lang::error::Error::with_account_name::<&str>(move _375, const "asset_spot_market_vault") -> [return: bb153, unwind: bb243];
    }

    bb153: {
        _519 = const true;
        StorageDead(_375);
        StorageLive(_377);
        StorageLive(_378);
        StorageLive(_379);
        _610 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _379 = &(*_610);
        _378 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as anchor_lang::Key>::key(move _379) -> [return: bb154, unwind: bb257];
    }

    bb154: {
        StorageDead(_379);
        StorageLive(_380);
        _380 = _347;
        _377 = (move _378, move _380);
        StorageDead(_380);
        StorageDead(_378);
        _519 = const false;
        _373 = anchor_lang::error::Error::with_pubkeys(move _374, move _377) -> [return: bb155, unwind: bb257];
    }

    bb155: {
        StorageDead(_377);
        _519 = const false;
        StorageDead(_374);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _373);
        StorageDead(_373);
        StorageDead(_367);
        StorageDead(_366);
        goto -> bb223;
    }

    bb156: {
        StorageDead(_371);
        StorageDead(_369);
        StorageDead(_368);
        _366 = const ();
        StorageDead(_367);
        StorageDead(_366);
        StorageLive(_381);
        StorageLive(_382);
        StorageLive(_383);
        StorageLive(_384);
        StorageLive(_385);
        StorageLive(_386);
        _386 = &_126;
        _385 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _386) -> [return: bb157, unwind: bb243];
    }

    bb157: {
        _384 = &(*_385);
        StorageDead(_386);
        _383 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _384) -> [return: bb158, unwind: bb243];
    }

    bb158: {
        StorageDead(_384);
        _382 = ((*_383).6: bool);
        switchInt(move _382) -> [0: bb159, otherwise: bb162];
    }

    bb159: {
        StorageDead(_385);
        StorageDead(_383);
        StorageLive(_388);
        StorageLive(_389);
        StorageLive(_390);
        _390 = ConstraintMut;
        _389 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _390) -> [return: bb160, unwind: bb243];
    }

    bb160: {
        StorageDead(_390);
        _388 = anchor_lang::error::Error::with_account_name::<&str>(move _389, const "asset_spot_market_vault") -> [return: bb161, unwind: bb243];
    }

    bb161: {
        StorageDead(_389);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _388);
        StorageDead(_388);
        StorageDead(_382);
        StorageDead(_381);
        goto -> bb223;
    }

    bb162: {
        StorageDead(_385);
        StorageDead(_383);
        _381 = const ();
        StorageDead(_382);
        StorageDead(_381);
        StorageLive(_391);
        StorageLive(_392);
        StorageLive(_393);
        StorageLive(_394);
        StorageLive(_395);
        StorageLive(_396);
        _396 = &_141;
        _395 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _396) -> [return: bb163, unwind: bb243];
    }

    bb163: {
        _394 = &(*_395);
        StorageDead(_396);
        _393 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _394) -> [return: bb164, unwind: bb243];
    }

    bb164: {
        StorageDead(_394);
        _392 = ((*_393).6: bool);
        switchInt(move _392) -> [0: bb165, otherwise: bb168];
    }

    bb165: {
        StorageDead(_395);
        StorageDead(_393);
        StorageLive(_398);
        StorageLive(_399);
        StorageLive(_400);
        _400 = ConstraintMut;
        _399 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _400) -> [return: bb166, unwind: bb243];
    }

    bb166: {
        StorageDead(_400);
        _398 = anchor_lang::error::Error::with_account_name::<&str>(move _399, const "liability_token_account") -> [return: bb167, unwind: bb243];
    }

    bb167: {
        StorageDead(_399);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _398);
        StorageDead(_398);
        StorageDead(_392);
        StorageDead(_391);
        goto -> bb223;
    }

    bb168: {
        StorageDead(_395);
        StorageDead(_393);
        _391 = const ();
        StorageDead(_392);
        StorageDead(_391);
        StorageLive(_401);
        StorageLive(_402);
        StorageLive(_403);
        StorageLive(_404);
        StorageLive(_405);
        StorageLive(_406);
        StorageLive(_407);
        StorageLive(_408);
        StorageLive(_409);
        _611 = (((_111.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _409 = &(*_611);
        _408 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _409) -> [return: bb169, unwind: bb243];
    }

    bb169: {
        _407 = &(*_408);
        _406 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _407) -> [return: bb170, unwind: bb243];
    }

    bb170: {
        StorageDead(_409);
        StorageDead(_407);
        _405 = &((*_406).0: anchor_lang::prelude::Pubkey);
        StorageLive(_410);
        StorageLive(_411);
        StorageLive(_412);
        StorageLive(_413);
        StorageLive(_414);
        StorageLive(_415);
        _612 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _415 = &(*_612);
        _414 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _415) -> [return: bb171, unwind: bb243];
    }

    bb171: {
        _413 = &(*_414);
        _412 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _413) -> [return: bb172, unwind: bb243];
    }

    bb172: {
        StorageDead(_415);
        StorageDead(_413);
        _411 = &((*_412).0: anchor_lang::prelude::Pubkey);
        _410 = &(*_411);
        _404 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _405, move _410) -> [return: bb173, unwind: bb243];
    }

    bb173: {
        StorageDead(_410);
        StorageDead(_405);
        _403 = &_404;
        _402 = <&bool as Not>::not(move _403) -> [return: bb174, unwind: bb243];
    }

    bb174: {
        switchInt(move _402) -> [0: bb178, otherwise: bb175];
    }

    bb175: {
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_403);
        StorageLive(_417);
        StorageLive(_418);
        StorageLive(_419);
        _419 = ConstraintRaw;
        _418 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _419) -> [return: bb176, unwind: bb243];
    }

    bb176: {
        StorageDead(_419);
        _417 = anchor_lang::error::Error::with_account_name::<&str>(move _418, const "liability_token_account") -> [return: bb177, unwind: bb243];
    }

    bb177: {
        StorageDead(_418);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _417);
        StorageDead(_417);
        StorageDead(_402);
        StorageDead(_401);
        goto -> bb223;
    }

    bb178: {
        StorageDead(_414);
        StorageDead(_412);
        StorageDead(_411);
        StorageDead(_408);
        StorageDead(_406);
        StorageDead(_404);
        StorageDead(_403);
        _401 = const ();
        StorageDead(_402);
        StorageDead(_401);
        StorageLive(_420);
        StorageLive(_421);
        StorageLive(_422);
        StorageLive(_423);
        StorageLive(_424);
        StorageLive(_425);
        StorageLive(_426);
        _613 = (((_141.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _426 = &(*_613);
        _425 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _426) -> [return: bb179, unwind: bb243];
    }

    bb179: {
        _424 = &(*_425);
        _423 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _424) -> [return: bb180, unwind: bb243];
    }

    bb180: {
        StorageDead(_426);
        StorageDead(_424);
        _422 = &((*_423).1: anchor_lang::prelude::Pubkey);
        StorageLive(_427);
        StorageLive(_428);
        StorageLive(_429);
        _429 = &_36;
        _428 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _429) -> [return: bb181, unwind: bb243];
    }

    bb181: {
        _427 = &_428;
        StorageDead(_429);
        _421 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _422, move _427) -> [return: bb182, unwind: bb243];
    }

    bb182: {
        switchInt(move _421) -> [0: bb185, otherwise: bb183];
    }

    bb183: {
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_422);
        StorageLive(_431);
        StorageLive(_432);
        _432 = ConstraintTokenOwner;
        _431 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _432) -> [return: bb184, unwind: bb243];
    }

    bb184: {
        StorageDead(_432);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _431);
        StorageDead(_431);
        StorageDead(_421);
        StorageDead(_420);
        goto -> bb223;
    }

    bb185: {
        StorageDead(_428);
        StorageDead(_427);
        StorageDead(_425);
        StorageDead(_423);
        StorageDead(_422);
        _420 = const ();
        StorageDead(_421);
        StorageDead(_420);
        StorageLive(_433);
        StorageLive(_434);
        StorageLive(_435);
        StorageLive(_436);
        StorageLive(_437);
        StorageLive(_438);
        _438 = &_156;
        _437 = <Box<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>> as AsRef<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>>::as_ref(move _438) -> [return: bb186, unwind: bb243];
    }

    bb186: {
        _436 = &(*_437);
        StorageDead(_438);
        _435 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _436) -> [return: bb187, unwind: bb243];
    }

    bb187: {
        StorageDead(_436);
        _434 = ((*_435).6: bool);
        switchInt(move _434) -> [0: bb188, otherwise: bb191];
    }

    bb188: {
        StorageDead(_437);
        StorageDead(_435);
        StorageLive(_440);
        StorageLive(_441);
        StorageLive(_442);
        _442 = ConstraintMut;
        _441 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _442) -> [return: bb189, unwind: bb243];
    }

    bb189: {
        StorageDead(_442);
        _440 = anchor_lang::error::Error::with_account_name::<&str>(move _441, const "asset_token_account") -> [return: bb190, unwind: bb243];
    }

    bb190: {
        StorageDead(_441);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _440);
        StorageDead(_440);
        StorageDead(_434);
        StorageDead(_433);
        goto -> bb223;
    }

    bb191: {
        StorageDead(_437);
        StorageDead(_435);
        _433 = const ();
        StorageDead(_434);
        StorageDead(_433);
        StorageLive(_443);
        StorageLive(_444);
        StorageLive(_445);
        StorageLive(_446);
        StorageLive(_447);
        StorageLive(_448);
        StorageLive(_449);
        StorageLive(_450);
        StorageLive(_451);
        _614 = (((_126.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _451 = &(*_614);
        _450 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _451) -> [return: bb192, unwind: bb243];
    }

    bb192: {
        _449 = &(*_450);
        _448 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _449) -> [return: bb193, unwind: bb243];
    }

    bb193: {
        StorageDead(_451);
        StorageDead(_449);
        _447 = &((*_448).0: anchor_lang::prelude::Pubkey);
        StorageLive(_452);
        StorageLive(_453);
        StorageLive(_454);
        StorageLive(_455);
        StorageLive(_456);
        StorageLive(_457);
        _615 = (((_156.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _457 = &(*_615);
        _456 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _457) -> [return: bb194, unwind: bb243];
    }

    bb194: {
        _455 = &(*_456);
        _454 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _455) -> [return: bb195, unwind: bb243];
    }

    bb195: {
        StorageDead(_457);
        StorageDead(_455);
        _453 = &((*_454).0: anchor_lang::prelude::Pubkey);
        _452 = &(*_453);
        _446 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _447, move _452) -> [return: bb196, unwind: bb243];
    }

    bb196: {
        StorageDead(_452);
        StorageDead(_447);
        _445 = &_446;
        _444 = <&bool as Not>::not(move _445) -> [return: bb197, unwind: bb243];
    }

    bb197: {
        switchInt(move _444) -> [0: bb201, otherwise: bb198];
    }

    bb198: {
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_450);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_445);
        StorageLive(_459);
        StorageLive(_460);
        StorageLive(_461);
        _461 = ConstraintRaw;
        _460 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _461) -> [return: bb199, unwind: bb243];
    }

    bb199: {
        StorageDead(_461);
        _459 = anchor_lang::error::Error::with_account_name::<&str>(move _460, const "asset_token_account") -> [return: bb200, unwind: bb243];
    }

    bb200: {
        StorageDead(_460);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _459);
        StorageDead(_459);
        StorageDead(_444);
        StorageDead(_443);
        goto -> bb223;
    }

    bb201: {
        StorageDead(_456);
        StorageDead(_454);
        StorageDead(_453);
        StorageDead(_450);
        StorageDead(_448);
        StorageDead(_446);
        StorageDead(_445);
        _443 = const ();
        StorageDead(_444);
        StorageDead(_443);
        StorageLive(_462);
        StorageLive(_463);
        StorageLive(_464);
        StorageLive(_465);
        StorageLive(_466);
        StorageLive(_467);
        StorageLive(_468);
        _616 = (((_156.0: std::ptr::Unique<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>>).0: *const anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount>);
        _468 = &(*_616);
        _467 = <anchor_lang::prelude::InterfaceAccount<'_, anchor_spl::token_interface::TokenAccount> as Deref>::deref(move _468) -> [return: bb202, unwind: bb243];
    }

    bb202: {
        _466 = &(*_467);
        _465 = <anchor_spl::token_interface::TokenAccount as Deref>::deref(move _466) -> [return: bb203, unwind: bb243];
    }

    bb203: {
        StorageDead(_468);
        StorageDead(_466);
        _464 = &((*_465).1: anchor_lang::prelude::Pubkey);
        StorageLive(_469);
        StorageLive(_470);
        StorageLive(_471);
        _471 = &_36;
        _470 = <anchor_lang::prelude::Signer<'_> as anchor_lang::Key>::key(move _471) -> [return: bb204, unwind: bb243];
    }

    bb204: {
        _469 = &_470;
        StorageDead(_471);
        _463 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _464, move _469) -> [return: bb205, unwind: bb243];
    }

    bb205: {
        switchInt(move _463) -> [0: bb208, otherwise: bb206];
    }

    bb206: {
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_465);
        StorageDead(_464);
        StorageLive(_473);
        StorageLive(_474);
        _474 = ConstraintTokenOwner;
        _473 = <anchor_lang::error::ErrorCode as Into<anchor_lang::error::Error>>::into(move _474) -> [return: bb207, unwind: bb243];
    }

    bb207: {
        StorageDead(_474);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _473);
        StorageDead(_473);
        StorageDead(_463);
        StorageDead(_462);
        goto -> bb223;
    }

    bb208: {
        StorageDead(_470);
        StorageDead(_469);
        StorageDead(_467);
        StorageDead(_465);
        StorageDead(_464);
        _462 = const ();
        StorageDead(_463);
        StorageDead(_462);
        StorageLive(_475);
        StorageLive(_476);
        StorageLive(_477);
        StorageLive(_478);
        StorageLive(_479);
        _617 = (((_21.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _479 = &(*_617);
        _478 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _479) -> [return: bb209, unwind: bb243];
    }

    bb209: {
        StorageDead(_479);
        _477 = &((*_478).3: anchor_lang::prelude::Pubkey);
        StorageLive(_480);
        StorageLive(_481);
        StorageLive(_482);
        StorageLive(_483);
        _483 = &_186;
        _482 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _483) -> [return: bb210, unwind: bb243];
    }

    bb210: {
        StorageDead(_483);
        _481 = &_482;
        _480 = &(*_481);
        _476 = <anchor_lang::prelude::Pubkey as PartialEq>::eq(move _477, move _480) -> [return: bb211, unwind: bb243];
    }

    bb211: {
        switchInt(move _476) -> [0: bb213, otherwise: bb212];
    }

    bb212: {
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_482);
        StorageDead(_481);
        StorageDead(_478);
        _475 = const ();
        StorageDead(_476);
        StorageDead(_475);
        StorageLive(_488);
        StorageLive(_489);
        StorageLive(_490);
        _490 = &_201;
        _489 = <anchor_lang::prelude::UncheckedAccount<'_> as anchor_lang::Key>::key(move _490) -> [return: bb216, unwind: bb243];
    }

    bb213: {
        StorageDead(_480);
        StorageDead(_477);
        StorageDead(_482);
        StorageDead(_481);
        StorageDead(_478);
        StorageLive(_485);
        StorageLive(_486);
        StorageLive(_487);
        _487 = ConstraintRaw;
        _486 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _487) -> [return: bb214, unwind: bb243];
    }

    bb214: {
        StorageDead(_487);
        _485 = anchor_lang::error::Error::with_account_name::<&str>(move _486, const "drift_signer") -> [return: bb215, unwind: bb243];
    }

    bb215: {
        StorageDead(_486);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _485);
        StorageDead(_485);
        StorageDead(_476);
        StorageDead(_475);
        goto -> bb223;
    }

    bb216: {
        StorageDead(_490);
        StorageLive(_491);
        _491 = const _;
        StorageLive(_492);
        StorageLive(_493);
        _493 = &_489;
        StorageLive(_494);
        _494 = &_491;
        _492 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _493, move _494) -> [return: bb217, unwind: bb243];
    }

    bb217: {
        switchInt(move _492) -> [0: bb222, otherwise: bb218];
    }

    bb218: {
        StorageDead(_494);
        StorageDead(_493);
        StorageLive(_496);
        StorageLive(_497);
        StorageLive(_498);
        StorageLive(_499);
        _499 = ConstraintAddress;
        _498 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _499) -> [return: bb219, unwind: bb243];
    }

    bb219: {
        StorageDead(_499);
        _497 = anchor_lang::error::Error::with_account_name::<&str>(move _498, const "instructions") -> [return: bb220, unwind: bb243];
    }

    bb220: {
        StorageDead(_498);
        StorageLive(_500);
        StorageLive(_501);
        _501 = _489;
        StorageLive(_502);
        _502 = _491;
        _500 = (move _501, move _502);
        StorageDead(_502);
        StorageDead(_501);
        _496 = anchor_lang::error::Error::with_pubkeys(move _497, move _500) -> [return: bb221, unwind: bb243];
    }

    bb221: {
        StorageDead(_500);
        StorageDead(_497);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Err(move _496);
        StorageDead(_496);
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_489);
        StorageDead(_488);
        goto -> bb223;
    }

    bb222: {
        StorageDead(_494);
        StorageDead(_493);
        _488 = const ();
        StorageDead(_492);
        StorageDead(_491);
        StorageDead(_489);
        StorageDead(_488);
        StorageLive(_503);
        StorageLive(_504);
        _504 = move _21;
        StorageLive(_505);
        _505 = move _36;
        StorageLive(_506);
        _506 = move _51;
        StorageLive(_507);
        _507 = move _66;
        StorageLive(_508);
        _508 = move _81;
        StorageLive(_509);
        _509 = move _96;
        StorageLive(_510);
        _510 = move _111;
        StorageLive(_511);
        _511 = move _126;
        StorageLive(_512);
        _512 = move _141;
        StorageLive(_513);
        _513 = move _156;
        StorageLive(_514);
        _514 = move _171;
        StorageLive(_515);
        _515 = move _186;
        StorageLive(_516);
        _516 = move _201;
        _503 = keeper::LiquidateSpotWithSwap::<'_> { state: move _504, authority: move _505, liquidator: move _506, liquidator_stats: move _507, user: move _508, user_stats: move _509, liability_spot_market_vault: move _510, asset_spot_market_vault: move _511, liability_token_account: move _512, asset_token_account: move _513, token_program: move _514, drift_signer: move _515, instructions: move _516 };
        StorageDead(_516);
        StorageDead(_515);
        StorageDead(_514);
        StorageDead(_513);
        StorageDead(_512);
        StorageDead(_511);
        StorageDead(_510);
        StorageDead(_509);
        StorageDead(_508);
        StorageDead(_507);
        StorageDead(_506);
        StorageDead(_505);
        StorageDead(_504);
        _0 = std::result::Result::<keeper::LiquidateSpotWithSwap<'_>, anchor_lang::error::Error>::Ok(move _503);
        StorageDead(_503);
        StorageDead(_348);
        StorageDead(_347);
        StorageDead(_304);
        StorageDead(_303);
        StorageDead(_201);
        StorageDead(_186);
        StorageDead(_171);
        StorageDead(_156);
        StorageDead(_141);
        StorageDead(_126);
        StorageDead(_111);
        StorageDead(_96);
        StorageDead(_81);
        StorageDead(_66);
        StorageDead(_51);
        StorageDead(_36);
        StorageDead(_21);
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb242;
    }

    bb223: {
        StorageDead(_348);
        StorageDead(_347);
        goto -> bb224;
    }

    bb224: {
        StorageDead(_304);
        StorageDead(_303);
        goto -> bb228;
    }

    bb225: {
        StorageDead(_287);
        StorageDead(_286);
        goto -> bb228;
    }

    bb226: {
        StorageDead(_252);
        StorageDead(_251);
        goto -> bb228;
    }

    bb227: {
        StorageDead(_226);
        StorageDead(_225);
        goto -> bb228;
    }

    bb228: {
        StorageDead(_201);
        drop(_186) -> [return: bb229, unwind: bb244];
    }

    bb229: {
        StorageDead(_186);
        goto -> bb230;
    }

    bb230: {
        StorageDead(_171);
        drop(_156) -> [return: bb231, unwind: bb245];
    }

    bb231: {
        StorageDead(_156);
        drop(_141) -> [return: bb232, unwind: bb246];
    }

    bb232: {
        StorageDead(_141);
        drop(_126) -> [return: bb233, unwind: bb247];
    }

    bb233: {
        StorageDead(_126);
        drop(_111) -> [return: bb234, unwind: bb248];
    }

    bb234: {
        StorageDead(_111);
        goto -> bb235;
    }

    bb235: {
        StorageDead(_96);
        goto -> bb236;
    }

    bb236: {
        StorageDead(_81);
        goto -> bb237;
    }

    bb237: {
        StorageDead(_66);
        goto -> bb238;
    }

    bb238: {
        StorageDead(_51);
        goto -> bb239;
    }

    bb239: {
        StorageDead(_36);
        drop(_21) -> [return: bb240, unwind: bb249];
    }

    bb240: {
        StorageDead(_21);
        StorageDead(_8);
        StorageDead(_7);
        goto -> bb241;
    }

    bb241: {
        StorageDead(_6);
        goto -> bb242;
    }

    bb242: {
        return;
    }

    bb243 (cleanup): {
        drop(_186) -> [return: bb244, unwind terminate(cleanup)];
    }

    bb244 (cleanup): {
        drop(_156) -> [return: bb245, unwind terminate(cleanup)];
    }

    bb245 (cleanup): {
        drop(_141) -> [return: bb246, unwind terminate(cleanup)];
    }

    bb246 (cleanup): {
        drop(_126) -> [return: bb247, unwind terminate(cleanup)];
    }

    bb247 (cleanup): {
        drop(_111) -> [return: bb248, unwind terminate(cleanup)];
    }

    bb248 (cleanup): {
        drop(_21) -> [return: bb249, unwind terminate(cleanup)];
    }

    bb249 (cleanup): {
        resume;
    }

    bb250: {
        _547 = discriminant(_227);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_227);
        _225 = const ();
        StorageDead(_226);
        StorageDead(_225);
        StorageLive(_242);
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = &_66;
        _245 = &(*_246);
        _244 = <anchor_lang::prelude::AccountLoader<'_, UserStats> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _245) -> [return: bb98, unwind: bb243];
    }

    bb251: {
        _549 = discriminant(_227);
        StorageDead(_232);
        StorageDead(_230);
        StorageDead(_227);
        StorageLive(_239);
        StorageLive(_240);
        StorageLive(_241);
        _241 = ConstraintRaw;
        _240 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _241) -> [return: bb96, unwind: bb243];
    }

    bb252: {
        _551 = discriminant(_253);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_253);
        _251 = const ();
        StorageDead(_252);
        StorageDead(_251);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        StorageLive(_271);
        StorageLive(_272);
        _272 = &_81;
        _271 = &(*_272);
        _270 = <anchor_lang::prelude::AccountLoader<'_, User> as AsRef<anchor_lang::prelude::AccountInfo<'_>>>::as_ref(move _271) -> [return: bb110, unwind: bb243];
    }

    bb253: {
        _553 = discriminant(_253);
        StorageDead(_258);
        StorageDead(_256);
        StorageDead(_253);
        StorageLive(_265);
        StorageLive(_266);
        StorageLive(_267);
        _267 = ConstraintRaw;
        _266 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _267) -> [return: bb108, unwind: bb243];
    }

    bb254: {
        _555 = discriminant(_288);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_288);
        _286 = const ();
        StorageDead(_287);
        StorageDead(_286);
        StorageLive(_305);
        StorageLive(_306);
        StorageLive(_307);
        StorageLive(_308);
        StorageLive(_309);
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        _313 = const b"spot_market_vault";
        _312 = &(*_313);
        _311 = <[u8; 17] as AsRef<[u8]>>::as_ref(move _312) -> [return: bb127, unwind: bb243];
    }

    bb255: {
        _557 = discriminant(_288);
        StorageDead(_293);
        StorageDead(_291);
        StorageDead(_288);
        StorageLive(_300);
        StorageLive(_301);
        StorageLive(_302);
        _302 = ConstraintRaw;
        _301 = <anchor_lang::error::Error as From<anchor_lang::error::ErrorCode>>::from(move _302) -> [return: bb125, unwind: bb243];
    }

    bb256 (cleanup): {
        drop(_374) -> [return: bb243, unwind terminate(cleanup)];
    }

    bb257 (cleanup): {
        switchInt(_519) -> [0: bb243, otherwise: bb256];
    }

    bb258 (cleanup): {
        drop(_330) -> [return: bb243, unwind terminate(cleanup)];
    }

    bb259 (cleanup): {
        switchInt(_520) -> [0: bb243, otherwise: bb258];
    }

    bb260 (cleanup): {
        _591 = discriminant(_288);
        goto -> bb243;
    }

    bb261 (cleanup): {
        _592 = discriminant(_253);
        goto -> bb243;
    }

    bb262 (cleanup): {
        _593 = discriminant(_227);
        goto -> bb243;
    }

    bb263 (cleanup): {
        _594 = discriminant(_202);
        goto -> bb243;
    }

    bb264 (cleanup): {
        _595 = discriminant(_187);
        goto -> bb244;
    }

    bb265 (cleanup): {
        _596 = discriminant(_172);
        goto -> bb244;
    }

    bb266 (cleanup): {
        _597 = discriminant(_157);
        goto -> bb245;
    }

    bb267 (cleanup): {
        _598 = discriminant(_142);
        goto -> bb246;
    }

    bb268 (cleanup): {
        _599 = discriminant(_127);
        goto -> bb247;
    }

    bb269 (cleanup): {
        _600 = discriminant(_112);
        goto -> bb248;
    }

    bb270 (cleanup): {
        _601 = discriminant(_97);
        goto -> bb248;
    }

    bb271 (cleanup): {
        _602 = discriminant(_82);
        goto -> bb248;
    }

    bb272 (cleanup): {
        _603 = discriminant(_67);
        goto -> bb248;
    }

    bb273 (cleanup): {
        _604 = discriminant(_52);
        goto -> bb248;
    }

    bb274 (cleanup): {
        _605 = discriminant(_37);
        goto -> bb248;
    }

    bb275 (cleanup): {
        _606 = discriminant(_22);
        goto -> bb249;
    }
}

alloc269 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}

alloc268 (size: 17, align: 1) {
    0x00 │ 73 70 6f 74 5f 6d 61 72 6b 65 74 5f 76 61 75 6c │ spot_market_vaul
    0x10 │ 74                                              │ t
}
