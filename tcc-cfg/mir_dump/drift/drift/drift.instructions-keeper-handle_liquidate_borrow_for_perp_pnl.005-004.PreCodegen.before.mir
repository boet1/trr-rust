// MIR for `keeper::handle_liquidate_borrow_for_perp_pnl` before PreCodegen

fn keeper::handle_liquidate_borrow_for_perp_pnl(_1: anchor_lang::context::Context<'_, '_, '_, '_, keeper::LiquidateBorrowForPerpPnl<'_>>, _2: u16, _3: u16, _4: u128, _5: Option<u64>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug perp_market_index => _2;
    debug spot_market_index => _3;
    debug liquidator_max_liability_transfer => _4;
    debug limit_price => _5;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _6: ();
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _8: std::result::Result<(), anchor_lang::error::Error>;
    let mut _9: &anchor_lang::prelude::Account<'_, state::state::State>;
    let _10: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _11: isize;
    let _12: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _13: !;
    let mut _14: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _15: ();
    let _16: anchor_lang::prelude::Clock;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _18: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _19: isize;
    let _20: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let mut _21: !;
    let mut _22: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _23: anchor_lang::prelude::Clock;
    let mut _27: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _29: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let _30: ();
    let mut _31: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _32: std::result::Result<(), error::ErrorCode>;
    let mut _33: bool;
    let mut _34: &anchor_lang::prelude::Pubkey;
    let mut _35: &anchor_lang::prelude::Pubkey;
    let mut _36: ();
    let _38: ();
    let mut _39: &str;
    let _40: &str;
    let mut _41: &std::string::String;
    let _42: &std::string::String;
    let _43: std::string::String;
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[&str; 2];
    let _48: &[&str; 2];
    let _49: [&str; 2];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let mut _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let mut _55: &error::ErrorCode;
    let _56: &error::ErrorCode;
    let mut _57: error::ErrorCode;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: std::cell::RefMut<'_, state::user::User>;
    let mut _65: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _66: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _67: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _68: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _69: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _70: isize;
    let mut _72: !;
    let mut _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _76: std::cell::RefMut<'_, state::user::User>;
    let mut _77: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::User>>;
    let mut _78: std::result::Result<std::cell::RefMut<'_, state::user::User>, error::ErrorCode>;
    let mut _79: std::result::Result<std::cell::RefMut<'_, state::user::User>, anchor_lang::error::Error>;
    let mut _80: &anchor_lang::prelude::AccountLoader<'_, state::user::User>;
    let mut _81: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _82: isize;
    let mut _84: !;
    let mut _85: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: instructions::optional_accounts::AccountMaps<'_>;
    let mut _91: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, instructions::optional_accounts::AccountMaps<'_>>;
    let mut _92: std::result::Result<instructions::optional_accounts::AccountMaps<'_>, error::ErrorCode>;
    let mut _93: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _94: &mut std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _95: std::iter::Peekable<std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>>;
    let mut _96: std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>>;
    let mut _97: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _98: &std::collections::BTreeSet<u16>;
    let _99: &std::collections::BTreeSet<u16>;
    let _100: std::collections::BTreeSet<u16>;
    let mut _101: &std::collections::BTreeSet<u16>;
    let _102: &std::collections::BTreeSet<u16>;
    let _103: std::collections::BTreeSet<u16>;
    let mut _104: u16;
    let mut _105: u64;
    let mut _106: std::option::Option<state::state::OracleGuardRails>;
    let mut _107: state::state::OracleGuardRails;
    let mut _108: &state::state::State;
    let mut _109: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _115: ();
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _117: std::result::Result<(), error::ErrorCode>;
    let mut _118: u16;
    let mut _119: u16;
    let mut _120: u128;
    let mut _121: std::option::Option<u64>;
    let mut _122: &mut state::user::User;
    let mut _123: &mut state::user::User;
    let mut _124: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _125: &anchor_lang::prelude::Pubkey;
    let _126: &anchor_lang::prelude::Pubkey;
    let mut _127: &mut state::user::User;
    let mut _128: &mut state::user::User;
    let mut _129: &mut std::cell::RefMut<'_, state::user::User>;
    let mut _130: &anchor_lang::prelude::Pubkey;
    let _131: &anchor_lang::prelude::Pubkey;
    let mut _132: &state::perp_market_map::PerpMarketMap<'_>;
    let _133: &state::perp_market_map::PerpMarketMap<'_>;
    let mut _134: &state::spot_market_map::SpotMarketMap<'_>;
    let _135: &state::spot_market_map::SpotMarketMap<'_>;
    let mut _136: &mut state::oracle_map::OracleMap<'_>;
    let mut _137: &mut state::oracle_map::OracleMap<'_>;
    let mut _138: i64;
    let mut _139: u64;
    let mut _140: u32;
    let mut _141: &state::state::State;
    let mut _142: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _143: u128;
    let mut _144: u16;
    let mut _145: &state::state::State;
    let mut _146: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _147: u128;
    let mut _148: u8;
    let mut _149: &state::state::State;
    let mut _150: &anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _151: isize;
    let mut _153: !;
    let mut _154: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _156: ();
    let mut _158: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>;
    let mut _159: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _160: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>;
    let mut _161: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>;
    let mut _162: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>;
    let mut _163: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>;
    let mut _164: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>;
    let mut _165: &[anchor_lang::prelude::AccountInfo<'_>];
    let mut _166: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _167: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _168: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _169: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
    let mut _170: isize;
    let mut _171: isize;
    let mut _172: isize;
    let mut _173: isize;
    let mut _174: isize;
    let mut _175: isize;
    let mut _176: isize;
    let mut _177: isize;
    let mut _178: isize;
    let mut _179: isize;
    let mut _180: isize;
    let mut _181: isize;
    let mut _182: isize;
    let mut _183: isize;
    let mut _184: isize;
    let mut _185: isize;
    let mut _186: isize;
    let mut _187: isize;
    let mut _188: isize;
    let mut _189: isize;
    let mut _190: isize;
    let mut _191: isize;
    let mut _192: isize;
    let mut _193: isize;
    let mut _194: isize;
    let mut _195: isize;
    let mut _196: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _197: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _198: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _199: *const anchor_lang::prelude::Account<'_, state::state::State>;
    let mut _200: *const anchor_lang::prelude::Account<'_, state::state::State>;
    scope 1 {
        debug residual => _12;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _15;
        scope 4 {
        }
    }
    scope 5 {
        debug clock => _16;
        let _24: i64;
        scope 10 {
            debug now => _24;
            let _25: &std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>;
            scope 11 {
                debug state => _25;
                let _26: anchor_lang::prelude::Pubkey;
                scope 12 {
                    debug user_key => _26;
                    let _28: anchor_lang::prelude::Pubkey;
                    scope 13 {
                        debug liquidator_key => _28;
                        let _37: error::ErrorCode;
                        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _62: ();
                        let _63: &mut std::cell::RefMut<'_, state::user::User>;
                        let _71: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _74: std::cell::RefMut<'_, state::user::User>;
                        scope 14 {
                            debug error_code => _37;
                            let _44: std::string::String;
                            let mut _157: &[&str; 2];
                            scope 15 {
                                debug res => _44;
                            }
                        }
                        scope 16 {
                            debug residual => _59;
                            scope 17 {
                            }
                        }
                        scope 18 {
                            debug val => _62;
                            scope 19 {
                            }
                        }
                        scope 20 {
                            debug user => _63;
                            let _75: &mut std::cell::RefMut<'_, state::user::User>;
                            let _83: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _86: std::cell::RefMut<'_, state::user::User>;
                            scope 25 {
                                debug liquidator => _75;
                                let _87: state::perp_market_map::PerpMarketMap<'_>;
                                let _88: state::spot_market_map::SpotMarketMap<'_>;
                                let mut _89: state::oracle_map::OracleMap<'_>;
                                let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                let _114: instructions::optional_accounts::AccountMaps<'_>;
                                scope 30 {
                                    debug perp_market_map => _87;
                                    debug spot_market_map => _88;
                                    debug oracle_map => _89;
                                    let _152: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                    let _155: ();
                                    scope 35 {
                                        debug residual => _152;
                                        scope 36 {
                                        }
                                    }
                                    scope 37 {
                                        debug val => _155;
                                        scope 38 {
                                        }
                                    }
                                }
                                scope 31 {
                                    debug residual => _111;
                                    scope 32 {
                                    }
                                }
                                scope 33 {
                                    debug val => _114;
                                    scope 34 {
                                    }
                                }
                            }
                            scope 26 {
                                debug residual => _83;
                                scope 27 {
                                }
                            }
                            scope 28 {
                                debug val => _86;
                                scope 29 {
                                }
                            }
                        }
                        scope 21 {
                            debug residual => _71;
                            scope 22 {
                            }
                        }
                        scope 23 {
                            debug val => _74;
                            scope 24 {
                            }
                        }
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _20;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _23;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        _158 = deref_copy (_1.1: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>);
        _10 = &((*_158).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        _159 = deref_copy (*_10);
        _196 = (((_159.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _9 = &(*_196);
        _8 = constraints::liq_not_paused(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _8) -> [return: bb2, unwind: bb87];
    }

    bb2: {
        StorageDead(_8);
        _11 = discriminant(_7);
        switchInt(move _11) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_15);
        _15 = ((_7 as Continue).0: ());
        _6 = _15;
        StorageDead(_15);
        _170 = discriminant(_7);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_12);
        _12 = move ((_7 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_14);
        _14 = move _12;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _14) -> [return: bb6, unwind: bb92];
    }

    bb6: {
        StorageDead(_14);
        StorageDead(_12);
        _188 = discriminant(_7);
        StorageDead(_10);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb77;
    }

    bb7: {
        _17 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _18) -> [return: bb8, unwind: bb87];
    }

    bb8: {
        StorageDead(_18);
        _19 = discriminant(_17);
        switchInt(move _19) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_23);
        _23 = move ((_17 as Continue).0: anchor_lang::prelude::Clock);
        _16 = move _23;
        StorageDead(_23);
        _172 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_24);
        _24 = (_16.4: i64);
        StorageLive(_25);
        _160 = deref_copy (_1.1: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>);
        _25 = &((*_160).0: std::boxed::Box<anchor_lang::prelude::Account<'_, state::state::State>>);
        StorageLive(_26);
        StorageLive(_27);
        _161 = deref_copy (_1.1: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>);
        _27 = &((*_161).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _26 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _27) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_20);
        _20 = move ((_17 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_22);
        _22 = move _20;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _22) -> [return: bb11, unwind: bb91];
    }

    bb11: {
        StorageDead(_22);
        StorageDead(_20);
        _186 = discriminant(_17);
        StorageDead(_17);
        goto -> bb76;
    }

    bb12: {
        StorageDead(_27);
        StorageLive(_28);
        StorageLive(_29);
        _162 = deref_copy (_1.1: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>);
        _29 = &((*_162).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _28 = <anchor_lang::prelude::AccountLoader<'_, User> as anchor_lang::Key>::key(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = &_26;
        StorageLive(_35);
        _35 = &_28;
        _33 = <anchor_lang::prelude::Pubkey as PartialEq>::ne(move _34, move _35) -> [return: bb14, unwind continue];
    }

    bb14: {
        switchInt(move _33) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_36);
        _36 = ();
        _32 = std::result::Result::<(), error::ErrorCode>::Ok(move _36);
        StorageDead(_36);
        goto -> bb23;
    }

    bb16: {
        StorageDead(_35);
        StorageDead(_34);
        StorageLive(_37);
        _37 = error::ErrorCode::UserCantLiquidateThemself;
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        _157 = const _;
        _48 = &(*_157);
        _47 = &(*_48);
        _46 = move _47 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_47);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_37;
        _55 = &(*_56);
        _54 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _55) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_55);
        _53 = [move _54];
        StorageDead(_54);
        _52 = &_53;
        _51 = &(*_52);
        _50 = move _51 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_51);
        _45 = Arguments::<'_>::new_v1(move _46, move _50) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_50);
        StorageDead(_46);
        _44 = format(move _45) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_45);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageDead(_48);
        _43 = move _44;
        StorageDead(_44);
        _42 = &_43;
        _41 = &(*_42);
        _40 = <String as Deref>::deref(move _41) -> [return: bb20, unwind: bb86];
    }

    bb20: {
        _39 = &(*_40);
        StorageDead(_41);
        _38 = solana_program::log::sol_log(move _39) -> [return: bb21, unwind: bb86];
    }

    bb21: {
        StorageDead(_39);
        drop(_43) -> [return: bb22, unwind: bb87];
    }

    bb22: {
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_40);
        StorageDead(_38);
        StorageLive(_57);
        _57 = _37;
        _32 = std::result::Result::<(), error::ErrorCode>::Err(move _57);
        StorageDead(_57);
        StorageDead(_37);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_33);
        _31 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _32) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_32);
        _58 = discriminant(_31);
        switchInt(move _58) -> [0: bb25, 1: bb26, otherwise: bb4];
    }

    bb25: {
        StorageLive(_62);
        _62 = ((_31 as Continue).0: ());
        _30 = _62;
        StorageDead(_62);
        StorageDead(_31);
        StorageDead(_30);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _163 = deref_copy (_1.1: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>);
        _68 = &((*_163).4: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _67 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _68) -> [return: bb28, unwind continue];
    }

    bb26: {
        StorageLive(_59);
        _59 = ((_31 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb27, unwind continue];
    }

    bb27: {
        StorageDead(_61);
        StorageDead(_59);
        StorageDead(_31);
        StorageDead(_30);
        goto -> bb75;
    }

    bb28: {
        StorageDead(_68);
        StorageLive(_69);
        _69 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _66 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _67, move _69) -> [return: bb29, unwind: bb87];
    }

    bb29: {
        StorageDead(_69);
        StorageDead(_67);
        _65 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _66) -> [return: bb30, unwind: bb87];
    }

    bb30: {
        StorageDead(_66);
        _70 = discriminant(_65);
        switchInt(move _70) -> [0: bb31, 1: bb32, otherwise: bb4];
    }

    bb31: {
        StorageLive(_74);
        _74 = move ((_65 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _64 = move _74;
        StorageDead(_74);
        _63 = &mut _64;
        _176 = discriminant(_65);
        StorageDead(_65);
        StorageLive(_75);
        StorageLive(_76);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        _164 = deref_copy (_1.1: &mut instructions::keeper::LiquidateBorrowForPerpPnl<'_>);
        _80 = &((*_164).2: anchor_lang::prelude::AccountLoader<'_, state::user::User>);
        _79 = anchor_lang::prelude::AccountLoader::<'_, User>::load_mut(move _80) -> [return: bb34, unwind: bb85];
    }

    bb32: {
        StorageLive(_71);
        _71 = ((_65 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_73);
        _73 = _71;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _73) -> [return: bb33, unwind: bb90];
    }

    bb33: {
        StorageDead(_73);
        StorageDead(_71);
        _174 = discriminant(_65);
        StorageDead(_65);
        goto -> bb74;
    }

    bb34: {
        StorageDead(_80);
        StorageLive(_81);
        _81 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _78 = std::result::Result::<RefMut<'_, User>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _79, move _81) -> [return: bb35, unwind: bb85];
    }

    bb35: {
        StorageDead(_81);
        StorageDead(_79);
        _77 = <std::result::Result<RefMut<'_, User>, error::ErrorCode> as Try>::branch(move _78) -> [return: bb36, unwind: bb85];
    }

    bb36: {
        StorageDead(_78);
        _82 = discriminant(_77);
        switchInt(move _82) -> [0: bb37, 1: bb38, otherwise: bb4];
    }

    bb37: {
        StorageLive(_86);
        _86 = move ((_77 as Continue).0: std::cell::RefMut<'_, state::user::User>);
        _76 = move _86;
        StorageDead(_86);
        _75 = &mut _76;
        _180 = discriminant(_77);
        StorageDead(_77);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _165 = deref_copy (_1.2: &[anchor_lang::prelude::AccountInfo<'_>]);
        _97 = &(*_165);
        _96 = core::slice::<impl [anchor_lang::prelude::AccountInfo<'_>]>::iter(move _97) -> [return: bb40, unwind: bb84];
    }

    bb38: {
        StorageLive(_83);
        _83 = ((_77 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_85);
        _85 = _83;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _85) -> [return: bb39, unwind: bb89];
    }

    bb39: {
        StorageDead(_85);
        StorageDead(_83);
        _178 = discriminant(_77);
        StorageDead(_77);
        goto -> bb73;
    }

    bb40: {
        StorageDead(_97);
        _95 = <std::slice::Iter<'_, anchor_lang::prelude::AccountInfo<'_>> as Iterator>::peekable(move _96) -> [return: bb41, unwind: bb84];
    }

    bb41: {
        StorageDead(_96);
        _94 = &mut _95;
        _93 = &mut (*_94);
        StorageLive(_98);
        StorageLive(_99);
        StorageLive(_100);
        _100 = BTreeSet::<u16>::new() -> [return: bb42, unwind: bb84];
    }

    bb42: {
        _99 = &_100;
        _98 = &(*_99);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        _104 = _3;
        _103 = get_writable_spot_market_set(move _104) -> [return: bb43, unwind: bb83];
    }

    bb43: {
        StorageDead(_104);
        _102 = &_103;
        _101 = &(*_102);
        StorageLive(_105);
        _105 = (_16.0: u64);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        _166 = deref_copy (*_25);
        _197 = (((_166.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _109 = &(*_197);
        _108 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _109) -> [return: bb44, unwind: bb82];
    }

    bb44: {
        StorageDead(_109);
        _107 = ((*_108).7: state::state::OracleGuardRails);
        _106 = Option::<state::state::OracleGuardRails>::Some(move _107);
        StorageDead(_107);
        _92 = load_maps(move _93, move _98, move _101, move _105, move _106) -> [return: bb45, unwind: bb82];
    }

    bb45: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_101);
        StorageDead(_98);
        StorageDead(_93);
        _91 = <std::result::Result<AccountMaps<'_>, error::ErrorCode> as Try>::branch(move _92) -> [return: bb46, unwind: bb82];
    }

    bb46: {
        StorageDead(_92);
        _110 = discriminant(_91);
        switchInt(move _110) -> [0: bb47, 1: bb48, otherwise: bb4];
    }

    bb47: {
        StorageLive(_114);
        _114 = move ((_91 as Continue).0: instructions::optional_accounts::AccountMaps<'_>);
        _90 = move _114;
        StorageDead(_114);
        StorageLive(_87);
        _87 = move (_90.0: state::perp_market_map::PerpMarketMap<'_>);
        StorageLive(_88);
        _88 = move (_90.1: state::spot_market_map::SpotMarketMap<'_>);
        StorageLive(_89);
        _89 = move (_90.2: state::oracle_map::OracleMap<'_>);
        _184 = discriminant(_91);
        StorageDead(_108);
        drop(_103) -> [return: bb50, unwind: bb78];
    }

    bb48: {
        StorageLive(_111);
        _111 = ((_91 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb49, unwind: bb88];
    }

    bb49: {
        StorageDead(_113);
        StorageDead(_111);
        _182 = discriminant(_91);
        StorageDead(_108);
        drop(_103) -> [return: bb70, unwind: bb83];
    }

    bb50: {
        StorageDead(_103);
        StorageDead(_102);
        drop(_100) -> [return: bb51, unwind: bb79];
    }

    bb51: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        _118 = _2;
        StorageLive(_119);
        _119 = _3;
        StorageLive(_120);
        _120 = _4;
        StorageLive(_121);
        _121 = _5;
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &mut (*_63);
        _123 = <RefMut<'_, User> as DerefMut>::deref_mut(move _124) -> [return: bb52, unwind: bb79];
    }

    bb52: {
        _122 = &mut (*_123);
        StorageDead(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &_26;
        _125 = &(*_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        _129 = &mut (*_75);
        _128 = <RefMut<'_, User> as DerefMut>::deref_mut(move _129) -> [return: bb53, unwind: bb79];
    }

    bb53: {
        _127 = &mut (*_128);
        StorageDead(_129);
        StorageLive(_130);
        StorageLive(_131);
        _131 = &_28;
        _130 = &(*_131);
        StorageLive(_132);
        StorageLive(_133);
        _133 = &_87;
        _132 = &(*_133);
        StorageLive(_134);
        StorageLive(_135);
        _135 = &_88;
        _134 = &(*_135);
        StorageLive(_136);
        StorageLive(_137);
        _137 = &mut _89;
        _136 = &mut (*_137);
        StorageLive(_138);
        _138 = _24;
        StorageLive(_139);
        _139 = (_16.0: u64);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        _167 = deref_copy (*_25);
        _198 = (((_167.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _142 = &(*_198);
        _141 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _142) -> [return: bb54, unwind: bb79];
    }

    bb54: {
        StorageDead(_142);
        _140 = ((*_141).11: u32);
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _168 = deref_copy (*_25);
        _199 = (((_168.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _146 = &(*_199);
        _145 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _146) -> [return: bb55, unwind: bb79];
    }

    bb55: {
        StorageDead(_146);
        _144 = ((*_145).21: u16);
        _143 = move _144 as u128 (IntToInt);
        StorageDead(_144);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _169 = deref_copy (*_25);
        _200 = (((_169.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, state::state::State>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, state::state::State>>).0: *const anchor_lang::prelude::Account<'_, state::state::State>);
        _150 = &(*_200);
        _149 = <anchor_lang::prelude::Account<'_, state::state::State> as Deref>::deref(move _150) -> [return: bb56, unwind: bb79];
    }

    bb56: {
        StorageDead(_150);
        _148 = ((*_149).20: u8);
        _147 = move _148 as u128 (IntToInt);
        StorageDead(_148);
        _117 = controller::liquidation::liquidate_borrow_for_perp_pnl(move _118, move _119, move _120, move _121, move _122, move _125, move _127, move _130, move _132, move _134, move _136, move _138, move _139, move _140, move _143, move _147) -> [return: bb57, unwind: bb79];
    }

    bb57: {
        StorageDead(_147);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_138);
        StorageDead(_136);
        StorageDead(_134);
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_127);
        StorageDead(_125);
        StorageDead(_122);
        StorageDead(_121);
        StorageDead(_120);
        StorageDead(_119);
        StorageDead(_118);
        _116 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _117) -> [return: bb58, unwind: bb79];
    }

    bb58: {
        StorageDead(_117);
        _151 = discriminant(_116);
        switchInt(move _151) -> [0: bb59, 1: bb60, otherwise: bb4];
    }

    bb59: {
        StorageLive(_155);
        _155 = ((_116 as Continue).0: ());
        _115 = _155;
        StorageDead(_155);
        StorageDead(_149);
        StorageDead(_145);
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_156);
        _156 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _156);
        StorageDead(_156);
        drop(_89) -> [return: bb62, unwind: bb80];
    }

    bb60: {
        StorageLive(_152);
        _152 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_154);
        _154 = _152;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _154) -> [return: bb61, unwind: bb79];
    }

    bb61: {
        StorageDead(_154);
        StorageDead(_152);
        StorageDead(_149);
        StorageDead(_145);
        StorageDead(_141);
        StorageDead(_137);
        StorageDead(_135);
        StorageDead(_133);
        StorageDead(_131);
        StorageDead(_128);
        StorageDead(_126);
        StorageDead(_123);
        StorageDead(_116);
        StorageDead(_115);
        drop(_89) -> [return: bb67, unwind: bb80];
    }

    bb62: {
        StorageDead(_89);
        drop(_88) -> [return: bb63, unwind: bb81];
    }

    bb63: {
        StorageDead(_88);
        drop(_87) -> [return: bb64, unwind: bb84];
    }

    bb64: {
        StorageDead(_87);
        drop(_76) -> [return: bb65, unwind: bb85];
    }

    bb65: {
        StorageDead(_76);
        StorageDead(_75);
        drop(_64) -> [return: bb66, unwind: bb87];
    }

    bb66: {
        StorageDead(_64);
        StorageDead(_63);
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_16);
        goto -> bb77;
    }

    bb67: {
        StorageDead(_89);
        drop(_88) -> [return: bb68, unwind: bb81];
    }

    bb68: {
        StorageDead(_88);
        drop(_87) -> [return: bb69, unwind: bb84];
    }

    bb69: {
        StorageDead(_87);
        goto -> bb72;
    }

    bb70: {
        StorageDead(_103);
        StorageDead(_102);
        drop(_100) -> [return: bb71, unwind: bb84];
    }

    bb71: {
        StorageDead(_100);
        StorageDead(_99);
        StorageDead(_95);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_90);
        goto -> bb72;
    }

    bb72: {
        drop(_76) -> [return: bb73, unwind: bb85];
    }

    bb73: {
        StorageDead(_76);
        StorageDead(_75);
        drop(_64) -> [return: bb74, unwind: bb87];
    }

    bb74: {
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb75;
    }

    bb75: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb76;
    }

    bb76: {
        StorageDead(_16);
        goto -> bb77;
    }

    bb77: {
        return;
    }

    bb78 (cleanup): {
        drop(_100) -> [return: bb79, unwind terminate(cleanup)];
    }

    bb79 (cleanup): {
        drop(_89) -> [return: bb80, unwind terminate(cleanup)];
    }

    bb80 (cleanup): {
        drop(_88) -> [return: bb81, unwind terminate(cleanup)];
    }

    bb81 (cleanup): {
        drop(_87) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_103) -> [return: bb83, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_100) -> [return: bb84, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_76) -> [return: bb85, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_64) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_43) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        resume;
    }

    bb88 (cleanup): {
        _191 = discriminant(_91);
        goto -> bb82;
    }

    bb89 (cleanup): {
        _192 = discriminant(_77);
        goto -> bb85;
    }

    bb90 (cleanup): {
        _193 = discriminant(_65);
        goto -> bb87;
    }

    bb91 (cleanup): {
        _194 = discriminant(_17);
        goto -> bb87;
    }

    bb92 (cleanup): {
        _195 = discriminant(_7);
        goto -> bb87;
    }
}
