digraph Mir_0_1453 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn get_whitelist_token::{closure#0}(_1: Closure(DefId(0:1453 ~ drift[d311]::instructions::optional_accounts::get_whitelist_token::{closure#0}), [i32, Binder(extern &quot;RustCall&quot; fn((anchor_lang::error::Error,)) -&gt; error::ErrorCode, []), ()]), _2: anchor_lang::error::Error) -&gt; error::ErrorCode<br align="left"/>let _3: ();<br align="left"/>let mut _4: &amp;ReErased str;<br align="left"/>let _5: &amp;ReErased str;<br align="left"/>let _6: ();<br align="left"/>let mut _7: &amp;ReErased str;<br align="left"/>let _8: &amp;ReErased str;<br align="left"/>let mut _9: &amp;ReErased std::string::String;<br align="left"/>let _10: &amp;ReErased std::string::String;<br align="left"/>let _11: std::string::String;<br align="left"/>let _12: std::string::String;<br align="left"/>let mut _13: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _14: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _15: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _16: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>let _17: [&amp;ReErased str; 1_usize];<br align="left"/>let mut _18: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _19: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _20: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let _21: [core::fmt::rt::Argument&lt;ReErased&gt;; 1_usize];<br align="left"/>let mut _22: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _23: &amp;ReErased anchor_lang::error::Error;<br align="left"/>let _24: &amp;ReErased anchor_lang::error::Error;<br align="left"/>let mut _25: &amp;ReErased [&amp;ReErased str; 1_usize];<br align="left"/>debug e =&gt; _2;<br align="left"/>debug res =&gt; _12;<br align="left"/>>;
    bb0__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_3)<br/>StorageLive(_4)<br/>StorageLive(_5)<br/>_5 = const &quot;Unable to deserialize whitelist token&quot;<br/>_4 = &amp;(*_5)<br/></td></tr><tr><td align="left">_3 = solana_program::log::sol_log(move _4)</td></tr></table>>];
    bb1__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_4)<br/>StorageDead(_5)<br/>StorageDead(_3)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>StorageLive(_13)<br/>StorageLive(_14)<br/>StorageLive(_15)<br/>StorageLive(_16)<br/>_25 = const _<br/>_16 = &amp;(*_25)<br/>_15 = &amp;(*_16)<br/>_14 = move _15 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_15)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>StorageLive(_22)<br/>StorageLive(_23)<br/>StorageLive(_24)<br/>_24 = &amp;_2<br/>_23 = &amp;(*_24)<br/></td></tr><tr><td align="left">_22 = core::fmt::rt::Argument::&lt;'_&gt;::new_debug::&lt;anchor_lang::error::Error&gt;(move _23)</td></tr></table>>];
    bb2__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>_21 = [move _22]<br/>StorageDead(_22)<br/>_20 = &amp;_21<br/>_19 = &amp;(*_20)<br/>_18 = move _19 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">_13 = Arguments::&lt;'_&gt;::new_v1(move _14, move _18)</td></tr></table>>];
    bb3__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_14)<br/></td></tr><tr><td align="left">_12 = format(move _13)</td></tr></table>>];
    bb4__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>StorageDead(_20)<br/>StorageDead(_16)<br/>_11 = move _12<br/>StorageDead(_12)<br/>_10 = &amp;_11<br/>_9 = &amp;(*_10)<br/></td></tr><tr><td align="left">_8 = &lt;String as Deref&gt;::deref(move _9)</td></tr></table>>];
    bb5__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">_7 = &amp;(*_8)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">_6 = solana_program::log::sol_log(move _7)</td></tr></table>>];
    bb6__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageDead(_7)<br/></td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb7__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/>StorageDead(_10)<br/>StorageDead(_8)<br/>StorageDead(_6)<br/>_0 = error::ErrorCode::InvalidWhitelistToken<br/></td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb8__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left">return</td></tr></table>>];
    bb9__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">9 (cleanup)</td></tr><tr><td align="left">drop(_11)</td></tr></table>>];
    bb10__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">10 (cleanup)</td></tr><tr><td align="left">drop(_2)</td></tr></table>>];
    bb11__0_1453 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">11 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_1453 -> bb1__0_1453 [label="return"];
    bb0__0_1453 -> bb10__0_1453 [label="unwind"];
    bb1__0_1453 -> bb2__0_1453 [label="return"];
    bb1__0_1453 -> bb10__0_1453 [label="unwind"];
    bb2__0_1453 -> bb3__0_1453 [label="return"];
    bb2__0_1453 -> bb10__0_1453 [label="unwind"];
    bb3__0_1453 -> bb4__0_1453 [label="return"];
    bb3__0_1453 -> bb10__0_1453 [label="unwind"];
    bb4__0_1453 -> bb5__0_1453 [label="return"];
    bb4__0_1453 -> bb9__0_1453 [label="unwind"];
    bb5__0_1453 -> bb6__0_1453 [label="return"];
    bb5__0_1453 -> bb9__0_1453 [label="unwind"];
    bb6__0_1453 -> bb7__0_1453 [label="return"];
    bb6__0_1453 -> bb10__0_1453 [label="unwind"];
    bb7__0_1453 -> bb8__0_1453 [label="return"];
    bb7__0_1453 -> bb11__0_1453 [label="unwind"];
    bb9__0_1453 -> bb10__0_1453 [label="return"];
    bb10__0_1453 -> bb11__0_1453 [label="return"];
}
