// MIR for `instructions::user::handle_initialize_fuel_overflow` before PreCodegen

fn instructions::user::handle_initialize_fuel_overflow(_1: anchor_lang::context::Context<'_, '_, '_, '_, instructions::user::InitializeFuelOverflow<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: std::cell::RefMut<'_, state::user::UserStats>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::UserStats>>;
    let mut _4: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, error::ErrorCode>;
    let mut _5: std::result::Result<std::cell::RefMut<'_, state::user::UserStats>, anchor_lang::error::Error>;
    let mut _6: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let _7: &anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>;
    let mut _8: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _9: isize;
    let _10: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _11: !;
    let mut _12: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _13: std::cell::RefMut<'_, state::user::UserStats>;
    let _14: ();
    let mut _15: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _16: std::result::Result<(), error::ErrorCode>;
    let mut _17: bool;
    let mut _18: &state::user::UserStats;
    let _19: &state::user::UserStats;
    let mut _20: &std::cell::RefMut<'_, state::user::UserStats>;
    let mut _21: ();
    let _23: ();
    let mut _24: &str;
    let _25: &str;
    let mut _26: &std::string::String;
    let _27: &std::string::String;
    let _28: std::string::String;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[&str; 2];
    let _33: &[&str; 2];
    let _34: [&str; 2];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let mut _36: &[core::fmt::rt::Argument<'_>; 1];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let mut _40: &error::ErrorCode;
    let _41: &error::ErrorCode;
    let _42: ();
    let mut _43: &str;
    let _44: &str;
    let mut _45: error::ErrorCode;
    let mut _46: isize;
    let mut _48: !;
    let mut _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::user::FuelOverflow>>;
    let mut _53: std::result::Result<std::cell::RefMut<'_, state::user::FuelOverflow>, error::ErrorCode>;
    let mut _54: std::result::Result<std::cell::RefMut<'_, state::user::FuelOverflow>, anchor_lang::error::Error>;
    let mut _55: &anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>;
    let mut _56: std::result::Result<std::cell::RefMut<'_, state::user::FuelOverflow>, error::ErrorCode>;
    let mut _57: error::ErrorCode;
    let mut _58: isize;
    let mut _60: !;
    let mut _61: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _63: state::user::FuelOverflow;
    let mut _64: anchor_lang::prelude::Pubkey;
    let mut _65: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _66: state::user::FuelOverflow;
    let mut _67: &mut state::user::FuelOverflow;
    let mut _68: &mut std::cell::RefMut<'_, state::user::FuelOverflow>;
    let _69: ();
    let mut _70: &mut state::user::UserStats;
    let mut _71: &mut state::user::UserStats;
    let mut _72: &mut std::cell::RefMut<'_, state::user::UserStats>;
    let mut _73: ();
    let mut _75: &mut instructions::user::InitializeFuelOverflow<'_>;
    let mut _76: &mut instructions::user::InitializeFuelOverflow<'_>;
    let mut _77: &mut instructions::user::InitializeFuelOverflow<'_>;
    let mut _78: isize;
    let mut _79: isize;
    let mut _80: isize;
    let mut _81: isize;
    let mut _82: isize;
    let mut _83: isize;
    let mut _84: isize;
    let mut _85: isize;
    let mut _86: isize;
    let mut _87: isize;
    scope 1 {
        debug user_stats => _2;
        let _22: error::ErrorCode;
        let _47: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _50: ();
        let mut _51: std::cell::RefMut<'_, state::user::FuelOverflow>;
        let _59: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _62: std::cell::RefMut<'_, state::user::FuelOverflow>;
        scope 6 {
            debug error_code => _22;
            let _29: std::string::String;
            let mut _74: &[&str; 2];
            scope 7 {
                debug res => _29;
            }
        }
        scope 8 {
            debug residual => _47;
            scope 9 {
            }
        }
        scope 10 {
            debug val => _50;
            scope 11 {
            }
        }
        scope 12 {
            debug fuel_overflow => _51;
        }
        scope 13 {
            debug residual => _59;
            scope 14 {
            }
        }
        scope 15 {
            debug val => _62;
            scope 16 {
            }
        }
    }
    scope 2 {
        debug residual => _10;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _13;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _75 = deref_copy (_1.1: &mut instructions::user::InitializeFuelOverflow<'_>);
        _7 = &((*_75).1: anchor_lang::prelude::AccountLoader<'_, state::user::UserStats>);
        _6 = &(*_7);
        _5 = anchor_lang::prelude::AccountLoader::<'_, UserStats>::load_mut(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_6);
        StorageLive(_8);
        _8 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _4 = std::result::Result::<RefMut<'_, UserStats>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _5, move _8) -> [return: bb2, unwind: bb43];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_5);
        _3 = <std::result::Result<RefMut<'_, UserStats>, error::ErrorCode> as Try>::branch(move _4) -> [return: bb3, unwind: bb43];
    }

    bb3: {
        StorageDead(_4);
        _9 = discriminant(_3);
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_13);
        _13 = move ((_3 as Continue).0: std::cell::RefMut<'_, state::user::UserStats>);
        _2 = move _13;
        StorageDead(_13);
        _80 = discriminant(_3);
        StorageDead(_7);
        StorageDead(_3);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &_2;
        _19 = <RefMut<'_, UserStats> as Deref>::deref(move _20) -> [return: bb8, unwind: bb42];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_10);
        _10 = ((_3 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_12);
        _12 = _10;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _12) -> [return: bb7, unwind: bb45];
    }

    bb7: {
        StorageDead(_12);
        StorageDead(_10);
        _78 = discriminant(_3);
        StorageDead(_7);
        StorageDead(_3);
        goto -> bb38;
    }

    bb8: {
        _18 = &(*_19);
        StorageDead(_20);
        _17 = UserStats::can_sweep_fuel(move _18) -> [return: bb9, unwind: bb42];
    }

    bb9: {
        switchInt(move _17) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_21);
        _21 = ();
        _16 = std::result::Result::<(), error::ErrorCode>::Ok(move _21);
        StorageDead(_21);
        goto -> bb19;
    }

    bb11: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_22);
        _22 = error::ErrorCode::UserFuelOverflowThresholdNotMet;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        _74 = const _;
        _33 = &(*_74);
        _32 = &(*_33);
        _31 = move _32 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_32);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_22;
        _40 = &(*_41);
        _39 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _40) -> [return: bb12, unwind: bb42];
    }

    bb12: {
        StorageDead(_40);
        _38 = [move _39];
        StorageDead(_39);
        _37 = &_38;
        _36 = &(*_37);
        _35 = move _36 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_36);
        _30 = Arguments::<'_>::new_v1(move _31, move _35) -> [return: bb13, unwind: bb42];
    }

    bb13: {
        StorageDead(_35);
        StorageDead(_31);
        _29 = format(move _30) -> [return: bb14, unwind: bb42];
    }

    bb14: {
        StorageDead(_30);
        StorageDead(_41);
        StorageDead(_38);
        StorageDead(_37);
        StorageDead(_33);
        _28 = move _29;
        StorageDead(_29);
        _27 = &_28;
        _26 = &(*_27);
        _25 = <String as Deref>::deref(move _26) -> [return: bb15, unwind: bb41];
    }

    bb15: {
        _24 = &(*_25);
        StorageDead(_26);
        _23 = solana_program::log::sol_log(move _24) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        StorageDead(_24);
        drop(_28) -> [return: bb17, unwind: bb42];
    }

    bb17: {
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_25);
        StorageDead(_23);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        _44 = const "User fuel sweep threshold not met";
        _43 = &(*_44);
        _42 = solana_program::log::sol_log(move _43) -> [return: bb18, unwind: bb42];
    }

    bb18: {
        StorageDead(_43);
        StorageDead(_44);
        StorageDead(_42);
        StorageLive(_45);
        _45 = _22;
        _16 = std::result::Result::<(), error::ErrorCode>::Err(move _45);
        StorageDead(_45);
        StorageDead(_22);
        goto -> bb19;
    }

    bb19: {
        StorageDead(_17);
        _15 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _16) -> [return: bb20, unwind: bb42];
    }

    bb20: {
        StorageDead(_16);
        _46 = discriminant(_15);
        switchInt(move _46) -> [0: bb21, 1: bb22, otherwise: bb5];
    }

    bb21: {
        StorageLive(_50);
        _50 = ((_15 as Continue).0: ());
        _14 = _50;
        StorageDead(_50);
        StorageDead(_15);
        StorageDead(_14);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        _76 = deref_copy (_1.1: &mut instructions::user::InitializeFuelOverflow<'_>);
        _55 = &((*_76).0: anchor_lang::prelude::AccountLoader<'_, state::user::FuelOverflow>);
        _54 = anchor_lang::prelude::AccountLoader::<'_, FuelOverflow>::load_init(move _55) -> [return: bb24, unwind: bb42];
    }

    bb22: {
        StorageLive(_47);
        _47 = ((_15 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_49);
        _49 = _47;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _49) -> [return: bb23, unwind: bb42];
    }

    bb23: {
        StorageDead(_49);
        StorageDead(_47);
        StorageDead(_15);
        StorageDead(_14);
        goto -> bb37;
    }

    bb24: {
        StorageDead(_55);
        StorageLive(_56);
        StorageLive(_57);
        _57 = error::ErrorCode::UnableToLoadAccountLoader;
        _56 = std::result::Result::<RefMut<'_, FuelOverflow>, error::ErrorCode>::Err(move _57);
        StorageDead(_57);
        _53 = std::result::Result::<RefMut<'_, FuelOverflow>, anchor_lang::error::Error>::or::<error::ErrorCode>(move _54, move _56) -> [return: bb25, unwind: bb42];
    }

    bb25: {
        StorageDead(_56);
        StorageDead(_54);
        _52 = <std::result::Result<RefMut<'_, FuelOverflow>, error::ErrorCode> as Try>::branch(move _53) -> [return: bb26, unwind: bb42];
    }

    bb26: {
        StorageDead(_53);
        _58 = discriminant(_52);
        switchInt(move _58) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_62);
        _62 = move ((_52 as Continue).0: std::cell::RefMut<'_, state::user::FuelOverflow>);
        _51 = move _62;
        StorageDead(_62);
        _84 = discriminant(_52);
        StorageDead(_52);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _77 = deref_copy (_1.1: &mut instructions::user::InitializeFuelOverflow<'_>);
        _65 = &((*_77).2: anchor_lang::prelude::AccountInfo<'_>);
        _64 = <anchor_lang::prelude::AccountInfo<'_> as anchor_lang::Key>::key(move _65) -> [return: bb30, unwind: bb40];
    }

    bb28: {
        StorageLive(_59);
        _59 = ((_52 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_61);
        _61 = _59;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _61) -> [return: bb29, unwind: bb44];
    }

    bb29: {
        StorageDead(_61);
        StorageDead(_59);
        _82 = discriminant(_52);
        StorageDead(_52);
        StorageDead(_51);
        goto -> bb37;
    }

    bb30: {
        StorageDead(_65);
        StorageLive(_66);
        _66 = <FuelOverflow as Default>::default() -> [return: bb31, unwind: bb40];
    }

    bb31: {
        _63 = FuelOverflow { authority: move _64, fuel_insurance: (_66.1: u128), fuel_deposits: (_66.2: u128), fuel_borrows: (_66.3: u128), fuel_positions: (_66.4: u128), fuel_taker: (_66.5: u128), fuel_maker: (_66.6: u128), last_fuel_sweep_ts: (_66.7: u32), last_reset_ts: (_66.8: u32), padding: (_66.9: [u128; 6]) };
        StorageDead(_64);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &mut _51;
        _67 = <RefMut<'_, FuelOverflow> as DerefMut>::deref_mut(move _68) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        StorageDead(_68);
        (*_67) = move _63;
        StorageDead(_63);
        StorageDead(_67);
        StorageDead(_66);
        StorageLive(_69);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &mut _2;
        _71 = <RefMut<'_, UserStats> as DerefMut>::deref_mut(move _72) -> [return: bb33, unwind: bb40];
    }

    bb33: {
        _70 = &mut (*_71);
        StorageDead(_72);
        _69 = UserStats::update_fuel_overflow_status(move _70, const true) -> [return: bb34, unwind: bb40];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_71);
        StorageDead(_69);
        StorageLive(_73);
        _73 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _73);
        StorageDead(_73);
        drop(_51) -> [return: bb35, unwind: bb42];
    }

    bb35: {
        StorageDead(_51);
        drop(_2) -> [return: bb36, unwind: bb43];
    }

    bb36: {
        StorageDead(_2);
        goto -> bb39;
    }

    bb37: {
        drop(_2) -> [return: bb38, unwind: bb43];
    }

    bb38: {
        StorageDead(_2);
        goto -> bb39;
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_51) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb41 (cleanup): {
        drop(_28) -> [return: bb42, unwind terminate(cleanup)];
    }

    bb42 (cleanup): {
        drop(_2) -> [return: bb43, unwind terminate(cleanup)];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44 (cleanup): {
        _86 = discriminant(_52);
        goto -> bb42;
    }

    bb45 (cleanup): {
        _87 = discriminant(_3);
        goto -> bb43;
    }
}
