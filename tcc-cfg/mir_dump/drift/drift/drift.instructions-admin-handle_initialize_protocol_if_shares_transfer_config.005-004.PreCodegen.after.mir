// MIR for `admin::handle_initialize_protocol_if_shares_transfer_config` after PreCodegen

fn admin::handle_initialize_protocol_if_shares_transfer_config(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::InitializeProtocolIfSharesTransferConfig<'_>>) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let mut _2: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _3: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>, std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>>;
    let mut _4: std::result::Result<std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>, anchor_lang::error::Error>;
    let mut _5: &anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _6: isize;
    let _7: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _8: !;
    let mut _9: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _10: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _12: anchor_lang::prelude::Clock;
    let mut _13: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>, anchor_lang::prelude::Clock>;
    let mut _14: std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError>;
    let mut _15: isize;
    let mut _17: !;
    let mut _18: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
    let _20: ();
    let mut _21: &str;
    let _22: &str;
    let mut _23: &std::string::String;
    let _24: &std::string::String;
    let _25: std::string::String;
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let mut _29: &[&str; 2];
    let _30: &[&str; 2];
    let _31: [&str; 2];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let mut _33: &[core::fmt::rt::Argument<'_>; 2];
    let _34: &[core::fmt::rt::Argument<'_>; 2];
    let _35: [core::fmt::rt::Argument<'_>; 2];
    let mut _36: core::fmt::rt::Argument<'_>;
    let mut _37: &i64;
    let _38: &i64;
    let _39: &state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _40: &std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _41: core::fmt::rt::Argument<'_>;
    let mut _42: &i64;
    let _43: &i64;
    let _44: i64;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _46: std::result::Result<i64, error::ErrorCode>;
    let mut _47: i64;
    let mut _48: isize;
    let mut _50: !;
    let mut _51: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _53: i64;
    let mut _54: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _55: std::result::Result<i64, error::ErrorCode>;
    let mut _56: i64;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: &mut state::insurance_fund_stake::ProtocolIfSharesTransferConfig;
    let mut _63: &mut std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>;
    let mut _64: ();
    let mut _66: &mut instructions::admin::InitializeProtocolIfSharesTransferConfig<'_>;
    let mut _67: isize;
    let mut _68: isize;
    let mut _69: isize;
    let mut _70: isize;
    let mut _71: isize;
    let mut _72: isize;
    let mut _73: isize;
    let mut _74: isize;
    let mut _75: isize;
    let mut _76: isize;
    scope 1 {
        debug config => _2;
        let _11: i64;
        let _16: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>;
        let _19: anchor_lang::prelude::Clock;
        scope 6 {
            debug now => _11;
            let _26: std::string::String;
            let _49: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _52: i64;
            let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _61: i64;
            let mut _65: &[&str; 2];
            scope 11 {
                debug res => _26;
            }
            scope 12 {
                debug residual => _49;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _52;
                scope 15 {
                }
            }
            scope 16 {
                debug residual => _58;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _61;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _16;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _19;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _7;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _10;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _66 = deref_copy (_1.1: &mut instructions::admin::InitializeProtocolIfSharesTransferConfig<'_>);
        _5 = &((*_66).1: anchor_lang::prelude::AccountLoader<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>);
        _4 = anchor_lang::prelude::AccountLoader::<'_, ProtocolIfSharesTransferConfig>::load_init(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = <std::result::Result<RefMut<'_, ProtocolIfSharesTransferConfig>, anchor_lang::error::Error> as Try>::branch(move _4) -> [return: bb2, unwind: bb37];
    }

    bb2: {
        StorageDead(_4);
        _6 = discriminant(_3);
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_10);
        _10 = move ((_3 as Continue).0: std::cell::RefMut<'_, state::insurance_fund_stake::ProtocolIfSharesTransferConfig>);
        _2 = move _10;
        StorageDead(_10);
        _67 = discriminant(_3);
        StorageDead(_3);
        StorageLive(_11);
        StorageLive(_12);
        StorageLive(_13);
        StorageLive(_14);
        _14 = <anchor_lang::prelude::Clock as anchor_lang::prelude::SolanaSysvar>::get() -> [return: bb7, unwind: bb36];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_7);
        _7 = move ((_3 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_9);
        _9 = move _7;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _9) -> [return: bb6, unwind: bb39];
    }

    bb6: {
        StorageDead(_9);
        StorageDead(_7);
        _73 = discriminant(_3);
        StorageDead(_3);
        goto -> bb33;
    }

    bb7: {
        _13 = <std::result::Result<anchor_lang::prelude::Clock, anchor_lang::prelude::ProgramError> as Try>::branch(move _14) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        StorageDead(_14);
        _15 = discriminant(_13);
        switchInt(move _15) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_19);
        _19 = move ((_13 as Continue).0: anchor_lang::prelude::Clock);
        _12 = move _19;
        StorageDead(_19);
        _11 = (_12.4: i64);
        _69 = discriminant(_13);
        StorageDead(_13);
        StorageDead(_12);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        _65 = const _;
        _30 = &(*_65);
        _29 = &(*_30);
        _28 = move _29 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_29);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        _40 = &_2;
        _39 = <RefMut<'_, ProtocolIfSharesTransferConfig> as Deref>::deref(move _40) -> [return: bb12, unwind: bb36];
    }

    bb10: {
        StorageLive(_16);
        _16 = move ((_13 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::prelude::ProgramError>);
        StorageLive(_18);
        _18 = move _16;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::prelude::ProgramError>>>::from_residual(move _18) -> [return: bb11, unwind: bb38];
    }

    bb11: {
        StorageDead(_18);
        StorageDead(_16);
        _71 = discriminant(_13);
        StorageDead(_13);
        StorageDead(_12);
        goto -> bb32;
    }

    bb12: {
        StorageDead(_40);
        _38 = &((*_39).3: i64);
        _37 = &(*_38);
        _36 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _37) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        StorageDead(_37);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = _11;
        _46 = <i64 as SafeMath>::safe_add(move _47, const _) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        StorageDead(_47);
        _45 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb15, unwind: bb36];
    }

    bb15: {
        StorageDead(_46);
        _48 = discriminant(_45);
        switchInt(move _48) -> [0: bb16, 1: bb17, otherwise: bb4];
    }

    bb16: {
        StorageLive(_52);
        _52 = ((_45 as Continue).0: i64);
        _44 = _52;
        StorageDead(_52);
        _43 = &_44;
        _42 = &(*_43);
        _41 = core::fmt::rt::Argument::<'_>::new_debug::<i64>(move _42) -> [return: bb19, unwind: bb36];
    }

    bb17: {
        StorageLive(_49);
        _49 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_51);
        _51 = _49;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _51) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        StorageDead(_51);
        StorageDead(_49);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_36);
        StorageDead(_33);
        StorageDead(_32);
        StorageDead(_28);
        StorageDead(_27);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_30);
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_21);
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        goto -> bb32;
    }

    bb19: {
        StorageDead(_42);
        _35 = [move _36, move _41];
        StorageDead(_41);
        StorageDead(_36);
        _34 = &_35;
        _33 = &(*_34);
        _32 = move _33 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_33);
        _27 = Arguments::<'_>::new_v1(move _28, move _32) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        StorageDead(_32);
        StorageDead(_28);
        _26 = format(move _27) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        StorageDead(_27);
        StorageDead(_45);
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        StorageDead(_30);
        _25 = move _26;
        StorageDead(_26);
        _24 = &_25;
        _23 = &(*_24);
        _22 = <String as Deref>::deref(move _23) -> [return: bb22, unwind: bb35];
    }

    bb22: {
        _21 = &(*_22);
        StorageDead(_23);
        _20 = solana_program::log::sol_log(move _21) -> [return: bb23, unwind: bb35];
    }

    bb23: {
        StorageDead(_21);
        drop(_25) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        StorageDead(_25);
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_20);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = _11;
        _55 = <i64 as SafeMath>::safe_add(move _56, const _) -> [return: bb25, unwind: bb36];
    }

    bb25: {
        StorageDead(_56);
        _54 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _55) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        StorageDead(_55);
        _57 = discriminant(_54);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb4];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_54 as Continue).0: i64);
        _53 = _61;
        StorageDead(_61);
        StorageLive(_62);
        StorageLive(_63);
        _63 = &mut _2;
        _62 = <RefMut<'_, ProtocolIfSharesTransferConfig> as DerefMut>::deref_mut(move _63) -> [return: bb30, unwind: bb36];
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_54 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind: bb36];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_53);
        StorageDead(_54);
        goto -> bb32;
    }

    bb30: {
        StorageDead(_63);
        ((*_62).3: i64) = move _53;
        StorageDead(_53);
        StorageDead(_62);
        StorageDead(_54);
        StorageLive(_64);
        _64 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _64);
        StorageDead(_64);
        StorageDead(_11);
        drop(_2) -> [return: bb31, unwind: bb37];
    }

    bb31: {
        StorageDead(_2);
        goto -> bb34;
    }

    bb32: {
        StorageDead(_11);
        drop(_2) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        StorageDead(_2);
        goto -> bb34;
    }

    bb34: {
        return;
    }

    bb35 (cleanup): {
        drop(_25) -> [return: bb36, unwind terminate(cleanup)];
    }

    bb36 (cleanup): {
        drop(_2) -> [return: bb37, unwind terminate(cleanup)];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38 (cleanup): {
        _75 = discriminant(_13);
        goto -> bb36;
    }

    bb39 (cleanup): {
        _76 = discriminant(_3);
        goto -> bb37;
    }
}
