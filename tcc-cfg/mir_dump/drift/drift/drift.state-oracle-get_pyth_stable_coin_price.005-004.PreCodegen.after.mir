// MIR for `get_pyth_stable_coin_price` after PreCodegen

fn get_pyth_stable_coin_price(_1: &anchor_lang::prelude::AccountInfo<'_>, _2: u64, _3: &state::oracle::OracleSource) -> std::result::Result<OraclePriceData, error::ErrorCode> {
    debug price_oracle => _1;
    debug clock_slot => _2;
    debug oracle_source => _3;
    let mut _0: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _4: state::oracle::OraclePriceData;
    let mut _5: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, state::oracle::OraclePriceData>;
    let mut _6: std::result::Result<state::oracle::OraclePriceData, error::ErrorCode>;
    let mut _7: &anchor_lang::prelude::AccountInfo<'_>;
    let mut _8: u64;
    let mut _9: &state::oracle::OracleSource;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: state::oracle::OraclePriceData;
    let _18: ();
    let mut _19: bool;
    let mut _20: i64;
    let mut _21: i64;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _23: std::result::Result<i64, error::ErrorCode>;
    let mut _24: i64;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: i64;
    let mut _31: i64;
    let mut _32: i64;
    let mut _33: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, i64>;
    let mut _34: std::result::Result<i64, error::ErrorCode>;
    let mut _35: u64;
    let mut _36: isize;
    let mut _38: !;
    let mut _39: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _41: state::oracle::OraclePriceData;
    scope 1 {
        debug oracle_price_data => _4;
        let _15: i64;
        scope 6 {
            debug price => _15;
            let _16: u64;
            scope 7 {
                debug confidence => _16;
                let _17: i64;
                scope 8 {
                    debug five_bps => _17;
                    let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _29: i64;
                    let _37: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _40: i64;
                    scope 9 {
                        debug residual => _26;
                        scope 10 {
                        }
                    }
                    scope 11 {
                        debug val => _29;
                        scope 12 {
                        }
                    }
                    scope 13 {
                        debug residual => _37;
                        scope 14 {
                        }
                    }
                    scope 15 {
                        debug val => _40;
                        scope 16 {
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _7 = &(*_1);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _9 = &(*_3);
        _6 = get_pyth_price(move _7, move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        _5 = <std::result::Result<OraclePriceData, error::ErrorCode> as Try>::branch(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_6);
        _10 = discriminant(_5);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_5 as Continue).0: state::oracle::OraclePriceData);
        _4 = _14;
        StorageDead(_14);
        StorageDead(_5);
        StorageLive(_15);
        _15 = (_4.0: i64);
        StorageLive(_16);
        _16 = (_4.1: u64);
        StorageLive(_17);
        _17 = const 500_i64;
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _15;
        _23 = <i64 as SafeMath>::safe_sub(move _24, const _) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_5 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_5);
        goto -> bb23;
    }

    bb7: {
        StorageDead(_24);
        _22 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _23) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: i64);
        _21 = _29;
        StorageDead(_29);
        _20 = core::num::<impl i64>::abs(move _21) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        goto -> bb22;
    }

    bb12: {
        StorageDead(_21);
        StorageLive(_30);
        StorageLive(_31);
        _31 = _17;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = _16;
        _34 = <u64 as Cast>::cast::<i64>(move _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_35);
        _33 = <std::result::Result<i64, error::ErrorCode> as Try>::branch(move _34) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_34);
        _36 = discriminant(_33);
        switchInt(move _36) -> [0: bb15, 1: bb16, otherwise: bb4];
    }

    bb15: {
        StorageLive(_40);
        _40 = ((_33 as Continue).0: i64);
        _32 = _40;
        StorageDead(_40);
        _30 = <i64 as Ord>::min(move _31, move _32) -> [return: bb18, unwind continue];
    }

    bb16: {
        StorageLive(_37);
        _37 = ((_33 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_39);
        _39 = _37;
        _0 = <std::result::Result<OraclePriceData, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _39) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_39);
        StorageDead(_37);
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_33);
        StorageDead(_30);
        goto -> bb22;
    }

    bb18: {
        StorageDead(_32);
        StorageDead(_31);
        _19 = Le(move _20, move _30);
        switchInt(move _19) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_22);
        StorageDead(_20);
        (_4.0: i64) = const _;
        _18 = const ();
        goto -> bb21;
    }

    bb20: {
        StorageDead(_33);
        StorageDead(_30);
        StorageDead(_22);
        StorageDead(_20);
        _18 = const ();
        goto -> bb21;
    }

    bb21: {
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_41);
        _41 = _4;
        _0 = std::result::Result::<OraclePriceData, error::ErrorCode>::Ok(move _41);
        StorageDead(_41);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        StorageDead(_4);
        goto -> bb24;
    }

    bb22: {
        StorageDead(_22);
        StorageDead(_20);
        StorageDead(_19);
        StorageDead(_18);
        StorageDead(_17);
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb23;
    }

    bb23: {
        StorageDead(_4);
        goto -> bb24;
    }

    bb24: {
        return;
    }
}
