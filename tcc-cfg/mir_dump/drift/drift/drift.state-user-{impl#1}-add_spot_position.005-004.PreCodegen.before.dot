digraph Mir_0_4286 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn User::add_spot_position(_1: &amp;ReErased mut state::user::User, _2: u16, _3: state::spot_market::SpotBalanceType) -&gt; std::result::Result&lt;usize, error::ErrorCode&gt;<br align="left"/>let _4: usize;<br align="left"/>let mut _5: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, usize&gt;;<br align="left"/>let mut _6: std::result::Result&lt;usize, error::ErrorCode&gt;;<br align="left"/>let mut _7: std::option::Option&lt;usize&gt;;<br align="left"/>let mut _8: &amp;ReErased mut std::iter::Enumerate&lt;std::slice::Iter&lt;ReErased, state::user::SpotPosition&gt;&gt;;<br align="left"/>let mut _9: std::iter::Enumerate&lt;std::slice::Iter&lt;ReErased, state::user::SpotPosition&gt;&gt;;<br align="left"/>let mut _10: std::slice::Iter&lt;ReErased, state::user::SpotPosition&gt;;<br align="left"/>let mut _11: &amp;ReErased [state::user::SpotPosition];<br align="left"/>let mut _12: &amp;ReErased [state::user::SpotPosition; 8_usize];<br align="left"/>let mut _13: Closure(DefId(0:4287 ~ drift[d311]::state::user::{impl#1}::add_spot_position::{closure#0}), [i16, Binder(extern &quot;RustCall&quot; fn(((usize, &amp;ReErased state::user::SpotPosition),)) -&gt; bool, []), ()]);<br align="left"/>let mut _14: error::ErrorCode;<br align="left"/>let mut _15: isize;<br align="left"/>let _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _17: !;<br align="left"/>let mut _18: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _19: usize;<br align="left"/>let _20: state::user::SpotPosition;<br align="left"/>let mut _21: u16;<br align="left"/>let mut _22: state::spot_market::SpotBalanceType;<br align="left"/>let mut _23: state::user::SpotPosition;<br align="left"/>let mut _24: state::user::SpotPosition;<br align="left"/>let _25: usize;<br align="left"/>let mut _26: usize;<br align="left"/>let mut _27: bool;<br align="left"/>let mut _28: usize;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug market_index =&gt; _2;<br align="left"/>debug balance_type =&gt; _3;<br align="left"/>debug new_spot_position_index =&gt; _4;<br align="left"/>debug residual =&gt; _16;<br align="left"/>debug val =&gt; _19;<br align="left"/>debug new_spot_position =&gt; _20;<br align="left"/>>;
    bb0__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>StorageLive(_7)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>StorageLive(_12)<br/>_12 = &amp;((*_1).3: [state::user::SpotPosition; 8])<br/>_11 = move _12 as &amp;[state::user::SpotPosition] (PointerCoercion(Unsize))<br/>StorageDead(_12)<br/></td></tr><tr><td align="left">_10 = core::slice::&lt;impl [SpotPosition]&gt;::iter(move _11)</td></tr></table>>];
    bb1__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::slice::Iter&lt;'_, SpotPosition&gt; as Iterator&gt;::enumerate(move _10)</td></tr></table>>];
    bb2__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">_8 = &amp;mut _9<br/>StorageDead(_10)<br/>StorageLive(_13)<br/>_13 = {closure@programs/drift/src/state/user.rs:215:23: 215:47}<br/></td></tr><tr><td align="left">_7 = &lt;Enumerate&lt;std::slice::Iter&lt;'_, SpotPosition&gt;&gt; as Iterator&gt;::position::&lt;{closure@programs/drift/src/state/user.rs:215:23: 215:47}&gt;(move _8, move _13)</td></tr></table>>];
    bb3__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_13)<br/>StorageDead(_8)<br/>StorageLive(_14)<br/>_14 = error::ErrorCode::NoSpotPositionAvailable<br/></td></tr><tr><td align="left">_6 = Option::&lt;usize&gt;::ok_or::&lt;error::ErrorCode&gt;(move _7, move _14)</td></tr></table>>];
    bb4__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_14)<br/>StorageDead(_7)<br/></td></tr><tr><td align="left">_5 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as Try&gt;::branch(move _6)</td></tr></table>>];
    bb5__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_15 = discriminant(_5)<br/></td></tr><tr><td align="left">switchInt(move _15)</td></tr></table>>];
    bb6__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_19)<br/>_19 = ((_5 as Continue).0: usize)<br/>_4 = _19<br/>StorageDead(_19)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _2<br/>StorageLive(_22)<br/>_22 = _3<br/>StorageLive(_23)<br/></td></tr><tr><td align="left">_23 = &lt;SpotPosition as Default&gt;::default()</td></tr></table>>];
    bb7__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_5 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_18)<br/>_18 = _16<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;usize, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _18)</td></tr></table>>];
    bb9__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/>StorageDead(_16)<br/>StorageDead(_9)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">_20 = SpotPosition { scaled_balance: (_23.0: u64), open_bids: (_23.1: i64), open_asks: (_23.2: i64), cumulative_deposits: (_23.3: i64), market_index: move _21, balance_type: move _22, open_orders: (_23.6: u8), padding: (_23.7: [u8; 4]) }<br/>StorageDead(_22)<br/>StorageDead(_21)<br/>StorageDead(_23)<br/>StorageLive(_24)<br/>_24 = _20<br/>StorageLive(_25)<br/>_25 = _4<br/>_26 = Len(((*_1).3: [state::user::SpotPosition; 8]))<br/>_27 = Lt(_25, _26)<br/></td></tr><tr><td align="left">assert(move _27, &quot;index out of bounds: the length is {} but the index is {}&quot;, move _26, _25)</td></tr></table>>];
    bb11__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">((*_1).3: [state::user::SpotPosition; 8])[_25] = move _24<br/>StorageDead(_24)<br/>StorageDead(_25)<br/>StorageLive(_28)<br/>_28 = _4<br/>_0 = std::result::Result::&lt;usize, error::ErrorCode&gt;::Ok(move _28)<br/>StorageDead(_28)<br/>StorageDead(_20)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb12__0_4286 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4286 -> bb1__0_4286 [label="return"];
    bb1__0_4286 -> bb2__0_4286 [label="return"];
    bb2__0_4286 -> bb3__0_4286 [label="return"];
    bb3__0_4286 -> bb4__0_4286 [label="return"];
    bb4__0_4286 -> bb5__0_4286 [label="return"];
    bb5__0_4286 -> bb6__0_4286 [label="0"];
    bb5__0_4286 -> bb8__0_4286 [label="1"];
    bb5__0_4286 -> bb7__0_4286 [label="otherwise"];
    bb6__0_4286 -> bb10__0_4286 [label="return"];
    bb8__0_4286 -> bb9__0_4286 [label="return"];
    bb9__0_4286 -> bb12__0_4286 [label=""];
    bb10__0_4286 -> bb11__0_4286 [label="success"];
    bb11__0_4286 -> bb12__0_4286 [label=""];
}
