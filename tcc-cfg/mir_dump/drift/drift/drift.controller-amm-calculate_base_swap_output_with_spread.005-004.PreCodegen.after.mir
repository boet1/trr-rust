// MIR for `calculate_base_swap_output_with_spread` after PreCodegen

fn calculate_base_swap_output_with_spread(_1: &AMM, _2: u64, _3: SwapDirection) -> std::result::Result<(u128, u128, u64, u64), error::ErrorCode> {
    debug amm => _1;
    debug base_asset_swap_amount => _2;
    debug direction => _3;
    let mut _0: std::result::Result<(u128, u128, u64, u64), error::ErrorCode>;
    let _4: u128;
    let _5: u128;
    let mut _6: (u128, u128);
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _8: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _9: &state::perp_market::AMM;
    let mut _10: controller::position::PositionDirection;
    let mut _11: isize;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: (u128, u128);
    let mut _18: (u128, u128);
    let mut _19: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _20: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _21: u128;
    let mut _22: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _23: std::result::Result<u128, error::ErrorCode>;
    let mut _24: u64;
    let mut _25: isize;
    let mut _27: !;
    let mut _28: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _30: u128;
    let mut _31: controller::amm::SwapDirection;
    let mut _32: u128;
    let mut _33: isize;
    let mut _35: !;
    let mut _36: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _39: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _40: std::result::Result<u128, error::ErrorCode>;
    let mut _41: u128;
    let mut _42: u128;
    let mut _43: controller::amm::SwapDirection;
    let mut _44: u128;
    let mut _45: isize;
    let mut _47: !;
    let mut _48: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _52: (u128, u128);
    let mut _53: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, (u128, u128)>;
    let mut _54: std::result::Result<(u128, u128), error::ErrorCode>;
    let mut _55: u128;
    let mut _56: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _57: std::result::Result<u128, error::ErrorCode>;
    let mut _58: u64;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: u128;
    let mut _65: controller::amm::SwapDirection;
    let mut _66: u128;
    let mut _67: isize;
    let mut _69: !;
    let mut _70: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u128>;
    let mut _74: std::result::Result<u128, error::ErrorCode>;
    let mut _75: u128;
    let mut _76: u128;
    let mut _77: controller::amm::SwapDirection;
    let mut _78: isize;
    let mut _79: u128;
    let mut _80: u128;
    let mut _81: bool;
    let mut _82: &controller::amm::SwapDirection;
    let mut _83: &controller::amm::SwapDirection;
    let _84: controller::amm::SwapDirection;
    let mut _85: isize;
    let mut _87: !;
    let mut _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _90: (u128, u128, u64, u64);
    let mut _91: u128;
    let mut _92: u128;
    let mut _93: u64;
    let mut _94: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _95: std::result::Result<u64, error::ErrorCode>;
    let mut _96: u128;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: u64;
    let mut _103: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _104: std::result::Result<u64, error::ErrorCode>;
    let mut _105: u128;
    let mut _106: isize;
    let mut _108: !;
    let mut _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    scope 1 {
        debug base_asset_reserve_with_spread => _4;
        debug quote_asset_reserve_with_spread => _5;
        let _17: u128;
        let _26: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _29: u128;
        let _34: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _37: (u128, u128);
        scope 6 {
            debug new_quote_asset_reserve_with_spread => _17;
            let _38: u128;
            let _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _49: u128;
            scope 15 {
                debug quote_asset_amount => _38;
                let _50: u128;
                let _51: u128;
                let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _63: u128;
                let _68: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _71: (u128, u128);
                scope 20 {
                    debug new_quote_asset_reserve => _50;
                    debug new_base_asset_reserve => _51;
                    let _72: u128;
                    let _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _89: u128;
                    let mut _111: &controller::amm::SwapDirection;
                    scope 29 {
                        debug quote_asset_amount_surplus => _72;
                        let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _101: u64;
                        let _107: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _110: u64;
                        scope 34 {
                            debug residual => _98;
                            scope 35 {
                            }
                        }
                        scope 36 {
                            debug val => _101;
                            scope 37 {
                            }
                        }
                        scope 38 {
                            debug residual => _107;
                            scope 39 {
                            }
                        }
                        scope 40 {
                            debug val => _110;
                            scope 41 {
                            }
                        }
                    }
                    scope 30 {
                        debug residual => _86;
                        scope 31 {
                        }
                    }
                    scope 32 {
                        debug val => _89;
                        scope 33 {
                        }
                    }
                }
                scope 21 {
                    debug residual => _60;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _63;
                    scope 24 {
                    }
                }
                scope 25 {
                    debug residual => _68;
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _71;
                    scope 28 {
                    }
                }
            }
            scope 16 {
                debug residual => _46;
                scope 17 {
                }
            }
            scope 18 {
                debug val => _49;
                scope 19 {
                }
            }
        }
        scope 7 {
            debug residual => _26;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _29;
            scope 10 {
            }
        }
        scope 11 {
            debug residual => _34;
            scope 12 {
            }
        }
        scope 13 {
            debug val => _37;
            scope 14 {
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &(*_1);
        StorageLive(_10);
        _11 = discriminant(_3);
        switchInt(move _11) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _10 = controller::position::PositionDirection::Long;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _10 = controller::position::PositionDirection::Short;
        goto -> bb4;
    }

    bb4: {
        _8 = get_spread_reserves(move _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_10);
        StorageDead(_9);
        _7 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb7, 1: bb8, otherwise: bb2];
    }

    bb7: {
        StorageLive(_16);
        _16 = ((_7 as Continue).0: (u128, u128));
        _6 = _16;
        StorageDead(_16);
        StorageLive(_4);
        _4 = (_6.0: u128);
        StorageLive(_5);
        _5 = (_6.1: u128);
        StorageDead(_7);
        StorageDead(_6);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        StorageLive(_23);
        StorageLive(_24);
        _24 = _2;
        _23 = <u64 as Cast>::cast::<u128>(move _24) -> [return: bb10, unwind continue];
    }

    bb8: {
        StorageLive(_13);
        _13 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb9, unwind continue];
    }

    bb9: {
        StorageDead(_15);
        StorageDead(_13);
        StorageDead(_7);
        StorageDead(_6);
        goto -> bb59;
    }

    bb10: {
        StorageDead(_24);
        _22 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_23);
        _25 = discriminant(_22);
        switchInt(move _25) -> [0: bb12, 1: bb13, otherwise: bb2];
    }

    bb12: {
        StorageLive(_29);
        _29 = ((_22 as Continue).0: u128);
        _21 = _29;
        StorageDead(_29);
        StorageLive(_30);
        _30 = _4;
        StorageLive(_31);
        _31 = _3;
        StorageLive(_32);
        _32 = ((*_1).10: u128);
        _20 = calculate_swap_output(move _21, move _30, move _31, move _32) -> [return: bb15, unwind continue];
    }

    bb13: {
        StorageLive(_26);
        _26 = ((_22 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_28);
        _28 = _26;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        StorageDead(_28);
        StorageDead(_26);
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb57;
    }

    bb15: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_30);
        StorageDead(_21);
        _19 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _20) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_20);
        _33 = discriminant(_19);
        switchInt(move _33) -> [0: bb17, 1: bb18, otherwise: bb2];
    }

    bb17: {
        StorageLive(_37);
        _37 = ((_19 as Continue).0: (u128, u128));
        _18 = _37;
        StorageDead(_37);
        StorageLive(_17);
        _17 = (_18.0: u128);
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = _5;
        StorageLive(_42);
        _42 = _17;
        StorageLive(_43);
        _43 = _3;
        StorageLive(_44);
        _44 = ((*_1).11: u128);
        _40 = calculate_quote_asset_amount_swapped(move _41, move _42, move _43, move _44) -> [return: bb20, unwind continue];
    }

    bb18: {
        StorageLive(_34);
        _34 = ((_19 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_36);
        _36 = _34;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _36) -> [return: bb19, unwind continue];
    }

    bb19: {
        StorageDead(_36);
        StorageDead(_34);
        goto -> bb57;
    }

    bb20: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_42);
        StorageDead(_41);
        _39 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _40) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_40);
        _45 = discriminant(_39);
        switchInt(move _45) -> [0: bb22, 1: bb23, otherwise: bb2];
    }

    bb22: {
        StorageLive(_49);
        _49 = ((_39 as Continue).0: u128);
        _38 = _49;
        StorageDead(_49);
        StorageDead(_39);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        _58 = _2;
        _57 = <u64 as Cast>::cast::<u128>(move _58) -> [return: bb25, unwind continue];
    }

    bb23: {
        StorageLive(_46);
        _46 = ((_39 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_48);
        _48 = _46;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _48) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_48);
        StorageDead(_46);
        StorageDead(_39);
        goto -> bb56;
    }

    bb25: {
        StorageDead(_58);
        _56 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _57) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_57);
        _59 = discriminant(_56);
        switchInt(move _59) -> [0: bb27, 1: bb28, otherwise: bb2];
    }

    bb27: {
        StorageLive(_63);
        _63 = ((_56 as Continue).0: u128);
        _55 = _63;
        StorageDead(_63);
        StorageLive(_64);
        _64 = ((*_1).5: u128);
        StorageLive(_65);
        _65 = _3;
        StorageLive(_66);
        _66 = ((*_1).10: u128);
        _54 = calculate_swap_output(move _55, move _64, move _65, move _66) -> [return: bb30, unwind continue];
    }

    bb28: {
        StorageLive(_60);
        _60 = ((_56 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_62);
        StorageDead(_60);
        StorageDead(_55);
        StorageDead(_54);
        goto -> bb55;
    }

    bb30: {
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_64);
        StorageDead(_55);
        _53 = <std::result::Result<(u128, u128), error::ErrorCode> as Try>::branch(move _54) -> [return: bb31, unwind continue];
    }

    bb31: {
        StorageDead(_54);
        _67 = discriminant(_53);
        switchInt(move _67) -> [0: bb32, 1: bb33, otherwise: bb2];
    }

    bb32: {
        StorageLive(_71);
        _71 = ((_53 as Continue).0: (u128, u128));
        _52 = _71;
        StorageDead(_71);
        StorageLive(_50);
        _50 = (_52.0: u128);
        StorageLive(_51);
        _51 = (_52.1: u128);
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        _75 = _50;
        StorageLive(_76);
        _76 = ((*_1).6: u128);
        StorageLive(_77);
        _78 = discriminant(_3);
        switchInt(move _78) -> [0: bb35, 1: bb36, otherwise: bb2];
    }

    bb33: {
        StorageLive(_68);
        _68 = ((_53 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_70);
        _70 = _68;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _70) -> [return: bb34, unwind continue];
    }

    bb34: {
        StorageDead(_70);
        StorageDead(_68);
        goto -> bb55;
    }

    bb35: {
        _77 = SwapDirection::Remove;
        goto -> bb37;
    }

    bb36: {
        _77 = SwapDirection::Add;
        goto -> bb37;
    }

    bb37: {
        StorageLive(_79);
        _79 = ((*_1).11: u128);
        StorageLive(_80);
        _80 = _38;
        StorageLive(_81);
        StorageLive(_82);
        _82 = &_3;
        StorageLive(_83);
        _111 = const _;
        _83 = &(*_111);
        _81 = <SwapDirection as PartialEq>::eq(move _82, move _83) -> [return: bb38, unwind continue];
    }

    bb38: {
        StorageDead(_83);
        StorageDead(_82);
        _74 = controller::amm::calculate_quote_asset_amount_surplus(move _75, move _76, move _77, move _79, move _80, move _81) -> [return: bb39, unwind continue];
    }

    bb39: {
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageDead(_75);
        _73 = <std::result::Result<u128, error::ErrorCode> as Try>::branch(move _74) -> [return: bb40, unwind continue];
    }

    bb40: {
        StorageDead(_74);
        _85 = discriminant(_73);
        switchInt(move _85) -> [0: bb41, 1: bb42, otherwise: bb2];
    }

    bb41: {
        StorageLive(_89);
        _89 = ((_73 as Continue).0: u128);
        _72 = _89;
        StorageDead(_89);
        StorageDead(_73);
        StorageLive(_90);
        StorageLive(_91);
        _91 = _51;
        StorageLive(_92);
        _92 = _50;
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _38;
        _95 = <u128 as Cast>::cast::<u64>(move _96) -> [return: bb44, unwind continue];
    }

    bb42: {
        StorageLive(_86);
        _86 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_88);
        _88 = _86;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _88) -> [return: bb43, unwind continue];
    }

    bb43: {
        StorageDead(_88);
        StorageDead(_86);
        StorageDead(_73);
        StorageDead(_72);
        StorageDead(_51);
        StorageDead(_50);
        goto -> bb56;
    }

    bb44: {
        StorageDead(_96);
        _94 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _95) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_95);
        _97 = discriminant(_94);
        switchInt(move _97) -> [0: bb46, 1: bb47, otherwise: bb2];
    }

    bb46: {
        StorageLive(_101);
        _101 = ((_94 as Continue).0: u64);
        _93 = _101;
        StorageDead(_101);
        StorageLive(_102);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        _105 = _72;
        _104 = <u128 as Cast>::cast::<u64>(move _105) -> [return: bb49, unwind continue];
    }

    bb47: {
        StorageLive(_98);
        _98 = ((_94 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb48, unwind continue];
    }

    bb48: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_72);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_38);
        StorageDead(_17);
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb54;
    }

    bb49: {
        StorageDead(_105);
        _103 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _104) -> [return: bb50, unwind continue];
    }

    bb50: {
        StorageDead(_104);
        _106 = discriminant(_103);
        switchInt(move _106) -> [0: bb51, 1: bb52, otherwise: bb2];
    }

    bb51: {
        StorageLive(_110);
        _110 = ((_103 as Continue).0: u64);
        _102 = _110;
        StorageDead(_110);
        _90 = (move _91, move _92, move _93, move _102);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        _0 = std::result::Result::<(u128, u128, u64, u64), error::ErrorCode>::Ok(move _90);
        StorageDead(_90);
        StorageDead(_72);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_38);
        StorageDead(_17);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_103);
        StorageDead(_94);
        goto -> bb59;
    }

    bb52: {
        StorageLive(_107);
        _107 = ((_103 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_109);
        _109 = _107;
        _0 = <std::result::Result<(u128, u128, u64, u64), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _109) -> [return: bb53, unwind continue];
    }

    bb53: {
        StorageDead(_109);
        StorageDead(_107);
        StorageDead(_102);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        StorageDead(_90);
        StorageDead(_72);
        StorageDead(_51);
        StorageDead(_50);
        StorageDead(_38);
        StorageDead(_17);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_103);
        goto -> bb54;
    }

    bb54: {
        StorageDead(_94);
        goto -> bb59;
    }

    bb55: {
        StorageDead(_56);
        StorageDead(_53);
        StorageDead(_52);
        goto -> bb56;
    }

    bb56: {
        StorageDead(_38);
        StorageDead(_17);
        goto -> bb58;
    }

    bb57: {
        StorageDead(_22);
        StorageDead(_19);
        StorageDead(_18);
        goto -> bb58;
    }

    bb58: {
        StorageDead(_5);
        StorageDead(_4);
        goto -> bb59;
    }

    bb59: {
        return;
    }
}
