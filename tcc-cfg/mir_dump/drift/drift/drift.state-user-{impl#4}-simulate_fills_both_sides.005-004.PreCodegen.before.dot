digraph Mir_0_4348 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn SpotPosition::simulate_fills_both_sides(_1: &amp;ReErased state::user::SpotPosition, _2: &amp;ReErased state::spot_market::SpotMarket, _3: &amp;ReErased state::oracle::StrictOraclePrice, _4: std::option::Option&lt;i128&gt;, _5: math::margin::MarginRequirementType) -&gt; std::result::Result&lt;[state::user::OrderFillSimulation; 2_usize], error::ErrorCode&gt;<br align="left"/>let _6: i128;<br align="left"/>let mut _7: isize;<br align="left"/>let _8: i128;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _10: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _11: &amp;ReErased state::user::SpotPosition;<br align="left"/>let mut _12: &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _13: isize;<br align="left"/>let _14: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _15: !;<br align="left"/>let mut _16: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _17: i128;<br align="left"/>let _18: i128;<br align="left"/>let mut _19: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _20: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _21: i128;<br align="left"/>let mut _22: u32;<br align="left"/>let mut _23: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _24: isize;<br align="left"/>let _25: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _26: !;<br align="left"/>let mut _27: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _28: i128;<br align="left"/>let _29: Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]);<br align="left"/>let mut _30: &amp;ReErased &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _31: &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _32: &amp;ReErased math::margin::MarginRequirementType;<br align="left"/>let _33: ();<br align="left"/>let mut _34: bool;<br align="left"/>let mut _35: i64;<br align="left"/>let mut _36: bool;<br align="left"/>let mut _37: i64;<br align="left"/>let mut _38: !;<br align="left"/>let _39: i128;<br align="left"/>let mut _40: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _41: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _42: &amp;ReErased Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]);<br align="left"/>let mut _43: (i128, i128);<br align="left"/>let mut _44: i128;<br align="left"/>let mut _45: i128;<br align="left"/>let mut _46: isize;<br align="left"/>let _47: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _48: !;<br align="left"/>let mut _49: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _50: i128;<br align="left"/>let _51: state::user::OrderFillSimulation;<br align="left"/>let mut _52: i128;<br align="left"/>let mut _53: i128;<br align="left"/>let mut _54: i128;<br align="left"/>let mut _55: i128;<br align="left"/>let mut _56: [state::user::OrderFillSimulation; 2_usize];<br align="left"/>let mut _57: state::user::OrderFillSimulation;<br align="left"/>let mut _58: state::user::OrderFillSimulation;<br align="left"/>let _59: Closure(DefId(0:4351 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#1}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::oracle::StrictOraclePrice, i128, i128)) -&gt; std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;, [Region(BrAnon)]), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased i128, &amp;ReErased Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]))]);<br align="left"/>let mut _60: &amp;ReErased &amp;ReErased state::spot_market::SpotMarket;<br align="left"/>let mut _61: &amp;ReErased i128;<br align="left"/>let mut _62: &amp;ReErased Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]);<br align="left"/>let _63: state::user::OrderFillSimulation;<br align="left"/>let mut _64: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::user::OrderFillSimulation&gt;;<br align="left"/>let mut _65: std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;;<br align="left"/>let mut _66: &amp;ReErased Closure(DefId(0:4351 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#1}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::oracle::StrictOraclePrice, i128, i128)) -&gt; std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;, [Region(BrAnon)]), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased i128, &amp;ReErased Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]))]);<br align="left"/>let mut _67: (&amp;ReErased state::oracle::StrictOraclePrice, i128, i128);<br align="left"/>let mut _68: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _69: i128;<br align="left"/>let mut _70: i128;<br align="left"/>let mut _71: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _72: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _73: i64;<br align="left"/>let mut _74: isize;<br align="left"/>let _75: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _76: !;<br align="left"/>let mut _77: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _78: i128;<br align="left"/>let mut _79: isize;<br align="left"/>let _80: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _81: !;<br align="left"/>let mut _82: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _83: state::user::OrderFillSimulation;<br align="left"/>let _84: state::user::OrderFillSimulation;<br align="left"/>let mut _85: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, state::user::OrderFillSimulation&gt;;<br align="left"/>let mut _86: std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;;<br align="left"/>let mut _87: &amp;ReErased Closure(DefId(0:4351 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#1}), [i8, Binder(extern &quot;RustCall&quot; fn((&amp;ReBound(DebruijnIndex(0), BoundRegion { var: 0, kind: BrAnon }) state::oracle::StrictOraclePrice, i128, i128)) -&gt; std::result::Result&lt;state::user::OrderFillSimulation, error::ErrorCode&gt;, [Region(BrAnon)]), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased i128, &amp;ReErased Closure(DefId(0:4350 ~ drift[d311]::state::user::{impl#4}::simulate_fills_both_sides::{closure#0}), [i8, Binder(extern &quot;RustCall&quot; fn((i128, i128)) -&gt; std::result::Result&lt;i128, error::ErrorCode&gt;, []), (&amp;ReErased &amp;ReErased state::spot_market::SpotMarket, &amp;ReErased &amp;ReErased state::oracle::StrictOraclePrice, &amp;ReErased math::margin::MarginRequirementType)]))]);<br align="left"/>let mut _88: (&amp;ReErased state::oracle::StrictOraclePrice, i128, i128);<br align="left"/>let mut _89: &amp;ReErased state::oracle::StrictOraclePrice;<br align="left"/>let mut _90: i128;<br align="left"/>let mut _91: i128;<br align="left"/>let mut _92: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i128&gt;;<br align="left"/>let mut _93: std::result::Result&lt;i128, error::ErrorCode&gt;;<br align="left"/>let mut _94: i64;<br align="left"/>let mut _95: isize;<br align="left"/>let _96: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _97: !;<br align="left"/>let mut _98: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _99: i128;<br align="left"/>let mut _100: isize;<br align="left"/>let _101: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _102: !;<br align="left"/>let mut _103: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _104: state::user::OrderFillSimulation;<br align="left"/>let mut _105: [state::user::OrderFillSimulation; 2_usize];<br align="left"/>let mut _106: state::user::OrderFillSimulation;<br align="left"/>let mut _107: state::user::OrderFillSimulation;<br align="left"/>debug self =&gt; _1;<br align="left"/>debug spot_market =&gt; _2;<br align="left"/>debug strict_oracle_price =&gt; _3;<br align="left"/>debug token_amount =&gt; _4;<br align="left"/>debug margin_type =&gt; _5;<br align="left"/>debug token_amount =&gt; _6;<br align="left"/>debug token_amount =&gt; _8;<br align="left"/>debug residual =&gt; _14;<br align="left"/>debug val =&gt; _17;<br align="left"/>debug token_value =&gt; _18;<br align="left"/>debug residual =&gt; _25;<br align="left"/>debug val =&gt; _28;<br align="left"/>debug calculate_weighted_token_value =&gt; _29;<br align="left"/>debug weighted_token_value =&gt; _39;<br align="left"/>debug residual =&gt; _47;<br align="left"/>debug val =&gt; _50;<br align="left"/>debug calculation =&gt; _51;<br align="left"/>debug simulate_side =&gt; _59;<br align="left"/>debug bid_simulation =&gt; _63;<br align="left"/>debug residual =&gt; _75;<br align="left"/>debug val =&gt; _78;<br align="left"/>debug residual =&gt; _80;<br align="left"/>debug val =&gt; _83;<br align="left"/>debug ask_simulation =&gt; _84;<br align="left"/>debug residual =&gt; _96;<br align="left"/>debug val =&gt; _99;<br align="left"/>debug residual =&gt; _101;<br align="left"/>debug val =&gt; _104;<br align="left"/>>;
    bb0__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_6)<br/>_7 = discriminant(_4)<br/></td></tr><tr><td align="left">switchInt(move _7)</td></tr></table>>];
    bb1__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left" balign="left">StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;(*_1)<br/>StorageLive(_12)<br/>_12 = &amp;(*_2)<br/></td></tr><tr><td align="left">_10 = SpotPosition::get_signed_token_amount(move _11, move _12)</td></tr></table>>];
    bb2__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb3__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageLive(_8)<br/>_8 = ((_4 as Some).0: i128)<br/>_6 = _8<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb4__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_12)<br/>StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb5__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_13 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _13)</td></tr></table>>];
    bb6__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_17)<br/>_17 = ((_9 as Continue).0: i128)<br/>_6 = _17<br/>StorageDead(_17)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb7__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left" balign="left">StorageLive(_14)<br/>_14 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_16)<br/>_16 = _14<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;[OrderFillSimulation; 2], error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _16)</td></tr></table>>];
    bb8__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageDead(_16)<br/>StorageDead(_14)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb9__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = _6<br/>StorageLive(_22)<br/>_22 = ((*_2).41: u32)<br/>StorageLive(_23)<br/>_23 = &amp;(*_3)<br/></td></tr><tr><td align="left">_20 = get_strict_token_value(move _21, move _22, move _23)</td></tr></table>>];
    bb10__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_23)<br/>StorageDead(_22)<br/>StorageDead(_21)<br/></td></tr><tr><td align="left">_19 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _20)</td></tr></table>>];
    bb11__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_20)<br/>_24 = discriminant(_19)<br/></td></tr><tr><td align="left">switchInt(move _24)</td></tr></table>>];
    bb12__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_28)<br/>_28 = ((_19 as Continue).0: i128)<br/>_18 = _28<br/>StorageDead(_28)<br/>StorageDead(_19)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>_30 = &amp;_2<br/>StorageLive(_31)<br/>_31 = &amp;_3<br/>StorageLive(_32)<br/>_32 = &amp;_5<br/>_29 = {closure@programs/drift/src/state/user.rs:862:46: 862:85} { spot_market: move _30, strict_oracle_price: move _31, margin_type: move _32 }<br/>StorageDead(_32)<br/>StorageDead(_31)<br/>StorageDead(_30)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>StorageLive(_35)<br/>_35 = ((*_1).1: i64)<br/>_34 = Eq(move _35, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _34)</td></tr></table>>];
    bb13__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_25)<br/>_25 = ((_19 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_27)<br/>_27 = _25<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;[OrderFillSimulation; 2], error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _27)</td></tr></table>>];
    bb14__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_27)<br/>StorageDead(_25)<br/>StorageDead(_19)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/>StorageLive(_36)<br/>StorageLive(_37)<br/>_37 = ((*_1).2: i64)<br/>_36 = Eq(move _37, const 0_i64)<br/></td></tr><tr><td align="left">switchInt(move _36)</td></tr></table>>];
    bb16__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_35)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb17__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/>StorageLive(_39)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>_42 = &amp;_29<br/>StorageLive(_43)<br/>StorageLive(_44)<br/>_44 = _6<br/>StorageLive(_45)<br/>_45 = _18<br/>_43 = (move _44, move _45)<br/></td></tr><tr><td align="left">_41 = &lt;{closure@programs/drift/src/state/user.rs:862:46: 862:85} as Fn&lt;(i128, i128)&gt;&gt;::call(move _42, move _43)</td></tr></table>>];
    bb18__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>StorageDead(_44)<br/>StorageDead(_43)<br/>StorageDead(_42)<br/></td></tr><tr><td align="left">_40 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _41)</td></tr></table>>];
    bb19__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>_46 = discriminant(_40)<br/></td></tr><tr><td align="left">switchInt(move _46)</td></tr></table>>];
    bb20__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageLive(_50)<br/>_50 = ((_40 as Continue).0: i128)<br/>_39 = _50<br/>StorageDead(_50)<br/>StorageDead(_40)<br/>StorageLive(_51)<br/>StorageLive(_52)<br/>_52 = _6<br/>StorageLive(_53)<br/>_53 = _18<br/>StorageLive(_54)<br/>_54 = _39<br/>StorageLive(_55)<br/>_55 = _39<br/>_51 = OrderFillSimulation { token_amount: move _52, orders_value: const 0_i128, token_value: move _53, weighted_token_value: move _54, free_collateral_contribution: move _55 }<br/>StorageDead(_55)<br/>StorageDead(_54)<br/>StorageDead(_53)<br/>StorageDead(_52)<br/>StorageLive(_56)<br/>StorageLive(_57)<br/>_57 = _51<br/>StorageLive(_58)<br/>_58 = _51<br/>_56 = [move _57, move _58]<br/>StorageDead(_58)<br/>StorageDead(_57)<br/>_0 = std::result::Result::&lt;[OrderFillSimulation; 2], error::ErrorCode&gt;::Ok(move _56)<br/>StorageDead(_56)<br/>StorageDead(_51)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageLive(_47)<br/>_47 = ((_40 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_49)<br/>_49 = _47<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;[OrderFillSimulation; 2], error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _49)</td></tr></table>>];
    bb22__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_49)<br/>StorageDead(_47)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb23__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_37)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb24__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">_33 = const ()<br/>StorageDead(_36)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/>StorageLive(_59)<br/>StorageLive(_60)<br/>_60 = &amp;_2<br/>StorageLive(_61)<br/>_61 = &amp;_18<br/>StorageLive(_62)<br/>_62 = &amp;_29<br/>_59 = {closure@programs/drift/src/state/user.rs:899:29: 901:48} { spot_market: move _60, token_value: move _61, calculate_weighted_token_value: move _62 }<br/>StorageDead(_62)<br/>StorageDead(_61)<br/>StorageDead(_60)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>_66 = &amp;_59<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>_68 = &amp;(*_3)<br/>StorageLive(_69)<br/>_69 = _6<br/>StorageLive(_70)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>_73 = ((*_1).1: i64)<br/></td></tr><tr><td align="left">_72 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _73)</td></tr></table>>];
    bb25__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_73)<br/></td></tr><tr><td align="left">_71 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _72)</td></tr></table>>];
    bb26__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageDead(_72)<br/>_74 = discriminant(_71)<br/></td></tr><tr><td align="left">switchInt(move _74)</td></tr></table>>];
    bb27__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_78)<br/>_78 = ((_71 as Continue).0: i128)<br/>_70 = _78<br/>StorageDead(_78)<br/>_67 = (move _68, move _69, move _70)<br/></td></tr><tr><td align="left">_65 = &lt;{closure@programs/drift/src/state/user.rs:899:29: 901:48} as Fn&lt;(&amp;StrictOraclePrice, i128, i128)&gt;&gt;::call(move _66, move _67)</td></tr></table>>];
    bb28__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageLive(_75)<br/>_75 = ((_71 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_77)<br/>_77 = _75<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;[OrderFillSimulation; 2], error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _77)</td></tr></table>>];
    bb29__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageDead(_77)<br/>StorageDead(_75)<br/>StorageDead(_70)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/>StorageDead(_65)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb30__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">StorageDead(_70)<br/>StorageDead(_69)<br/>StorageDead(_68)<br/>StorageDead(_67)<br/>StorageDead(_66)<br/></td></tr><tr><td align="left">_64 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as Try&gt;::branch(move _65)</td></tr></table>>];
    bb31__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_65)<br/>_79 = discriminant(_64)<br/></td></tr><tr><td align="left">switchInt(move _79)</td></tr></table>>];
    bb32__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageLive(_83)<br/>_83 = ((_64 as Continue).0: state::user::OrderFillSimulation)<br/>_63 = _83<br/>StorageDead(_83)<br/>StorageDead(_71)<br/>StorageDead(_64)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>StorageLive(_87)<br/>_87 = &amp;_59<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>_89 = &amp;(*_3)<br/>StorageLive(_90)<br/>_90 = _6<br/>StorageLive(_91)<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>StorageLive(_94)<br/>_94 = ((*_1).2: i64)<br/></td></tr><tr><td align="left">_93 = &lt;i64 as Cast&gt;::cast::&lt;i128&gt;(move _94)</td></tr></table>>];
    bb33__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageLive(_80)<br/>_80 = ((_64 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_82)<br/>_82 = _80<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;[OrderFillSimulation; 2], error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _82)</td></tr></table>>];
    bb34__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageDead(_80)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb35__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_94)<br/></td></tr><tr><td align="left">_92 = &lt;std::result::Result&lt;i128, error::ErrorCode&gt; as Try&gt;::branch(move _93)</td></tr></table>>];
    bb36__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_93)<br/>_95 = discriminant(_92)<br/></td></tr><tr><td align="left">switchInt(move _95)</td></tr></table>>];
    bb37__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">StorageLive(_99)<br/>_99 = ((_92 as Continue).0: i128)<br/>_91 = _99<br/>StorageDead(_99)<br/>_88 = (move _89, move _90, move _91)<br/></td></tr><tr><td align="left">_86 = &lt;{closure@programs/drift/src/state/user.rs:899:29: 901:48} as Fn&lt;(&amp;StrictOraclePrice, i128, i128)&gt;&gt;::call(move _87, move _88)</td></tr></table>>];
    bb38__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageLive(_96)<br/>_96 = ((_92 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_98)<br/>_98 = _96<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;[OrderFillSimulation; 2], error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _98)</td></tr></table>>];
    bb39__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_98)<br/>StorageDead(_96)<br/>StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/>StorageDead(_86)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_91)<br/>StorageDead(_90)<br/>StorageDead(_89)<br/>StorageDead(_88)<br/>StorageDead(_87)<br/></td></tr><tr><td align="left">_85 = &lt;std::result::Result&lt;OrderFillSimulation, error::ErrorCode&gt; as Try&gt;::branch(move _86)</td></tr></table>>];
    bb41__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_86)<br/>_100 = discriminant(_85)<br/></td></tr><tr><td align="left">switchInt(move _100)</td></tr></table>>];
    bb42__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageLive(_104)<br/>_104 = ((_85 as Continue).0: state::user::OrderFillSimulation)<br/>_84 = _104<br/>StorageDead(_104)<br/>StorageDead(_92)<br/>StorageDead(_85)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>_106 = _63<br/>StorageLive(_107)<br/>_107 = _84<br/>_105 = [move _106, move _107]<br/>StorageDead(_107)<br/>StorageDead(_106)<br/>_0 = std::result::Result::&lt;[OrderFillSimulation; 2], error::ErrorCode&gt;::Ok(move _105)<br/>StorageDead(_105)<br/>StorageDead(_84)<br/>StorageDead(_63)<br/>StorageDead(_59)<br/>StorageDead(_29)<br/>StorageDead(_18)<br/>StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb43__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_101)<br/>_101 = ((_85 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_103)<br/>_103 = _101<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;[OrderFillSimulation; 2], error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _103)</td></tr></table>>];
    bb44__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageDead(_103)<br/>StorageDead(_101)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb45__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageDead(_85)<br/>StorageDead(_84)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageDead(_64)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb47__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">StorageDead(_63)<br/>StorageDead(_59)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_39)<br/>StorageDead(_36)<br/>StorageDead(_34)<br/>StorageDead(_33)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb49__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb50__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb51__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb52__0_4348 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left">return</td></tr></table>>];
    bb0__0_4348 -> bb1__0_4348 [label="0"];
    bb0__0_4348 -> bb3__0_4348 [label="1"];
    bb0__0_4348 -> bb2__0_4348 [label="otherwise"];
    bb1__0_4348 -> bb4__0_4348 [label="return"];
    bb3__0_4348 -> bb9__0_4348 [label=""];
    bb4__0_4348 -> bb5__0_4348 [label="return"];
    bb5__0_4348 -> bb6__0_4348 [label="0"];
    bb5__0_4348 -> bb7__0_4348 [label="1"];
    bb5__0_4348 -> bb2__0_4348 [label="otherwise"];
    bb6__0_4348 -> bb9__0_4348 [label=""];
    bb7__0_4348 -> bb8__0_4348 [label="return"];
    bb8__0_4348 -> bb51__0_4348 [label=""];
    bb9__0_4348 -> bb10__0_4348 [label="return"];
    bb10__0_4348 -> bb11__0_4348 [label="return"];
    bb11__0_4348 -> bb12__0_4348 [label="0"];
    bb11__0_4348 -> bb13__0_4348 [label="1"];
    bb11__0_4348 -> bb2__0_4348 [label="otherwise"];
    bb12__0_4348 -> bb16__0_4348 [label="0"];
    bb12__0_4348 -> bb15__0_4348 [label="otherwise"];
    bb13__0_4348 -> bb14__0_4348 [label="return"];
    bb14__0_4348 -> bb50__0_4348 [label=""];
    bb15__0_4348 -> bb23__0_4348 [label="0"];
    bb15__0_4348 -> bb17__0_4348 [label="otherwise"];
    bb16__0_4348 -> bb24__0_4348 [label=""];
    bb17__0_4348 -> bb18__0_4348 [label="return"];
    bb18__0_4348 -> bb19__0_4348 [label="return"];
    bb19__0_4348 -> bb20__0_4348 [label="0"];
    bb19__0_4348 -> bb21__0_4348 [label="1"];
    bb19__0_4348 -> bb2__0_4348 [label="otherwise"];
    bb20__0_4348 -> bb48__0_4348 [label=""];
    bb21__0_4348 -> bb22__0_4348 [label="return"];
    bb22__0_4348 -> bb48__0_4348 [label=""];
    bb23__0_4348 -> bb24__0_4348 [label=""];
    bb24__0_4348 -> bb25__0_4348 [label="return"];
    bb25__0_4348 -> bb26__0_4348 [label="return"];
    bb26__0_4348 -> bb27__0_4348 [label="0"];
    bb26__0_4348 -> bb28__0_4348 [label="1"];
    bb26__0_4348 -> bb2__0_4348 [label="otherwise"];
    bb27__0_4348 -> bb30__0_4348 [label="return"];
    bb28__0_4348 -> bb29__0_4348 [label="return"];
    bb29__0_4348 -> bb46__0_4348 [label=""];
    bb30__0_4348 -> bb31__0_4348 [label="return"];
    bb31__0_4348 -> bb32__0_4348 [label="0"];
    bb31__0_4348 -> bb33__0_4348 [label="1"];
    bb31__0_4348 -> bb2__0_4348 [label="otherwise"];
    bb32__0_4348 -> bb35__0_4348 [label="return"];
    bb33__0_4348 -> bb34__0_4348 [label="return"];
    bb34__0_4348 -> bb46__0_4348 [label=""];
    bb35__0_4348 -> bb36__0_4348 [label="return"];
    bb36__0_4348 -> bb37__0_4348 [label="0"];
    bb36__0_4348 -> bb38__0_4348 [label="1"];
    bb36__0_4348 -> bb2__0_4348 [label="otherwise"];
    bb37__0_4348 -> bb40__0_4348 [label="return"];
    bb38__0_4348 -> bb39__0_4348 [label="return"];
    bb39__0_4348 -> bb45__0_4348 [label=""];
    bb40__0_4348 -> bb41__0_4348 [label="return"];
    bb41__0_4348 -> bb42__0_4348 [label="0"];
    bb41__0_4348 -> bb43__0_4348 [label="1"];
    bb41__0_4348 -> bb2__0_4348 [label="otherwise"];
    bb42__0_4348 -> bb52__0_4348 [label=""];
    bb43__0_4348 -> bb44__0_4348 [label="return"];
    bb44__0_4348 -> bb45__0_4348 [label=""];
    bb45__0_4348 -> bb47__0_4348 [label=""];
    bb46__0_4348 -> bb47__0_4348 [label=""];
    bb47__0_4348 -> bb49__0_4348 [label=""];
    bb48__0_4348 -> bb49__0_4348 [label=""];
    bb49__0_4348 -> bb50__0_4348 [label=""];
    bb50__0_4348 -> bb51__0_4348 [label=""];
    bb51__0_4348 -> bb52__0_4348 [label=""];
}
