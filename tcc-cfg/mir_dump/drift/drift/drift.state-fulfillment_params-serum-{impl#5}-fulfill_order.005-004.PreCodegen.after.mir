// MIR for `fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:466:1: 466:70>::fulfill_order` after PreCodegen

fn fulfillment_params::serum::<impl at programs/drift/src/state/fulfillment_params/serum.rs:466:1: 466:70>::fulfill_order(_1: &mut SerumFulfillmentParams<'_, '_>, _2: controller::position::PositionDirection, _3: u64, _4: u64, _5: u64) -> std::result::Result<ExternalSpotFill, error::ErrorCode> {
    debug self => _1;
    debug taker_direction => _2;
    debug taker_price => _3;
    debug taker_base_asset_amount => _4;
    debug taker_max_quote_asset_amount => _5;
    let mut _0: std::result::Result<state::spot_fulfillment_params::ExternalSpotFill, error::ErrorCode>;
    let _6: serum_dex::state::Market<'_>;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, serum_dex::state::Market<'_>>;
    let mut _8: std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode>;
    let mut _9: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let _10: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _11: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _12: isize;
    let _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _14: !;
    let mut _15: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _16: serum_dex::state::Market<'_>;
    let mut _18: isize;
    let mut _20: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _21: std::result::Result<u64, error::ErrorCode>;
    let mut _22: u64;
    let mut _23: u64;
    let mut _24: &serum_dex::state::MarketState;
    let mut _25: &serum_dex::state::Market<'_>;
    let mut _26: isize;
    let mut _28: !;
    let mut _29: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _33: std::result::Result<u64, error::ErrorCode>;
    let mut _34: u64;
    let mut _35: u64;
    let mut _36: &serum_dex::state::MarketState;
    let mut _37: &serum_dex::state::Market<'_>;
    let mut _38: u32;
    let mut _39: u64;
    let mut _40: &serum_dex::state::MarketState;
    let mut _41: &serum_dex::state::Market<'_>;
    let mut _42: controller::position::PositionDirection;
    let mut _43: isize;
    let mut _45: !;
    let mut _46: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _49: u64;
    let mut _50: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _51: std::result::Result<u64, error::ErrorCode>;
    let mut _52: u64;
    let mut _53: u64;
    let mut _54: u64;
    let mut _55: &serum_dex::state::MarketState;
    let mut _56: &serum_dex::state::Market<'_>;
    let mut _57: isize;
    let mut _59: !;
    let mut _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _62: u64;
    let _63: ();
    let mut _64: bool;
    let mut _65: u64;
    let mut _66: bool;
    let mut _67: u64;
    let mut _68: !;
    let mut _69: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _71: serum_dex::matching::Side;
    let mut _72: std::num::NonZeroU64;
    let mut _73: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::num::NonZeroU64>;
    let mut _74: std::result::Result<std::num::NonZeroU64, error::ErrorCode>;
    let mut _75: std::option::Option<std::num::NonZeroU64>;
    let mut _76: u64;
    let mut _77: isize;
    let mut _79: !;
    let mut _80: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _82: std::num::NonZeroU64;
    let mut _83: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::num::NonZeroU64>;
    let mut _84: std::result::Result<std::num::NonZeroU64, error::ErrorCode>;
    let mut _85: std::option::Option<std::num::NonZeroU64>;
    let mut _86: u64;
    let mut _87: isize;
    let mut _89: !;
    let mut _90: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _92: std::num::NonZeroU64;
    let mut _93: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::num::NonZeroU64>;
    let mut _94: std::result::Result<std::num::NonZeroU64, error::ErrorCode>;
    let mut _95: std::option::Option<std::num::NonZeroU64>;
    let mut _96: u64;
    let mut _97: isize;
    let mut _99: !;
    let mut _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _102: serum_dex::instruction::SelfTradeBehavior;
    let mut _103: serum_dex::matching::OrderType;
    let mut _104: i64;
    let mut _106: &serum_dex::state::MarketState;
    let mut _107: &serum_dex::state::Market<'_>;
    let mut _109: &anchor_spl::token::spl_token::state::Account;
    let mut _110: &anchor_spl::token::TokenAccount;
    let _111: &anchor_spl::token::TokenAccount;
    let mut _112: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _114: &anchor_spl::token::spl_token::state::Account;
    let mut _115: &anchor_spl::token::TokenAccount;
    let _116: &anchor_spl::token::TokenAccount;
    let mut _117: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _119: &serum_dex::state::MarketState;
    let mut _120: &serum_dex::state::Market<'_>;
    let _121: ();
    let mut _122: serum_dex::state::Market<'_>;
    let _123: ();
    let mut _124: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _125: std::result::Result<(), error::ErrorCode>;
    let mut _126: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _127: controller::position::PositionDirection;
    let mut _128: serum_dex::instruction::NewOrderInstructionV3;
    let mut _129: isize;
    let mut _131: !;
    let mut _132: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _135: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, serum_dex::state::Market<'_>>;
    let mut _136: std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode>;
    let mut _137: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let _138: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _139: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _140: isize;
    let mut _142: !;
    let mut _143: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _146: &serum_dex::state::MarketState;
    let mut _147: &serum_dex::state::Market<'_>;
    let mut _149: &serum_dex::state::MarketState;
    let mut _150: &serum_dex::state::Market<'_>;
    let _151: ();
    let mut _152: serum_dex::state::Market<'_>;
    let mut _154: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, serum_dex::state::OpenOrders>>;
    let mut _155: std::result::Result<std::cell::Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode>;
    let mut _156: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let _157: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _158: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _165: &serum_dex::state::OpenOrders;
    let mut _166: &std::cell::Ref<'_, serum_dex::state::OpenOrders>;
    let _167: ();
    let mut _168: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
    let _169: ();
    let mut _170: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _171: std::result::Result<(), error::ErrorCode>;
    let mut _172: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _173: isize;
    let mut _175: !;
    let mut _176: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _178: ();
    let mut _179: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _180: std::result::Result<(), error::ErrorCode>;
    let mut _181: std::result::Result<(), anchor_lang::error::Error>;
    let mut _182: &mut anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _183: {closure@programs/drift/src/state/fulfillment_params/serum.rs:609:49: 609:53};
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _189: ();
    let mut _190: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _191: std::result::Result<(), error::ErrorCode>;
    let mut _192: std::result::Result<(), anchor_lang::error::Error>;
    let mut _193: &mut anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _194: {closure@programs/drift/src/state/fulfillment_params/serum.rs:613:50: 613:54};
    let mut _195: isize;
    let mut _197: !;
    let mut _198: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _201: &anchor_spl::token::spl_token::state::Account;
    let mut _202: &anchor_spl::token::TokenAccount;
    let _203: &anchor_spl::token::TokenAccount;
    let mut _204: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _206: &anchor_spl::token::spl_token::state::Account;
    let mut _207: &anchor_spl::token::TokenAccount;
    let _208: &anchor_spl::token::TokenAccount;
    let mut _209: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _211: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::Ref<'_, serum_dex::state::OpenOrders>>;
    let mut _212: std::result::Result<std::cell::Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode>;
    let mut _213: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let _214: &state::fulfillment_params::serum::SerumContext<'_, '_>;
    let mut _215: &state::fulfillment_params::serum::SerumFulfillmentParams<'_, '_>;
    let mut _216: isize;
    let mut _218: !;
    let mut _219: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _222: &serum_dex::state::OpenOrders;
    let mut _223: &std::cell::Ref<'_, serum_dex::state::OpenOrders>;
    let _224: ();
    let mut _225: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
    let mut _227: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _228: std::result::Result<u64, error::ErrorCode>;
    let mut _229: u64;
    let mut _230: u64;
    let mut _231: isize;
    let mut _233: !;
    let mut _234: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _238: (state::spot_market::SpotBalanceType, u64);
    let mut _239: bool;
    let mut _240: u64;
    let mut _241: u64;
    let mut _242: state::spot_market::SpotBalanceType;
    let mut _243: u64;
    let mut _244: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _245: std::result::Result<u64, error::ErrorCode>;
    let mut _246: u64;
    let mut _247: u64;
    let mut _248: isize;
    let mut _250: !;
    let mut _251: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _253: state::spot_market::SpotBalanceType;
    let mut _254: u64;
    let mut _255: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _256: std::result::Result<u64, error::ErrorCode>;
    let mut _257: u64;
    let mut _258: u64;
    let mut _259: isize;
    let mut _261: !;
    let mut _262: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _264: ();
    let mut _265: bool;
    let mut _266: u64;
    let mut _267: !;
    let _268: ();
    let mut _269: &str;
    let _270: &str;
    let mut _271: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _273: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _274: std::result::Result<u64, error::ErrorCode>;
    let mut _275: u64;
    let mut _276: u64;
    let mut _277: isize;
    let mut _279: !;
    let mut _280: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _285: (state::spot_market::SpotBalanceType, u64);
    let mut _286: bool;
    let mut _287: &state::spot_market::SpotBalanceType;
    let mut _288: &state::spot_market::SpotBalanceType;
    let _289: state::spot_market::SpotBalanceType;
    let mut _291: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _292: std::result::Result<u64, error::ErrorCode>;
    let mut _293: u64;
    let mut _294: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _295: std::result::Result<u64, error::ErrorCode>;
    let mut _296: u64;
    let mut _297: u64;
    let mut _298: isize;
    let mut _300: !;
    let mut _301: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _303: u64;
    let mut _304: isize;
    let mut _306: !;
    let mut _307: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _309: state::spot_market::SpotBalanceType;
    let mut _310: u64;
    let mut _311: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _312: std::result::Result<u64, error::ErrorCode>;
    let mut _313: u64;
    let mut _314: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _315: std::result::Result<u64, error::ErrorCode>;
    let mut _316: u64;
    let mut _317: u64;
    let mut _318: isize;
    let mut _320: !;
    let mut _321: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _323: u64;
    let mut _324: isize;
    let mut _326: !;
    let mut _327: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _330: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _331: std::result::Result<u64, error::ErrorCode>;
    let mut _332: u64;
    let mut _333: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _334: std::result::Result<u64, error::ErrorCode>;
    let mut _335: u64;
    let mut _336: u64;
    let mut _337: isize;
    let mut _339: !;
    let mut _340: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _342: u64;
    let mut _343: isize;
    let mut _345: !;
    let mut _346: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _348: state::spot_market::SpotBalanceType;
    let mut _349: u64;
    let mut _350: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _351: std::result::Result<u64, error::ErrorCode>;
    let mut _352: u64;
    let mut _353: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _354: std::result::Result<u64, error::ErrorCode>;
    let mut _355: u64;
    let mut _356: u64;
    let mut _357: isize;
    let mut _359: !;
    let mut _360: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _362: u64;
    let mut _363: isize;
    let mut _365: !;
    let mut _366: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _368: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _369: u64;
    let mut _370: u64;
    let mut _371: state::spot_market::SpotBalanceType;
    let mut _372: state::spot_market::SpotBalanceType;
    let mut _373: u64;
    let mut _374: u64;
    let mut _375: u64;
    let mut _377: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _378: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _379: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _380: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _381: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _382: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _383: bool;
    let mut _384: bool;
    let mut _385: bool;
    let mut _386: bool;
    let mut _387: isize;
    let mut _388: isize;
    let mut _389: isize;
    let mut _390: isize;
    let mut _391: isize;
    let mut _392: isize;
    let mut _393: isize;
    let mut _394: isize;
    let mut _395: isize;
    let mut _396: isize;
    let mut _397: isize;
    let mut _398: isize;
    let mut _399: isize;
    let mut _400: isize;
    let mut _401: isize;
    let mut _402: isize;
    let mut _403: isize;
    let mut _404: isize;
    let mut _405: isize;
    let mut _406: isize;
    let mut _407: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _408: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _409: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _410: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _411: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _412: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    scope 1 {
        debug market_state_before => _6;
        let _17: serum_dex::matching::Side;
        scope 6 {
            debug serum_order_side => _17;
            let _19: u64;
            let _27: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _30: u64;
            scope 7 {
                debug serum_max_coin_qty => _19;
                let _31: u64;
                let _44: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _47: u64;
                scope 12 {
                    debug serum_limit_price => _31;
                    let _48: u64;
                    let _58: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                    let _61: u64;
                    scope 17 {
                        debug serum_max_native_pc_qty => _48;
                        let _70: serum_dex::instruction::NewOrderInstructionV3;
                        let _78: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _81: std::num::NonZeroU64;
                        let _88: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _91: std::num::NonZeroU64;
                        let _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                        let _101: std::num::NonZeroU64;
                        scope 22 {
                            debug serum_order => _70;
                            let _105: u64;
                            scope 35 {
                                debug _market_fees_accrued_before => _105;
                                let _108: u64;
                                scope 36 {
                                    debug base_before => _108;
                                    let _113: u64;
                                    scope 37 {
                                        debug quote_before => _113;
                                        let _118: u64;
                                        scope 38 {
                                            debug market_rebates_accrued_before => _118;
                                            let _130: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _133: ();
                                            let _134: serum_dex::state::Market<'_>;
                                            let _141: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _144: serum_dex::state::Market<'_>;
                                            scope 39 {
                                                debug residual => _130;
                                                scope 40 {
                                                }
                                            }
                                            scope 41 {
                                                debug val => _133;
                                                scope 42 {
                                                }
                                            }
                                            scope 43 {
                                                debug market_state_after => _134;
                                                let _145: u64;
                                                scope 48 {
                                                    debug _market_fees_accrued_after => _145;
                                                    let _148: u64;
                                                    scope 49 {
                                                        debug market_rebates_accrued_after => _148;
                                                        let _153: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
                                                        let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _163: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
                                                        scope 50 {
                                                            debug open_orders_before => _153;
                                                            let _164: u64;
                                                            scope 55 {
                                                                debug unsettled_referrer_rebate_before => _164;
                                                                let _174: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _177: ();
                                                                let _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _188: ();
                                                                let _196: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                let _199: ();
                                                                let _200: u64;
                                                                scope 56 {
                                                                    debug residual => _174;
                                                                    scope 57 {
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug val => _177;
                                                                    scope 59 {
                                                                    }
                                                                }
                                                                scope 60 {
                                                                    debug residual => _185;
                                                                    scope 61 {
                                                                    }
                                                                }
                                                                scope 62 {
                                                                    debug val => _188;
                                                                    scope 63 {
                                                                    }
                                                                }
                                                                scope 64 {
                                                                    debug residual => _196;
                                                                    scope 65 {
                                                                    }
                                                                }
                                                                scope 66 {
                                                                    debug val => _199;
                                                                    scope 67 {
                                                                    }
                                                                }
                                                                scope 68 {
                                                                    debug base_after => _200;
                                                                    let _205: u64;
                                                                    scope 69 {
                                                                        debug quote_after => _205;
                                                                        let _210: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
                                                                        let _217: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                        let _220: std::cell::Ref<'_, serum_dex::state::OpenOrders>;
                                                                        scope 70 {
                                                                            debug open_orders_after => _210;
                                                                            let _221: u64;
                                                                            scope 75 {
                                                                                debug unsettled_referrer_rebate_after => _221;
                                                                                let _226: u64;
                                                                                let _232: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                let _235: u64;
                                                                                scope 76 {
                                                                                    debug settled_referred_rebate => _226;
                                                                                    let _236: state::spot_market::SpotBalanceType;
                                                                                    let _237: u64;
                                                                                    let _249: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _252: u64;
                                                                                    let _260: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                    let _263: u64;
                                                                                    scope 81 {
                                                                                        debug base_update_direction => _236;
                                                                                        debug base_asset_amount_filled => _237;
                                                                                        let _272: u64;
                                                                                        let _278: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                        let _281: u64;
                                                                                        scope 90 {
                                                                                            debug serum_referrer_rebate => _272;
                                                                                            let _282: u64;
                                                                                            scope 95 {
                                                                                                debug serum_fee => _282;
                                                                                                let _283: state::spot_market::SpotBalanceType;
                                                                                                let _284: u64;
                                                                                                let _290: u64;
                                                                                                let _299: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _302: u64;
                                                                                                let _305: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _308: u64;
                                                                                                let _329: u64;
                                                                                                let _338: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _341: u64;
                                                                                                let _344: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                let _347: u64;
                                                                                                let mut _376: &state::spot_market::SpotBalanceType;
                                                                                                scope 96 {
                                                                                                    debug quote_update_direction => _283;
                                                                                                    debug quote_asset_amount_filled => _284;
                                                                                                }
                                                                                                scope 97 {
                                                                                                    debug quote_asset_amount_delta => _290;
                                                                                                    let _319: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _322: u64;
                                                                                                    let _325: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _328: u64;
                                                                                                    scope 106 {
                                                                                                        debug residual => _319;
                                                                                                        scope 107 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 108 {
                                                                                                        debug val => _322;
                                                                                                        scope 109 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 110 {
                                                                                                        debug residual => _325;
                                                                                                        scope 111 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 112 {
                                                                                                        debug val => _328;
                                                                                                        scope 113 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 98 {
                                                                                                    debug residual => _299;
                                                                                                    scope 99 {
                                                                                                    }
                                                                                                }
                                                                                                scope 100 {
                                                                                                    debug val => _302;
                                                                                                    scope 101 {
                                                                                                    }
                                                                                                }
                                                                                                scope 102 {
                                                                                                    debug residual => _305;
                                                                                                    scope 103 {
                                                                                                    }
                                                                                                }
                                                                                                scope 104 {
                                                                                                    debug val => _308;
                                                                                                    scope 105 {
                                                                                                    }
                                                                                                }
                                                                                                scope 114 {
                                                                                                    debug quote_asset_amount_delta => _329;
                                                                                                    let _358: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _361: u64;
                                                                                                    let _364: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                                                                    let _367: u64;
                                                                                                    scope 123 {
                                                                                                        debug residual => _358;
                                                                                                        scope 124 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 125 {
                                                                                                        debug val => _361;
                                                                                                        scope 126 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 127 {
                                                                                                        debug residual => _364;
                                                                                                        scope 128 {
                                                                                                        }
                                                                                                    }
                                                                                                    scope 129 {
                                                                                                        debug val => _367;
                                                                                                        scope 130 {
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                scope 115 {
                                                                                                    debug residual => _338;
                                                                                                    scope 116 {
                                                                                                    }
                                                                                                }
                                                                                                scope 117 {
                                                                                                    debug val => _341;
                                                                                                    scope 118 {
                                                                                                    }
                                                                                                }
                                                                                                scope 119 {
                                                                                                    debug residual => _344;
                                                                                                    scope 120 {
                                                                                                    }
                                                                                                }
                                                                                                scope 121 {
                                                                                                    debug val => _347;
                                                                                                    scope 122 {
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        scope 91 {
                                                                                            debug residual => _278;
                                                                                            scope 92 {
                                                                                            }
                                                                                        }
                                                                                        scope 93 {
                                                                                            debug val => _281;
                                                                                            scope 94 {
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    scope 82 {
                                                                                        debug residual => _249;
                                                                                        scope 83 {
                                                                                        }
                                                                                    }
                                                                                    scope 84 {
                                                                                        debug val => _252;
                                                                                        scope 85 {
                                                                                        }
                                                                                    }
                                                                                    scope 86 {
                                                                                        debug residual => _260;
                                                                                        scope 87 {
                                                                                        }
                                                                                    }
                                                                                    scope 88 {
                                                                                        debug val => _263;
                                                                                        scope 89 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                                scope 77 {
                                                                                    debug residual => _232;
                                                                                    scope 78 {
                                                                                    }
                                                                                }
                                                                                scope 79 {
                                                                                    debug val => _235;
                                                                                    scope 80 {
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        scope 71 {
                                                                            debug residual => _217;
                                                                            scope 72 {
                                                                            }
                                                                        }
                                                                        scope 73 {
                                                                            debug val => _220;
                                                                            scope 74 {
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 51 {
                                                            debug residual => _160;
                                                            scope 52 {
                                                            }
                                                        }
                                                        scope 53 {
                                                            debug val => _163;
                                                            scope 54 {
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            scope 44 {
                                                debug residual => _141;
                                                scope 45 {
                                                }
                                            }
                                            scope 46 {
                                                debug val => _144;
                                                scope 47 {
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        scope 23 {
                            debug residual => _78;
                            scope 24 {
                            }
                        }
                        scope 25 {
                            debug val => _81;
                            scope 26 {
                            }
                        }
                        scope 27 {
                            debug residual => _88;
                            scope 28 {
                            }
                        }
                        scope 29 {
                            debug val => _91;
                            scope 30 {
                            }
                        }
                        scope 31 {
                            debug residual => _98;
                            scope 32 {
                            }
                        }
                        scope 33 {
                            debug val => _101;
                            scope 34 {
                            }
                        }
                    }
                    scope 18 {
                        debug residual => _58;
                        scope 19 {
                        }
                    }
                    scope 20 {
                        debug val => _61;
                        scope 21 {
                        }
                    }
                }
                scope 13 {
                    debug residual => _44;
                    scope 14 {
                    }
                }
                scope 15 {
                    debug val => _47;
                    scope 16 {
                    }
                }
            }
            scope 8 {
                debug residual => _27;
                scope 9 {
                }
            }
            scope 10 {
                debug val => _30;
                scope 11 {
                }
            }
        }
    }
    scope 2 {
        debug residual => _13;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _16;
        scope 5 {
        }
    }

    bb0: {
        _383 = const false;
        _386 = const false;
        _385 = const false;
        _384 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &(*_1);
        _10 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = &(*_10);
        StorageDead(_11);
        _8 = SerumContext::<'_, '_>::load_serum_market(move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_9);
        _7 = <std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode> as Try>::branch(move _8) -> [return: bb3, unwind: bb205];
    }

    bb3: {
        StorageDead(_8);
        _12 = discriminant(_7);
        switchInt(move _12) -> [0: bb4, 1: bb6, otherwise: bb5];
    }

    bb4: {
        StorageLive(_16);
        _16 = move ((_7 as Continue).0: serum_dex::state::Market<'_>);
        _383 = const true;
        _6 = move _16;
        StorageDead(_16);
        _389 = discriminant(_7);
        StorageDead(_10);
        StorageDead(_7);
        StorageLive(_17);
        _18 = discriminant(_2);
        switchInt(move _18) -> [0: bb9, 1: bb8, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        StorageLive(_13);
        _13 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_15);
        _15 = _13;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _15) -> [return: bb7, unwind: bb218];
    }

    bb7: {
        StorageDead(_15);
        StorageDead(_13);
        _387 = discriminant(_7);
        StorageDead(_10);
        StorageDead(_7);
        goto -> bb203;
    }

    bb8: {
        _17 = serum_dex::matching::Side::Ask;
        goto -> bb10;
    }

    bb9: {
        _17 = serum_dex::matching::Side::Bid;
        goto -> bb10;
    }

    bb10: {
        StorageLive(_19);
        StorageLive(_20);
        StorageLive(_21);
        StorageLive(_22);
        _22 = _4;
        StorageLive(_23);
        StorageLive(_24);
        StorageLive(_25);
        _25 = &_6;
        _24 = <serum_dex::state::Market<'_> as Deref>::deref(move _25) -> [return: bb11, unwind: bb217];
    }

    bb11: {
        StorageDead(_25);
        _23 = ((*_24).16: u64);
        _21 = calculate_serum_max_coin_qty(move _22, move _23) -> [return: bb12, unwind: bb217];
    }

    bb12: {
        StorageDead(_23);
        StorageDead(_22);
        _20 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _21) -> [return: bb13, unwind: bb217];
    }

    bb13: {
        StorageDead(_21);
        _26 = discriminant(_20);
        switchInt(move _26) -> [0: bb14, 1: bb15, otherwise: bb5];
    }

    bb14: {
        StorageLive(_30);
        _30 = ((_20 as Continue).0: u64);
        _19 = _30;
        StorageDead(_30);
        StorageDead(_24);
        StorageDead(_20);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        _34 = _3;
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _37 = &_6;
        _36 = <serum_dex::state::Market<'_> as Deref>::deref(move _37) -> [return: bb17, unwind: bb217];
    }

    bb15: {
        StorageLive(_27);
        _27 = ((_20 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_29);
        _29 = _27;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _29) -> [return: bb16, unwind: bb217];
    }

    bb16: {
        StorageDead(_29);
        StorageDead(_27);
        StorageDead(_24);
        StorageDead(_20);
        goto -> bb202;
    }

    bb17: {
        StorageDead(_37);
        _35 = ((*_36).17: u64);
        StorageLive(_38);
        _38 = ((*_1).14: u32);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        _41 = &_6;
        _40 = <serum_dex::state::Market<'_> as Deref>::deref(move _41) -> [return: bb18, unwind: bb217];
    }

    bb18: {
        StorageDead(_41);
        _39 = ((*_40).16: u64);
        StorageLive(_42);
        _42 = _2;
        _33 = calculate_serum_limit_price(move _34, move _35, move _38, move _39, move _42) -> [return: bb19, unwind: bb217];
    }

    bb19: {
        StorageDead(_42);
        StorageDead(_39);
        StorageDead(_38);
        StorageDead(_35);
        StorageDead(_34);
        _32 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _33) -> [return: bb20, unwind: bb217];
    }

    bb20: {
        StorageDead(_33);
        _43 = discriminant(_32);
        switchInt(move _43) -> [0: bb21, 1: bb22, otherwise: bb5];
    }

    bb21: {
        StorageLive(_47);
        _47 = ((_32 as Continue).0: u64);
        _31 = _47;
        StorageDead(_47);
        StorageDead(_40);
        StorageDead(_36);
        StorageDead(_32);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        StorageLive(_52);
        _52 = _31;
        StorageLive(_53);
        _53 = _19;
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &_6;
        _55 = <serum_dex::state::Market<'_> as Deref>::deref(move _56) -> [return: bb24, unwind: bb217];
    }

    bb22: {
        StorageLive(_44);
        _44 = ((_32 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_46);
        _46 = _44;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _46) -> [return: bb23, unwind: bb217];
    }

    bb23: {
        StorageDead(_46);
        StorageDead(_44);
        StorageDead(_40);
        StorageDead(_36);
        StorageDead(_32);
        goto -> bb201;
    }

    bb24: {
        StorageDead(_56);
        _54 = ((*_55).17: u64);
        _51 = calculate_serum_max_native_pc_quantity(move _52, move _53, move _54) -> [return: bb25, unwind: bb217];
    }

    bb25: {
        StorageDead(_54);
        StorageDead(_53);
        StorageDead(_52);
        _50 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _51) -> [return: bb26, unwind: bb217];
    }

    bb26: {
        StorageDead(_51);
        _57 = discriminant(_50);
        switchInt(move _57) -> [0: bb27, 1: bb28, otherwise: bb5];
    }

    bb27: {
        StorageLive(_61);
        _61 = ((_50 as Continue).0: u64);
        _49 = _61;
        StorageDead(_61);
        StorageLive(_62);
        _62 = _5;
        _48 = <u64 as Ord>::min(move _49, move _62) -> [return: bb30, unwind: bb217];
    }

    bb28: {
        StorageLive(_58);
        _58 = ((_50 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_60);
        _60 = _58;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _60) -> [return: bb29, unwind: bb217];
    }

    bb29: {
        StorageDead(_60);
        StorageDead(_58);
        StorageDead(_49);
        StorageDead(_55);
        StorageDead(_50);
        goto -> bb200;
    }

    bb30: {
        StorageDead(_62);
        StorageDead(_49);
        StorageDead(_55);
        StorageDead(_50);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        _65 = _19;
        _64 = Eq(move _65, const 0_u64);
        switchInt(move _64) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        StorageDead(_65);
        goto -> bb33;
    }

    bb32: {
        StorageDead(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _48;
        _66 = Eq(move _67, const 0_u64);
        switchInt(move _66) -> [0: bb35, otherwise: bb33];
    }

    bb33: {
        StorageDead(_67);
        StorageLive(_69);
        _69 = ExternalSpotFill::empty() -> [return: bb34, unwind: bb217];
    }

    bb34: {
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _69);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb200;
    }

    bb35: {
        StorageDead(_67);
        _63 = const ();
        StorageDead(_66);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_70);
        StorageLive(_71);
        _71 = _17;
        StorageLive(_72);
        StorageLive(_73);
        StorageLive(_74);
        StorageLive(_75);
        StorageLive(_76);
        _76 = _31;
        _75 = NonZeroU64::new(move _76) -> [return: bb36, unwind: bb217];
    }

    bb36: {
        StorageDead(_76);
        _74 = <Option<NonZeroU64> as SafeUnwrap>::safe_unwrap(move _75) -> [return: bb37, unwind: bb217];
    }

    bb37: {
        StorageDead(_75);
        _73 = <std::result::Result<NonZeroU64, error::ErrorCode> as Try>::branch(move _74) -> [return: bb38, unwind: bb217];
    }

    bb38: {
        StorageDead(_74);
        _77 = discriminant(_73);
        switchInt(move _77) -> [0: bb39, 1: bb40, otherwise: bb5];
    }

    bb39: {
        StorageLive(_81);
        _81 = ((_73 as Continue).0: std::num::NonZeroU64);
        _72 = _81;
        StorageDead(_81);
        StorageLive(_82);
        StorageLive(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        _86 = _19;
        _85 = NonZeroU64::new(move _86) -> [return: bb42, unwind: bb217];
    }

    bb40: {
        StorageLive(_78);
        _78 = ((_73 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_80);
        _80 = _78;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _80) -> [return: bb41, unwind: bb217];
    }

    bb41: {
        StorageDead(_80);
        StorageDead(_78);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb198;
    }

    bb42: {
        StorageDead(_86);
        _84 = <Option<NonZeroU64> as SafeUnwrap>::safe_unwrap(move _85) -> [return: bb43, unwind: bb217];
    }

    bb43: {
        StorageDead(_85);
        _83 = <std::result::Result<NonZeroU64, error::ErrorCode> as Try>::branch(move _84) -> [return: bb44, unwind: bb217];
    }

    bb44: {
        StorageDead(_84);
        _87 = discriminant(_83);
        switchInt(move _87) -> [0: bb45, 1: bb46, otherwise: bb5];
    }

    bb45: {
        StorageLive(_91);
        _91 = ((_83 as Continue).0: std::num::NonZeroU64);
        _82 = _91;
        StorageDead(_91);
        StorageLive(_92);
        StorageLive(_93);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = _48;
        _95 = NonZeroU64::new(move _96) -> [return: bb48, unwind: bb217];
    }

    bb46: {
        StorageLive(_88);
        _88 = ((_83 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_90);
        _90 = _88;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _90) -> [return: bb47, unwind: bb217];
    }

    bb47: {
        StorageDead(_90);
        StorageDead(_88);
        StorageDead(_82);
        StorageDead(_72);
        StorageDead(_71);
        goto -> bb197;
    }

    bb48: {
        StorageDead(_96);
        _94 = <Option<NonZeroU64> as SafeUnwrap>::safe_unwrap(move _95) -> [return: bb49, unwind: bb217];
    }

    bb49: {
        StorageDead(_95);
        _93 = <std::result::Result<NonZeroU64, error::ErrorCode> as Try>::branch(move _94) -> [return: bb50, unwind: bb217];
    }

    bb50: {
        StorageDead(_94);
        _97 = discriminant(_93);
        switchInt(move _97) -> [0: bb51, 1: bb52, otherwise: bb5];
    }

    bb51: {
        StorageLive(_101);
        _101 = ((_93 as Continue).0: std::num::NonZeroU64);
        _92 = _101;
        StorageDead(_101);
        StorageLive(_102);
        _102 = serum_dex::instruction::SelfTradeBehavior::AbortTransaction;
        StorageLive(_103);
        _103 = serum_dex::matching::OrderType::ImmediateOrCancel;
        StorageLive(_104);
        _104 = ((*_1).15: i64);
        _70 = NewOrderInstructionV3 { side: move _71, limit_price: move _72, max_coin_qty: move _82, max_native_pc_qty_including_fees: move _92, self_trade_behavior: move _102, order_type: move _103, client_order_id: const 0_u64, limit: const 10_u16, max_ts: move _104 };
        StorageDead(_104);
        StorageDead(_103);
        StorageDead(_102);
        StorageDead(_92);
        StorageDead(_82);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_93);
        StorageDead(_83);
        StorageDead(_73);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        _107 = &_6;
        _106 = <serum_dex::state::Market<'_> as Deref>::deref(move _107) -> [return: bb54, unwind: bb217];
    }

    bb52: {
        StorageLive(_98);
        _98 = ((_93 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_100);
        _100 = _98;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _100) -> [return: bb53, unwind: bb217];
    }

    bb53: {
        StorageDead(_100);
        StorageDead(_98);
        StorageDead(_92);
        StorageDead(_82);
        StorageDead(_72);
        StorageDead(_71);
        StorageDead(_93);
        goto -> bb197;
    }

    bb54: {
        StorageDead(_107);
        _105 = ((*_106).10: u64);
        StorageDead(_106);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        _377 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _407 = (((_377.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _112 = &(*_407);
        _111 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _112) -> [return: bb55, unwind: bb217];
    }

    bb55: {
        _110 = &(*_111);
        _109 = <anchor_spl::token::TokenAccount as Deref>::deref(move _110) -> [return: bb56, unwind: bb217];
    }

    bb56: {
        StorageDead(_112);
        StorageDead(_110);
        _108 = ((*_109).2: u64);
        StorageDead(_111);
        StorageDead(_109);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _378 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _408 = (((_378.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _117 = &(*_408);
        _116 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _117) -> [return: bb57, unwind: bb217];
    }

    bb57: {
        _115 = &(*_116);
        _114 = <anchor_spl::token::TokenAccount as Deref>::deref(move _115) -> [return: bb58, unwind: bb217];
    }

    bb58: {
        StorageDead(_117);
        StorageDead(_115);
        _113 = ((*_114).2: u64);
        StorageDead(_116);
        StorageDead(_114);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        _120 = &_6;
        _119 = <serum_dex::state::Market<'_> as Deref>::deref(move _120) -> [return: bb59, unwind: bb217];
    }

    bb59: {
        StorageDead(_120);
        _118 = ((*_119).19: u64);
        StorageDead(_119);
        StorageLive(_121);
        StorageLive(_122);
        _383 = const false;
        _122 = move _6;
        _121 = std::mem::drop::<serum_dex::state::Market<'_>>(move _122) -> [return: bb60, unwind: bb217];
    }

    bb60: {
        StorageDead(_122);
        StorageDead(_121);
        StorageLive(_123);
        StorageLive(_124);
        StorageLive(_125);
        StorageLive(_126);
        _126 = &(*_1);
        StorageLive(_127);
        _127 = _2;
        StorageLive(_128);
        _128 = move _70;
        _125 = SerumFulfillmentParams::<'_, '_>::invoke_new_order(move _126, move _127, move _128) -> [return: bb61, unwind: bb217];
    }

    bb61: {
        StorageDead(_128);
        StorageDead(_127);
        StorageDead(_126);
        _124 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _125) -> [return: bb62, unwind: bb217];
    }

    bb62: {
        StorageDead(_125);
        _129 = discriminant(_124);
        switchInt(move _129) -> [0: bb63, 1: bb64, otherwise: bb5];
    }

    bb63: {
        StorageLive(_133);
        _133 = ((_124 as Continue).0: ());
        _123 = _133;
        StorageDead(_133);
        StorageDead(_124);
        StorageDead(_123);
        StorageLive(_134);
        StorageLive(_135);
        StorageLive(_136);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        _139 = &(*_1);
        _138 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _139) -> [return: bb66, unwind: bb217];
    }

    bb64: {
        StorageLive(_130);
        _130 = ((_124 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_132);
        _132 = _130;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _132) -> [return: bb65, unwind: bb217];
    }

    bb65: {
        StorageDead(_132);
        StorageDead(_130);
        StorageDead(_124);
        StorageDead(_123);
        goto -> bb196;
    }

    bb66: {
        _137 = &(*_138);
        StorageDead(_139);
        _136 = SerumContext::<'_, '_>::load_serum_market(move _137) -> [return: bb67, unwind: bb217];
    }

    bb67: {
        StorageDead(_137);
        _135 = <std::result::Result<serum_dex::state::Market<'_>, error::ErrorCode> as Try>::branch(move _136) -> [return: bb68, unwind: bb217];
    }

    bb68: {
        StorageDead(_136);
        _140 = discriminant(_135);
        switchInt(move _140) -> [0: bb69, 1: bb70, otherwise: bb5];
    }

    bb69: {
        StorageLive(_144);
        _144 = move ((_135 as Continue).0: serum_dex::state::Market<'_>);
        _386 = const true;
        _134 = move _144;
        StorageDead(_144);
        _393 = discriminant(_135);
        StorageDead(_138);
        StorageDead(_135);
        StorageLive(_145);
        StorageLive(_146);
        StorageLive(_147);
        _147 = &_134;
        _146 = <serum_dex::state::Market<'_> as Deref>::deref(move _147) -> [return: bb72, unwind: bb214];
    }

    bb70: {
        StorageLive(_141);
        _141 = ((_135 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_143);
        _143 = _141;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _143) -> [return: bb71, unwind: bb215];
    }

    bb71: {
        StorageDead(_143);
        StorageDead(_141);
        _391 = discriminant(_135);
        StorageDead(_138);
        StorageDead(_135);
        goto -> bb195;
    }

    bb72: {
        StorageDead(_147);
        _145 = ((*_146).10: u64);
        StorageDead(_146);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        _150 = &_134;
        _149 = <serum_dex::state::Market<'_> as Deref>::deref(move _150) -> [return: bb73, unwind: bb214];
    }

    bb73: {
        StorageDead(_150);
        _148 = ((*_149).19: u64);
        StorageDead(_149);
        StorageLive(_151);
        StorageLive(_152);
        _386 = const false;
        _152 = move _134;
        _151 = std::mem::drop::<serum_dex::state::Market<'_>>(move _152) -> [return: bb74, unwind: bb214];
    }

    bb74: {
        StorageDead(_152);
        StorageDead(_151);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        StorageLive(_158);
        _158 = &(*_1);
        _157 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _158) -> [return: bb75, unwind: bb214];
    }

    bb75: {
        _156 = &(*_157);
        StorageDead(_158);
        _155 = SerumContext::<'_, '_>::load_open_orders(move _156) -> [return: bb76, unwind: bb214];
    }

    bb76: {
        StorageDead(_156);
        _154 = <std::result::Result<Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode> as Try>::branch(move _155) -> [return: bb77, unwind: bb214];
    }

    bb77: {
        StorageDead(_155);
        _159 = discriminant(_154);
        switchInt(move _159) -> [0: bb78, 1: bb79, otherwise: bb5];
    }

    bb78: {
        StorageLive(_163);
        _163 = move ((_154 as Continue).0: std::cell::Ref<'_, serum_dex::state::OpenOrders>);
        _385 = const true;
        _153 = move _163;
        StorageDead(_163);
        _397 = discriminant(_154);
        StorageDead(_157);
        StorageDead(_154);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = &_153;
        _165 = <Ref<'_, serum_dex::state::OpenOrders> as Deref>::deref(move _166) -> [return: bb81, unwind: bb211];
    }

    bb79: {
        StorageLive(_160);
        _160 = ((_154 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb80, unwind: bb212];
    }

    bb80: {
        StorageDead(_162);
        StorageDead(_160);
        _395 = discriminant(_154);
        StorageDead(_157);
        StorageDead(_154);
        goto -> bb194;
    }

    bb81: {
        StorageDead(_166);
        _164 = ((*_165).11: u64);
        StorageDead(_165);
        StorageLive(_167);
        StorageLive(_168);
        _385 = const false;
        _168 = move _153;
        _167 = std::mem::drop::<Ref<'_, serum_dex::state::OpenOrders>>(move _168) -> [return: bb82, unwind: bb211];
    }

    bb82: {
        StorageDead(_168);
        StorageDead(_167);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        _172 = &(*_1);
        _171 = SerumFulfillmentParams::<'_, '_>::invoke_settle_funds(move _172) -> [return: bb83, unwind: bb211];
    }

    bb83: {
        StorageDead(_172);
        _170 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _171) -> [return: bb84, unwind: bb211];
    }

    bb84: {
        StorageDead(_171);
        _173 = discriminant(_170);
        switchInt(move _173) -> [0: bb85, 1: bb86, otherwise: bb5];
    }

    bb85: {
        StorageLive(_177);
        _177 = ((_170 as Continue).0: ());
        _169 = _177;
        StorageDead(_177);
        StorageDead(_170);
        StorageDead(_169);
        StorageLive(_178);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _379 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _409 = (((_379.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _182 = &mut (*_409);
        _181 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::reload(move _182) -> [return: bb88, unwind: bb211];
    }

    bb86: {
        StorageLive(_174);
        _174 = ((_170 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_176);
        _176 = _174;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _176) -> [return: bb87, unwind: bb211];
    }

    bb87: {
        StorageDead(_176);
        StorageDead(_174);
        StorageDead(_170);
        StorageDead(_169);
        goto -> bb193;
    }

    bb88: {
        StorageDead(_182);
        StorageLive(_183);
        _183 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:609:49: 609:53};
        _180 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:609:49: 609:53}>(move _181, move _183) -> [return: bb89, unwind: bb211];
    }

    bb89: {
        StorageDead(_183);
        StorageDead(_181);
        _179 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _180) -> [return: bb90, unwind: bb211];
    }

    bb90: {
        StorageDead(_180);
        _184 = discriminant(_179);
        switchInt(move _184) -> [0: bb91, 1: bb92, otherwise: bb5];
    }

    bb91: {
        StorageLive(_188);
        _188 = ((_179 as Continue).0: ());
        _178 = _188;
        StorageDead(_188);
        StorageDead(_179);
        StorageDead(_178);
        StorageLive(_189);
        StorageLive(_190);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        _380 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _410 = (((_380.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _193 = &mut (*_410);
        _192 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::reload(move _193) -> [return: bb94, unwind: bb211];
    }

    bb92: {
        StorageLive(_185);
        _185 = ((_179 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_187);
        _187 = _185;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _187) -> [return: bb93, unwind: bb211];
    }

    bb93: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_179);
        StorageDead(_178);
        goto -> bb193;
    }

    bb94: {
        StorageDead(_193);
        StorageLive(_194);
        _194 = {closure@programs/drift/src/state/fulfillment_params/serum.rs:613:50: 613:54};
        _191 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/serum.rs:613:50: 613:54}>(move _192, move _194) -> [return: bb95, unwind: bb211];
    }

    bb95: {
        StorageDead(_194);
        StorageDead(_192);
        _190 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _191) -> [return: bb96, unwind: bb211];
    }

    bb96: {
        StorageDead(_191);
        _195 = discriminant(_190);
        switchInt(move _195) -> [0: bb97, 1: bb98, otherwise: bb5];
    }

    bb97: {
        StorageLive(_199);
        _199 = ((_190 as Continue).0: ());
        _189 = _199;
        StorageDead(_199);
        StorageDead(_190);
        StorageDead(_189);
        StorageLive(_200);
        StorageLive(_201);
        StorageLive(_202);
        StorageLive(_203);
        StorageLive(_204);
        _381 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _411 = (((_381.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _204 = &(*_411);
        _203 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _204) -> [return: bb100, unwind: bb211];
    }

    bb98: {
        StorageLive(_196);
        _196 = ((_190 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_198);
        _198 = _196;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _198) -> [return: bb99, unwind: bb211];
    }

    bb99: {
        StorageDead(_198);
        StorageDead(_196);
        StorageDead(_190);
        StorageDead(_189);
        goto -> bb193;
    }

    bb100: {
        _202 = &(*_203);
        _201 = <anchor_spl::token::TokenAccount as Deref>::deref(move _202) -> [return: bb101, unwind: bb211];
    }

    bb101: {
        StorageDead(_204);
        StorageDead(_202);
        _200 = ((*_201).2: u64);
        StorageDead(_203);
        StorageDead(_201);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _382 = deref_copy ((*_1).10: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _412 = (((_382.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _209 = &(*_412);
        _208 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _209) -> [return: bb102, unwind: bb211];
    }

    bb102: {
        _207 = &(*_208);
        _206 = <anchor_spl::token::TokenAccount as Deref>::deref(move _207) -> [return: bb103, unwind: bb211];
    }

    bb103: {
        StorageDead(_209);
        StorageDead(_207);
        _205 = ((*_206).2: u64);
        StorageDead(_208);
        StorageDead(_206);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        StorageLive(_213);
        StorageLive(_214);
        StorageLive(_215);
        _215 = &(*_1);
        _214 = <SerumFulfillmentParams<'_, '_> as Deref>::deref(move _215) -> [return: bb104, unwind: bb211];
    }

    bb104: {
        _213 = &(*_214);
        StorageDead(_215);
        _212 = SerumContext::<'_, '_>::load_open_orders(move _213) -> [return: bb105, unwind: bb211];
    }

    bb105: {
        StorageDead(_213);
        _211 = <std::result::Result<Ref<'_, serum_dex::state::OpenOrders>, error::ErrorCode> as Try>::branch(move _212) -> [return: bb106, unwind: bb211];
    }

    bb106: {
        StorageDead(_212);
        _216 = discriminant(_211);
        switchInt(move _216) -> [0: bb107, 1: bb108, otherwise: bb5];
    }

    bb107: {
        StorageLive(_220);
        _220 = move ((_211 as Continue).0: std::cell::Ref<'_, serum_dex::state::OpenOrders>);
        _384 = const true;
        _210 = move _220;
        StorageDead(_220);
        _401 = discriminant(_211);
        StorageDead(_214);
        StorageDead(_211);
        StorageLive(_221);
        StorageLive(_222);
        StorageLive(_223);
        _223 = &_210;
        _222 = <Ref<'_, serum_dex::state::OpenOrders> as Deref>::deref(move _223) -> [return: bb110, unwind: bb208];
    }

    bb108: {
        StorageLive(_217);
        _217 = ((_211 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_219);
        _219 = _217;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _219) -> [return: bb109, unwind: bb209];
    }

    bb109: {
        StorageDead(_219);
        StorageDead(_217);
        _399 = discriminant(_211);
        StorageDead(_214);
        StorageDead(_211);
        goto -> bb192;
    }

    bb110: {
        StorageDead(_223);
        _221 = ((*_222).11: u64);
        StorageDead(_222);
        StorageLive(_224);
        StorageLive(_225);
        _384 = const false;
        _225 = move _210;
        _224 = std::mem::drop::<Ref<'_, serum_dex::state::OpenOrders>>(move _225) -> [return: bb111, unwind: bb208];
    }

    bb111: {
        StorageDead(_225);
        StorageDead(_224);
        StorageLive(_226);
        StorageLive(_227);
        StorageLive(_228);
        StorageLive(_229);
        _229 = _164;
        StorageLive(_230);
        _230 = _221;
        _228 = <u64 as SafeMath>::safe_sub(move _229, move _230) -> [return: bb112, unwind: bb208];
    }

    bb112: {
        StorageDead(_230);
        StorageDead(_229);
        _227 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _228) -> [return: bb113, unwind: bb208];
    }

    bb113: {
        StorageDead(_228);
        _231 = discriminant(_227);
        switchInt(move _231) -> [0: bb114, 1: bb115, otherwise: bb5];
    }

    bb114: {
        StorageLive(_235);
        _235 = ((_227 as Continue).0: u64);
        _226 = _235;
        StorageDead(_235);
        StorageDead(_227);
        StorageLive(_238);
        StorageLive(_239);
        StorageLive(_240);
        _240 = _200;
        StorageLive(_241);
        _241 = _108;
        _239 = Gt(move _240, move _241);
        switchInt(move _239) -> [0: bb118, otherwise: bb117];
    }

    bb115: {
        StorageLive(_232);
        _232 = ((_227 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_234);
        _234 = _232;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _234) -> [return: bb116, unwind: bb208];
    }

    bb116: {
        StorageDead(_234);
        StorageDead(_232);
        StorageDead(_227);
        goto -> bb191;
    }

    bb117: {
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_242);
        _242 = SpotBalanceType::Deposit;
        StorageLive(_243);
        StorageLive(_244);
        StorageLive(_245);
        StorageLive(_246);
        _246 = _200;
        StorageLive(_247);
        _247 = _108;
        _245 = <u64 as SafeMath>::safe_sub(move _246, move _247) -> [return: bb119, unwind: bb208];
    }

    bb118: {
        StorageDead(_241);
        StorageDead(_240);
        StorageLive(_253);
        _253 = SpotBalanceType::Borrow;
        StorageLive(_254);
        StorageLive(_255);
        StorageLive(_256);
        StorageLive(_257);
        _257 = _108;
        StorageLive(_258);
        _258 = _200;
        _256 = <u64 as SafeMath>::safe_sub(move _257, move _258) -> [return: bb124, unwind: bb208];
    }

    bb119: {
        StorageDead(_247);
        StorageDead(_246);
        _244 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _245) -> [return: bb120, unwind: bb208];
    }

    bb120: {
        StorageDead(_245);
        _248 = discriminant(_244);
        switchInt(move _248) -> [0: bb121, 1: bb122, otherwise: bb5];
    }

    bb121: {
        StorageLive(_252);
        _252 = ((_244 as Continue).0: u64);
        _243 = _252;
        StorageDead(_252);
        _238 = (move _242, move _243);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_244);
        goto -> bb129;
    }

    bb122: {
        StorageLive(_249);
        _249 = ((_244 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_251);
        _251 = _249;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _251) -> [return: bb123, unwind: bb208];
    }

    bb123: {
        StorageDead(_251);
        StorageDead(_249);
        StorageDead(_243);
        StorageDead(_242);
        StorageDead(_244);
        goto -> bb190;
    }

    bb124: {
        StorageDead(_258);
        StorageDead(_257);
        _255 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _256) -> [return: bb125, unwind: bb208];
    }

    bb125: {
        StorageDead(_256);
        _259 = discriminant(_255);
        switchInt(move _259) -> [0: bb126, 1: bb127, otherwise: bb5];
    }

    bb126: {
        StorageLive(_263);
        _263 = ((_255 as Continue).0: u64);
        _254 = _263;
        StorageDead(_263);
        _238 = (move _253, move _254);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_255);
        goto -> bb129;
    }

    bb127: {
        StorageLive(_260);
        _260 = ((_255 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_262);
        _262 = _260;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _262) -> [return: bb128, unwind: bb208];
    }

    bb128: {
        StorageDead(_262);
        StorageDead(_260);
        StorageDead(_254);
        StorageDead(_253);
        StorageDead(_255);
        goto -> bb190;
    }

    bb129: {
        StorageDead(_239);
        StorageLive(_236);
        _236 = (_238.0: state::spot_market::SpotBalanceType);
        StorageLive(_237);
        _237 = (_238.1: u64);
        StorageDead(_238);
        StorageLive(_264);
        StorageLive(_265);
        StorageLive(_266);
        _266 = _237;
        _265 = Eq(move _266, const 0_u64);
        switchInt(move _265) -> [0: bb133, otherwise: bb130];
    }

    bb130: {
        StorageDead(_266);
        StorageLive(_268);
        StorageLive(_269);
        StorageLive(_270);
        _270 = const "No base filled on serum";
        _269 = &(*_270);
        _268 = solana_program::log::sol_log(move _269) -> [return: bb131, unwind: bb208];
    }

    bb131: {
        StorageDead(_269);
        StorageDead(_270);
        StorageDead(_268);
        StorageLive(_271);
        _271 = ExternalSpotFill::empty() -> [return: bb132, unwind: bb208];
    }

    bb132: {
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _271);
        StorageDead(_271);
        StorageDead(_265);
        StorageDead(_264);
        goto -> bb189;
    }

    bb133: {
        StorageDead(_266);
        _264 = const ();
        StorageDead(_265);
        StorageDead(_264);
        StorageLive(_272);
        StorageLive(_273);
        StorageLive(_274);
        StorageLive(_275);
        _275 = _148;
        StorageLive(_276);
        _276 = _118;
        _274 = <u64 as SafeMath>::safe_sub(move _275, move _276) -> [return: bb134, unwind: bb208];
    }

    bb134: {
        StorageDead(_276);
        StorageDead(_275);
        _273 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _274) -> [return: bb135, unwind: bb208];
    }

    bb135: {
        StorageDead(_274);
        _277 = discriminant(_273);
        switchInt(move _277) -> [0: bb136, 1: bb137, otherwise: bb5];
    }

    bb136: {
        StorageLive(_281);
        _281 = ((_273 as Continue).0: u64);
        _272 = _281;
        StorageDead(_281);
        StorageDead(_273);
        StorageLive(_282);
        _282 = _272;
        StorageLive(_285);
        StorageLive(_286);
        StorageLive(_287);
        _287 = &_236;
        StorageLive(_288);
        _376 = const _;
        _288 = &(*_376);
        _286 = <SpotBalanceType as PartialEq>::eq(move _287, move _288) -> [return: bb139, unwind: bb208];
    }

    bb137: {
        StorageLive(_278);
        _278 = ((_273 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_280);
        _280 = _278;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _280) -> [return: bb138, unwind: bb208];
    }

    bb138: {
        StorageDead(_280);
        StorageDead(_278);
        StorageDead(_273);
        goto -> bb188;
    }

    bb139: {
        switchInt(move _286) -> [0: bb161, otherwise: bb140];
    }

    bb140: {
        StorageDead(_288);
        StorageDead(_287);
        StorageLive(_290);
        StorageLive(_291);
        StorageLive(_292);
        StorageLive(_293);
        StorageLive(_294);
        StorageLive(_295);
        StorageLive(_296);
        _296 = _205;
        StorageLive(_297);
        _297 = _113;
        _295 = <u64 as SafeMath>::safe_sub(move _296, move _297) -> [return: bb141, unwind: bb208];
    }

    bb141: {
        StorageDead(_297);
        StorageDead(_296);
        _294 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _295) -> [return: bb142, unwind: bb208];
    }

    bb142: {
        StorageDead(_295);
        _298 = discriminant(_294);
        switchInt(move _298) -> [0: bb143, 1: bb144, otherwise: bb5];
    }

    bb143: {
        StorageLive(_302);
        _302 = ((_294 as Continue).0: u64);
        _293 = _302;
        StorageDead(_302);
        StorageLive(_303);
        _303 = _226;
        _292 = <u64 as SafeMath>::safe_sub(move _293, move _303) -> [return: bb146, unwind: bb208];
    }

    bb144: {
        StorageLive(_299);
        _299 = ((_294 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_301);
        _301 = _299;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _301) -> [return: bb145, unwind: bb208];
    }

    bb145: {
        StorageDead(_301);
        StorageDead(_299);
        StorageDead(_293);
        StorageDead(_292);
        goto -> bb186;
    }

    bb146: {
        StorageDead(_303);
        StorageDead(_293);
        _291 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _292) -> [return: bb147, unwind: bb208];
    }

    bb147: {
        StorageDead(_292);
        _304 = discriminant(_291);
        switchInt(move _304) -> [0: bb148, 1: bb149, otherwise: bb5];
    }

    bb148: {
        StorageLive(_308);
        _308 = ((_291 as Continue).0: u64);
        _290 = _308;
        StorageDead(_308);
        StorageDead(_294);
        StorageDead(_291);
        StorageLive(_309);
        _309 = SpotBalanceType::Deposit;
        StorageLive(_310);
        StorageLive(_311);
        StorageLive(_312);
        StorageLive(_313);
        StorageLive(_314);
        StorageLive(_315);
        StorageLive(_316);
        _316 = _290;
        StorageLive(_317);
        _317 = _282;
        _315 = <u64 as SafeMath>::safe_add(move _316, move _317) -> [return: bb151, unwind: bb208];
    }

    bb149: {
        StorageLive(_305);
        _305 = ((_291 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_307);
        _307 = _305;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _307) -> [return: bb150, unwind: bb208];
    }

    bb150: {
        StorageDead(_307);
        StorageDead(_305);
        goto -> bb186;
    }

    bb151: {
        StorageDead(_317);
        StorageDead(_316);
        _314 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _315) -> [return: bb152, unwind: bb208];
    }

    bb152: {
        StorageDead(_315);
        _318 = discriminant(_314);
        switchInt(move _318) -> [0: bb153, 1: bb154, otherwise: bb5];
    }

    bb153: {
        StorageLive(_322);
        _322 = ((_314 as Continue).0: u64);
        _313 = _322;
        StorageDead(_322);
        StorageLive(_323);
        _323 = _272;
        _312 = <u64 as SafeMath>::safe_add(move _313, move _323) -> [return: bb156, unwind: bb208];
    }

    bb154: {
        StorageLive(_319);
        _319 = ((_314 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_321);
        _321 = _319;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _321) -> [return: bb155, unwind: bb208];
    }

    bb155: {
        StorageDead(_321);
        StorageDead(_319);
        StorageDead(_313);
        StorageDead(_312);
        goto -> bb185;
    }

    bb156: {
        StorageDead(_323);
        StorageDead(_313);
        _311 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _312) -> [return: bb157, unwind: bb208];
    }

    bb157: {
        StorageDead(_312);
        _324 = discriminant(_311);
        switchInt(move _324) -> [0: bb158, 1: bb159, otherwise: bb5];
    }

    bb158: {
        StorageLive(_328);
        _328 = ((_311 as Continue).0: u64);
        _310 = _328;
        StorageDead(_328);
        _285 = (move _309, move _310);
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_290);
        StorageDead(_314);
        StorageDead(_311);
        goto -> bb182;
    }

    bb159: {
        StorageLive(_325);
        _325 = ((_311 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_327);
        _327 = _325;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _327) -> [return: bb160, unwind: bb208];
    }

    bb160: {
        StorageDead(_327);
        StorageDead(_325);
        goto -> bb185;
    }

    bb161: {
        StorageDead(_288);
        StorageDead(_287);
        StorageLive(_329);
        StorageLive(_330);
        StorageLive(_331);
        StorageLive(_332);
        StorageLive(_333);
        StorageLive(_334);
        StorageLive(_335);
        _335 = _113;
        StorageLive(_336);
        _336 = _226;
        _334 = <u64 as SafeMath>::safe_add(move _335, move _336) -> [return: bb162, unwind: bb208];
    }

    bb162: {
        StorageDead(_336);
        StorageDead(_335);
        _333 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _334) -> [return: bb163, unwind: bb208];
    }

    bb163: {
        StorageDead(_334);
        _337 = discriminant(_333);
        switchInt(move _337) -> [0: bb164, 1: bb165, otherwise: bb5];
    }

    bb164: {
        StorageLive(_341);
        _341 = ((_333 as Continue).0: u64);
        _332 = _341;
        StorageDead(_341);
        StorageLive(_342);
        _342 = _205;
        _331 = <u64 as SafeMath>::safe_sub(move _332, move _342) -> [return: bb167, unwind: bb208];
    }

    bb165: {
        StorageLive(_338);
        _338 = ((_333 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_340);
        _340 = _338;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _340) -> [return: bb166, unwind: bb208];
    }

    bb166: {
        StorageDead(_340);
        StorageDead(_338);
        StorageDead(_332);
        StorageDead(_331);
        goto -> bb184;
    }

    bb167: {
        StorageDead(_342);
        StorageDead(_332);
        _330 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _331) -> [return: bb168, unwind: bb208];
    }

    bb168: {
        StorageDead(_331);
        _343 = discriminant(_330);
        switchInt(move _343) -> [0: bb169, 1: bb170, otherwise: bb5];
    }

    bb169: {
        StorageLive(_347);
        _347 = ((_330 as Continue).0: u64);
        _329 = _347;
        StorageDead(_347);
        StorageDead(_333);
        StorageDead(_330);
        StorageLive(_348);
        _348 = SpotBalanceType::Borrow;
        StorageLive(_349);
        StorageLive(_350);
        StorageLive(_351);
        StorageLive(_352);
        StorageLive(_353);
        StorageLive(_354);
        StorageLive(_355);
        _355 = _329;
        StorageLive(_356);
        _356 = _282;
        _354 = <u64 as SafeMath>::safe_sub(move _355, move _356) -> [return: bb172, unwind: bb208];
    }

    bb170: {
        StorageLive(_344);
        _344 = ((_330 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_346);
        _346 = _344;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _346) -> [return: bb171, unwind: bb208];
    }

    bb171: {
        StorageDead(_346);
        StorageDead(_344);
        goto -> bb184;
    }

    bb172: {
        StorageDead(_356);
        StorageDead(_355);
        _353 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _354) -> [return: bb173, unwind: bb208];
    }

    bb173: {
        StorageDead(_354);
        _357 = discriminant(_353);
        switchInt(move _357) -> [0: bb174, 1: bb175, otherwise: bb5];
    }

    bb174: {
        StorageLive(_361);
        _361 = ((_353 as Continue).0: u64);
        _352 = _361;
        StorageDead(_361);
        StorageLive(_362);
        _362 = _272;
        _351 = <u64 as SafeMath>::safe_sub(move _352, move _362) -> [return: bb177, unwind: bb208];
    }

    bb175: {
        StorageLive(_358);
        _358 = ((_353 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_360);
        _360 = _358;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _360) -> [return: bb176, unwind: bb208];
    }

    bb176: {
        StorageDead(_360);
        StorageDead(_358);
        StorageDead(_352);
        StorageDead(_351);
        goto -> bb183;
    }

    bb177: {
        StorageDead(_362);
        StorageDead(_352);
        _350 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _351) -> [return: bb178, unwind: bb208];
    }

    bb178: {
        StorageDead(_351);
        _363 = discriminant(_350);
        switchInt(move _363) -> [0: bb179, 1: bb180, otherwise: bb5];
    }

    bb179: {
        StorageLive(_367);
        _367 = ((_350 as Continue).0: u64);
        _349 = _367;
        StorageDead(_367);
        _285 = (move _348, move _349);
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_329);
        StorageDead(_353);
        StorageDead(_350);
        goto -> bb182;
    }

    bb180: {
        StorageLive(_364);
        _364 = ((_350 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_366);
        _366 = _364;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _366) -> [return: bb181, unwind: bb208];
    }

    bb181: {
        StorageDead(_366);
        StorageDead(_364);
        goto -> bb183;
    }

    bb182: {
        StorageDead(_286);
        StorageLive(_283);
        _283 = (_285.0: state::spot_market::SpotBalanceType);
        StorageLive(_284);
        _284 = (_285.1: u64);
        StorageDead(_285);
        StorageLive(_368);
        StorageLive(_369);
        _369 = _237;
        StorageLive(_370);
        _370 = _284;
        StorageLive(_371);
        _371 = _236;
        StorageLive(_372);
        _372 = _283;
        StorageLive(_373);
        _373 = _282;
        StorageLive(_374);
        _374 = _272;
        StorageLive(_375);
        _375 = _226;
        _368 = ExternalSpotFill { base_asset_amount_filled: move _369, base_update_direction: move _371, quote_asset_amount_filled: move _370, quote_update_direction: move _372, settled_referrer_rebate: move _375, unsettled_referrer_rebate: move _374, fee: move _373 };
        StorageDead(_375);
        StorageDead(_374);
        StorageDead(_373);
        StorageDead(_372);
        StorageDead(_371);
        StorageDead(_370);
        StorageDead(_369);
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _368);
        StorageDead(_368);
        StorageDead(_284);
        StorageDead(_283);
        StorageDead(_282);
        StorageDead(_272);
        StorageDead(_237);
        StorageDead(_236);
        StorageDead(_226);
        StorageDead(_221);
        _384 = const false;
        StorageDead(_210);
        StorageDead(_205);
        StorageDead(_200);
        StorageDead(_164);
        _385 = const false;
        StorageDead(_153);
        StorageDead(_148);
        StorageDead(_145);
        _386 = const false;
        StorageDead(_134);
        StorageDead(_118);
        StorageDead(_113);
        StorageDead(_108);
        StorageDead(_105);
        StorageDead(_70);
        StorageDead(_48);
        StorageDead(_31);
        StorageDead(_19);
        StorageDead(_17);
        _383 = const false;
        StorageDead(_6);
        goto -> bb204;
    }

    bb183: {
        StorageDead(_349);
        StorageDead(_348);
        StorageDead(_329);
        StorageDead(_353);
        StorageDead(_350);
        goto -> bb187;
    }

    bb184: {
        StorageDead(_333);
        StorageDead(_330);
        StorageDead(_329);
        goto -> bb187;
    }

    bb185: {
        StorageDead(_310);
        StorageDead(_309);
        StorageDead(_290);
        StorageDead(_314);
        StorageDead(_311);
        goto -> bb187;
    }

    bb186: {
        StorageDead(_294);
        StorageDead(_291);
        StorageDead(_290);
        goto -> bb187;
    }

    bb187: {
        StorageDead(_286);
        StorageDead(_285);
        StorageDead(_282);
        goto -> bb188;
    }

    bb188: {
        StorageDead(_272);
        goto -> bb189;
    }

    bb189: {
        StorageDead(_237);
        StorageDead(_236);
        goto -> bb191;
    }

    bb190: {
        StorageDead(_239);
        StorageDead(_238);
        goto -> bb191;
    }

    bb191: {
        StorageDead(_226);
        StorageDead(_221);
        goto -> bb192;
    }

    bb192: {
        _384 = const false;
        StorageDead(_210);
        StorageDead(_205);
        StorageDead(_200);
        goto -> bb193;
    }

    bb193: {
        StorageDead(_164);
        goto -> bb194;
    }

    bb194: {
        _385 = const false;
        StorageDead(_153);
        StorageDead(_148);
        StorageDead(_145);
        goto -> bb195;
    }

    bb195: {
        _386 = const false;
        StorageDead(_134);
        goto -> bb196;
    }

    bb196: {
        StorageDead(_118);
        StorageDead(_113);
        StorageDead(_108);
        StorageDead(_105);
        goto -> bb199;
    }

    bb197: {
        StorageDead(_83);
        goto -> bb198;
    }

    bb198: {
        StorageDead(_73);
        goto -> bb199;
    }

    bb199: {
        StorageDead(_70);
        goto -> bb200;
    }

    bb200: {
        StorageDead(_48);
        goto -> bb201;
    }

    bb201: {
        StorageDead(_31);
        goto -> bb202;
    }

    bb202: {
        StorageDead(_19);
        StorageDead(_17);
        switchInt(_383) -> [0: bb203, otherwise: bb206];
    }

    bb203: {
        _383 = const false;
        StorageDead(_6);
        goto -> bb204;
    }

    bb204: {
        return;
    }

    bb205 (cleanup): {
        resume;
    }

    bb206: {
        drop(_6) -> [return: bb203, unwind: bb205];
    }

    bb207 (cleanup): {
        drop(_210) -> [return: bb211, unwind terminate(cleanup)];
    }

    bb208 (cleanup): {
        switchInt(_384) -> [0: bb211, otherwise: bb207];
    }

    bb209 (cleanup): {
        _403 = discriminant(_211);
        goto -> bb211;
    }

    bb210 (cleanup): {
        drop(_153) -> [return: bb214, unwind terminate(cleanup)];
    }

    bb211 (cleanup): {
        switchInt(_385) -> [0: bb214, otherwise: bb210];
    }

    bb212 (cleanup): {
        _404 = discriminant(_154);
        goto -> bb214;
    }

    bb213 (cleanup): {
        drop(_134) -> [return: bb217, unwind terminate(cleanup)];
    }

    bb214 (cleanup): {
        switchInt(_386) -> [0: bb217, otherwise: bb213];
    }

    bb215 (cleanup): {
        _405 = discriminant(_135);
        goto -> bb217;
    }

    bb216 (cleanup): {
        drop(_6) -> [return: bb205, unwind terminate(cleanup)];
    }

    bb217 (cleanup): {
        switchInt(_383) -> [0: bb205, otherwise: bb216];
    }

    bb218 (cleanup): {
        _406 = discriminant(_7);
        goto -> bb205;
    }
}
