// MIR for `openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:320:1: 320:75>::fulfill_order` before PreCodegen

fn openbook_v2::<impl at programs/drift/src/state/fulfillment_params/openbook_v2.rs:320:1: 320:75>::fulfill_order(_1: &mut OpenbookV2FulfillmentParams<'_, '_>, _2: controller::position::PositionDirection, _3: u64, _4: u64, _5: u64) -> std::result::Result<ExternalSpotFill, error::ErrorCode> {
    debug self => _1;
    debug taker_direction => _2;
    debug taker_price => _3;
    debug taker_base_asset_amount => _4;
    debug taker_max_quote_asset_amount => _5;
    let mut _0: std::result::Result<state::spot_fulfillment_params::ExternalSpotFill, error::ErrorCode>;
    let _6: openbook_v2_light::Market;
    let mut _7: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, openbook_v2_light::Market>;
    let mut _8: std::result::Result<openbook_v2_light::Market, error::ErrorCode>;
    let mut _9: &state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _14: openbook_v2_light::Market;
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _17: std::result::Result<u64, error::ErrorCode>;
    let mut _18: u64;
    let mut _19: u64;
    let mut _20: i64;
    let mut _21: isize;
    let mut _23: !;
    let mut _24: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _27: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _28: std::result::Result<u64, error::ErrorCode>;
    let mut _29: u64;
    let mut _30: u64;
    let mut _31: i64;
    let mut _32: u32;
    let mut _33: u8;
    let mut _34: u64;
    let mut _35: i64;
    let mut _36: controller::position::PositionDirection;
    let mut _37: isize;
    let mut _39: !;
    let mut _40: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _43: u64;
    let mut _44: u64;
    let mut _45: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _46: std::result::Result<u64, error::ErrorCode>;
    let mut _47: u64;
    let mut _48: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _49: std::result::Result<u64, error::ErrorCode>;
    let mut _50: u64;
    let mut _51: i64;
    let mut _52: u64;
    let mut _53: isize;
    let mut _55: !;
    let mut _56: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _58: u64;
    let mut _59: isize;
    let mut _61: !;
    let mut _62: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _64: u64;
    let mut _66: i64;
    let mut _67: u64;
    let mut _68: i64;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let mut _74: isize;
    let mut _76: openbook_v2_light::Side;
    let mut _77: i64;
    let mut _78: u64;
    let mut _79: i64;
    let mut _80: i64;
    let mut _81: openbook_v2_light::PlaceOrderType;
    let mut _83: &openbook_v2_light::instruction::PlaceTakeOrder;
    let mut _85: &anchor_spl::token::spl_token::state::Account;
    let mut _86: &anchor_spl::token::TokenAccount;
    let _87: &anchor_spl::token::TokenAccount;
    let mut _88: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _90: &anchor_spl::token::spl_token::state::Account;
    let mut _91: &anchor_spl::token::TokenAccount;
    let _92: &anchor_spl::token::TokenAccount;
    let mut _93: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let _94: ();
    let mut _95: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _96: std::result::Result<(), error::ErrorCode>;
    let mut _97: &state::fulfillment_params::openbook_v2::OpenbookV2FulfillmentParams<'_, '_>;
    let mut _98: std::vec::Vec<u8>;
    let mut _99: isize;
    let mut _101: !;
    let mut _102: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _104: ();
    let mut _105: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _106: std::result::Result<(), error::ErrorCode>;
    let mut _107: std::result::Result<(), anchor_lang::error::Error>;
    let mut _108: &mut anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _109: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:375:49: 375:53};
    let mut _110: isize;
    let mut _112: !;
    let mut _113: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _115: ();
    let mut _116: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _117: std::result::Result<(), error::ErrorCode>;
    let mut _118: std::result::Result<(), anchor_lang::error::Error>;
    let mut _119: &mut anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _120: {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:379:50: 379:54};
    let mut _121: isize;
    let mut _123: !;
    let mut _124: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _127: &anchor_spl::token::spl_token::state::Account;
    let mut _128: &anchor_spl::token::TokenAccount;
    let _129: &anchor_spl::token::TokenAccount;
    let mut _130: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _132: &anchor_spl::token::spl_token::state::Account;
    let mut _133: &anchor_spl::token::TokenAccount;
    let _134: &anchor_spl::token::TokenAccount;
    let mut _135: &anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _138: (state::spot_market::SpotBalanceType, u64);
    let mut _139: bool;
    let mut _140: u64;
    let mut _141: u64;
    let mut _142: state::spot_market::SpotBalanceType;
    let mut _143: u64;
    let mut _144: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _145: std::result::Result<u64, error::ErrorCode>;
    let mut _146: u64;
    let mut _147: u64;
    let mut _148: isize;
    let mut _150: !;
    let mut _151: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _153: state::spot_market::SpotBalanceType;
    let mut _154: u64;
    let mut _155: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _156: std::result::Result<u64, error::ErrorCode>;
    let mut _157: u64;
    let mut _158: u64;
    let mut _159: isize;
    let mut _161: !;
    let mut _162: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _164: ();
    let mut _165: bool;
    let mut _166: u64;
    let mut _167: !;
    let _168: ();
    let mut _169: &str;
    let _170: &str;
    let mut _171: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _174: (state::spot_market::SpotBalanceType, u64);
    let mut _175: bool;
    let mut _176: &state::spot_market::SpotBalanceType;
    let mut _177: &state::spot_market::SpotBalanceType;
    let _178: state::spot_market::SpotBalanceType;
    let mut _180: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _181: std::result::Result<u64, error::ErrorCode>;
    let mut _182: u64;
    let mut _183: u64;
    let mut _184: isize;
    let mut _186: !;
    let mut _187: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _189: state::spot_market::SpotBalanceType;
    let mut _190: u64;
    let mut _192: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _193: std::result::Result<u64, error::ErrorCode>;
    let mut _194: u64;
    let mut _195: u64;
    let mut _196: isize;
    let mut _198: !;
    let mut _199: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _201: state::spot_market::SpotBalanceType;
    let mut _202: u64;
    let mut _203: state::spot_fulfillment_params::ExternalSpotFill;
    let mut _204: u64;
    let mut _205: u64;
    let mut _206: state::spot_market::SpotBalanceType;
    let mut _207: state::spot_market::SpotBalanceType;
    let mut _209: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _210: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _211: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _212: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _213: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _214: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>;
    let mut _215: bool;
    let mut _216: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _217: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _218: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _219: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _220: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    let mut _221: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>;
    scope 1 {
        debug market => _6;
        let _15: u64;
        let _22: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _25: u64;
        scope 6 {
            debug serum_max_coin_qty => _15;
            let _26: u64;
            let _38: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _41: u64;
            scope 11 {
                debug price_lots => _26;
                let _42: i64;
                let _54: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _57: u64;
                let _60: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _63: u64;
                scope 16 {
                    debug max_quote_lots_including_fees => _42;
                    let _65: i64;
                    scope 25 {
                        debug max_base_lots => _65;
                        let _73: openbook_v2_light::Side;
                        scope 26 {
                            debug openbook_v2_order_side => _73;
                            let _75: openbook_v2_light::instruction::PlaceTakeOrder;
                            scope 27 {
                                debug args => _75;
                                let _82: std::vec::Vec<u8>;
                                scope 28 {
                                    debug data => _82;
                                    let _84: u64;
                                    scope 29 {
                                        debug base_before => _84;
                                        let _89: u64;
                                        scope 30 {
                                            debug quote_before => _89;
                                            let _100: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _103: ();
                                            let _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _114: ();
                                            let _122: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                            let _125: ();
                                            let _126: u64;
                                            scope 31 {
                                                debug residual => _100;
                                                scope 32 {
                                                }
                                            }
                                            scope 33 {
                                                debug val => _103;
                                                scope 34 {
                                                }
                                            }
                                            scope 35 {
                                                debug residual => _111;
                                                scope 36 {
                                                }
                                            }
                                            scope 37 {
                                                debug val => _114;
                                                scope 38 {
                                                }
                                            }
                                            scope 39 {
                                                debug residual => _122;
                                                scope 40 {
                                                }
                                            }
                                            scope 41 {
                                                debug val => _125;
                                                scope 42 {
                                                }
                                            }
                                            scope 43 {
                                                debug base_after => _126;
                                                let _131: u64;
                                                scope 44 {
                                                    debug quote_after => _131;
                                                    let _136: state::spot_market::SpotBalanceType;
                                                    let _137: u64;
                                                    let _149: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _152: u64;
                                                    let _160: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                    let _163: u64;
                                                    scope 45 {
                                                        debug base_update_direction => _136;
                                                        debug base_asset_amount_filled => _137;
                                                        let _172: state::spot_market::SpotBalanceType;
                                                        let _173: u64;
                                                        let _179: u64;
                                                        let _185: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _188: u64;
                                                        let _191: u64;
                                                        let _197: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                                                        let _200: u64;
                                                        let mut _208: &state::spot_market::SpotBalanceType;
                                                        scope 54 {
                                                            debug quote_update_direction => _172;
                                                            debug quote_asset_amount_filled => _173;
                                                        }
                                                        scope 55 {
                                                            debug quote_asset_amount_delta => _179;
                                                        }
                                                        scope 56 {
                                                            debug residual => _185;
                                                            scope 57 {
                                                            }
                                                        }
                                                        scope 58 {
                                                            debug val => _188;
                                                            scope 59 {
                                                            }
                                                        }
                                                        scope 60 {
                                                            debug quote_asset_amount_delta => _191;
                                                        }
                                                        scope 61 {
                                                            debug residual => _197;
                                                            scope 62 {
                                                            }
                                                        }
                                                        scope 63 {
                                                            debug val => _200;
                                                            scope 64 {
                                                            }
                                                        }
                                                    }
                                                    scope 46 {
                                                        debug residual => _149;
                                                        scope 47 {
                                                        }
                                                    }
                                                    scope 48 {
                                                        debug val => _152;
                                                        scope 49 {
                                                        }
                                                    }
                                                    scope 50 {
                                                        debug residual => _160;
                                                        scope 51 {
                                                        }
                                                    }
                                                    scope 52 {
                                                        debug val => _163;
                                                        scope 53 {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 17 {
                    debug residual => _54;
                    scope 18 {
                    }
                }
                scope 19 {
                    debug val => _57;
                    scope 20 {
                    }
                }
                scope 21 {
                    debug residual => _60;
                    scope 22 {
                    }
                }
                scope 23 {
                    debug val => _63;
                    scope 24 {
                    }
                }
            }
            scope 12 {
                debug residual => _38;
                scope 13 {
                }
            }
            scope 14 {
                debug val => _41;
                scope 15 {
                }
            }
        }
        scope 7 {
            debug residual => _22;
            scope 8 {
            }
        }
        scope 9 {
            debug val => _25;
            scope 10 {
            }
        }
    }
    scope 2 {
        debug residual => _11;
        scope 3 {
        }
    }
    scope 4 {
        debug val => _14;
        scope 5 {
        }
    }

    bb0: {
        _215 = const false;
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _9 = &((*_1).1: state::fulfillment_params::openbook_v2::OpenbookV2Context<'_, '_>);
        _8 = OpenbookV2Context::<'_, '_>::load_openbook_v2_market(move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_9);
        _7 = <std::result::Result<openbook_v2_light::Market, error::ErrorCode> as Try>::branch(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        _10 = discriminant(_7);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_7 as Continue).0: openbook_v2_light::Market);
        _6 = _14;
        StorageDead(_14);
        StorageDead(_7);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        _18 = _4;
        StorageLive(_19);
        StorageLive(_20);
        _20 = (_6.18: i64);
        _19 = move _20 as u64 (IntToInt);
        StorageDead(_20);
        _17 = calculate_serum_max_coin_qty(move _18, move _19) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = ((_7 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_13);
        _13 = _11;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        StorageDead(_7);
        goto -> bb99;
    }

    bb7: {
        StorageDead(_19);
        StorageDead(_18);
        _16 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        StorageDead(_17);
        _21 = discriminant(_16);
        switchInt(move _21) -> [0: bb9, 1: bb10, otherwise: bb4];
    }

    bb9: {
        StorageLive(_25);
        _25 = ((_16 as Continue).0: u64);
        _15 = _25;
        StorageDead(_25);
        StorageDead(_16);
        StorageLive(_26);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        _29 = _3;
        StorageLive(_30);
        StorageLive(_31);
        _31 = (_6.17: i64);
        _30 = move _31 as u64 (IntToInt);
        StorageDead(_31);
        StorageLive(_32);
        StorageLive(_33);
        _33 = (_6.1: u8);
        _32 = move _33 as u32 (IntToInt);
        StorageDead(_33);
        StorageLive(_34);
        StorageLive(_35);
        _35 = (_6.18: i64);
        _34 = move _35 as u64 (IntToInt);
        StorageDead(_35);
        StorageLive(_36);
        _36 = _2;
        _28 = calculate_serum_limit_price(move _29, move _30, move _32, move _34, move _36) -> [return: bb12, unwind continue];
    }

    bb10: {
        StorageLive(_22);
        _22 = ((_16 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_24);
        _24 = _22;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _24) -> [return: bb11, unwind continue];
    }

    bb11: {
        StorageDead(_24);
        StorageDead(_22);
        StorageDead(_16);
        goto -> bb98;
    }

    bb12: {
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageDead(_30);
        StorageDead(_29);
        _27 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _28) -> [return: bb13, unwind continue];
    }

    bb13: {
        StorageDead(_28);
        _37 = discriminant(_27);
        switchInt(move _37) -> [0: bb14, 1: bb15, otherwise: bb4];
    }

    bb14: {
        StorageLive(_41);
        _41 = ((_27 as Continue).0: u64);
        _26 = _41;
        StorageDead(_41);
        StorageDead(_27);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        StorageLive(_51);
        _51 = (_6.17: i64);
        _50 = move _51 as u64 (IntToInt);
        StorageDead(_51);
        StorageLive(_52);
        _52 = _26;
        _49 = <u64 as SafeMath>::safe_mul(move _50, move _52) -> [return: bb17, unwind continue];
    }

    bb15: {
        StorageLive(_38);
        _38 = ((_27 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_40);
        _40 = _38;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _40) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_40);
        StorageDead(_38);
        StorageDead(_27);
        goto -> bb97;
    }

    bb17: {
        StorageDead(_52);
        StorageDead(_50);
        _48 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _49) -> [return: bb18, unwind continue];
    }

    bb18: {
        StorageDead(_49);
        _53 = discriminant(_48);
        switchInt(move _53) -> [0: bb19, 1: bb20, otherwise: bb4];
    }

    bb19: {
        StorageLive(_57);
        _57 = ((_48 as Continue).0: u64);
        _47 = _57;
        StorageDead(_57);
        StorageLive(_58);
        _58 = _15;
        _46 = <u64 as SafeMath>::safe_mul(move _47, move _58) -> [return: bb22, unwind continue];
    }

    bb20: {
        StorageLive(_54);
        _54 = ((_48 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_56);
        _56 = _54;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _56) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_56);
        StorageDead(_54);
        StorageDead(_47);
        StorageDead(_46);
        goto -> bb95;
    }

    bb22: {
        StorageDead(_58);
        StorageDead(_47);
        _45 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _46) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_46);
        _59 = discriminant(_45);
        switchInt(move _59) -> [0: bb24, 1: bb25, otherwise: bb4];
    }

    bb24: {
        StorageLive(_63);
        _63 = ((_45 as Continue).0: u64);
        _44 = _63;
        StorageDead(_63);
        StorageLive(_64);
        _64 = _5;
        _43 = <u64 as Ord>::min(move _44, move _64) -> [return: bb27, unwind continue];
    }

    bb25: {
        StorageLive(_60);
        _60 = ((_45 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_62);
        _62 = _60;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _62) -> [return: bb26, unwind continue];
    }

    bb26: {
        StorageDead(_62);
        StorageDead(_60);
        goto -> bb95;
    }

    bb27: {
        StorageDead(_64);
        StorageDead(_44);
        _42 = move _43 as i64 (IntToInt);
        StorageDead(_43);
        StorageDead(_48);
        StorageDead(_45);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        _67 = _4;
        _66 = move _67 as i64 (IntToInt);
        StorageDead(_67);
        StorageLive(_68);
        _68 = (_6.18: i64);
        _69 = Eq(_68, const 0_i64);
        assert(!move _69, "attempt to divide `{}` by zero", _66) -> [success: bb28, unwind continue];
    }

    bb28: {
        _70 = Eq(_68, const -1_i64);
        _71 = Eq(_66, const i64::MIN);
        _72 = BitAnd(move _70, move _71);
        assert(!move _72, "attempt to compute `{} / {}`, which would overflow", _66, _68) -> [success: bb29, unwind continue];
    }

    bb29: {
        _65 = Div(move _66, move _68);
        StorageDead(_68);
        StorageDead(_66);
        StorageLive(_73);
        _74 = discriminant(_2);
        switchInt(move _74) -> [0: bb31, 1: bb30, otherwise: bb4];
    }

    bb30: {
        _73 = openbook_v2_light::Side::Ask;
        goto -> bb32;
    }

    bb31: {
        _73 = openbook_v2_light::Side::Bid;
        goto -> bb32;
    }

    bb32: {
        StorageLive(_75);
        StorageLive(_76);
        _76 = move _73;
        StorageLive(_77);
        StorageLive(_78);
        _78 = _26;
        _77 = move _78 as i64 (IntToInt);
        StorageDead(_78);
        StorageLive(_79);
        _79 = _65;
        StorageLive(_80);
        _80 = _42;
        StorageLive(_81);
        _81 = openbook_v2_light::PlaceOrderType::Market;
        _75 = openbook_v2_light::instruction::PlaceTakeOrder { side: move _76, price_lots: move _77, max_base_lots: move _79, max_quote_lots_including_fees: move _80, order_type: move _81, limit: const 20_u8 };
        StorageDead(_81);
        StorageDead(_80);
        StorageDead(_79);
        StorageDead(_77);
        StorageDead(_76);
        StorageLive(_82);
        StorageLive(_83);
        _83 = &_75;
        _215 = const true;
        _82 = <openbook_v2_light::instruction::PlaceTakeOrder as anchor_lang::InstructionData>::data(move _83) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_83);
        StorageLive(_84);
        StorageLive(_85);
        StorageLive(_86);
        StorageLive(_87);
        StorageLive(_88);
        _209 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _216 = (((_209.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _88 = &(*_216);
        _87 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _88) -> [return: bb34, unwind: bb103];
    }

    bb34: {
        _86 = &(*_87);
        _85 = <anchor_spl::token::TokenAccount as Deref>::deref(move _86) -> [return: bb35, unwind: bb103];
    }

    bb35: {
        StorageDead(_88);
        StorageDead(_86);
        _84 = ((*_85).2: u64);
        StorageDead(_87);
        StorageDead(_85);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _210 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _217 = (((_210.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _93 = &(*_217);
        _92 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _93) -> [return: bb36, unwind: bb103];
    }

    bb36: {
        _91 = &(*_92);
        _90 = <anchor_spl::token::TokenAccount as Deref>::deref(move _91) -> [return: bb37, unwind: bb103];
    }

    bb37: {
        StorageDead(_93);
        StorageDead(_91);
        _89 = ((*_90).2: u64);
        StorageDead(_92);
        StorageDead(_90);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        StorageLive(_97);
        _97 = &(*_1);
        StorageLive(_98);
        _215 = const false;
        _98 = move _82;
        _96 = OpenbookV2FulfillmentParams::<'_, '_>::invoke_new_order(move _97, move _98) -> [return: bb38, unwind: bb103];
    }

    bb38: {
        StorageDead(_98);
        StorageDead(_97);
        _95 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _96) -> [return: bb39, unwind: bb103];
    }

    bb39: {
        StorageDead(_96);
        _99 = discriminant(_95);
        switchInt(move _99) -> [0: bb40, 1: bb41, otherwise: bb4];
    }

    bb40: {
        StorageLive(_103);
        _103 = ((_95 as Continue).0: ());
        _94 = _103;
        StorageDead(_103);
        StorageDead(_95);
        StorageDead(_94);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        _211 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _218 = (((_211.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _108 = &mut (*_218);
        _107 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::reload(move _108) -> [return: bb43, unwind: bb103];
    }

    bb41: {
        StorageLive(_100);
        _100 = ((_95 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_102);
        _102 = _100;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _102) -> [return: bb42, unwind: bb103];
    }

    bb42: {
        StorageDead(_102);
        StorageDead(_100);
        StorageDead(_95);
        StorageDead(_94);
        goto -> bb94;
    }

    bb43: {
        StorageDead(_108);
        StorageLive(_109);
        _109 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:375:49: 375:53};
        _106 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:375:49: 375:53}>(move _107, move _109) -> [return: bb44, unwind: bb103];
    }

    bb44: {
        StorageDead(_109);
        StorageDead(_107);
        _105 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _106) -> [return: bb45, unwind: bb103];
    }

    bb45: {
        StorageDead(_106);
        _110 = discriminant(_105);
        switchInt(move _110) -> [0: bb46, 1: bb47, otherwise: bb4];
    }

    bb46: {
        StorageLive(_114);
        _114 = ((_105 as Continue).0: ());
        _104 = _114;
        StorageDead(_114);
        StorageDead(_105);
        StorageDead(_104);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        _212 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _219 = (((_212.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _119 = &mut (*_219);
        _118 = anchor_lang::prelude::Account::<'_, anchor_spl::token::TokenAccount>::reload(move _119) -> [return: bb49, unwind: bb103];
    }

    bb47: {
        StorageLive(_111);
        _111 = ((_105 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_113);
        _113 = _111;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _113) -> [return: bb48, unwind: bb103];
    }

    bb48: {
        StorageDead(_113);
        StorageDead(_111);
        StorageDead(_105);
        StorageDead(_104);
        goto -> bb94;
    }

    bb49: {
        StorageDead(_119);
        StorageLive(_120);
        _120 = {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:379:50: 379:54};
        _117 = std::result::Result::<(), anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/state/fulfillment_params/openbook_v2.rs:379:50: 379:54}>(move _118, move _120) -> [return: bb50, unwind: bb103];
    }

    bb50: {
        StorageDead(_120);
        StorageDead(_118);
        _116 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _117) -> [return: bb51, unwind: bb103];
    }

    bb51: {
        StorageDead(_117);
        _121 = discriminant(_116);
        switchInt(move _121) -> [0: bb52, 1: bb53, otherwise: bb4];
    }

    bb52: {
        StorageLive(_125);
        _125 = ((_116 as Continue).0: ());
        _115 = _125;
        StorageDead(_125);
        StorageDead(_116);
        StorageDead(_115);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        _213 = deref_copy ((*_1).8: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _220 = (((_213.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _130 = &(*_220);
        _129 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _130) -> [return: bb55, unwind: bb103];
    }

    bb53: {
        StorageLive(_122);
        _122 = ((_116 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_124);
        _124 = _122;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _124) -> [return: bb54, unwind: bb103];
    }

    bb54: {
        StorageDead(_124);
        StorageDead(_122);
        StorageDead(_116);
        StorageDead(_115);
        goto -> bb94;
    }

    bb55: {
        _128 = &(*_129);
        _127 = <anchor_spl::token::TokenAccount as Deref>::deref(move _128) -> [return: bb56, unwind: bb103];
    }

    bb56: {
        StorageDead(_130);
        StorageDead(_128);
        _126 = ((*_127).2: u64);
        StorageDead(_129);
        StorageDead(_127);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _214 = deref_copy ((*_1).9: std::boxed::Box<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>);
        _221 = (((_214.0: std::ptr::Unique<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: std::ptr::NonNull<anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>>).0: *const anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount>);
        _135 = &(*_221);
        _134 = <anchor_lang::prelude::Account<'_, anchor_spl::token::TokenAccount> as Deref>::deref(move _135) -> [return: bb57, unwind: bb103];
    }

    bb57: {
        _133 = &(*_134);
        _132 = <anchor_spl::token::TokenAccount as Deref>::deref(move _133) -> [return: bb58, unwind: bb103];
    }

    bb58: {
        StorageDead(_135);
        StorageDead(_133);
        _131 = ((*_132).2: u64);
        StorageDead(_134);
        StorageDead(_132);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        _140 = _126;
        StorageLive(_141);
        _141 = _84;
        _139 = Gt(move _140, move _141);
        switchInt(move _139) -> [0: bb65, otherwise: bb59];
    }

    bb59: {
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_142);
        _142 = SpotBalanceType::Deposit;
        StorageLive(_143);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = _126;
        StorageLive(_147);
        _147 = _84;
        _145 = <u64 as SafeMath>::safe_sub(move _146, move _147) -> [return: bb60, unwind: bb103];
    }

    bb60: {
        StorageDead(_147);
        StorageDead(_146);
        _144 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _145) -> [return: bb61, unwind: bb103];
    }

    bb61: {
        StorageDead(_145);
        _148 = discriminant(_144);
        switchInt(move _148) -> [0: bb62, 1: bb63, otherwise: bb4];
    }

    bb62: {
        StorageLive(_152);
        _152 = ((_144 as Continue).0: u64);
        _143 = _152;
        StorageDead(_152);
        _138 = (move _142, move _143);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_144);
        goto -> bb71;
    }

    bb63: {
        StorageLive(_149);
        _149 = ((_144 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_151);
        _151 = _149;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _151) -> [return: bb64, unwind: bb103];
    }

    bb64: {
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_143);
        StorageDead(_142);
        StorageDead(_144);
        goto -> bb92;
    }

    bb65: {
        StorageDead(_141);
        StorageDead(_140);
        StorageLive(_153);
        _153 = SpotBalanceType::Borrow;
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _157 = _84;
        StorageLive(_158);
        _158 = _126;
        _156 = <u64 as SafeMath>::safe_sub(move _157, move _158) -> [return: bb66, unwind: bb103];
    }

    bb66: {
        StorageDead(_158);
        StorageDead(_157);
        _155 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _156) -> [return: bb67, unwind: bb103];
    }

    bb67: {
        StorageDead(_156);
        _159 = discriminant(_155);
        switchInt(move _159) -> [0: bb68, 1: bb69, otherwise: bb4];
    }

    bb68: {
        StorageLive(_163);
        _163 = ((_155 as Continue).0: u64);
        _154 = _163;
        StorageDead(_163);
        _138 = (move _153, move _154);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_155);
        goto -> bb71;
    }

    bb69: {
        StorageLive(_160);
        _160 = ((_155 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_162);
        _162 = _160;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _162) -> [return: bb70, unwind: bb103];
    }

    bb70: {
        StorageDead(_162);
        StorageDead(_160);
        StorageDead(_154);
        StorageDead(_153);
        StorageDead(_155);
        goto -> bb92;
    }

    bb71: {
        StorageDead(_139);
        StorageLive(_136);
        _136 = (_138.0: state::spot_market::SpotBalanceType);
        StorageLive(_137);
        _137 = (_138.1: u64);
        StorageDead(_138);
        StorageLive(_164);
        StorageLive(_165);
        StorageLive(_166);
        _166 = _137;
        _165 = Eq(move _166, const 0_u64);
        switchInt(move _165) -> [0: bb75, otherwise: bb72];
    }

    bb72: {
        StorageDead(_166);
        StorageLive(_168);
        StorageLive(_169);
        StorageLive(_170);
        _170 = const "No base filled on openbook v2";
        _169 = &(*_170);
        _168 = solana_program::log::sol_log(move _169) -> [return: bb73, unwind: bb103];
    }

    bb73: {
        StorageDead(_169);
        StorageDead(_170);
        StorageDead(_168);
        StorageLive(_171);
        _171 = ExternalSpotFill::empty() -> [return: bb74, unwind: bb103];
    }

    bb74: {
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _171);
        StorageDead(_171);
        StorageDead(_165);
        StorageDead(_164);
        goto -> bb91;
    }

    bb75: {
        StorageDead(_166);
        _164 = const ();
        StorageDead(_165);
        StorageDead(_164);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        _176 = &_136;
        StorageLive(_177);
        _208 = const _;
        _177 = &(*_208);
        _175 = <SpotBalanceType as PartialEq>::eq(move _176, move _177) -> [return: bb76, unwind: bb103];
    }

    bb76: {
        switchInt(move _175) -> [0: bb83, otherwise: bb77];
    }

    bb77: {
        StorageDead(_177);
        StorageDead(_176);
        StorageLive(_179);
        StorageLive(_180);
        StorageLive(_181);
        StorageLive(_182);
        _182 = _131;
        StorageLive(_183);
        _183 = _89;
        _181 = <u64 as SafeMath>::safe_sub(move _182, move _183) -> [return: bb78, unwind: bb103];
    }

    bb78: {
        StorageDead(_183);
        StorageDead(_182);
        _180 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _181) -> [return: bb79, unwind: bb103];
    }

    bb79: {
        StorageDead(_181);
        _184 = discriminant(_180);
        switchInt(move _184) -> [0: bb80, 1: bb81, otherwise: bb4];
    }

    bb80: {
        StorageLive(_188);
        _188 = ((_180 as Continue).0: u64);
        _179 = _188;
        StorageDead(_188);
        StorageDead(_180);
        StorageLive(_189);
        _189 = SpotBalanceType::Deposit;
        StorageLive(_190);
        _190 = _179;
        _174 = (move _189, move _190);
        StorageDead(_190);
        StorageDead(_189);
        StorageDead(_179);
        goto -> bb89;
    }

    bb81: {
        StorageLive(_185);
        _185 = ((_180 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_187);
        _187 = _185;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _187) -> [return: bb82, unwind: bb103];
    }

    bb82: {
        StorageDead(_187);
        StorageDead(_185);
        StorageDead(_180);
        StorageDead(_179);
        goto -> bb90;
    }

    bb83: {
        StorageDead(_177);
        StorageDead(_176);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        _194 = _89;
        StorageLive(_195);
        _195 = _131;
        _193 = <u64 as SafeMath>::safe_sub(move _194, move _195) -> [return: bb84, unwind: bb103];
    }

    bb84: {
        StorageDead(_195);
        StorageDead(_194);
        _192 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _193) -> [return: bb85, unwind: bb103];
    }

    bb85: {
        StorageDead(_193);
        _196 = discriminant(_192);
        switchInt(move _196) -> [0: bb86, 1: bb87, otherwise: bb4];
    }

    bb86: {
        StorageLive(_200);
        _200 = ((_192 as Continue).0: u64);
        _191 = _200;
        StorageDead(_200);
        StorageDead(_192);
        StorageLive(_201);
        _201 = SpotBalanceType::Borrow;
        StorageLive(_202);
        _202 = _191;
        _174 = (move _201, move _202);
        StorageDead(_202);
        StorageDead(_201);
        StorageDead(_191);
        goto -> bb89;
    }

    bb87: {
        StorageLive(_197);
        _197 = ((_192 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_199);
        _199 = _197;
        _0 = <std::result::Result<ExternalSpotFill, error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _199) -> [return: bb88, unwind: bb103];
    }

    bb88: {
        StorageDead(_199);
        StorageDead(_197);
        StorageDead(_192);
        StorageDead(_191);
        goto -> bb90;
    }

    bb89: {
        StorageDead(_175);
        StorageLive(_172);
        _172 = (_174.0: state::spot_market::SpotBalanceType);
        StorageLive(_173);
        _173 = (_174.1: u64);
        StorageDead(_174);
        StorageLive(_203);
        StorageLive(_204);
        _204 = _137;
        StorageLive(_205);
        _205 = _173;
        StorageLive(_206);
        _206 = _136;
        StorageLive(_207);
        _207 = _172;
        _203 = ExternalSpotFill { base_asset_amount_filled: move _204, base_update_direction: move _206, quote_asset_amount_filled: move _205, quote_update_direction: move _207, settled_referrer_rebate: const 0_u64, unsettled_referrer_rebate: const 0_u64, fee: const 0_u64 };
        StorageDead(_207);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_204);
        _0 = std::result::Result::<ExternalSpotFill, error::ErrorCode>::Ok(move _203);
        StorageDead(_203);
        StorageDead(_173);
        StorageDead(_172);
        StorageDead(_137);
        StorageDead(_136);
        StorageDead(_131);
        StorageDead(_126);
        StorageDead(_89);
        StorageDead(_84);
        _215 = const false;
        StorageDead(_82);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_65);
        StorageDead(_42);
        StorageDead(_26);
        StorageDead(_15);
        StorageDead(_6);
        goto -> bb100;
    }

    bb90: {
        StorageDead(_175);
        StorageDead(_174);
        goto -> bb91;
    }

    bb91: {
        StorageDead(_137);
        StorageDead(_136);
        goto -> bb93;
    }

    bb92: {
        StorageDead(_139);
        StorageDead(_138);
        goto -> bb93;
    }

    bb93: {
        StorageDead(_131);
        StorageDead(_126);
        goto -> bb94;
    }

    bb94: {
        StorageDead(_89);
        StorageDead(_84);
        _215 = const false;
        StorageDead(_82);
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_65);
        goto -> bb96;
    }

    bb95: {
        StorageDead(_44);
        StorageDead(_43);
        StorageDead(_48);
        StorageDead(_45);
        goto -> bb96;
    }

    bb96: {
        StorageDead(_42);
        goto -> bb97;
    }

    bb97: {
        StorageDead(_26);
        goto -> bb98;
    }

    bb98: {
        StorageDead(_15);
        goto -> bb99;
    }

    bb99: {
        StorageDead(_6);
        goto -> bb100;
    }

    bb100: {
        return;
    }

    bb101 (cleanup): {
        resume;
    }

    bb102 (cleanup): {
        drop(_82) -> [return: bb101, unwind terminate(cleanup)];
    }

    bb103 (cleanup): {
        switchInt(_215) -> [0: bb101, otherwise: bb102];
    }
}
