// MIR for `state::state::<impl at programs/drift/src/state/state.rs:169:1: 169:43>::default` before PreCodegen

fn state::state::<impl at programs/drift/src/state/state.rs:169:1: 169:43>::default() -> PriceDivergenceGuardRails {
    let mut _0: state::state::PriceDivergenceGuardRails;
    let mut _1: u64;
    let mut _2: bool;
    let mut _3: u64;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _2 = Eq(const 10_u64, const 0_u64);
        assert(!move _2, "attempt to divide `{}` by zero", const _) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = Div(const _, const 10_u64);
        StorageLive(_3);
        _4 = Eq(const 2_u64, const 0_u64);
        assert(!move _4, "attempt to divide `{}` by zero", const _) -> [success: bb2, unwind continue];
    }

    bb2: {
        _3 = Div(const _, const 2_u64);
        _0 = PriceDivergenceGuardRails { mark_oracle_percent_divergence: move _1, oracle_twap_5min_percent_divergence: move _3 };
        StorageDead(_3);
        StorageDead(_1);
        return;
    }
}
