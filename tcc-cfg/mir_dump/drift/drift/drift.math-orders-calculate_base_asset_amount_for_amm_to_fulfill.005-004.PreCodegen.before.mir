// MIR for `math::orders::calculate_base_asset_amount_for_amm_to_fulfill` before PreCodegen

fn math::orders::calculate_base_asset_amount_for_amm_to_fulfill(_1: &Order, _2: &PerpMarket, _3: Option<u64>, _4: Option<u64>, _5: i64, _6: &state::state::FeeTier) -> std::result::Result<(u64, Option<u64>), error::ErrorCode> {
    debug order => _1;
    debug market => _2;
    debug limit_price => _3;
    debug override_fill_price => _4;
    debug existing_base_asset_amount => _5;
    debug fee_tier => _6;
    let mut _0: std::result::Result<(u64, std::option::Option<u64>), error::ErrorCode>;
    let _7: std::option::Option<u64>;
    let mut _8: isize;
    let _10: ();
    let mut _11: isize;
    let _13: ();
    let mut _14: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _15: std::result::Result<(), error::ErrorCode>;
    let mut _16: bool;
    let mut _17: u64;
    let mut _18: u64;
    let mut _19: bool;
    let mut _20: &controller::position::PositionDirection;
    let mut _21: &controller::position::PositionDirection;
    let _22: controller::position::PositionDirection;
    let mut _23: bool;
    let mut _24: u64;
    let mut _25: u64;
    let mut _26: bool;
    let mut _27: &controller::position::PositionDirection;
    let mut _28: &controller::position::PositionDirection;
    let _29: controller::position::PositionDirection;
    let mut _30: ();
    let _32: ();
    let mut _33: &str;
    let _34: &str;
    let mut _35: &std::string::String;
    let _36: &std::string::String;
    let _37: std::string::String;
    let mut _39: std::fmt::Arguments<'_>;
    let mut _40: &[&str];
    let mut _41: &[&str; 2];
    let _42: &[&str; 2];
    let _43: [&str; 2];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let mut _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let mut _49: &error::ErrorCode;
    let _50: &error::ErrorCode;
    let _51: ();
    let mut _52: &str;
    let _53: &str;
    let mut _54: &std::string::String;
    let _55: &std::string::String;
    let _56: std::string::String;
    let mut _58: std::fmt::Arguments<'_>;
    let mut _59: &[&str];
    let mut _60: &[&str; 2];
    let _61: &[&str; 2];
    let _62: [&str; 2];
    let mut _63: &[core::fmt::rt::Argument<'_>];
    let mut _64: &[core::fmt::rt::Argument<'_>; 2];
    let _65: &[core::fmt::rt::Argument<'_>; 2];
    let _66: [core::fmt::rt::Argument<'_>; 2];
    let mut _67: core::fmt::rt::Argument<'_>;
    let mut _68: &u64;
    let _69: &u64;
    let mut _70: core::fmt::rt::Argument<'_>;
    let mut _71: &u64;
    let _72: &u64;
    let mut _73: error::ErrorCode;
    let mut _74: isize;
    let mut _76: !;
    let mut _77: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _79: u64;
    let _80: ();
    let mut _81: bool;
    let mut _82: &state::user::Order;
    let mut _83: bool;
    let mut _84: &state::user::Order;
    let mut _85: !;
    let mut _86: (u64, std::option::Option<u64>);
    let mut _87: std::option::Option<u64>;
    let mut _89: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::option::Option<u64>>;
    let mut _90: std::result::Result<std::option::Option<u64>, error::ErrorCode>;
    let mut _91: &state::user::Order;
    let mut _92: std::option::Option<u64>;
    let mut _93: &state::state::FeeTier;
    let mut _94: i16;
    let mut _95: isize;
    let mut _97: !;
    let mut _98: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _101: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _102: std::result::Result<u64, error::ErrorCode>;
    let mut _103: &state::user::Order;
    let mut _104: &state::perp_market::PerpMarket;
    let mut _105: std::option::Option<u64>;
    let mut _106: std::option::Option<i64>;
    let mut _107: i64;
    let mut _108: isize;
    let mut _110: !;
    let mut _111: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _114: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, u64>;
    let mut _115: std::result::Result<u64, error::ErrorCode>;
    let mut _116: &state::perp_market::AMM;
    let _117: &state::perp_market::AMM;
    let mut _118: &controller::position::PositionDirection;
    let _119: &controller::position::PositionDirection;
    let mut _120: isize;
    let mut _122: !;
    let mut _123: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _125: (u64, std::option::Option<u64>);
    let mut _126: u64;
    let mut _127: u64;
    let mut _128: u64;
    let mut _129: std::option::Option<u64>;
    scope 1 {
        debug limit_price => _7;
        let _88: std::option::Option<u64>;
        let _96: std::result::Result<std::convert::Infallible, error::ErrorCode>;
        let _99: std::option::Option<u64>;
        scope 11 {
            debug limit_price_with_buffer => _88;
            let _100: u64;
            let _109: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _112: u64;
            scope 16 {
                debug base_asset_amount => _100;
                let _113: u64;
                let _121: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                let _124: u64;
                scope 21 {
                    debug max_base_asset_amount => _113;
                }
                scope 22 {
                    debug residual => _121;
                    scope 23 {
                    }
                }
                scope 24 {
                    debug val => _124;
                    scope 25 {
                    }
                }
            }
            scope 17 {
                debug residual => _109;
                scope 18 {
                }
            }
            scope 19 {
                debug val => _112;
                scope 20 {
                }
            }
        }
        scope 12 {
            debug residual => _96;
            scope 13 {
            }
        }
        scope 14 {
            debug val => _99;
            scope 15 {
            }
        }
    }
    scope 2 {
        debug override_fill_price => _9;
        let _9: u64;
        scope 3 {
            debug limit_price => _12;
            let _12: u64;
            let _31: error::ErrorCode;
            let _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
            let _78: ();
            let mut _132: &controller::position::PositionDirection;
            let mut _133: &controller::position::PositionDirection;
            scope 4 {
                debug error_code => _31;
                let _38: std::string::String;
                let _57: std::string::String;
                let mut _130: &[&str; 2];
                let mut _131: &[&str; 2];
                scope 5 {
                    debug res => _38;
                }
                scope 6 {
                    debug res => _57;
                }
            }
            scope 7 {
                debug residual => _75;
                scope 8 {
                }
            }
            scope 9 {
                debug val => _78;
                scope 10 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_7);
        _8 = discriminant(_4);
        switchInt(move _8) -> [1: bb1, otherwise: bb36];
    }

    bb1: {
        StorageLive(_9);
        _9 = ((_4 as Some).0: u64);
        StorageLive(_10);
        _11 = discriminant(_3);
        switchInt(move _11) -> [1: bb2, otherwise: bb34];
    }

    bb2: {
        StorageLive(_12);
        _12 = ((_3 as Some).0: u64);
        StorageLive(_13);
        StorageLive(_14);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        _17 = _12;
        StorageLive(_18);
        _18 = _9;
        _16 = Ge(move _17, move _18);
        switchInt(move _16) -> [0: bb7, otherwise: bb3];
    }

    bb3: {
        StorageDead(_18);
        StorageDead(_17);
        StorageLive(_19);
        StorageLive(_20);
        _20 = &((*_1).17: controller::position::PositionDirection);
        StorageLive(_21);
        _133 = const _;
        _21 = &(*_133);
        _19 = <controller::position::PositionDirection as PartialEq>::eq(move _20, move _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb11;
    }

    bb6: {
        StorageDead(_21);
        StorageDead(_20);
        goto -> bb8;
    }

    bb7: {
        StorageDead(_18);
        StorageDead(_17);
        goto -> bb8;
    }

    bb8: {
        StorageLive(_23);
        StorageLive(_24);
        _24 = _12;
        StorageLive(_25);
        _25 = _9;
        _23 = Le(move _24, move _25);
        switchInt(move _23) -> [0: bb13, otherwise: bb9];
    }

    bb9: {
        StorageDead(_25);
        StorageDead(_24);
        StorageLive(_26);
        StorageLive(_27);
        _27 = &((*_1).17: controller::position::PositionDirection);
        StorageLive(_28);
        _132 = const _;
        _28 = &(*_132);
        _26 = <controller::position::PositionDirection as PartialEq>::eq(move _27, move _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        switchInt(move _26) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        StorageDead(_28);
        StorageDead(_27);
        StorageLive(_30);
        _30 = ();
        _15 = std::result::Result::<(), error::ErrorCode>::Ok(move _30);
        StorageDead(_30);
        goto -> bb28;
    }

    bb12: {
        StorageDead(_28);
        StorageDead(_27);
        goto -> bb14;
    }

    bb13: {
        StorageDead(_25);
        StorageDead(_24);
        goto -> bb14;
    }

    bb14: {
        StorageLive(_31);
        _31 = error::ErrorCode::InvalidAmmLimitPriceOverride;
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        StorageLive(_38);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        _131 = const _;
        _42 = &(*_131);
        _41 = &(*_42);
        _40 = move _41 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_41);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &_31;
        _49 = &(*_50);
        _48 = core::fmt::rt::Argument::<'_>::new_display::<error::ErrorCode>(move _49) -> [return: bb15, unwind continue];
    }

    bb15: {
        StorageDead(_49);
        _47 = [move _48];
        StorageDead(_48);
        _46 = &_47;
        _45 = &(*_46);
        _44 = move _45 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_45);
        _39 = Arguments::<'_>::new_v1(move _40, move _44) -> [return: bb16, unwind continue];
    }

    bb16: {
        StorageDead(_44);
        StorageDead(_40);
        _38 = format(move _39) -> [return: bb17, unwind continue];
    }

    bb17: {
        StorageDead(_39);
        StorageDead(_50);
        StorageDead(_47);
        StorageDead(_46);
        StorageDead(_42);
        _37 = move _38;
        StorageDead(_38);
        _36 = &_37;
        _35 = &(*_36);
        _34 = <String as Deref>::deref(move _35) -> [return: bb18, unwind: bb66];
    }

    bb18: {
        _33 = &(*_34);
        StorageDead(_35);
        _32 = solana_program::log::sol_log(move _33) -> [return: bb19, unwind: bb66];
    }

    bb19: {
        StorageDead(_33);
        drop(_37) -> [return: bb20, unwind: bb67];
    }

    bb20: {
        StorageDead(_37);
        StorageDead(_36);
        StorageDead(_34);
        StorageDead(_32);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        StorageLive(_60);
        StorageLive(_61);
        _130 = const _;
        _61 = &(*_130);
        _60 = &(*_61);
        _59 = move _60 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_60);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        StorageLive(_69);
        _69 = &_9;
        _68 = &(*_69);
        _67 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _68) -> [return: bb21, unwind continue];
    }

    bb21: {
        StorageDead(_68);
        StorageLive(_70);
        StorageLive(_71);
        StorageLive(_72);
        _72 = &_12;
        _71 = &(*_72);
        _70 = core::fmt::rt::Argument::<'_>::new_display::<u64>(move _71) -> [return: bb22, unwind continue];
    }

    bb22: {
        StorageDead(_71);
        _66 = [move _67, move _70];
        StorageDead(_70);
        StorageDead(_67);
        _65 = &_66;
        _64 = &(*_65);
        _63 = move _64 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_64);
        _58 = Arguments::<'_>::new_v1(move _59, move _63) -> [return: bb23, unwind continue];
    }

    bb23: {
        StorageDead(_63);
        StorageDead(_59);
        _57 = format(move _58) -> [return: bb24, unwind continue];
    }

    bb24: {
        StorageDead(_58);
        StorageDead(_72);
        StorageDead(_69);
        StorageDead(_66);
        StorageDead(_65);
        StorageDead(_61);
        _56 = move _57;
        StorageDead(_57);
        _55 = &_56;
        _54 = &(*_55);
        _53 = <String as Deref>::deref(move _54) -> [return: bb25, unwind: bb65];
    }

    bb25: {
        _52 = &(*_53);
        StorageDead(_54);
        _51 = solana_program::log::sol_log(move _52) -> [return: bb26, unwind: bb65];
    }

    bb26: {
        StorageDead(_52);
        drop(_56) -> [return: bb27, unwind: bb67];
    }

    bb27: {
        StorageDead(_56);
        StorageDead(_55);
        StorageDead(_53);
        StorageDead(_51);
        StorageLive(_73);
        _73 = _31;
        _15 = std::result::Result::<(), error::ErrorCode>::Err(move _73);
        StorageDead(_73);
        StorageDead(_31);
        goto -> bb28;
    }

    bb28: {
        StorageDead(_26);
        StorageDead(_23);
        StorageDead(_19);
        StorageDead(_16);
        _14 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _15) -> [return: bb29, unwind continue];
    }

    bb29: {
        StorageDead(_15);
        _74 = discriminant(_14);
        switchInt(move _74) -> [0: bb30, 1: bb32, otherwise: bb31];
    }

    bb30: {
        StorageLive(_78);
        _78 = ((_14 as Continue).0: ());
        _13 = _78;
        StorageDead(_78);
        StorageDead(_14);
        StorageDead(_13);
        _10 = const ();
        StorageDead(_12);
        goto -> bb35;
    }

    bb31: {
        unreachable;
    }

    bb32: {
        StorageLive(_75);
        _75 = ((_14 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_77);
        _77 = _75;
        _0 = <std::result::Result<(u64, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _77) -> [return: bb33, unwind continue];
    }

    bb33: {
        StorageDead(_77);
        StorageDead(_75);
        StorageDead(_14);
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_10);
        StorageDead(_9);
        goto -> bb63;
    }

    bb34: {
        _10 = const ();
        goto -> bb35;
    }

    bb35: {
        StorageDead(_10);
        StorageLive(_79);
        _79 = _9;
        _7 = Option::<u64>::Some(move _79);
        StorageDead(_79);
        StorageDead(_9);
        goto -> bb37;
    }

    bb36: {
        _7 = _3;
        goto -> bb37;
    }

    bb37: {
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &(*_1);
        _81 = Order::must_be_triggered(move _82) -> [return: bb38, unwind continue];
    }

    bb38: {
        switchInt(move _81) -> [0: bb43, otherwise: bb39];
    }

    bb39: {
        StorageDead(_82);
        StorageLive(_83);
        StorageLive(_84);
        _84 = &(*_1);
        _83 = Order::triggered(move _84) -> [return: bb40, unwind continue];
    }

    bb40: {
        switchInt(move _83) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        StorageDead(_84);
        goto -> bb44;
    }

    bb42: {
        StorageDead(_84);
        StorageLive(_86);
        StorageLive(_87);
        _87 = _7;
        _86 = (const 0_u64, move _87);
        StorageDead(_87);
        _0 = std::result::Result::<(u64, Option<u64>), error::ErrorCode>::Ok(move _86);
        StorageDead(_86);
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        goto -> bb63;
    }

    bb43: {
        StorageDead(_82);
        goto -> bb44;
    }

    bb44: {
        _80 = const ();
        StorageDead(_83);
        StorageDead(_81);
        StorageDead(_80);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        StorageLive(_91);
        _91 = &(*_1);
        StorageLive(_92);
        _92 = _7;
        StorageLive(_93);
        _93 = &(*_6);
        StorageLive(_94);
        _94 = ((*_2).27: i16);
        _90 = calculate_limit_price_with_buffer(move _91, move _92, move _93, move _94) -> [return: bb45, unwind continue];
    }

    bb45: {
        StorageDead(_94);
        StorageDead(_93);
        StorageDead(_92);
        StorageDead(_91);
        _89 = <std::result::Result<Option<u64>, error::ErrorCode> as Try>::branch(move _90) -> [return: bb46, unwind continue];
    }

    bb46: {
        StorageDead(_90);
        _95 = discriminant(_89);
        switchInt(move _95) -> [0: bb47, 1: bb48, otherwise: bb31];
    }

    bb47: {
        StorageLive(_99);
        _99 = ((_89 as Continue).0: std::option::Option<u64>);
        _88 = _99;
        StorageDead(_99);
        StorageDead(_89);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        StorageLive(_103);
        _103 = &(*_1);
        StorageLive(_104);
        _104 = &(*_2);
        StorageLive(_105);
        _105 = _88;
        StorageLive(_106);
        StorageLive(_107);
        _107 = _5;
        _106 = Option::<i64>::Some(move _107);
        StorageDead(_107);
        _102 = calculate_base_asset_amount_to_fill_up_to_limit_price(move _103, move _104, move _105, move _106) -> [return: bb50, unwind continue];
    }

    bb48: {
        StorageLive(_96);
        _96 = ((_89 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_98);
        _98 = _96;
        _0 = <std::result::Result<(u64, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _98) -> [return: bb49, unwind continue];
    }

    bb49: {
        StorageDead(_98);
        StorageDead(_96);
        StorageDead(_89);
        goto -> bb62;
    }

    bb50: {
        StorageDead(_106);
        StorageDead(_105);
        StorageDead(_104);
        StorageDead(_103);
        _101 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _102) -> [return: bb51, unwind continue];
    }

    bb51: {
        StorageDead(_102);
        _108 = discriminant(_101);
        switchInt(move _108) -> [0: bb52, 1: bb53, otherwise: bb31];
    }

    bb52: {
        StorageLive(_112);
        _112 = ((_101 as Continue).0: u64);
        _100 = _112;
        StorageDead(_112);
        StorageDead(_101);
        StorageLive(_113);
        StorageLive(_114);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        _117 = &((*_2).1: state::perp_market::AMM);
        _116 = &(*_117);
        StorageLive(_118);
        StorageLive(_119);
        _119 = &((*_1).17: controller::position::PositionDirection);
        _118 = &(*_119);
        _115 = calculate_amm_available_liquidity(move _116, move _118) -> [return: bb55, unwind continue];
    }

    bb53: {
        StorageLive(_109);
        _109 = ((_101 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_111);
        _111 = _109;
        _0 = <std::result::Result<(u64, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _111) -> [return: bb54, unwind continue];
    }

    bb54: {
        StorageDead(_111);
        StorageDead(_109);
        StorageDead(_101);
        goto -> bb61;
    }

    bb55: {
        StorageDead(_118);
        StorageDead(_116);
        _114 = <std::result::Result<u64, error::ErrorCode> as Try>::branch(move _115) -> [return: bb56, unwind continue];
    }

    bb56: {
        StorageDead(_115);
        _120 = discriminant(_114);
        switchInt(move _120) -> [0: bb57, 1: bb58, otherwise: bb31];
    }

    bb57: {
        StorageLive(_124);
        _124 = ((_114 as Continue).0: u64);
        _113 = _124;
        StorageDead(_124);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_114);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        _127 = _100;
        StorageLive(_128);
        _128 = _113;
        _126 = std::cmp::min::<u64>(move _127, move _128) -> [return: bb60, unwind continue];
    }

    bb58: {
        StorageLive(_121);
        _121 = ((_114 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_123);
        _123 = _121;
        _0 = <std::result::Result<(u64, Option<u64>), error::ErrorCode> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _123) -> [return: bb59, unwind continue];
    }

    bb59: {
        StorageDead(_123);
        StorageDead(_121);
        StorageDead(_119);
        StorageDead(_117);
        StorageDead(_114);
        StorageDead(_113);
        goto -> bb61;
    }

    bb60: {
        StorageDead(_128);
        StorageDead(_127);
        StorageLive(_129);
        _129 = _7;
        _125 = (move _126, move _129);
        StorageDead(_129);
        StorageDead(_126);
        _0 = std::result::Result::<(u64, Option<u64>), error::ErrorCode>::Ok(move _125);
        StorageDead(_125);
        StorageDead(_113);
        StorageDead(_100);
        StorageDead(_88);
        StorageDead(_7);
        goto -> bb64;
    }

    bb61: {
        StorageDead(_100);
        goto -> bb62;
    }

    bb62: {
        StorageDead(_88);
        goto -> bb63;
    }

    bb63: {
        StorageDead(_7);
        goto -> bb64;
    }

    bb64: {
        return;
    }

    bb65 (cleanup): {
        drop(_56) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb66 (cleanup): {
        drop(_37) -> [return: bb67, unwind terminate(cleanup)];
    }

    bb67 (cleanup): {
        resume;
    }
}
