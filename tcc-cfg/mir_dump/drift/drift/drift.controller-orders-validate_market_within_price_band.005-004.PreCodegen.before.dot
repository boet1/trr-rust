digraph Mir_0_525 {
    graph [fontname="Courier, monospace"];
    node [fontname="Courier, monospace"];
    edge [fontname="Courier, monospace"];
    label=<fn validate_market_within_price_band(_1: &amp;ReErased state::perp_market::PerpMarket, _2: &amp;ReErased state::state::State, _3: i64) -&gt; std::result::Result&lt;bool, error::ErrorCode&gt;<br align="left"/>let _4: ();<br align="left"/>let mut _5: bool;<br align="left"/>let mut _6: &amp;ReErased state::perp_market::PerpMarket;<br align="left"/>let mut _7: !;<br align="left"/>let _8: u64;<br align="left"/>let mut _9: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, u64&gt;;<br align="left"/>let mut _10: std::result::Result&lt;u64, error::ErrorCode&gt;;<br align="left"/>let mut _11: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _12: isize;<br align="left"/>let _13: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _14: !;<br align="left"/>let mut _15: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _16: u64;<br align="left"/>let _17: i64;<br align="left"/>let mut _18: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _19: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _20: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _21: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _22: u64;<br align="left"/>let mut _23: isize;<br align="left"/>let _24: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _25: !;<br align="left"/>let mut _26: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _27: i64;<br align="left"/>let _28: i64;<br align="left"/>let mut _29: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, i64&gt;;<br align="left"/>let mut _30: std::result::Result&lt;i64, error::ErrorCode&gt;;<br align="left"/>let mut _31: &amp;ReErased state::perp_market::AMM;<br align="left"/>let _32: &amp;ReErased state::perp_market::AMM;<br align="left"/>let mut _33: u64;<br align="left"/>let mut _34: i64;<br align="left"/>let mut _35: isize;<br align="left"/>let _36: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _37: !;<br align="left"/>let mut _38: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _39: i64;<br align="left"/>let _40: ();<br align="left"/>let mut _41: bool;<br align="left"/>let mut _42: i64;<br align="left"/>let mut _43: i64;<br align="left"/>let mut _44: i64;<br align="left"/>let mut _45: i64;<br align="left"/>let _46: bool;<br align="left"/>let mut _47: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _48: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _49: i64;<br align="left"/>let mut _50: &amp;ReErased state::state::PriceDivergenceGuardRails;<br align="left"/>let _51: &amp;ReErased state::state::PriceDivergenceGuardRails;<br align="left"/>let mut _52: isize;<br align="left"/>let _53: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _54: !;<br align="left"/>let mut _55: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _56: bool;<br align="left"/>let mut _57: bool;<br align="left"/>let mut _58: !;<br align="left"/>let _59: ();<br align="left"/>let mut _60: &amp;ReErased str;<br align="left"/>let _61: &amp;ReErased str;<br align="left"/>let mut _62: &amp;ReErased std::string::String;<br align="left"/>let _63: &amp;ReErased std::string::String;<br align="left"/>let _64: std::string::String;<br align="left"/>let _65: std::string::String;<br align="left"/>let mut _66: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _67: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _68: &amp;ReErased [&amp;ReErased str; 5_usize];<br align="left"/>let _69: &amp;ReErased [&amp;ReErased str; 5_usize];<br align="left"/>let _70: [&amp;ReErased str; 5_usize];<br align="left"/>let mut _71: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _72: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let _73: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let _74: [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let mut _75: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _76: &amp;ReErased u16;<br align="left"/>let _77: &amp;ReErased u16;<br align="left"/>let mut _78: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _79: &amp;ReErased i64;<br align="left"/>let _80: &amp;ReErased i64;<br align="left"/>let mut _81: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _82: &amp;ReErased u64;<br align="left"/>let _83: &amp;ReErased u64;<br align="left"/>let mut _84: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _85: &amp;ReErased i64;<br align="left"/>let _86: &amp;ReErased i64;<br align="left"/>let mut _87: error::ErrorCode;<br align="left"/>let _88: bool;<br align="left"/>let mut _89: std::ops::ControlFlow&lt;std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;, bool&gt;;<br align="left"/>let mut _90: std::result::Result&lt;bool, error::ErrorCode&gt;;<br align="left"/>let mut _91: i64;<br align="left"/>let mut _92: &amp;ReErased state::state::PriceDivergenceGuardRails;<br align="left"/>let _93: &amp;ReErased state::state::PriceDivergenceGuardRails;<br align="left"/>let mut _94: isize;<br align="left"/>let _95: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let mut _96: !;<br align="left"/>let mut _97: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;;<br align="left"/>let _98: bool;<br align="left"/>let mut _99: bool;<br align="left"/>let mut _100: !;<br align="left"/>let _101: ();<br align="left"/>let mut _102: &amp;ReErased str;<br align="left"/>let _103: &amp;ReErased str;<br align="left"/>let mut _104: &amp;ReErased std::string::String;<br align="left"/>let _105: &amp;ReErased std::string::String;<br align="left"/>let _106: std::string::String;<br align="left"/>let _107: std::string::String;<br align="left"/>let mut _108: std::fmt::Arguments&lt;ReErased&gt;;<br align="left"/>let mut _109: &amp;ReErased [&amp;ReErased str];<br align="left"/>let mut _110: &amp;ReErased [&amp;ReErased str; 5_usize];<br align="left"/>let _111: &amp;ReErased [&amp;ReErased str; 5_usize];<br align="left"/>let _112: [&amp;ReErased str; 5_usize];<br align="left"/>let mut _113: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;];<br align="left"/>let mut _114: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let _115: &amp;ReErased [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let _116: [core::fmt::rt::Argument&lt;ReErased&gt;; 4_usize];<br align="left"/>let mut _117: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _118: &amp;ReErased u16;<br align="left"/>let _119: &amp;ReErased u16;<br align="left"/>let mut _120: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _121: &amp;ReErased i64;<br align="left"/>let _122: &amp;ReErased i64;<br align="left"/>let mut _123: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _124: &amp;ReErased i64;<br align="left"/>let _125: &amp;ReErased i64;<br align="left"/>let mut _126: core::fmt::rt::Argument&lt;ReErased&gt;;<br align="left"/>let mut _127: &amp;ReErased i64;<br align="left"/>let _128: &amp;ReErased i64;<br align="left"/>let mut _129: error::ErrorCode;<br align="left"/>let mut _130: &amp;ReErased [&amp;ReErased str; 5_usize];<br align="left"/>let mut _131: &amp;ReErased [&amp;ReErased str; 5_usize];<br align="left"/>debug market =&gt; _1;<br align="left"/>debug state =&gt; _2;<br align="left"/>debug oracle_price =&gt; _3;<br align="left"/>debug reserve_price =&gt; _8;<br align="left"/>debug residual =&gt; _13;<br align="left"/>debug val =&gt; _16;<br align="left"/>debug reserve_spread_pct =&gt; _17;<br align="left"/>debug residual =&gt; _24;<br align="left"/>debug val =&gt; _27;<br align="left"/>debug oracle_spread_pct =&gt; _28;<br align="left"/>debug residual =&gt; _36;<br align="left"/>debug val =&gt; _39;<br align="left"/>debug is_reserve_too_divergent =&gt; _46;<br align="left"/>debug residual =&gt; _53;<br align="left"/>debug val =&gt; _56;<br align="left"/>debug res =&gt; _65;<br align="left"/>debug is_oracle_too_divergent =&gt; _88;<br align="left"/>debug residual =&gt; _95;<br align="left"/>debug val =&gt; _98;<br align="left"/>debug res =&gt; _107;<br align="left"/>>;
    bb0__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">0</td></tr><tr><td align="left" balign="left">StorageLive(_4)<br/>StorageLive(_5)<br/>StorageLive(_6)<br/>_6 = &amp;(*_1)<br/></td></tr><tr><td align="left">_5 = PerpMarket::is_prediction_market(move _6)</td></tr></table>>];
    bb1__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">1</td></tr><tr><td align="left">switchInt(move _5)</td></tr></table>>];
    bb2__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">2</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/>StorageDead(_5)<br/>StorageDead(_4)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb3__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">3</td></tr><tr><td align="left" balign="left">StorageDead(_6)<br/>_4 = const ()<br/>StorageDead(_5)<br/>StorageDead(_4)<br/>StorageLive(_8)<br/>StorageLive(_9)<br/>StorageLive(_10)<br/>StorageLive(_11)<br/>_11 = &amp;((*_1).1: state::perp_market::AMM)<br/></td></tr><tr><td align="left">_10 = AMM::reserve_price(move _11)</td></tr></table>>];
    bb4__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">4</td></tr><tr><td align="left" balign="left">StorageDead(_11)<br/></td></tr><tr><td align="left">_9 = &lt;std::result::Result&lt;u64, error::ErrorCode&gt; as Try&gt;::branch(move _10)</td></tr></table>>];
    bb5__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">5</td></tr><tr><td align="left" balign="left">StorageDead(_10)<br/>_12 = discriminant(_9)<br/></td></tr><tr><td align="left">switchInt(move _12)</td></tr></table>>];
    bb6__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">6</td></tr><tr><td align="left" balign="left">StorageLive(_16)<br/>_16 = ((_9 as Continue).0: u64)<br/>_8 = _16<br/>StorageDead(_16)<br/>StorageDead(_9)<br/>StorageLive(_17)<br/>StorageLive(_18)<br/>StorageLive(_19)<br/>StorageLive(_20)<br/>StorageLive(_21)<br/>_21 = &amp;((*_1).1: state::perp_market::AMM)<br/>_20 = &amp;(*_21)<br/>StorageLive(_22)<br/>_22 = _8<br/></td></tr><tr><td align="left">_19 = calculate_oracle_twap_5min_price_spread_pct(move _20, move _22)</td></tr></table>>];
    bb7__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">7</td></tr><tr><td align="left">unreachable</td></tr></table>>];
    bb8__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">8</td></tr><tr><td align="left" balign="left">StorageLive(_13)<br/>_13 = ((_9 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_15)<br/>_15 = _13<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _15)</td></tr></table>>];
    bb9__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">9</td></tr><tr><td align="left" balign="left">StorageDead(_15)<br/>StorageDead(_13)<br/>StorageDead(_9)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb10__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">10</td></tr><tr><td align="left" balign="left">StorageDead(_22)<br/>StorageDead(_20)<br/></td></tr><tr><td align="left">_18 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _19)</td></tr></table>>];
    bb11__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">11</td></tr><tr><td align="left" balign="left">StorageDead(_19)<br/>_23 = discriminant(_18)<br/></td></tr><tr><td align="left">switchInt(move _23)</td></tr></table>>];
    bb12__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">12</td></tr><tr><td align="left" balign="left">StorageLive(_27)<br/>_27 = ((_18 as Continue).0: i64)<br/>_17 = _27<br/>StorageDead(_27)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/>StorageLive(_28)<br/>StorageLive(_29)<br/>StorageLive(_30)<br/>StorageLive(_31)<br/>StorageLive(_32)<br/>_32 = &amp;((*_1).1: state::perp_market::AMM)<br/>_31 = &amp;(*_32)<br/>StorageLive(_33)<br/>StorageLive(_34)<br/>_34 = _3<br/></td></tr><tr><td align="left">_33 = core::num::&lt;impl i64&gt;::unsigned_abs(move _34)</td></tr></table>>];
    bb13__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">13</td></tr><tr><td align="left" balign="left">StorageLive(_24)<br/>_24 = ((_18 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_26)<br/>_26 = _24<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _26)</td></tr></table>>];
    bb14__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">14</td></tr><tr><td align="left" balign="left">StorageDead(_26)<br/>StorageDead(_24)<br/>StorageDead(_21)<br/>StorageDead(_18)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb15__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">15</td></tr><tr><td align="left" balign="left">StorageDead(_34)<br/></td></tr><tr><td align="left">_30 = calculate_oracle_twap_5min_price_spread_pct(move _31, move _33)</td></tr></table>>];
    bb16__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">16</td></tr><tr><td align="left" balign="left">StorageDead(_33)<br/>StorageDead(_31)<br/></td></tr><tr><td align="left">_29 = &lt;std::result::Result&lt;i64, error::ErrorCode&gt; as Try&gt;::branch(move _30)</td></tr></table>>];
    bb17__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">17</td></tr><tr><td align="left" balign="left">StorageDead(_30)<br/>_35 = discriminant(_29)<br/></td></tr><tr><td align="left">switchInt(move _35)</td></tr></table>>];
    bb18__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">18</td></tr><tr><td align="left" balign="left">StorageLive(_39)<br/>_39 = ((_29 as Continue).0: i64)<br/>_28 = _39<br/>StorageDead(_39)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/>StorageLive(_40)<br/>StorageLive(_41)<br/>StorageLive(_42)<br/>StorageLive(_43)<br/>_43 = _17<br/></td></tr><tr><td align="left">_42 = core::num::&lt;impl i64&gt;::abs(move _43)</td></tr></table>>];
    bb19__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">19</td></tr><tr><td align="left" balign="left">StorageLive(_36)<br/>_36 = ((_29 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_38)<br/>_38 = _36<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _38)</td></tr></table>>];
    bb20__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">20</td></tr><tr><td align="left" balign="left">StorageDead(_38)<br/>StorageDead(_36)<br/>StorageDead(_32)<br/>StorageDead(_29)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb21__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">21</td></tr><tr><td align="left" balign="left">StorageDead(_43)<br/>StorageLive(_44)<br/>StorageLive(_45)<br/>_45 = _28<br/></td></tr><tr><td align="left">_44 = core::num::&lt;impl i64&gt;::abs(move _45)</td></tr></table>>];
    bb22__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">22</td></tr><tr><td align="left" balign="left">StorageDead(_45)<br/>_41 = Gt(move _42, move _44)<br/></td></tr><tr><td align="left">switchInt(move _41)</td></tr></table>>];
    bb23__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">23</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_42)<br/>StorageLive(_46)<br/>StorageLive(_47)<br/>StorageLive(_48)<br/>StorageLive(_49)<br/>_49 = _17<br/>StorageLive(_50)<br/>StorageLive(_51)<br/>_51 = &amp;(((*_2).7: state::state::OracleGuardRails).0: state::state::PriceDivergenceGuardRails)<br/>_50 = &amp;(*_51)<br/></td></tr><tr><td align="left">_48 = is_oracle_mark_too_divergent(move _49, move _50)</td></tr></table>>];
    bb24__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">24</td></tr><tr><td align="left" balign="left">StorageDead(_50)<br/>StorageDead(_49)<br/></td></tr><tr><td align="left">_47 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _48)</td></tr></table>>];
    bb25__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">25</td></tr><tr><td align="left" balign="left">StorageDead(_48)<br/>_52 = discriminant(_47)<br/></td></tr><tr><td align="left">switchInt(move _52)</td></tr></table>>];
    bb26__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">26</td></tr><tr><td align="left" balign="left">StorageLive(_56)<br/>_56 = ((_47 as Continue).0: bool)<br/>_46 = _56<br/>StorageDead(_56)<br/>StorageDead(_51)<br/>StorageDead(_47)<br/>StorageLive(_57)<br/>_57 = _46<br/></td></tr><tr><td align="left">switchInt(move _57)</td></tr></table>>];
    bb27__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">27</td></tr><tr><td align="left" balign="left">StorageLive(_53)<br/>_53 = ((_47 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_55)<br/>_55 = _53<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _55)</td></tr></table>>];
    bb28__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">28</td></tr><tr><td align="left" balign="left">StorageDead(_55)<br/>StorageDead(_53)<br/>StorageDead(_51)<br/>StorageDead(_47)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb29__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">29</td></tr><tr><td align="left" balign="left">StorageLive(_59)<br/>StorageLive(_60)<br/>StorageLive(_61)<br/>StorageLive(_62)<br/>StorageLive(_63)<br/>StorageLive(_64)<br/>StorageLive(_65)<br/>StorageLive(_66)<br/>StorageLive(_67)<br/>StorageLive(_68)<br/>StorageLive(_69)<br/>_130 = const _<br/>_69 = &amp;(*_130)<br/>_68 = &amp;(*_69)<br/>_67 = move _68 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_68)<br/>StorageLive(_71)<br/>StorageLive(_72)<br/>StorageLive(_73)<br/>StorageLive(_74)<br/>StorageLive(_75)<br/>StorageLive(_76)<br/>StorageLive(_77)<br/>_77 = &amp;((*_1).21: u16)<br/>_76 = &amp;(*_77)<br/></td></tr><tr><td align="left">_75 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _76)</td></tr></table>>];
    bb30__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">30</td></tr><tr><td align="left" balign="left">_40 = const ()<br/>StorageDead(_57)<br/>StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb31__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">31</td></tr><tr><td align="left" balign="left">StorageDead(_76)<br/>StorageLive(_78)<br/>StorageLive(_79)<br/>StorageLive(_80)<br/>_80 = &amp;((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/>_79 = &amp;(*_80)<br/></td></tr><tr><td align="left">_78 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i64&gt;(move _79)</td></tr></table>>];
    bb32__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">32</td></tr><tr><td align="left" balign="left">StorageDead(_79)<br/>StorageLive(_81)<br/>StorageLive(_82)<br/>StorageLive(_83)<br/>_83 = &amp;_8<br/>_82 = &amp;(*_83)<br/></td></tr><tr><td align="left">_81 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u64&gt;(move _82)</td></tr></table>>];
    bb33__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">33</td></tr><tr><td align="left" balign="left">StorageDead(_82)<br/>StorageLive(_84)<br/>StorageLive(_85)<br/>StorageLive(_86)<br/>_86 = &amp;_17<br/>_85 = &amp;(*_86)<br/></td></tr><tr><td align="left">_84 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i64&gt;(move _85)</td></tr></table>>];
    bb34__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">34</td></tr><tr><td align="left" balign="left">StorageDead(_85)<br/>_74 = [move _75, move _78, move _81, move _84]<br/>StorageDead(_84)<br/>StorageDead(_81)<br/>StorageDead(_78)<br/>StorageDead(_75)<br/>_73 = &amp;_74<br/>_72 = &amp;(*_73)<br/>_71 = move _72 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_72)<br/></td></tr><tr><td align="left">_66 = Arguments::&lt;'_&gt;::new_v1(move _67, move _71)</td></tr></table>>];
    bb35__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">35</td></tr><tr><td align="left" balign="left">StorageDead(_71)<br/>StorageDead(_67)<br/></td></tr><tr><td align="left">_65 = format(move _66)</td></tr></table>>];
    bb36__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">36</td></tr><tr><td align="left" balign="left">StorageDead(_66)<br/>StorageDead(_86)<br/>StorageDead(_83)<br/>StorageDead(_80)<br/>StorageDead(_77)<br/>StorageDead(_74)<br/>StorageDead(_73)<br/>StorageDead(_69)<br/>_64 = move _65<br/>StorageDead(_65)<br/>_63 = &amp;_64<br/>_62 = &amp;(*_63)<br/></td></tr><tr><td align="left">_61 = &lt;String as Deref&gt;::deref(move _62)</td></tr></table>>];
    bb37__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">37</td></tr><tr><td align="left" balign="left">_60 = &amp;(*_61)<br/>StorageDead(_62)<br/></td></tr><tr><td align="left">_59 = solana_program::log::sol_log(move _60)</td></tr></table>>];
    bb38__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">38</td></tr><tr><td align="left" balign="left">StorageDead(_60)<br/></td></tr><tr><td align="left">drop(_64)</td></tr></table>>];
    bb39__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">39</td></tr><tr><td align="left" balign="left">StorageDead(_64)<br/>StorageDead(_63)<br/>StorageDead(_61)<br/>StorageDead(_59)<br/>StorageLive(_87)<br/>_87 = error::ErrorCode::PriceBandsBreached<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Err(move _87)<br/>StorageDead(_87)<br/>StorageDead(_57)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb40__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">40</td></tr><tr><td align="left" balign="left">StorageDead(_44)<br/>StorageDead(_42)<br/>StorageLive(_88)<br/>StorageLive(_89)<br/>StorageLive(_90)<br/>StorageLive(_91)<br/>_91 = _28<br/>StorageLive(_92)<br/>StorageLive(_93)<br/>_93 = &amp;(((*_2).7: state::state::OracleGuardRails).0: state::state::PriceDivergenceGuardRails)<br/>_92 = &amp;(*_93)<br/></td></tr><tr><td align="left">_90 = is_oracle_mark_too_divergent(move _91, move _92)</td></tr></table>>];
    bb41__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">41</td></tr><tr><td align="left" balign="left">StorageDead(_92)<br/>StorageDead(_91)<br/></td></tr><tr><td align="left">_89 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as Try&gt;::branch(move _90)</td></tr></table>>];
    bb42__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">42</td></tr><tr><td align="left" balign="left">StorageDead(_90)<br/>_94 = discriminant(_89)<br/></td></tr><tr><td align="left">switchInt(move _94)</td></tr></table>>];
    bb43__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">43</td></tr><tr><td align="left" balign="left">StorageLive(_98)<br/>_98 = ((_89 as Continue).0: bool)<br/>_88 = _98<br/>StorageDead(_98)<br/>StorageDead(_93)<br/>StorageDead(_89)<br/>StorageLive(_99)<br/>_99 = _88<br/></td></tr><tr><td align="left">switchInt(move _99)</td></tr></table>>];
    bb44__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">44</td></tr><tr><td align="left" balign="left">StorageLive(_95)<br/>_95 = ((_89 as Break).0: std::result::Result&lt;std::convert::Infallible, error::ErrorCode&gt;)<br/>StorageLive(_97)<br/>_97 = _95<br/></td></tr><tr><td align="left">_0 = &lt;std::result::Result&lt;bool, error::ErrorCode&gt; as FromResidual&lt;std::result::Result&lt;Infallible, error::ErrorCode&gt;&gt;&gt;::from_residual(move _97)</td></tr></table>>];
    bb45__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">45</td></tr><tr><td align="left" balign="left">StorageDead(_97)<br/>StorageDead(_95)<br/>StorageDead(_93)<br/>StorageDead(_89)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb46__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">46</td></tr><tr><td align="left" balign="left">StorageLive(_101)<br/>StorageLive(_102)<br/>StorageLive(_103)<br/>StorageLive(_104)<br/>StorageLive(_105)<br/>StorageLive(_106)<br/>StorageLive(_107)<br/>StorageLive(_108)<br/>StorageLive(_109)<br/>StorageLive(_110)<br/>StorageLive(_111)<br/>_131 = const _<br/>_111 = &amp;(*_131)<br/>_110 = &amp;(*_111)<br/>_109 = move _110 as &amp;[&amp;str] (PointerCoercion(Unsize))<br/>StorageDead(_110)<br/>StorageLive(_113)<br/>StorageLive(_114)<br/>StorageLive(_115)<br/>StorageLive(_116)<br/>StorageLive(_117)<br/>StorageLive(_118)<br/>StorageLive(_119)<br/>_119 = &amp;((*_1).21: u16)<br/>_118 = &amp;(*_119)<br/></td></tr><tr><td align="left">_117 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;u16&gt;(move _118)</td></tr></table>>];
    bb47__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">47</td></tr><tr><td align="left" balign="left">_40 = const ()<br/>StorageDead(_99)<br/>StorageDead(_88)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb48__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">48</td></tr><tr><td align="left" balign="left">StorageDead(_118)<br/>StorageLive(_120)<br/>StorageLive(_121)<br/>StorageLive(_122)<br/>_122 = &amp;((((*_1).1: state::perp_market::AMM).1: state::oracle::HistoricalOracleData).4: i64)<br/>_121 = &amp;(*_122)<br/></td></tr><tr><td align="left">_120 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i64&gt;(move _121)</td></tr></table>>];
    bb49__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">49</td></tr><tr><td align="left" balign="left">StorageDead(_121)<br/>StorageLive(_123)<br/>StorageLive(_124)<br/>StorageLive(_125)<br/>_125 = &amp;_3<br/>_124 = &amp;(*_125)<br/></td></tr><tr><td align="left">_123 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i64&gt;(move _124)</td></tr></table>>];
    bb50__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">50</td></tr><tr><td align="left" balign="left">StorageDead(_124)<br/>StorageLive(_126)<br/>StorageLive(_127)<br/>StorageLive(_128)<br/>_128 = &amp;_28<br/>_127 = &amp;(*_128)<br/></td></tr><tr><td align="left">_126 = core::fmt::rt::Argument::&lt;'_&gt;::new_display::&lt;i64&gt;(move _127)</td></tr></table>>];
    bb51__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">51</td></tr><tr><td align="left" balign="left">StorageDead(_127)<br/>_116 = [move _117, move _120, move _123, move _126]<br/>StorageDead(_126)<br/>StorageDead(_123)<br/>StorageDead(_120)<br/>StorageDead(_117)<br/>_115 = &amp;_116<br/>_114 = &amp;(*_115)<br/>_113 = move _114 as &amp;[core::fmt::rt::Argument&lt;'_&gt;] (PointerCoercion(Unsize))<br/>StorageDead(_114)<br/></td></tr><tr><td align="left">_108 = Arguments::&lt;'_&gt;::new_v1(move _109, move _113)</td></tr></table>>];
    bb52__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">52</td></tr><tr><td align="left" balign="left">StorageDead(_113)<br/>StorageDead(_109)<br/></td></tr><tr><td align="left">_107 = format(move _108)</td></tr></table>>];
    bb53__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">53</td></tr><tr><td align="left" balign="left">StorageDead(_108)<br/>StorageDead(_128)<br/>StorageDead(_125)<br/>StorageDead(_122)<br/>StorageDead(_119)<br/>StorageDead(_116)<br/>StorageDead(_115)<br/>StorageDead(_111)<br/>_106 = move _107<br/>StorageDead(_107)<br/>_105 = &amp;_106<br/>_104 = &amp;(*_105)<br/></td></tr><tr><td align="left">_103 = &lt;String as Deref&gt;::deref(move _104)</td></tr></table>>];
    bb54__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">54</td></tr><tr><td align="left" balign="left">_102 = &amp;(*_103)<br/>StorageDead(_104)<br/></td></tr><tr><td align="left">_101 = solana_program::log::sol_log(move _102)</td></tr></table>>];
    bb55__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">55</td></tr><tr><td align="left" balign="left">StorageDead(_102)<br/></td></tr><tr><td align="left">drop(_106)</td></tr></table>>];
    bb56__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">56</td></tr><tr><td align="left" balign="left">StorageDead(_106)<br/>StorageDead(_105)<br/>StorageDead(_103)<br/>StorageDead(_101)<br/>StorageLive(_129)<br/>_129 = error::ErrorCode::PriceBandsBreached<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Err(move _129)<br/>StorageDead(_129)<br/>StorageDead(_99)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb57__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">57</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/>_0 = std::result::Result::&lt;bool, error::ErrorCode&gt;::Ok(const true)<br/>StorageDead(_28)<br/>StorageDead(_17)<br/>StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb58__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">58</td></tr><tr><td align="left" balign="left">StorageDead(_88)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb59__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">59</td></tr><tr><td align="left" balign="left">StorageDead(_46)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb60__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">60</td></tr><tr><td align="left" balign="left">StorageDead(_41)<br/>StorageDead(_40)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb61__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">61</td></tr><tr><td align="left" balign="left">StorageDead(_28)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb62__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">62</td></tr><tr><td align="left" balign="left">StorageDead(_17)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb63__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">63</td></tr><tr><td align="left" balign="left">StorageDead(_8)<br/></td></tr><tr><td align="left">goto</td></tr></table>>];
    bb64__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="gray" align="center" colspan="1">64</td></tr><tr><td align="left">return</td></tr></table>>];
    bb65__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">65 (cleanup)</td></tr><tr><td align="left">drop(_106)</td></tr></table>>];
    bb66__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">66 (cleanup)</td></tr><tr><td align="left">drop(_64)</td></tr></table>>];
    bb67__0_525 [shape="none", label=<<table border="0" cellborder="1" cellspacing="0"><tr><td bgcolor="lightblue" align="center" colspan="1">67 (cleanup)</td></tr><tr><td align="left">resume</td></tr></table>>];
    bb0__0_525 -> bb1__0_525 [label="return"];
    bb1__0_525 -> bb3__0_525 [label="0"];
    bb1__0_525 -> bb2__0_525 [label="otherwise"];
    bb2__0_525 -> bb64__0_525 [label=""];
    bb3__0_525 -> bb4__0_525 [label="return"];
    bb4__0_525 -> bb5__0_525 [label="return"];
    bb5__0_525 -> bb6__0_525 [label="0"];
    bb5__0_525 -> bb8__0_525 [label="1"];
    bb5__0_525 -> bb7__0_525 [label="otherwise"];
    bb6__0_525 -> bb10__0_525 [label="return"];
    bb8__0_525 -> bb9__0_525 [label="return"];
    bb9__0_525 -> bb63__0_525 [label=""];
    bb10__0_525 -> bb11__0_525 [label="return"];
    bb11__0_525 -> bb12__0_525 [label="0"];
    bb11__0_525 -> bb13__0_525 [label="1"];
    bb11__0_525 -> bb7__0_525 [label="otherwise"];
    bb12__0_525 -> bb15__0_525 [label="return"];
    bb13__0_525 -> bb14__0_525 [label="return"];
    bb14__0_525 -> bb62__0_525 [label=""];
    bb15__0_525 -> bb16__0_525 [label="return"];
    bb16__0_525 -> bb17__0_525 [label="return"];
    bb17__0_525 -> bb18__0_525 [label="0"];
    bb17__0_525 -> bb19__0_525 [label="1"];
    bb17__0_525 -> bb7__0_525 [label="otherwise"];
    bb18__0_525 -> bb21__0_525 [label="return"];
    bb19__0_525 -> bb20__0_525 [label="return"];
    bb20__0_525 -> bb61__0_525 [label=""];
    bb21__0_525 -> bb22__0_525 [label="return"];
    bb22__0_525 -> bb40__0_525 [label="0"];
    bb22__0_525 -> bb23__0_525 [label="otherwise"];
    bb23__0_525 -> bb24__0_525 [label="return"];
    bb24__0_525 -> bb25__0_525 [label="return"];
    bb25__0_525 -> bb26__0_525 [label="0"];
    bb25__0_525 -> bb27__0_525 [label="1"];
    bb25__0_525 -> bb7__0_525 [label="otherwise"];
    bb26__0_525 -> bb30__0_525 [label="0"];
    bb26__0_525 -> bb29__0_525 [label="otherwise"];
    bb27__0_525 -> bb28__0_525 [label="return"];
    bb28__0_525 -> bb59__0_525 [label=""];
    bb29__0_525 -> bb31__0_525 [label="return"];
    bb30__0_525 -> bb57__0_525 [label=""];
    bb31__0_525 -> bb32__0_525 [label="return"];
    bb32__0_525 -> bb33__0_525 [label="return"];
    bb33__0_525 -> bb34__0_525 [label="return"];
    bb34__0_525 -> bb35__0_525 [label="return"];
    bb35__0_525 -> bb36__0_525 [label="return"];
    bb36__0_525 -> bb37__0_525 [label="return"];
    bb36__0_525 -> bb66__0_525 [label="unwind"];
    bb37__0_525 -> bb38__0_525 [label="return"];
    bb37__0_525 -> bb66__0_525 [label="unwind"];
    bb38__0_525 -> bb39__0_525 [label="return"];
    bb38__0_525 -> bb67__0_525 [label="unwind"];
    bb39__0_525 -> bb59__0_525 [label=""];
    bb40__0_525 -> bb41__0_525 [label="return"];
    bb41__0_525 -> bb42__0_525 [label="return"];
    bb42__0_525 -> bb43__0_525 [label="0"];
    bb42__0_525 -> bb44__0_525 [label="1"];
    bb42__0_525 -> bb7__0_525 [label="otherwise"];
    bb43__0_525 -> bb47__0_525 [label="0"];
    bb43__0_525 -> bb46__0_525 [label="otherwise"];
    bb44__0_525 -> bb45__0_525 [label="return"];
    bb45__0_525 -> bb58__0_525 [label=""];
    bb46__0_525 -> bb48__0_525 [label="return"];
    bb47__0_525 -> bb57__0_525 [label=""];
    bb48__0_525 -> bb49__0_525 [label="return"];
    bb49__0_525 -> bb50__0_525 [label="return"];
    bb50__0_525 -> bb51__0_525 [label="return"];
    bb51__0_525 -> bb52__0_525 [label="return"];
    bb52__0_525 -> bb53__0_525 [label="return"];
    bb53__0_525 -> bb54__0_525 [label="return"];
    bb53__0_525 -> bb65__0_525 [label="unwind"];
    bb54__0_525 -> bb55__0_525 [label="return"];
    bb54__0_525 -> bb65__0_525 [label="unwind"];
    bb55__0_525 -> bb56__0_525 [label="return"];
    bb55__0_525 -> bb67__0_525 [label="unwind"];
    bb56__0_525 -> bb58__0_525 [label=""];
    bb57__0_525 -> bb64__0_525 [label=""];
    bb58__0_525 -> bb60__0_525 [label=""];
    bb59__0_525 -> bb60__0_525 [label=""];
    bb60__0_525 -> bb61__0_525 [label=""];
    bb61__0_525 -> bb62__0_525 [label=""];
    bb62__0_525 -> bb63__0_525 [label=""];
    bb63__0_525 -> bb64__0_525 [label=""];
    bb65__0_525 -> bb67__0_525 [label="return"];
    bb66__0_525 -> bb67__0_525 [label="return"];
}
