// MIR for `admin::handle_move_amm_price` before PreCodegen

fn admin::handle_move_amm_price(_1: anchor_lang::context::Context<'_, '_, '_, '_, admin::AdminUpdatePerpMarket<'_>>, _2: u128, _3: u128, _4: u128) -> std::result::Result<(), anchor_lang::error::Error> {
    debug ctx => _1;
    debug base_asset_reserve => _2;
    debug quote_asset_reserve => _3;
    debug sqrt_k => _4;
    let mut _0: std::result::Result<(), anchor_lang::error::Error>;
    let _5: ();
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, anchor_lang::error::Error>>;
    let mut _7: std::result::Result<(), anchor_lang::error::Error>;
    let mut _8: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let _9: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _10: isize;
    let _11: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let mut _12: !;
    let mut _13: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>;
    let _14: ();
    let _15: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _16: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _17: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>, std::cell::RefMut<'_, state::perp_market::PerpMarket>>;
    let mut _18: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, error::ErrorCode>;
    let mut _19: std::result::Result<std::cell::RefMut<'_, state::perp_market::PerpMarket>, anchor_lang::error::Error>;
    let mut _20: &anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>;
    let mut _21: {closure@programs/drift/src/macros.rs:58:44: 58:47};
    let mut _22: isize;
    let _23: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _24: !;
    let mut _25: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _26: std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _27: ();
    let mut _28: &str;
    let _29: &str;
    let mut _30: &std::string::String;
    let _31: &std::string::String;
    let _32: std::string::String;
    let mut _34: std::fmt::Arguments<'_>;
    let mut _35: &[&str];
    let mut _36: &[&str; 1];
    let _37: &[&str; 1];
    let _38: [&str; 1];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let mut _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: &[core::fmt::rt::Argument<'_>; 1];
    let _42: [core::fmt::rt::Argument<'_>; 1];
    let mut _43: core::fmt::rt::Argument<'_>;
    let mut _44: &u16;
    let _45: &u16;
    let _46: &state::perp_market::PerpMarket;
    let mut _47: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _49: &state::perp_market::PerpMarket;
    let mut _50: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _52: &state::perp_market::PerpMarket;
    let mut _53: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _55: &state::perp_market::PerpMarket;
    let mut _56: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _58: &state::perp_market::PerpMarket;
    let mut _59: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _61: &state::perp_market::PerpMarket;
    let mut _62: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _63: ();
    let mut _64: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _65: std::result::Result<(), error::ErrorCode>;
    let mut _66: &mut state::perp_market::PerpMarket;
    let mut _67: &mut state::perp_market::PerpMarket;
    let mut _68: &mut std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _69: u128;
    let mut _70: u128;
    let mut _71: u128;
    let mut _72: isize;
    let mut _74: !;
    let mut _75: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let _77: ();
    let mut _78: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, error::ErrorCode>>;
    let mut _79: std::result::Result<(), error::ErrorCode>;
    let mut _80: &state::perp_market::PerpMarket;
    let _81: &state::perp_market::PerpMarket;
    let mut _82: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _83: isize;
    let mut _85: !;
    let mut _86: std::result::Result<std::convert::Infallible, error::ErrorCode>;
    let mut _89: &state::perp_market::PerpMarket;
    let mut _90: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _92: &state::perp_market::PerpMarket;
    let mut _93: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _95: &state::perp_market::PerpMarket;
    let mut _96: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _98: &state::perp_market::PerpMarket;
    let mut _99: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let mut _101: &state::perp_market::PerpMarket;
    let mut _102: &std::cell::RefMut<'_, state::perp_market::PerpMarket>;
    let _103: ();
    let mut _104: &str;
    let _105: &str;
    let mut _106: &std::string::String;
    let _107: &std::string::String;
    let _108: std::string::String;
    let mut _110: std::fmt::Arguments<'_>;
    let mut _111: &[&str];
    let mut _112: &[&str; 2];
    let _113: &[&str; 2];
    let _114: [&str; 2];
    let mut _115: &[core::fmt::rt::Argument<'_>];
    let mut _116: &[core::fmt::rt::Argument<'_>; 2];
    let _117: &[core::fmt::rt::Argument<'_>; 2];
    let _118: [core::fmt::rt::Argument<'_>; 2];
    let mut _119: core::fmt::rt::Argument<'_>;
    let mut _120: &u128;
    let _121: &u128;
    let mut _122: core::fmt::rt::Argument<'_>;
    let mut _123: &u128;
    let _124: &u128;
    let _125: ();
    let mut _126: &str;
    let _127: &str;
    let mut _128: &std::string::String;
    let _129: &std::string::String;
    let _130: std::string::String;
    let mut _132: std::fmt::Arguments<'_>;
    let mut _133: &[&str];
    let mut _134: &[&str; 2];
    let _135: &[&str; 2];
    let _136: [&str; 2];
    let mut _137: &[core::fmt::rt::Argument<'_>];
    let mut _138: &[core::fmt::rt::Argument<'_>; 2];
    let _139: &[core::fmt::rt::Argument<'_>; 2];
    let _140: [core::fmt::rt::Argument<'_>; 2];
    let mut _141: core::fmt::rt::Argument<'_>;
    let mut _142: &u128;
    let _143: &u128;
    let mut _144: core::fmt::rt::Argument<'_>;
    let mut _145: &u128;
    let _146: &u128;
    let _147: ();
    let mut _148: &str;
    let _149: &str;
    let mut _150: &std::string::String;
    let _151: &std::string::String;
    let _152: std::string::String;
    let mut _154: std::fmt::Arguments<'_>;
    let mut _155: &[&str];
    let mut _156: &[&str; 2];
    let _157: &[&str; 2];
    let _158: [&str; 2];
    let mut _159: &[core::fmt::rt::Argument<'_>];
    let mut _160: &[core::fmt::rt::Argument<'_>; 2];
    let _161: &[core::fmt::rt::Argument<'_>; 2];
    let _162: [core::fmt::rt::Argument<'_>; 2];
    let mut _163: core::fmt::rt::Argument<'_>;
    let mut _164: &u128;
    let _165: &u128;
    let mut _166: core::fmt::rt::Argument<'_>;
    let mut _167: &u128;
    let _168: &u128;
    let _169: ();
    let mut _170: &str;
    let _171: &str;
    let mut _172: &std::string::String;
    let _173: &std::string::String;
    let _174: std::string::String;
    let mut _176: std::fmt::Arguments<'_>;
    let mut _177: &[&str];
    let mut _178: &[&str; 2];
    let _179: &[&str; 2];
    let _180: [&str; 2];
    let mut _181: &[core::fmt::rt::Argument<'_>];
    let mut _182: &[core::fmt::rt::Argument<'_>; 2];
    let _183: &[core::fmt::rt::Argument<'_>; 2];
    let _184: [core::fmt::rt::Argument<'_>; 2];
    let mut _185: core::fmt::rt::Argument<'_>;
    let mut _186: &u128;
    let _187: &u128;
    let mut _188: core::fmt::rt::Argument<'_>;
    let mut _189: &u128;
    let _190: &u128;
    let _191: ();
    let mut _192: &str;
    let _193: &str;
    let mut _194: &std::string::String;
    let _195: &std::string::String;
    let _196: std::string::String;
    let mut _198: std::fmt::Arguments<'_>;
    let mut _199: &[&str];
    let mut _200: &[&str; 2];
    let _201: &[&str; 2];
    let _202: [&str; 2];
    let mut _203: &[core::fmt::rt::Argument<'_>];
    let mut _204: &[core::fmt::rt::Argument<'_>; 2];
    let _205: &[core::fmt::rt::Argument<'_>; 2];
    let _206: [core::fmt::rt::Argument<'_>; 2];
    let mut _207: core::fmt::rt::Argument<'_>;
    let mut _208: &u128;
    let _209: &u128;
    let mut _210: core::fmt::rt::Argument<'_>;
    let mut _211: &u128;
    let _212: &u128;
    let mut _213: ();
    let mut _220: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _221: &mut instructions::admin::AdminUpdatePerpMarket<'_>;
    let mut _222: isize;
    let mut _223: isize;
    let mut _224: isize;
    let mut _225: isize;
    let mut _226: isize;
    let mut _227: isize;
    let mut _228: isize;
    let mut _229: isize;
    let mut _230: isize;
    let mut _231: isize;
    scope 1 {
        debug residual => _11;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _14;
        scope 4 {
        }
    }
    scope 5 {
        debug perp_market => _15;
        let _33: std::string::String;
        let _48: u128;
        let mut _219: &[&str; 1];
        scope 10 {
            debug res => _33;
        }
        scope 11 {
            debug base_asset_reserve_before => _48;
            let _51: u128;
            scope 12 {
                debug quote_asset_reserve_before => _51;
                let _54: u128;
                scope 13 {
                    debug sqrt_k_before => _54;
                    let _57: u128;
                    scope 14 {
                        debug max_base_asset_reserve_before => _57;
                        let _60: u128;
                        scope 15 {
                            debug min_base_asset_reserve_before => _60;
                            let _73: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _76: ();
                            let _84: std::result::Result<std::convert::Infallible, error::ErrorCode>;
                            let _87: ();
                            let _88: u128;
                            scope 16 {
                                debug residual => _73;
                                scope 17 {
                                }
                            }
                            scope 18 {
                                debug val => _76;
                                scope 19 {
                                }
                            }
                            scope 20 {
                                debug residual => _84;
                                scope 21 {
                                }
                            }
                            scope 22 {
                                debug val => _87;
                                scope 23 {
                                }
                            }
                            scope 24 {
                                debug base_asset_reserve_after => _88;
                                let _91: u128;
                                scope 25 {
                                    debug quote_asset_reserve_after => _91;
                                    let _94: u128;
                                    scope 26 {
                                        debug sqrt_k_after => _94;
                                        let _97: u128;
                                        scope 27 {
                                            debug max_base_asset_reserve_after => _97;
                                            let _100: u128;
                                            scope 28 {
                                                debug min_base_asset_reserve_after => _100;
                                                let _109: std::string::String;
                                                let _131: std::string::String;
                                                let _153: std::string::String;
                                                let _175: std::string::String;
                                                let _197: std::string::String;
                                                let mut _214: &[&str; 2];
                                                let mut _215: &[&str; 2];
                                                let mut _216: &[&str; 2];
                                                let mut _217: &[&str; 2];
                                                let mut _218: &[&str; 2];
                                                scope 29 {
                                                    debug res => _109;
                                                }
                                                scope 30 {
                                                    debug res => _131;
                                                }
                                                scope 31 {
                                                    debug res => _153;
                                                }
                                                scope 32 {
                                                    debug res => _175;
                                                }
                                                scope 33 {
                                                    debug res => _197;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 6 {
        debug residual => _23;
        scope 7 {
        }
    }
    scope 8 {
        debug val => _26;
        scope 9 {
        }
    }

    bb0: {
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        StorageLive(_9);
        _220 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _9 = &((*_220).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _8 = &(*_9);
        _7 = constraints::perp_market_valid(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_8);
        _6 = <std::result::Result<(), anchor_lang::error::Error> as Try>::branch(move _7) -> [return: bb2, unwind: bb88];
    }

    bb2: {
        StorageDead(_7);
        _10 = discriminant(_6);
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        StorageLive(_14);
        _14 = ((_6 as Continue).0: ());
        _5 = _14;
        StorageDead(_14);
        _222 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        StorageLive(_15);
        StorageLive(_16);
        StorageLive(_17);
        StorageLive(_18);
        StorageLive(_19);
        StorageLive(_20);
        _221 = deref_copy (_1.1: &mut instructions::admin::AdminUpdatePerpMarket<'_>);
        _20 = &((*_221).2: anchor_lang::prelude::AccountLoader<'_, state::perp_market::PerpMarket>);
        _19 = anchor_lang::prelude::AccountLoader::<'_, PerpMarket>::load_mut(move _20) -> [return: bb7, unwind continue];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        StorageLive(_11);
        _11 = move ((_6 as Break).0: std::result::Result<std::convert::Infallible, anchor_lang::error::Error>);
        StorageLive(_13);
        _13 = move _11;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, anchor_lang::error::Error>>>::from_residual(move _13) -> [return: bb6, unwind: bb90];
    }

    bb6: {
        StorageDead(_13);
        StorageDead(_11);
        _228 = discriminant(_6);
        StorageDead(_9);
        StorageDead(_6);
        StorageDead(_5);
        goto -> bb80;
    }

    bb7: {
        StorageDead(_20);
        StorageLive(_21);
        _21 = {closure@programs/drift/src/macros.rs:58:44: 58:47};
        _18 = std::result::Result::<RefMut<'_, PerpMarket>, anchor_lang::error::Error>::map_err::<error::ErrorCode, {closure@programs/drift/src/macros.rs:58:44: 58:47}>(move _19, move _21) -> [return: bb8, unwind: bb88];
    }

    bb8: {
        StorageDead(_21);
        StorageDead(_19);
        _17 = <std::result::Result<RefMut<'_, PerpMarket>, error::ErrorCode> as Try>::branch(move _18) -> [return: bb9, unwind: bb88];
    }

    bb9: {
        StorageDead(_18);
        _22 = discriminant(_17);
        switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb4];
    }

    bb10: {
        StorageLive(_26);
        _26 = move ((_17 as Continue).0: std::cell::RefMut<'_, state::perp_market::PerpMarket>);
        _16 = move _26;
        StorageDead(_26);
        _15 = &mut _16;
        _226 = discriminant(_17);
        StorageDead(_17);
        StorageLive(_27);
        StorageLive(_28);
        StorageLive(_29);
        StorageLive(_30);
        StorageLive(_31);
        StorageLive(_32);
        StorageLive(_33);
        StorageLive(_34);
        StorageLive(_35);
        StorageLive(_36);
        StorageLive(_37);
        _219 = const _;
        _37 = &(*_219);
        _36 = &(*_37);
        _35 = move _36 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_36);
        StorageLive(_39);
        StorageLive(_40);
        StorageLive(_41);
        StorageLive(_42);
        StorageLive(_43);
        StorageLive(_44);
        StorageLive(_45);
        StorageLive(_46);
        StorageLive(_47);
        _47 = &(*_15);
        _46 = <RefMut<'_, PerpMarket> as Deref>::deref(move _47) -> [return: bb13, unwind: bb87];
    }

    bb11: {
        StorageLive(_23);
        _23 = ((_17 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_25);
        _25 = _23;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _25) -> [return: bb12, unwind: bb89];
    }

    bb12: {
        StorageDead(_25);
        StorageDead(_23);
        _224 = discriminant(_17);
        StorageDead(_17);
        goto -> bb79;
    }

    bb13: {
        StorageDead(_47);
        _45 = &((*_46).21: u16);
        _44 = &(*_45);
        _43 = core::fmt::rt::Argument::<'_>::new_display::<u16>(move _44) -> [return: bb14, unwind: bb87];
    }

    bb14: {
        StorageDead(_44);
        _42 = [move _43];
        StorageDead(_43);
        _41 = &_42;
        _40 = &(*_41);
        _39 = move _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_40);
        _34 = Arguments::<'_>::new_v1(move _35, move _39) -> [return: bb15, unwind: bb87];
    }

    bb15: {
        StorageDead(_39);
        StorageDead(_35);
        _33 = format(move _34) -> [return: bb16, unwind: bb87];
    }

    bb16: {
        StorageDead(_34);
        StorageDead(_46);
        StorageDead(_45);
        StorageDead(_42);
        StorageDead(_41);
        StorageDead(_37);
        _32 = move _33;
        StorageDead(_33);
        _31 = &_32;
        _30 = &(*_31);
        _29 = <String as Deref>::deref(move _30) -> [return: bb17, unwind: bb86];
    }

    bb17: {
        _28 = &(*_29);
        StorageDead(_30);
        _27 = solana_program::log::sol_log(move _28) -> [return: bb18, unwind: bb86];
    }

    bb18: {
        StorageDead(_28);
        drop(_32) -> [return: bb19, unwind: bb87];
    }

    bb19: {
        StorageDead(_32);
        StorageDead(_31);
        StorageDead(_29);
        StorageDead(_27);
        StorageLive(_48);
        StorageLive(_49);
        StorageLive(_50);
        _50 = &(*_15);
        _49 = <RefMut<'_, PerpMarket> as Deref>::deref(move _50) -> [return: bb20, unwind: bb87];
    }

    bb20: {
        StorageDead(_50);
        _48 = (((*_49).1: state::perp_market::AMM).5: u128);
        StorageDead(_49);
        StorageLive(_51);
        StorageLive(_52);
        StorageLive(_53);
        _53 = &(*_15);
        _52 = <RefMut<'_, PerpMarket> as Deref>::deref(move _53) -> [return: bb21, unwind: bb87];
    }

    bb21: {
        StorageDead(_53);
        _51 = (((*_52).1: state::perp_market::AMM).6: u128);
        StorageDead(_52);
        StorageLive(_54);
        StorageLive(_55);
        StorageLive(_56);
        _56 = &(*_15);
        _55 = <RefMut<'_, PerpMarket> as Deref>::deref(move _56) -> [return: bb22, unwind: bb87];
    }

    bb22: {
        StorageDead(_56);
        _54 = (((*_55).1: state::perp_market::AMM).10: u128);
        StorageDead(_55);
        StorageLive(_57);
        StorageLive(_58);
        StorageLive(_59);
        _59 = &(*_15);
        _58 = <RefMut<'_, PerpMarket> as Deref>::deref(move _59) -> [return: bb23, unwind: bb87];
    }

    bb23: {
        StorageDead(_59);
        _57 = (((*_58).1: state::perp_market::AMM).9: u128);
        StorageDead(_58);
        StorageLive(_60);
        StorageLive(_61);
        StorageLive(_62);
        _62 = &(*_15);
        _61 = <RefMut<'_, PerpMarket> as Deref>::deref(move _62) -> [return: bb24, unwind: bb87];
    }

    bb24: {
        StorageDead(_62);
        _60 = (((*_61).1: state::perp_market::AMM).8: u128);
        StorageDead(_61);
        StorageLive(_63);
        StorageLive(_64);
        StorageLive(_65);
        StorageLive(_66);
        StorageLive(_67);
        StorageLive(_68);
        _68 = &mut (*_15);
        _67 = <RefMut<'_, PerpMarket> as DerefMut>::deref_mut(move _68) -> [return: bb25, unwind: bb87];
    }

    bb25: {
        _66 = &mut (*_67);
        StorageDead(_68);
        StorageLive(_69);
        _69 = _2;
        StorageLive(_70);
        _70 = _3;
        StorageLive(_71);
        _71 = _4;
        _65 = move_price(move _66, move _69, move _70, move _71) -> [return: bb26, unwind: bb87];
    }

    bb26: {
        StorageDead(_71);
        StorageDead(_70);
        StorageDead(_69);
        StorageDead(_66);
        _64 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _65) -> [return: bb27, unwind: bb87];
    }

    bb27: {
        StorageDead(_65);
        _72 = discriminant(_64);
        switchInt(move _72) -> [0: bb28, 1: bb29, otherwise: bb4];
    }

    bb28: {
        StorageLive(_76);
        _76 = ((_64 as Continue).0: ());
        _63 = _76;
        StorageDead(_76);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_63);
        StorageLive(_77);
        StorageLive(_78);
        StorageLive(_79);
        StorageLive(_80);
        StorageLive(_81);
        StorageLive(_82);
        _82 = &(*_15);
        _81 = <RefMut<'_, PerpMarket> as Deref>::deref(move _82) -> [return: bb31, unwind: bb87];
    }

    bb29: {
        StorageLive(_73);
        _73 = ((_64 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_75);
        _75 = _73;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _75) -> [return: bb30, unwind: bb87];
    }

    bb30: {
        StorageDead(_75);
        StorageDead(_73);
        StorageDead(_67);
        StorageDead(_64);
        StorageDead(_63);
        goto -> bb78;
    }

    bb31: {
        _80 = &(*_81);
        StorageDead(_82);
        _79 = validate_perp_market(move _80) -> [return: bb32, unwind: bb87];
    }

    bb32: {
        StorageDead(_80);
        _78 = <std::result::Result<(), error::ErrorCode> as Try>::branch(move _79) -> [return: bb33, unwind: bb87];
    }

    bb33: {
        StorageDead(_79);
        _83 = discriminant(_78);
        switchInt(move _83) -> [0: bb34, 1: bb35, otherwise: bb4];
    }

    bb34: {
        StorageLive(_87);
        _87 = ((_78 as Continue).0: ());
        _77 = _87;
        StorageDead(_87);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        StorageLive(_88);
        StorageLive(_89);
        StorageLive(_90);
        _90 = &(*_15);
        _89 = <RefMut<'_, PerpMarket> as Deref>::deref(move _90) -> [return: bb37, unwind: bb87];
    }

    bb35: {
        StorageLive(_84);
        _84 = ((_78 as Break).0: std::result::Result<std::convert::Infallible, error::ErrorCode>);
        StorageLive(_86);
        _86 = _84;
        _0 = <std::result::Result<(), anchor_lang::error::Error> as FromResidual<std::result::Result<Infallible, error::ErrorCode>>>::from_residual(move _86) -> [return: bb36, unwind: bb87];
    }

    bb36: {
        StorageDead(_86);
        StorageDead(_84);
        StorageDead(_81);
        StorageDead(_78);
        StorageDead(_77);
        goto -> bb78;
    }

    bb37: {
        StorageDead(_90);
        _88 = (((*_89).1: state::perp_market::AMM).5: u128);
        StorageDead(_89);
        StorageLive(_91);
        StorageLive(_92);
        StorageLive(_93);
        _93 = &(*_15);
        _92 = <RefMut<'_, PerpMarket> as Deref>::deref(move _93) -> [return: bb38, unwind: bb87];
    }

    bb38: {
        StorageDead(_93);
        _91 = (((*_92).1: state::perp_market::AMM).6: u128);
        StorageDead(_92);
        StorageLive(_94);
        StorageLive(_95);
        StorageLive(_96);
        _96 = &(*_15);
        _95 = <RefMut<'_, PerpMarket> as Deref>::deref(move _96) -> [return: bb39, unwind: bb87];
    }

    bb39: {
        StorageDead(_96);
        _94 = (((*_95).1: state::perp_market::AMM).10: u128);
        StorageDead(_95);
        StorageLive(_97);
        StorageLive(_98);
        StorageLive(_99);
        _99 = &(*_15);
        _98 = <RefMut<'_, PerpMarket> as Deref>::deref(move _99) -> [return: bb40, unwind: bb87];
    }

    bb40: {
        StorageDead(_99);
        _97 = (((*_98).1: state::perp_market::AMM).9: u128);
        StorageDead(_98);
        StorageLive(_100);
        StorageLive(_101);
        StorageLive(_102);
        _102 = &(*_15);
        _101 = <RefMut<'_, PerpMarket> as Deref>::deref(move _102) -> [return: bb41, unwind: bb87];
    }

    bb41: {
        StorageDead(_102);
        _100 = (((*_101).1: state::perp_market::AMM).8: u128);
        StorageDead(_101);
        StorageLive(_103);
        StorageLive(_104);
        StorageLive(_105);
        StorageLive(_106);
        StorageLive(_107);
        StorageLive(_108);
        StorageLive(_109);
        StorageLive(_110);
        StorageLive(_111);
        StorageLive(_112);
        StorageLive(_113);
        _218 = const _;
        _113 = &(*_218);
        _112 = &(*_113);
        _111 = move _112 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_112);
        StorageLive(_115);
        StorageLive(_116);
        StorageLive(_117);
        StorageLive(_118);
        StorageLive(_119);
        StorageLive(_120);
        StorageLive(_121);
        _121 = &_48;
        _120 = &(*_121);
        _119 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _120) -> [return: bb42, unwind: bb87];
    }

    bb42: {
        StorageDead(_120);
        StorageLive(_122);
        StorageLive(_123);
        StorageLive(_124);
        _124 = &_88;
        _123 = &(*_124);
        _122 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _123) -> [return: bb43, unwind: bb87];
    }

    bb43: {
        StorageDead(_123);
        _118 = [move _119, move _122];
        StorageDead(_122);
        StorageDead(_119);
        _117 = &_118;
        _116 = &(*_117);
        _115 = move _116 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_116);
        _110 = Arguments::<'_>::new_v1(move _111, move _115) -> [return: bb44, unwind: bb87];
    }

    bb44: {
        StorageDead(_115);
        StorageDead(_111);
        _109 = format(move _110) -> [return: bb45, unwind: bb87];
    }

    bb45: {
        StorageDead(_110);
        StorageDead(_124);
        StorageDead(_121);
        StorageDead(_118);
        StorageDead(_117);
        StorageDead(_113);
        _108 = move _109;
        StorageDead(_109);
        _107 = &_108;
        _106 = &(*_107);
        _105 = <String as Deref>::deref(move _106) -> [return: bb46, unwind: bb85];
    }

    bb46: {
        _104 = &(*_105);
        StorageDead(_106);
        _103 = solana_program::log::sol_log(move _104) -> [return: bb47, unwind: bb85];
    }

    bb47: {
        StorageDead(_104);
        drop(_108) -> [return: bb48, unwind: bb87];
    }

    bb48: {
        StorageDead(_108);
        StorageDead(_107);
        StorageDead(_105);
        StorageDead(_103);
        StorageLive(_125);
        StorageLive(_126);
        StorageLive(_127);
        StorageLive(_128);
        StorageLive(_129);
        StorageLive(_130);
        StorageLive(_131);
        StorageLive(_132);
        StorageLive(_133);
        StorageLive(_134);
        StorageLive(_135);
        _217 = const _;
        _135 = &(*_217);
        _134 = &(*_135);
        _133 = move _134 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_134);
        StorageLive(_137);
        StorageLive(_138);
        StorageLive(_139);
        StorageLive(_140);
        StorageLive(_141);
        StorageLive(_142);
        StorageLive(_143);
        _143 = &_51;
        _142 = &(*_143);
        _141 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _142) -> [return: bb49, unwind: bb87];
    }

    bb49: {
        StorageDead(_142);
        StorageLive(_144);
        StorageLive(_145);
        StorageLive(_146);
        _146 = &_91;
        _145 = &(*_146);
        _144 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _145) -> [return: bb50, unwind: bb87];
    }

    bb50: {
        StorageDead(_145);
        _140 = [move _141, move _144];
        StorageDead(_144);
        StorageDead(_141);
        _139 = &_140;
        _138 = &(*_139);
        _137 = move _138 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_138);
        _132 = Arguments::<'_>::new_v1(move _133, move _137) -> [return: bb51, unwind: bb87];
    }

    bb51: {
        StorageDead(_137);
        StorageDead(_133);
        _131 = format(move _132) -> [return: bb52, unwind: bb87];
    }

    bb52: {
        StorageDead(_132);
        StorageDead(_146);
        StorageDead(_143);
        StorageDead(_140);
        StorageDead(_139);
        StorageDead(_135);
        _130 = move _131;
        StorageDead(_131);
        _129 = &_130;
        _128 = &(*_129);
        _127 = <String as Deref>::deref(move _128) -> [return: bb53, unwind: bb84];
    }

    bb53: {
        _126 = &(*_127);
        StorageDead(_128);
        _125 = solana_program::log::sol_log(move _126) -> [return: bb54, unwind: bb84];
    }

    bb54: {
        StorageDead(_126);
        drop(_130) -> [return: bb55, unwind: bb87];
    }

    bb55: {
        StorageDead(_130);
        StorageDead(_129);
        StorageDead(_127);
        StorageDead(_125);
        StorageLive(_147);
        StorageLive(_148);
        StorageLive(_149);
        StorageLive(_150);
        StorageLive(_151);
        StorageLive(_152);
        StorageLive(_153);
        StorageLive(_154);
        StorageLive(_155);
        StorageLive(_156);
        StorageLive(_157);
        _216 = const _;
        _157 = &(*_216);
        _156 = &(*_157);
        _155 = move _156 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_156);
        StorageLive(_159);
        StorageLive(_160);
        StorageLive(_161);
        StorageLive(_162);
        StorageLive(_163);
        StorageLive(_164);
        StorageLive(_165);
        _165 = &_54;
        _164 = &(*_165);
        _163 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _164) -> [return: bb56, unwind: bb87];
    }

    bb56: {
        StorageDead(_164);
        StorageLive(_166);
        StorageLive(_167);
        StorageLive(_168);
        _168 = &_94;
        _167 = &(*_168);
        _166 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _167) -> [return: bb57, unwind: bb87];
    }

    bb57: {
        StorageDead(_167);
        _162 = [move _163, move _166];
        StorageDead(_166);
        StorageDead(_163);
        _161 = &_162;
        _160 = &(*_161);
        _159 = move _160 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_160);
        _154 = Arguments::<'_>::new_v1(move _155, move _159) -> [return: bb58, unwind: bb87];
    }

    bb58: {
        StorageDead(_159);
        StorageDead(_155);
        _153 = format(move _154) -> [return: bb59, unwind: bb87];
    }

    bb59: {
        StorageDead(_154);
        StorageDead(_168);
        StorageDead(_165);
        StorageDead(_162);
        StorageDead(_161);
        StorageDead(_157);
        _152 = move _153;
        StorageDead(_153);
        _151 = &_152;
        _150 = &(*_151);
        _149 = <String as Deref>::deref(move _150) -> [return: bb60, unwind: bb83];
    }

    bb60: {
        _148 = &(*_149);
        StorageDead(_150);
        _147 = solana_program::log::sol_log(move _148) -> [return: bb61, unwind: bb83];
    }

    bb61: {
        StorageDead(_148);
        drop(_152) -> [return: bb62, unwind: bb87];
    }

    bb62: {
        StorageDead(_152);
        StorageDead(_151);
        StorageDead(_149);
        StorageDead(_147);
        StorageLive(_169);
        StorageLive(_170);
        StorageLive(_171);
        StorageLive(_172);
        StorageLive(_173);
        StorageLive(_174);
        StorageLive(_175);
        StorageLive(_176);
        StorageLive(_177);
        StorageLive(_178);
        StorageLive(_179);
        _215 = const _;
        _179 = &(*_215);
        _178 = &(*_179);
        _177 = move _178 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_178);
        StorageLive(_181);
        StorageLive(_182);
        StorageLive(_183);
        StorageLive(_184);
        StorageLive(_185);
        StorageLive(_186);
        StorageLive(_187);
        _187 = &_57;
        _186 = &(*_187);
        _185 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _186) -> [return: bb63, unwind: bb87];
    }

    bb63: {
        StorageDead(_186);
        StorageLive(_188);
        StorageLive(_189);
        StorageLive(_190);
        _190 = &_97;
        _189 = &(*_190);
        _188 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _189) -> [return: bb64, unwind: bb87];
    }

    bb64: {
        StorageDead(_189);
        _184 = [move _185, move _188];
        StorageDead(_188);
        StorageDead(_185);
        _183 = &_184;
        _182 = &(*_183);
        _181 = move _182 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_182);
        _176 = Arguments::<'_>::new_v1(move _177, move _181) -> [return: bb65, unwind: bb87];
    }

    bb65: {
        StorageDead(_181);
        StorageDead(_177);
        _175 = format(move _176) -> [return: bb66, unwind: bb87];
    }

    bb66: {
        StorageDead(_176);
        StorageDead(_190);
        StorageDead(_187);
        StorageDead(_184);
        StorageDead(_183);
        StorageDead(_179);
        _174 = move _175;
        StorageDead(_175);
        _173 = &_174;
        _172 = &(*_173);
        _171 = <String as Deref>::deref(move _172) -> [return: bb67, unwind: bb82];
    }

    bb67: {
        _170 = &(*_171);
        StorageDead(_172);
        _169 = solana_program::log::sol_log(move _170) -> [return: bb68, unwind: bb82];
    }

    bb68: {
        StorageDead(_170);
        drop(_174) -> [return: bb69, unwind: bb87];
    }

    bb69: {
        StorageDead(_174);
        StorageDead(_173);
        StorageDead(_171);
        StorageDead(_169);
        StorageLive(_191);
        StorageLive(_192);
        StorageLive(_193);
        StorageLive(_194);
        StorageLive(_195);
        StorageLive(_196);
        StorageLive(_197);
        StorageLive(_198);
        StorageLive(_199);
        StorageLive(_200);
        StorageLive(_201);
        _214 = const _;
        _201 = &(*_214);
        _200 = &(*_201);
        _199 = move _200 as &[&str] (PointerCoercion(Unsize));
        StorageDead(_200);
        StorageLive(_203);
        StorageLive(_204);
        StorageLive(_205);
        StorageLive(_206);
        StorageLive(_207);
        StorageLive(_208);
        StorageLive(_209);
        _209 = &_60;
        _208 = &(*_209);
        _207 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _208) -> [return: bb70, unwind: bb87];
    }

    bb70: {
        StorageDead(_208);
        StorageLive(_210);
        StorageLive(_211);
        StorageLive(_212);
        _212 = &_100;
        _211 = &(*_212);
        _210 = core::fmt::rt::Argument::<'_>::new_display::<u128>(move _211) -> [return: bb71, unwind: bb87];
    }

    bb71: {
        StorageDead(_211);
        _206 = [move _207, move _210];
        StorageDead(_210);
        StorageDead(_207);
        _205 = &_206;
        _204 = &(*_205);
        _203 = move _204 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        StorageDead(_204);
        _198 = Arguments::<'_>::new_v1(move _199, move _203) -> [return: bb72, unwind: bb87];
    }

    bb72: {
        StorageDead(_203);
        StorageDead(_199);
        _197 = format(move _198) -> [return: bb73, unwind: bb87];
    }

    bb73: {
        StorageDead(_198);
        StorageDead(_212);
        StorageDead(_209);
        StorageDead(_206);
        StorageDead(_205);
        StorageDead(_201);
        _196 = move _197;
        StorageDead(_197);
        _195 = &_196;
        _194 = &(*_195);
        _193 = <String as Deref>::deref(move _194) -> [return: bb74, unwind: bb81];
    }

    bb74: {
        _192 = &(*_193);
        StorageDead(_194);
        _191 = solana_program::log::sol_log(move _192) -> [return: bb75, unwind: bb81];
    }

    bb75: {
        StorageDead(_192);
        drop(_196) -> [return: bb76, unwind: bb87];
    }

    bb76: {
        StorageDead(_196);
        StorageDead(_195);
        StorageDead(_193);
        StorageDead(_191);
        StorageLive(_213);
        _213 = ();
        _0 = std::result::Result::<(), anchor_lang::error::Error>::Ok(move _213);
        StorageDead(_213);
        StorageDead(_100);
        StorageDead(_97);
        StorageDead(_94);
        StorageDead(_91);
        StorageDead(_88);
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        drop(_16) -> [return: bb77, unwind: bb88];
    }

    bb77: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb80;
    }

    bb78: {
        StorageDead(_60);
        StorageDead(_57);
        StorageDead(_54);
        StorageDead(_51);
        StorageDead(_48);
        drop(_16) -> [return: bb79, unwind: bb88];
    }

    bb79: {
        StorageDead(_16);
        StorageDead(_15);
        goto -> bb80;
    }

    bb80: {
        return;
    }

    bb81 (cleanup): {
        drop(_196) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb82 (cleanup): {
        drop(_174) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb83 (cleanup): {
        drop(_152) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb84 (cleanup): {
        drop(_130) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb85 (cleanup): {
        drop(_108) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb86 (cleanup): {
        drop(_32) -> [return: bb87, unwind terminate(cleanup)];
    }

    bb87 (cleanup): {
        drop(_16) -> [return: bb88, unwind terminate(cleanup)];
    }

    bb88 (cleanup): {
        resume;
    }

    bb89 (cleanup): {
        _230 = discriminant(_17);
        goto -> bb88;
    }

    bb90 (cleanup): {
        _231 = discriminant(_6);
        goto -> bb88;
    }
}
