// MIR for `math::orders::order_satisfies_trigger_condition` after PreCodegen

fn math::orders::order_satisfies_trigger_condition(_1: &Order, _2: u64) -> std::result::Result<bool, error::ErrorCode> {
    debug order => _1;
    debug oracle_price => _2;
    let mut _0: std::result::Result<bool, error::ErrorCode>;
    let mut _3: isize;
    let mut _4: bool;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: bool;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: error::ErrorCode;
    let mut _11: &{closure@programs/drift/src/error.rs:647:9: 647:11};
    let _12: {closure@programs/drift/src/error.rs:647:9: 647:11};
    let mut _13: ();
    let mut _14: &{closure@programs/drift/src/error.rs:647:9: 647:11};

    bb0: {
        _3 = discriminant(((*_1).21: state::user::OrderTriggerCondition));
        switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1];
    }

    bb1: {
        StorageLive(_10);
        StorageLive(_11);
        _14 = const _;
        _11 = &(*_14);
        StorageLive(_13);
        _13 = ();
        _10 = <{closure@programs/drift/src/error.rs:647:9: 647:11} as Fn<()>>::call(move _11, move _13) -> [return: bb4, unwind continue];
    }

    bb2: {
        StorageLive(_4);
        StorageLive(_5);
        _5 = _2;
        StorageLive(_6);
        _6 = ((*_1).5: u64);
        _4 = Gt(move _5, move _6);
        StorageDead(_6);
        StorageDead(_5);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _4);
        StorageDead(_4);
        goto -> bb5;
    }

    bb3: {
        StorageLive(_7);
        StorageLive(_8);
        _8 = _2;
        StorageLive(_9);
        _9 = ((*_1).5: u64);
        _7 = Lt(move _8, move _9);
        StorageDead(_9);
        StorageDead(_8);
        _0 = std::result::Result::<bool, error::ErrorCode>::Ok(move _7);
        StorageDead(_7);
        goto -> bb5;
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_11);
        _0 = std::result::Result::<bool, error::ErrorCode>::Err(move _10);
        StorageDead(_10);
        goto -> bb5;
    }

    bb5: {
        return;
    }
}
